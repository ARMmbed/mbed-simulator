{"version":3,"sources":["/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/aes.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/asn1parse.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/asn1write.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/base64.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/bignum.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ecp.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/error.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ccm.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ecdsa.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/cipher.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/inc/mbedtls/cipher.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/cipher_wrap.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ctr_drbg.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/debug.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ecdh.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ecp_curves.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/entropy.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/entropy_poll.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-http/http_parser/http_parser.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/events/EventQueue.cpp","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/events/mbed_shared_queues.cpp","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/events/equeue/equeue.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/events/equeue/equeue_posix.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/frameworks/mbed-trace/source/mbed_trace.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/frameworks/nanostack-libservice/mbed-client-libservice/common_functions.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/frameworks/nanostack-libservice/source/libip6string/ip6tos.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/frameworks/nanostack-libservice/source/libip6string/stoip6.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/platform/Callback.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/events/EventQueue.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/gcm.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/hmac_drbg.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/md.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/md_wrap.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/oid.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/pem.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/pk.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/pk_wrap.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/pkparse.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/platform_util.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/rsa.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/easy-connect/EthernetInterface.cpp","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/netsocket/NetworkInterface.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/easy-connect/EthernetInterface.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/lora-radio-drv/SX1276_LoRaRadio.cpp","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/netsocket/NetworkStack.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ssl_cli.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/inc/mbedtls/ssl_internal.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/inc/mbedtls/ssl_ciphersuites.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ssl_srv.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/sha512.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ssl_ciphersuites.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/rsa_internal.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/sha256.c"],"names":[],"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A;AACA;;;;AAKA;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA;;;;;AAEA;;AAQA;;;;;;;;;;;AACA;;;;;;;;;;AA7EA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AACA;;;;;;;;;;;AAAA;;;;;;;;;;AAAA;;;;;;;AAGA;;;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;AAqDA;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtioz/BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAimCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;AA/mCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxDA;AAAA;;;AAGA;AAAA;AAAA;;;;;;;;;;;;AA2lDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxBA;AAAA;;;;;;;;;;;AAbA;;;;;AAyBA;AAtJA;;;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApkCA;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6PA;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;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AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAEA;AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyqBA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;ADcA;AAEA;AAEA;;;;;;;;;AA3nBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9XA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+kCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;;;;AAGA;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAzjCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;AAmjCA;;;;;AACA;;;;;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9kCA;;;AAJA;AAAA;;;;;;;;;;;;;;;;;;;;AAu5BA;;;;;;AAvMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;;;;;;;;;;;;;;AAUA;;;;;;AAtOA;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAGA;;;;;;;;AAsLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AA9KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;AA8KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AA55BA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAk4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AA1CA;;AAAA;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAj2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8yBA;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;AAvxBA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;AA6xBA;;;;;AACA;AAJA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAn1BA;;;;;;;;;;;;;;;;;;;;;;;;AAk2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkMA;;;;;;;;AAAA;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;;;;;;;;;;;;;;AACA;;;;AAAA;;;;;;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;AAAA;;;AACA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;;;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AACA;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AACA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;AAkDA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9IA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzPA;;;;;;AAAA;;AAAA;;;;;;;AA6kBA;;AAnkBA;;;;;;AAvwBA;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;AAkuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;;;;;;;;;;;AA4fA;;AAzsCA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;AAGA;;;;AAZA;;;;;AAsLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzLA;AAAA;;;;AAKA;;;;AAUA;;;;AAVA;;;;;;;;;;;;;;;;;AAoLA;;;;AApLA;;;AAGA;;;;;AAEA;AApDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;;;;;;;;;;;;;;;AAPA;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;;;;;;;;;;;;;;;;AAwQA;;;;;;;;;;;;;;;;;AArBA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAo+BA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAvgBA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;AAGA;;;AAAA;;;AACA;;AAAA;AAAA;;;;;;AAEA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;AAEA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;;;;AAAA;;;;AAqfA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AAIA;AA3HA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAvnCA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAOA;AACA;AAAA;AAAA;;;;;;;AAuKA;AAAA;AAAA;;;;;;;;;;;;;;AAukCA;AACA;AAAA;AAAA;AAAA;;;;;AACA;AA7KA;AACA;AAAA;AAAA;;;;;;;;;;;;;;AA4KA;;;;;;;AAGA;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAviBA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;AAGA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;;AAGA;;;AAAA;;;AACA;;;;AAEA;AACA;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;;;;AAAA;;;;AAqhBA;;;;;;;;;AAEA;AAAA;AAAA;AAtLA;AACA;AACA;AACA;;AAEA;;;;;;;AAiLA;;;;;AACA;;AAAA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AA7iBA;;AACA;AAAA;;;;;;;;;;;;AAUA;AAoiBA;;;;;AAEA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;AApwCA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;;AAGA;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AAlkBA;AAAA;AACA;;;AADA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAUA;AAyjBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AApzCA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;;;;AANA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AARA;AAAA;AAAA;AAAA;;;;;;AAxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;;AAxBA;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;AAKA;;AAszCA;;;;;;;;;;;AAvsBA;AACA;AAtVA;AAAA;AAAA;;;;AAIA;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAnBA;AAAA;;;AAAA;;;;AAEA;AAJA;AAAA;AAEA;AAAA;AAFA;;;;;;;;;;;AA0BA;;;AA+UA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AA3mBA;;;AA2oBA;;AAxoBA;;AAEA;AAAA;;;AAsoBA;;AAnoBA;AAAA;AAAA;;;;;AAEA;;AApDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAsDA;AAAA;;;;;;AAGA;AACA;;;;;;;;AAkmBA;;AAEA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;;;;;;;;;AAGA;;;;AAAA;AACA;;;AAMA;;;AAaA;;AAXA;AAAA;;;AAWA;;;;;;AATA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;AAAA;AAAA;;;;;;;;AAWA;;;;;;;;;;AAWA;AACA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAMA;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;;;;;;;;;AAGA;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;AAOA;AAEA;AAFA;;;AAYA;;;;;;;AARA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AAUA;;;AAprBA;;AAEA;AAAA;;;AAkrBA;;AA/qBA;AAAA;AAAA;;;;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;AACA;;;;;AAbA;;;AAoLA;AAEA;AAAA;AACA;;AA6fA;;;;;;;;;;;AAnIA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;;;AApjBA;;;;;;;AArBA;AAAA;AAAA;;;AAxBA;;AAAA;;;;;;;;;;;;;;;;;;;;AA2BA;;;AAhBA;;;;;;AAkCA;;;AAEA;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkjBA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAIA;;;;;;;;;AArTA;AAAA;AAAA;;AAoUA;;AAMA;;AAtUA;;;;;;;;;;;;;;;;;;;;;AAnBA;AAAA;;;AAAA;;;;AAEA;AAJA;AAAA;AAEA;AAAA;AAFA;;;;;;;;;;;AA0BA;AAAA;AAwTA;;;AASA;;AANA;AAEA;;;AAIA;;;;;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;;AAIA;;;;;;;;AAoIA;AAAA;AACA;;;AADA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;AACA;;;AADA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;AAgBA;;AAbA;;AAAA;;AAaA;;AAZA;;AAAA;AAAA;;AAYA;;AAVA;AAAA;;;;;;AAUA;;;;;;;;;;;;;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;;;AAAA;;AAIA;;;AAAA;;;;;;;;;;;AAUA;AAAA;AAAA;AACA;AAAA;AAnCA;AAAA;AACA;;;AADA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAIA;AAAA;;;AA+BA;;AA5BA;;AAAA;;AA4BA;;AA3BA;;AAAA;;AA2BA;;AAzBA;AAAA;AAAA;AAAA;;;AAyBA;;AAxBA;AAAA;AAAA;;;AAwBA;;;;;AAtBA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;;;AAAA;;AAmBA;;;AAAA;;;;;;;;;;;;AAvCA;AAAA;AACA;;AADA;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAUA;AA4lBA;;;AAcA;;;;AAXA;;;;;;;;;;;;;;;;AAAA;;;AAWA;;;;;AArnBA;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AA4mBA;;;;;;;AAAA;;;;;;;;;;;;AA7mBA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;AAGA;;;AAAA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;;;;AAAA;;;;AA2lBA;;;;;;;;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArnBA;AAAA;AACA;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAu8BA;;AA77BA;AA4vBA;;;AAiMA;;AAjMA;AAAA;AAAA;;;AAiMA;;AAx8BA;AAAA;AACA;;;AADA;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAUA;AA+vBA;;;AA8LA;;;AA/QA;AAAA;AAAA;AAAA;AAGA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAEA;AA37CA;AACA;AAAA;AACA;AAAA;AAFA;AACA;AAAA;AACA;AAAA;AAFA;AACA;AAAA;AACA;AAAA;AA8gDA;AAjuCA;;;;;;;;;AAGA;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAnBA;;;;AAEA;AAJA;AAAA;AAEA;AAAA;AAFA;;;;;;;;;;;;;;;;AAuvCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9+CA;AAAA;AAAA;AAAA;;;;;;;;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AAAA;;;;;;AAGA;AACA;AA6+CA;AA1/CA;;;;;AAAA;;;;;;;;;AAEA;AAAA;;;;;AAGA;AAOA;AACA;AA8+CA;AA9/CA;;;;;AAKA;AAAA;;;;;AAUA;AACA;;;AAm/CA;AAAA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;;;;AAOA;;;;AAAA;AAAA;AAAA;;;;AAUA;;;;AArhDA;AAAA;;AAEA;AAAA;;;;;AAGA;AAAA;;;;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AAAA;;;;;;AAGA;AACA;;;;AAbA;;;;;;AAuLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAu1CA;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApzBA;AACA;;AAAA;;;;;;;;;AAIA;AAAA;;;;;;;AAGA;AAAA;;;;;AAGA;;;AAAA;;;;AACA;;AAAA;AAAA;;;;;AAEA;AAAA;;AAAA;AAAA;;;;;;;;;;AAGA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;;AA2yBA;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhFA;;;AAsFA;;AASA;AAjjDA;;AAGA;;;AAEA;AAAA;;;;;AAGA;;;;;;AAEA;AAAA;;AApq4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzpCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxDA;;;AA+6CA;;AA56CA;AAAA;;;AA46CA;;;AApWA;AACA;AAGA;AAAA;AAAA;;;AAQA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAUA;AAEA;AAAA;AAAA;;;AAIA;AAAA;AACA;AAAA;AAAA;AAMA;;;;AAAA;AAAA;AAEA;;;;;;;;;;AAEA;AAAA;AACA;;;;;AAjhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAs2BA;;;;;;;AAKA;AACA;AA92BA;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;AAEA;;;;;;;;AA42BA;;;;;AAIA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AA92BA;AAAA;AAAA;;;;;;;;;;;;;AACA;;;;;;AAAA;;;;;AACA;AAAA;;AAAA;;;;;;;AA42BA;;;;;;;;;AAEA;;;;;;;AAAA;AADA;;;;;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAUA;;;;;;;AAAA;AAEA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAHA;;;;;;;;;AAHA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA;;;;;;;;;AAIA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA9OA;AAAA;AAGA;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;;AADA;;;;;;;AADA;AAAA;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAXA;AAAA;;;;;;;;AA75BA;AACA;AAAA;AACA;AAAA;AAqhCA;AAAA;AApCA;AAAA;AAAA;AAGA;;;AA5YA;;;;;AA4YA;;;AAEA;AAAA;;AAAA;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;AAAA;AAHA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/YA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAmZA;AAlZA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwaA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;;AA7MA;AAAA;AAAA;AAAA;;;;;;;;;;AAMA;;;;;AAEA;AAAA;;;;;AACA;;;;;;;AAAA;;;;;;AAEA;;;;;AAAA;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLA;AAAA;;;;;;AAEA;;;;;;;AAAA;;;;;AACA;AAAA;;;;;;;;;AArbA;;AAmZA;AAlZA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;AAGA;;;;;;;AAgbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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AzyBA;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;AA4yBA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoMA;;;;;AAGA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;AAAA;AACA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;AAAA;AAAA;;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;AAAA;;AAEA;;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAHA;AAAA;AAAA;A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;;;;;;;;;;;;;;;;;;;AAuuCA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;AApiGA;;;;;;;;;AAGA;;;;AACA;AAAA;;;;;AAEA;AAAA;;AAQA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;AA7EA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;;;;;;;AAAA;;;;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;AACA;;;;;;;;AAAA;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;AACA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;AAAA;;;;;;;;AACA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;;;;;;AAGA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AACA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;AACA;;;;;;AAAA;;;;;;;;;;;;;;AAqh3CA;;;;;;AAAA;;;;;;AACA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;AAKA;;;;;;AACA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AAAA;AADA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0wBA;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6hCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlwDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALA;AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;AAZA;;;;AAuLA;;;;AA8lDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA/nCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAppBA;;;;;;;;;;;;;;AAOA;;;AAIA;;;;;;AAgqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAHA;;;;;;;;;;;;;;;AAinCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzxDA;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;AA8KA;;;AAqfA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAheA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAqfA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;AAumCA;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;;;;AA7oCA;AAAA;;AAppBA;AAAA;;;;;AAGA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AA6nCA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;;;;;;;AAAA;;;;;;AAppCA;AAAA;;AAppBA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;;;AAxqBA;AAAA;;;;;;;;AAGA;;;;;;;;;;;;;;AAQA;AAyKA;AACA;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AAynCA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAxkCA;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;;;AAGA;;;AAAA;;;;AACA;;AAAA;AAAA;;;;;AAEA;AAAA;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;;;AAEA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;;AAkknmCA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAUA;AA0lCA;;;;;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArmCA;;;;;;;;;;;;;;AAIA;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;AAEA;;;;AAEA;;;;;;;;;;;;;;AAslCA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA31DA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAAA;AAAA;;;;;;;;;;AAi2DA;;;;;;;;;AG34DA;;;;;;;;;;AAWA;AACA;;;;;;;;AAGA;;;;;AAGA;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;AAAA;;;AAUA;;;AAPA;;;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;;;;AACA;;;;;;;;AACA;;;;;;;;;;;;;;;;AAiNA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3JA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAUA;AAeA;AAAA;AACA;AACA;;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;;;;;;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;;;;;;;;;AAGA;;;AA8GA;;AAxGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAwGA;;;;;AA5FA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAmFA;;AAjFA;;AAJA;;;AAMA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;;;AAEA;AACA;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AAAA;AAEA;AACA;;;;;;;;;;;;AAcA;AAAA;;AASA;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAKA;;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AFqzfA;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;AAkgDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAj4CA;;;;;;;;;;;;;;;;;;;;;;;;;AAi5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAVA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA;;;;;;;;;AAhoDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8oDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;;;;;;;;;;;;;;;;;;;;;;;;;AAjDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AA+BA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AA5BA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AA2BA;;;;;;;;AAhvDA;AA2FA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsoDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzsDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AUibA;;;;;;;;;;;;;;;;;;;;;;AAoBA;AAAA;AAxLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AADA;;;;;;;;AAAA;AACA;;AAFA;AACA;AAAA;;AAUA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAmLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAxNA;;;;;;;;AACA;;;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAWA;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;;;;;AAAA;;;AAEA;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;AACA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAjtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAuGA;;;;AAlGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAkGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAjGA;;;;;;;;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAyGA;;;;;;;AApGA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AADA;;;;;;;AAqGA;;AArGA;;;AAqGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AArGA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;;;AAKA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;AAwGA;;;;;;AA9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;AAKA;AAAA;;AACA;;;AA0GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AA3GA;;;;;;;;;;;;;;;AALA;;;;;;;AAAA;AAAA;;AADA;;;AAAA;AACA;AAAA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AA8GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AA9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAAA;;AANA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AADA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAKA;;;;;;;AACA;;AAmHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;AAzHA;;;;AADA;;AAAA;AACA;AAAA;;;AAMA;;;;AADA;;;;AAuHA;;;;;;;AAAA;;;;;;;;AAvHA;;;;;AAyDA;;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AA1IA;;;AACA;;AAAA;;;;;AAAA;;AA4IA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AA7IA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AADA;;;;;;AAMA;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AADA;;;;;;AACA;;;;AA+IA;;;;;;;;;;;;;;;;;AAhJA;;;;;;;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;AAuJA;;;AAxJA;;AACA;;AAAA;AAAA;;AAAA;AAAA;;;;;AAAA;AAAA;;AAMA;AAAA;;;AADA;;;;;AAAA;AAmJA;;;;;;;;;;;;;;;AAxJA;;AAAA;AAAA;;;;;;;AAAA;AAAA;;;;AAAA;;;;;;;;AA2JA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AArJA;;AANA;;;;AAAA;;;AA6JA;;AA7JA;;;AADA;AACA;AAAA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAKA;;AAyJA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AA9JA;AAAA;;;;;AADA;AACA;AAAA;;AAMA;AA2JA;;;AAAA;AAAA;AA5JA;AACA;;AANA;;;;;;;;;;;;;;;;;AAAA;;AADA;;;;;;;;;;;;;;;;;;;AAqKA;AAAA;;AA/JA;;;;AANA;;;;;;AACA;AAAA;AAAA;AAAA;;;;;;AAuKA;;;;AAlKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AANA;AACA;AAAA;AAAA;AADA;AACA;AAKA;AACA;AAoKA;;AAAA;;;;;;;AA1KA;;;;;;;;AADA;;;;;;;;AAMA;AACA;AAuKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AAAA;;;;;;AAMA;;;AAmBA;;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;;;;;;AAIA;AAAA;AAAA;AAAA;;;;;AAEA;;;;;AAGA;AAAA;AAAA;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAqBA;;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAeA;;;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAcA;;AATA;AAAA;;AAAA;AAAA;AAAA;AACA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;AACA;;;AAKA;;;AAJA;;;;;;;;;;;;;;;;;AAIA;;;;;;AC7uCA;AAOA;AAEA;AARA;AAQA;AA8EA;AACA;;AAnCA;;AAyCA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AA9CA;;;;;;AAWA;;AAAA;;;;;;;;;AAOA;AAAA;AACA;;AAAA;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;AAgDA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;;;;;AASA;AAAA;;;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;AAAA;AAAA;;;;;;;AA7BA;AAAA;AAAA;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAWA;;;;;;AACA;;;;;AAEA;AAAA;AAAA;;AApBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAAA;;;;;AAOA;;;;;;;AAHA;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;AA8BA;;;AA4GA;;;;;;AAnFA;AAAA;;;;;;AAMA;;;;;;;AAAA;;;;;AAIA;AAAA;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAQA;AAAA;AAAA;;;AAMA;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;;AAEA;AACA;;;AAMA;;;;;;;;;;;;;;;;;;;;AA0BA;;;;AACA;AAAA;AADA;AAAA;;;;;;;;AAGA;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;AAQA;;;;;;;;;AC9OA;AAAA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AXfonBA;;AAjnpPA;;;;;AAEA;;;;;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlDA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;AAqsBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAAA;AAAA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAroCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAIA;;;;AAHA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AA0BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5BA;;;;AA+BA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;AApoGA;;;;;;;;;AAGA;;;;AACA;AAAA;;;;;AAEA;AAAA;;AAQA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;AA7EA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;;;;;;;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;AAAA;;;;;;AAAA;;;;;;;;;;AACA;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;;AACA;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;;;;;AACA;;;;;AAAA;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;AAAA;;;AACA;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;AACA;;;;;;;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAGA;;;;;;;;AAAA;;;;;;;;AACA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AACA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAqv4CA;AACA;AACA;AACA;AAYA;;;;;;;;;;AAWA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArBA;;;;AAAA;;;;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAYA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;AAAA;;;;;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AAAA;AAAA;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;AE3PA;;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwSA;;;;;;;;;;;;;;;;;;;;AAUA;;AAiBA;;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAKA;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAraA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmQA;;AA1LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;ACsIA;AD9HA;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;;;;;;;AA2KA;;;;;;;AA9JA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;;;;;AASA;AAEA;;;AAIA;AAAA;;AACA;;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;AAuBA;;;;;;AADA;;;;;;;;;AAOA;;;;;;AAGA;;;;;;;;;;;;AASA;;;;AACA;;;;;;;;;;;;;;;;;;;AA4DA;;;;;;;;;;;;;AA7BA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuRA;;;;;;;;;;AAAA;;;;AArEA;;;;;;;;AAqEA;;;;;;AAhDA;;;;;;AAGA;;;;;;;;;;;;;AC/NA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtCA;AAAA;AD6QA;AAAA;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAFA;;;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AClTA;;;;;;;;;ADsSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAleA;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;AA4kBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;AAAA;;AAGA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAaA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AAAA;;;;;;AAIA;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE7yBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2OA;;;;;;;;;;;;;AArQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAOA;;;;;;;AAoBA;;;;AAcA;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;;AAQA;;;;;;;AAgPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAQA;;;;;;;;;;;;;;;AAMA;;AAQA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;AAGA;;;AAOA;;AAAA;;;;;AAAA;;AAAA;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAMA;AAAA;;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;;;;;;;AAAA;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAKA;;;;;;AAWA;;;;;;;;;;;AAnBA;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAGA;;;;;;AAMA;;;AAKA;AAAA;;;;;;;;;;;AAnBA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AACA;;AAIA;;;;;AAWA;;;;AAeA;;;;AAKA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AAAA;AAAA;AAAA;;;;;;AAMA;AAAA;;;AAqBA;;AAhBA;;;AAZA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAMA;AAAA;;;AAqBA;;AAhBA;;;AAZA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAMA;AAAA;;;AAqBA;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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;;;;;;;;;;;;;;;;;;;;;;AA/iCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4PA;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;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AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAEA;AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3ykBA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AA0BA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAMA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;;AADA;AAEA;AAAA;AAAA;;AAAA;AAAA;AADA;AAAA;;AAIA;;AACA;AACA;AAAA;;AAAA;AAGA;AACA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AK+oBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzpCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAk0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAz3CA;;;AA+6CA;;AA56CA;AAAA;;;AA46CA;;;AApWA;AACA;AAGA;AAAA;AAAA;;;AAQA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAUA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;;;;AAAA;AAAA;AAEA;;;;;;;;;;AAEA;AAAA;;;;;AAhhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAs2BA;;;;;;;AAKA;AACA;AA92BA;;AAAA;;;;;;;AAAA;;;;;AACA;AAAA;;AAAA;;;;;;;AAAA;;;;;AACA;AAAA;;AAAA;;;;;;;AA42BA;;;;;AAIA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AA92BA;;AAAA;;;;;;;AAAA;;;;;AACA;AAAA;;AAAA;;;;;;;AAAA;;;;;AACA;AAAA;;AAAA;;;;;;;AA42BA;;;;;;;;AAEA;;;;;;;AAAA;AADA;;;;;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAUA;;;;;;;;;;;AAEA;;;;;;;;;;;;;;AACA;AAAA;AAHA;;;;;;;;;;AAHA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA;;;;;;;;;;AAIA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA9OA;AAAA;AAGA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AADA;AAAA;;;;;;;;;;AASA;AAAA;AAAA;;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAXA;AAAA;;;;;;;;AA75BA;AACA;AAAA;AACA;AAAA;AAqhCA;AAAA;AApCA;AAAA;AAAA;AAGA;;;AA5YA;;;;;AA4YA;;;AAEA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/YA;AAGA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAmZA;AAlZA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwaA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;;AA7MA;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAKA;;;;;;;AAAA;;;;;;AAEA;AAAA;;;;;AACA;;;;;;;AAAA;;;;;;AAEA;;;;AAAA;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AAGA;;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AAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAMA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;;AAGA;AADA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;;AACA;AAAA;AAAA;AACA;AAAA;;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AA2CA;;;;;;;;;;;;;;;;;;;;;;;;;;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A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Ab9kCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;A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;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;;AAjLA;;;;;;;;;;;;AAsLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;;AAEA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;;;AAMA;AAAA;AAAA;;;AADA;AAEA;;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACA;;AAAA;;AAAA;;AAAA;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAAA;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA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AAAA;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;;;AADA;;;;;AAAA;;;;;;;;;AAIA;;AAAA;;AAAA;;;;;AACA;;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;AACA;;;;AAAA;;;;;AAEA;;;;AACA;;;AAAA;;;;;;AAKA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;;AAAA;;AAAA;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;;AAAA;;AAAA;;AAAA;;;;;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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AA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;;;;;;;AASA;AAAA;AAAA;AADA;AACA;AADA;AACA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AATA;AAAA;;;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;AAuBA;;AAqCA;;AAlCA;AAAA;AACA;AAEA;AACA;AAEA;;;;AACA;AAAA;;AAEA;;;;AAQA;;AANA;AAAA;AAEA;;;AAQA;;AAEA;AAAA;AAAA;AAAA;;;AAAA;AAGA;AACA;AANA;;;;;;;AAEA;;;;;AAOA;;AAIA;;AAHA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;AA8BA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AA3EA;;AAIA;AAEA;AACA;AAEA;;AACA;AAAA;;AAEA;AAAA;AAAA;;;;AAEA;AAAA;AAKA;;;;AAKA;;AAEA;AAAA;;;AAAA;AAGA;AACA;AANA;;;;;;;AAEA;AAAA;;;;;AAOA;;AACA;AAAA;;;AA/BA;AAAA;AACA;AAEA;AACA;AAEA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAQA;AADA;;AAeA;;;;;AApBA;AAAA;AAEA;AAQA;;AAEA;AAAA;AAAA;;;AAAA;AAGA;AACA;AANA;;;;;;;AAEA;AAAA;;;;;AAOA;;;;;;;AACA;;AAijQA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;;;;;;;;;;;;;;;AA4BA;AAyIA;;;AAwBA;;AAEA;;;;AAAA;AAGA;AACA;AANA;;;;;;;AAEA;AAAA;AAOA;;;;;;;;;AACA;AAAA;;;AA4FA;;;;;;;;;;;;AAMA;;;;;;;;AHjTA;AACA;;;;;;AAIA;;;;AAGA;;;;;;;A5C88CA;;;;;;;AAAA;;AAAA;;;AAAA;;;;;;;AACA;;;;;;;;;;AAAA;;;AAAA;;;;;AACA;;;AAAA;;;;;;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;AACA;;;;AAAA;;;;;;;;;;;;AAAA;AAAA;;;AACA;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;AACA;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;AAAA;;;;;;;;AACA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;AAoDA;;;;;;AACA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;AALA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAA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;AAAA;AAAA;;;;;;;AAMA;AAAA;;;AAqBA;;AAhBA;;;AAZA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAMA;AAAA;;;AAqBA;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1BA;AAAA;AAKA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;;;;;;AAGA;;;;;;;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;;;;;;AAGA;AACA;AACA;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;;;;;;AADA;;;;AA5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;;AANA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;AAEA;;;AAgBA;;AAVA;;;AAUA;;;;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;AAGA;;;AAOA;;;AALA;;;;;;;;;;;AAKA;;;;;;AEhQA;AAAA;;;;;;;AACA;AAAA;;;;;AADA;AAAA;AAAA;AAAA;;;;;;;;;;AAKA;;;;;;;;;AAsBA;AAAA;;;AAOA;;;;;AANA;AAAA;AAAA;;;;;;AAEA;;;;;;;;AAHA;AAAA;;;;;;;;;AAOA;;;;;;;;AAIA;AACA;;;;;;;AAIA;;AAgBA;;AAZA;AAAA;AAAA;;;;AAEA;;;;;;;;;;;;AAEA;AAAA;;;;;AAIA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;AAEA;;;;;;;;AACA;;;;;;;;AAIA;AAAA;AAAA;;;AAsBA;;AAnBA;AAEA;AAAA;;;;AAAA;;;;;;;;;;;;AAAA;AAAA;AAAA;;;AAiBA;;AAdA;AA0iBA;AAAA;AAAA;;;AA5hBA;;;;;;;AAAA;;;;;;;;AAqSA;AAGA;;AAEA;;;;;AADA;AAAA;AAAA;AADA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;AAQA;AAAA;AAAA;;;AAiBA;;AAdA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAKA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ALs2BA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AACA;AACA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvgBA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;AAGA;;;AAAA;;;AACA;;AAAA;AAAA;;;;AAEA;AAAA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;AAEA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AACA;;;;;;;AAufA;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;AAAA;AA3HA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AA8HA;AAAA;;;;;AAGA;AAAA;AAAA;AAxvCA;AAAA;;AAEA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;AAsDA;AAAA;;;;;;;;;AA2KA;AAEA;AAAA;AACA;;;;;AAokCA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AA7KA;AACA;AACA;AACA;;AAEA;;;;;;;AAwKA;;;;;AAzkCA;AAEA;;;;AA0kCA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAviBA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;AAGA;;;;;AACA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;;AAGA;;;AAAA;;;AACA;;;;AAEA;AACA;;;;;;;AAEA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;;;;AAAA;;;;AAqhBA;;;;;;;;;AAEA;AAAA;AAAA;AAtLA;AACA;AACA;AACA;;AAEA;;;;;;;AAiLA;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;AACA;;;;;AA7iBA;;;;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;AAUA;AAoiBA;;;;;AAEA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;;AACA;AAAA;AAAA;;;AApwCA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAGA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;AAAA;;;;;;;AGroCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;AAIA;AACA;;;;AAOA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3BA;AAAA;AAKA;;AAAA;;;AACA;;;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;AAGA;;;;;;;;;;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;AAEA;;;;AAOA;AAAA;AAAA;;;;;;;;;;;;;;;;AA7BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AAAA;AADA;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAiCA;;;;;;;;;;;;AAkBA;;;;;;AATA;AAAA;AAAA;AADA;AAAA;;;;;AAUA;;;;;;;AAAA;;;AEhQA;;;;AACA;;;AADA;AAAA;;;;;;;;;;AA2BA;AAAA;;;;AAOA;AANA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AADA;AAAA;;;;;;AAOA;;;;;AAIA;;;AAKA;;AAIA;;AAEA;;;;;;;AAMA;;;AACA;;AAAA;;;;;;;;;AAEA;;;;AACA;;;;AAIA;AAAA;;;AAKA;AAAA;;;;;;;;;;;AAAA;;;;;;;;;AAiBA;;;;;;;;;;;;;;AA0SA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;;;AAEA;;;;;;AAQA;AAAA;;;AAGA;AACA;AAAA;AAIA;AAAA;;;;AAMA;AAAA;AAAA;AAAA;AADA;;;;;AAGA;;AACA;;;;;;;;AAyNA;AAAA;AAAA;;;;;;;;;;;;;;;;AAyCA;;;;AArIA;AAAA;;;;;;;;;;AA/ZA;AA5BA;AAAA;;;;AA4BA;;AAzBA;AAAA;;AACA;AAAA;;;AAKA;AAAA;AACA;AAAA;;AAKA;;;;;;;;;;;;AAaA;;;AAJA;AAAA;;;;;;AAIA;;AATA;AAAA;AAAA;AAAA;;;;;AASA;;;;;;;;;;;;;;;;;;;;;AAgEA;;;AAKA;;AAGA;;;AAkLA;;;AA1KA;;AADA;;;;;AA2KA;;AA/JA;AACA;;AAAA;;;;;;;;AA8JA;AApJA;AACA;AAAA;;;AAAA;;;;AAaA;;;AAAA;;;AAGA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAEA;AAGA;;AA4HA;;;;AAnHA;AAEA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;;;;;;;;;;;;;;AAAA;;AAOA;AAAA;;AAAA;;AAIA;AACA;;;AAkGA;;AA5FA;;;;;;AAWA;;;;;AAGA;AAAA;;;;;;AAKA;AAAA;AAGA;AAAA;AAAA;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;;;;;;;;;AA6DA;AAvDA;AAAA;AAuDA;;AA7BA;AAAA;AAAA;AACA;AACA;AAFA;;;;;;;;;;;;AA6BA;AAtBA;AAsBA;;;;;;;;;;;AAiLA;;;AAAA;AAAA;AAAA;;AAAA;;AA0EA;;AAvEA;AAEA;AAAA;;AAUA;AAAA;;;;AAWA;;AAGA;AAAA;AAEA;AAAA;;;ACjOA;AAAA;AAGA;;;;ADqOA;AAAA;;;;;;;;;;;;;;;;AC3QA;AD6QA;;;AAMA;AAAA;AAAA;;;AAOA;AAAA;AAAA;;AAAA;AAAA;AC7RA;;;AAGA;;AD2RA;;;;;;;;;;;;AAoBA;AAbA;;ACrSA;AAAA;AAAA;;;AD0SA;;;;;AAJA;;;;;;;ACnSA;;;;;;;;;;;AD+SA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1eA;AAGA;AAAA;;;;;;AAWA;AACA;AAAA;;;;;;;;;;AAslBA;AAAA;;;AASA;;;;;;;;;;;;;;;AANA;AAAA;;;AAMA;;AAHA;AAAA;;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ALtsBA;;;AAGA;;;;AAwKA;AAEA;AAtLA;;AAEA;;;AAGA;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;;AAGA;AACA;;;;AAbA;;;AAoLA;AAEA;AAAA;AACA;AAvLA;AAAA;;AAEA;AAAA;;;;;AAGA;AAAA;;;;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AAAA;;;;;;AAGA;AACA;;;;AAbA;;;AAoLA;AAEA;AAAA;AACA;AAvLA;AAAA;;AAEA;AAAA;;;;;AAGA;AAAA;;;;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AAAA;;;;;;AAGA;AACA;;;;AAbA;;;AAoLA;AAEA;AAAA;AACA;;;;AA8lDA;AAAA;AAAA;;;;AA/nCA;AAAA;;AAppBA;AAAA;;;;;AAGA;;;AAlDA;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AA+mCA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AAtoCA;AAAA;;AAppBA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;;AAqfA;AAAA;AAAA;;;;;;;AAtBA;;AAppBA;AAAA;;;;;;;;;;AA/CA;;;;;;;;;;;;;AAytBA;AAAA;AAAA;AAAA;;AAEA;AAJA;;;;;;;;AA2mCA;AAAA;AAAA;AAAA;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;;;;AA7oCA;AAAA;;AAppBA;AAAA;;;;;AAGA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AA6nCA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AAppCA;AAAA;;AAppBA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AApBA;AAAA;;AAppBA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AAynCA;;;;;;;;;;AAvkCA;;;;;;;;;;;;;;;;AAIA;;;;;;;;;AAGA;;;;AAGA;;;AAAA;;;;AACA;;AAAA;AAAA;;;;;AAEA;AAAA;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;;;AAEA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;;AAkkCA;;;;;;;AAQA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;AARA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AA1lCA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAUA;AAwlzhCA;AAUA;AAAA;AAAA;AAAA;AAGA;;;AAGA;;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AACA;AACA;AAAA;;AAGA;;;;;;;;AAMA;AAKA;AAAA;AAAA;AAtBA;;;;;;;;;;;;;;;;;;AAGA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ALqFA;AAAA;AAAA;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;;;AAzCA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;;;;;;AAGA;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;;;AAGA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;A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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;;;;;;AAGA;;;;;;;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;;;;;;AAGA;AACA;AACA;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;;AAAA;AAAA;;;;;;;;;AA5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A0B8BA;;;AAAA;;;AAAA;;AAAA;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;AAaA;;;;;AAAA;;;;;;AAAA;;;;AAAA;AAAA;;;;;;AAAA;;;;;;;;;AACA;;;;;;;;;;;AA4GA;;;AAAA;;;;AADA;;;;;;;AAAA;;;;;;AAAA;;;;;;;;AAAA;;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AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAMA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;;;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;AAAA;AAAA;AA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AA;;;AAwtBA;;AAvtBA;;AAAA;;;;;;;;;;;;;;;;;;;;AAutBA;;;AAhDA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;ACjkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAEA;;;;AAEA;;;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;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;;;;;;;;;AAAA;;;;;;;;;;AAAA;AACA;AAAA;;AAAA;;;;;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;AACA;;AAAA;;;;;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;AACA;;AAAA;;;;;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;AAQA;AAAA;;AAAA;;;;;;;;;;AACA;AAAA;;AAAA;;;;;;;;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;AADA;;;;;;;;;;;;;;;;;;;;;AAEA;;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADrvBA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;AA2KA;;;;AAimDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxwDA;AA0KA;;;;AAqfA;;AAEA;;;AA2mCA;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;;;;;;;AAAA;;;;;;AAtoCA;AAAA;;AAppBA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;;;;AAxqBA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AA2mCA;AAAA;AAAA;AAAA;;;;;;;;;;;AAcA;AAAA;AAAA;;;;;;;;;AAh1DA;;;;;;;AAyDA;AACA;AAyKA;;;;;AAsfA;AAAA;AAAA;;;;;;;;AA2nCA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AAppCA;AAAA;;AAppBA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;;AAsDA;;AAGA;AACA;AAyKA;AACA;;;;;AAqfA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAJA;;;;;;;;AApBA;AAAA;;AAppBA;AAAA;;;;;AAGA;AAAA;;;AAlDA;;;;;;;AAsDA;AAAA;;AAGA;AACA;AAyKA;AACA;;;;;AAqfA;AAAA;AAAA;AAAA;AACA;;;;;;AAsnCA;AAAA;AAAA;;;;;;;;;;;;AAxkCA;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;;;AAGA;;;AAAA;;;;;;AACA;AAAA;;;;;AAEA;AAAA;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;;;;AAEA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;;AAkkCA;;;;;;;;;;AAQA;;;;;;;;;;;AACA;;;;;;AACA;;;;;;;AAAA;;;;;;;;;;AARA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AACA;;;;;;;AAAA;;;;;;AA1lCA;;;;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAUA;AAwlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnDA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AA5wDA;;AAEA;AAAA;;;;AAGA;AAAA;;;;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AAAA;;;;;;;AATA;;AAoLA;AAEA;;AAtLA;AAAA;;AAEA;AAAA;;;;;AAGA;AAAA;;;;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;AACA;;;AAbA;;;AAoLA;AAEA;AAAA;AACA;AAvLA;AAAA;;AAEA;AAAA;;;;;AAGA;AAAA;;;;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Ack9DA;AAAA;;AAAA;AAAA;;;AA34CA;;;AA44CA;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;AAIA;;;AAGA;AAAA;;AAAA;AAAA;AAAA;AAr5CA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxJA;AAAA;AAAA;AAAA;;;;;;;AAOA;AAAA;;;;;AAIA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAIA;AAAA;AAAA;AAAA;AAJA;AAAA;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAJA;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAIA;AAAA;AAAA;AAAA;;;;;;;;AAWA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAwEA;;;;;;AAo+CA;;AAAA;;;;;;AAAA;;;;;;;AAOA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAsMA;AAAA;AAAA;AACA;AAGA;AAAA;;;AAHA;;;;AAIA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;AACA;AAAA;AAAA;AAAA;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;AAtDA;AAAA;;;;;;;;;AAyCA;AAAA;;;AAmBA;AAAA;;;AA6BA;;AAxBA;AAAA;;;;;AAhKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAEA;AAAA;;;;;;;;;;;AACA;;;AA3FA;;;;;AAIA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AA2HA;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;AAxHA;;;;AAIA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAsFA;AAAA;AAAA;AAAA;;;;;;;AA/EA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;AAOA;;;;;;;;;;AAgBA;;;;;;;;;;;;;AAeA;AAAA;;;;;;AAqDA;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;AAjFA;AAAA;;;AAAA;AAAA;;;;;;;;;;;AAIA;AAAA;AAAA;;;;;;;;;;;;;AA8DA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAlDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AbpnCA;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzVA;;;;AASA;AAAA;AAKA;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AACA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;AAxgBA;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkgDA;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;AAx+CA;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAu8CA;;;AAj5CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAi5CA;;;AAl5CA;;;;;;;;;;;;;;AAAA;;;;;AACA;AAAA;;AAAA;;;;;;;;;;;;;;;;AAAA;;;;;;AACA;;;;;;;;;;;AAs4CA;;;AAUA;;AATA;AAAA;;;AASA;;AARA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA;AAAA;AAAA;AAAA;AAnoDA;AAAA;AAAA;;;AA2sDA;;AAxsDA;AAAA;;;;;;;;;;;;AAyoDA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AyB3mDA;AAAA;AAIA;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;;;;;;;;;;;;ACjKA;;;AAIA;;;;AAKA;AAcA;AAdA;;;AAGA;;AACA;;;;;;;;;;AAEA;;AAGA;AAAA;;;;;;;;AACA;;;AAGA;;;;AACA;;;;;AA0BA;;AAmBA;AAhBA;;;;;;;;;AAAA;;AAgBA;AAbA;AAEA;AAAA;AAAA;;AAGA;AAAA;;;;;;AAKA;AAGA;;;AAIA;;;AAAA;;;AAGA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;AAIA;;;AAIA;;AADA;AAAA;;;;;;;;;;;AAKA;;;AAAA;;;AAGA;AAAA;AAAA;;;;;;;;;AAMA;;;AAGA;AAAA;;;;;;;;;;;;AAmDA;;;AAAA;;;AAAA;;AAsCA;AAnCA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;AAAA;AAEA;AAAA;;;;;;;;;;;;;AAGA;;;;;;;;;;;AAKA;AAGA;AAAA;AAEA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;;;;AAMA;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAEA;AAAA;AACA;;;;;;;;;;;AAIA;;;;;;;;;;;;;AAOA;;;AAAA;AAAA;;;;AAGA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAhBA;;;AAgBA;AAbA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;AAAA;;;AAEA;AAAA;AAAA;;;;;;;;;AAAA;;;AAEA;AAAA;AACA;AADA;;;;;;;;AACA;;;AAEA;AAAA;AACA;AADA;;;;;;;;AACA;;;AAEA;AAAA;AAAA;;;;;;;;;AAQA;;;AAAA;;;AAAA;;AASA;AAJA;AAAA;;;;;;;;;;AAIA;AAFA;AAAA;AACA;;;;;;AACA;;;;;AAqCA;AAJA;;AAIA;AADA;AAAA;;;;;;AACA;;;AAIA;;;AAGA;;;;;AC5DA;;;;AAMA;;;;AAMA;;;;;AAOA;;;;AAAA;;;;AAOA;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;A5BvUA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AARA;AAAA;;;AAEA;AA1BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAEA;;;;;AANA;AA1BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;AA3BA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;AAIA;AAPA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAIA;AAPA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAIA;;AAPA;;;AAEA;AA1BA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;AAIA;AAPA;;AAEA;;;;;;;;;;;;;;;;;;;AACA;;;AAIA;;;;;;;;AG7CA;;;;;;;;;;AA6BA;;AAAA;;;;;;;;;;;;;;AAVA;;;;;;;;;AAUA;;;;;;AAAA;;;;;;;;;;;;AAQA;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AAAA;AAAA;AAIA;AAAA;;AAJA;;;;;;;;;;;;;;;;AA2BA;;;;;;;;AAIA;AAAA;;;;;AACA;AAAA;;AAAA;;;;;AADA;;;;;;AAGA;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAYA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AAAA;;AAGA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AFyqCA;AAAA;AACA;;;;;AAjhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AACA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;AAAA;;;;;;AACA;;;;;AAAA;;;AACA;AAAA;;;;;;AAgaA;;;;;;;AAAA;AAAA;;;AAEA;;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;Aa7rBA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAJA;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;;AAYA;AAAA;AAAA;AAAA;;;AAIA;AAAA;;;;AAWA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;;;AAo+CA;;;AAAA;;;;AAOA;AAGA;AACA;AAAA;AACA;;;;;;;;AAuMA;AAIA;;AAHA;;;AAIA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AAAA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;AAtDA;AAAA;;;;;;;;;AAyCA;AAAA;;;AAmBA;AAAA;;;AA6BA;;AAxBA;AAAA;;;;;AAhKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAQA;;;;;;AACA;;AA3FA;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AA2HA;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;AAxHA;;;;AAIA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAsFA;AAAA;AAAA;AAAA;;;;;;;AA/EA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;AAOA;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;AAeA;AAAA;;;;;;AAqDA;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;AAjFA;;;AAAA;;;;;;;;;;;AAkEA;;;AACA;AAAA;AAAA;;;;;;AAlDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAAA;;;;;;;;;AAgLA;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AAjBA;;;AAiBA;;;AAbA;AAAA;;;AAaA;;;AAXA;AAAA;AAAA;AAAA;AAAA;AAGA;;;AAQA;;AAJA;AAAA;;AAIA;;;;;;;;ACt3EA;AQ0nBA;ARznBA;;AACA;AAIA;;AAFA;;;;;AC+BA;;AAAA;;AAAA;;;;;;;ACPA;AACA;;;AAOA;;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;;;;AACA;AADA;AAAA;;;;;;;AACA;;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;;;AAMA;AAAA;AACA;;;;AAIA;AAAA;AACA;;;;AAIA;AAAA;AACA;AACA;;;;AA3CA;;AAEA;;;;;;;;;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;;;;AACA;AADA;AAAA;;;;;;;AACA;;;;AAIA;AAAA;;AAGA;AACA;AAAA;AAAA;;;AAEA;AAAA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AwBk4DA;AAAA;AACA;;;AAEA;;AAIA;;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;AAOA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;AANA;;;;;;;;;;;;;;;;;;;;AAoXA;;AACA;;;;;;;;;;;;;;;AE13DA;AAAA;;AF85DA;;;;ACzzDA;AAAA;AAAA;AAAA;ADyzDA;AACA;AAAA;AAAA;;;AAMA;AAAA;;;;;AA9PA;;;;AAEA;AAAA;;AAUA;;AAAA;;AAAA;AAAA;AAQA;AAAA;;AAEA;AAAA;AAAA;;;;AAKA;;AACA;AAAA;AAAA;;AACA;AA4OA;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;AA4BA;AAAA;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;AAWA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;AAGA;;;;;;;;;;;;;;;;AAQA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;AAvHA;;AACA;;;;;;;;;;;;;;;;AA4BA;;;;;;;;AApJA;AAAA;;AAKA;AAAA;;;;;;;AAIA;;AAEA;;;;;;;;;;;;;;;AA0OA;AAAA;AAAA;AAEA;;;;;;;;AhBvnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAGA;AAAA;AAAA;AADA;;;;AAKA;;;;;;;;;AAgBA;;;;;;;;;;AAAA;;;AAGA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;;;;;;;;;AAAA;AAxCA;;AAwCA;AAVA;;;;AACA;AAAA;AAAA;AAAA;AADA;;;;;AAUA;;;;;;;AAAA;;;;;;;;;AAKA;;;;AACA;;;;AC5bA;;;;;;;;;AAQA;AAAA;AACA;;;;;;;AAQA;;;;AACA;;;;AAGA;;;AAGA;;;;;;;;AAEA;;;;;;AAbA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAfA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AANA;AAAA;AAAA;;;;;;;;;AACA;AAAA;AAEA;;;;;;;;;;;;;;AAyIA;AAKA;;;;AA4CA;AApCA;AAAA;;;AACA;;AACA;AAAA;;;;AAxIA;AAAA;;AAKA;AAGA;AAAA;;;;;;;;;;;;;;;AAAA;AAGA;AAGA;;AAGA;;;;;;;;;;;;;;;;;AAOA;;;;;;;AAyHA;AAAA;;;;;;;;;;;;;;;;;;;;;AAMA;AAEA;;;;;;;;;;;;AAEA;;;;;;;;AAGA;AACA;AAVA;;;;;;;;;;AzB8xBA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAAA;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/vBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AQipCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A1Ct4BA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AD5IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAi0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APA;AAAA;AAEA;AAEA;AAGA;;;;;AEzIA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AK0IA;;;;;;;;;;;;;AGgiCA;;;;;AHnjCA;AAAA;AAAA;;;;;;;AqBmEA;;;;;;;;;;;;;AgBSA;AAAA;;;;;AADA;AAAA;;;;;;;A/B2lBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AIjxBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AXgFA;;;;;;;;;;;;;;;;;;;;;;;;AFmuBA;;;;;;;;;;;A2CxpBA;AAAA;AAAA;;;;;;;;;;;;;;AhDi2CA;;;;;AOj6CA;;;;AAKA;;;AAGA;;;;;;;;;;AA3BA;;;;;;;;;;;;;ALwIA;;;;;;;;;;;;;;;;;;;;AMrFA;;;;;;;;;;;;;;;;;;;;A+BktDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AJ78CA;AAcA;AACA;;;;;AhBlHA;;;;;;;;;;;;;;AlBpFA;AACA;AACA;;;;;;;;;;;;;;;AOrEA;;;;;;;;;;;;AmBqPA;;;AAAA;;;;;;;;;ApBvUA;;;;;ASzEA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AFiiEA;;;;;;;;;;;;;;;;;ANn5DA;;;;AMuxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Adv4BA;AACA;AACA;;;;;AA8QA;;;;;;;;;;AA4kBA;;;;;AAuMA;;;;;;AgCz1BA;AACA;AACA;;;;;;AhCq2BA;;AAAA;;;;;;;;ACpvBA;;;;;;;;;;;;;AmB2DA;AACA;AACA;;;;;A2BrCA;;;;;;;;;;;ACnIA;AAIA;;;;;;;;;;;;;;;;;;;;ApDoSA;;;;;AIywBA;;;;;;;;;;;AoCn1CA;AAAA;AACA;;;;;AxCi8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AiB3vBA;;;;AC6SA;;;;;;;;;;;;;;;;;;;;;ANvUA;;;;;;;;;ARmrBA;;;;;AWoGA;;;;;;;;;;;;;;;AH5sBA;AAAA;;;;;;;;;;;;;;AqCiDA;;;;;;;;;;;;;;;;;;;;;;A5C4yCA;;;;;;AOt6CA;;;;;AwB2FA;;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AxB/EA;;;;AwB1CA;;AAGA;;AAEA;;;;AlB03DA;;;;;AczhDA;;AAGA;;AAEA;;;;AAtGA;;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;AInDA;;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AFxUA;AAAA;AAAA;;;;;;;;;;;;;;;;;AHgIA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ApB/FA;;AAGA;;AAEA;;;;;;;AAkCA;;;;;;;;;;AApBA;;AAGA;;AAEA;;;;;;;;;;AX4cA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AY3TA;AAAA;;;;;;;;AAIA;AAAA;;;;;;;;AATA;AAAA;;;;;;;;;;;;;;AqCSA;;;;;AG3BA;;;;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A/Ck+CA;;;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AO3/CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AR6oBA;;;;;ACzmBA;;;;AwBkDA;AAGA;AAAA;;;;;;;;;;;;;AMlLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AIugCA;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AA1DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ARvvBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Ab6qCA;;;;;;;;;;AADA;;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AqB34BA;;;;;;;;;;AUjWA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AhDlJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A+BgYA;;;;;;AAjGA;;;;;;;;;;;;;;;;;;;;;;;;AD3JA;;;;;;;;;;A/BibA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AkByaA;;;;;;;;;;;;ANx4BA;;;;;;;;;ALgBA;;;;;;;;;;;;;;;;;AIrDA;;;;;;;;;;;;;AJoIA;;;;;;;;;;;;;;;;;;;;;;;;;A6CvDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ApDybA;;;;;AALA;;;;;;;;;;AAmSA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AKgwBA;;;;;;;;;;ALtoCA;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;AStMA;;;;;ATiQA;;;;;;;;;;AqB/kBA;;;;;;;;;;A4BoKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;;;;;AAAA;;;;;A5CtCA;;;;;;;;;AaySA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A2ByLA;;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;;;;;;;;;;AAlBA;;;;;AAJA;;;;;AAPA;;;;;AAmrFA;;;;;;;;;;;;;;;AA3GA;;;;;AA2GA;;;;;AIjoGA;;;;;A7CqEA;;;;;;;;;;AyB/HA;;;;;AN+MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AgB4nBA;;;;;;;;;;;;;;;;;;;;;;;;;AlCVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;;;;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;;;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AOj3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AMuxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AlBxSA;;;;;;;;;;;;;;;;;;;;;;;;;;;AI+JA;;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AK1dA;;;;;;;;;;AAtBA;;;;;;;;;;AATA;;;;;A2CtHA;;;;;AlCqhCA;;;;;;;;;;;;;;;;;;;AAuwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvpBA;;;;;;;;;AlB5rBA;;;;;;;;;;;;AgCrJA;;;;;AAjGA;;;;;;;;;;;;;;;;;;;A1B4FA;;;;;;;;;;;;;AChPA;;;;;;;;;;;;;;;;;;;;AP2dA;;;;;AiCxgBA;;;;;;;;;;;AFtBA;;;;;;;;;;;;;;;A1Bu1BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AOj3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ASxDA;;;;;A4BgHA;;;;;;;;;;;;;;;;;;;;;;;;AjBwPA;;;;;AAjGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ApBlKA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AqC3IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AGyKA;;;;;;;;;AlDhLA;;;;;AGkTA;;;;;;;;;;;;;;;AO7MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ARgJA;;;;;;;;;;;Ac6/BA;;;;;;;;;;;;;;;Acj0BA;;;;;;AAjGA;;;;;;;;;;;;;;;AXgEA;;;;;;;;;;;;;;ArBsLA;;;;;;;;;;AiDraA;;;;;;;;;;A5ByPA;;;;;;;;;;;;;;AHuzCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AhBztDA;;;;;;;;;AgB6zDA;;;;;Acz2CA;;;;AAnEA;;;;AA9BA;;;;AAnEA;;;;AI5LA;;;;;;;;;;;;;;;AhCu9CA;;;;;;;;;;;;;;;;;;;;AgClmDA;;;;;;;;;AdpBA;;;;;AJ2iEA;;;;;;;;;;AqB3/CA;;;;;;;;;;AjB5jBA;;;;AVoKA;;;;;;;;;;;;;;;;A8BnKA;;;;;;;;;;A9BoBA;;;;;;;;;;;;;;;;;;;;;;;;;;AwBIA;;;;Aa+BA;;;;;AzCqWA;;;;;AcrZA;;;;;ARiDA;;;;;;;;;;;;;;;AeLA;;;;;A7BwaA;;;;;;;;;;;;;;;;;AuC3BA;;;;AG/PA;;;;ANhBA;;;;;;;;AxBdA;;;;AgCpCA;;;;;;;;;;;;AHyFA;;;;AAKA;;;;AAUA;;;;;;;;ACvOA;;;;;AFiBA;;;;ACkMA;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A7BxBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;AAAA;;;;AAJA;AAAA;;;;;;;;;;;;;;AAfA;AAAA;;;;AALA;AAAA;;;;;;;;;;;;;;AANA;AAAA;;;;AAHA;AAAA;;;;AwBsHA;;;;AInSA;;;;A5B2KA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A4B/KA;;;;;;;;;;;;;AJ8TA;;;;A3BmHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AGlQA;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AJtDA;;;;;;;;AAAA;;;;;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAbA;;;;AADA;;;;;;;;AASA;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AANA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;AAhEA;;;;;;;;;;;;;;;;;;;;;;;;AAJA;;;;;;;;;;;;;;;;;;;;AADA;;;;AAFA;;;;AADA;;;;;;;;;;;;AAoDA;;;;;;;;AAAA;;;;;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;AAZA;;;;AAsEA;;;;AA1EA;;;;AA0EA;;;;AA1EA;;;;AA0EA;;;;AA9EA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AMuLA;;;;AADA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAfA;;;;AAJA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;AAdA;;;;AAFA;;;;AAEA;;;;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHA;;;;;;;;;;;;AAdA;;;;AAFA;;;;;;;;;;;;AAJA;;;;AAHA;;;;AASA;;;;AAZA;;;;AAYA;;;;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;;;AAiBA;;;;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlBA;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;AADA;;;;AAQA;;;;;;;;;;;;AAloIA;;;;;;;;;;;;AAHA;;;;AADA;;;;AAHA;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;AAsGA;;;;;;;;AAHA;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5FA;;;;;;;;;;;;AAHA;;;;AAHA;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;AAsGA;;;;;;;;AAHA;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5FA;;;;;;;;;;;;AAHA;;;;AAHA;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;AAsGA;;;;;;;;AAHA;;;;AADA;;;;;;;;;;;;;;;;;;;;AAZA;;;;AAyEA;;;;AAzBA;;;;;;;;;;;;;;;;;;;;AAJA;;;;AAJA;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1PA;;;;;;;;;;;;AAsRA;;;;;;;;;;;;;;;;;;;;AAUA;;;;AAjaA;;;;AAHA;;;;AACA;;;;AADA;;;;;;;;;;;;;;;;AAxLA;;;;;;;;;;;;AAkLA;;;;AAFA;;;;;;;;;;;;AAQA;;;;AACA;;;;AAAA;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;AANA;;;;;;;;AAJA;;;;;;;;;;;;AAUA;;;;AACA;;;;AADA;;;;;;;;;;;;;;;;AAxLA;;;;;;;;;;;;AAkLA;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AALA;;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApKA;;;;;;;;;;;;AA4JA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAJA;;;;;;;;AADA;;;;;;;;AAAA;;;;AAiDA;;;;AApDA;;;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAZA;;;;;;;;;;;;;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;;;;AAKA;;;;AARA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATA;;;;;;;;;;;;;;;;AApHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5BA;;;;AAuBA;;;;AAAA;;;;AAFA;;;;AACA;;;;AADA;;;;;;;;AALA;;;;AAAA;;;;AAHA;;;;;;;;;;;;;;;;;;;;AAJA;;;;;;;;AAFA;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAZA;;;;AAAA;;;;;;;;AAHA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAdA;;;;AAAA;;;;AACA;;;;;;;;AAZA;;;;AAAA;;;;AAeA;;;;AAfA;;;;;;;;;;;;;;;;;;;;AARA;;;;;;;;;;;;;;;;AAvCA;;;;;;;;;;;;AAkCA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPA;;;;;;;;AAhBA;;;;AAAA;;;;AA2BA;;;;AA3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AD6XA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtBA;;;;;;;;AALA;;;;AAQA;;;;;;;;;;;;AAZA;;;;AANA;;;;;;;;AALA;;;;;;;;;;;;AANA;;;;AAAA;;;;;;;;;;;;;;;;AANA;;;;AAmCA;;;;;;;;;;;;;;;;;;;;AAtFA;;;;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAPA;;;;;;;;AAFA;;;;AAXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AATA;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAkFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;;;;AAFA;;;;AATA;;;;;;;;AADA;;;;AAAA;;;;AAyDA;;;;AA9DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;;;;;;;;;;;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4LA;;;;;;;;AAJA;;;;AALA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;;AAYA;;;;AArBA;;;;;;;;;;;;AANA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;AADA;;;;AAYA;;;;;;;;AALA;;;;;;;;;;;;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","file":"/Users/janjon01/repos/mbed-simulator/out/https.js","sourcesContent":["/*\n *  FIPS-197 compliant AES implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The AES block cipher was designed by Vincent Rijmen and Joan Daemen.\n *\n *  http://csrc.nist.gov/encryption/aes/rijndael/Rijndael.pdf\n *  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_AES_C)\n\n#include <string.h>\n\n#include \"mbedtls/aes.h\"\n#include \"mbedtls/platform_util.h\"\n#if defined(MBEDTLS_PADLOCK_C)\n#include \"mbedtls/padlock.h\"\n#endif\n#if defined(MBEDTLS_AESNI_C)\n#include \"mbedtls/aesni.h\"\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#if !defined(MBEDTLS_AES_ALT)\n\n/*\n * 32-bit integer manipulation macros (little endian)\n */\n#ifndef GET_UINT32_LE\n#define GET_UINT32_LE(n,b,i)                            \\\n{                                                       \\\n    (n) = ( (uint32_t) (b)[(i)    ]       )             \\\n        | ( (uint32_t) (b)[(i) + 1] <<  8 )             \\\n        | ( (uint32_t) (b)[(i) + 2] << 16 )             \\\n        | ( (uint32_t) (b)[(i) + 3] << 24 );            \\\n}\n#endif\n\n#ifndef PUT_UINT32_LE\n#define PUT_UINT32_LE(n,b,i)                                    \\\n{                                                               \\\n    (b)[(i)    ] = (unsigned char) ( ( (n)       ) & 0xFF );    \\\n    (b)[(i) + 1] = (unsigned char) ( ( (n) >>  8 ) & 0xFF );    \\\n    (b)[(i) + 2] = (unsigned char) ( ( (n) >> 16 ) & 0xFF );    \\\n    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \\\n}\n#endif\n\n#if defined(MBEDTLS_PADLOCK_C) &&                      \\\n    ( defined(MBEDTLS_HAVE_X86) || defined(MBEDTLS_PADLOCK_ALIGN16) )\nstatic int aes_padlock_ace = -1;\n#endif\n\n#if defined(MBEDTLS_AES_ROM_TABLES)\n/*\n * Forward S-box\n */\nstatic const unsigned char FSb[256] =\n{\n    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,\n    0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,\n    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,\n    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,\n    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,\n    0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,\n    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,\n    0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,\n    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,\n    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,\n    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,\n    0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,\n    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,\n    0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,\n    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,\n    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,\n    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,\n    0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,\n    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,\n    0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,\n    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,\n    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,\n    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,\n    0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,\n    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,\n    0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,\n    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,\n    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,\n    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,\n    0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,\n    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,\n    0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16\n};\n\n/*\n * Forward tables\n */\n#define FT \\\n\\\n    V(A5,63,63,C6), V(84,7C,7C,F8), V(99,77,77,EE), V(8D,7B,7B,F6), \\\n    V(0D,F2,F2,FF), V(BD,6B,6B,D6), V(B1,6F,6F,DE), V(54,C5,C5,91), \\\n    V(50,30,30,60), V(03,01,01,02), V(A9,67,67,CE), V(7D,2B,2B,56), \\\n    V(19,FE,FE,E7), V(62,D7,D7,B5), V(E6,AB,AB,4D), V(9A,76,76,EC), \\\n    V(45,CA,CA,8F), V(9D,82,82,1F), V(40,C9,C9,89), V(87,7D,7D,FA), \\\n    V(15,FA,FA,EF), V(EB,59,59,B2), V(C9,47,47,8E), V(0B,F0,F0,FB), \\\n    V(EC,AD,AD,41), V(67,D4,D4,B3), V(FD,A2,A2,5F), V(EA,AF,AF,45), \\\n    V(BF,9C,9C,23), V(F7,A4,A4,53), V(96,72,72,E4), V(5B,C0,C0,9B), \\\n    V(C2,B7,B7,75), V(1C,FD,FD,E1), V(AE,93,93,3D), V(6A,26,26,4C), \\\n    V(5A,36,36,6C), V(41,3F,3F,7E), V(02,F7,F7,F5), V(4F,CC,CC,83), \\\n    V(5C,34,34,68), V(F4,A5,A5,51), V(34,E5,E5,D1), V(08,F1,F1,F9), \\\n    V(93,71,71,E2), V(73,D8,D8,AB), V(53,31,31,62), V(3F,15,15,2A), \\\n    V(0C,04,04,08), V(52,C7,C7,95), V(65,23,23,46), V(5E,C3,C3,9D), \\\n    V(28,18,18,30), V(A1,96,96,37), V(0F,05,05,0A), V(B5,9A,9A,2F), \\\n    V(09,07,07,0E), V(36,12,12,24), V(9B,80,80,1B), V(3D,E2,E2,DF), \\\n    V(26,EB,EB,CD), V(69,27,27,4E), V(CD,B2,B2,7F), V(9F,75,75,EA), \\\n    V(1B,09,09,12), V(9E,83,83,1D), V(74,2C,2C,58), V(2E,1A,1A,34), \\\n    V(2D,1B,1B,36), V(B2,6E,6E,DC), V(EE,5A,5A,B4), V(FB,A0,A0,5B), \\\n    V(F6,52,52,A4), V(4D,3B,3B,76), V(61,D6,D6,B7), V(CE,B3,B3,7D), \\\n    V(7B,29,29,52), V(3E,E3,E3,DD), V(71,2F,2F,5E), V(97,84,84,13), \\\n    V(F5,53,53,A6), V(68,D1,D1,B9), V(00,00,00,00), V(2C,ED,ED,C1), \\\n    V(60,20,20,40), V(1F,FC,FC,E3), V(C8,B1,B1,79), V(ED,5B,5B,B6), \\\n    V(BE,6A,6A,D4), V(46,CB,CB,8D), V(D9,BE,BE,67), V(4B,39,39,72), \\\n    V(DE,4A,4A,94), V(D4,4C,4C,98), V(E8,58,58,B0), V(4A,CF,CF,85), \\\n    V(6B,D0,D0,BB), V(2A,EF,EF,C5), V(E5,AA,AA,4F), V(16,FB,FB,ED), \\\n    V(C5,43,43,86), V(D7,4D,4D,9A), V(55,33,33,66), V(94,85,85,11), \\\n    V(CF,45,45,8A), V(10,F9,F9,E9), V(06,02,02,04), V(81,7F,7F,FE), \\\n    V(F0,50,50,A0), V(44,3C,3C,78), V(BA,9F,9F,25), V(E3,A8,A8,4B), \\\n    V(F3,51,51,A2), V(FE,A3,A3,5D), V(C0,40,40,80), V(8A,8F,8F,05), \\\n    V(AD,92,92,3F), V(BC,9D,9D,21), V(48,38,38,70), V(04,F5,F5,F1), \\\n    V(DF,BC,BC,63), V(C1,B6,B6,77), V(75,DA,DA,AF), V(63,21,21,42), \\\n    V(30,10,10,20), V(1A,FF,FF,E5), V(0E,F3,F3,FD), V(6D,D2,D2,BF), \\\n    V(4C,CD,CD,81), V(14,0C,0C,18), V(35,13,13,26), V(2F,EC,EC,C3), \\\n    V(E1,5F,5F,BE), V(A2,97,97,35), V(CC,44,44,88), V(39,17,17,2E), \\\n    V(57,C4,C4,93), V(F2,A7,A7,55), V(82,7E,7E,FC), V(47,3D,3D,7A), \\\n    V(AC,64,64,C8), V(E7,5D,5D,BA), V(2B,19,19,32), V(95,73,73,E6), \\\n    V(A0,60,60,C0), V(98,81,81,19), V(D1,4F,4F,9E), V(7F,DC,DC,A3), \\\n    V(66,22,22,44), V(7E,2A,2A,54), V(AB,90,90,3B), V(83,88,88,0B), \\\n    V(CA,46,46,8C), V(29,EE,EE,C7), V(D3,B8,B8,6B), V(3C,14,14,28), \\\n    V(79,DE,DE,A7), V(E2,5E,5E,BC), V(1D,0B,0B,16), V(76,DB,DB,AD), \\\n    V(3B,E0,E0,DB), V(56,32,32,64), V(4E,3A,3A,74), V(1E,0A,0A,14), \\\n    V(DB,49,49,92), V(0A,06,06,0C), V(6C,24,24,48), V(E4,5C,5C,B8), \\\n    V(5D,C2,C2,9F), V(6E,D3,D3,BD), V(EF,AC,AC,43), V(A6,62,62,C4), \\\n    V(A8,91,91,39), V(A4,95,95,31), V(37,E4,E4,D3), V(8B,79,79,F2), \\\n    V(32,E7,E7,D5), V(43,C8,C8,8B), V(59,37,37,6E), V(B7,6D,6D,DA), \\\n    V(8C,8D,8D,01), V(64,D5,D5,B1), V(D2,4E,4E,9C), V(E0,A9,A9,49), \\\n    V(B4,6C,6C,D8), V(FA,56,56,AC), V(07,F4,F4,F3), V(25,EA,EA,CF), \\\n    V(AF,65,65,CA), V(8E,7A,7A,F4), V(E9,AE,AE,47), V(18,08,08,10), \\\n    V(D5,BA,BA,6F), V(88,78,78,F0), V(6F,25,25,4A), V(72,2E,2E,5C), \\\n    V(24,1C,1C,38), V(F1,A6,A6,57), V(C7,B4,B4,73), V(51,C6,C6,97), \\\n    V(23,E8,E8,CB), V(7C,DD,DD,A1), V(9C,74,74,E8), V(21,1F,1F,3E), \\\n    V(DD,4B,4B,96), V(DC,BD,BD,61), V(86,8B,8B,0D), V(85,8A,8A,0F), \\\n    V(90,70,70,E0), V(42,3E,3E,7C), V(C4,B5,B5,71), V(AA,66,66,CC), \\\n    V(D8,48,48,90), V(05,03,03,06), V(01,F6,F6,F7), V(12,0E,0E,1C), \\\n    V(A3,61,61,C2), V(5F,35,35,6A), V(F9,57,57,AE), V(D0,B9,B9,69), \\\n    V(91,86,86,17), V(58,C1,C1,99), V(27,1D,1D,3A), V(B9,9E,9E,27), \\\n    V(38,E1,E1,D9), V(13,F8,F8,EB), V(B3,98,98,2B), V(33,11,11,22), \\\n    V(BB,69,69,D2), V(70,D9,D9,A9), V(89,8E,8E,07), V(A7,94,94,33), \\\n    V(B6,9B,9B,2D), V(22,1E,1E,3C), V(92,87,87,15), V(20,E9,E9,C9), \\\n    V(49,CE,CE,87), V(FF,55,55,AA), V(78,28,28,50), V(7A,DF,DF,A5), \\\n    V(8F,8C,8C,03), V(F8,A1,A1,59), V(80,89,89,09), V(17,0D,0D,1A), \\\n    V(DA,BF,BF,65), V(31,E6,E6,D7), V(C6,42,42,84), V(B8,68,68,D0), \\\n    V(C3,41,41,82), V(B0,99,99,29), V(77,2D,2D,5A), V(11,0F,0F,1E), \\\n    V(CB,B0,B0,7B), V(FC,54,54,A8), V(D6,BB,BB,6D), V(3A,16,16,2C)\n\n#define V(a,b,c,d) 0x##a##b##c##d\nstatic const uint32_t FT0[256] = { FT };\n#undef V\n\n#if !defined(MBEDTLS_AES_FEWER_TABLES)\n\n#define V(a,b,c,d) 0x##b##c##d##a\nstatic const uint32_t FT1[256] = { FT };\n#undef V\n\n#define V(a,b,c,d) 0x##c##d##a##b\nstatic const uint32_t FT2[256] = { FT };\n#undef V\n\n#define V(a,b,c,d) 0x##d##a##b##c\nstatic const uint32_t FT3[256] = { FT };\n#undef V\n\n#endif /* !MBEDTLS_AES_FEWER_TABLES */\n\n#undef FT\n\n/*\n * Reverse S-box\n */\nstatic const unsigned char RSb[256] =\n{\n    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,\n    0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,\n    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,\n    0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,\n    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,\n    0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,\n    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,\n    0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,\n    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,\n    0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,\n    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,\n    0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,\n    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,\n    0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,\n    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,\n    0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,\n    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,\n    0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,\n    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,\n    0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,\n    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,\n    0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,\n    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,\n    0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,\n    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,\n    0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,\n    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,\n    0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,\n    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,\n    0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,\n    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,\n    0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D\n};\n\n/*\n * Reverse tables\n */\n#define RT \\\n\\\n    V(50,A7,F4,51), V(53,65,41,7E), V(C3,A4,17,1A), V(96,5E,27,3A), \\\n    V(CB,6B,AB,3B), V(F1,45,9D,1F), V(AB,58,FA,AC), V(93,03,E3,4B), \\\n    V(55,FA,30,20), V(F6,6D,76,AD), V(91,76,CC,88), V(25,4C,02,F5), \\\n    V(FC,D7,E5,4F), V(D7,CB,2A,C5), V(80,44,35,26), V(8F,A3,62,B5), \\\n    V(49,5A,B1,DE), V(67,1B,BA,25), V(98,0E,EA,45), V(E1,C0,FE,5D), \\\n    V(02,75,2F,C3), V(12,F0,4C,81), V(A3,97,46,8D), V(C6,F9,D3,6B), \\\n    V(E7,5F,8F,03), V(95,9C,92,15), V(EB,7A,6D,BF), V(DA,59,52,95), \\\n    V(2D,83,BE,D4), V(D3,21,74,58), V(29,69,E0,49), V(44,C8,C9,8E), \\\n    V(6A,89,C2,75), V(78,79,8E,F4), V(6B,3E,58,99), V(DD,71,B9,27), \\\n    V(B6,4F,E1,BE), V(17,AD,88,F0), V(66,AC,20,C9), V(B4,3A,CE,7D), \\\n    V(18,4A,DF,63), V(82,31,1A,E5), V(60,33,51,97), V(45,7F,53,62), \\\n    V(E0,77,64,B1), V(84,AE,6B,BB), V(1C,A0,81,FE), V(94,2B,08,F9), \\\n    V(58,68,48,70), V(19,FD,45,8F), V(87,6C,DE,94), V(B7,F8,7B,52), \\\n    V(23,D3,73,AB), V(E2,02,4B,72), V(57,8F,1F,E3), V(2A,AB,55,66), \\\n    V(07,28,EB,B2), V(03,C2,B5,2F), V(9A,7B,C5,86), V(A5,08,37,D3), \\\n    V(F2,87,28,30), V(B2,A5,BF,23), V(BA,6A,03,02), V(5C,82,16,ED), \\\n    V(2B,1C,CF,8A), V(92,B4,79,A7), V(F0,F2,07,F3), V(A1,E2,69,4E), \\\n    V(CD,F4,DA,65), V(D5,BE,05,06), V(1F,62,34,D1), V(8A,FE,A6,C4), \\\n    V(9D,53,2E,34), V(A0,55,F3,A2), V(32,E1,8A,05), V(75,EB,F6,A4), \\\n    V(39,EC,83,0B), V(AA,EF,60,40), V(06,9F,71,5E), V(51,10,6E,BD), \\\n    V(F9,8A,21,3E), V(3D,06,DD,96), V(AE,05,3E,DD), V(46,BD,E6,4D), \\\n    V(B5,8D,54,91), V(05,5D,C4,71), V(6F,D4,06,04), V(FF,15,50,60), \\\n    V(24,FB,98,19), V(97,E9,BD,D6), V(CC,43,40,89), V(77,9E,D9,67), \\\n    V(BD,42,E8,B0), V(88,8B,89,07), V(38,5B,19,E7), V(DB,EE,C8,79), \\\n    V(47,0A,7C,A1), V(E9,0F,42,7C), V(C9,1E,84,F8), V(00,00,00,00), \\\n    V(83,86,80,09), V(48,ED,2B,32), V(AC,70,11,1E), V(4E,72,5A,6C), \\\n    V(FB,FF,0E,FD), V(56,38,85,0F), V(1E,D5,AE,3D), V(27,39,2D,36), \\\n    V(64,D9,0F,0A), V(21,A6,5C,68), V(D1,54,5B,9B), V(3A,2E,36,24), \\\n    V(B1,67,0A,0C), V(0F,E7,57,93), V(D2,96,EE,B4), V(9E,91,9B,1B), \\\n    V(4F,C5,C0,80), V(A2,20,DC,61), V(69,4B,77,5A), V(16,1A,12,1C), \\\n    V(0A,BA,93,E2), V(E5,2A,A0,C0), V(43,E0,22,3C), V(1D,17,1B,12), \\\n    V(0B,0D,09,0E), V(AD,C7,8B,F2), V(B9,A8,B6,2D), V(C8,A9,1E,14), \\\n    V(85,19,F1,57), V(4C,07,75,AF), V(BB,DD,99,EE), V(FD,60,7F,A3), \\\n    V(9F,26,01,F7), V(BC,F5,72,5C), V(C5,3B,66,44), V(34,7E,FB,5B), \\\n    V(76,29,43,8B), V(DC,C6,23,CB), V(68,FC,ED,B6), V(63,F1,E4,B8), \\\n    V(CA,DC,31,D7), V(10,85,63,42), V(40,22,97,13), V(20,11,C6,84), \\\n    V(7D,24,4A,85), V(F8,3D,BB,D2), V(11,32,F9,AE), V(6D,A1,29,C7), \\\n    V(4B,2F,9E,1D), V(F3,30,B2,DC), V(EC,52,86,0D), V(D0,E3,C1,77), \\\n    V(6C,16,B3,2B), V(99,B9,70,A9), V(FA,48,94,11), V(22,64,E9,47), \\\n    V(C4,8C,FC,A8), V(1A,3F,F0,A0), V(D8,2C,7D,56), V(EF,90,33,22), \\\n    V(C7,4E,49,87), V(C1,D1,38,D9), V(FE,A2,CA,8C), V(36,0B,D4,98), \\\n    V(CF,81,F5,A6), V(28,DE,7A,A5), V(26,8E,B7,DA), V(A4,BF,AD,3F), \\\n    V(E4,9D,3A,2C), V(0D,92,78,50), V(9B,CC,5F,6A), V(62,46,7E,54), \\\n    V(C2,13,8D,F6), V(E8,B8,D8,90), V(5E,F7,39,2E), V(F5,AF,C3,82), \\\n    V(BE,80,5D,9F), V(7C,93,D0,69), V(A9,2D,D5,6F), V(B3,12,25,CF), \\\n    V(3B,99,AC,C8), V(A7,7D,18,10), V(6E,63,9C,E8), V(7B,BB,3B,DB), \\\n    V(09,78,26,CD), V(F4,18,59,6E), V(01,B7,9A,EC), V(A8,9A,4F,83), \\\n    V(65,6E,95,E6), V(7E,E6,FF,AA), V(08,CF,BC,21), V(E6,E8,15,EF), \\\n    V(D9,9B,E7,BA), V(CE,36,6F,4A), V(D4,09,9F,EA), V(D6,7C,B0,29), \\\n    V(AF,B2,A4,31), V(31,23,3F,2A), V(30,94,A5,C6), V(C0,66,A2,35), \\\n    V(37,BC,4E,74), V(A6,CA,82,FC), V(B0,D0,90,E0), V(15,D8,A7,33), \\\n    V(4A,98,04,F1), V(F7,DA,EC,41), V(0E,50,CD,7F), V(2F,F6,91,17), \\\n    V(8D,D6,4D,76), V(4D,B0,EF,43), V(54,4D,AA,CC), V(DF,04,96,E4), \\\n    V(E3,B5,D1,9E), V(1B,88,6A,4C), V(B8,1F,2C,C1), V(7F,51,65,46), \\\n    V(04,EA,5E,9D), V(5D,35,8C,01), V(73,74,87,FA), V(2E,41,0B,FB), \\\n    V(5A,1D,67,B3), V(52,D2,DB,92), V(33,56,10,E9), V(13,47,D6,6D), \\\n    V(8C,61,D7,9A), V(7A,0C,A1,37), V(8E,14,F8,59), V(89,3C,13,EB), \\\n    V(EE,27,A9,CE), V(35,C9,61,B7), V(ED,E5,1C,E1), V(3C,B1,47,7A), \\\n    V(59,DF,D2,9C), V(3F,73,F2,55), V(79,CE,14,18), V(BF,37,C7,73), \\\n    V(EA,CD,F7,53), V(5B,AA,FD,5F), V(14,6F,3D,DF), V(86,DB,44,78), \\\n    V(81,F3,AF,CA), V(3E,C4,68,B9), V(2C,34,24,38), V(5F,40,A3,C2), \\\n    V(72,C3,1D,16), V(0C,25,E2,BC), V(8B,49,3C,28), V(41,95,0D,FF), \\\n    V(71,01,A8,39), V(DE,B3,0C,08), V(9C,E4,B4,D8), V(90,C1,56,64), \\\n    V(61,84,CB,7B), V(70,B6,32,D5), V(74,5C,6C,48), V(42,57,B8,D0)\n\n#define V(a,b,c,d) 0x##a##b##c##d\nstatic const uint32_t RT0[256] = { RT };\n#undef V\n\n#if !defined(MBEDTLS_AES_FEWER_TABLES)\n\n#define V(a,b,c,d) 0x##b##c##d##a\nstatic const uint32_t RT1[256] = { RT };\n#undef V\n\n#define V(a,b,c,d) 0x##c##d##a##b\nstatic const uint32_t RT2[256] = { RT };\n#undef V\n\n#define V(a,b,c,d) 0x##d##a##b##c\nstatic const uint32_t RT3[256] = { RT };\n#undef V\n\n#endif /* !MBEDTLS_AES_FEWER_TABLES */\n\n#undef RT\n\n/*\n * Round constants\n */\nstatic const uint32_t RCON[10] =\n{\n    0x00000001, 0x00000002, 0x00000004, 0x00000008,\n    0x00000010, 0x00000020, 0x00000040, 0x00000080,\n    0x0000001B, 0x00000036\n};\n\n#else /* MBEDTLS_AES_ROM_TABLES */\n\n/*\n * Forward S-box & tables\n */\nstatic unsigned char FSb[256];\nstatic uint32_t FT0[256];\n#if !defined(MBEDTLS_AES_FEWER_TABLES)\nstatic uint32_t FT1[256];\nstatic uint32_t FT2[256];\nstatic uint32_t FT3[256];\n#endif /* !MBEDTLS_AES_FEWER_TABLES */\n\n/*\n * Reverse S-box & tables\n */\nstatic unsigned char RSb[256];\nstatic uint32_t RT0[256];\n#if !defined(MBEDTLS_AES_FEWER_TABLES)\nstatic uint32_t RT1[256];\nstatic uint32_t RT2[256];\nstatic uint32_t RT3[256];\n#endif /* !MBEDTLS_AES_FEWER_TABLES */\n\n/*\n * Round constants\n */\nstatic uint32_t RCON[10];\n\n/*\n * Tables generation code\n */\n#define ROTL8(x) ( ( x << 8 ) & 0xFFFFFFFF ) | ( x >> 24 )\n#define XTIME(x) ( ( x << 1 ) ^ ( ( x & 0x80 ) ? 0x1B : 0x00 ) )\n#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )\n\nstatic int aes_init_done = 0;\n\nstatic void aes_gen_tables( void )\n{\n    int i, x, y, z;\n    int pow[256];\n    int log[256];\n\n    /*\n     * compute pow and log tables over GF(2^8)\n     */\n    for( i = 0, x = 1; i < 256; i++ )\n    {\n        pow[i] = x;\n        log[x] = i;\n        x = ( x ^ XTIME( x ) ) & 0xFF;\n    }\n\n    /*\n     * calculate the round constants\n     */\n    for( i = 0, x = 1; i < 10; i++ )\n    {\n        RCON[i] = (uint32_t) x;\n        x = XTIME( x ) & 0xFF;\n    }\n\n    /*\n     * generate the forward and reverse S-boxes\n     */\n    FSb[0x00] = 0x63;\n    RSb[0x63] = 0x00;\n\n    for( i = 1; i < 256; i++ )\n    {\n        x = pow[255 - log[i]];\n\n        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;\n        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;\n        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;\n        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;\n        x ^= y ^ 0x63;\n\n        FSb[i] = (unsigned char) x;\n        RSb[x] = (unsigned char) i;\n    }\n\n    /*\n     * generate the forward and reverse tables\n     */\n    for( i = 0; i < 256; i++ )\n    {\n        x = FSb[i];\n        y = XTIME( x ) & 0xFF;\n        z =  ( y ^ x ) & 0xFF;\n\n        FT0[i] = ( (uint32_t) y       ) ^\n                 ( (uint32_t) x <<  8 ) ^\n                 ( (uint32_t) x << 16 ) ^\n                 ( (uint32_t) z << 24 );\n\n#if !defined(MBEDTLS_AES_FEWER_TABLES)\n        FT1[i] = ROTL8( FT0[i] );\n        FT2[i] = ROTL8( FT1[i] );\n        FT3[i] = ROTL8( FT2[i] );\n#endif /* !MBEDTLS_AES_FEWER_TABLES */\n\n        x = RSb[i];\n\n        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^\n                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^\n                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^\n                 ( (uint32_t) MUL( 0x0B, x ) << 24 );\n\n#if !defined(MBEDTLS_AES_FEWER_TABLES)\n        RT1[i] = ROTL8( RT0[i] );\n        RT2[i] = ROTL8( RT1[i] );\n        RT3[i] = ROTL8( RT2[i] );\n#endif /* !MBEDTLS_AES_FEWER_TABLES */\n    }\n}\n\n#undef ROTL8\n\n#endif /* MBEDTLS_AES_ROM_TABLES */\n\n#if defined(MBEDTLS_AES_FEWER_TABLES)\n\n#define ROTL8(x)  ( (uint32_t)( ( x ) <<  8 ) + (uint32_t)( ( x ) >> 24 ) )\n#define ROTL16(x) ( (uint32_t)( ( x ) << 16 ) + (uint32_t)( ( x ) >> 16 ) )\n#define ROTL24(x) ( (uint32_t)( ( x ) << 24 ) + (uint32_t)( ( x ) >>  8 ) )\n\n#define AES_RT0(idx) RT0[idx]\n#define AES_RT1(idx) ROTL8(  RT0[idx] )\n#define AES_RT2(idx) ROTL16( RT0[idx] )\n#define AES_RT3(idx) ROTL24( RT0[idx] )\n\n#define AES_FT0(idx) FT0[idx]\n#define AES_FT1(idx) ROTL8(  FT0[idx] )\n#define AES_FT2(idx) ROTL16( FT0[idx] )\n#define AES_FT3(idx) ROTL24( FT0[idx] )\n\n#else /* MBEDTLS_AES_FEWER_TABLES */\n\n#define AES_RT0(idx) RT0[idx]\n#define AES_RT1(idx) RT1[idx]\n#define AES_RT2(idx) RT2[idx]\n#define AES_RT3(idx) RT3[idx]\n\n#define AES_FT0(idx) FT0[idx]\n#define AES_FT1(idx) FT1[idx]\n#define AES_FT2(idx) FT2[idx]\n#define AES_FT3(idx) FT3[idx]\n\n#endif /* MBEDTLS_AES_FEWER_TABLES */\n\nvoid mbedtls_aes_init( mbedtls_aes_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_aes_context ) );\n}\n\nvoid mbedtls_aes_free( mbedtls_aes_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );\n}\n\n/*\n * AES key schedule (encryption)\n */\n#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)\nint mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,\n                    unsigned int keybits )\n{\n    unsigned int i;\n    uint32_t *RK;\n\n#if !defined(MBEDTLS_AES_ROM_TABLES)\n    if( aes_init_done == 0 )\n    {\n        aes_gen_tables();\n        aes_init_done = 1;\n\n    }\n#endif\n\n    switch( keybits )\n    {\n        case 128: ctx->nr = 10; break;\n        case 192: ctx->nr = 12; break;\n        case 256: ctx->nr = 14; break;\n        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );\n    }\n\n#if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_PADLOCK_ALIGN16)\n    if( aes_padlock_ace == -1 )\n        aes_padlock_ace = mbedtls_padlock_has_support( MBEDTLS_PADLOCK_ACE );\n\n    if( aes_padlock_ace )\n        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );\n    else\n#endif\n    ctx->rk = RK = ctx->buf;\n\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )\n        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );\n#endif\n\n    for( i = 0; i < ( keybits >> 5 ); i++ )\n    {\n        GET_UINT32_LE( RK[i], key, i << 2 );\n    }\n\n    switch( ctx->nr )\n    {\n        case 10:\n\n            for( i = 0; i < 10; i++, RK += 4 )\n            {\n                RK[4]  = RK[0] ^ RCON[i] ^\n                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^\n                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^\n                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^\n                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );\n\n                RK[5]  = RK[1] ^ RK[4];\n                RK[6]  = RK[2] ^ RK[5];\n                RK[7]  = RK[3] ^ RK[6];\n            }\n            break;\n\n        case 12:\n\n            for( i = 0; i < 8; i++, RK += 6 )\n            {\n                RK[6]  = RK[0] ^ RCON[i] ^\n                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^\n                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^\n                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^\n                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );\n\n                RK[7]  = RK[1] ^ RK[6];\n                RK[8]  = RK[2] ^ RK[7];\n                RK[9]  = RK[3] ^ RK[8];\n                RK[10] = RK[4] ^ RK[9];\n                RK[11] = RK[5] ^ RK[10];\n            }\n            break;\n\n        case 14:\n\n            for( i = 0; i < 7; i++, RK += 8 )\n            {\n                RK[8]  = RK[0] ^ RCON[i] ^\n                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^\n                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^\n                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^\n                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );\n\n                RK[9]  = RK[1] ^ RK[8];\n                RK[10] = RK[2] ^ RK[9];\n                RK[11] = RK[3] ^ RK[10];\n\n                RK[12] = RK[4] ^\n                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^\n                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^\n                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^\n                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );\n\n                RK[13] = RK[5] ^ RK[12];\n                RK[14] = RK[6] ^ RK[13];\n                RK[15] = RK[7] ^ RK[14];\n            }\n            break;\n    }\n\n    return( 0 );\n}\n#endif /* !MBEDTLS_AES_SETKEY_ENC_ALT */\n\n/*\n * AES key schedule (decryption)\n */\n#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)\nint mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,\n                    unsigned int keybits )\n{\n    int i, j, ret;\n    mbedtls_aes_context cty;\n    uint32_t *RK;\n    uint32_t *SK;\n\n    mbedtls_aes_init( &cty );\n\n#if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_PADLOCK_ALIGN16)\n    if( aes_padlock_ace == -1 )\n        aes_padlock_ace = mbedtls_padlock_has_support( MBEDTLS_PADLOCK_ACE );\n\n    if( aes_padlock_ace )\n        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );\n    else\n#endif\n    ctx->rk = RK = ctx->buf;\n\n    /* Also checks keybits */\n    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )\n        goto exit;\n\n    ctx->nr = cty.nr;\n\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )\n    {\n        mbedtls_aesni_inverse_key( (unsigned char *) ctx->rk,\n                           (const unsigned char *) cty.rk, ctx->nr );\n        goto exit;\n    }\n#endif\n\n    SK = cty.rk + cty.nr * 4;\n\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n\n    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )\n    {\n        for( j = 0; j < 4; j++, SK++ )\n        {\n            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^\n                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^\n                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^\n                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );\n        }\n    }\n\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n\nexit:\n    mbedtls_aes_free( &cty );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_AES_SETKEY_DEC_ALT */\n\n#define AES_FROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)         \\\n{                                                   \\\n    X0 = *RK++ ^ AES_FT0( ( Y0       ) & 0xFF ) ^   \\\n                 AES_FT1( ( Y1 >>  8 ) & 0xFF ) ^   \\\n                 AES_FT2( ( Y2 >> 16 ) & 0xFF ) ^   \\\n                 AES_FT3( ( Y3 >> 24 ) & 0xFF );    \\\n                                                    \\\n    X1 = *RK++ ^ AES_FT0( ( Y1       ) & 0xFF ) ^   \\\n                 AES_FT1( ( Y2 >>  8 ) & 0xFF ) ^   \\\n                 AES_FT2( ( Y3 >> 16 ) & 0xFF ) ^   \\\n                 AES_FT3( ( Y0 >> 24 ) & 0xFF );    \\\n                                                    \\\n    X2 = *RK++ ^ AES_FT0( ( Y2       ) & 0xFF ) ^   \\\n                 AES_FT1( ( Y3 >>  8 ) & 0xFF ) ^   \\\n                 AES_FT2( ( Y0 >> 16 ) & 0xFF ) ^   \\\n                 AES_FT3( ( Y1 >> 24 ) & 0xFF );    \\\n                                                    \\\n    X3 = *RK++ ^ AES_FT0( ( Y3       ) & 0xFF ) ^   \\\n                 AES_FT1( ( Y0 >>  8 ) & 0xFF ) ^   \\\n                 AES_FT2( ( Y1 >> 16 ) & 0xFF ) ^   \\\n                 AES_FT3( ( Y2 >> 24 ) & 0xFF );    \\\n}\n\n#define AES_RROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)         \\\n{                                                   \\\n    X0 = *RK++ ^ AES_RT0( ( Y0       ) & 0xFF ) ^   \\\n                 AES_RT1( ( Y3 >>  8 ) & 0xFF ) ^   \\\n                 AES_RT2( ( Y2 >> 16 ) & 0xFF ) ^   \\\n                 AES_RT3( ( Y1 >> 24 ) & 0xFF );    \\\n                                                    \\\n    X1 = *RK++ ^ AES_RT0( ( Y1       ) & 0xFF ) ^   \\\n                 AES_RT1( ( Y0 >>  8 ) & 0xFF ) ^   \\\n                 AES_RT2( ( Y3 >> 16 ) & 0xFF ) ^   \\\n                 AES_RT3( ( Y2 >> 24 ) & 0xFF );    \\\n                                                    \\\n    X2 = *RK++ ^ AES_RT0( ( Y2       ) & 0xFF ) ^   \\\n                 AES_RT1( ( Y1 >>  8 ) & 0xFF ) ^   \\\n                 AES_RT2( ( Y0 >> 16 ) & 0xFF ) ^   \\\n                 AES_RT3( ( Y3 >> 24 ) & 0xFF );    \\\n                                                    \\\n    X3 = *RK++ ^ AES_RT0( ( Y3       ) & 0xFF ) ^   \\\n                 AES_RT1( ( Y2 >>  8 ) & 0xFF ) ^   \\\n                 AES_RT2( ( Y1 >> 16 ) & 0xFF ) ^   \\\n                 AES_RT3( ( Y0 >> 24 ) & 0xFF );    \\\n}\n\n/*\n * AES-ECB block encryption\n */\n#if !defined(MBEDTLS_AES_ENCRYPT_ALT)\nint mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,\n                                  const unsigned char input[16],\n                                  unsigned char output[16] )\n{\n    int i;\n    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;\n\n    RK = ctx->rk;\n\n    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;\n    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;\n    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;\n    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;\n\n    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )\n    {\n        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );\n        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );\n    }\n\n    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );\n\n    X0 = *RK++ ^ \\\n            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^\n            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );\n\n    X1 = *RK++ ^ \\\n            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^\n            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );\n\n    X2 = *RK++ ^ \\\n            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^\n            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );\n\n    X3 = *RK++ ^ \\\n            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^\n            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );\n\n    PUT_UINT32_LE( X0, output,  0 );\n    PUT_UINT32_LE( X1, output,  4 );\n    PUT_UINT32_LE( X2, output,  8 );\n    PUT_UINT32_LE( X3, output, 12 );\n\n    return( 0 );\n}\n#endif /* !MBEDTLS_AES_ENCRYPT_ALT */\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_aes_encrypt( mbedtls_aes_context *ctx,\n                          const unsigned char input[16],\n                          unsigned char output[16] )\n{\n    mbedtls_internal_aes_encrypt( ctx, input, output );\n}\n#endif /* !MBEDTLS_DEPRECATED_REMOVED */\n\n/*\n * AES-ECB block decryption\n */\n#if !defined(MBEDTLS_AES_DECRYPT_ALT)\nint mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,\n                                  const unsigned char input[16],\n                                  unsigned char output[16] )\n{\n    int i;\n    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;\n\n    RK = ctx->rk;\n\n    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;\n    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;\n    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;\n    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;\n\n    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )\n    {\n        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );\n        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );\n    }\n\n    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );\n\n    X0 = *RK++ ^ \\\n            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^\n            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );\n\n    X1 = *RK++ ^ \\\n            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^\n            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );\n\n    X2 = *RK++ ^ \\\n            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^\n            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );\n\n    X3 = *RK++ ^ \\\n            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^\n            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );\n\n    PUT_UINT32_LE( X0, output,  0 );\n    PUT_UINT32_LE( X1, output,  4 );\n    PUT_UINT32_LE( X2, output,  8 );\n    PUT_UINT32_LE( X3, output, 12 );\n\n    return( 0 );\n}\n#endif /* !MBEDTLS_AES_DECRYPT_ALT */\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_aes_decrypt( mbedtls_aes_context *ctx,\n                          const unsigned char input[16],\n                          unsigned char output[16] )\n{\n    mbedtls_internal_aes_decrypt( ctx, input, output );\n}\n#endif /* !MBEDTLS_DEPRECATED_REMOVED */\n\n/*\n * AES-ECB block encryption/decryption\n */\nint mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,\n                    int mode,\n                    const unsigned char input[16],\n                    unsigned char output[16] )\n{\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )\n        return( mbedtls_aesni_crypt_ecb( ctx, mode, input, output ) );\n#endif\n\n#if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)\n    if( aes_padlock_ace )\n    {\n        if( mbedtls_padlock_xcryptecb( ctx, mode, input, output ) == 0 )\n            return( 0 );\n\n        // If padlock data misaligned, we just fall back to\n        // unaccelerated mode\n        //\n    }\n#endif\n\n    if( mode == MBEDTLS_AES_ENCRYPT )\n        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );\n    else\n        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n/*\n * AES-CBC buffer encryption/decryption\n */\nint mbedtls_aes_crypt_cbc( mbedtls_aes_context *ctx,\n                    int mode,\n                    size_t length,\n                    unsigned char iv[16],\n                    const unsigned char *input,\n                    unsigned char *output )\n{\n    int i;\n    unsigned char temp[16];\n\n    if( length % 16 )\n        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );\n\n#if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)\n    if( aes_padlock_ace )\n    {\n        if( mbedtls_padlock_xcryptcbc( ctx, mode, length, iv, input, output ) == 0 )\n            return( 0 );\n\n        // If padlock data misaligned, we just fall back to\n        // unaccelerated mode\n        //\n    }\n#endif\n\n    if( mode == MBEDTLS_AES_DECRYPT )\n    {\n        while( length > 0 )\n        {\n            memcpy( temp, input, 16 );\n            mbedtls_aes_crypt_ecb( ctx, mode, input, output );\n\n            for( i = 0; i < 16; i++ )\n                output[i] = (unsigned char)( output[i] ^ iv[i] );\n\n            memcpy( iv, temp, 16 );\n\n            input  += 16;\n            output += 16;\n            length -= 16;\n        }\n    }\n    else\n    {\n        while( length > 0 )\n        {\n            for( i = 0; i < 16; i++ )\n                output[i] = (unsigned char)( input[i] ^ iv[i] );\n\n            mbedtls_aes_crypt_ecb( ctx, mode, output, output );\n            memcpy( iv, output, 16 );\n\n            input  += 16;\n            output += 16;\n            length -= 16;\n        }\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n/*\n * AES-CFB128 buffer encryption/decryption\n */\nint mbedtls_aes_crypt_cfb128( mbedtls_aes_context *ctx,\n                       int mode,\n                       size_t length,\n                       size_t *iv_off,\n                       unsigned char iv[16],\n                       const unsigned char *input,\n                       unsigned char *output )\n{\n    int c;\n    size_t n = *iv_off;\n\n    if( mode == MBEDTLS_AES_DECRYPT )\n    {\n        while( length-- )\n        {\n            if( n == 0 )\n                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );\n\n            c = *input++;\n            *output++ = (unsigned char)( c ^ iv[n] );\n            iv[n] = (unsigned char) c;\n\n            n = ( n + 1 ) & 0x0F;\n        }\n    }\n    else\n    {\n        while( length-- )\n        {\n            if( n == 0 )\n                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );\n\n            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );\n\n            n = ( n + 1 ) & 0x0F;\n        }\n    }\n\n    *iv_off = n;\n\n    return( 0 );\n}\n\n/*\n * AES-CFB8 buffer encryption/decryption\n */\nint mbedtls_aes_crypt_cfb8( mbedtls_aes_context *ctx,\n                       int mode,\n                       size_t length,\n                       unsigned char iv[16],\n                       const unsigned char *input,\n                       unsigned char *output )\n{\n    unsigned char c;\n    unsigned char ov[17];\n\n    while( length-- )\n    {\n        memcpy( ov, iv, 16 );\n        mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n            ov[16] = *input;\n\n        c = *output++ = (unsigned char)( iv[0] ^ *input++ );\n\n        if( mode == MBEDTLS_AES_ENCRYPT )\n            ov[16] = c;\n\n        memcpy( iv, ov + 1, 16 );\n    }\n\n    return( 0 );\n}\n#endif /*MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n/*\n * AES-CTR buffer encryption/decryption\n */\nint mbedtls_aes_crypt_ctr( mbedtls_aes_context *ctx,\n                       size_t length,\n                       size_t *nc_off,\n                       unsigned char nonce_counter[16],\n                       unsigned char stream_block[16],\n                       const unsigned char *input,\n                       unsigned char *output )\n{\n    int c, i;\n    size_t n = *nc_off;\n\n    if ( n > 0x0F )\n        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );\n\n    while( length-- )\n    {\n        if( n == 0 ) {\n            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );\n\n            for( i = 16; i > 0; i-- )\n                if( ++nonce_counter[i - 1] != 0 )\n                    break;\n        }\n        c = *input++;\n        *output++ = (unsigned char)( c ^ stream_block[n] );\n\n        n = ( n + 1 ) & 0x0F;\n    }\n\n    *nc_off = n;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#endif /* !MBEDTLS_AES_ALT */\n\n#if defined(MBEDTLS_SELF_TEST)\n/*\n * AES test vectors from:\n *\n * http://csrc.nist.gov/archive/aes/rijndael/rijndael-vals.zip\n */\nstatic const unsigned char aes_test_ecb_dec[3][16] =\n{\n    { 0x44, 0x41, 0x6A, 0xC2, 0xD1, 0xF5, 0x3C, 0x58,\n      0x33, 0x03, 0x91, 0x7E, 0x6B, 0xE9, 0xEB, 0xE0 },\n    { 0x48, 0xE3, 0x1E, 0x9E, 0x25, 0x67, 0x18, 0xF2,\n      0x92, 0x29, 0x31, 0x9C, 0x19, 0xF1, 0x5B, 0xA4 },\n    { 0x05, 0x8C, 0xCF, 0xFD, 0xBB, 0xCB, 0x38, 0x2D,\n      0x1F, 0x6F, 0x56, 0x58, 0x5D, 0x8A, 0x4A, 0xDE }\n};\n\nstatic const unsigned char aes_test_ecb_enc[3][16] =\n{\n    { 0xC3, 0x4C, 0x05, 0x2C, 0xC0, 0xDA, 0x8D, 0x73,\n      0x45, 0x1A, 0xFE, 0x5F, 0x03, 0xBE, 0x29, 0x7F },\n    { 0xF3, 0xF6, 0x75, 0x2A, 0xE8, 0xD7, 0x83, 0x11,\n      0x38, 0xF0, 0x41, 0x56, 0x06, 0x31, 0xB1, 0x14 },\n    { 0x8B, 0x79, 0xEE, 0xCC, 0x93, 0xA0, 0xEE, 0x5D,\n      0xFF, 0x30, 0xB4, 0xEA, 0x21, 0x63, 0x6D, 0xA4 }\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const unsigned char aes_test_cbc_dec[3][16] =\n{\n    { 0xFA, 0xCA, 0x37, 0xE0, 0xB0, 0xC8, 0x53, 0x73,\n      0xDF, 0x70, 0x6E, 0x73, 0xF7, 0xC9, 0xAF, 0x86 },\n    { 0x5D, 0xF6, 0x78, 0xDD, 0x17, 0xBA, 0x4E, 0x75,\n      0xB6, 0x17, 0x68, 0xC6, 0xAD, 0xEF, 0x7C, 0x7B },\n    { 0x48, 0x04, 0xE1, 0x81, 0x8F, 0xE6, 0x29, 0x75,\n      0x19, 0xA3, 0xE8, 0x8C, 0x57, 0x31, 0x04, 0x13 }\n};\n\nstatic const unsigned char aes_test_cbc_enc[3][16] =\n{\n    { 0x8A, 0x05, 0xFC, 0x5E, 0x09, 0x5A, 0xF4, 0x84,\n      0x8A, 0x08, 0xD3, 0x28, 0xD3, 0x68, 0x8E, 0x3D },\n    { 0x7B, 0xD9, 0x66, 0xD5, 0x3A, 0xD8, 0xC1, 0xBB,\n      0x85, 0xD2, 0xAD, 0xFA, 0xE8, 0x7B, 0xB1, 0x04 },\n    { 0xFE, 0x3C, 0x53, 0x65, 0x3E, 0x2F, 0x45, 0xB5,\n      0x6F, 0xCD, 0x88, 0xB2, 0xCC, 0x89, 0x8F, 0xF0 }\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n/*\n * AES-CFB128 test vectors from:\n *\n * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\n */\nstatic const unsigned char aes_test_cfb128_key[3][32] =\n{\n    { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,\n      0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C },\n    { 0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52,\n      0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,\n      0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B },\n    { 0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,\n      0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,\n      0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,\n      0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4 }\n};\n\nstatic const unsigned char aes_test_cfb128_iv[16] =\n{\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F\n};\n\nstatic const unsigned char aes_test_cfb128_pt[64] =\n{\n    0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,\n    0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,\n    0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,\n    0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,\n    0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,\n    0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,\n    0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,\n    0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10\n};\n\nstatic const unsigned char aes_test_cfb128_ct[3][64] =\n{\n    { 0x3B, 0x3F, 0xD9, 0x2E, 0xB7, 0x2D, 0xAD, 0x20,\n      0x33, 0x34, 0x49, 0xF8, 0xE8, 0x3C, 0xFB, 0x4A,\n      0xC8, 0xA6, 0x45, 0x37, 0xA0, 0xB3, 0xA9, 0x3F,\n      0xCD, 0xE3, 0xCD, 0xAD, 0x9F, 0x1C, 0xE5, 0x8B,\n      0x26, 0x75, 0x1F, 0x67, 0xA3, 0xCB, 0xB1, 0x40,\n      0xB1, 0x80, 0x8C, 0xF1, 0x87, 0xA4, 0xF4, 0xDF,\n      0xC0, 0x4B, 0x05, 0x35, 0x7C, 0x5D, 0x1C, 0x0E,\n      0xEA, 0xC4, 0xC6, 0x6F, 0x9F, 0xF7, 0xF2, 0xE6 },\n    { 0xCD, 0xC8, 0x0D, 0x6F, 0xDD, 0xF1, 0x8C, 0xAB,\n      0x34, 0xC2, 0x59, 0x09, 0xC9, 0x9A, 0x41, 0x74,\n      0x67, 0xCE, 0x7F, 0x7F, 0x81, 0x17, 0x36, 0x21,\n      0x96, 0x1A, 0x2B, 0x70, 0x17, 0x1D, 0x3D, 0x7A,\n      0x2E, 0x1E, 0x8A, 0x1D, 0xD5, 0x9B, 0x88, 0xB1,\n      0xC8, 0xE6, 0x0F, 0xED, 0x1E, 0xFA, 0xC4, 0xC9,\n      0xC0, 0x5F, 0x9F, 0x9C, 0xA9, 0x83, 0x4F, 0xA0,\n      0x42, 0xAE, 0x8F, 0xBA, 0x58, 0x4B, 0x09, 0xFF },\n    { 0xDC, 0x7E, 0x84, 0xBF, 0xDA, 0x79, 0x16, 0x4B,\n      0x7E, 0xCD, 0x84, 0x86, 0x98, 0x5D, 0x38, 0x60,\n      0x39, 0xFF, 0xED, 0x14, 0x3B, 0x28, 0xB1, 0xC8,\n      0x32, 0x11, 0x3C, 0x63, 0x31, 0xE5, 0x40, 0x7B,\n      0xDF, 0x10, 0x13, 0x24, 0x15, 0xE5, 0x4B, 0x92,\n      0xA1, 0x3E, 0xD0, 0xA8, 0x26, 0x7A, 0xE2, 0xF9,\n      0x75, 0xA3, 0x85, 0x74, 0x1A, 0xB9, 0xCE, 0xF8,\n      0x20, 0x31, 0x62, 0x3D, 0x55, 0xB1, 0xE4, 0x71 }\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n/*\n * AES-CTR test vectors from:\n *\n * http://www.faqs.org/rfcs/rfc3686.html\n */\n\nstatic const unsigned char aes_test_ctr_key[3][16] =\n{\n    { 0xAE, 0x68, 0x52, 0xF8, 0x12, 0x10, 0x67, 0xCC,\n      0x4B, 0xF7, 0xA5, 0x76, 0x55, 0x77, 0xF3, 0x9E },\n    { 0x7E, 0x24, 0x06, 0x78, 0x17, 0xFA, 0xE0, 0xD7,\n      0x43, 0xD6, 0xCE, 0x1F, 0x32, 0x53, 0x91, 0x63 },\n    { 0x76, 0x91, 0xBE, 0x03, 0x5E, 0x50, 0x20, 0xA8,\n      0xAC, 0x6E, 0x61, 0x85, 0x29, 0xF9, 0xA0, 0xDC }\n};\n\nstatic const unsigned char aes_test_ctr_nonce_counter[3][16] =\n{\n    { 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },\n    { 0x00, 0x6C, 0xB6, 0xDB, 0xC0, 0x54, 0x3B, 0x59,\n      0xDA, 0x48, 0xD9, 0x0B, 0x00, 0x00, 0x00, 0x01 },\n    { 0x00, 0xE0, 0x01, 0x7B, 0x27, 0x77, 0x7F, 0x3F,\n      0x4A, 0x17, 0x86, 0xF0, 0x00, 0x00, 0x00, 0x01 }\n};\n\nstatic const unsigned char aes_test_ctr_pt[3][48] =\n{\n    { 0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62,\n      0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67 },\n\n    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,\n      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n      0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F },\n\n    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,\n      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n      0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,\n      0x20, 0x21, 0x22, 0x23 }\n};\n\nstatic const unsigned char aes_test_ctr_ct[3][48] =\n{\n    { 0xE4, 0x09, 0x5D, 0x4F, 0xB7, 0xA7, 0xB3, 0x79,\n      0x2D, 0x61, 0x75, 0xA3, 0x26, 0x13, 0x11, 0xB8 },\n    { 0x51, 0x04, 0xA1, 0x06, 0x16, 0x8A, 0x72, 0xD9,\n      0x79, 0x0D, 0x41, 0xEE, 0x8E, 0xDA, 0xD3, 0x88,\n      0xEB, 0x2E, 0x1E, 0xFC, 0x46, 0xDA, 0x57, 0xC8,\n      0xFC, 0xE6, 0x30, 0xDF, 0x91, 0x41, 0xBE, 0x28 },\n    { 0xC1, 0xCF, 0x48, 0xA8, 0x9F, 0x2F, 0xFD, 0xD9,\n      0xCF, 0x46, 0x52, 0xE9, 0xEF, 0xDB, 0x72, 0xD7,\n      0x45, 0x40, 0xA4, 0x2B, 0xDE, 0x6D, 0x78, 0x36,\n      0xD5, 0x9A, 0x5C, 0xEA, 0xAE, 0xF3, 0x10, 0x53,\n      0x25, 0xB2, 0x07, 0x2F }\n};\n\nstatic const int aes_test_ctr_len[3] =\n    { 16, 32, 36 };\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n/*\n * Checkup routine\n */\nint mbedtls_aes_self_test( int verbose )\n{\n    int ret = 0, i, j, u, mode;\n    unsigned int keybits;\n    unsigned char key[32];\n    unsigned char buf[64];\n    const unsigned char *aes_tests;\n#if defined(MBEDTLS_CIPHER_MODE_CBC) || defined(MBEDTLS_CIPHER_MODE_CFB)\n    unsigned char iv[16];\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    unsigned char prv[16];\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR) || defined(MBEDTLS_CIPHER_MODE_CFB)\n    size_t offset;\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    int len;\n    unsigned char nonce_counter[16];\n    unsigned char stream_block[16];\n#endif\n    mbedtls_aes_context ctx;\n\n    memset( key, 0, 32 );\n    mbedtls_aes_init( &ctx );\n\n    /*\n     * ECB mode\n     */\n    for( i = 0; i < 6; i++ )\n    {\n        u = i >> 1;\n        keybits = 128 + u * 64;\n        mode = i & 1;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  AES-ECB-%3d (%s): \", keybits,\n                            ( mode == MBEDTLS_AES_DECRYPT ) ? \"dec\" : \"enc\" );\n\n        memset( buf, 0, 16 );\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n        {\n            ret = mbedtls_aes_setkey_dec( &ctx, key, keybits );\n            aes_tests = aes_test_ecb_dec[u];\n        }\n        else\n        {\n            ret = mbedtls_aes_setkey_enc( &ctx, key, keybits );\n            aes_tests = aes_test_ecb_enc[u];\n        }\n\n        /*\n         * AES-192 is an optional feature that may be unavailable when\n         * there is an alternative underlying implementation i.e. when\n         * MBEDTLS_AES_ALT is defined.\n         */\n        if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && keybits == 192 )\n        {\n            mbedtls_printf( \"skipped\\n\" );\n            continue;\n        }\n        else if( ret != 0 )\n        {\n            goto exit;\n        }\n\n        for( j = 0; j < 10000; j++ )\n        {\n            ret = mbedtls_aes_crypt_ecb( &ctx, mode, buf, buf );\n            if( ret != 0 )\n                goto exit;\n        }\n\n        if( memcmp( buf, aes_tests, 16 ) != 0 )\n        {\n            ret = 1;\n            goto exit;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    /*\n     * CBC mode\n     */\n    for( i = 0; i < 6; i++ )\n    {\n        u = i >> 1;\n        keybits = 128 + u * 64;\n        mode = i & 1;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  AES-CBC-%3d (%s): \", keybits,\n                            ( mode == MBEDTLS_AES_DECRYPT ) ? \"dec\" : \"enc\" );\n\n        memset( iv , 0, 16 );\n        memset( prv, 0, 16 );\n        memset( buf, 0, 16 );\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n        {\n            ret = mbedtls_aes_setkey_dec( &ctx, key, keybits );\n            aes_tests = aes_test_cbc_dec[u];\n        }\n        else\n        {\n            ret = mbedtls_aes_setkey_enc( &ctx, key, keybits );\n            aes_tests = aes_test_cbc_enc[u];\n        }\n\n        /*\n         * AES-192 is an optional feature that may be unavailable when\n         * there is an alternative underlying implementation i.e. when\n         * MBEDTLS_AES_ALT is defined.\n         */\n        if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && keybits == 192 )\n        {\n            mbedtls_printf( \"skipped\\n\" );\n            continue;\n        }\n        else if( ret != 0 )\n        {\n            goto exit;\n        }\n\n        for( j = 0; j < 10000; j++ )\n        {\n            if( mode == MBEDTLS_AES_ENCRYPT )\n            {\n                unsigned char tmp[16];\n\n                memcpy( tmp, prv, 16 );\n                memcpy( prv, buf, 16 );\n                memcpy( buf, tmp, 16 );\n            }\n\n            ret = mbedtls_aes_crypt_cbc( &ctx, mode, 16, iv, buf, buf );\n            if( ret != 0 )\n                goto exit;\n\n        }\n\n        if( memcmp( buf, aes_tests, 16 ) != 0 )\n        {\n            ret = 1;\n            goto exit;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    /*\n     * CFB128 mode\n     */\n    for( i = 0; i < 6; i++ )\n    {\n        u = i >> 1;\n        keybits = 128 + u * 64;\n        mode = i & 1;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  AES-CFB128-%3d (%s): \", keybits,\n                            ( mode == MBEDTLS_AES_DECRYPT ) ? \"dec\" : \"enc\" );\n\n        memcpy( iv,  aes_test_cfb128_iv, 16 );\n        memcpy( key, aes_test_cfb128_key[u], keybits / 8 );\n\n        offset = 0;\n        ret = mbedtls_aes_setkey_enc( &ctx, key, keybits );\n        /*\n         * AES-192 is an optional feature that may be unavailable when\n         * there is an alternative underlying implementation i.e. when\n         * MBEDTLS_AES_ALT is defined.\n         */\n        if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && keybits == 192 )\n        {\n            mbedtls_printf( \"skipped\\n\" );\n            continue;\n        }\n        else if( ret != 0 )\n        {\n            goto exit;\n        }\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n        {\n            memcpy( buf, aes_test_cfb128_ct[u], 64 );\n            aes_tests = aes_test_cfb128_pt;\n        }\n        else\n        {\n            memcpy( buf, aes_test_cfb128_pt, 64 );\n            aes_tests = aes_test_cfb128_ct[u];\n        }\n\n        ret = mbedtls_aes_crypt_cfb128( &ctx, mode, 64, &offset, iv, buf, buf );\n        if( ret != 0 )\n            goto exit;\n\n        if( memcmp( buf, aes_tests, 64 ) != 0 )\n        {\n            ret = 1;\n            goto exit;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    /*\n     * CTR mode\n     */\n    for( i = 0; i < 6; i++ )\n    {\n        u = i >> 1;\n        mode = i & 1;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  AES-CTR-128 (%s): \",\n                            ( mode == MBEDTLS_AES_DECRYPT ) ? \"dec\" : \"enc\" );\n\n        memcpy( nonce_counter, aes_test_ctr_nonce_counter[u], 16 );\n        memcpy( key, aes_test_ctr_key[u], 16 );\n\n        offset = 0;\n        if( ( ret = mbedtls_aes_setkey_enc( &ctx, key, 128 ) ) != 0 )\n            goto exit;\n\n        len = aes_test_ctr_len[u];\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n        {\n            memcpy( buf, aes_test_ctr_ct[u], len );\n            aes_tests = aes_test_ctr_pt[u];\n        }\n        else\n        {\n            memcpy( buf, aes_test_ctr_pt[u], len );\n            aes_tests = aes_test_ctr_ct[u];\n        }\n\n        ret = mbedtls_aes_crypt_ctr( &ctx, len, &offset, nonce_counter,\n                                     stream_block, buf, buf );\n        if( ret != 0 )\n            goto exit;\n\n        if( memcmp( buf, aes_tests, len ) != 0 )\n        {\n            ret = 1;\n            goto exit;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n    ret = 0;\n\nexit:\n    if( ret != 0 && verbose != 0 )\n        mbedtls_printf( \"failed\\n\" );\n\n    mbedtls_aes_free( &ctx );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_AES_C */\n","/*\n *  Generic ASN.1 parsing\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ASN1_PARSE_C)\n\n#include \"mbedtls/asn1.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_BIGNUM_C)\n#include \"mbedtls/bignum.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n/*\n * ASN.1 DER decoding routines\n */\nint mbedtls_asn1_get_len( unsigned char **p,\n                  const unsigned char *end,\n                  size_t *len )\n{\n    if( ( end - *p ) < 1 )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    if( ( **p & 0x80 ) == 0 )\n        *len = *(*p)++;\n    else\n    {\n        switch( **p & 0x7F )\n        {\n        case 1:\n            if( ( end - *p ) < 2 )\n                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n            *len = (*p)[1];\n            (*p) += 2;\n            break;\n\n        case 2:\n            if( ( end - *p ) < 3 )\n                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];\n            (*p) += 3;\n            break;\n\n        case 3:\n            if( ( end - *p ) < 4 )\n                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n            *len = ( (size_t)(*p)[1] << 16 ) |\n                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];\n            (*p) += 4;\n            break;\n\n        case 4:\n            if( ( end - *p ) < 5 )\n                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |\n                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];\n            (*p) += 5;\n            break;\n\n        default:\n            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n        }\n    }\n\n    if( *len > (size_t) ( end - *p ) )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    return( 0 );\n}\n\nint mbedtls_asn1_get_tag( unsigned char **p,\n                  const unsigned char *end,\n                  size_t *len, int tag )\n{\n    if( ( end - *p ) < 1 )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    if( **p != tag )\n        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );\n\n    (*p)++;\n\n    return( mbedtls_asn1_get_len( p, end, len ) );\n}\n\nint mbedtls_asn1_get_bool( unsigned char **p,\n                   const unsigned char *end,\n                   int *val )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )\n        return( ret );\n\n    if( len != 1 )\n        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n\n    *val = ( **p != 0 ) ? 1 : 0;\n    (*p)++;\n\n    return( 0 );\n}\n\nint mbedtls_asn1_get_int( unsigned char **p,\n                  const unsigned char *end,\n                  int *val )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )\n        return( ret );\n\n    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )\n        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n\n    *val = 0;\n\n    while( len-- > 0 )\n    {\n        *val = ( *val << 8 ) | **p;\n        (*p)++;\n    }\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_BIGNUM_C)\nint mbedtls_asn1_get_mpi( unsigned char **p,\n                  const unsigned char *end,\n                  mbedtls_mpi *X )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )\n        return( ret );\n\n    ret = mbedtls_mpi_read_binary( X, *p, len );\n\n    *p += len;\n\n    return( ret );\n}\n#endif /* MBEDTLS_BIGNUM_C */\n\nint mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,\n                        mbedtls_asn1_bitstring *bs)\n{\n    int ret;\n\n    /* Certificate type is a single byte bitstring */\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )\n        return( ret );\n\n    /* Check length, subtract one for actual bit string length */\n    if( bs->len < 1 )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n    bs->len -= 1;\n\n    /* Get number of unused bits, ensure unused bits <= 7 */\n    bs->unused_bits = **p;\n    if( bs->unused_bits > 7 )\n        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n    (*p)++;\n\n    /* Get actual bitstring */\n    bs->p = *p;\n    *p += bs->len;\n\n    if( *p != end )\n        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n\n/*\n * Get a bit string without unused bits\n */\nint mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,\n                             size_t *len )\n{\n    int ret;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )\n        return( ret );\n\n    if( (*len)-- < 2 || *(*p)++ != 0 )\n        return( MBEDTLS_ERR_ASN1_INVALID_DATA );\n\n    return( 0 );\n}\n\n\n\n/*\n *  Parses and splits an ASN.1 \"SEQUENCE OF <tag>\"\n */\nint mbedtls_asn1_get_sequence_of( unsigned char **p,\n                          const unsigned char *end,\n                          mbedtls_asn1_sequence *cur,\n                          int tag)\n{\n    int ret;\n    size_t len;\n    mbedtls_asn1_buf *buf;\n\n    /* Get main sequence tag */\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( ret );\n\n    if( *p + len != end )\n        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    while( *p < end )\n    {\n        buf = &(cur->buf);\n        buf->tag = **p;\n\n        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )\n            return( ret );\n\n        buf->p = *p;\n        *p += buf->len;\n\n        /* Allocate and assign next pointer */\n        if( *p < end )\n        {\n            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,\n                                            sizeof( mbedtls_asn1_sequence ) );\n\n            if( cur->next == NULL )\n                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );\n\n            cur = cur->next;\n        }\n    }\n\n    /* Set final sequence entry's next pointer to NULL */\n    cur->next = NULL;\n\n    if( *p != end )\n        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n\nint mbedtls_asn1_get_alg( unsigned char **p,\n                  const unsigned char *end,\n                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( ret );\n\n    if( ( end - *p ) < 1 )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    alg->tag = **p;\n    end = *p + len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )\n        return( ret );\n\n    alg->p = *p;\n    *p += alg->len;\n\n    if( *p == end )\n    {\n        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );\n        return( 0 );\n    }\n\n    params->tag = **p;\n    (*p)++;\n\n    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )\n        return( ret );\n\n    params->p = *p;\n    *p += params->len;\n\n    if( *p != end )\n        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n\nint mbedtls_asn1_get_alg_null( unsigned char **p,\n                       const unsigned char *end,\n                       mbedtls_asn1_buf *alg )\n{\n    int ret;\n    mbedtls_asn1_buf params;\n\n    memset( &params, 0, sizeof(mbedtls_asn1_buf) );\n\n    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )\n        return( ret );\n\n    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )\n        return( MBEDTLS_ERR_ASN1_INVALID_DATA );\n\n    return( 0 );\n}\n\nvoid mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )\n{\n    if( cur == NULL )\n        return;\n\n    mbedtls_free( cur->oid.p );\n    mbedtls_free( cur->val.p );\n\n    mbedtls_platform_zeroize( cur, sizeof( mbedtls_asn1_named_data ) );\n}\n\nvoid mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )\n{\n    mbedtls_asn1_named_data *cur;\n\n    while( ( cur = *head ) != NULL )\n    {\n        *head = cur->next;\n        mbedtls_asn1_free_named_data( cur );\n        mbedtls_free( cur );\n    }\n}\n\nmbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *list,\n                                       const char *oid, size_t len )\n{\n    while( list != NULL )\n    {\n        if( list->oid.len == len &&\n            memcmp( list->oid.p, oid, len ) == 0 )\n        {\n            break;\n        }\n\n        list = list->next;\n    }\n\n    return( list );\n}\n\n#endif /* MBEDTLS_ASN1_PARSE_C */\n","/*\n * ASN.1 buffer writing functionality\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ASN1_WRITE_C)\n\n#include \"mbedtls/asn1write.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\nint mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )\n{\n    if( len < 0x80 )\n    {\n        if( *p - start < 1 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = (unsigned char) len;\n        return( 1 );\n    }\n\n    if( len <= 0xFF )\n    {\n        if( *p - start < 2 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = (unsigned char) len;\n        *--(*p) = 0x81;\n        return( 2 );\n    }\n\n    if( len <= 0xFFFF )\n    {\n        if( *p - start < 3 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = ( len       ) & 0xFF;\n        *--(*p) = ( len >>  8 ) & 0xFF;\n        *--(*p) = 0x82;\n        return( 3 );\n    }\n\n    if( len <= 0xFFFFFF )\n    {\n        if( *p - start < 4 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = ( len       ) & 0xFF;\n        *--(*p) = ( len >>  8 ) & 0xFF;\n        *--(*p) = ( len >> 16 ) & 0xFF;\n        *--(*p) = 0x83;\n        return( 4 );\n    }\n\n    if( len <= 0xFFFFFFFF )\n    {\n        if( *p - start < 5 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = ( len       ) & 0xFF;\n        *--(*p) = ( len >>  8 ) & 0xFF;\n        *--(*p) = ( len >> 16 ) & 0xFF;\n        *--(*p) = ( len >> 24 ) & 0xFF;\n        *--(*p) = 0x84;\n        return( 5 );\n    }\n\n    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n}\n\nint mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )\n{\n    if( *p - start < 1 )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    *--(*p) = tag;\n\n    return( 1 );\n}\n\nint mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,\n                           const unsigned char *buf, size_t size )\n{\n    size_t len = 0;\n\n    if( *p < start || (size_t)( *p - start ) < size )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    len = size;\n    (*p) -= len;\n    memcpy( *p, buf, len );\n\n    return( (int) len );\n}\n\n#if defined(MBEDTLS_BIGNUM_C)\nint mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )\n{\n    int ret;\n    size_t len = 0;\n\n    // Write the MPI\n    //\n    len = mbedtls_mpi_size( X );\n\n    if( *p < start || (size_t)( *p - start ) < len )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    (*p) -= len;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );\n\n    // DER format assumes 2s complement for numbers, so the leftmost bit\n    // should be 0 for positive numbers and 1 for negative numbers.\n    //\n    if( X->s ==1 && **p & 0x80 )\n    {\n        if( *p - start < 1 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = 0x00;\n        len += 1;\n    }\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );\n\n    ret = (int) len;\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_BIGNUM_C */\n\nint mbedtls_asn1_write_null( unsigned char **p, unsigned char *start )\n{\n    int ret;\n    size_t len = 0;\n\n    // Write NULL\n    //\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, 0) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_NULL ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,\n                    const char *oid, size_t oid_len )\n{\n    int ret;\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,\n                                  (const unsigned char *) oid, oid_len ) );\n    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_algorithm_identifier( unsigned char **p, unsigned char *start,\n                                     const char *oid, size_t oid_len,\n                                     size_t par_len )\n{\n    int ret;\n    size_t len = 0;\n\n    if( par_len == 0 )\n        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_null( p, start ) );\n    else\n        len += par_len;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start,\n                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_bool( unsigned char **p, unsigned char *start, int boolean )\n{\n    int ret;\n    size_t len = 0;\n\n    if( *p - start < 1 )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    *--(*p) = (boolean) ? 255 : 0;\n    len++;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BOOLEAN ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )\n{\n    int ret;\n    size_t len = 0;\n\n    if( *p - start < 1 )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    len += 1;\n    *--(*p) = val;\n\n    if( val > 0 && **p & 0x80 )\n    {\n        if( *p - start < 1 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = 0x00;\n        len += 1;\n    }\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_printable_string( unsigned char **p, unsigned char *start,\n                                 const char *text, size_t text_len )\n{\n    int ret;\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,\n                  (const unsigned char *) text, text_len ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_PRINTABLE_STRING ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_ia5_string( unsigned char **p, unsigned char *start,\n                           const char *text, size_t text_len )\n{\n    int ret;\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,\n                  (const unsigned char *) text, text_len ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_IA5_STRING ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_bitstring( unsigned char **p, unsigned char *start,\n                          const unsigned char *buf, size_t bits )\n{\n    int ret;\n    size_t len = 0, size;\n\n    size = ( bits / 8 ) + ( ( bits % 8 ) ? 1 : 0 );\n\n    // Calculate byte length\n    //\n    if( *p < start || (size_t)( *p - start ) < size + 1 )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    len = size + 1;\n    (*p) -= size;\n    memcpy( *p, buf, size );\n\n    // Write unused bits\n    //\n    *--(*p) = (unsigned char) (size * 8 - bits);\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BIT_STRING ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_octet_string( unsigned char **p, unsigned char *start,\n                             const unsigned char *buf, size_t size )\n{\n    int ret;\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start, buf, size ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OCTET_STRING ) );\n\n    return( (int) len );\n}\n\nmbedtls_asn1_named_data *mbedtls_asn1_store_named_data( mbedtls_asn1_named_data **head,\n                                        const char *oid, size_t oid_len,\n                                        const unsigned char *val,\n                                        size_t val_len )\n{\n    mbedtls_asn1_named_data *cur;\n\n    if( ( cur = mbedtls_asn1_find_named_data( *head, oid, oid_len ) ) == NULL )\n    {\n        // Add new entry if not present yet based on OID\n        //\n        cur = (mbedtls_asn1_named_data*)mbedtls_calloc( 1,\n                                            sizeof(mbedtls_asn1_named_data) );\n        if( cur == NULL )\n            return( NULL );\n\n        cur->oid.len = oid_len;\n        cur->oid.p = mbedtls_calloc( 1, oid_len );\n        if( cur->oid.p == NULL )\n        {\n            mbedtls_free( cur );\n            return( NULL );\n        }\n\n        memcpy( cur->oid.p, oid, oid_len );\n\n        cur->val.len = val_len;\n        cur->val.p = mbedtls_calloc( 1, val_len );\n        if( cur->val.p == NULL )\n        {\n            mbedtls_free( cur->oid.p );\n            mbedtls_free( cur );\n            return( NULL );\n        }\n\n        cur->next = *head;\n        *head = cur;\n    }\n    else if( cur->val.len < val_len )\n    {\n        /*\n         * Enlarge existing value buffer if needed\n         * Preserve old data until the allocation succeeded, to leave list in\n         * a consistent state in case allocation fails.\n         */\n        void *p = mbedtls_calloc( 1, val_len );\n        if( p == NULL )\n            return( NULL );\n\n        mbedtls_free( cur->val.p );\n        cur->val.p = p;\n        cur->val.len = val_len;\n    }\n\n    if( val != NULL )\n        memcpy( cur->val.p, val, val_len );\n\n    return( cur );\n}\n#endif /* MBEDTLS_ASN1_WRITE_C */\n","/*\n *  RFC 1521 base64 encoding/decoding\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_BASE64_C)\n\n#include \"mbedtls/base64.h\"\n\n#include <stdint.h>\n\n#if defined(MBEDTLS_SELF_TEST)\n#include <string.h>\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\nstatic const unsigned char base64_enc_map[64] =\n{\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n    'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n    'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',\n    'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\n    'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',\n    '8', '9', '+', '/'\n};\n\nstatic const unsigned char base64_dec_map[128] =\n{\n    127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n    127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n    127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n    127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n    127, 127, 127,  62, 127, 127, 127,  63,  52,  53,\n     54,  55,  56,  57,  58,  59,  60,  61, 127, 127,\n    127,  64, 127, 127, 127,   0,   1,   2,   3,   4,\n      5,   6,   7,   8,   9,  10,  11,  12,  13,  14,\n     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,\n     25, 127, 127, 127, 127, 127, 127,  26,  27,  28,\n     29,  30,  31,  32,  33,  34,  35,  36,  37,  38,\n     39,  40,  41,  42,  43,  44,  45,  46,  47,  48,\n     49,  50,  51, 127, 127, 127, 127, 127\n};\n\n#define BASE64_SIZE_T_MAX   ( (size_t) -1 ) /* SIZE_T_MAX is not standard */\n\n/*\n * Encode a buffer into base64 format\n */\nint mbedtls_base64_encode( unsigned char *dst, size_t dlen, size_t *olen,\n                   const unsigned char *src, size_t slen )\n{\n    size_t i, n;\n    int C1, C2, C3;\n    unsigned char *p;\n\n    if( slen == 0 )\n    {\n        *olen = 0;\n        return( 0 );\n    }\n\n    n = slen / 3 + ( slen % 3 != 0 );\n\n    if( n > ( BASE64_SIZE_T_MAX - 1 ) / 4 )\n    {\n        *olen = BASE64_SIZE_T_MAX;\n        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );\n    }\n\n    n *= 4;\n\n    if( ( dlen < n + 1 ) || ( NULL == dst ) )\n    {\n        *olen = n + 1;\n        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );\n    }\n\n    n = ( slen / 3 ) * 3;\n\n    for( i = 0, p = dst; i < n; i += 3 )\n    {\n        C1 = *src++;\n        C2 = *src++;\n        C3 = *src++;\n\n        *p++ = base64_enc_map[(C1 >> 2) & 0x3F];\n        *p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];\n        *p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];\n        *p++ = base64_enc_map[C3 & 0x3F];\n    }\n\n    if( i < slen )\n    {\n        C1 = *src++;\n        C2 = ( ( i + 1 ) < slen ) ? *src++ : 0;\n\n        *p++ = base64_enc_map[(C1 >> 2) & 0x3F];\n        *p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];\n\n        if( ( i + 1 ) < slen )\n             *p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];\n        else *p++ = '=';\n\n        *p++ = '=';\n    }\n\n    *olen = p - dst;\n    *p = 0;\n\n    return( 0 );\n}\n\n/*\n * Decode a base64-formatted buffer\n */\nint mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,\n                   const unsigned char *src, size_t slen )\n{\n    size_t i, n;\n    uint32_t j, x;\n    unsigned char *p;\n\n    /* First pass: check for validity and get output length */\n    for( i = n = j = 0; i < slen; i++ )\n    {\n        /* Skip spaces before checking for EOL */\n        x = 0;\n        while( i < slen && src[i] == ' ' )\n        {\n            ++i;\n            ++x;\n        }\n\n        /* Spaces at end of buffer are OK */\n        if( i == slen )\n            break;\n\n        if( ( slen - i ) >= 2 &&\n            src[i] == '\\r' && src[i + 1] == '\\n' )\n            continue;\n\n        if( src[i] == '\\n' )\n            continue;\n\n        /* Space inside a line is an error */\n        if( x != 0 )\n            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );\n\n        if( src[i] == '=' && ++j > 2 )\n            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );\n\n        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )\n            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );\n\n        if( base64_dec_map[src[i]] < 64 && j != 0 )\n            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );\n\n        n++;\n    }\n\n    if( n == 0 )\n    {\n        *olen = 0;\n        return( 0 );\n    }\n\n    /* The following expression is to calculate the following formula without\n     * risk of integer overflow in n:\n     *     n = ( ( n * 6 ) + 7 ) >> 3;\n     */\n    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );\n    n -= j;\n\n    if( dst == NULL || dlen < n )\n    {\n        *olen = n;\n        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );\n    }\n\n   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )\n   {\n        if( *src == '\\r' || *src == '\\n' || *src == ' ' )\n            continue;\n\n        j -= ( base64_dec_map[*src] == 64 );\n        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );\n\n        if( ++n == 4 )\n        {\n            n = 0;\n            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );\n            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );\n            if( j > 2 ) *p++ = (unsigned char)( x       );\n        }\n    }\n\n    *olen = p - dst;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n\nstatic const unsigned char base64_test_dec[64] =\n{\n    0x24, 0x48, 0x6E, 0x56, 0x87, 0x62, 0x5A, 0xBD,\n    0xBF, 0x17, 0xD9, 0xA2, 0xC4, 0x17, 0x1A, 0x01,\n    0x94, 0xED, 0x8F, 0x1E, 0x11, 0xB3, 0xD7, 0x09,\n    0x0C, 0xB6, 0xE9, 0x10, 0x6F, 0x22, 0xEE, 0x13,\n    0xCA, 0xB3, 0x07, 0x05, 0x76, 0xC9, 0xFA, 0x31,\n    0x6C, 0x08, 0x34, 0xFF, 0x8D, 0xC2, 0x6C, 0x38,\n    0x00, 0x43, 0xE9, 0x54, 0x97, 0xAF, 0x50, 0x4B,\n    0xD1, 0x41, 0xBA, 0x95, 0x31, 0x5A, 0x0B, 0x97\n};\n\nstatic const unsigned char base64_test_enc[] =\n    \"JEhuVodiWr2/F9mixBcaAZTtjx4Rs9cJDLbpEG8i7hPK\"\n    \"swcFdsn6MWwINP+Nwmw4AEPpVJevUEvRQbqVMVoLlw==\";\n\n/*\n * Checkup routine\n */\nint mbedtls_base64_self_test( int verbose )\n{\n    size_t len;\n    const unsigned char *src;\n    unsigned char buffer[128];\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  Base64 encoding test: \" );\n\n    src = base64_test_dec;\n\n    if( mbedtls_base64_encode( buffer, sizeof( buffer ), &len, src, 64 ) != 0 ||\n         memcmp( base64_test_enc, buffer, 88 ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n  Base64 decoding test: \" );\n\n    src = base64_test_enc;\n\n    if( mbedtls_base64_decode( buffer, sizeof( buffer ), &len, src, 88 ) != 0 ||\n         memcmp( base64_test_dec, buffer, 64 ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\\n\" );\n\n    return( 0 );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_BASE64_C */\n","/*\n *  Multi-precision integer library\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n *  The following sources were referenced in the design of this Multi-precision\n *  Integer library:\n *\n *  [1] Handbook of Applied Cryptography - 1997\n *      Menezes, van Oorschot and Vanstone\n *\n *  [2] Multi-Precision Math\n *      Tom St Denis\n *      https://github.com/libtom/libtommath/blob/develop/tommath.pdf\n *\n *  [3] GNU Multi-Precision Arithmetic Library\n *      https://gmplib.org/manual/index.html\n *\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_BIGNUM_C)\n\n#include \"mbedtls/bignum.h\"\n#include \"mbedtls/bn_mul.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#include <stdlib.h>\n#define mbedtls_printf     printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#define ciL    (sizeof(mbedtls_mpi_uint))         /* chars in limb  */\n#define biL    (ciL << 3)               /* bits  in limb  */\n#define biH    (ciL << 2)               /* half limb size */\n\n#define MPI_SIZE_T_MAX  ( (size_t) -1 ) /* SIZE_T_MAX is not standard */\n\n/*\n * Convert between bits/chars and number of limbs\n * Divide first in order to avoid potential overflows\n */\n#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )\n#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )\n{\n    mbedtls_platform_zeroize( v, ciL * n );\n}\n\n/*\n * Initialize one MPI\n */\nvoid mbedtls_mpi_init( mbedtls_mpi *X )\n{\n    if( X == NULL )\n        return;\n\n    X->s = 1;\n    X->n = 0;\n    X->p = NULL;\n}\n\n/*\n * Unallocate one MPI\n */\nvoid mbedtls_mpi_free( mbedtls_mpi *X )\n{\n    if( X == NULL )\n        return;\n\n    if( X->p != NULL )\n    {\n        mbedtls_mpi_zeroize( X->p, X->n );\n        mbedtls_free( X->p );\n    }\n\n    X->s = 1;\n    X->n = 0;\n    X->p = NULL;\n}\n\n/*\n * Enlarge to the specified number of limbs\n */\nint mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )\n{\n    mbedtls_mpi_uint *p;\n\n    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )\n        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n\n    if( X->n < nblimbs )\n    {\n        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )\n            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n\n        if( X->p != NULL )\n        {\n            memcpy( p, X->p, X->n * ciL );\n            mbedtls_mpi_zeroize( X->p, X->n );\n            mbedtls_free( X->p );\n        }\n\n        X->n = nblimbs;\n        X->p = p;\n    }\n\n    return( 0 );\n}\n\n/*\n * Resize down as much as possible,\n * while keeping at least the specified number of limbs\n */\nint mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )\n{\n    mbedtls_mpi_uint *p;\n    size_t i;\n\n    /* Actually resize up in this case */\n    if( X->n <= nblimbs )\n        return( mbedtls_mpi_grow( X, nblimbs ) );\n\n    for( i = X->n - 1; i > 0; i-- )\n        if( X->p[i] != 0 )\n            break;\n    i++;\n\n    if( i < nblimbs )\n        i = nblimbs;\n\n    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )\n        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n\n    if( X->p != NULL )\n    {\n        memcpy( p, X->p, i * ciL );\n        mbedtls_mpi_zeroize( X->p, X->n );\n        mbedtls_free( X->p );\n    }\n\n    X->n = i;\n    X->p = p;\n\n    return( 0 );\n}\n\n/*\n * Copy the contents of Y into X\n */\nint mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )\n{\n    int ret = 0;\n    size_t i;\n\n    if( X == Y )\n        return( 0 );\n\n    if( Y->p == NULL )\n    {\n        mbedtls_mpi_free( X );\n        return( 0 );\n    }\n\n    for( i = Y->n - 1; i > 0; i-- )\n        if( Y->p[i] != 0 )\n            break;\n    i++;\n\n    X->s = Y->s;\n\n    if( X->n < i )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );\n    }\n    else\n    {\n        memset( X->p + i, 0, ( X->n - i ) * ciL );\n    }\n\n    memcpy( X->p, Y->p, i * ciL );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Swap the contents of X and Y\n */\nvoid mbedtls_mpi_swap( mbedtls_mpi *X, mbedtls_mpi *Y )\n{\n    mbedtls_mpi T;\n\n    memcpy( &T,  X, sizeof( mbedtls_mpi ) );\n    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );\n    memcpy(  Y, &T, sizeof( mbedtls_mpi ) );\n}\n\n/*\n * Conditionally assign X = Y, without leaking information\n * about whether the assignment was made or not.\n * (Leaking information about the respective sizes of X and Y is ok however.)\n */\nint mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )\n{\n    int ret = 0;\n    size_t i;\n\n    /* make sure assign is 0 or 1 in a time-constant manner */\n    assign = (assign | (unsigned char)-assign) >> 7;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );\n\n    X->s = X->s * ( 1 - assign ) + Y->s * assign;\n\n    for( i = 0; i < Y->n; i++ )\n        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;\n\n    for( ; i < X->n; i++ )\n        X->p[i] *= ( 1 - assign );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Conditionally swap X and Y, without leaking information\n * about whether the swap was made or not.\n * Here it is not ok to simply swap the pointers, which whould lead to\n * different memory access patterns when X and Y are used afterwards.\n */\nint mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )\n{\n    int ret, s;\n    size_t i;\n    mbedtls_mpi_uint tmp;\n\n    if( X == Y )\n        return( 0 );\n\n    /* make sure swap is 0 or 1 in a time-constant manner */\n    swap = (swap | (unsigned char)-swap) >> 7;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );\n\n    s = X->s;\n    X->s = X->s * ( 1 - swap ) + Y->s * swap;\n    Y->s = Y->s * ( 1 - swap ) +    s * swap;\n\n\n    for( i = 0; i < X->n; i++ )\n    {\n        tmp = X->p[i];\n        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;\n        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Set value from integer\n */\nint mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );\n    memset( X->p, 0, X->n * ciL );\n\n    X->p[0] = ( z < 0 ) ? -z : z;\n    X->s    = ( z < 0 ) ? -1 : 1;\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Get a specific bit\n */\nint mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )\n{\n    if( X->n * biL <= pos )\n        return( 0 );\n\n    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );\n}\n\n/*\n * Set a bit to a specific value of 0 or 1\n */\nint mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )\n{\n    int ret = 0;\n    size_t off = pos / biL;\n    size_t idx = pos % biL;\n\n    if( val != 0 && val != 1 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    if( X->n * biL <= pos )\n    {\n        if( val == 0 )\n            return( 0 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );\n    }\n\n    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );\n    X->p[off] |= (mbedtls_mpi_uint) val << idx;\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Return the number of less significant zero-bits\n */\nsize_t mbedtls_mpi_lsb( const mbedtls_mpi *X )\n{\n    size_t i, j, count = 0;\n\n    for( i = 0; i < X->n; i++ )\n        for( j = 0; j < biL; j++, count++ )\n            if( ( ( X->p[i] >> j ) & 1 ) != 0 )\n                return( count );\n\n    return( 0 );\n}\n\n/*\n * Count leading zero bits in a given integer\n */\nstatic size_t mbedtls_clz( const mbedtls_mpi_uint x )\n{\n    size_t j;\n    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);\n\n    for( j = 0; j < biL; j++ )\n    {\n        if( x & mask ) break;\n\n        mask >>= 1;\n    }\n\n    return j;\n}\n\n/*\n * Return the number of bits\n */\nsize_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )\n{\n    size_t i, j;\n\n    if( X->n == 0 )\n        return( 0 );\n\n    for( i = X->n - 1; i > 0; i-- )\n        if( X->p[i] != 0 )\n            break;\n\n    j = biL - mbedtls_clz( X->p[i] );\n\n    return( ( i * biL ) + j );\n}\n\n/*\n * Return the total size in bytes\n */\nsize_t mbedtls_mpi_size( const mbedtls_mpi *X )\n{\n    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );\n}\n\n/*\n * Convert an ASCII character to digit value\n */\nstatic int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )\n{\n    *d = 255;\n\n    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;\n    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;\n    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;\n\n    if( *d >= (mbedtls_mpi_uint) radix )\n        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );\n\n    return( 0 );\n}\n\n/*\n * Import from an ASCII string\n */\nint mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )\n{\n    int ret;\n    size_t i, j, slen, n;\n    mbedtls_mpi_uint d;\n    mbedtls_mpi T;\n\n    if( radix < 2 || radix > 16 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &T );\n\n    slen = strlen( s );\n\n    if( radix == 16 )\n    {\n        if( slen > MPI_SIZE_T_MAX >> 2 )\n            return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n        n = BITS_TO_LIMBS( slen << 2 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );\n\n        for( i = slen, j = 0; i > 0; i--, j++ )\n        {\n            if( i == 1 && s[i - 1] == '-' )\n            {\n                X->s = -1;\n                break;\n            }\n\n            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );\n            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );\n        }\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );\n\n        for( i = 0; i < slen; i++ )\n        {\n            if( i == 0 && s[i] == '-' )\n            {\n                X->s = -1;\n                continue;\n            }\n\n            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );\n\n            if( X->s == 1 )\n            {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );\n            }\n            else\n            {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );\n            }\n        }\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &T );\n\n    return( ret );\n}\n\n/*\n * Helper to write the digits high-order first\n */\nstatic int mpi_write_hlp( mbedtls_mpi *X, int radix, char **p )\n{\n    int ret;\n    mbedtls_mpi_uint r;\n\n    if( radix < 2 || radix > 16 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, radix ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_div_int( X, NULL, X, radix ) );\n\n    if( mbedtls_mpi_cmp_int( X, 0 ) != 0 )\n        MBEDTLS_MPI_CHK( mpi_write_hlp( X, radix, p ) );\n\n    if( r < 10 )\n        *(*p)++ = (char)( r + 0x30 );\n    else\n        *(*p)++ = (char)( r + 0x37 );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Export into an ASCII string\n */\nint mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,\n                              char *buf, size_t buflen, size_t *olen )\n{\n    int ret = 0;\n    size_t n;\n    char *p;\n    mbedtls_mpi T;\n\n    if( radix < 2 || radix > 16 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    n = mbedtls_mpi_bitlen( X );\n    if( radix >=  4 ) n >>= 1;\n    if( radix >= 16 ) n >>= 1;\n    /*\n     * Round up the buffer length to an even value to ensure that there is\n     * enough room for hexadecimal values that can be represented in an odd\n     * number of digits.\n     */\n    n += 3 + ( ( n + 1 ) & 1 );\n\n    if( buflen < n )\n    {\n        *olen = n;\n        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );\n    }\n\n    p = buf;\n    mbedtls_mpi_init( &T );\n\n    if( X->s == -1 )\n        *p++ = '-';\n\n    if( radix == 16 )\n    {\n        int c;\n        size_t i, j, k;\n\n        for( i = X->n, k = 0; i > 0; i-- )\n        {\n            for( j = ciL; j > 0; j-- )\n            {\n                c = ( X->p[i - 1] >> ( ( j - 1 ) << 3) ) & 0xFF;\n\n                if( c == 0 && k == 0 && ( i + j ) != 2 )\n                    continue;\n\n                *(p++) = \"0123456789ABCDEF\" [c / 16];\n                *(p++) = \"0123456789ABCDEF\" [c % 16];\n                k = 1;\n            }\n        }\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T, X ) );\n\n        if( T.s == -1 )\n            T.s = 1;\n\n        MBEDTLS_MPI_CHK( mpi_write_hlp( &T, radix, &p ) );\n    }\n\n    *p++ = '\\0';\n    *olen = p - buf;\n\ncleanup:\n\n    mbedtls_mpi_free( &T );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_FS_IO)\n/*\n * Read X from an opened file\n */\nint mbedtls_mpi_read_file( mbedtls_mpi *X, int radix, FILE *fin )\n{\n    mbedtls_mpi_uint d;\n    size_t slen;\n    char *p;\n    /*\n     * Buffer should have space for (short) label and decimal formatted MPI,\n     * newline characters and '\\0'\n     */\n    char s[ MBEDTLS_MPI_RW_BUFFER_SIZE ];\n\n    memset( s, 0, sizeof( s ) );\n    if( fgets( s, sizeof( s ) - 1, fin ) == NULL )\n        return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );\n\n    slen = strlen( s );\n    if( slen == sizeof( s ) - 2 )\n        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );\n\n    if( slen > 0 && s[slen - 1] == '\\n' ) { slen--; s[slen] = '\\0'; }\n    if( slen > 0 && s[slen - 1] == '\\r' ) { slen--; s[slen] = '\\0'; }\n\n    p = s + slen;\n    while( p-- > s )\n        if( mpi_get_digit( &d, radix, *p ) != 0 )\n            break;\n\n    return( mbedtls_mpi_read_string( X, radix, p + 1 ) );\n}\n\n/*\n * Write X into an opened file (or stdout if fout == NULL)\n */\nint mbedtls_mpi_write_file( const char *p, const mbedtls_mpi *X, int radix, FILE *fout )\n{\n    int ret;\n    size_t n, slen, plen;\n    /*\n     * Buffer should have space for (short) label and decimal formatted MPI,\n     * newline characters and '\\0'\n     */\n    char s[ MBEDTLS_MPI_RW_BUFFER_SIZE ];\n\n    memset( s, 0, sizeof( s ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_string( X, radix, s, sizeof( s ) - 2, &n ) );\n\n    if( p == NULL ) p = \"\";\n\n    plen = strlen( p );\n    slen = strlen( s );\n    s[slen++] = '\\r';\n    s[slen++] = '\\n';\n\n    if( fout != NULL )\n    {\n        if( fwrite( p, 1, plen, fout ) != plen ||\n            fwrite( s, 1, slen, fout ) != slen )\n            return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );\n    }\n    else\n        mbedtls_printf( \"%s%s\", p, s );\n\ncleanup:\n\n    return( ret );\n}\n#endif /* MBEDTLS_FS_IO */\n\n/*\n * Import X from unsigned binary data, big endian\n */\nint mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )\n{\n    int ret;\n    size_t i, j;\n    size_t const limbs = CHARS_TO_LIMBS( buflen );\n\n    /* Ensure that target MPI has exactly the necessary number of limbs */\n    if( X->n != limbs )\n    {\n        mbedtls_mpi_free( X );\n        mbedtls_mpi_init( X );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );\n\n    for( i = buflen, j = 0; i > 0; i--, j++ )\n        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Export X into unsigned binary data, big endian\n */\nint mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )\n{\n    size_t i, j, n;\n\n    n = mbedtls_mpi_size( X );\n\n    if( buflen < n )\n        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );\n\n    memset( buf, 0, buflen );\n\n    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )\n        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );\n\n    return( 0 );\n}\n\n/*\n * Left-shift: X <<= count\n */\nint mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )\n{\n    int ret;\n    size_t i, v0, t1;\n    mbedtls_mpi_uint r0 = 0, r1;\n\n    v0 = count / (biL    );\n    t1 = count & (biL - 1);\n\n    i = mbedtls_mpi_bitlen( X ) + count;\n\n    if( X->n * biL < i )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );\n\n    ret = 0;\n\n    /*\n     * shift by count / limb_size\n     */\n    if( v0 > 0 )\n    {\n        for( i = X->n; i > v0; i-- )\n            X->p[i - 1] = X->p[i - v0 - 1];\n\n        for( ; i > 0; i-- )\n            X->p[i - 1] = 0;\n    }\n\n    /*\n     * shift by count % limb_size\n     */\n    if( t1 > 0 )\n    {\n        for( i = v0; i < X->n; i++ )\n        {\n            r1 = X->p[i] >> (biL - t1);\n            X->p[i] <<= t1;\n            X->p[i] |= r0;\n            r0 = r1;\n        }\n    }\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Right-shift: X >>= count\n */\nint mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )\n{\n    size_t i, v0, v1;\n    mbedtls_mpi_uint r0 = 0, r1;\n\n    v0 = count /  biL;\n    v1 = count & (biL - 1);\n\n    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )\n        return mbedtls_mpi_lset( X, 0 );\n\n    /*\n     * shift by count / limb_size\n     */\n    if( v0 > 0 )\n    {\n        for( i = 0; i < X->n - v0; i++ )\n            X->p[i] = X->p[i + v0];\n\n        for( ; i < X->n; i++ )\n            X->p[i] = 0;\n    }\n\n    /*\n     * shift by count % limb_size\n     */\n    if( v1 > 0 )\n    {\n        for( i = X->n; i > 0; i-- )\n        {\n            r1 = X->p[i - 1] << (biL - v1);\n            X->p[i - 1] >>= v1;\n            X->p[i - 1] |= r0;\n            r0 = r1;\n        }\n    }\n\n    return( 0 );\n}\n\n/*\n * Compare unsigned values\n */\nint mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )\n{\n    size_t i, j;\n\n    for( i = X->n; i > 0; i-- )\n        if( X->p[i - 1] != 0 )\n            break;\n\n    for( j = Y->n; j > 0; j-- )\n        if( Y->p[j - 1] != 0 )\n            break;\n\n    if( i == 0 && j == 0 )\n        return( 0 );\n\n    if( i > j ) return(  1 );\n    if( j > i ) return( -1 );\n\n    for( ; i > 0; i-- )\n    {\n        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );\n        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );\n    }\n\n    return( 0 );\n}\n\n/*\n * Compare signed values\n */\nint mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )\n{\n    size_t i, j;\n\n    for( i = X->n; i > 0; i-- )\n        if( X->p[i - 1] != 0 )\n            break;\n\n    for( j = Y->n; j > 0; j-- )\n        if( Y->p[j - 1] != 0 )\n            break;\n\n    if( i == 0 && j == 0 )\n        return( 0 );\n\n    if( i > j ) return(  X->s );\n    if( j > i ) return( -Y->s );\n\n    if( X->s > 0 && Y->s < 0 ) return(  1 );\n    if( Y->s > 0 && X->s < 0 ) return( -1 );\n\n    for( ; i > 0; i-- )\n    {\n        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );\n        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );\n    }\n\n    return( 0 );\n}\n\n/*\n * Compare signed values\n */\nint mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )\n{\n    mbedtls_mpi Y;\n    mbedtls_mpi_uint p[1];\n\n    *p  = ( z < 0 ) ? -z : z;\n    Y.s = ( z < 0 ) ? -1 : 1;\n    Y.n = 1;\n    Y.p = p;\n\n    return( mbedtls_mpi_cmp_mpi( X, &Y ) );\n}\n\n/*\n * Unsigned addition: X = |A| + |B|  (HAC 14.7)\n */\nint mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n    size_t i, j;\n    mbedtls_mpi_uint *o, *p, c, tmp;\n\n    if( X == B )\n    {\n        const mbedtls_mpi *T = A; A = X; B = T;\n    }\n\n    if( X != A )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );\n\n    /*\n     * X should always be positive as a result of unsigned additions.\n     */\n    X->s = 1;\n\n    for( j = B->n; j > 0; j-- )\n        if( B->p[j - 1] != 0 )\n            break;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );\n\n    o = B->p; p = X->p; c = 0;\n\n    /*\n     * tmp is used because it might happen that p == o\n     */\n    for( i = 0; i < j; i++, o++, p++ )\n    {\n        tmp= *o;\n        *p +=  c; c  = ( *p <  c );\n        *p += tmp; c += ( *p < tmp );\n    }\n\n    while( c != 0 )\n    {\n        if( i >= X->n )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );\n            p = X->p + i;\n        }\n\n        *p += c; c = ( *p < c ); i++; p++;\n    }\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Helper for mbedtls_mpi subtraction\n */\nstatic void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )\n{\n    size_t i;\n    mbedtls_mpi_uint c, z;\n\n    for( i = c = 0; i < n; i++, s++, d++ )\n    {\n        z = ( *d <  c );     *d -=  c;\n        c = ( *d < *s ) + z; *d -= *s;\n    }\n\n    while( c != 0 )\n    {\n        z = ( *d < c ); *d -= c;\n        c = z; d++;\n    }\n}\n\n/*\n * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)\n */\nint mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    mbedtls_mpi TB;\n    int ret;\n    size_t n;\n\n    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )\n        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );\n\n    mbedtls_mpi_init( &TB );\n\n    if( X == B )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );\n        B = &TB;\n    }\n\n    if( X != A )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );\n\n    /*\n     * X should always be positive as a result of unsigned subtractions.\n     */\n    X->s = 1;\n\n    ret = 0;\n\n    for( n = B->n; n > 0; n-- )\n        if( B->p[n - 1] != 0 )\n            break;\n\n    mpi_sub_hlp( n, B->p, X->p );\n\ncleanup:\n\n    mbedtls_mpi_free( &TB );\n\n    return( ret );\n}\n\n/*\n * Signed addition: X = A + B\n */\nint mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret, s = A->s;\n\n    if( A->s * B->s < 0 )\n    {\n        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );\n            X->s =  s;\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );\n            X->s = -s;\n        }\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );\n        X->s = s;\n    }\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Signed subtraction: X = A - B\n */\nint mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret, s = A->s;\n\n    if( A->s * B->s > 0 )\n    {\n        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );\n            X->s =  s;\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );\n            X->s = -s;\n        }\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );\n        X->s = s;\n    }\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Signed addition: X = A + b\n */\nint mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )\n{\n    mbedtls_mpi _B;\n    mbedtls_mpi_uint p[1];\n\n    p[0] = ( b < 0 ) ? -b : b;\n    _B.s = ( b < 0 ) ? -1 : 1;\n    _B.n = 1;\n    _B.p = p;\n\n    return( mbedtls_mpi_add_mpi( X, A, &_B ) );\n}\n\n/*\n * Signed subtraction: X = A - b\n */\nint mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )\n{\n    mbedtls_mpi _B;\n    mbedtls_mpi_uint p[1];\n\n    p[0] = ( b < 0 ) ? -b : b;\n    _B.s = ( b < 0 ) ? -1 : 1;\n    _B.n = 1;\n    _B.p = p;\n\n    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );\n}\n\n/*\n * Helper for mbedtls_mpi multiplication\n */\nstatic\n#if defined(__APPLE__) && defined(__arm__)\n/*\n * Apple LLVM version 4.2 (clang-425.0.24) (based on LLVM 3.2svn)\n * appears to need this to prevent bad ARM code generation at -O3.\n */\n__attribute__ ((noinline))\n#endif\nvoid mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )\n{\n    mbedtls_mpi_uint c = 0, t = 0;\n\n#if defined(MULADDC_HUIT)\n    for( ; i >= 8; i -= 8 )\n    {\n        MULADDC_INIT\n        MULADDC_HUIT\n        MULADDC_STOP\n    }\n\n    for( ; i > 0; i-- )\n    {\n        MULADDC_INIT\n        MULADDC_CORE\n        MULADDC_STOP\n    }\n#else /* MULADDC_HUIT */\n    for( ; i >= 16; i -= 16 )\n    {\n        MULADDC_INIT\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_STOP\n    }\n\n    for( ; i >= 8; i -= 8 )\n    {\n        MULADDC_INIT\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_STOP\n    }\n\n    for( ; i > 0; i-- )\n    {\n        MULADDC_INIT\n        MULADDC_CORE\n        MULADDC_STOP\n    }\n#endif /* MULADDC_HUIT */\n\n    t++;\n\n    do {\n        *d += c; c = ( *d < c ); d++;\n    }\n    while( c != 0 );\n}\n\n/*\n * Baseline multiplication: X = A * B  (HAC 14.12)\n */\nint mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n    size_t i, j;\n    mbedtls_mpi TA, TB;\n\n    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );\n\n    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }\n    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }\n\n    for( i = A->n; i > 0; i-- )\n        if( A->p[i - 1] != 0 )\n            break;\n\n    for( j = B->n; j > 0; j-- )\n        if( B->p[j - 1] != 0 )\n            break;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );\n\n    for( ; j > 0; j-- )\n        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );\n\n    X->s = A->s * B->s;\n\ncleanup:\n\n    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );\n\n    return( ret );\n}\n\n/*\n * Baseline multiplication: X = A * b\n */\nint mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )\n{\n    mbedtls_mpi _B;\n    mbedtls_mpi_uint p[1];\n\n    _B.s = 1;\n    _B.n = 1;\n    _B.p = p;\n    p[0] = b;\n\n    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );\n}\n\n/*\n * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and\n * mbedtls_mpi_uint divisor, d\n */\nstatic mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,\n            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )\n{\n#if defined(MBEDTLS_HAVE_UDBL)\n    mbedtls_t_udbl dividend, quotient;\n#else\n    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;\n    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;\n    mbedtls_mpi_uint d0, d1, q0, q1, rAX, r0, quotient;\n    mbedtls_mpi_uint u0_msw, u0_lsw;\n    size_t s;\n#endif\n\n    /*\n     * Check for overflow\n     */\n    if( 0 == d || u1 >= d )\n    {\n        if (r != NULL) *r = ~0;\n\n        return ( ~0 );\n    }\n\n#if defined(MBEDTLS_HAVE_UDBL)\n    dividend  = (mbedtls_t_udbl) u1 << biL;\n    dividend |= (mbedtls_t_udbl) u0;\n    quotient = dividend / d;\n    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )\n        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;\n\n    if( r != NULL )\n        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );\n\n    return (mbedtls_mpi_uint) quotient;\n#else\n\n    /*\n     * Algorithm D, Section 4.3.1 - The Art of Computer Programming\n     *   Vol. 2 - Seminumerical Algorithms, Knuth\n     */\n\n    /*\n     * Normalize the divisor, d, and dividend, u0, u1\n     */\n    s = mbedtls_clz( d );\n    d = d << s;\n\n    u1 = u1 << s;\n    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );\n    u0 =  u0 << s;\n\n    d1 = d >> biH;\n    d0 = d & uint_halfword_mask;\n\n    u0_msw = u0 >> biH;\n    u0_lsw = u0 & uint_halfword_mask;\n\n    /*\n     * Find the first quotient and remainder\n     */\n    q1 = u1 / d1;\n    r0 = u1 - d1 * q1;\n\n    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )\n    {\n        q1 -= 1;\n        r0 += d1;\n\n        if ( r0 >= radix ) break;\n    }\n\n    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );\n    q0 = rAX / d1;\n    r0 = rAX - q0 * d1;\n\n    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )\n    {\n        q0 -= 1;\n        r0 += d1;\n\n        if ( r0 >= radix ) break;\n    }\n\n    if (r != NULL)\n        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;\n\n    quotient = q1 * radix + q0;\n\n    return quotient;\n#endif\n}\n\n/*\n * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)\n */\nint mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n    size_t i, n, t, k;\n    mbedtls_mpi X, Y, Z, T1, T2;\n\n    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )\n        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );\n\n    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );\n    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );\n\n    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )\n    {\n        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );\n        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );\n        return( 0 );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );\n    X.s = Y.s = 1;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );\n\n    k = mbedtls_mpi_bitlen( &Y ) % biL;\n    if( k < biL - 1 )\n    {\n        k = biL - 1 - k;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );\n    }\n    else k = 0;\n\n    n = X.n - 1;\n    t = Y.n - 1;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );\n\n    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )\n    {\n        Z.p[n - t]++;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );\n    }\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );\n\n    for( i = n; i > t ; i-- )\n    {\n        if( X.p[i] >= Y.p[t] )\n            Z.p[i - t - 1] = ~0;\n        else\n        {\n            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],\n                                                            Y.p[t], NULL);\n        }\n\n        Z.p[i - t - 1]++;\n        do\n        {\n            Z.p[i - t - 1]--;\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );\n            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];\n            T1.p[1] = Y.p[t];\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );\n            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];\n            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];\n            T2.p[2] = X.p[i];\n        }\n        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );\n\n        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );\n            Z.p[i - t - 1]--;\n        }\n    }\n\n    if( Q != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );\n        Q->s = A->s * B->s;\n    }\n\n    if( R != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );\n        X.s = A->s;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );\n\n        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )\n            R->s = 1;\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );\n    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );\n\n    return( ret );\n}\n\n/*\n * Division by int: A = Q * b + R\n */\nint mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b )\n{\n    mbedtls_mpi _B;\n    mbedtls_mpi_uint p[1];\n\n    p[0] = ( b < 0 ) ? -b : b;\n    _B.s = ( b < 0 ) ? -1 : 1;\n    _B.n = 1;\n    _B.p = p;\n\n    return( mbedtls_mpi_div_mpi( Q, R, A, &_B ) );\n}\n\n/*\n * Modulo: R = A mod B\n */\nint mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n\n    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )\n        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );\n\n    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )\n      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );\n\n    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )\n      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Modulo: r = A mod b\n */\nint mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )\n{\n    size_t i;\n    mbedtls_mpi_uint x, y, z;\n\n    if( b == 0 )\n        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );\n\n    if( b < 0 )\n        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );\n\n    /*\n     * handle trivial cases\n     */\n    if( b == 1 )\n    {\n        *r = 0;\n        return( 0 );\n    }\n\n    if( b == 2 )\n    {\n        *r = A->p[0] & 1;\n        return( 0 );\n    }\n\n    /*\n     * general case\n     */\n    for( i = A->n, y = 0; i > 0; i-- )\n    {\n        x  = A->p[i - 1];\n        y  = ( y << biH ) | ( x >> biH );\n        z  = y / b;\n        y -= z * b;\n\n        x <<= biH;\n        y  = ( y << biH ) | ( x >> biH );\n        z  = y / b;\n        y -= z * b;\n    }\n\n    /*\n     * If A is negative, then the current y represents a negative value.\n     * Flipping it to the positive side.\n     */\n    if( A->s < 0 && y != 0 )\n        y = b - y;\n\n    *r = y;\n\n    return( 0 );\n}\n\n/*\n * Fast Montgomery initialization (thanks to Tom St Denis)\n */\nstatic void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )\n{\n    mbedtls_mpi_uint x, m0 = N->p[0];\n    unsigned int i;\n\n    x  = m0;\n    x += ( ( m0 + 2 ) & 4 ) << 1;\n\n    for( i = biL; i >= 8; i /= 2 )\n        x *= ( 2 - ( m0 * x ) );\n\n    *mm = ~x + 1;\n}\n\n/*\n * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)\n */\nstatic int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,\n                         const mbedtls_mpi *T )\n{\n    size_t i, n, m;\n    mbedtls_mpi_uint u0, u1, *d;\n\n    if( T->n < N->n + 1 || T->p == NULL )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    memset( T->p, 0, T->n * ciL );\n\n    d = T->p;\n    n = N->n;\n    m = ( B->n < n ) ? B->n : n;\n\n    for( i = 0; i < n; i++ )\n    {\n        /*\n         * T = (T + u0*B + u1*N) / 2^biL\n         */\n        u0 = A->p[i];\n        u1 = ( d[0] + u0 * B->p[0] ) * mm;\n\n        mpi_mul_hlp( m, B->p, d, u0 );\n        mpi_mul_hlp( n, N->p, d, u1 );\n\n        *d++ = u0; d[n + 1] = 0;\n    }\n\n    memcpy( A->p, d, ( n + 1 ) * ciL );\n\n    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )\n        mpi_sub_hlp( n, N->p, A->p );\n    else\n        /* prevent timing attacks */\n        mpi_sub_hlp( n, A->p, T->p );\n\n    return( 0 );\n}\n\n/*\n * Montgomery reduction: A = A * R^-1 mod N\n */\nstatic int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )\n{\n    mbedtls_mpi_uint z = 1;\n    mbedtls_mpi U;\n\n    U.n = U.s = (int) z;\n    U.p = &z;\n\n    return( mpi_montmul( A, &U, N, mm, T ) );\n}\n\n/*\n * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)\n */\nint mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )\n{\n    int ret;\n    size_t wbits, wsize, one = 1;\n    size_t i, j, nblimbs;\n    size_t bufsize, nbits;\n    mbedtls_mpi_uint ei, mm, state;\n    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;\n    int neg;\n\n    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    /*\n     * Init temps and window size\n     */\n    mpi_montg_init( &mm, N );\n    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );\n    mbedtls_mpi_init( &Apos );\n    memset( W, 0, sizeof( W ) );\n\n    i = mbedtls_mpi_bitlen( E );\n\n    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :\n            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;\n\n    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )\n        wsize = MBEDTLS_MPI_WINDOW_SIZE;\n\n    j = N->n + 1;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );\n\n    /*\n     * Compensate for negative A (and correct at the end)\n     */\n    neg = ( A->s == -1 );\n    if( neg )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );\n        Apos.s = 1;\n        A = &Apos;\n    }\n\n    /*\n     * If 1st call, pre-compute R^2 mod N\n     */\n    if( _RR == NULL || _RR->p == NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );\n\n        if( _RR != NULL )\n            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );\n    }\n    else\n        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );\n\n    /*\n     * W[1] = A * R^2 * R^-1 mod N = A * R mod N\n     */\n    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );\n    else\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );\n\n    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );\n\n    /*\n     * X = R^2 * R^-1 mod N = R mod N\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );\n    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );\n\n    if( wsize > 1 )\n    {\n        /*\n         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)\n         */\n        j =  one << ( wsize - 1 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );\n\n        for( i = 0; i < wsize - 1; i++ )\n            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );\n\n        /*\n         * W[i] = W[i - 1] * W[1]\n         */\n        for( i = j + 1; i < ( one << wsize ); i++ )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );\n\n            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );\n        }\n    }\n\n    nblimbs = E->n;\n    bufsize = 0;\n    nbits   = 0;\n    wbits   = 0;\n    state   = 0;\n\n    while( 1 )\n    {\n        if( bufsize == 0 )\n        {\n            if( nblimbs == 0 )\n                break;\n\n            nblimbs--;\n\n            bufsize = sizeof( mbedtls_mpi_uint ) << 3;\n        }\n\n        bufsize--;\n\n        ei = (E->p[nblimbs] >> bufsize) & 1;\n\n        /*\n         * skip leading 0s\n         */\n        if( ei == 0 && state == 0 )\n            continue;\n\n        if( ei == 0 && state == 1 )\n        {\n            /*\n             * out of window, square X\n             */\n            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );\n            continue;\n        }\n\n        /*\n         * add ei to current window\n         */\n        state = 2;\n\n        nbits++;\n        wbits |= ( ei << ( wsize - nbits ) );\n\n        if( nbits == wsize )\n        {\n            /*\n             * X = X^wsize R^-1 mod N\n             */\n            for( i = 0; i < wsize; i++ )\n                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );\n\n            /*\n             * X = X * W[wbits] R^-1 mod N\n             */\n            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );\n\n            state--;\n            nbits = 0;\n            wbits = 0;\n        }\n    }\n\n    /*\n     * process the remaining bits\n     */\n    for( i = 0; i < nbits; i++ )\n    {\n        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );\n\n        wbits <<= 1;\n\n        if( ( wbits & ( one << wsize ) ) != 0 )\n            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );\n    }\n\n    /*\n     * X = A^E * R * R^-1 mod N = A^E mod N\n     */\n    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );\n\n    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )\n    {\n        X->s = -1;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );\n    }\n\ncleanup:\n\n    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )\n        mbedtls_mpi_free( &W[i] );\n\n    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );\n\n    if( _RR == NULL || _RR->p == NULL )\n        mbedtls_mpi_free( &RR );\n\n    return( ret );\n}\n\n/*\n * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)\n */\nint mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n    size_t lz, lzt;\n    mbedtls_mpi TG, TA, TB;\n\n    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );\n\n    lz = mbedtls_mpi_lsb( &TA );\n    lzt = mbedtls_mpi_lsb( &TB );\n\n    if( lzt < lz )\n        lz = lzt;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );\n\n    TA.s = TB.s = 1;\n\n    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );\n\n        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );\n        }\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );\n\n    return( ret );\n}\n\n/*\n * Fill X with size bytes of random.\n *\n * Use a temporary bytes representation to make sure the result is the same\n * regardless of the platform endianness (useful when f_rng is actually\n * deterministic, eg for tests).\n */\nint mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    int ret;\n    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];\n\n    if( size > MBEDTLS_MPI_MAX_SIZE )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );\n\ncleanup:\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n    return( ret );\n}\n\n/*\n * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)\n */\nint mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )\n{\n    int ret;\n    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;\n\n    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );\n    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );\n    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );\n\n    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )\n    {\n        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;\n        goto cleanup;\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );\n\n    do\n    {\n        while( ( TU.p[0] & 1 ) == 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );\n\n            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )\n            {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );\n                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );\n            }\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );\n        }\n\n        while( ( TV.p[0] & 1 ) == 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );\n\n            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )\n            {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );\n                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );\n            }\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );\n        }\n\n        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );\n        }\n    }\n    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );\n\n    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );\n\n    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );\n    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );\n    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_GENPRIME)\n\nstatic const int small_prime[] =\n{\n        3,    5,    7,   11,   13,   17,   19,   23,\n       29,   31,   37,   41,   43,   47,   53,   59,\n       61,   67,   71,   73,   79,   83,   89,   97,\n      101,  103,  107,  109,  113,  127,  131,  137,\n      139,  149,  151,  157,  163,  167,  173,  179,\n      181,  191,  193,  197,  199,  211,  223,  227,\n      229,  233,  239,  241,  251,  257,  263,  269,\n      271,  277,  281,  283,  293,  307,  311,  313,\n      317,  331,  337,  347,  349,  353,  359,  367,\n      373,  379,  383,  389,  397,  401,  409,  419,\n      421,  431,  433,  439,  443,  449,  457,  461,\n      463,  467,  479,  487,  491,  499,  503,  509,\n      521,  523,  541,  547,  557,  563,  569,  571,\n      577,  587,  593,  599,  601,  607,  613,  617,\n      619,  631,  641,  643,  647,  653,  659,  661,\n      673,  677,  683,  691,  701,  709,  719,  727,\n      733,  739,  743,  751,  757,  761,  769,  773,\n      787,  797,  809,  811,  821,  823,  827,  829,\n      839,  853,  857,  859,  863,  877,  881,  883,\n      887,  907,  911,  919,  929,  937,  941,  947,\n      953,  967,  971,  977,  983,  991,  997, -103\n};\n\n/*\n * Small divisors test (X must be positive)\n *\n * Return values:\n * 0: no small factor (possible prime, more tests needed)\n * 1: certain prime\n * MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: certain non-prime\n * other negative: error\n */\nstatic int mpi_check_small_factors( const mbedtls_mpi *X )\n{\n    int ret = 0;\n    size_t i;\n    mbedtls_mpi_uint r;\n\n    if( ( X->p[0] & 1 ) == 0 )\n        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );\n\n    for( i = 0; small_prime[i] > 0; i++ )\n    {\n        if( mbedtls_mpi_cmp_int( X, small_prime[i] ) <= 0 )\n            return( 1 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, small_prime[i] ) );\n\n        if( r == 0 )\n            return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Miller-Rabin pseudo-primality test  (HAC 4.24)\n */\nstatic int mpi_miller_rabin( const mbedtls_mpi *X,\n                             int (*f_rng)(void *, unsigned char *, size_t),\n                             void *p_rng )\n{\n    int ret, count;\n    size_t i, j, k, n, s;\n    mbedtls_mpi W, R, T, A, RR;\n\n    mbedtls_mpi_init( &W ); mbedtls_mpi_init( &R ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &A );\n    mbedtls_mpi_init( &RR );\n\n    /*\n     * W = |X| - 1\n     * R = W >> lsb( W )\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );\n    s = mbedtls_mpi_lsb( &W );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &R, s ) );\n\n    i = mbedtls_mpi_bitlen( X );\n    /*\n     * HAC, table 4.4\n     */\n    n = ( ( i >= 1300 ) ?  2 : ( i >=  850 ) ?  3 :\n          ( i >=  650 ) ?  4 : ( i >=  350 ) ?  8 :\n          ( i >=  250 ) ? 12 : ( i >=  150 ) ? 18 : 27 );\n\n    for( i = 0; i < n; i++ )\n    {\n        /*\n         * pick a random A, 1 < A < |X| - 1\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );\n\n        if( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 )\n        {\n            j = mbedtls_mpi_bitlen( &A ) - mbedtls_mpi_bitlen( &W );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &A, j + 1 ) );\n        }\n        A.p[0] |= 3;\n\n        count = 0;\n        do {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );\n\n            j = mbedtls_mpi_bitlen( &A );\n            k = mbedtls_mpi_bitlen( &W );\n            if (j > k) {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &A, j - k ) );\n            }\n\n            if (count++ > 30) {\n                return MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;\n            }\n\n        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||\n                  mbedtls_mpi_cmp_int( &A, 1 )  <= 0    );\n\n        /*\n         * A = A^R mod |X|\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &A, &A, &R, X, &RR ) );\n\n        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||\n            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )\n            continue;\n\n        j = 1;\n        while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )\n        {\n            /*\n             * A = A * A mod |X|\n             */\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &A, &A ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &A, &T, X  ) );\n\n            if( mbedtls_mpi_cmp_int( &A, 1 ) == 0 )\n                break;\n\n            j++;\n        }\n\n        /*\n         * not prime if A != |X| - 1 or A == 1\n         */\n        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||\n            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )\n        {\n            ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;\n            break;\n        }\n    }\n\ncleanup:\n    mbedtls_mpi_free( &W ); mbedtls_mpi_free( &R ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &A );\n    mbedtls_mpi_free( &RR );\n\n    return( ret );\n}\n\n/*\n * Pseudo-primality test: small factors, then Miller-Rabin\n */\nint mbedtls_mpi_is_prime( const mbedtls_mpi *X,\n                  int (*f_rng)(void *, unsigned char *, size_t),\n                  void *p_rng )\n{\n    int ret;\n    mbedtls_mpi XX;\n\n    XX.s = 1;\n    XX.n = X->n;\n    XX.p = X->p;\n\n    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||\n        mbedtls_mpi_cmp_int( &XX, 1 ) == 0 )\n        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );\n\n    if( mbedtls_mpi_cmp_int( &XX, 2 ) == 0 )\n        return( 0 );\n\n    if( ( ret = mpi_check_small_factors( &XX ) ) != 0 )\n    {\n        if( ret == 1 )\n            return( 0 );\n\n        return( ret );\n    }\n\n    return( mpi_miller_rabin( &XX, f_rng, p_rng ) );\n}\n\n/*\n * Prime number generation\n *\n * If dh_flag is 0 and nbits is at least 1024, then the procedure\n * follows the RSA probably-prime generation method of FIPS 186-4.\n * NB. FIPS 186-4 only allows the specific bit lengths of 1024 and 1536.\n */\nint mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int dh_flag,\n                   int (*f_rng)(void *, unsigned char *, size_t),\n                   void *p_rng )\n{\n#ifdef MBEDTLS_HAVE_INT64\n// ceil(2^63.5)\n#define CEIL_MAXUINT_DIV_SQRT2 0xb504f333f9de6485ULL\n#else\n// ceil(2^31.5)\n#define CEIL_MAXUINT_DIV_SQRT2 0xb504f334U\n#endif\n    int ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;\n    size_t k, n;\n    mbedtls_mpi_uint r;\n    mbedtls_mpi Y;\n\n    if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &Y );\n\n    n = BITS_TO_LIMBS( nbits );\n\n    while( 1 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( X, n * ciL, f_rng, p_rng ) );\n        /* make sure generated number is at least (nbits-1)+0.5 bits (FIPS 186-4 §B.3.3 steps 4.4, 5.5) */\n        if( X->p[n-1] < CEIL_MAXUINT_DIV_SQRT2 ) continue;\n\n        k = n * biL;\n        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );\n        X->p[0] |= 1;\n\n        if( dh_flag == 0 )\n        {\n            ret = mbedtls_mpi_is_prime( X, f_rng, p_rng );\n\n            if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )\n                goto cleanup;\n        }\n        else\n        {\n            /*\n             * An necessary condition for Y and X = 2Y + 1 to be prime\n             * is X = 2 mod 3 (which is equivalent to Y = 2 mod 3).\n             * Make sure it is satisfied, while keeping X = 3 mod 4\n             */\n\n            X->p[0] |= 2;\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, 3 ) );\n            if( r == 0 )\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 8 ) );\n            else if( r == 1 )\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 4 ) );\n\n            /* Set Y = (X-1) / 2, which is X / 2 because X is odd */\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, X ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, 1 ) );\n\n            while( 1 )\n            {\n                /*\n                 * First, check small factors for X and Y\n                 * before doing Miller-Rabin on any of them\n                 */\n                if( ( ret = mpi_check_small_factors(  X         ) ) == 0 &&\n                    ( ret = mpi_check_small_factors( &Y         ) ) == 0 &&\n                    ( ret = mpi_miller_rabin(  X, f_rng, p_rng  ) ) == 0 &&\n                    ( ret = mpi_miller_rabin( &Y, f_rng, p_rng  ) ) == 0 )\n                    goto cleanup;\n\n                if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )\n                    goto cleanup;\n\n                /*\n                 * Next candidates. We want to preserve Y = (X-1) / 2 and\n                 * Y = 1 mod 2 and Y = 2 mod 3 (eq X = 3 mod 4 and X = 2 mod 3)\n                 * so up Y by 6 and X by 12.\n                 */\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int(  X,  X, 12 ) );\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &Y, &Y, 6  ) );\n            }\n        }\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &Y );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_GENPRIME */\n\n#if defined(MBEDTLS_SELF_TEST)\n\n#define GCD_PAIR_COUNT  3\n\nstatic const int gcd_pairs[GCD_PAIR_COUNT][3] =\n{\n    { 693, 609, 21 },\n    { 1764, 868, 28 },\n    { 768454923, 542167814, 1 }\n};\n\n/*\n * Checkup routine\n */\nint mbedtls_mpi_self_test( int verbose )\n{\n    int ret, i;\n    mbedtls_mpi A, E, N, X, Y, U, V;\n\n    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &N ); mbedtls_mpi_init( &X );\n    mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &U ); mbedtls_mpi_init( &V );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &A, 16,\n        \"EFE021C2645FD1DC586E69184AF4A31E\" \\\n        \"D5F53E93B5F123FA41680867BA110131\" \\\n        \"944FE7952E2517337780CB0DB80E61AA\" \\\n        \"E7C8DDC6C5C6AADEB34EB38A2F40D5E6\" ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &E, 16,\n        \"B2E7EFD37075B9F03FF989C7C5051C20\" \\\n        \"34D2A323810251127E7BF8625A4F49A5\" \\\n        \"F3E27F4DA8BD59C47D6DAABA4C8127BD\" \\\n        \"5B5C25763222FEFCCFC38B832366C29E\" ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &N, 16,\n        \"0066A198186C18C10B2F5ED9B522752A\" \\\n        \"9830B69916E535C8F047518A889A43A5\" \\\n        \"94B6BED27A168D31D4A52F88925AA8F5\" ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X, &A, &N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,\n        \"602AB7ECA597A3D6B56FF9829A5E8B85\" \\\n        \"9E857EA95A03512E2BAE7391688D264A\" \\\n        \"A5663B0341DB9CCFD2C4C5F421FEC814\" \\\n        \"8001B72E848A38CAE1C65F78E56ABDEF\" \\\n        \"E12D3C039B8A02D6BE593F0BBBDA56F1\" \\\n        \"ECF677152EF804370C1A305CAF3B5BF1\" \\\n        \"30879B56C61DE584A0F53A2447A51E\" ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #1 (mul_mpi): \" );\n\n    if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &X, &Y, &A, &N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,\n        \"256567336059E52CAE22925474705F39A94\" ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &V, 16,\n        \"6613F26162223DF488E9CD48CC132C7A\" \\\n        \"0AC93C701B001B092E4E5B9F73BCD27B\" \\\n        \"9EE50D0657C77F374E903CDFA4C642\" ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #2 (div_mpi): \" );\n\n    if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 ||\n        mbedtls_mpi_cmp_mpi( &Y, &V ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &X, &A, &E, &N, NULL ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,\n        \"36E139AEA55215609D2816998ED020BB\" \\\n        \"BD96C37890F65171D948E9BC7CBAA4D9\" \\\n        \"325D24D6A3C12710F10A09FA08AB87\" ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #3 (exp_mod): \" );\n\n    if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &X, &A, &N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,\n        \"003A0AAEDD7E784FC07D8F9EC6E3BFD5\" \\\n        \"C3DBA76456363A10869622EAC2DD84EC\" \\\n        \"C5B8A74DAC4D09E03B5E0BE779F2DF61\" ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #4 (inv_mod): \" );\n\n    if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #5 (simple gcd): \" );\n\n    for( i = 0; i < GCD_PAIR_COUNT; i++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &X, gcd_pairs[i][0] ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Y, gcd_pairs[i][1] ) );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &A, &X, &Y ) );\n\n        if( mbedtls_mpi_cmp_int( &A, gcd_pairs[i][2] ) != 0 )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed at %d\\n\", i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\ncleanup:\n\n    if( ret != 0 && verbose != 0 )\n        mbedtls_printf( \"Unexpected error, return code = %08X\\n\", ret );\n\n    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &N ); mbedtls_mpi_free( &X );\n    mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &U ); mbedtls_mpi_free( &V );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_BIGNUM_C */\n","/*\n *  Elliptic curves over GF(p): generic functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n * GECC = Guide to Elliptic Curve Cryptography - Hankerson, Menezes, Vanstone\n * FIPS 186-3 http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf\n * RFC 4492 for the related TLS structures and constants\n * RFC 7748 for the Curve448 and Curve25519 curve definitions\n *\n * [Curve25519] http://cr.yp.to/ecdh/curve25519-20060209.pdf\n *\n * [2] CORON, Jean-S'ebastien. Resistance against differential power analysis\n *     for elliptic curve cryptosystems. In : Cryptographic Hardware and\n *     Embedded Systems. Springer Berlin Heidelberg, 1999. p. 292-302.\n *     <http://link.springer.com/chapter/10.1007/3-540-48059-5_25>\n *\n * [3] HEDABOU, Mustapha, PINEL, Pierre, et B'EN'ETEAU, Lucien. A comb method to\n *     render ECC resistant against Side Channel Attacks. IACR Cryptology\n *     ePrint Archive, 2004, vol. 2004, p. 342.\n *     <http://eprint.iacr.org/2004/342.pdf>\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n\n#include \"mbedtls/ecp.h\"\n#include \"mbedtls/threading.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if !defined(MBEDTLS_ECP_ALT)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#include <stdio.h>\n#define mbedtls_printf     printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#include \"mbedtls/ecp_internal.h\"\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n/*\n * Counts of point addition and doubling, and field multiplications.\n * Used to test resistance of point multiplication to simple timing attacks.\n */\nstatic unsigned long add_count, dbl_count, mul_count;\n#endif\n\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n#define ECP_SHORTWEIERSTRASS\n#endif\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED) || \\\n    defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)\n#define ECP_MONTGOMERY\n#endif\n\n/*\n * Curve types: internal for now, might be exposed later\n */\ntypedef enum\n{\n    ECP_TYPE_NONE = 0,\n    ECP_TYPE_SHORT_WEIERSTRASS,    /* y^2 = x^3 + a x + b      */\n    ECP_TYPE_MONTGOMERY,           /* y^2 = x^3 + a x^2 + x    */\n} ecp_curve_type;\n\n/*\n * List of supported curves:\n *  - internal ID\n *  - TLS NamedCurve ID (RFC 4492 sec. 5.1.1, RFC 7071 sec. 2)\n *  - size in bits\n *  - readable name\n *\n * Curves are listed in order: largest curves first, and for a given size,\n * fastest curves first. This provides the default order for the SSL module.\n *\n * Reminder: update profiles in x509_crt.c when adding a new curves!\n */\nstatic const mbedtls_ecp_curve_info ecp_supported_curves[] =\n{\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP521R1,    25,     521,    \"secp521r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP512R1,      28,     512,    \"brainpoolP512r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP384R1,    24,     384,    \"secp384r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP384R1,      27,     384,    \"brainpoolP384r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP256R1,    23,     256,    \"secp256r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP256K1,    22,     256,    \"secp256k1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP256R1,      26,     256,    \"brainpoolP256r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP224R1,    21,     224,    \"secp224r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP224K1,    20,     224,    \"secp224k1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP192R1,    19,     192,    \"secp192r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP192K1,    18,     192,    \"secp192k1\"         },\n#endif\n    { MBEDTLS_ECP_DP_NONE,          0,     0,      NULL                },\n};\n\n#define ECP_NB_CURVES   sizeof( ecp_supported_curves ) /    \\\n                        sizeof( ecp_supported_curves[0] )\n\nstatic mbedtls_ecp_group_id ecp_supported_grp_id[ECP_NB_CURVES];\n\n/*\n * List of supported curves and associated info\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void )\n{\n    return( ecp_supported_curves );\n}\n\n/*\n * List of supported curves, group ID only\n */\nconst mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )\n{\n    static int init_done = 0;\n\n    if( ! init_done )\n    {\n        size_t i = 0;\n        const mbedtls_ecp_curve_info *curve_info;\n\n        for( curve_info = mbedtls_ecp_curve_list();\n             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n             curve_info++ )\n        {\n            ecp_supported_grp_id[i++] = curve_info->grp_id;\n        }\n        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;\n\n        init_done = 1;\n    }\n\n    return( ecp_supported_grp_id );\n}\n\n/*\n * Get the curve info for the internal identifier\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( curve_info->grp_id == grp_id )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the curve info from the TLS identifier\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( curve_info->tls_id == tls_id )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the curve info from the name\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( strcmp( curve_info->name, name ) == 0 )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the type of a curve\n */\nstatic inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )\n{\n    if( grp->G.X.p == NULL )\n        return( ECP_TYPE_NONE );\n\n    if( grp->G.Y.p == NULL )\n        return( ECP_TYPE_MONTGOMERY );\n    else\n        return( ECP_TYPE_SHORT_WEIERSTRASS );\n}\n\n/*\n * Initialize (the components of) a point\n */\nvoid mbedtls_ecp_point_init( mbedtls_ecp_point *pt )\n{\n    if( pt == NULL )\n        return;\n\n    mbedtls_mpi_init( &pt->X );\n    mbedtls_mpi_init( &pt->Y );\n    mbedtls_mpi_init( &pt->Z );\n}\n\n/*\n * Initialize (the components of) a group\n */\nvoid mbedtls_ecp_group_init( mbedtls_ecp_group *grp )\n{\n    if( grp == NULL )\n        return;\n\n    memset( grp, 0, sizeof( mbedtls_ecp_group ) );\n}\n\n/*\n * Initialize (the components of) a key pair\n */\nvoid mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )\n{\n    if( key == NULL )\n        return;\n\n    mbedtls_ecp_group_init( &key->grp );\n    mbedtls_mpi_init( &key->d );\n    mbedtls_ecp_point_init( &key->Q );\n}\n\n/*\n * Unallocate (the components of) a point\n */\nvoid mbedtls_ecp_point_free( mbedtls_ecp_point *pt )\n{\n    if( pt == NULL )\n        return;\n\n    mbedtls_mpi_free( &( pt->X ) );\n    mbedtls_mpi_free( &( pt->Y ) );\n    mbedtls_mpi_free( &( pt->Z ) );\n}\n\n/*\n * Unallocate (the components of) a group\n */\nvoid mbedtls_ecp_group_free( mbedtls_ecp_group *grp )\n{\n    size_t i;\n\n    if( grp == NULL )\n        return;\n\n    if( grp->h != 1 )\n    {\n        mbedtls_mpi_free( &grp->P );\n        mbedtls_mpi_free( &grp->A );\n        mbedtls_mpi_free( &grp->B );\n        mbedtls_ecp_point_free( &grp->G );\n        mbedtls_mpi_free( &grp->N );\n    }\n\n    if( grp->T != NULL )\n    {\n        for( i = 0; i < grp->T_size; i++ )\n            mbedtls_ecp_point_free( &grp->T[i] );\n        mbedtls_free( grp->T );\n    }\n\n    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );\n}\n\n/*\n * Unallocate (the components of) a key pair\n */\nvoid mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )\n{\n    if( key == NULL )\n        return;\n\n    mbedtls_ecp_group_free( &key->grp );\n    mbedtls_mpi_free( &key->d );\n    mbedtls_ecp_point_free( &key->Q );\n}\n\n/*\n * Copy the contents of a point\n */\nint mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Copy the contents of a group object\n */\nint mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )\n{\n    return mbedtls_ecp_group_load( dst, src->id );\n}\n\n/*\n * Set point to zero\n */\nint mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Tell if a point is zero\n */\nint mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )\n{\n    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );\n}\n\n/*\n * Compare two points lazyly\n */\nint mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,\n                           const mbedtls_ecp_point *Q )\n{\n    if( mbedtls_mpi_cmp_mpi( &P->X, &Q->X ) == 0 &&\n        mbedtls_mpi_cmp_mpi( &P->Y, &Q->Y ) == 0 &&\n        mbedtls_mpi_cmp_mpi( &P->Z, &Q->Z ) == 0 )\n    {\n        return( 0 );\n    }\n\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Import a non-zero point from ASCII strings\n */\nint mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,\n                           const char *x, const char *y )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->X, radix, x ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->Y, radix, y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Export a point into unsigned binary data (SEC1 2.3.3)\n */\nint mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,\n                            int format, size_t *olen,\n                            unsigned char *buf, size_t buflen )\n{\n    int ret = 0;\n    size_t plen;\n\n    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&\n        format != MBEDTLS_ECP_PF_COMPRESSED )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Common case: P == 0\n     */\n    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )\n    {\n        if( buflen < 1 )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x00;\n        *olen = 1;\n\n        return( 0 );\n    }\n\n    plen = mbedtls_mpi_size( &grp->P );\n\n    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )\n    {\n        *olen = 2 * plen + 1;\n\n        if( buflen < *olen )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x04;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );\n    }\n    else if( format == MBEDTLS_ECP_PF_COMPRESSED )\n    {\n        *olen = plen + 1;\n\n        if( buflen < *olen )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Import a point from unsigned binary data (SEC1 2.3.4)\n */\nint mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                           const unsigned char *buf, size_t ilen )\n{\n    int ret;\n    size_t plen;\n\n    if( ilen < 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( buf[0] == 0x00 )\n    {\n        if( ilen == 1 )\n            return( mbedtls_ecp_set_zero( pt ) );\n        else\n            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    plen = mbedtls_mpi_size( &grp->P );\n\n    if( buf[0] != 0x04 )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    if( ilen != 2 * plen + 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Import a point from a TLS ECPoint record (RFC 4492)\n *      struct {\n *          opaque point <1..2^8-1>;\n *      } ECPoint;\n */\nint mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                        const unsigned char **buf, size_t buf_len )\n{\n    unsigned char data_len;\n    const unsigned char *buf_start;\n\n    /*\n     * We must have at least two bytes (1 for length, at least one for data)\n     */\n    if( buf_len < 2 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    data_len = *(*buf)++;\n    if( data_len < 1 || data_len > buf_len - 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Save buffer start for read_binary and update buf\n     */\n    buf_start = *buf;\n    *buf += data_len;\n\n    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );\n}\n\n/*\n * Export a point as a TLS ECPoint record (RFC 4492)\n *      struct {\n *          opaque point <1..2^8-1>;\n *      } ECPoint;\n */\nint mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,\n                         int format, size_t *olen,\n                         unsigned char *buf, size_t blen )\n{\n    int ret;\n\n    /*\n     * buffer length must be at least one, for our length byte\n     */\n    if( blen < 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,\n                    olen, buf + 1, blen - 1) ) != 0 )\n        return( ret );\n\n    /*\n     * write length to the first byte and update total length\n     */\n    buf[0] = (unsigned char) *olen;\n    ++*olen;\n\n    return( 0 );\n}\n\n/*\n * Set a group from an ECParameters record (RFC 4492)\n */\nint mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len )\n{\n    uint16_t tls_id;\n    const mbedtls_ecp_curve_info *curve_info;\n\n    /*\n     * We expect at least three bytes (see below)\n     */\n    if( len < 3 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * First byte is curve_type; only named_curve is handled\n     */\n    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Next two bytes are the namedcurve value\n     */\n    tls_id = *(*buf)++;\n    tls_id <<= 8;\n    tls_id |= *(*buf)++;\n\n    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    return mbedtls_ecp_group_load( grp, curve_info->grp_id );\n}\n\n/*\n * Write the ECParameters record corresponding to a group (RFC 4492)\n */\nint mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,\n                         unsigned char *buf, size_t blen )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    if( ( curve_info = mbedtls_ecp_curve_info_from_grp_id( grp->id ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * We are going to write 3 bytes (see below)\n     */\n    *olen = 3;\n    if( blen < *olen )\n        return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n    /*\n     * First byte is curve_type, always named_curve\n     */\n    *buf++ = MBEDTLS_ECP_TLS_NAMED_CURVE;\n\n    /*\n     * Next two bytes are the namedcurve value\n     */\n    buf[0] = curve_info->tls_id >> 8;\n    buf[1] = curve_info->tls_id & 0xFF;\n\n    return( 0 );\n}\n\n/*\n * Wrapper around fast quasi-modp functions, with fall-back to mbedtls_mpi_mod_mpi.\n * See the documentation of struct mbedtls_ecp_group.\n *\n * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.\n */\nstatic int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )\n{\n    int ret;\n\n    if( grp->modp == NULL )\n        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );\n\n    /* N->s < 0 is a much faster test, which fails only if N is 0 */\n    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||\n        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )\n    {\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    MBEDTLS_MPI_CHK( grp->modp( N ) );\n\n    /* N->s < 0 is a much faster test, which fails only if N is 0 */\n    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );\n\n    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )\n        /* we known P, N and the result are positive */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Fast mod-p functions expect their argument to be in the 0..p^2 range.\n *\n * In order to guarantee that, we need to ensure that operands of\n * mbedtls_mpi_mul_mpi are in the 0..p range. So, after each operation we will\n * bring the result back to this range.\n *\n * The following macros are shortcuts for doing that.\n */\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, general case, to use after mbedtls_mpi_mul_mpi\n */\n#if defined(MBEDTLS_SELF_TEST)\n#define INC_MUL_COUNT   mul_count++;\n#else\n#define INC_MUL_COUNT\n#endif\n\n#define MOD_MUL( N )    do { MBEDTLS_MPI_CHK( ecp_modp( &N, grp ) ); INC_MUL_COUNT } \\\n                        while( 0 )\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_sub_mpi\n * N->s < 0 is a very fast test, which fails only if N is 0\n */\n#define MOD_SUB( N )                                \\\n    while( N.s < 0 && mbedtls_mpi_cmp_int( &N, 0 ) != 0 )   \\\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &N, &N, &grp->P ) )\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_add_mpi and mbedtls_mpi_mul_int.\n * We known P, N and the result are positive, so sub_abs is correct, and\n * a bit faster.\n */\n#define MOD_ADD( N )                                \\\n    while( mbedtls_mpi_cmp_mpi( &N, &grp->P ) >= 0 )        \\\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &N, &N, &grp->P ) )\n\n#if defined(ECP_SHORTWEIERSTRASS)\n/*\n * For curves in short Weierstrass form, we do all the internal operations in\n * Jacobian coordinates.\n *\n * For multiplication, we'll use a comb method with coutermeasueres against\n * SPA, hence timing attacks.\n */\n\n/*\n * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)\n * Cost: 1N := 1I + 3M + 1S\n */\nstatic int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )\n{\n    int ret;\n    mbedtls_mpi Zi, ZZi;\n\n    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )\n        return( 0 );\n\n#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_jac( grp, pt );\n    }\n#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */\n    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );\n\n    /*\n     * X = X / Z^2  mod p\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );\n\n    /*\n     * Y = Y / Z^3  mod p\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );\n\n    /*\n     * Z = 1\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );\n\n    return( ret );\n}\n\n/*\n * Normalize jacobian coordinates of an array of (pointers to) points,\n * using Montgomery's trick to perform only one inversion mod P.\n * (See for example Cohen's \"A Course in Computational Algebraic Number\n * Theory\", Algorithm 10.3.4.)\n *\n * Warning: fails (returning an error) if one of the points is zero!\n * This should never happen, see choice of w in ecp_mul_comb().\n *\n * Cost: 1N(t) := 1I + (6t - 3)M + 1S\n */\nstatic int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,\n                                   mbedtls_ecp_point *T[], size_t t_len )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi *c, u, Zi, ZZi;\n\n    if( t_len < 2 )\n        return( ecp_normalize_jac( grp, *T ) );\n\n#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_jac_many(grp, T, t_len);\n    }\n#endif\n\n    if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );\n\n    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );\n\n    /*\n     * c[i] = Z_0 * ... * Z_i\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );\n    for( i = 1; i < t_len; i++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );\n        MOD_MUL( c[i] );\n    }\n\n    /*\n     * u = 1 / (Z_0 * ... * Z_n) mod P\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );\n\n    for( i = t_len - 1; ; i-- )\n    {\n        /*\n         * Zi = 1 / Z_i mod p\n         * u = 1 / (Z_0 * ... * Z_i) mod P\n         */\n        if( i == 0 ) {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );\n        }\n\n        /*\n         * proceed as in normalize()\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );\n\n        /*\n         * Post-precessing: reclaim some memory by shrinking coordinates\n         * - not storing Z (always 1)\n         * - shrinking other coordinates, but still keeping the same number of\n         *   limbs as P, as otherwise it will too likely be regrown too fast.\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );\n        mbedtls_mpi_free( &T[i]->Z );\n\n        if( i == 0 )\n            break;\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );\n    for( i = 0; i < t_len; i++ )\n        mbedtls_mpi_free( &c[i] );\n    mbedtls_free( c );\n\n    return( ret );\n}\n\n/*\n * Conditional point inversion: Q -> -Q = (Q.X, -Q.Y, Q.Z) without leak.\n * \"inv\" must be 0 (don't invert) or 1 (invert) or the result will be invalid\n */\nstatic int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,\n                            mbedtls_ecp_point *Q,\n                            unsigned char inv )\n{\n    int ret;\n    unsigned char nonzero;\n    mbedtls_mpi mQY;\n\n    mbedtls_mpi_init( &mQY );\n\n    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );\n    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );\n\ncleanup:\n    mbedtls_mpi_free( &mQY );\n\n    return( ret );\n}\n\n/*\n * Point doubling R = 2 P, Jacobian coordinates\n *\n * Based on http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2 .\n *\n * We follow the variable naming fairly closely. The formula variations that trade a MUL for a SQR\n * (plus a few ADDs) aren't useful as our bignum implementation doesn't distinguish squaring.\n *\n * Standard optimizations are applied when curve parameter A is one of { 0, -3 }.\n *\n * Cost: 1D := 3M + 4S          (A ==  0)\n *             4M + 4S          (A == -3)\n *             3M + 6S + 1a     otherwise\n */\nstatic int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                           const mbedtls_ecp_point *P )\n{\n    int ret;\n    mbedtls_mpi M, S, T, U;\n\n#if defined(MBEDTLS_SELF_TEST)\n    dbl_count++;\n#endif\n\n#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_double_jac( grp, R, P );\n    }\n#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */\n\n    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );\n\n    /* Special case for A = -3 */\n    if( grp->A.p == NULL )\n    {\n        /* M = 3(X + Z^2)(X - Z^2) */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );\n    }\n    else\n    {\n        /* M = 3.X^2 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );\n\n        /* Optimize away for \"koblitz\" curves with A = 0 */\n        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )\n        {\n            /* M += A.Z^4 */\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );\n        }\n    }\n\n    /* S = 4.X.Y^2 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );\n\n    /* U = 8.Y^4 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );\n\n    /* T = M^2 - 2.S */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );\n\n    /* S = M(S - T) - U */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );\n\n    /* U = 2.Y.Z */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );\n\ncleanup:\n    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );\n\n    return( ret );\n}\n\n/*\n * Addition: R = P + Q, mixed affine-Jacobian coordinates (GECC 3.22)\n *\n * The coordinates of Q must be normalized (= affine),\n * but those of P don't need to. R is not normalized.\n *\n * Special cases: (1) P or Q is zero, (2) R is zero, (3) P == Q.\n * None of these cases can happen as intermediate step in ecp_mul_comb():\n * - at each step, P, Q and R are multiples of the base point, the factor\n *   being less than its order, so none of them is zero;\n * - Q is an odd multiple of the base point, P an even multiple,\n *   due to the choice of precomputed points in the modified comb method.\n * So branches for these cases do not leak secret information.\n *\n * We accept Q->Z being unset (saving memory in tables) as meaning 1.\n *\n * Cost: 1A := 8M + 3S\n */\nstatic int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )\n{\n    int ret;\n    mbedtls_mpi T1, T2, T3, T4, X, Y, Z;\n\n#if defined(MBEDTLS_SELF_TEST)\n    add_count++;\n#endif\n\n#if defined(MBEDTLS_ECP_ADD_MIXED_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_add_mixed( grp, R, P, Q );\n    }\n#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */\n\n    /*\n     * Trivial cases: P == 0 or Q == 0 (case 1)\n     */\n    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )\n        return( mbedtls_ecp_copy( R, Q ) );\n\n    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )\n        return( mbedtls_ecp_copy( R, P ) );\n\n    /*\n     * Make sure Q coordinates are normalized\n     */\n    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );\n    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );\n\n    /* Special cases (2) and (3) */\n    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )\n    {\n        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )\n        {\n            ret = ecp_double_jac( grp, R, P );\n            goto cleanup;\n        }\n        else\n        {\n            ret = mbedtls_ecp_set_zero( R );\n            goto cleanup;\n        }\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );\n    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );\n\n    return( ret );\n}\n\n/*\n * Randomize jacobian coordinates:\n * (X, Y, Z) -> (l^2 X, l^3 Y, l Z) for random l\n * This is sort of the reverse operation of ecp_normalize_jac().\n *\n * This countermeasure was first suggested in [2].\n */\nstatic int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_mpi l, ll;\n    size_t p_size;\n    int count = 0;\n\n#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng );\n    }\n#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */\n\n    p_size = ( grp->pbits + 7 ) / 8;\n    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );\n\n    /* Generate l such that 1 < l < p */\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );\n\n        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );\n\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n    }\n    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );\n\n    /* Z = l * Z */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );\n\n    /* X = l^2 * X */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );\n\n    /* Y = l^3 * Y */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );\n\ncleanup:\n    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );\n\n    return( ret );\n}\n\n/*\n * Check and define parameters used by the comb method (see below for details)\n */\n#if MBEDTLS_ECP_WINDOW_SIZE < 2 || MBEDTLS_ECP_WINDOW_SIZE > 7\n#error \"MBEDTLS_ECP_WINDOW_SIZE out of bounds\"\n#endif\n\n/* d = ceil( n / w ) */\n#define COMB_MAX_D      ( MBEDTLS_ECP_MAX_BITS + 1 ) / 2\n\n/* number of precomputed points */\n#define COMB_MAX_PRE    ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )\n\n/*\n * Compute the representation of m that will be used with our comb method.\n *\n * The basic comb method is described in GECC 3.44 for example. We use a\n * modified version that provides resistance to SPA by avoiding zero\n * digits in the representation as in [3]. We modify the method further by\n * requiring that all K_i be odd, which has the small cost that our\n * representation uses one more K_i, due to carries.\n *\n * Also, for the sake of compactness, only the seven low-order bits of x[i]\n * are used to represent K_i, and the msb of x[i] encodes the the sign (s_i in\n * the paper): it is set if and only if if s_i == -1;\n *\n * Calling conventions:\n * - x is an array of size d + 1\n * - w is the size, ie number of teeth, of the comb, and must be between\n *   2 and 7 (in practice, between 2 and MBEDTLS_ECP_WINDOW_SIZE)\n * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d\n *   (the result will be incorrect if these assumptions are not satisfied)\n */\nstatic void ecp_comb_fixed( unsigned char x[], size_t d,\n                            unsigned char w, const mbedtls_mpi *m )\n{\n    size_t i, j;\n    unsigned char c, cc, adjust;\n\n    memset( x, 0, d+1 );\n\n    /* First get the classical comb values (except for x_d = 0) */\n    for( i = 0; i < d; i++ )\n        for( j = 0; j < w; j++ )\n            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;\n\n    /* Now make sure x_1 .. x_d are odd */\n    c = 0;\n    for( i = 1; i <= d; i++ )\n    {\n        /* Add carry and update it */\n        cc   = x[i] & c;\n        x[i] = x[i] ^ c;\n        c = cc;\n\n        /* Adjust if needed, avoiding branches */\n        adjust = 1 - ( x[i] & 0x01 );\n        c   |= x[i] & ( x[i-1] * adjust );\n        x[i] = x[i] ^ ( x[i-1] * adjust );\n        x[i-1] |= adjust << 7;\n    }\n}\n\n/*\n * Precompute points for the comb method\n *\n * If i = i_{w-1} ... i_1 is the binary representation of i, then\n * T[i] = i_{w-1} 2^{(w-1)d} P + ... + i_1 2^d P + P\n *\n * T must be able to hold 2^{w - 1} elements\n *\n * Cost: d(w-1) D + (2^{w-1} - 1) A + 1 N(w-1) + 1 N(2^{w-1} - 1)\n */\nstatic int ecp_precompute_comb( const mbedtls_ecp_group *grp,\n                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,\n                                unsigned char w, size_t d )\n{\n    int ret;\n    unsigned char i, k;\n    size_t j;\n    mbedtls_ecp_point *cur, *TT[COMB_MAX_PRE - 1];\n\n    /*\n     * Set T[0] = P and\n     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );\n\n    k = 0;\n    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )\n    {\n        cur = T + i;\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );\n        for( j = 0; j < d; j++ )\n            MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );\n\n        TT[k++] = cur;\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );\n\n    /*\n     * Compute the remaining ones using the minimal number of additions\n     * Be careful to update T[2^l] only after using it!\n     */\n    k = 0;\n    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )\n    {\n        j = i;\n        while( j-- )\n        {\n            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );\n            TT[k++] = &T[i + j];\n        }\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]\n */\nstatic int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                            const mbedtls_ecp_point T[], unsigned char t_len,\n                            unsigned char i )\n{\n    int ret;\n    unsigned char ii, j;\n\n    /* Ignore the \"sign\" bit and scale down */\n    ii =  ( i & 0x7Fu ) >> 1;\n\n    /* Read the whole table to thwart cache-based timing attacks */\n    for( j = 0; j < t_len; j++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );\n    }\n\n    /* Safely invert result if i is \"negative\" */\n    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Core multiplication algorithm for the (modified) comb method.\n * This part is actually common with the basic comb method (GECC 3.44)\n *\n * Cost: d A + d D + 1 R\n */\nstatic int ecp_mul_comb_core( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                              const mbedtls_ecp_point T[], unsigned char t_len,\n                              const unsigned char x[], size_t d,\n                              int (*f_rng)(void *, unsigned char *, size_t),\n                              void *p_rng )\n{\n    int ret;\n    mbedtls_ecp_point Txi;\n    size_t i;\n\n    mbedtls_ecp_point_init( &Txi );\n\n    /* Start with a non-zero point and randomize its coordinates */\n    i = d;\n    MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );\n    if( f_rng != 0 )\n        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );\n\n    while( i-- != 0 )\n    {\n        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );\n        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );\n        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );\n    }\n\ncleanup:\n\n    mbedtls_ecp_point_free( &Txi );\n\n    return( ret );\n}\n\n/*\n * Multiplication using the comb method,\n * for curves in short Weierstrass form\n */\nstatic int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n                         int (*f_rng)(void *, unsigned char *, size_t),\n                         void *p_rng )\n{\n    int ret;\n    unsigned char w, m_is_odd, p_eq_g, pre_len, i;\n    size_t d;\n    unsigned char k[COMB_MAX_D + 1];\n    mbedtls_ecp_point *T;\n    mbedtls_mpi M, mm;\n\n    mbedtls_mpi_init( &M );\n    mbedtls_mpi_init( &mm );\n\n    /* we need N to be odd to trnaform m in an odd number, check now */\n    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Minimize the number of multiplications, that is minimize\n     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )\n     * (see costs of the various parts, with 1S = 1M)\n     */\n    w = grp->nbits >= 384 ? 5 : 4;\n\n    /*\n     * If P == G, pre-compute a bit more, since this may be re-used later.\n     * Just adding one avoids upping the cost of the first mul too much,\n     * and the memory cost too.\n     */\n#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1\n    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&\n               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );\n    if( p_eq_g )\n        w++;\n#else\n    p_eq_g = 0;\n#endif\n\n    /*\n     * Make sure w is within bounds.\n     * (The last test is useful only for very small curves in the test suite.)\n     */\n    if( w > MBEDTLS_ECP_WINDOW_SIZE )\n        w = MBEDTLS_ECP_WINDOW_SIZE;\n    if( w >= grp->nbits )\n        w = 2;\n\n    /* Other sizes that depend on w */\n    pre_len = 1U << ( w - 1 );\n    d = ( grp->nbits + w - 1 ) / w;\n\n    /*\n     * Prepare precomputed points: if P == G we want to\n     * use grp->T if already initialized, or initialize it.\n     */\n    T = p_eq_g ? grp->T : NULL;\n\n    if( T == NULL )\n    {\n        T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );\n        if( T == NULL )\n        {\n            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );\n\n        if( p_eq_g )\n        {\n            grp->T = T;\n            grp->T_size = pre_len;\n        }\n    }\n\n    /*\n     * Make sure M is odd (M = m or M = N - m, since N is odd)\n     * using the fact that m * P = - (N - m) * P\n     */\n    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );\n\n    /*\n     * Go for comb multiplication, R = M * P\n     */\n    ecp_comb_fixed( k, d, w, &M );\n    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );\n\n    /*\n     * Now get m * P from M * P and normalize it\n     */\n    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );\n    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );\n\ncleanup:\n\n    if( T != NULL && ! p_eq_g )\n    {\n        for( i = 0; i < pre_len; i++ )\n            mbedtls_ecp_point_free( &T[i] );\n        mbedtls_free( T );\n    }\n\n    mbedtls_mpi_free( &M );\n    mbedtls_mpi_free( &mm );\n\n    if( ret != 0 )\n        mbedtls_ecp_point_free( R );\n\n    return( ret );\n}\n\n#endif /* ECP_SHORTWEIERSTRASS */\n\n#if defined(ECP_MONTGOMERY)\n/*\n * For Montgomery curves, we do all the internal arithmetic in projective\n * coordinates. Import/export of points uses only the x coordinates, which is\n * internaly represented as X / Z.\n *\n * For scalar multiplication, we'll use a Montgomery ladder.\n */\n\n/*\n * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1\n * Cost: 1M + 1I\n */\nstatic int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )\n{\n    int ret;\n\n#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_mxz( grp, P );\n    }\n#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Randomize projective x/z coordinates:\n * (X, Z) -> (l X, l Z) for random l\n * This is sort of the reverse operation of ecp_normalize_mxz().\n *\n * This countermeasure was first suggested in [2].\n * Cost: 2M\n */\nstatic int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_mpi l;\n    size_t p_size;\n    int count = 0;\n\n#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );\n    }\n#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */\n\n    p_size = ( grp->pbits + 7 ) / 8;\n    mbedtls_mpi_init( &l );\n\n    /* Generate l such that 1 < l < p */\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );\n\n        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );\n\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n    }\n    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );\n\ncleanup:\n    mbedtls_mpi_free( &l );\n\n    return( ret );\n}\n\n/*\n * Double-and-add: R = 2P, S = P + Q, with d = X(P - Q),\n * for Montgomery curves in x/z coordinates.\n *\n * http://www.hyperelliptic.org/EFD/g1p/auto-code/montgom/xz/ladder/mladd-1987-m.op3\n * with\n * d =  X1\n * P = (X2, Z2)\n * Q = (X3, Z3)\n * R = (X4, Z4)\n * S = (X5, Z5)\n * and eliminating temporary variables tO, ..., t4.\n *\n * Cost: 5M + 4S\n */\nstatic int ecp_double_add_mxz( const mbedtls_ecp_group *grp,\n                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,\n                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,\n                               const mbedtls_mpi *d )\n{\n    int ret;\n    mbedtls_mpi A, AA, B, BB, E, C, D, DA, CB;\n\n#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d );\n    }\n#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */\n\n    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );\n    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );\n    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );\n\ncleanup:\n    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );\n    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );\n    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );\n\n    return( ret );\n}\n\n/*\n * Multiplication with Montgomery ladder in x/z coordinates,\n * for curves in Montgomery form\n */\nstatic int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n                        int (*f_rng)(void *, unsigned char *, size_t),\n                        void *p_rng )\n{\n    int ret;\n    size_t i;\n    unsigned char b;\n    mbedtls_ecp_point RP;\n    mbedtls_mpi PX;\n\n    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );\n\n    /* Save PX and read from P before writing to R, in case P == R */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );\n\n    /* Set R to zero in modified x/z coordinates */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );\n    mbedtls_mpi_free( &R->Y );\n\n    /* RP.X might be sligtly larger than P, so reduce it */\n    MOD_ADD( RP.X );\n\n    /* Randomize coordinates of the starting point */\n    if( f_rng != NULL )\n        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );\n\n    /* Loop invariant: R = result so far, RP = R + P */\n    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */\n    while( i-- > 0 )\n    {\n        b = mbedtls_mpi_get_bit( m, i );\n        /*\n         *  if (b) R = 2R + P else R = 2R,\n         * which is:\n         *  if (b) double_add( RP, R, RP, R )\n         *  else   double_add( R, RP, R, RP )\n         * but using safe conditional swaps to avoid leaks\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );\n        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );\n\ncleanup:\n    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );\n\n    return( ret );\n}\n\n#endif /* ECP_MONTGOMERY */\n\n/*\n * Multiplication R = m * P\n */\nint mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    char is_grp_capable = 0;\n#endif\n\n    /* Common sanity checks */\n    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||\n        ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if ( is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n        ret = ecp_mul_mxz( grp, R, m, P, f_rng, p_rng );\n\n#endif\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );\n\n#endif\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\ncleanup:\n\n    if ( is_grp_capable )\n    {\n        mbedtls_internal_ecp_free( grp );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    return( ret );\n}\n\n#if defined(ECP_SHORTWEIERSTRASS)\n/*\n * Check that an affine point is valid as a public key,\n * short weierstrass curves (SEC1 3.2.3.1)\n */\nstatic int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    int ret;\n    mbedtls_mpi YY, RHS;\n\n    /* pt coordinates must be normalized for our checks */\n    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||\n        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||\n        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||\n        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );\n\n    /*\n     * YY = Y^2\n     * RHS = X (X^2 + A) + B = X^3 + A X + B\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );\n\n    /* Special case for A = -3 */\n    if( grp->A.p == NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );\n\n    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )\n        ret = MBEDTLS_ERR_ECP_INVALID_KEY;\n\ncleanup:\n\n    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );\n\n    return( ret );\n}\n#endif /* ECP_SHORTWEIERSTRASS */\n\n/*\n * R = m * P with shortcuts for m == 1 and m == -1\n * NOT constant-time - ONLY for short Weierstrass!\n */\nstatic int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,\n                                      mbedtls_ecp_point *R,\n                                      const mbedtls_mpi *m,\n                                      const mbedtls_ecp_point *P )\n{\n    int ret;\n\n    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );\n    }\n    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );\n        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Linear combination\n * NOT constant-time\n */\nint mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             const mbedtls_mpi *n, const mbedtls_ecp_point *Q )\n{\n    int ret;\n    mbedtls_ecp_point mP;\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    char is_grp_capable = 0;\n#endif\n\n    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    mbedtls_ecp_point_init( &mP );\n\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if (  is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );\n    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );\n\ncleanup:\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if ( is_grp_capable )\n    {\n        mbedtls_internal_ecp_free( grp );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    mbedtls_ecp_point_free( &mP );\n\n    return( ret );\n}\n\n\n#if defined(ECP_MONTGOMERY)\n/*\n * Check validity of a public key for Montgomery curves with x-only schemes\n */\nstatic int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    /* [Curve25519 p. 5] Just check X is the correct number of bytes */\n    /* Allow any public value, if it's too big then we'll just reduce it mod p\n     * (RFC 7748 sec. 5 para. 3). */\n    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    return( 0 );\n}\n#endif /* ECP_MONTGOMERY */\n\n/*\n * Check that a point is valid as a public key\n */\nint mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    /* Must use affine coordinates */\n    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n        return( ecp_check_pubkey_mx( grp, pt ) );\n#endif\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n        return( ecp_check_pubkey_sw( grp, pt ) );\n#endif\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Check that an mbedtls_mpi is valid as a private key\n */\nint mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )\n{\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n    {\n        /* see RFC 7748 sec. 5 para. 5 */\n        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||\n            mbedtls_mpi_get_bit( d, 1 ) != 0 ||\n            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n        else\n\n        /* see [Curve25519] page 5 */\n        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n        return( 0 );\n    }\n#endif /* ECP_MONTGOMERY */\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n    {\n        /* see SEC1 3.2 */\n        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||\n            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n        else\n            return( 0 );\n    }\n#endif /* ECP_SHORTWEIERSTRASS */\n\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Generate a keypair with configurable base point\n */\nint mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,\n                     const mbedtls_ecp_point *G,\n                     mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    int ret;\n    size_t n_size = ( grp->nbits + 7 ) / 8;\n\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n    {\n        /* [M225] page 5 */\n        size_t b;\n\n        do {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );\n        } while( mbedtls_mpi_bitlen( d ) == 0);\n\n        /* Make sure the most significant bit is nbits */\n        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */\n        if( b > grp->nbits )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );\n        else\n            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );\n\n        /* Make sure the last two bits are unset for Curve448, three bits for\n           Curve25519 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );\n        if( grp->nbits == 254 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );\n        }\n    }\n    else\n#endif /* ECP_MONTGOMERY */\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n    {\n        /* SEC1 3.2.1: Generate d such that 1 <= n < N */\n        int count = 0;\n\n        /*\n         * Match the procedure given in RFC 6979 (deterministic ECDSA):\n         * - use the same byte ordering;\n         * - keep the leftmost nbits bits of the generated octet string;\n         * - try until result is in the desired range.\n         * This also avoids any biais, which is especially important for ECDSA.\n         */\n        do\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );\n\n            /*\n             * Each try has at worst a probability 1/2 of failing (the msb has\n             * a probability 1/2 of being 0, and then the result will be < N),\n             * so after 30 tries failure probability is a most 2**(-30).\n             *\n             * For most curves, 1 try is enough with overwhelming probability,\n             * since N starts with a lot of 1s in binary, but some curves\n             * such as secp224k1 are actually very close to the worst case.\n             */\n            if( ++count > 30 )\n                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n        }\n        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||\n               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );\n    }\n    else\n#endif /* ECP_SHORTWEIERSTRASS */\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\ncleanup:\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );\n}\n\n/*\n * Generate key pair, wrapper for conventional base point\n */\nint mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,\n                             mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                             int (*f_rng)(void *, unsigned char *, size_t),\n                             void *p_rng )\n{\n    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );\n}\n\n/*\n * Generate a keypair, prettier wrapper\n */\nint mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )\n        return( ret );\n\n    return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );\n}\n\n/*\n * Check a public-private key pair\n */\nint mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )\n{\n    int ret;\n    mbedtls_ecp_point Q;\n    mbedtls_ecp_group grp;\n\n    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||\n        pub->grp.id != prv->grp.id ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )\n    {\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    mbedtls_ecp_point_init( &Q );\n    mbedtls_ecp_group_init( &grp );\n\n    /* mbedtls_ecp_mul() needs a non-const group... */\n    mbedtls_ecp_group_copy( &grp, &prv->grp );\n\n    /* Also checks d is valid */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );\n\n    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||\n        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||\n        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\ncleanup:\n    mbedtls_ecp_point_free( &Q );\n    mbedtls_ecp_group_free( &grp );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n\n/*\n * Checkup routine\n */\nint mbedtls_ecp_self_test( int verbose )\n{\n    int ret;\n    size_t i;\n    mbedtls_ecp_group grp;\n    mbedtls_ecp_point R, P;\n    mbedtls_mpi m;\n    unsigned long add_c_prev, dbl_c_prev, mul_c_prev;\n    /* exponents especially adapted for secp192r1 */\n    const char *exponents[] =\n    {\n        \"000000000000000000000000000000000000000000000001\", /* one */\n        \"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22830\", /* N - 1 */\n        \"5EA6F389A38B8BC81E767753B15AA5569E1782E30ABE7D25\", /* random */\n        \"400000000000000000000000000000000000000000000000\", /* one and zeros */\n        \"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", /* all ones */\n        \"555555555555555555555555555555555555555555555555\", /* 101010... */\n    };\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_ecp_point_init( &R );\n    mbedtls_ecp_point_init( &P );\n    mbedtls_mpi_init( &m );\n\n    /* Use secp192r1 if available, or any available curve */\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, MBEDTLS_ECP_DP_SECP192R1 ) );\n#else\n    MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, mbedtls_ecp_curve_list()->grp_id ) );\n#endif\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ECP test #1 (constant op_count, base point G): \" );\n\n    /* Do a dummy multiplication first to trigger precomputation */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &m, 2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &P, &m, &grp.G, NULL, NULL ) );\n\n    add_count = 0;\n    dbl_count = 0;\n    mul_count = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );\n\n    for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )\n    {\n        add_c_prev = add_count;\n        dbl_c_prev = dbl_count;\n        mul_c_prev = mul_count;\n        add_count = 0;\n        dbl_count = 0;\n        mul_count = 0;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );\n\n        if( add_count != add_c_prev ||\n            dbl_count != dbl_c_prev ||\n            mul_count != mul_c_prev )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed (%u)\\n\", (unsigned int) i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ECP test #2 (constant op_count, other point): \" );\n    /* We computed P = 2G last time, use it */\n\n    add_count = 0;\n    dbl_count = 0;\n    mul_count = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );\n\n    for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )\n    {\n        add_c_prev = add_count;\n        dbl_c_prev = dbl_count;\n        mul_c_prev = mul_count;\n        add_count = 0;\n        dbl_count = 0;\n        mul_count = 0;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );\n\n        if( add_count != add_c_prev ||\n            dbl_count != dbl_c_prev ||\n            mul_count != mul_c_prev )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed (%u)\\n\", (unsigned int) i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\ncleanup:\n\n    if( ret < 0 && verbose != 0 )\n        mbedtls_printf( \"Unexpected error, return code = %08X\\n\", ret );\n\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_ecp_point_free( &R );\n    mbedtls_ecp_point_free( &P );\n    mbedtls_mpi_free( &m );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* !MBEDTLS_ECP_ALT */\n\n#endif /* MBEDTLS_ECP_C */\n","/*\n *  Error message information\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ERROR_C) || defined(MBEDTLS_ERROR_STRERROR_DUMMY)\n#include \"mbedtls/error.h\"\n#include <string.h>\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#define mbedtls_snprintf snprintf\n#define mbedtls_time_t   time_t\n#endif\n\n#if defined(MBEDTLS_ERROR_C)\n\n#include <stdio.h>\n\n#if defined(MBEDTLS_AES_C)\n#include \"mbedtls/aes.h\"\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n#include \"mbedtls/arc4.h\"\n#endif\n\n#if defined(MBEDTLS_ARIA_C)\n#include \"mbedtls/aria.h\"\n#endif\n\n#if defined(MBEDTLS_BASE64_C)\n#include \"mbedtls/base64.h\"\n#endif\n\n#if defined(MBEDTLS_BIGNUM_C)\n#include \"mbedtls/bignum.h\"\n#endif\n\n#if defined(MBEDTLS_BLOWFISH_C)\n#include \"mbedtls/blowfish.h\"\n#endif\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#include \"mbedtls/camellia.h\"\n#endif\n\n#if defined(MBEDTLS_CCM_C)\n#include \"mbedtls/ccm.h\"\n#endif\n\n#if defined(MBEDTLS_CIPHER_C)\n#include \"mbedtls/cipher.h\"\n#endif\n\n#if defined(MBEDTLS_CMAC_C)\n#include \"mbedtls/cmac.h\"\n#endif\n\n#if defined(MBEDTLS_CTR_DRBG_C)\n#include \"mbedtls/ctr_drbg.h\"\n#endif\n\n#if defined(MBEDTLS_DES_C)\n#include \"mbedtls/des.h\"\n#endif\n\n#if defined(MBEDTLS_DHM_C)\n#include \"mbedtls/dhm.h\"\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n\n#if defined(MBEDTLS_ENTROPY_C)\n#include \"mbedtls/entropy.h\"\n#endif\n\n#if defined(MBEDTLS_GCM_C)\n#include \"mbedtls/gcm.h\"\n#endif\n\n#if defined(MBEDTLS_HMAC_DRBG_C)\n#include \"mbedtls/hmac_drbg.h\"\n#endif\n\n#if defined(MBEDTLS_MD_C)\n#include \"mbedtls/md.h\"\n#endif\n\n#if defined(MBEDTLS_MD2_C)\n#include \"mbedtls/md2.h\"\n#endif\n\n#if defined(MBEDTLS_MD4_C)\n#include \"mbedtls/md4.h\"\n#endif\n\n#if defined(MBEDTLS_MD5_C)\n#include \"mbedtls/md5.h\"\n#endif\n\n#if defined(MBEDTLS_NET_C)\n#include \"mbedtls/net_sockets.h\"\n#endif\n\n#if defined(MBEDTLS_OID_C)\n#include \"mbedtls/oid.h\"\n#endif\n\n#if defined(MBEDTLS_PADLOCK_C)\n#include \"mbedtls/padlock.h\"\n#endif\n\n#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)\n#include \"mbedtls/pem.h\"\n#endif\n\n#if defined(MBEDTLS_PK_C)\n#include \"mbedtls/pk.h\"\n#endif\n\n#if defined(MBEDTLS_PKCS12_C)\n#include \"mbedtls/pkcs12.h\"\n#endif\n\n#if defined(MBEDTLS_PKCS5_C)\n#include \"mbedtls/pkcs5.h\"\n#endif\n\n#if defined(MBEDTLS_RIPEMD160_C)\n#include \"mbedtls/ripemd160.h\"\n#endif\n\n#if defined(MBEDTLS_RSA_C)\n#include \"mbedtls/rsa.h\"\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n#include \"mbedtls/sha1.h\"\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n#include \"mbedtls/sha256.h\"\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n#include \"mbedtls/sha512.h\"\n#endif\n\n#if defined(MBEDTLS_SSL_TLS_C)\n#include \"mbedtls/ssl.h\"\n#endif\n\n#if defined(MBEDTLS_THREADING_C)\n#include \"mbedtls/threading.h\"\n#endif\n\n#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)\n#include \"mbedtls/x509.h\"\n#endif\n\n#if defined(MBEDTLS_XTEA_C)\n#include \"mbedtls/xtea.h\"\n#endif\n\n\nvoid mbedtls_strerror( int ret, char *buf, size_t buflen )\n{\n    size_t len;\n    int use_ret;\n\n    if( buflen == 0 )\n        return;\n\n    memset( buf, 0x00, buflen );\n\n    if( ret < 0 )\n        ret = -ret;\n\n    if( ret & 0xFF80 )\n    {\n        use_ret = ret & 0xFF80;\n\n        // High level error codes\n        //\n        // BEGIN generated code\n#if defined(MBEDTLS_CIPHER_C)\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - The selected feature is not available\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Bad input parameters\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Failed to allocate memory\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Input data contains invalid padding and is rejected\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Decryption of block requires a full block\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Authentication failed (for AEAD modes)\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - The context is invalid. For example, because it was freed\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Cipher hardware accelerator failed\" );\n#endif /* MBEDTLS_CIPHER_C */\n\n#if defined(MBEDTLS_DHM_C)\n        if( use_ret == -(MBEDTLS_ERR_DHM_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Bad input parameters\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_READ_PARAMS_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Reading of the DHM parameters failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Making of the DHM parameters failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Reading of the public values failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Making of the public value failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_CALC_SECRET_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Calculation of the DHM secret failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"DHM - The ASN.1 data is not formatted correctly\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Allocation of memory failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_FILE_IO_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Read or write of file failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - DHM hardware accelerator failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_SET_GROUP_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Setting the modulus and generator failed\" );\n#endif /* MBEDTLS_DHM_C */\n\n#if defined(MBEDTLS_ECP_C)\n        if( use_ret == -(MBEDTLS_ERR_ECP_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL) )\n            mbedtls_snprintf( buf, buflen, \"ECP - The buffer is too small to write to\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"ECP - The requested feature is not available, for example, the requested curve is not supported\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_VERIFY_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"ECP - The signature is not valid\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Memory allocation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_RANDOM_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Generation of random value, such as ephemeral key, failed\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_INVALID_KEY) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Invalid private or public key\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"ECP - The buffer contains a valid signature followed by more data\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"ECP - The ECP hardware accelerator failed\" );\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_MD_C)\n        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"MD - The selected feature is not available\" );\n        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"MD - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"MD - Failed to allocate memory\" );\n        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"MD - Opening or reading of file failed\" );\n        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"MD - MD hardware accelerator failed\" );\n#endif /* MBEDTLS_MD_C */\n\n#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)\n        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )\n            mbedtls_snprintf( buf, buflen, \"PEM - No PEM header or footer found\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PEM - PEM string is not as expected\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Failed to allocate memory\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )\n            mbedtls_snprintf( buf, buflen, \"PEM - RSA IV is not in hex-format\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Unsupported key encryption algorithm\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Private key password can't be empty\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Given private key password does not allow for correct decryption\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Unavailable feature, e.g. hashing/encryption combination\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Bad input parameters to function\" );\n#endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */\n\n#if defined(MBEDTLS_PK_C)\n        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"PK - Memory allocation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PK - Type mismatch, eg attempt to encrypt with an ECDSA key\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PK - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"PK - Read/write of file failed\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )\n            mbedtls_snprintf( buf, buflen, \"PK - Unsupported key version\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"PK - Invalid key tag or value\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )\n            mbedtls_snprintf( buf, buflen, \"PK - Key algorithm is unsupported (only RSA and EC are supported)\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"PK - Private key password can't be empty\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PK - Given private key password does not allow for correct decryption\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )\n            mbedtls_snprintf( buf, buflen, \"PK - The pubkey tag or value is invalid (only RSA and EC are supported)\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )\n            mbedtls_snprintf( buf, buflen, \"PK - The algorithm tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )\n            mbedtls_snprintf( buf, buflen, \"PK - Elliptic curve is unsupported (only NIST curves are supported)\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"PK - Unavailable feature, e.g. RSA disabled for RSA key\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PK - The buffer contains a valid signature followed by more data\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"PK - PK hardware accelerator failed\" );\n#endif /* MBEDTLS_PK_C */\n\n#if defined(MBEDTLS_PKCS12_C)\n        if( use_ret == -(MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PKCS12 - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"PKCS12 - Feature not available, e.g. unsupported encryption scheme\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"PKCS12 - PBE ASN.1 data not as expected\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PKCS12 - Given private key password does not allow for correct decryption\" );\n#endif /* MBEDTLS_PKCS12_C */\n\n#if defined(MBEDTLS_PKCS5_C)\n        if( use_ret == -(MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PKCS5 - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS5_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"PKCS5 - Unexpected ASN.1 data\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"PKCS5 - Requested encryption or digest alg not available\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PKCS5 - Given private key password does not allow for correct decryption\" );\n#endif /* MBEDTLS_PKCS5_C */\n\n#if defined(MBEDTLS_RSA_C)\n        if( use_ret == -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"RSA - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_INVALID_PADDING) )\n            mbedtls_snprintf( buf, buflen, \"RSA - Input data contains invalid padding and is rejected\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - Something failed during generation of a key\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - Key failed to pass the validity check of the library\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_PUBLIC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The public key operation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_PRIVATE_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The private key operation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_VERIFY_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The PKCS#1 verification failed\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The output buffer for decryption is not large enough\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_RNG_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The random generator failed to generate non-zeros\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The implementation does not offer the requested operation, for example, because of security violations or lack of functionality\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - RSA hardware accelerator failed\" );\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_SSL_TLS_C)\n        if( use_ret == -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The requested feature is not available\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_MAC) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Verification of the message MAC failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_RECORD) )\n            mbedtls_snprintf( buf, buflen, \"SSL - An invalid SSL record was received\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CONN_EOF) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The connection indicated an EOF\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_CIPHER) )\n            mbedtls_snprintf( buf, buflen, \"SSL - An unknown cipher was received\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The server has no ciphersuites in common with the client\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NO_RNG) )\n            mbedtls_snprintf( buf, buflen, \"SSL - No RNG was provided to the SSL module\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - No client certification received from the client, but required by the authentication mode\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Our own certificate(s) is/are too large to send in an SSL message\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The own certificate is not set, but needed by the server\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The own private key or pre-shared key is not set, but needed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - No CA Chain is set, but required to operate\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - An unexpected message was received from our peer\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE) )\n        {\n            mbedtls_snprintf( buf, buflen, \"SSL - A fatal alert message was received from our peer\" );\n            return;\n        }\n        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Verification of our peer failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The peer notified us that the connection is going to be closed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ClientHello handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ServerHello handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the Certificate handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the CertificateRequest handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ServerKeyExchange handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ServerHelloDone handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ClientKeyExchange handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the CertificateVerify handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ChangeCipherSpec handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_FINISHED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the Finished handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Memory allocation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Hardware acceleration function returned with error\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Hardware acceleration function skipped / left alone data\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_COMPRESSION_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the compression / decompression failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Handshake protocol not within min/max boundaries\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the NewSessionTicket handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Session ticket has expired\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Unknown identity received (eg, PSK identity)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_INTERNAL_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Internal error (eg, unexpected failure in lower-level module)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING) )\n            mbedtls_snprintf( buf, buflen, \"SSL - A counter would wrap (eg, too many messages exchanged)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Unexpected message at ServerHello in renegotiation\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - DTLS client must retry for hello verification\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL) )\n            mbedtls_snprintf( buf, buflen, \"SSL - A buffer is too small to receive or write a message\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_READ) )\n            mbedtls_snprintf( buf, buflen, \"SSL - No data of requested type currently available on underlying transport\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_WRITE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Connection requires a write call\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_TIMEOUT) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The operation timed out\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The client initiated a reconnect from the same port\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Record header looks valid but is not expected\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NON_FATAL) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The alert message received indicates a non-fatal error\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Couldn't set the hash for verifying CertificateVerify\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CONTINUE_PROCESSING) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Internal-only message signaling that further message-processing should be done\" );\n#endif /* MBEDTLS_SSL_TLS_C */\n\n#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)\n        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Unavailable feature, e.g. RSA hashing/encryption combination\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Requested OID is unknown\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The CRT/CRL/CSR version element is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The serial tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The algorithm tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The name tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The date tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The signature tag or value invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The extension tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )\n            mbedtls_snprintf( buf, buflen, \"X509 - CRT/CRL/CSR has an unsupported version number\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Signature algorithm (oid) is unsupported\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Signature algorithms do not match. (see \\\\c ::mbedtls_x509_crt sig_oid)\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Certificate verification failed, e.g. CRL, CA or signature check failed\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Format not recognized as DER or PEM\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Input invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Allocation of memory failed\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Read/write of file failed\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Destination buffer is too small\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed\" );\n#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */\n        // END generated code\n\n        if( strlen( buf ) == 0 )\n            mbedtls_snprintf( buf, buflen, \"UNKNOWN ERROR CODE (%04X)\", use_ret );\n    }\n\n    use_ret = ret & ~0xFF80;\n\n    if( use_ret == 0 )\n        return;\n\n    // If high level code is present, make a concatenation between both\n    // error strings.\n    //\n    len = strlen( buf );\n\n    if( len > 0 )\n    {\n        if( buflen - len < 5 )\n            return;\n\n        mbedtls_snprintf( buf + len, buflen - len, \" : \" );\n\n        buf += len + 3;\n        buflen -= len + 3;\n    }\n\n    // Low level error codes\n    //\n    // BEGIN generated code\n#if defined(MBEDTLS_AES_C)\n    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"AES - Invalid key length\" );\n    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"AES - Invalid data input length\" );\n    if( use_ret == -(MBEDTLS_ERR_AES_BAD_INPUT_DATA) )\n        mbedtls_snprintf( buf, buflen, \"AES - Invalid input data\" );\n    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )\n        mbedtls_snprintf( buf, buflen, \"AES - Feature not available. For example, an unsupported AES key size\" );\n    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"AES - AES hardware accelerator failed\" );\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n    if( use_ret == -(MBEDTLS_ERR_ARC4_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"ARC4 - ARC4 hardware accelerator failed\" );\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_ARIA_C)\n    if( use_ret == -(MBEDTLS_ERR_ARIA_INVALID_KEY_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"ARIA - Invalid key length\" );\n    if( use_ret == -(MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"ARIA - Invalid data input length\" );\n    if( use_ret == -(MBEDTLS_ERR_ARIA_FEATURE_UNAVAILABLE) )\n        mbedtls_snprintf( buf, buflen, \"ARIA - Feature not available. For example, an unsupported ARIA key size\" );\n    if( use_ret == -(MBEDTLS_ERR_ARIA_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"ARIA - ARIA hardware accelerator failed\" );\n#endif /* MBEDTLS_ARIA_C */\n\n#if defined(MBEDTLS_ASN1_PARSE_C)\n    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Out of data when parsing an ASN1 data structure\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - ASN1 tag was of an unexpected value\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Error when trying to determine the length or invalid length\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Actual length differs from expected length\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Data is invalid. (not used)\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Memory allocation failed\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Buffer too small when writing ASN.1 data structure\" );\n#endif /* MBEDTLS_ASN1_PARSE_C */\n\n#if defined(MBEDTLS_BASE64_C)\n    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"BASE64 - Output buffer too small\" );\n    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )\n        mbedtls_snprintf( buf, buflen, \"BASE64 - Invalid character in input\" );\n#endif /* MBEDTLS_BASE64_C */\n\n#if defined(MBEDTLS_BIGNUM_C)\n    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - An error occurred while reading from or writing to a file\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - Bad input parameters to function\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - There is an invalid character in the digit string\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - The buffer is too small to write to\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - The input arguments are negative or result in illegal output\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - The input argument for division is zero, which is not allowed\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - The input arguments are not acceptable\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - Memory allocation failed\" );\n#endif /* MBEDTLS_BIGNUM_C */\n\n#if defined(MBEDTLS_BLOWFISH_C)\n    if( use_ret == -(MBEDTLS_ERR_BLOWFISH_INVALID_KEY_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"BLOWFISH - Invalid key length\" );\n    if( use_ret == -(MBEDTLS_ERR_BLOWFISH_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"BLOWFISH - Blowfish hardware accelerator failed\" );\n    if( use_ret == -(MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"BLOWFISH - Invalid data input length\" );\n#endif /* MBEDTLS_BLOWFISH_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_INVALID_KEY_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"CAMELLIA - Invalid key length\" );\n    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"CAMELLIA - Invalid data input length\" );\n    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CAMELLIA - Camellia hardware accelerator failed\" );\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_CCM_C)\n    if( use_ret == -(MBEDTLS_ERR_CCM_BAD_INPUT) )\n        mbedtls_snprintf( buf, buflen, \"CCM - Bad input parameters to the function\" );\n    if( use_ret == -(MBEDTLS_ERR_CCM_AUTH_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CCM - Authenticated decryption failed\" );\n    if( use_ret == -(MBEDTLS_ERR_CCM_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CCM - CCM hardware accelerator failed\" );\n#endif /* MBEDTLS_CCM_C */\n\n#if defined(MBEDTLS_CMAC_C)\n    if( use_ret == -(MBEDTLS_ERR_CMAC_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CMAC - CMAC hardware accelerator failed\" );\n#endif /* MBEDTLS_CMAC_C */\n\n#if defined(MBEDTLS_CTR_DRBG_C)\n    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CTR_DRBG - The entropy source failed\" );\n    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )\n        mbedtls_snprintf( buf, buflen, \"CTR_DRBG - The requested random buffer length is too big\" );\n    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )\n        mbedtls_snprintf( buf, buflen, \"CTR_DRBG - The input (entropy + additional data) is too large\" );\n    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"CTR_DRBG - Read or write error in file\" );\n#endif /* MBEDTLS_CTR_DRBG_C */\n\n#if defined(MBEDTLS_DES_C)\n    if( use_ret == -(MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"DES - The data input has an invalid length\" );\n    if( use_ret == -(MBEDTLS_ERR_DES_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"DES - DES hardware accelerator failed\" );\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ENTROPY_C)\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_SOURCE_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - Critical entropy source failure\" );\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_MAX_SOURCES) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - No more sources can be added\" );\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - No sources have been added to poll\" );\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - No strong sources have been added to poll\" );\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - Read/write error in file\" );\n#endif /* MBEDTLS_ENTROPY_C */\n\n#if defined(MBEDTLS_GCM_C)\n    if( use_ret == -(MBEDTLS_ERR_GCM_AUTH_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"GCM - Authenticated decryption failed\" );\n    if( use_ret == -(MBEDTLS_ERR_GCM_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"GCM - GCM hardware accelerator failed\" );\n    if( use_ret == -(MBEDTLS_ERR_GCM_BAD_INPUT) )\n        mbedtls_snprintf( buf, buflen, \"GCM - Bad input parameters to function\" );\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_HMAC_DRBG_C)\n    if( use_ret == -(MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG) )\n        mbedtls_snprintf( buf, buflen, \"HMAC_DRBG - Too many random requested in single call\" );\n    if( use_ret == -(MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG) )\n        mbedtls_snprintf( buf, buflen, \"HMAC_DRBG - Input too large (Entropy + additional)\" );\n    if( use_ret == -(MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"HMAC_DRBG - Read/write error in file\" );\n    if( use_ret == -(MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"HMAC_DRBG - The entropy source failed\" );\n#endif /* MBEDTLS_HMAC_DRBG_C */\n\n#if defined(MBEDTLS_MD2_C)\n    if( use_ret == -(MBEDTLS_ERR_MD2_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"MD2 - MD2 hardware accelerator failed\" );\n#endif /* MBEDTLS_MD2_C */\n\n#if defined(MBEDTLS_MD4_C)\n    if( use_ret == -(MBEDTLS_ERR_MD4_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"MD4 - MD4 hardware accelerator failed\" );\n#endif /* MBEDTLS_MD4_C */\n\n#if defined(MBEDTLS_MD5_C)\n    if( use_ret == -(MBEDTLS_ERR_MD5_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"MD5 - MD5 hardware accelerator failed\" );\n#endif /* MBEDTLS_MD5_C */\n\n#if defined(MBEDTLS_NET_C)\n    if( use_ret == -(MBEDTLS_ERR_NET_SOCKET_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Failed to open a socket\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_CONNECT_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - The connection to the given server / port failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_BIND_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Binding of the socket failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_LISTEN_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Could not listen on the socket\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_ACCEPT_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Could not accept the incoming connection\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_RECV_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Reading information from the socket failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_SEND_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Sending information through the socket failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_CONN_RESET) )\n        mbedtls_snprintf( buf, buflen, \"NET - Connection was reset by peer\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_UNKNOWN_HOST) )\n        mbedtls_snprintf( buf, buflen, \"NET - Failed to get an IP address for the given hostname\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_BUFFER_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"NET - Buffer is too small to hold the data\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_INVALID_CONTEXT) )\n        mbedtls_snprintf( buf, buflen, \"NET - The context is invalid, eg because it was free()ed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_POLL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Polling the net context failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_BAD_INPUT_DATA) )\n        mbedtls_snprintf( buf, buflen, \"NET - Input invalid\" );\n#endif /* MBEDTLS_NET_C */\n\n#if defined(MBEDTLS_OID_C)\n    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )\n        mbedtls_snprintf( buf, buflen, \"OID - OID is not found\" );\n    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"OID - output buffer is too small\" );\n#endif /* MBEDTLS_OID_C */\n\n#if defined(MBEDTLS_PADLOCK_C)\n    if( use_ret == -(MBEDTLS_ERR_PADLOCK_DATA_MISALIGNED) )\n        mbedtls_snprintf( buf, buflen, \"PADLOCK - Input data should be aligned\" );\n#endif /* MBEDTLS_PADLOCK_C */\n\n#if defined(MBEDTLS_RIPEMD160_C)\n    if( use_ret == -(MBEDTLS_ERR_RIPEMD160_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"RIPEMD160 - RIPEMD160 hardware accelerator failed\" );\n#endif /* MBEDTLS_RIPEMD160_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    if( use_ret == -(MBEDTLS_ERR_SHA1_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"SHA1 - SHA-1 hardware accelerator failed\" );\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"SHA256 - SHA-256 hardware accelerator failed\" );\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    if( use_ret == -(MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"SHA512 - SHA-512 hardware accelerator failed\" );\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_THREADING_C)\n    if( use_ret == -(MBEDTLS_ERR_THREADING_FEATURE_UNAVAILABLE) )\n        mbedtls_snprintf( buf, buflen, \"THREADING - The selected feature is not available\" );\n    if( use_ret == -(MBEDTLS_ERR_THREADING_BAD_INPUT_DATA) )\n        mbedtls_snprintf( buf, buflen, \"THREADING - Bad input parameters to function\" );\n    if( use_ret == -(MBEDTLS_ERR_THREADING_MUTEX_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"THREADING - Locking / unlocking / free failed with error code\" );\n#endif /* MBEDTLS_THREADING_C */\n\n#if defined(MBEDTLS_XTEA_C)\n    if( use_ret == -(MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"XTEA - The data input has an invalid length\" );\n    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"XTEA - XTEA hardware accelerator failed\" );\n#endif /* MBEDTLS_XTEA_C */\n    // END generated code\n\n    if( strlen( buf ) != 0 )\n        return;\n\n    mbedtls_snprintf( buf, buflen, \"UNKNOWN ERROR CODE (%04X)\", use_ret );\n}\n\n#else /* MBEDTLS_ERROR_C */\n\n#if defined(MBEDTLS_ERROR_STRERROR_DUMMY)\n\n/*\n * Provide an non-function in case MBEDTLS_ERROR_C is not defined\n */\nvoid mbedtls_strerror( int ret, char *buf, size_t buflen )\n{\n    ((void) ret);\n\n    if( buflen > 0 )\n        buf[0] = '\\0';\n}\n\n#endif /* MBEDTLS_ERROR_STRERROR_DUMMY */\n\n#endif /* MBEDTLS_ERROR_C */\n","/*\n *  NIST SP800-38C compliant CCM implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * Definition of CCM:\n * http://csrc.nist.gov/publications/nistpubs/800-38C/SP800-38C_updated-July20_2007.pdf\n * RFC 3610 \"Counter with CBC-MAC (CCM)\"\n *\n * Related:\n * RFC 5116 \"An Interface and Algorithms for Authenticated Encryption\"\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_CCM_C)\n\n#include \"mbedtls/ccm.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */\n\n#if !defined(MBEDTLS_CCM_ALT)\n\n#define CCM_ENCRYPT 0\n#define CCM_DECRYPT 1\n\n/*\n * Initialize context\n */\nvoid mbedtls_ccm_init( mbedtls_ccm_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );\n}\n\nint mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,\n                        mbedtls_cipher_id_t cipher,\n                        const unsigned char *key,\n                        unsigned int keybits )\n{\n    int ret;\n    const mbedtls_cipher_info_t *cipher_info;\n\n    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );\n    if( cipher_info == NULL )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    if( cipher_info->block_size != 16 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    mbedtls_cipher_free( &ctx->cipher_ctx );\n\n    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,\n                               MBEDTLS_ENCRYPT ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    return( 0 );\n}\n\n/*\n * Free context\n */\nvoid mbedtls_ccm_free( mbedtls_ccm_context *ctx )\n{\n    mbedtls_cipher_free( &ctx->cipher_ctx );\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );\n}\n\n/*\n * Macros for common operations.\n * Results in smaller compiled code than static inline functions.\n */\n\n/*\n * Update the CBC-MAC state in y using a block in b\n * (Always using b as the source helps the compiler optimise a bit better.)\n */\n#define UPDATE_CBC_MAC                                                      \\\n    for( i = 0; i < 16; i++ )                                               \\\n        y[i] ^= b[i];                                                       \\\n                                                                            \\\n    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, y, 16, y, &olen ) ) != 0 ) \\\n        return( ret );\n\n/*\n * Encrypt or decrypt a partial block with CTR\n * Warning: using b for temporary storage! src and dst must not be b!\n * This avoids allocating one more 16 bytes buffer while allowing src == dst.\n */\n#define CTR_CRYPT( dst, src, len  )                                            \\\n    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctr, 16, b, &olen ) ) != 0 )  \\\n        return( ret );                                                         \\\n                                                                               \\\n    for( i = 0; i < len; i++ )                                                 \\\n        dst[i] = src[i] ^ b[i];\n\n/*\n * Authenticated encryption or decryption\n */\nstatic int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,\n                           const unsigned char *iv, size_t iv_len,\n                           const unsigned char *add, size_t add_len,\n                           const unsigned char *input, unsigned char *output,\n                           unsigned char *tag, size_t tag_len )\n{\n    int ret;\n    unsigned char i;\n    unsigned char q;\n    size_t len_left, olen;\n    unsigned char b[16];\n    unsigned char y[16];\n    unsigned char ctr[16];\n    const unsigned char *src;\n    unsigned char *dst;\n\n    /*\n     * Check length requirements: SP800-38C A.1\n     * Additional requirement: a < 2^16 - 2^8 to simplify the code.\n     * 'length' checked later (when writing it to the first block)\n     */\n    if( tag_len < 4 || tag_len > 16 || tag_len % 2 != 0 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    /* Also implies q is within bounds */\n    if( iv_len < 7 || iv_len > 13 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    if( add_len > 0xFF00 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    q = 16 - 1 - (unsigned char) iv_len;\n\n    /*\n     * First block B_0:\n     * 0        .. 0        flags\n     * 1        .. iv_len   nonce (aka iv)\n     * iv_len+1 .. 15       length\n     *\n     * With flags as (bits):\n     * 7        0\n     * 6        add present?\n     * 5 .. 3   (t - 2) / 2\n     * 2 .. 0   q - 1\n     */\n    b[0] = 0;\n    b[0] |= ( add_len > 0 ) << 6;\n    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;\n    b[0] |= q - 1;\n\n    memcpy( b + 1, iv, iv_len );\n\n    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )\n        b[15-i] = (unsigned char)( len_left & 0xFF );\n\n    if( len_left > 0 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n\n    /* Start CBC-MAC with first block */\n    memset( y, 0, 16 );\n    UPDATE_CBC_MAC;\n\n    /*\n     * If there is additional data, update CBC-MAC with\n     * add_len, add, 0 (padding to a block boundary)\n     */\n    if( add_len > 0 )\n    {\n        size_t use_len;\n        len_left = add_len;\n        src = add;\n\n        memset( b, 0, 16 );\n        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );\n        b[1] = (unsigned char)( ( add_len      ) & 0xFF );\n\n        use_len = len_left < 16 - 2 ? len_left : 16 - 2;\n        memcpy( b + 2, src, use_len );\n        len_left -= use_len;\n        src += use_len;\n\n        UPDATE_CBC_MAC;\n\n        while( len_left > 0 )\n        {\n            use_len = len_left > 16 ? 16 : len_left;\n\n            memset( b, 0, 16 );\n            memcpy( b, src, use_len );\n            UPDATE_CBC_MAC;\n\n            len_left -= use_len;\n            src += use_len;\n        }\n    }\n\n    /*\n     * Prepare counter block for encryption:\n     * 0        .. 0        flags\n     * 1        .. iv_len   nonce (aka iv)\n     * iv_len+1 .. 15       counter (initially 1)\n     *\n     * With flags as (bits):\n     * 7 .. 3   0\n     * 2 .. 0   q - 1\n     */\n    ctr[0] = q - 1;\n    memcpy( ctr + 1, iv, iv_len );\n    memset( ctr + 1 + iv_len, 0, q );\n    ctr[15] = 1;\n\n    /*\n     * Authenticate and {en,de}crypt the message.\n     *\n     * The only difference between encryption and decryption is\n     * the respective order of authentication and {en,de}cryption.\n     */\n    len_left = length;\n    src = input;\n    dst = output;\n\n    while( len_left > 0 )\n    {\n        size_t use_len = len_left > 16 ? 16 : len_left;\n\n        if( mode == CCM_ENCRYPT )\n        {\n            memset( b, 0, 16 );\n            memcpy( b, src, use_len );\n            UPDATE_CBC_MAC;\n        }\n\n        CTR_CRYPT( dst, src, use_len );\n\n        if( mode == CCM_DECRYPT )\n        {\n            memset( b, 0, 16 );\n            memcpy( b, dst, use_len );\n            UPDATE_CBC_MAC;\n        }\n\n        dst += use_len;\n        src += use_len;\n        len_left -= use_len;\n\n        /*\n         * Increment counter.\n         * No need to check for overflow thanks to the length check above.\n         */\n        for( i = 0; i < q; i++ )\n            if( ++ctr[15-i] != 0 )\n                break;\n    }\n\n    /*\n     * Authentication: reset counter and crypt/mask internal tag\n     */\n    for( i = 0; i < q; i++ )\n        ctr[15-i] = 0;\n\n    CTR_CRYPT( y, y, 16 );\n    memcpy( tag, y, tag_len );\n\n    return( 0 );\n}\n\n/*\n * Authenticated encryption\n */\nint mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *add, size_t add_len,\n                         const unsigned char *input, unsigned char *output,\n                         unsigned char *tag, size_t tag_len )\n{\n    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,\n                            add, add_len, input, output, tag, tag_len ) );\n}\n\n/*\n * Authenticated decryption\n */\nint mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,\n                      const unsigned char *iv, size_t iv_len,\n                      const unsigned char *add, size_t add_len,\n                      const unsigned char *input, unsigned char *output,\n                      const unsigned char *tag, size_t tag_len )\n{\n    int ret;\n    unsigned char check_tag[16];\n    unsigned char i;\n    int diff;\n\n    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,\n                                iv, iv_len, add, add_len,\n                                input, output, check_tag, tag_len ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    /* Check tag in \"constant-time\" */\n    for( diff = 0, i = 0; i < tag_len; i++ )\n        diff |= tag[i] ^ check_tag[i];\n\n    if( diff != 0 )\n    {\n        mbedtls_platform_zeroize( output, length );\n        return( MBEDTLS_ERR_CCM_AUTH_FAILED );\n    }\n\n    return( 0 );\n}\n\n#endif /* !MBEDTLS_CCM_ALT */\n\n#if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)\n/*\n * Examples 1 to 3 from SP800-38C Appendix C\n */\n\n#define NB_TESTS 3\n\n/*\n * The data is the same for all tests, only the used length changes\n */\nstatic const unsigned char key[] = {\n    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f\n};\n\nstatic const unsigned char iv[] = {\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b\n};\n\nstatic const unsigned char ad[] = {\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13\n};\n\nstatic const unsigned char msg[] = {\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n};\n\nstatic const size_t iv_len [NB_TESTS] = { 7, 8,  12 };\nstatic const size_t add_len[NB_TESTS] = { 8, 16, 20 };\nstatic const size_t msg_len[NB_TESTS] = { 4, 16, 24 };\nstatic const size_t tag_len[NB_TESTS] = { 4, 6,  8  };\n\nstatic const unsigned char res[NB_TESTS][32] = {\n    {   0x71, 0x62, 0x01, 0x5b, 0x4d, 0xac, 0x25, 0x5d },\n    {   0xd2, 0xa1, 0xf0, 0xe0, 0x51, 0xea, 0x5f, 0x62,\n        0x08, 0x1a, 0x77, 0x92, 0x07, 0x3d, 0x59, 0x3d,\n        0x1f, 0xc6, 0x4f, 0xbf, 0xac, 0xcd },\n    {   0xe3, 0xb2, 0x01, 0xa9, 0xf5, 0xb7, 0x1a, 0x7a,\n        0x9b, 0x1c, 0xea, 0xec, 0xcd, 0x97, 0xe7, 0x0b,\n        0x61, 0x76, 0xaa, 0xd9, 0xa4, 0x42, 0x8a, 0xa5,\n        0x48, 0x43, 0x92, 0xfb, 0xc1, 0xb0, 0x99, 0x51 }\n};\n\nint mbedtls_ccm_self_test( int verbose )\n{\n    mbedtls_ccm_context ctx;\n    unsigned char out[32];\n    size_t i;\n    int ret;\n\n    mbedtls_ccm_init( &ctx );\n\n    if( mbedtls_ccm_setkey( &ctx, MBEDTLS_CIPHER_ID_AES, key, 8 * sizeof key ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"  CCM: setup failed\" );\n\n        return( 1 );\n    }\n\n    for( i = 0; i < NB_TESTS; i++ )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"  CCM-AES #%u: \", (unsigned int) i + 1 );\n\n        ret = mbedtls_ccm_encrypt_and_tag( &ctx, msg_len[i],\n                                   iv, iv_len[i], ad, add_len[i],\n                                   msg, out,\n                                   out + msg_len[i], tag_len[i] );\n\n        if( ret != 0 ||\n            memcmp( out, res[i], msg_len[i] + tag_len[i] ) != 0 )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed\\n\" );\n\n            return( 1 );\n        }\n\n        ret = mbedtls_ccm_auth_decrypt( &ctx, msg_len[i],\n                                iv, iv_len[i], ad, add_len[i],\n                                res[i], out,\n                                res[i] + msg_len[i], tag_len[i] );\n\n        if( ret != 0 ||\n            memcmp( out, msg, msg_len[i] ) != 0 )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed\\n\" );\n\n            return( 1 );\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    mbedtls_ccm_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( 0 );\n}\n\n#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */\n\n#endif /* MBEDTLS_CCM_C */\n","/*\n *  Elliptic curve DSA\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECDSA_C)\n\n#include \"mbedtls/ecdsa.h\"\n#include \"mbedtls/asn1write.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n#include \"mbedtls/hmac_drbg.h\"\n#endif\n\n/*\n * Derive a suitable integer for group grp from a buffer of length len\n * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3\n */\nstatic int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,\n                       const unsigned char *buf, size_t blen )\n{\n    int ret;\n    size_t n_size = ( grp->nbits + 7 ) / 8;\n    size_t use_size = blen > n_size ? n_size : blen;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );\n    if( use_size * 8 > grp->nbits )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );\n\n    /* While at it, reduce modulo N */\n    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );\n\ncleanup:\n    return( ret );\n}\n\n#if !defined(MBEDTLS_ECDSA_SIGN_ALT)\n/*\n * Compute ECDSA signature of a hashed message (SEC1 4.1.3)\n * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)\n */\nint mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret, key_tries, sign_tries, blind_tries;\n    mbedtls_ecp_point R;\n    mbedtls_mpi k, e, t;\n\n    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */\n    if( grp->N.p == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /* Make sure d is in range 1..n-1 */\n    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    mbedtls_ecp_point_init( &R );\n    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );\n\n    sign_tries = 0;\n    do\n    {\n        /*\n         * Steps 1-3: generate a suitable ephemeral keypair\n         * and set r = xR mod n\n         */\n        key_tries = 0;\n        do\n        {\n            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );\n\n            if( key_tries++ > 10 )\n            {\n                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;\n                goto cleanup;\n            }\n        }\n        while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );\n\n        /*\n         * Step 5: derive MPI from hashed message\n         */\n        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );\n\n        /*\n         * Generate a random value to blind inv_mod in next step,\n         * avoiding a potential timing leak.\n         */\n        blind_tries = 0;\n        do\n        {\n            size_t n_size = ( grp->nbits + 7 ) / 8;\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );\n\n            /* See mbedtls_ecp_gen_keypair() */\n            if( ++blind_tries > 30 )\n                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n        }\n        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||\n               mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );\n\n        /*\n         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );\n\n        if( sign_tries++ > 10 )\n        {\n            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;\n            goto cleanup;\n        }\n    }\n    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );\n\ncleanup:\n    mbedtls_ecp_point_free( &R );\n    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_SIGN_ALT */\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n/*\n * Deterministic signature wrapper\n */\nint mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                    mbedtls_md_type_t md_alg )\n{\n    int ret;\n    mbedtls_hmac_drbg_context rng_ctx;\n    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];\n    size_t grp_len = ( grp->nbits + 7 ) / 8;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_mpi h;\n\n    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &h );\n    mbedtls_hmac_drbg_init( &rng_ctx );\n\n    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );\n    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );\n    mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );\n\n    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,\n                      mbedtls_hmac_drbg_random, &rng_ctx );\n\ncleanup:\n    mbedtls_hmac_drbg_free( &rng_ctx );\n    mbedtls_mpi_free( &h );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)\n/*\n * Verify ECDSA signature of hashed message (SEC1 4.1.4)\n * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)\n */\nint mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,\n                  const unsigned char *buf, size_t blen,\n                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)\n{\n    int ret;\n    mbedtls_mpi e, s_inv, u1, u2;\n    mbedtls_ecp_point R;\n\n    mbedtls_ecp_point_init( &R );\n    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );\n\n    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */\n    if( grp->N.p == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Step 1: make sure r and s are in range 1..n-1\n     */\n    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||\n        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    /*\n     * Additional precaution: make sure Q is valid\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );\n\n    /*\n     * Step 3: derive MPI from hashed message\n     */\n    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );\n\n    /*\n     * Step 4: u1 = e / s mod n, u2 = r / s mod n\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );\n\n    /*\n     * Step 5: R = u1 G + u2 Q\n     *\n     * Since we're not using any secret data, no need to pass a RNG to\n     * mbedtls_ecp_mul() for countermesures.\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );\n\n    if( mbedtls_ecp_is_zero( &R ) )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    /*\n     * Step 6: convert xR to an integer (no-op)\n     * Step 7: reduce xR mod n (gives v)\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );\n\n    /*\n     * Step 8: check if v (that is, R.X) is equal to r\n     */\n    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\ncleanup:\n    mbedtls_ecp_point_free( &R );\n    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_VERIFY_ALT */\n\n/*\n * Convert a signature (given by context) to ASN.1\n */\nstatic int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,\n                                    unsigned char *sig, size_t *slen )\n{\n    int ret;\n    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];\n    unsigned char *p = buf + sizeof( buf );\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,\n                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );\n\n    memcpy( sig, p, len );\n    *slen = len;\n\n    return( 0 );\n}\n\n/*\n * Compute and write signature\n */\nint mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,\n                           const unsigned char *hash, size_t hlen,\n                           unsigned char *sig, size_t *slen,\n                           int (*f_rng)(void *, unsigned char *, size_t),\n                           void *p_rng )\n{\n    int ret;\n    mbedtls_mpi r, s;\n\n    mbedtls_mpi_init( &r );\n    mbedtls_mpi_init( &s );\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n    (void) f_rng;\n    (void) p_rng;\n\n    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,\n                             hash, hlen, md_alg ) );\n#else\n    (void) md_alg;\n\n    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,\n                         hash, hlen, f_rng, p_rng ) );\n#endif\n\n    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );\n\ncleanup:\n    mbedtls_mpi_free( &r );\n    mbedtls_mpi_free( &s );\n\n    return( ret );\n}\n\n#if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \\\n    defined(MBEDTLS_ECDSA_DETERMINISTIC)\nint mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,\n                               const unsigned char *hash, size_t hlen,\n                               unsigned char *sig, size_t *slen,\n                               mbedtls_md_type_t md_alg )\n{\n    return( mbedtls_ecdsa_write_signature( ctx, md_alg, hash, hlen, sig, slen,\n                                   NULL, NULL ) );\n}\n#endif\n\n/*\n * Read and check signature\n */\nint mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,\n                          const unsigned char *hash, size_t hlen,\n                          const unsigned char *sig, size_t slen )\n{\n    int ret;\n    unsigned char *p = (unsigned char *) sig;\n    const unsigned char *end = sig + slen;\n    size_t len;\n    mbedtls_mpi r, s;\n\n    mbedtls_mpi_init( &r );\n    mbedtls_mpi_init( &s );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( p + len != end )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +\n              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;\n        goto cleanup;\n    }\n\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||\n        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )\n    {\n        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,\n                              &ctx->Q, &r, &s ) ) != 0 )\n        goto cleanup;\n\n    /* At this point we know that the buffer starts with a valid signature.\n     * Return 0 if the buffer just contains the signature, and a specific\n     * error code if the valid signature is followed by more data. */\n    if( p != end )\n        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;\n\ncleanup:\n    mbedtls_mpi_free( &r );\n    mbedtls_mpi_free( &s );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_ECDSA_GENKEY_ALT)\n/*\n * Generate key pair\n */\nint mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,\n                  int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    return( mbedtls_ecp_group_load( &ctx->grp, gid ) ||\n            mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) );\n}\n#endif /* MBEDTLS_ECDSA_GENKEY_ALT */\n\n/*\n * Set context from an mbedtls_ecp_keypair\n */\nint mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||\n        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||\n        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )\n    {\n        mbedtls_ecdsa_free( ctx );\n    }\n\n    return( ret );\n}\n\n/*\n * Initialize context\n */\nvoid mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )\n{\n    mbedtls_ecp_keypair_init( ctx );\n}\n\n/*\n * Free context\n */\nvoid mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )\n{\n    mbedtls_ecp_keypair_free( ctx );\n}\n\n#endif /* MBEDTLS_ECDSA_C */\n","/**\n * \\file cipher.c\n *\n * \\brief Generic cipher wrapper for mbed TLS\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_CIPHER_C)\n\n#include \"mbedtls/cipher.h\"\n#include \"mbedtls/cipher_internal.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n#if defined(MBEDTLS_GCM_C)\n#include \"mbedtls/gcm.h\"\n#endif\n\n#if defined(MBEDTLS_CCM_C)\n#include \"mbedtls/ccm.h\"\n#endif\n\n#if defined(MBEDTLS_CMAC_C)\n#include \"mbedtls/cmac.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#define mbedtls_calloc calloc\n#define mbedtls_free   free\n#endif\n\n#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#define MBEDTLS_CIPHER_MODE_STREAM\n#endif\n\nstatic int supported_init = 0;\n\nconst int *mbedtls_cipher_list( void )\n{\n    const mbedtls_cipher_definition_t *def;\n    int *type;\n\n    if( ! supported_init )\n    {\n        def = mbedtls_cipher_definitions;\n        type = mbedtls_cipher_supported;\n\n        while( def->type != 0 )\n            *type++ = (*def++).type;\n\n        *type = 0;\n\n        supported_init = 1;\n    }\n\n    return( mbedtls_cipher_supported );\n}\n\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )\n{\n    const mbedtls_cipher_definition_t *def;\n\n    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )\n        if( def->type == cipher_type )\n            return( def->info );\n\n    return( NULL );\n}\n\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_string( const char *cipher_name )\n{\n    const mbedtls_cipher_definition_t *def;\n\n    if( NULL == cipher_name )\n        return( NULL );\n\n    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )\n        if( !  strcmp( def->info->name, cipher_name ) )\n            return( def->info );\n\n    return( NULL );\n}\n\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,\n                                              int key_bitlen,\n                                              const mbedtls_cipher_mode_t mode )\n{\n    const mbedtls_cipher_definition_t *def;\n\n    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )\n        if( def->info->base->cipher == cipher_id &&\n            def->info->key_bitlen == (unsigned) key_bitlen &&\n            def->info->mode == mode )\n            return( def->info );\n\n    return( NULL );\n}\n\nvoid mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );\n}\n\nvoid mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n#if defined(MBEDTLS_CMAC_C)\n    if( ctx->cmac_ctx )\n    {\n       mbedtls_platform_zeroize( ctx->cmac_ctx,\n                                 sizeof( mbedtls_cmac_context_t ) );\n       mbedtls_free( ctx->cmac_ctx );\n    }\n#endif\n\n    if( ctx->cipher_ctx )\n        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );\n\n    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );\n}\n\nint mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )\n{\n    if( NULL == cipher_info || NULL == ctx )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );\n\n    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )\n        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );\n\n    ctx->cipher_info = cipher_info;\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\n    /*\n     * Ignore possible errors caused by a cipher mode that doesn't use padding\n     */\n#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)\n    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );\n#else\n    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );\n#endif\n#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */\n\n    return( 0 );\n}\n\nint mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,\n        int key_bitlen, const mbedtls_operation_t operation )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&\n        (int) ctx->cipher_info->key_bitlen != key_bitlen )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    ctx->key_bitlen = key_bitlen;\n    ctx->operation = operation;\n\n    /*\n     * For CFB and CTR mode always use the encryption key schedule\n     */\n    if( MBEDTLS_ENCRYPT == operation ||\n        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||\n        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )\n    {\n        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,\n                ctx->key_bitlen );\n    }\n\n    if( MBEDTLS_DECRYPT == operation )\n        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,\n                ctx->key_bitlen );\n\n    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n}\n\nint mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,\n                   const unsigned char *iv, size_t iv_len )\n{\n    size_t actual_iv_size;\n\n    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    /* avoid buffer overflow in ctx->iv */\n    if( iv_len > MBEDTLS_MAX_IV_LENGTH )\n        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n\n    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )\n        actual_iv_size = iv_len;\n    else\n    {\n        actual_iv_size = ctx->cipher_info->iv_size;\n\n        /* avoid reading past the end of input buffer */\n        if( actual_iv_size > iv_len )\n            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    memcpy( ctx->iv, iv, actual_iv_size );\n    ctx->iv_size = actual_iv_size;\n\n    return( 0 );\n}\n\nint mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    ctx->unprocessed_len = 0;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_GCM_C)\nint mbedtls_cipher_update_ad( mbedtls_cipher_context_t *ctx,\n                      const unsigned char *ad, size_t ad_len )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n    {\n        return mbedtls_gcm_starts( (mbedtls_gcm_context *) ctx->cipher_ctx, ctx->operation,\n                           ctx->iv, ctx->iv_size, ad, ad_len );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_GCM_C */\n\nint mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,\n                   size_t ilen, unsigned char *output, size_t *olen )\n{\n    int ret;\n    size_t block_size = 0;\n\n    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    *olen = 0;\n    block_size = mbedtls_cipher_get_block_size( ctx );\n\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )\n    {\n        if( ilen != block_size )\n            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );\n\n        *olen = ilen;\n\n        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,\n                    ctx->operation, input, output ) ) )\n        {\n            return( ret );\n        }\n\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_GCM_C)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )\n    {\n        *olen = ilen;\n        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,\n                           output );\n    }\n#endif\n\n    if ( 0 == block_size )\n    {\n        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;\n    }\n\n    if( input == output &&\n       ( ctx->unprocessed_len != 0 || ilen % block_size ) )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )\n    {\n        size_t copy_len = 0;\n\n        /*\n         * If there is not enough data for a full block, cache it.\n         */\n        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&\n                ilen <= block_size - ctx->unprocessed_len ) ||\n            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&\n                ilen < block_size - ctx->unprocessed_len ) ||\n             ( ctx->operation == MBEDTLS_ENCRYPT &&\n                ilen < block_size - ctx->unprocessed_len ) )\n        {\n            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,\n                    ilen );\n\n            ctx->unprocessed_len += ilen;\n            return( 0 );\n        }\n\n        /*\n         * Process cached data first\n         */\n        if( 0 != ctx->unprocessed_len )\n        {\n            copy_len = block_size - ctx->unprocessed_len;\n\n            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,\n                    copy_len );\n\n            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,\n                    ctx->operation, block_size, ctx->iv,\n                    ctx->unprocessed_data, output ) ) )\n            {\n                return( ret );\n            }\n\n            *olen += block_size;\n            output += block_size;\n            ctx->unprocessed_len = 0;\n\n            input += copy_len;\n            ilen -= copy_len;\n        }\n\n        /*\n         * Cache final, incomplete block\n         */\n        if( 0 != ilen )\n        {\n            if( 0 == block_size )\n            {\n                return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;\n            }\n\n            /* Encryption: only cache partial blocks\n             * Decryption w/ padding: always keep at least one whole block\n             * Decryption w/o padding: only cache partial blocks\n             */\n            copy_len = ilen % block_size;\n            if( copy_len == 0 &&\n                ctx->operation == MBEDTLS_DECRYPT &&\n                NULL != ctx->add_padding)\n            {\n                copy_len = block_size;\n            }\n\n            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),\n                    copy_len );\n\n            ctx->unprocessed_len += copy_len;\n            ilen -= copy_len;\n        }\n\n        /*\n         * Process remaining full blocks\n         */\n        if( ilen )\n        {\n            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,\n                    ctx->operation, ilen, ctx->iv, input, output ) ) )\n            {\n                return( ret );\n            }\n\n            *olen += ilen;\n        }\n\n        return( 0 );\n    }\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_CFB )\n    {\n        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,\n                ctx->operation, ilen, &ctx->unprocessed_len, ctx->iv,\n                input, output ) ) )\n        {\n            return( ret );\n        }\n\n        *olen = ilen;\n\n        return( 0 );\n    }\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_CTR )\n    {\n        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,\n                ilen, &ctx->unprocessed_len, ctx->iv,\n                ctx->unprocessed_data, input, output ) ) )\n        {\n            return( ret );\n        }\n\n        *olen = ilen;\n\n        return( 0 );\n    }\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_STREAM )\n    {\n        if( 0 != ( ret = ctx->cipher_info->base->stream_func( ctx->cipher_ctx,\n                                                    ilen, input, output ) ) )\n        {\n            return( ret );\n        }\n\n        *olen = ilen;\n\n        return( 0 );\n    }\n#endif /* MBEDTLS_CIPHER_MODE_STREAM */\n\n    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\n#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)\n/*\n * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len\n */\nstatic void add_pkcs_padding( unsigned char *output, size_t output_len,\n        size_t data_len )\n{\n    size_t padding_len = output_len - data_len;\n    unsigned char i;\n\n    for( i = 0; i < padding_len; i++ )\n        output[data_len + i] = (unsigned char) padding_len;\n}\n\nstatic int get_pkcs_padding( unsigned char *input, size_t input_len,\n        size_t *data_len )\n{\n    size_t i, pad_idx;\n    unsigned char padding_len, bad = 0;\n\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    padding_len = input[input_len - 1];\n    *data_len = input_len - padding_len;\n\n    /* Avoid logical || since it results in a branch */\n    bad |= padding_len > input_len;\n    bad |= padding_len == 0;\n\n    /* The number of bytes checked must be independent of padding_len,\n     * so pick input_len, which is usually 8 or 16 (one block) */\n    pad_idx = input_len - padding_len;\n    for( i = 0; i < input_len; i++ )\n        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );\n\n    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );\n}\n#endif /* MBEDTLS_CIPHER_PADDING_PKCS7 */\n\n#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)\n/*\n * One and zeros padding: fill with 80 00 ... 00\n */\nstatic void add_one_and_zeros_padding( unsigned char *output,\n                                       size_t output_len, size_t data_len )\n{\n    size_t padding_len = output_len - data_len;\n    unsigned char i = 0;\n\n    output[data_len] = 0x80;\n    for( i = 1; i < padding_len; i++ )\n        output[data_len + i] = 0x00;\n}\n\nstatic int get_one_and_zeros_padding( unsigned char *input, size_t input_len,\n                                      size_t *data_len )\n{\n    size_t i;\n    unsigned char done = 0, prev_done, bad;\n\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    bad = 0x80;\n    *data_len = 0;\n    for( i = input_len; i > 0; i-- )\n    {\n        prev_done = done;\n        done |= ( input[i - 1] != 0 );\n        *data_len |= ( i - 1 ) * ( done != prev_done );\n        bad ^= input[i - 1] * ( done != prev_done );\n    }\n\n    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );\n\n}\n#endif /* MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS */\n\n#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)\n/*\n * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length\n */\nstatic void add_zeros_and_len_padding( unsigned char *output,\n                                       size_t output_len, size_t data_len )\n{\n    size_t padding_len = output_len - data_len;\n    unsigned char i = 0;\n\n    for( i = 1; i < padding_len; i++ )\n        output[data_len + i - 1] = 0x00;\n    output[output_len - 1] = (unsigned char) padding_len;\n}\n\nstatic int get_zeros_and_len_padding( unsigned char *input, size_t input_len,\n                                      size_t *data_len )\n{\n    size_t i, pad_idx;\n    unsigned char padding_len, bad = 0;\n\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    padding_len = input[input_len - 1];\n    *data_len = input_len - padding_len;\n\n    /* Avoid logical || since it results in a branch */\n    bad |= padding_len > input_len;\n    bad |= padding_len == 0;\n\n    /* The number of bytes checked must be independent of padding_len */\n    pad_idx = input_len - padding_len;\n    for( i = 0; i < input_len - 1; i++ )\n        bad |= input[i] * ( i >= pad_idx );\n\n    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );\n}\n#endif /* MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN */\n\n#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)\n/*\n * Zero padding: fill with 00 ... 00\n */\nstatic void add_zeros_padding( unsigned char *output,\n                               size_t output_len, size_t data_len )\n{\n    size_t i;\n\n    for( i = data_len; i < output_len; i++ )\n        output[i] = 0x00;\n}\n\nstatic int get_zeros_padding( unsigned char *input, size_t input_len,\n                              size_t *data_len )\n{\n    size_t i;\n    unsigned char done = 0, prev_done;\n\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    *data_len = 0;\n    for( i = input_len; i > 0; i-- )\n    {\n        prev_done = done;\n        done |= ( input[i-1] != 0 );\n        *data_len |= i * ( done != prev_done );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_PADDING_ZEROS */\n\n/*\n * No padding: don't pad :)\n *\n * There is no add_padding function (check for NULL in mbedtls_cipher_finish)\n * but a trivial get_padding function\n */\nstatic int get_no_padding( unsigned char *input, size_t input_len,\n                              size_t *data_len )\n{\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    *data_len = input_len;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */\n\nint mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,\n                   unsigned char *output, size_t *olen )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    *olen = 0;\n\n    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||\n        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||\n        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||\n        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )\n    {\n        return( 0 );\n    }\n\n    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )\n    {\n        if( ctx->unprocessed_len != 0 )\n            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );\n\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )\n    {\n        int ret = 0;\n\n        if( MBEDTLS_ENCRYPT == ctx->operation )\n        {\n            /* check for 'no padding' mode */\n            if( NULL == ctx->add_padding )\n            {\n                if( 0 != ctx->unprocessed_len )\n                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );\n\n                return( 0 );\n            }\n\n            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),\n                    ctx->unprocessed_len );\n        }\n        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )\n        {\n            /*\n             * For decrypt operations, expect a full block,\n             * or an empty block if no padding\n             */\n            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )\n                return( 0 );\n\n            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );\n        }\n\n        /* cipher block */\n        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,\n                ctx->operation, mbedtls_cipher_get_block_size( ctx ), ctx->iv,\n                ctx->unprocessed_data, output ) ) )\n        {\n            return( ret );\n        }\n\n        /* Set output size for decryption */\n        if( MBEDTLS_DECRYPT == ctx->operation )\n            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),\n                                     olen );\n\n        /* Set output size for encryption */\n        *olen = mbedtls_cipher_get_block_size( ctx );\n        return( 0 );\n    }\n#else\n    ((void) output);\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\nint mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )\n{\n    if( NULL == ctx ||\n        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    switch( mode )\n    {\n#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)\n    case MBEDTLS_PADDING_PKCS7:\n        ctx->add_padding = add_pkcs_padding;\n        ctx->get_padding = get_pkcs_padding;\n        break;\n#endif\n#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)\n    case MBEDTLS_PADDING_ONE_AND_ZEROS:\n        ctx->add_padding = add_one_and_zeros_padding;\n        ctx->get_padding = get_one_and_zeros_padding;\n        break;\n#endif\n#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)\n    case MBEDTLS_PADDING_ZEROS_AND_LEN:\n        ctx->add_padding = add_zeros_and_len_padding;\n        ctx->get_padding = get_zeros_and_len_padding;\n        break;\n#endif\n#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)\n    case MBEDTLS_PADDING_ZEROS:\n        ctx->add_padding = add_zeros_padding;\n        ctx->get_padding = get_zeros_padding;\n        break;\n#endif\n    case MBEDTLS_PADDING_NONE:\n        ctx->add_padding = NULL;\n        ctx->get_padding = get_no_padding;\n        break;\n\n    default:\n        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */\n\n#if defined(MBEDTLS_GCM_C)\nint mbedtls_cipher_write_tag( mbedtls_cipher_context_t *ctx,\n                      unsigned char *tag, size_t tag_len )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info || NULL == tag )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    if( MBEDTLS_ENCRYPT != ctx->operation )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n        return mbedtls_gcm_finish( (mbedtls_gcm_context *) ctx->cipher_ctx, tag, tag_len );\n\n    return( 0 );\n}\n\nint mbedtls_cipher_check_tag( mbedtls_cipher_context_t *ctx,\n                      const unsigned char *tag, size_t tag_len )\n{\n    int ret;\n\n    if( NULL == ctx || NULL == ctx->cipher_info ||\n        MBEDTLS_DECRYPT != ctx->operation )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n    {\n        unsigned char check_tag[16];\n        size_t i;\n        int diff;\n\n        if( tag_len > sizeof( check_tag ) )\n            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n        if( 0 != ( ret = mbedtls_gcm_finish( (mbedtls_gcm_context *) ctx->cipher_ctx,\n                                     check_tag, tag_len ) ) )\n        {\n            return( ret );\n        }\n\n        /* Check the tag in \"constant-time\" */\n        for( diff = 0, i = 0; i < tag_len; i++ )\n            diff |= tag[i] ^ check_tag[i];\n\n        if( diff != 0 )\n            return( MBEDTLS_ERR_CIPHER_AUTH_FAILED );\n\n        return( 0 );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_GCM_C */\n\n/*\n * Packet-oriented wrapper for non-AEAD modes\n */\nint mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,\n                  const unsigned char *iv, size_t iv_len,\n                  const unsigned char *input, size_t ilen,\n                  unsigned char *output, size_t *olen )\n{\n    int ret;\n    size_t finish_olen;\n\n    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )\n        return( ret );\n\n    *olen += finish_olen;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_AEAD)\n/*\n * Packet-oriented encryption for AEAD modes\n */\nint mbedtls_cipher_auth_encrypt( mbedtls_cipher_context_t *ctx,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *ad, size_t ad_len,\n                         const unsigned char *input, size_t ilen,\n                         unsigned char *output, size_t *olen,\n                         unsigned char *tag, size_t tag_len )\n{\n#if defined(MBEDTLS_GCM_C)\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n    {\n        *olen = ilen;\n        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,\n                                   iv, iv_len, ad, ad_len, input, output,\n                                   tag_len, tag ) );\n    }\n#endif /* MBEDTLS_GCM_C */\n#if defined(MBEDTLS_CCM_C)\n    if( MBEDTLS_MODE_CCM == ctx->cipher_info->mode )\n    {\n        *olen = ilen;\n        return( mbedtls_ccm_encrypt_and_tag( ctx->cipher_ctx, ilen,\n                                     iv, iv_len, ad, ad_len, input, output,\n                                     tag, tag_len ) );\n    }\n#endif /* MBEDTLS_CCM_C */\n\n    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n}\n\n/*\n * Packet-oriented decryption for AEAD modes\n */\nint mbedtls_cipher_auth_decrypt( mbedtls_cipher_context_t *ctx,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *ad, size_t ad_len,\n                         const unsigned char *input, size_t ilen,\n                         unsigned char *output, size_t *olen,\n                         const unsigned char *tag, size_t tag_len )\n{\n#if defined(MBEDTLS_GCM_C)\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n    {\n        int ret;\n\n        *olen = ilen;\n        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,\n                                iv, iv_len, ad, ad_len,\n                                tag, tag_len, input, output );\n\n        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )\n            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;\n\n        return( ret );\n    }\n#endif /* MBEDTLS_GCM_C */\n#if defined(MBEDTLS_CCM_C)\n    if( MBEDTLS_MODE_CCM == ctx->cipher_info->mode )\n    {\n        int ret;\n\n        *olen = ilen;\n        ret = mbedtls_ccm_auth_decrypt( ctx->cipher_ctx, ilen,\n                                iv, iv_len, ad, ad_len,\n                                input, output, tag, tag_len );\n\n        if( ret == MBEDTLS_ERR_CCM_AUTH_FAILED )\n            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;\n\n        return( ret );\n    }\n#endif /* MBEDTLS_CCM_C */\n\n    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n}\n#endif /* MBEDTLS_CIPHER_MODE_AEAD */\n\n#endif /* MBEDTLS_CIPHER_C */\n","/**\n * \\file cipher.h\n *\n * \\brief This file contains an abstraction interface for use with the cipher\n * primitives provided by the library. It provides a common interface to all of\n * the available cipher operations.\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n */\n/*\n *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of Mbed TLS (https://tls.mbed.org)\n */\n\n#ifndef MBEDTLS_CIPHER_H\n#define MBEDTLS_CIPHER_H\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#include <stddef.h>\n\n#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)\n#define MBEDTLS_CIPHER_MODE_AEAD\n#endif\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#define MBEDTLS_CIPHER_MODE_WITH_PADDING\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n#define MBEDTLS_CIPHER_MODE_STREAM\n#endif\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n#define MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE  -0x6080  /**< The selected feature is not available. */\n#define MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA       -0x6100  /**< Bad input parameters. */\n#define MBEDTLS_ERR_CIPHER_ALLOC_FAILED         -0x6180  /**< Failed to allocate memory. */\n#define MBEDTLS_ERR_CIPHER_INVALID_PADDING      -0x6200  /**< Input data contains invalid padding and is rejected. */\n#define MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED  -0x6280  /**< Decryption of block requires a full block. */\n#define MBEDTLS_ERR_CIPHER_AUTH_FAILED          -0x6300  /**< Authentication failed (for AEAD modes). */\n#define MBEDTLS_ERR_CIPHER_INVALID_CONTEXT      -0x6380  /**< The context is invalid. For example, because it was freed. */\n#define MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED      -0x6400  /**< Cipher hardware accelerator failed. */\n\n#define MBEDTLS_CIPHER_VARIABLE_IV_LEN     0x01    /**< Cipher accepts IVs of variable length. */\n#define MBEDTLS_CIPHER_VARIABLE_KEY_LEN    0x02    /**< Cipher accepts keys of variable length. */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * \\brief     Supported cipher types.\n *\n * \\warning   RC4 and DES are considered weak ciphers and their use\n *            constitutes a security risk. Arm recommends considering stronger\n *            ciphers instead.\n */\ntypedef enum {\n    MBEDTLS_CIPHER_ID_NONE = 0,  /**< Placeholder to mark the end of cipher ID lists. */\n    MBEDTLS_CIPHER_ID_NULL,      /**< The identity cipher, treated as a stream cipher. */\n    MBEDTLS_CIPHER_ID_AES,       /**< The AES cipher. */\n    MBEDTLS_CIPHER_ID_DES,       /**< The DES cipher. */\n    MBEDTLS_CIPHER_ID_3DES,      /**< The Triple DES cipher. */\n    MBEDTLS_CIPHER_ID_CAMELLIA,  /**< The Camellia cipher. */\n    MBEDTLS_CIPHER_ID_BLOWFISH,  /**< The Blowfish cipher. */\n    MBEDTLS_CIPHER_ID_ARC4,      /**< The RC4 cipher. */\n    MBEDTLS_CIPHER_ID_ARIA,      /**< The Aria cipher. */\n} mbedtls_cipher_id_t;\n\n/**\n * \\brief     Supported {cipher type, cipher mode} pairs.\n *\n * \\warning   RC4 and DES are considered weak ciphers and their use\n *            constitutes a security risk. Arm recommends considering stronger\n *            ciphers instead.\n */\ntypedef enum {\n    MBEDTLS_CIPHER_NONE = 0,             /**< Placeholder to mark the end of cipher-pair lists. */\n    MBEDTLS_CIPHER_NULL,                 /**< The identity stream cipher. */\n    MBEDTLS_CIPHER_AES_128_ECB,          /**< AES cipher with 128-bit ECB mode. */\n    MBEDTLS_CIPHER_AES_192_ECB,          /**< AES cipher with 192-bit ECB mode. */\n    MBEDTLS_CIPHER_AES_256_ECB,          /**< AES cipher with 256-bit ECB mode. */\n    MBEDTLS_CIPHER_AES_128_CBC,          /**< AES cipher with 128-bit CBC mode. */\n    MBEDTLS_CIPHER_AES_192_CBC,          /**< AES cipher with 192-bit CBC mode. */\n    MBEDTLS_CIPHER_AES_256_CBC,          /**< AES cipher with 256-bit CBC mode. */\n    MBEDTLS_CIPHER_AES_128_CFB128,       /**< AES cipher with 128-bit CFB128 mode. */\n    MBEDTLS_CIPHER_AES_192_CFB128,       /**< AES cipher with 192-bit CFB128 mode. */\n    MBEDTLS_CIPHER_AES_256_CFB128,       /**< AES cipher with 256-bit CFB128 mode. */\n    MBEDTLS_CIPHER_AES_128_CTR,          /**< AES cipher with 128-bit CTR mode. */\n    MBEDTLS_CIPHER_AES_192_CTR,          /**< AES cipher with 192-bit CTR mode. */\n    MBEDTLS_CIPHER_AES_256_CTR,          /**< AES cipher with 256-bit CTR mode. */\n    MBEDTLS_CIPHER_AES_128_GCM,          /**< AES cipher with 128-bit GCM mode. */\n    MBEDTLS_CIPHER_AES_192_GCM,          /**< AES cipher with 192-bit GCM mode. */\n    MBEDTLS_CIPHER_AES_256_GCM,          /**< AES cipher with 256-bit GCM mode. */\n    MBEDTLS_CIPHER_CAMELLIA_128_ECB,     /**< Camellia cipher with 128-bit ECB mode. */\n    MBEDTLS_CIPHER_CAMELLIA_192_ECB,     /**< Camellia cipher with 192-bit ECB mode. */\n    MBEDTLS_CIPHER_CAMELLIA_256_ECB,     /**< Camellia cipher with 256-bit ECB mode. */\n    MBEDTLS_CIPHER_CAMELLIA_128_CBC,     /**< Camellia cipher with 128-bit CBC mode. */\n    MBEDTLS_CIPHER_CAMELLIA_192_CBC,     /**< Camellia cipher with 192-bit CBC mode. */\n    MBEDTLS_CIPHER_CAMELLIA_256_CBC,     /**< Camellia cipher with 256-bit CBC mode. */\n    MBEDTLS_CIPHER_CAMELLIA_128_CFB128,  /**< Camellia cipher with 128-bit CFB128 mode. */\n    MBEDTLS_CIPHER_CAMELLIA_192_CFB128,  /**< Camellia cipher with 192-bit CFB128 mode. */\n    MBEDTLS_CIPHER_CAMELLIA_256_CFB128,  /**< Camellia cipher with 256-bit CFB128 mode. */\n    MBEDTLS_CIPHER_CAMELLIA_128_CTR,     /**< Camellia cipher with 128-bit CTR mode. */\n    MBEDTLS_CIPHER_CAMELLIA_192_CTR,     /**< Camellia cipher with 192-bit CTR mode. */\n    MBEDTLS_CIPHER_CAMELLIA_256_CTR,     /**< Camellia cipher with 256-bit CTR mode. */\n    MBEDTLS_CIPHER_CAMELLIA_128_GCM,     /**< Camellia cipher with 128-bit GCM mode. */\n    MBEDTLS_CIPHER_CAMELLIA_192_GCM,     /**< Camellia cipher with 192-bit GCM mode. */\n    MBEDTLS_CIPHER_CAMELLIA_256_GCM,     /**< Camellia cipher with 256-bit GCM mode. */\n    MBEDTLS_CIPHER_DES_ECB,              /**< DES cipher with ECB mode. */\n    MBEDTLS_CIPHER_DES_CBC,              /**< DES cipher with CBC mode. */\n    MBEDTLS_CIPHER_DES_EDE_ECB,          /**< DES cipher with EDE ECB mode. */\n    MBEDTLS_CIPHER_DES_EDE_CBC,          /**< DES cipher with EDE CBC mode. */\n    MBEDTLS_CIPHER_DES_EDE3_ECB,         /**< DES cipher with EDE3 ECB mode. */\n    MBEDTLS_CIPHER_DES_EDE3_CBC,         /**< DES cipher with EDE3 CBC mode. */\n    MBEDTLS_CIPHER_BLOWFISH_ECB,         /**< Blowfish cipher with ECB mode. */\n    MBEDTLS_CIPHER_BLOWFISH_CBC,         /**< Blowfish cipher with CBC mode. */\n    MBEDTLS_CIPHER_BLOWFISH_CFB64,       /**< Blowfish cipher with CFB64 mode. */\n    MBEDTLS_CIPHER_BLOWFISH_CTR,         /**< Blowfish cipher with CTR mode. */\n    MBEDTLS_CIPHER_ARC4_128,             /**< RC4 cipher with 128-bit mode. */\n    MBEDTLS_CIPHER_AES_128_CCM,          /**< AES cipher with 128-bit CCM mode. */\n    MBEDTLS_CIPHER_AES_192_CCM,          /**< AES cipher with 192-bit CCM mode. */\n    MBEDTLS_CIPHER_AES_256_CCM,          /**< AES cipher with 256-bit CCM mode. */\n    MBEDTLS_CIPHER_CAMELLIA_128_CCM,     /**< Camellia cipher with 128-bit CCM mode. */\n    MBEDTLS_CIPHER_CAMELLIA_192_CCM,     /**< Camellia cipher with 192-bit CCM mode. */\n    MBEDTLS_CIPHER_CAMELLIA_256_CCM,     /**< Camellia cipher with 256-bit CCM mode. */\n    MBEDTLS_CIPHER_ARIA_128_ECB,         /**< Aria cipher with 128-bit key and ECB mode. */\n    MBEDTLS_CIPHER_ARIA_192_ECB,         /**< Aria cipher with 192-bit key and ECB mode. */\n    MBEDTLS_CIPHER_ARIA_256_ECB,         /**< Aria cipher with 256-bit key and ECB mode. */\n    MBEDTLS_CIPHER_ARIA_128_CBC,         /**< Aria cipher with 128-bit key and CBC mode. */\n    MBEDTLS_CIPHER_ARIA_192_CBC,         /**< Aria cipher with 192-bit key and CBC mode. */\n    MBEDTLS_CIPHER_ARIA_256_CBC,         /**< Aria cipher with 256-bit key and CBC mode. */\n    MBEDTLS_CIPHER_ARIA_128_CFB128,      /**< Aria cipher with 128-bit key and CFB-128 mode. */\n    MBEDTLS_CIPHER_ARIA_192_CFB128,      /**< Aria cipher with 192-bit key and CFB-128 mode. */\n    MBEDTLS_CIPHER_ARIA_256_CFB128,      /**< Aria cipher with 256-bit key and CFB-128 mode. */\n    MBEDTLS_CIPHER_ARIA_128_CTR,         /**< Aria cipher with 128-bit key and CTR mode. */\n    MBEDTLS_CIPHER_ARIA_192_CTR,         /**< Aria cipher with 192-bit key and CTR mode. */\n    MBEDTLS_CIPHER_ARIA_256_CTR,         /**< Aria cipher with 256-bit key and CTR mode. */\n    MBEDTLS_CIPHER_ARIA_128_GCM,         /**< Aria cipher with 128-bit key and GCM mode. */\n    MBEDTLS_CIPHER_ARIA_192_GCM,         /**< Aria cipher with 192-bit key and GCM mode. */\n    MBEDTLS_CIPHER_ARIA_256_GCM,         /**< Aria cipher with 256-bit key and GCM mode. */\n    MBEDTLS_CIPHER_ARIA_128_CCM,         /**< Aria cipher with 128-bit key and CCM mode. */\n    MBEDTLS_CIPHER_ARIA_192_CCM,         /**< Aria cipher with 192-bit key and CCM mode. */\n    MBEDTLS_CIPHER_ARIA_256_CCM,         /**< Aria cipher with 256-bit key and CCM mode. */\n} mbedtls_cipher_type_t;\n\n/** Supported cipher modes. */\ntypedef enum {\n    MBEDTLS_MODE_NONE = 0,               /**< None. */\n    MBEDTLS_MODE_ECB,                    /**< The ECB cipher mode. */\n    MBEDTLS_MODE_CBC,                    /**< The CBC cipher mode. */\n    MBEDTLS_MODE_CFB,                    /**< The CFB cipher mode. */\n    MBEDTLS_MODE_OFB,                    /**< The OFB cipher mode - unsupported. */\n    MBEDTLS_MODE_CTR,                    /**< The CTR cipher mode. */\n    MBEDTLS_MODE_GCM,                    /**< The GCM cipher mode. */\n    MBEDTLS_MODE_STREAM,                 /**< The stream cipher mode. */\n    MBEDTLS_MODE_CCM,                    /**< The CCM cipher mode. */\n} mbedtls_cipher_mode_t;\n\n/** Supported cipher padding types. */\ntypedef enum {\n    MBEDTLS_PADDING_PKCS7 = 0,     /**< PKCS7 padding (default).        */\n    MBEDTLS_PADDING_ONE_AND_ZEROS, /**< ISO/IEC 7816-4 padding.         */\n    MBEDTLS_PADDING_ZEROS_AND_LEN, /**< ANSI X.923 padding.             */\n    MBEDTLS_PADDING_ZEROS,         /**< Zero padding (not reversible). */\n    MBEDTLS_PADDING_NONE,          /**< Never pad (full blocks only).   */\n} mbedtls_cipher_padding_t;\n\n/** Type of operation. */\ntypedef enum {\n    MBEDTLS_OPERATION_NONE = -1,\n    MBEDTLS_DECRYPT = 0,\n    MBEDTLS_ENCRYPT,\n} mbedtls_operation_t;\n\nenum {\n    /** Undefined key length. */\n    MBEDTLS_KEY_LENGTH_NONE = 0,\n    /** Key length, in bits (including parity), for DES keys. */\n    MBEDTLS_KEY_LENGTH_DES  = 64,\n    /** Key length in bits, including parity, for DES in two-key EDE. */\n    MBEDTLS_KEY_LENGTH_DES_EDE = 128,\n    /** Key length in bits, including parity, for DES in three-key EDE. */\n    MBEDTLS_KEY_LENGTH_DES_EDE3 = 192,\n};\n\n/** Maximum length of any IV, in Bytes. */\n#define MBEDTLS_MAX_IV_LENGTH      16\n/** Maximum block size of any cipher, in Bytes. */\n#define MBEDTLS_MAX_BLOCK_LENGTH   16\n\n/**\n * Base cipher information (opaque struct).\n */\ntypedef struct mbedtls_cipher_base_t mbedtls_cipher_base_t;\n\n/**\n * CMAC context (opaque struct).\n */\ntypedef struct mbedtls_cmac_context_t mbedtls_cmac_context_t;\n\n/**\n * Cipher information. Allows calling cipher functions\n * in a generic way.\n */\ntypedef struct {\n    /** Full cipher identifier. For example,\n     * MBEDTLS_CIPHER_AES_256_CBC.\n     */\n    mbedtls_cipher_type_t type;\n\n    /** The cipher mode. For example, MBEDTLS_MODE_CBC. */\n    mbedtls_cipher_mode_t mode;\n\n    /** The cipher key length, in bits. This is the\n     * default length for variable sized ciphers.\n     * Includes parity bits for ciphers like DES.\n     */\n    unsigned int key_bitlen;\n\n    /** Name of the cipher. */\n    const char * name;\n\n    /** IV or nonce size, in Bytes.\n     * For ciphers that accept variable IV sizes,\n     * this is the recommended size.\n     */\n    unsigned int iv_size;\n\n    /** Bitflag comprised of MBEDTLS_CIPHER_VARIABLE_IV_LEN and\n     *  MBEDTLS_CIPHER_VARIABLE_KEY_LEN indicating whether the\n     *  cipher supports variable IV or variable key sizes, respectively.\n     */\n    int flags;\n\n    /** The block size, in Bytes. */\n    unsigned int block_size;\n\n    /** Struct for base cipher information and functions. */\n    const mbedtls_cipher_base_t *base;\n\n} mbedtls_cipher_info_t;\n\n/**\n * Generic cipher context.\n */\ntypedef struct {\n    /** Information about the associated cipher. */\n    const mbedtls_cipher_info_t *cipher_info;\n\n    /** Key length to use. */\n    int key_bitlen;\n\n    /** Operation that the key of the context has been\n     * initialized for.\n     */\n    mbedtls_operation_t operation;\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\n    /** Padding functions to use, if relevant for\n     * the specific cipher mode.\n     */\n    void (*add_padding)( unsigned char *output, size_t olen, size_t data_len );\n    int (*get_padding)( unsigned char *input, size_t ilen, size_t *data_len );\n#endif\n\n    /** Buffer for input that has not been processed yet. */\n    unsigned char unprocessed_data[MBEDTLS_MAX_BLOCK_LENGTH];\n\n    /** Number of Bytes that have not been processed yet. */\n    size_t unprocessed_len;\n\n    /** Current IV or NONCE_COUNTER for CTR-mode. */\n    unsigned char iv[MBEDTLS_MAX_IV_LENGTH];\n\n    /** IV size in Bytes, for ciphers with variable-length IVs. */\n    size_t iv_size;\n\n    /** The cipher-specific context. */\n    void *cipher_ctx;\n\n#if defined(MBEDTLS_CMAC_C)\n    /** CMAC-specific context. */\n    mbedtls_cmac_context_t *cmac_ctx;\n#endif\n} mbedtls_cipher_context_t;\n\n/**\n * \\brief This function retrieves the list of ciphers supported by the generic\n * cipher module.\n *\n * \\return      A statically-allocated array of ciphers. The last entry\n *              is zero.\n */\nconst int *mbedtls_cipher_list( void );\n\n/**\n * \\brief               This function retrieves the cipher-information\n *                      structure associated with the given cipher name.\n *\n * \\param cipher_name   Name of the cipher to search for.\n *\n * \\return              The cipher information structure associated with the\n *                      given \\p cipher_name.\n * \\return              NULL if the associated cipher information is not found.\n */\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_string( const char *cipher_name );\n\n/**\n * \\brief               This function retrieves the cipher-information\n *                      structure associated with the given cipher type.\n *\n * \\param cipher_type   Type of the cipher to search for.\n *\n * \\return              The cipher information structure associated with the\n *                      given \\p cipher_type.\n * \\return              NULL if the associated cipher information is not found.\n */\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type );\n\n/**\n * \\brief               This function retrieves the cipher-information\n *                      structure associated with the given cipher ID,\n *                      key size and mode.\n *\n * \\param cipher_id     The ID of the cipher to search for. For example,\n *                      #MBEDTLS_CIPHER_ID_AES.\n * \\param key_bitlen    The length of the key in bits.\n * \\param mode          The cipher mode. For example, #MBEDTLS_MODE_CBC.\n *\n * \\return              The cipher information structure associated with the\n *                      given \\p cipher_id.\n * \\return              NULL if the associated cipher information is not found.\n */\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,\n                                              int key_bitlen,\n                                              const mbedtls_cipher_mode_t mode );\n\n/**\n * \\brief               This function initializes a \\p cipher_context as NONE.\n */\nvoid mbedtls_cipher_init( mbedtls_cipher_context_t *ctx );\n\n/**\n * \\brief               This function frees and clears the cipher-specific\n *                      context of \\p ctx. Freeing \\p ctx itself remains the\n *                      responsibility of the caller.\n */\nvoid mbedtls_cipher_free( mbedtls_cipher_context_t *ctx );\n\n\n/**\n * \\brief               This function initializes and fills the cipher-context\n *                      structure with the appropriate values. It also clears\n *                      the structure.\n *\n * \\param ctx           The context to initialize. May not be NULL.\n * \\param cipher_info   The cipher to use.\n *\n * \\return              \\c 0 on success.\n * \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                      parameter-verification failure.\n * \\return              #MBEDTLS_ERR_CIPHER_ALLOC_FAILED if allocation of the\n *                      cipher-specific context fails.\n *\n * \\internal Currently, the function also clears the structure.\n * In future versions, the caller will be required to call\n * mbedtls_cipher_init() on the structure first.\n */\nint mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info );\n\n/**\n * \\brief        This function returns the block size of the given cipher.\n *\n * \\param ctx    The context of the cipher. Must be initialized.\n *\n * \\return       The size of the blocks of the cipher.\n * \\return       0 if \\p ctx has not been initialized.\n */\nstatic inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return 0;\n\n    return ctx->cipher_info->block_size;\n}\n\n/**\n * \\brief        This function returns the mode of operation for\n *               the cipher. For example, MBEDTLS_MODE_CBC.\n *\n * \\param ctx    The context of the cipher. Must be initialized.\n *\n * \\return       The mode of operation.\n * \\return       #MBEDTLS_MODE_NONE if \\p ctx has not been initialized.\n */\nstatic inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return MBEDTLS_MODE_NONE;\n\n    return ctx->cipher_info->mode;\n}\n\n/**\n * \\brief       This function returns the size of the IV or nonce\n *              of the cipher, in Bytes.\n *\n * \\param ctx   The context of the cipher. Must be initialized.\n *\n * \\return      The recommended IV size if no IV has been set.\n * \\return      \\c 0 for ciphers not using an IV or a nonce.\n * \\return      The actual size if an IV has been set.\n */\nstatic inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return 0;\n\n    if( ctx->iv_size != 0 )\n        return (int) ctx->iv_size;\n\n    return (int) ctx->cipher_info->iv_size;\n}\n\n/**\n * \\brief               This function returns the type of the given cipher.\n *\n * \\param ctx           The context of the cipher. Must be initialized.\n *\n * \\return              The type of the cipher.\n * \\return              #MBEDTLS_CIPHER_NONE if \\p ctx has not been initialized.\n */\nstatic inline mbedtls_cipher_type_t mbedtls_cipher_get_type( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return MBEDTLS_CIPHER_NONE;\n\n    return ctx->cipher_info->type;\n}\n\n/**\n * \\brief               This function returns the name of the given cipher\n *                      as a string.\n *\n * \\param ctx           The context of the cipher. Must be initialized.\n *\n * \\return              The name of the cipher.\n * \\return              NULL if \\p ctx has not been not initialized.\n */\nstatic inline const char *mbedtls_cipher_get_name( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return 0;\n\n    return ctx->cipher_info->name;\n}\n\n/**\n * \\brief               This function returns the key length of the cipher.\n *\n * \\param ctx           The context of the cipher. Must be initialized.\n *\n * \\return              The key length of the cipher in bits.\n * \\return              #MBEDTLS_KEY_LENGTH_NONE if ctx \\p has not been\n *                      initialized.\n */\nstatic inline int mbedtls_cipher_get_key_bitlen( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return MBEDTLS_KEY_LENGTH_NONE;\n\n    return (int) ctx->cipher_info->key_bitlen;\n}\n\n/**\n * \\brief          This function returns the operation of the given cipher.\n *\n * \\param ctx      The context of the cipher. Must be initialized.\n *\n * \\return         The type of operation: #MBEDTLS_ENCRYPT or #MBEDTLS_DECRYPT.\n * \\return         #MBEDTLS_OPERATION_NONE if \\p ctx has not been initialized.\n */\nstatic inline mbedtls_operation_t mbedtls_cipher_get_operation( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return MBEDTLS_OPERATION_NONE;\n\n    return ctx->operation;\n}\n\n/**\n * \\brief               This function sets the key to use with the given context.\n *\n * \\param ctx           The generic cipher context. May not be NULL. Must have\n *                      been initialized using mbedtls_cipher_info_from_type()\n *                      or mbedtls_cipher_info_from_string().\n * \\param key           The key to use.\n * \\param key_bitlen    The key length to use, in bits.\n * \\param operation     The operation that the key will be used for:\n *                      #MBEDTLS_ENCRYPT or #MBEDTLS_DECRYPT.\n *\n * \\return              \\c 0 on success.\n * \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                      parameter-verification failure.\n * \\return              A cipher-specific error code on failure.\n */\nint mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,\n                   int key_bitlen, const mbedtls_operation_t operation );\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\n/**\n * \\brief               This function sets the padding mode, for cipher modes\n *                      that use padding.\n *\n *                      The default passing mode is PKCS7 padding.\n *\n * \\param ctx           The generic cipher context.\n * \\param mode          The padding mode.\n *\n * \\return              \\c 0 on success.\n * \\return              #MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE\n *                      if the selected padding mode is not supported.\n * \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA if the cipher mode\n *                      does not support padding.\n */\nint mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode );\n#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */\n\n/**\n * \\brief           This function sets the initialization vector (IV)\n *                  or nonce.\n *\n * \\note            Some ciphers do not use IVs nor nonce. For these\n *                  ciphers, this function has no effect.\n *\n * \\param ctx       The generic cipher context.\n * \\param iv        The IV to use, or NONCE_COUNTER for CTR-mode ciphers.\n * \\param iv_len    The IV length for ciphers with variable-size IV.\n *                  This parameter is discarded by ciphers with fixed-size IV.\n *\n * \\return          \\c 0 on success.\n * \\return          #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                  parameter-verification failure.\n */\nint mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,\n                   const unsigned char *iv, size_t iv_len );\n\n/**\n * \\brief         This function resets the cipher state.\n *\n * \\param ctx     The generic cipher context.\n *\n * \\return        \\c 0 on success.\n * \\return        #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                parameter-verification failure.\n */\nint mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx );\n\n#if defined(MBEDTLS_GCM_C)\n/**\n * \\brief               This function adds additional data for AEAD ciphers.\n *                      Only supported with GCM. Must be called\n *                      exactly once, after mbedtls_cipher_reset().\n *\n * \\param ctx           The generic cipher context.\n * \\param ad            The additional data to use.\n * \\param ad_len        the Length of \\p ad.\n *\n * \\return              \\c 0 on success.\n * \\return              A specific error code on failure.\n */\nint mbedtls_cipher_update_ad( mbedtls_cipher_context_t *ctx,\n                      const unsigned char *ad, size_t ad_len );\n#endif /* MBEDTLS_GCM_C */\n\n/**\n * \\brief               The generic cipher update function. It encrypts or\n *                      decrypts using the given cipher context. Writes as\n *                      many block-sized blocks of data as possible to output.\n *                      Any data that cannot be written immediately is either\n *                      added to the next block, or flushed when\n *                      mbedtls_cipher_finish() is called.\n *                      Exception: For MBEDTLS_MODE_ECB, expects a single block\n *                      in size. For example, 16 Bytes for AES.\n *\n * \\note                If the underlying cipher is used in GCM mode, all calls\n *                      to this function, except for the last one before\n *                      mbedtls_cipher_finish(), must have \\p ilen as a\n *                      multiple of the block size of the cipher.\n *\n * \\param ctx           The generic cipher context.\n * \\param input         The buffer holding the input data.\n * \\param ilen          The length of the input data.\n * \\param output        The buffer for the output data. Must be able to hold at\n *                      least \\p ilen + block_size. Must not be the same buffer\n *                      as input.\n * \\param olen          The length of the output data, to be updated with the\n *                      actual number of Bytes written.\n *\n * \\return              \\c 0 on success.\n * \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                      parameter-verification failure.\n * \\return              #MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE on an\n *                      unsupported mode for a cipher.\n * \\return              A cipher-specific error code on failure.\n */\nint mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,\n                   size_t ilen, unsigned char *output, size_t *olen );\n\n/**\n * \\brief               The generic cipher finalization function. If data still\n *                      needs to be flushed from an incomplete block, the data\n *                      contained in it is padded to the size of\n *                      the last block, and written to the \\p output buffer.\n *\n * \\param ctx           The generic cipher context.\n * \\param output        The buffer to write data to. Needs block_size available.\n * \\param olen          The length of the data written to the \\p output buffer.\n *\n * \\return              \\c 0 on success.\n * \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                      parameter-verification failure.\n * \\return              #MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED on decryption\n *                      expecting a full block but not receiving one.\n * \\return              #MBEDTLS_ERR_CIPHER_INVALID_PADDING on invalid padding\n *                      while decrypting.\n * \\return              A cipher-specific error code on failure.\n */\nint mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,\n                   unsigned char *output, size_t *olen );\n\n#if defined(MBEDTLS_GCM_C)\n/**\n * \\brief               This function writes a tag for AEAD ciphers.\n *                      Only supported with GCM.\n *                      Must be called after mbedtls_cipher_finish().\n *\n * \\param ctx           The generic cipher context.\n * \\param tag           The buffer to write the tag to.\n * \\param tag_len       The length of the tag to write.\n *\n * \\return              \\c 0 on success.\n * \\return              A specific error code on failure.\n */\nint mbedtls_cipher_write_tag( mbedtls_cipher_context_t *ctx,\n                      unsigned char *tag, size_t tag_len );\n\n/**\n * \\brief               This function checks the tag for AEAD ciphers.\n *                      Only supported with GCM.\n *                      Must be called after mbedtls_cipher_finish().\n *\n * \\param ctx           The generic cipher context.\n * \\param tag           The buffer holding the tag.\n * \\param tag_len       The length of the tag to check.\n *\n * \\return              \\c 0 on success.\n * \\return              A specific error code on failure.\n */\nint mbedtls_cipher_check_tag( mbedtls_cipher_context_t *ctx,\n                      const unsigned char *tag, size_t tag_len );\n#endif /* MBEDTLS_GCM_C */\n\n/**\n * \\brief               The generic all-in-one encryption/decryption function,\n *                      for all ciphers except AEAD constructs.\n *\n * \\param ctx           The generic cipher context.\n * \\param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.\n * \\param iv_len        The IV length for ciphers with variable-size IV.\n *                      This parameter is discarded by ciphers with fixed-size\n *                      IV.\n * \\param input         The buffer holding the input data.\n * \\param ilen          The length of the input data.\n * \\param output        The buffer for the output data. Must be able to hold at\n *                      least \\p ilen + block_size. Must not be the same buffer\n *                      as input.\n * \\param olen          The length of the output data, to be updated with the\n *                      actual number of Bytes written.\n *\n * \\note                Some ciphers do not use IVs nor nonce. For these\n *                      ciphers, use \\p iv = NULL and \\p iv_len = 0.\n *\n * \\return              \\c 0 on success.\n * \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                      parameter-verification failure.\n * \\return              #MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED on decryption\n *                      expecting a full block but not receiving one.\n * \\return              #MBEDTLS_ERR_CIPHER_INVALID_PADDING on invalid padding\n *                      while decrypting.\n * \\return              A cipher-specific error code on failure.\n */\nint mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,\n                  const unsigned char *iv, size_t iv_len,\n                  const unsigned char *input, size_t ilen,\n                  unsigned char *output, size_t *olen );\n\n#if defined(MBEDTLS_CIPHER_MODE_AEAD)\n/**\n * \\brief               The generic autenticated encryption (AEAD) function.\n *\n * \\param ctx           The generic cipher context.\n * \\param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.\n * \\param iv_len        The IV length for ciphers with variable-size IV.\n *                      This parameter is discarded by ciphers with fixed-size IV.\n * \\param ad            The additional data to authenticate.\n * \\param ad_len        The length of \\p ad.\n * \\param input         The buffer holding the input data.\n * \\param ilen          The length of the input data.\n * \\param output        The buffer for the output data.\n *                      Must be able to hold at least \\p ilen.\n * \\param olen          The length of the output data, to be updated with the\n *                      actual number of Bytes written.\n * \\param tag           The buffer for the authentication tag.\n * \\param tag_len       The desired length of the authentication tag.\n *\n * \\return              \\c 0 on success.\n * \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                      parameter-verification failure.\n * \\return              A cipher-specific error code on failure.\n */\nint mbedtls_cipher_auth_encrypt( mbedtls_cipher_context_t *ctx,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *ad, size_t ad_len,\n                         const unsigned char *input, size_t ilen,\n                         unsigned char *output, size_t *olen,\n                         unsigned char *tag, size_t tag_len );\n\n/**\n * \\brief               The generic autenticated decryption (AEAD) function.\n *\n * \\note                If the data is not authentic, then the output buffer\n *                      is zeroed out to prevent the unauthentic plaintext being\n *                      used, making this interface safer.\n *\n * \\param ctx           The generic cipher context.\n * \\param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.\n * \\param iv_len        The IV length for ciphers with variable-size IV.\n *                      This parameter is discarded by ciphers with fixed-size IV.\n * \\param ad            The additional data to be authenticated.\n * \\param ad_len        The length of \\p ad.\n * \\param input         The buffer holding the input data.\n * \\param ilen          The length of the input data.\n * \\param output        The buffer for the output data.\n *                      Must be able to hold at least \\p ilen.\n * \\param olen          The length of the output data, to be updated with the\n *                      actual number of Bytes written.\n * \\param tag           The buffer holding the authentication tag.\n * \\param tag_len       The length of the authentication tag.\n *\n * \\return              \\c 0 on success.\n * \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on\n *                      parameter-verification failure.\n * \\return              #MBEDTLS_ERR_CIPHER_AUTH_FAILED if data is not authentic.\n * \\return              A cipher-specific error code on failure.\n */\nint mbedtls_cipher_auth_decrypt( mbedtls_cipher_context_t *ctx,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *ad, size_t ad_len,\n                         const unsigned char *input, size_t ilen,\n                         unsigned char *output, size_t *olen,\n                         const unsigned char *tag, size_t tag_len );\n#endif /* MBEDTLS_CIPHER_MODE_AEAD */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* MBEDTLS_CIPHER_H */\n","/**\n * \\file cipher_wrap.c\n *\n * \\brief Generic cipher wrapper for mbed TLS\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_CIPHER_C)\n\n#include \"mbedtls/cipher_internal.h\"\n\n#if defined(MBEDTLS_AES_C)\n#include \"mbedtls/aes.h\"\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n#include \"mbedtls/arc4.h\"\n#endif\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#include \"mbedtls/camellia.h\"\n#endif\n\n#if defined(MBEDTLS_ARIA_C)\n#include \"mbedtls/aria.h\"\n#endif\n\n#if defined(MBEDTLS_DES_C)\n#include \"mbedtls/des.h\"\n#endif\n\n#if defined(MBEDTLS_BLOWFISH_C)\n#include \"mbedtls/blowfish.h\"\n#endif\n\n#if defined(MBEDTLS_GCM_C)\n#include \"mbedtls/gcm.h\"\n#endif\n\n#if defined(MBEDTLS_CCM_C)\n#include \"mbedtls/ccm.h\"\n#endif\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#include <string.h>\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#if defined(MBEDTLS_GCM_C)\n/* shared by all GCM ciphers */\nstatic void *gcm_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );\n\n    if( ctx != NULL )\n        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void gcm_ctx_free( void *ctx )\n{\n    mbedtls_gcm_free( ctx );\n    mbedtls_free( ctx );\n}\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CCM_C)\n/* shared by all CCM ciphers */\nstatic void *ccm_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );\n\n    if( ctx != NULL )\n        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void ccm_ctx_free( void *ctx )\n{\n    mbedtls_ccm_free( ctx );\n    mbedtls_free( ctx );\n}\n#endif /* MBEDTLS_CCM_C */\n\n#if defined(MBEDTLS_AES_C)\n\nstatic int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,\n        unsigned char *iv, const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,\n                          output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic int aes_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, size_t *iv_off, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aes_crypt_cfb128( (mbedtls_aes_context *) ctx, operation, length, iv_off, iv,\n                             input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic int aes_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,\n        unsigned char *nonce_counter, unsigned char *stream_block,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aes_crypt_ctr( (mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,\n                          stream_block, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\nstatic int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );\n}\n\nstatic int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );\n}\n\nstatic void * aes_ctx_alloc( void )\n{\n    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );\n\n    if( aes == NULL )\n        return( NULL );\n\n    mbedtls_aes_init( aes );\n\n    return( aes );\n}\n\nstatic void aes_ctx_free( void *ctx )\n{\n    mbedtls_aes_free( (mbedtls_aes_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t aes_info = {\n    MBEDTLS_CIPHER_ID_AES,\n    aes_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    aes_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    aes_crypt_cfb128_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    aes_crypt_ctr_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    aes_setkey_enc_wrap,\n    aes_setkey_dec_wrap,\n    aes_ctx_alloc,\n    aes_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t aes_128_ecb_info = {\n    MBEDTLS_CIPHER_AES_128_ECB,\n    MBEDTLS_MODE_ECB,\n    128,\n    \"AES-128-ECB\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_ecb_info = {\n    MBEDTLS_CIPHER_AES_192_ECB,\n    MBEDTLS_MODE_ECB,\n    192,\n    \"AES-192-ECB\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_ecb_info = {\n    MBEDTLS_CIPHER_AES_256_ECB,\n    MBEDTLS_MODE_ECB,\n    256,\n    \"AES-256-ECB\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t aes_128_cbc_info = {\n    MBEDTLS_CIPHER_AES_128_CBC,\n    MBEDTLS_MODE_CBC,\n    128,\n    \"AES-128-CBC\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_cbc_info = {\n    MBEDTLS_CIPHER_AES_192_CBC,\n    MBEDTLS_MODE_CBC,\n    192,\n    \"AES-192-CBC\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_cbc_info = {\n    MBEDTLS_CIPHER_AES_256_CBC,\n    MBEDTLS_MODE_CBC,\n    256,\n    \"AES-256-CBC\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic const mbedtls_cipher_info_t aes_128_cfb128_info = {\n    MBEDTLS_CIPHER_AES_128_CFB128,\n    MBEDTLS_MODE_CFB,\n    128,\n    \"AES-128-CFB128\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_cfb128_info = {\n    MBEDTLS_CIPHER_AES_192_CFB128,\n    MBEDTLS_MODE_CFB,\n    192,\n    \"AES-192-CFB128\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_cfb128_info = {\n    MBEDTLS_CIPHER_AES_256_CFB128,\n    MBEDTLS_MODE_CFB,\n    256,\n    \"AES-256-CFB128\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic const mbedtls_cipher_info_t aes_128_ctr_info = {\n    MBEDTLS_CIPHER_AES_128_CTR,\n    MBEDTLS_MODE_CTR,\n    128,\n    \"AES-128-CTR\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_ctr_info = {\n    MBEDTLS_CIPHER_AES_192_CTR,\n    MBEDTLS_MODE_CTR,\n    192,\n    \"AES-192-CTR\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_ctr_info = {\n    MBEDTLS_CIPHER_AES_256_CTR,\n    MBEDTLS_MODE_CTR,\n    256,\n    \"AES-256-CTR\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#if defined(MBEDTLS_GCM_C)\nstatic int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t gcm_aes_info = {\n    MBEDTLS_CIPHER_ID_AES,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    gcm_aes_setkey_wrap,\n    gcm_aes_setkey_wrap,\n    gcm_ctx_alloc,\n    gcm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t aes_128_gcm_info = {\n    MBEDTLS_CIPHER_AES_128_GCM,\n    MBEDTLS_MODE_GCM,\n    128,\n    \"AES-128-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_gcm_info = {\n    MBEDTLS_CIPHER_AES_192_GCM,\n    MBEDTLS_MODE_GCM,\n    192,\n    \"AES-192-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_gcm_info = {\n    MBEDTLS_CIPHER_AES_256_GCM,\n    MBEDTLS_MODE_GCM,\n    256,\n    \"AES-256-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aes_info\n};\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CCM_C)\nstatic int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t ccm_aes_info = {\n    MBEDTLS_CIPHER_ID_AES,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    ccm_aes_setkey_wrap,\n    ccm_aes_setkey_wrap,\n    ccm_ctx_alloc,\n    ccm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t aes_128_ccm_info = {\n    MBEDTLS_CIPHER_AES_128_CCM,\n    MBEDTLS_MODE_CCM,\n    128,\n    \"AES-128-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_ccm_info = {\n    MBEDTLS_CIPHER_AES_192_CCM,\n    MBEDTLS_MODE_CCM,\n    192,\n    \"AES-192-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_ccm_info = {\n    MBEDTLS_CIPHER_AES_256_CCM,\n    MBEDTLS_MODE_CCM,\n    256,\n    \"AES-256-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aes_info\n};\n#endif /* MBEDTLS_CCM_C */\n\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n\nstatic int camellia_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,\n                               output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int camellia_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,\n                               input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic int camellia_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, size_t *iv_off, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_camellia_crypt_cfb128( (mbedtls_camellia_context *) ctx, operation, length,\n                                  iv_off, iv, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic int camellia_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,\n        unsigned char *nonce_counter, unsigned char *stream_block,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_camellia_crypt_ctr( (mbedtls_camellia_context *) ctx, length, nc_off,\n                               nonce_counter, stream_block, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\nstatic int camellia_setkey_dec_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );\n}\n\nstatic int camellia_setkey_enc_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );\n}\n\nstatic void * camellia_ctx_alloc( void )\n{\n    mbedtls_camellia_context *ctx;\n    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );\n\n    if( ctx == NULL )\n        return( NULL );\n\n    mbedtls_camellia_init( ctx );\n\n    return( ctx );\n}\n\nstatic void camellia_ctx_free( void *ctx )\n{\n    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t camellia_info = {\n    MBEDTLS_CIPHER_ID_CAMELLIA,\n    camellia_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    camellia_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    camellia_crypt_cfb128_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    camellia_crypt_ctr_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    camellia_setkey_enc_wrap,\n    camellia_setkey_dec_wrap,\n    camellia_ctx_alloc,\n    camellia_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t camellia_128_ecb_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_ECB,\n    MBEDTLS_MODE_ECB,\n    128,\n    \"CAMELLIA-128-ECB\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_ecb_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_ECB,\n    MBEDTLS_MODE_ECB,\n    192,\n    \"CAMELLIA-192-ECB\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_ecb_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_ECB,\n    MBEDTLS_MODE_ECB,\n    256,\n    \"CAMELLIA-256-ECB\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t camellia_128_cbc_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_CBC,\n    MBEDTLS_MODE_CBC,\n    128,\n    \"CAMELLIA-128-CBC\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_cbc_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_CBC,\n    MBEDTLS_MODE_CBC,\n    192,\n    \"CAMELLIA-192-CBC\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_cbc_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_CBC,\n    MBEDTLS_MODE_CBC,\n    256,\n    \"CAMELLIA-256-CBC\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic const mbedtls_cipher_info_t camellia_128_cfb128_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_CFB128,\n    MBEDTLS_MODE_CFB,\n    128,\n    \"CAMELLIA-128-CFB128\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_cfb128_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_CFB128,\n    MBEDTLS_MODE_CFB,\n    192,\n    \"CAMELLIA-192-CFB128\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_cfb128_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_CFB128,\n    MBEDTLS_MODE_CFB,\n    256,\n    \"CAMELLIA-256-CFB128\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic const mbedtls_cipher_info_t camellia_128_ctr_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_CTR,\n    MBEDTLS_MODE_CTR,\n    128,\n    \"CAMELLIA-128-CTR\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_ctr_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_CTR,\n    MBEDTLS_MODE_CTR,\n    192,\n    \"CAMELLIA-192-CTR\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_ctr_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_CTR,\n    MBEDTLS_MODE_CTR,\n    256,\n    \"CAMELLIA-256-CTR\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#if defined(MBEDTLS_GCM_C)\nstatic int gcm_camellia_setkey_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t gcm_camellia_info = {\n    MBEDTLS_CIPHER_ID_CAMELLIA,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    gcm_camellia_setkey_wrap,\n    gcm_camellia_setkey_wrap,\n    gcm_ctx_alloc,\n    gcm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t camellia_128_gcm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_GCM,\n    MBEDTLS_MODE_GCM,\n    128,\n    \"CAMELLIA-128-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_gcm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_GCM,\n    MBEDTLS_MODE_GCM,\n    192,\n    \"CAMELLIA-192-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_gcm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_GCM,\n    MBEDTLS_MODE_GCM,\n    256,\n    \"CAMELLIA-256-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_camellia_info\n};\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CCM_C)\nstatic int ccm_camellia_setkey_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t ccm_camellia_info = {\n    MBEDTLS_CIPHER_ID_CAMELLIA,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    ccm_camellia_setkey_wrap,\n    ccm_camellia_setkey_wrap,\n    ccm_ctx_alloc,\n    ccm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t camellia_128_ccm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_CCM,\n    MBEDTLS_MODE_CCM,\n    128,\n    \"CAMELLIA-128-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_ccm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_CCM,\n    MBEDTLS_MODE_CCM,\n    192,\n    \"CAMELLIA-192-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_ccm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_CCM,\n    MBEDTLS_MODE_CCM,\n    256,\n    \"CAMELLIA-256-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_camellia_info\n};\n#endif /* MBEDTLS_CCM_C */\n\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_ARIA_C)\n\nstatic int aria_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    (void) operation;\n    return mbedtls_aria_crypt_ecb( (mbedtls_aria_context *) ctx, input,\n                               output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int aria_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aria_crypt_cbc( (mbedtls_aria_context *) ctx, operation, length, iv,\n                               input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic int aria_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, size_t *iv_off, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aria_crypt_cfb128( (mbedtls_aria_context *) ctx, operation, length,\n                                  iv_off, iv, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic int aria_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,\n        unsigned char *nonce_counter, unsigned char *stream_block,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aria_crypt_ctr( (mbedtls_aria_context *) ctx, length, nc_off,\n                               nonce_counter, stream_block, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\nstatic int aria_setkey_dec_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_aria_setkey_dec( (mbedtls_aria_context *) ctx, key, key_bitlen );\n}\n\nstatic int aria_setkey_enc_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_aria_setkey_enc( (mbedtls_aria_context *) ctx, key, key_bitlen );\n}\n\nstatic void * aria_ctx_alloc( void )\n{\n    mbedtls_aria_context *ctx;\n    ctx = mbedtls_calloc( 1, sizeof( mbedtls_aria_context ) );\n\n    if( ctx == NULL )\n        return( NULL );\n\n    mbedtls_aria_init( ctx );\n\n    return( ctx );\n}\n\nstatic void aria_ctx_free( void *ctx )\n{\n    mbedtls_aria_free( (mbedtls_aria_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t aria_info = {\n    MBEDTLS_CIPHER_ID_ARIA,\n    aria_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    aria_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    aria_crypt_cfb128_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    aria_crypt_ctr_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    aria_setkey_enc_wrap,\n    aria_setkey_dec_wrap,\n    aria_ctx_alloc,\n    aria_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t aria_128_ecb_info = {\n    MBEDTLS_CIPHER_ARIA_128_ECB,\n    MBEDTLS_MODE_ECB,\n    128,\n    \"ARIA-128-ECB\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_192_ecb_info = {\n    MBEDTLS_CIPHER_ARIA_192_ECB,\n    MBEDTLS_MODE_ECB,\n    192,\n    \"ARIA-192-ECB\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_256_ecb_info = {\n    MBEDTLS_CIPHER_ARIA_256_ECB,\n    MBEDTLS_MODE_ECB,\n    256,\n    \"ARIA-256-ECB\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t aria_128_cbc_info = {\n    MBEDTLS_CIPHER_ARIA_128_CBC,\n    MBEDTLS_MODE_CBC,\n    128,\n    \"ARIA-128-CBC\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_192_cbc_info = {\n    MBEDTLS_CIPHER_ARIA_192_CBC,\n    MBEDTLS_MODE_CBC,\n    192,\n    \"ARIA-192-CBC\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_256_cbc_info = {\n    MBEDTLS_CIPHER_ARIA_256_CBC,\n    MBEDTLS_MODE_CBC,\n    256,\n    \"ARIA-256-CBC\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic const mbedtls_cipher_info_t aria_128_cfb128_info = {\n    MBEDTLS_CIPHER_ARIA_128_CFB128,\n    MBEDTLS_MODE_CFB,\n    128,\n    \"ARIA-128-CFB128\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_192_cfb128_info = {\n    MBEDTLS_CIPHER_ARIA_192_CFB128,\n    MBEDTLS_MODE_CFB,\n    192,\n    \"ARIA-192-CFB128\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_256_cfb128_info = {\n    MBEDTLS_CIPHER_ARIA_256_CFB128,\n    MBEDTLS_MODE_CFB,\n    256,\n    \"ARIA-256-CFB128\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic const mbedtls_cipher_info_t aria_128_ctr_info = {\n    MBEDTLS_CIPHER_ARIA_128_CTR,\n    MBEDTLS_MODE_CTR,\n    128,\n    \"ARIA-128-CTR\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_192_ctr_info = {\n    MBEDTLS_CIPHER_ARIA_192_CTR,\n    MBEDTLS_MODE_CTR,\n    192,\n    \"ARIA-192-CTR\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_256_ctr_info = {\n    MBEDTLS_CIPHER_ARIA_256_CTR,\n    MBEDTLS_MODE_CTR,\n    256,\n    \"ARIA-256-CTR\",\n    16,\n    0,\n    16,\n    &aria_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#if defined(MBEDTLS_GCM_C)\nstatic int gcm_aria_setkey_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t gcm_aria_info = {\n    MBEDTLS_CIPHER_ID_ARIA,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    gcm_aria_setkey_wrap,\n    gcm_aria_setkey_wrap,\n    gcm_ctx_alloc,\n    gcm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t aria_128_gcm_info = {\n    MBEDTLS_CIPHER_ARIA_128_GCM,\n    MBEDTLS_MODE_GCM,\n    128,\n    \"ARIA-128-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_192_gcm_info = {\n    MBEDTLS_CIPHER_ARIA_192_GCM,\n    MBEDTLS_MODE_GCM,\n    192,\n    \"ARIA-192-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_256_gcm_info = {\n    MBEDTLS_CIPHER_ARIA_256_GCM,\n    MBEDTLS_MODE_GCM,\n    256,\n    \"ARIA-256-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aria_info\n};\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CCM_C)\nstatic int ccm_aria_setkey_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t ccm_aria_info = {\n    MBEDTLS_CIPHER_ID_ARIA,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    ccm_aria_setkey_wrap,\n    ccm_aria_setkey_wrap,\n    ccm_ctx_alloc,\n    ccm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t aria_128_ccm_info = {\n    MBEDTLS_CIPHER_ARIA_128_CCM,\n    MBEDTLS_MODE_CCM,\n    128,\n    \"ARIA-128-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_192_ccm_info = {\n    MBEDTLS_CIPHER_ARIA_192_CCM,\n    MBEDTLS_MODE_CCM,\n    192,\n    \"ARIA-192-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aria_info\n};\n\nstatic const mbedtls_cipher_info_t aria_256_ccm_info = {\n    MBEDTLS_CIPHER_ARIA_256_CCM,\n    MBEDTLS_MODE_CCM,\n    256,\n    \"ARIA-256-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aria_info\n};\n#endif /* MBEDTLS_CCM_C */\n\n#endif /* MBEDTLS_ARIA_C */\n\n#if defined(MBEDTLS_DES_C)\n\nstatic int des_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    ((void) operation);\n    return mbedtls_des_crypt_ecb( (mbedtls_des_context *) ctx, input, output );\n}\n\nstatic int des3_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    ((void) operation);\n    return mbedtls_des3_crypt_ecb( (mbedtls_des3_context *) ctx, input, output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int des_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,\n        unsigned char *iv, const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_des_crypt_cbc( (mbedtls_des_context *) ctx, operation, length, iv, input,\n                          output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int des3_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,\n        unsigned char *iv, const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_des3_crypt_cbc( (mbedtls_des3_context *) ctx, operation, length, iv, input,\n                           output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\nstatic int des_setkey_dec_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des_setkey_dec( (mbedtls_des_context *) ctx, key );\n}\n\nstatic int des_setkey_enc_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des_setkey_enc( (mbedtls_des_context *) ctx, key );\n}\n\nstatic int des3_set2key_dec_wrap( void *ctx, const unsigned char *key,\n                                  unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des3_set2key_dec( (mbedtls_des3_context *) ctx, key );\n}\n\nstatic int des3_set2key_enc_wrap( void *ctx, const unsigned char *key,\n                                  unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des3_set2key_enc( (mbedtls_des3_context *) ctx, key );\n}\n\nstatic int des3_set3key_dec_wrap( void *ctx, const unsigned char *key,\n                                  unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des3_set3key_dec( (mbedtls_des3_context *) ctx, key );\n}\n\nstatic int des3_set3key_enc_wrap( void *ctx, const unsigned char *key,\n                                  unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des3_set3key_enc( (mbedtls_des3_context *) ctx, key );\n}\n\nstatic void * des_ctx_alloc( void )\n{\n    mbedtls_des_context *des = mbedtls_calloc( 1, sizeof( mbedtls_des_context ) );\n\n    if( des == NULL )\n        return( NULL );\n\n    mbedtls_des_init( des );\n\n    return( des );\n}\n\nstatic void des_ctx_free( void *ctx )\n{\n    mbedtls_des_free( (mbedtls_des_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void * des3_ctx_alloc( void )\n{\n    mbedtls_des3_context *des3;\n    des3 = mbedtls_calloc( 1, sizeof( mbedtls_des3_context ) );\n\n    if( des3 == NULL )\n        return( NULL );\n\n    mbedtls_des3_init( des3 );\n\n    return( des3 );\n}\n\nstatic void des3_ctx_free( void *ctx )\n{\n    mbedtls_des3_free( (mbedtls_des3_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t des_info = {\n    MBEDTLS_CIPHER_ID_DES,\n    des_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    des_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    des_setkey_enc_wrap,\n    des_setkey_dec_wrap,\n    des_ctx_alloc,\n    des_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t des_ecb_info = {\n    MBEDTLS_CIPHER_DES_ECB,\n    MBEDTLS_MODE_ECB,\n    MBEDTLS_KEY_LENGTH_DES,\n    \"DES-ECB\",\n    8,\n    0,\n    8,\n    &des_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t des_cbc_info = {\n    MBEDTLS_CIPHER_DES_CBC,\n    MBEDTLS_MODE_CBC,\n    MBEDTLS_KEY_LENGTH_DES,\n    \"DES-CBC\",\n    8,\n    0,\n    8,\n    &des_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\nstatic const mbedtls_cipher_base_t des_ede_info = {\n    MBEDTLS_CIPHER_ID_DES,\n    des3_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    des3_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    des3_set2key_enc_wrap,\n    des3_set2key_dec_wrap,\n    des3_ctx_alloc,\n    des3_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t des_ede_ecb_info = {\n    MBEDTLS_CIPHER_DES_EDE_ECB,\n    MBEDTLS_MODE_ECB,\n    MBEDTLS_KEY_LENGTH_DES_EDE,\n    \"DES-EDE-ECB\",\n    8,\n    0,\n    8,\n    &des_ede_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t des_ede_cbc_info = {\n    MBEDTLS_CIPHER_DES_EDE_CBC,\n    MBEDTLS_MODE_CBC,\n    MBEDTLS_KEY_LENGTH_DES_EDE,\n    \"DES-EDE-CBC\",\n    8,\n    0,\n    8,\n    &des_ede_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\nstatic const mbedtls_cipher_base_t des_ede3_info = {\n    MBEDTLS_CIPHER_ID_3DES,\n    des3_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    des3_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    des3_set3key_enc_wrap,\n    des3_set3key_dec_wrap,\n    des3_ctx_alloc,\n    des3_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t des_ede3_ecb_info = {\n    MBEDTLS_CIPHER_DES_EDE3_ECB,\n    MBEDTLS_MODE_ECB,\n    MBEDTLS_KEY_LENGTH_DES_EDE3,\n    \"DES-EDE3-ECB\",\n    8,\n    0,\n    8,\n    &des_ede3_info\n};\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t des_ede3_cbc_info = {\n    MBEDTLS_CIPHER_DES_EDE3_CBC,\n    MBEDTLS_MODE_CBC,\n    MBEDTLS_KEY_LENGTH_DES_EDE3,\n    \"DES-EDE3-CBC\",\n    8,\n    0,\n    8,\n    &des_ede3_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_BLOWFISH_C)\n\nstatic int blowfish_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_blowfish_crypt_ecb( (mbedtls_blowfish_context *) ctx, operation, input,\n                               output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int blowfish_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, unsigned char *iv, const unsigned char *input,\n        unsigned char *output )\n{\n    return mbedtls_blowfish_crypt_cbc( (mbedtls_blowfish_context *) ctx, operation, length, iv,\n                               input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic int blowfish_crypt_cfb64_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, size_t *iv_off, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_blowfish_crypt_cfb64( (mbedtls_blowfish_context *) ctx, operation, length,\n                                 iv_off, iv, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic int blowfish_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,\n        unsigned char *nonce_counter, unsigned char *stream_block,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_blowfish_crypt_ctr( (mbedtls_blowfish_context *) ctx, length, nc_off,\n                               nonce_counter, stream_block, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\nstatic int blowfish_setkey_wrap( void *ctx, const unsigned char *key,\n                                 unsigned int key_bitlen )\n{\n    return mbedtls_blowfish_setkey( (mbedtls_blowfish_context *) ctx, key, key_bitlen );\n}\n\nstatic void * blowfish_ctx_alloc( void )\n{\n    mbedtls_blowfish_context *ctx;\n    ctx = mbedtls_calloc( 1, sizeof( mbedtls_blowfish_context ) );\n\n    if( ctx == NULL )\n        return( NULL );\n\n    mbedtls_blowfish_init( ctx );\n\n    return( ctx );\n}\n\nstatic void blowfish_ctx_free( void *ctx )\n{\n    mbedtls_blowfish_free( (mbedtls_blowfish_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t blowfish_info = {\n    MBEDTLS_CIPHER_ID_BLOWFISH,\n    blowfish_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    blowfish_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    blowfish_crypt_cfb64_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    blowfish_crypt_ctr_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    blowfish_setkey_wrap,\n    blowfish_setkey_wrap,\n    blowfish_ctx_alloc,\n    blowfish_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t blowfish_ecb_info = {\n    MBEDTLS_CIPHER_BLOWFISH_ECB,\n    MBEDTLS_MODE_ECB,\n    128,\n    \"BLOWFISH-ECB\",\n    8,\n    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,\n    8,\n    &blowfish_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t blowfish_cbc_info = {\n    MBEDTLS_CIPHER_BLOWFISH_CBC,\n    MBEDTLS_MODE_CBC,\n    128,\n    \"BLOWFISH-CBC\",\n    8,\n    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,\n    8,\n    &blowfish_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic const mbedtls_cipher_info_t blowfish_cfb64_info = {\n    MBEDTLS_CIPHER_BLOWFISH_CFB64,\n    MBEDTLS_MODE_CFB,\n    128,\n    \"BLOWFISH-CFB64\",\n    8,\n    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,\n    8,\n    &blowfish_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic const mbedtls_cipher_info_t blowfish_ctr_info = {\n    MBEDTLS_CIPHER_BLOWFISH_CTR,\n    MBEDTLS_MODE_CTR,\n    128,\n    \"BLOWFISH-CTR\",\n    8,\n    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,\n    8,\n    &blowfish_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n#endif /* MBEDTLS_BLOWFISH_C */\n\n#if defined(MBEDTLS_ARC4_C)\nstatic int arc4_crypt_stream_wrap( void *ctx, size_t length,\n                                   const unsigned char *input,\n                                   unsigned char *output )\n{\n    return( mbedtls_arc4_crypt( (mbedtls_arc4_context *) ctx, length, input, output ) );\n}\n\nstatic int arc4_setkey_wrap( void *ctx, const unsigned char *key,\n                             unsigned int key_bitlen )\n{\n    /* we get key_bitlen in bits, arc4 expects it in bytes */\n    if( key_bitlen % 8 != 0 )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    mbedtls_arc4_setup( (mbedtls_arc4_context *) ctx, key, key_bitlen / 8 );\n    return( 0 );\n}\n\nstatic void * arc4_ctx_alloc( void )\n{\n    mbedtls_arc4_context *ctx;\n    ctx = mbedtls_calloc( 1, sizeof( mbedtls_arc4_context ) );\n\n    if( ctx == NULL )\n        return( NULL );\n\n    mbedtls_arc4_init( ctx );\n\n    return( ctx );\n}\n\nstatic void arc4_ctx_free( void *ctx )\n{\n    mbedtls_arc4_free( (mbedtls_arc4_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t arc4_base_info = {\n    MBEDTLS_CIPHER_ID_ARC4,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    arc4_crypt_stream_wrap,\n#endif\n    arc4_setkey_wrap,\n    arc4_setkey_wrap,\n    arc4_ctx_alloc,\n    arc4_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t arc4_128_info = {\n    MBEDTLS_CIPHER_ARC4_128,\n    MBEDTLS_MODE_STREAM,\n    128,\n    \"ARC4-128\",\n    0,\n    0,\n    1,\n    &arc4_base_info\n};\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\nstatic int null_crypt_stream( void *ctx, size_t length,\n                              const unsigned char *input,\n                              unsigned char *output )\n{\n    ((void) ctx);\n    memmove( output, input, length );\n    return( 0 );\n}\n\nstatic int null_setkey( void *ctx, const unsigned char *key,\n                        unsigned int key_bitlen )\n{\n    ((void) ctx);\n    ((void) key);\n    ((void) key_bitlen);\n\n    return( 0 );\n}\n\nstatic void * null_ctx_alloc( void )\n{\n    return( (void *) 1 );\n}\n\nstatic void null_ctx_free( void *ctx )\n{\n    ((void) ctx);\n}\n\nstatic const mbedtls_cipher_base_t null_base_info = {\n    MBEDTLS_CIPHER_ID_NULL,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    null_crypt_stream,\n#endif\n    null_setkey,\n    null_setkey,\n    null_ctx_alloc,\n    null_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t null_cipher_info = {\n    MBEDTLS_CIPHER_NULL,\n    MBEDTLS_MODE_STREAM,\n    0,\n    \"NULL\",\n    0,\n    0,\n    1,\n    &null_base_info\n};\n#endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */\n\nconst mbedtls_cipher_definition_t mbedtls_cipher_definitions[] =\n{\n#if defined(MBEDTLS_AES_C)\n    { MBEDTLS_CIPHER_AES_128_ECB,          &aes_128_ecb_info },\n    { MBEDTLS_CIPHER_AES_192_ECB,          &aes_192_ecb_info },\n    { MBEDTLS_CIPHER_AES_256_ECB,          &aes_256_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_AES_128_CBC,          &aes_128_cbc_info },\n    { MBEDTLS_CIPHER_AES_192_CBC,          &aes_192_cbc_info },\n    { MBEDTLS_CIPHER_AES_256_CBC,          &aes_256_cbc_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    { MBEDTLS_CIPHER_AES_128_CFB128,       &aes_128_cfb128_info },\n    { MBEDTLS_CIPHER_AES_192_CFB128,       &aes_192_cfb128_info },\n    { MBEDTLS_CIPHER_AES_256_CFB128,       &aes_256_cfb128_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    { MBEDTLS_CIPHER_AES_128_CTR,          &aes_128_ctr_info },\n    { MBEDTLS_CIPHER_AES_192_CTR,          &aes_192_ctr_info },\n    { MBEDTLS_CIPHER_AES_256_CTR,          &aes_256_ctr_info },\n#endif\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_CIPHER_AES_128_GCM,          &aes_128_gcm_info },\n    { MBEDTLS_CIPHER_AES_192_GCM,          &aes_192_gcm_info },\n    { MBEDTLS_CIPHER_AES_256_GCM,          &aes_256_gcm_info },\n#endif\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_CIPHER_AES_128_CCM,          &aes_128_ccm_info },\n    { MBEDTLS_CIPHER_AES_192_CCM,          &aes_192_ccm_info },\n    { MBEDTLS_CIPHER_AES_256_CCM,          &aes_256_ccm_info },\n#endif\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n    { MBEDTLS_CIPHER_ARC4_128,             &arc4_128_info },\n#endif\n\n#if defined(MBEDTLS_BLOWFISH_C)\n    { MBEDTLS_CIPHER_BLOWFISH_ECB,         &blowfish_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_BLOWFISH_CBC,         &blowfish_cbc_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    { MBEDTLS_CIPHER_BLOWFISH_CFB64,       &blowfish_cfb64_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    { MBEDTLS_CIPHER_BLOWFISH_CTR,         &blowfish_ctr_info },\n#endif\n#endif /* MBEDTLS_BLOWFISH_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n    { MBEDTLS_CIPHER_CAMELLIA_128_ECB,     &camellia_128_ecb_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_ECB,     &camellia_192_ecb_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_ECB,     &camellia_256_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_CAMELLIA_128_CBC,     &camellia_128_cbc_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_CBC,     &camellia_192_cbc_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_CBC,     &camellia_256_cbc_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    { MBEDTLS_CIPHER_CAMELLIA_128_CFB128,  &camellia_128_cfb128_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_CFB128,  &camellia_192_cfb128_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_CFB128,  &camellia_256_cfb128_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    { MBEDTLS_CIPHER_CAMELLIA_128_CTR,     &camellia_128_ctr_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_CTR,     &camellia_192_ctr_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_CTR,     &camellia_256_ctr_info },\n#endif\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_CIPHER_CAMELLIA_128_GCM,     &camellia_128_gcm_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_GCM,     &camellia_192_gcm_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_GCM,     &camellia_256_gcm_info },\n#endif\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_CIPHER_CAMELLIA_128_CCM,     &camellia_128_ccm_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_CCM,     &camellia_192_ccm_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_CCM,     &camellia_256_ccm_info },\n#endif\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_ARIA_C)\n    { MBEDTLS_CIPHER_ARIA_128_ECB,     &aria_128_ecb_info },\n    { MBEDTLS_CIPHER_ARIA_192_ECB,     &aria_192_ecb_info },\n    { MBEDTLS_CIPHER_ARIA_256_ECB,     &aria_256_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_ARIA_128_CBC,     &aria_128_cbc_info },\n    { MBEDTLS_CIPHER_ARIA_192_CBC,     &aria_192_cbc_info },\n    { MBEDTLS_CIPHER_ARIA_256_CBC,     &aria_256_cbc_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    { MBEDTLS_CIPHER_ARIA_128_CFB128,  &aria_128_cfb128_info },\n    { MBEDTLS_CIPHER_ARIA_192_CFB128,  &aria_192_cfb128_info },\n    { MBEDTLS_CIPHER_ARIA_256_CFB128,  &aria_256_cfb128_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    { MBEDTLS_CIPHER_ARIA_128_CTR,     &aria_128_ctr_info },\n    { MBEDTLS_CIPHER_ARIA_192_CTR,     &aria_192_ctr_info },\n    { MBEDTLS_CIPHER_ARIA_256_CTR,     &aria_256_ctr_info },\n#endif\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_CIPHER_ARIA_128_GCM,     &aria_128_gcm_info },\n    { MBEDTLS_CIPHER_ARIA_192_GCM,     &aria_192_gcm_info },\n    { MBEDTLS_CIPHER_ARIA_256_GCM,     &aria_256_gcm_info },\n#endif\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_CIPHER_ARIA_128_CCM,     &aria_128_ccm_info },\n    { MBEDTLS_CIPHER_ARIA_192_CCM,     &aria_192_ccm_info },\n    { MBEDTLS_CIPHER_ARIA_256_CCM,     &aria_256_ccm_info },\n#endif\n#endif /* MBEDTLS_ARIA_C */\n\n#if defined(MBEDTLS_DES_C)\n    { MBEDTLS_CIPHER_DES_ECB,              &des_ecb_info },\n    { MBEDTLS_CIPHER_DES_EDE_ECB,          &des_ede_ecb_info },\n    { MBEDTLS_CIPHER_DES_EDE3_ECB,         &des_ede3_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_DES_CBC,              &des_cbc_info },\n    { MBEDTLS_CIPHER_DES_EDE_CBC,          &des_ede_cbc_info },\n    { MBEDTLS_CIPHER_DES_EDE3_CBC,         &des_ede3_cbc_info },\n#endif\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n    { MBEDTLS_CIPHER_NULL,                 &null_cipher_info },\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n\n    { MBEDTLS_CIPHER_NONE, NULL }\n};\n\n#define NUM_CIPHERS sizeof mbedtls_cipher_definitions / sizeof mbedtls_cipher_definitions[0]\nint mbedtls_cipher_supported[NUM_CIPHERS];\n\n#endif /* MBEDTLS_CIPHER_C */\n","/*\n *  CTR_DRBG implementation based on AES-256 (NIST SP 800-90)\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The NIST SP 800-90 DRBGs are described in the following publication.\n *\n *  http://csrc.nist.gov/publications/nistpubs/800-90/SP800-90revised_March2007.pdf\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_CTR_DRBG_C)\n\n#include \"mbedtls/ctr_drbg.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_FS_IO)\n#include <stdio.h>\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n/*\n * CTR_DRBG context initialization\n */\nvoid mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_init( &ctx->mutex );\n#endif\n}\n\n/*\n * Non-public function wrapped by mbedtls_ctr_drbg_seed(). Necessary to allow\n * NIST tests to succeed (which require known length fixed entropy)\n */\nint mbedtls_ctr_drbg_seed_entropy_len(\n                   mbedtls_ctr_drbg_context *ctx,\n                   int (*f_entropy)(void *, unsigned char *, size_t),\n                   void *p_entropy,\n                   const unsigned char *custom,\n                   size_t len,\n                   size_t entropy_len )\n{\n    int ret;\n    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];\n\n    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );\n\n    mbedtls_aes_init( &ctx->aes_ctx );\n\n    ctx->f_entropy = f_entropy;\n    ctx->p_entropy = p_entropy;\n\n    ctx->entropy_len = entropy_len;\n    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;\n\n    /*\n     * Initialize with an empty key\n     */\n    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )\n    {\n        return( ret );\n    }\n    return( 0 );\n}\n\nint mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,\n                   int (*f_entropy)(void *, unsigned char *, size_t),\n                   void *p_entropy,\n                   const unsigned char *custom,\n                   size_t len )\n{\n    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,\n                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );\n}\n\nvoid mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_free( &ctx->mutex );\n#endif\n    mbedtls_aes_free( &ctx->aes_ctx );\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );\n}\n\nvoid mbedtls_ctr_drbg_set_prediction_resistance( mbedtls_ctr_drbg_context *ctx, int resistance )\n{\n    ctx->prediction_resistance = resistance;\n}\n\nvoid mbedtls_ctr_drbg_set_entropy_len( mbedtls_ctr_drbg_context *ctx, size_t len )\n{\n    ctx->entropy_len = len;\n}\n\nvoid mbedtls_ctr_drbg_set_reseed_interval( mbedtls_ctr_drbg_context *ctx, int interval )\n{\n    ctx->reseed_interval = interval;\n}\n\nstatic int block_cipher_df( unsigned char *output,\n                            const unsigned char *data, size_t data_len )\n{\n    unsigned char buf[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16];\n    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];\n    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];\n    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];\n    unsigned char *p, *iv;\n    mbedtls_aes_context aes_ctx;\n    int ret = 0;\n\n    int i, j;\n    size_t buf_len, use_len;\n\n    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )\n        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );\n\n    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );\n    mbedtls_aes_init( &aes_ctx );\n\n    /*\n     * Construct IV (16 bytes) and S in buffer\n     * IV = Counter (in 32-bits) padded to 16 with zeroes\n     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||\n     *     data || 0x80\n     *     (Total is padded to a multiple of 16-bytes with zeroes)\n     */\n    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;\n    *p++ = ( data_len >> 24 ) & 0xff;\n    *p++ = ( data_len >> 16 ) & 0xff;\n    *p++ = ( data_len >> 8  ) & 0xff;\n    *p++ = ( data_len       ) & 0xff;\n    p += 3;\n    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;\n    memcpy( p, data, data_len );\n    p[data_len] = 0x80;\n\n    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;\n\n    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )\n        key[i] = i;\n\n    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )\n    {\n        goto exit;\n    }\n\n    /*\n     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data\n     */\n    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )\n    {\n        p = buf;\n        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );\n        use_len = buf_len;\n\n        while( use_len > 0 )\n        {\n            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )\n                chain[i] ^= p[i];\n            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;\n            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?\n                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;\n\n            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )\n            {\n                goto exit;\n            }\n        }\n\n        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );\n\n        /*\n         * Update IV\n         */\n        buf[3]++;\n    }\n\n    /*\n     * Do final encryption with reduced data\n     */\n    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )\n    {\n        goto exit;\n    }\n    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;\n    p = output;\n\n    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )\n    {\n        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )\n        {\n            goto exit;\n        }\n        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );\n        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;\n    }\nexit:\n    mbedtls_aes_free( &aes_ctx );\n    /*\n    * tidy up the stack\n    */\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );\n    mbedtls_platform_zeroize( key, sizeof( key ) );\n    mbedtls_platform_zeroize( chain, sizeof( chain ) );\n    if( 0 != ret )\n    {\n        /*\n        * wipe partial seed from memory\n        */\n        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );\n    }\n\n    return( ret );\n}\n\nstatic int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,\n                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )\n{\n    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];\n    unsigned char *p = tmp;\n    int i, j;\n    int ret = 0;\n\n    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );\n\n    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )\n    {\n        /*\n         * Increase counter\n         */\n        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )\n            if( ++ctx->counter[i - 1] != 0 )\n                break;\n\n        /*\n         * Crypt counter block\n         */\n        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )\n        {\n            return( ret );\n        }\n\n        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;\n    }\n\n    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )\n        tmp[i] ^= data[i];\n\n    /*\n     * Update key and counter\n     */\n    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )\n    {\n        return( ret );\n    }\n    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );\n\n    return( 0 );\n}\n\nvoid mbedtls_ctr_drbg_update( mbedtls_ctr_drbg_context *ctx,\n                      const unsigned char *additional, size_t add_len )\n{\n    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];\n\n    if( add_len > 0 )\n    {\n        /* MAX_INPUT would be more logical here, but we have to match\n         * block_cipher_df()'s limits since we can't propagate errors */\n        if( add_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )\n            add_len = MBEDTLS_CTR_DRBG_MAX_SEED_INPUT;\n\n        block_cipher_df( add_input, additional, add_len );\n        ctr_drbg_update_internal( ctx, add_input );\n    }\n}\n\nint mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,\n                     const unsigned char *additional, size_t len )\n{\n    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];\n    size_t seedlen = 0;\n    int ret;\n\n    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||\n        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )\n        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );\n\n    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );\n\n    /*\n     * Gather entropy_len bytes of entropy to seed state\n     */\n    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,\n                             ctx->entropy_len ) )\n    {\n        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );\n    }\n\n    seedlen += ctx->entropy_len;\n\n    /*\n     * Add additional data\n     */\n    if( additional && len )\n    {\n        memcpy( seed + seedlen, additional, len );\n        seedlen += len;\n    }\n\n    /*\n     * Reduce to 384 bits\n     */\n    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    /*\n     * Update state\n     */\n    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )\n    {\n        return( ret );\n    }\n    ctx->reseed_counter = 1;\n\n    return( 0 );\n}\n\nint mbedtls_ctr_drbg_random_with_add( void *p_rng,\n                              unsigned char *output, size_t output_len,\n                              const unsigned char *additional, size_t add_len )\n{\n    int ret = 0;\n    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;\n    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];\n    unsigned char *p = output;\n    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];\n    int i;\n    size_t use_len;\n\n    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )\n        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );\n\n    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )\n        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );\n\n    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );\n\n    if( ctx->reseed_counter > ctx->reseed_interval ||\n        ctx->prediction_resistance )\n    {\n        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )\n        {\n            return( ret );\n        }\n        add_len = 0;\n    }\n\n    if( add_len > 0 )\n    {\n        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )\n        {\n            return( ret );\n        }\n        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )\n        {\n            return( ret );\n        }\n    }\n\n    while( output_len > 0 )\n    {\n        /*\n         * Increase counter\n         */\n        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )\n            if( ++ctx->counter[i - 1] != 0 )\n                break;\n\n        /*\n         * Crypt counter block\n         */\n        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )\n        {\n            return( ret );\n        }\n\n        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :\n                                                       output_len;\n        /*\n         * Copy random block to destination\n         */\n        memcpy( p, tmp, use_len );\n        p += use_len;\n        output_len -= use_len;\n    }\n\n    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    ctx->reseed_counter++;\n\n    return( 0 );\n}\n\nint mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )\n{\n    int ret;\n    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_FS_IO)\nint mbedtls_ctr_drbg_write_seed_file( mbedtls_ctr_drbg_context *ctx, const char *path )\n{\n    int ret = MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR;\n    FILE *f;\n    unsigned char buf[ MBEDTLS_CTR_DRBG_MAX_INPUT ];\n\n    if( ( f = fopen( path, \"wb\" ) ) == NULL )\n        return( MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR );\n\n    if( ( ret = mbedtls_ctr_drbg_random( ctx, buf, MBEDTLS_CTR_DRBG_MAX_INPUT ) ) != 0 )\n        goto exit;\n\n    if( fwrite( buf, 1, MBEDTLS_CTR_DRBG_MAX_INPUT, f ) != MBEDTLS_CTR_DRBG_MAX_INPUT )\n        ret = MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR;\n    else\n        ret = 0;\n\nexit:\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n    fclose( f );\n    return( ret );\n}\n\nint mbedtls_ctr_drbg_update_seed_file( mbedtls_ctr_drbg_context *ctx, const char *path )\n{\n    int ret = 0;\n    FILE *f;\n    size_t n;\n    unsigned char buf[ MBEDTLS_CTR_DRBG_MAX_INPUT ];\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR );\n\n    fseek( f, 0, SEEK_END );\n    n = (size_t) ftell( f );\n    fseek( f, 0, SEEK_SET );\n\n    if( n > MBEDTLS_CTR_DRBG_MAX_INPUT )\n    {\n        fclose( f );\n        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );\n    }\n\n    if( fread( buf, 1, n, f ) != n )\n        ret = MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR;\n    else\n        mbedtls_ctr_drbg_update( ctx, buf, n );\n\n    fclose( f );\n\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_ctr_drbg_write_seed_file( ctx, path ) );\n}\n#endif /* MBEDTLS_FS_IO */\n\n#if defined(MBEDTLS_SELF_TEST)\n\nstatic const unsigned char entropy_source_pr[96] =\n    { 0xc1, 0x80, 0x81, 0xa6, 0x5d, 0x44, 0x02, 0x16,\n      0x19, 0xb3, 0xf1, 0x80, 0xb1, 0xc9, 0x20, 0x02,\n      0x6a, 0x54, 0x6f, 0x0c, 0x70, 0x81, 0x49, 0x8b,\n      0x6e, 0xa6, 0x62, 0x52, 0x6d, 0x51, 0xb1, 0xcb,\n      0x58, 0x3b, 0xfa, 0xd5, 0x37, 0x5f, 0xfb, 0xc9,\n      0xff, 0x46, 0xd2, 0x19, 0xc7, 0x22, 0x3e, 0x95,\n      0x45, 0x9d, 0x82, 0xe1, 0xe7, 0x22, 0x9f, 0x63,\n      0x31, 0x69, 0xd2, 0x6b, 0x57, 0x47, 0x4f, 0xa3,\n      0x37, 0xc9, 0x98, 0x1c, 0x0b, 0xfb, 0x91, 0x31,\n      0x4d, 0x55, 0xb9, 0xe9, 0x1c, 0x5a, 0x5e, 0xe4,\n      0x93, 0x92, 0xcf, 0xc5, 0x23, 0x12, 0xd5, 0x56,\n      0x2c, 0x4a, 0x6e, 0xff, 0xdc, 0x10, 0xd0, 0x68 };\n\nstatic const unsigned char entropy_source_nopr[64] =\n    { 0x5a, 0x19, 0x4d, 0x5e, 0x2b, 0x31, 0x58, 0x14,\n      0x54, 0xde, 0xf6, 0x75, 0xfb, 0x79, 0x58, 0xfe,\n      0xc7, 0xdb, 0x87, 0x3e, 0x56, 0x89, 0xfc, 0x9d,\n      0x03, 0x21, 0x7c, 0x68, 0xd8, 0x03, 0x38, 0x20,\n      0xf9, 0xe6, 0x5e, 0x04, 0xd8, 0x56, 0xf3, 0xa9,\n      0xc4, 0x4a, 0x4c, 0xbd, 0xc1, 0xd0, 0x08, 0x46,\n      0xf5, 0x98, 0x3d, 0x77, 0x1c, 0x1b, 0x13, 0x7e,\n      0x4e, 0x0f, 0x9d, 0x8e, 0xf4, 0x09, 0xf9, 0x2e };\n\nstatic const unsigned char nonce_pers_pr[16] =\n    { 0xd2, 0x54, 0xfc, 0xff, 0x02, 0x1e, 0x69, 0xd2,\n      0x29, 0xc9, 0xcf, 0xad, 0x85, 0xfa, 0x48, 0x6c };\n\nstatic const unsigned char nonce_pers_nopr[16] =\n    { 0x1b, 0x54, 0xb8, 0xff, 0x06, 0x42, 0xbf, 0xf5,\n      0x21, 0xf1, 0x5c, 0x1c, 0x0b, 0x66, 0x5f, 0x3f };\n\nstatic const unsigned char result_pr[16] =\n    { 0x34, 0x01, 0x16, 0x56, 0xb4, 0x29, 0x00, 0x8f,\n      0x35, 0x63, 0xec, 0xb5, 0xf2, 0x59, 0x07, 0x23 };\n\nstatic const unsigned char result_nopr[16] =\n    { 0xa0, 0x54, 0x30, 0x3d, 0x8a, 0x7e, 0xa9, 0x88,\n      0x9d, 0x90, 0x3e, 0x07, 0x7c, 0x6f, 0x21, 0x8f };\n\nstatic size_t test_offset;\nstatic int ctr_drbg_self_test_entropy( void *data, unsigned char *buf,\n                                       size_t len )\n{\n    const unsigned char *p = data;\n    memcpy( buf, p + test_offset, len );\n    test_offset += len;\n    return( 0 );\n}\n\n#define CHK( c )    if( (c) != 0 )                          \\\n                    {                                       \\\n                        if( verbose != 0 )                  \\\n                            mbedtls_printf( \"failed\\n\" );  \\\n                        return( 1 );                        \\\n                    }\n\n/*\n * Checkup routine\n */\nint mbedtls_ctr_drbg_self_test( int verbose )\n{\n    mbedtls_ctr_drbg_context ctx;\n    unsigned char buf[16];\n\n    mbedtls_ctr_drbg_init( &ctx );\n\n    /*\n     * Based on a NIST CTR_DRBG test vector (PR = True)\n     */\n    if( verbose != 0 )\n        mbedtls_printf( \"  CTR_DRBG (PR = TRUE) : \" );\n\n    test_offset = 0;\n    CHK( mbedtls_ctr_drbg_seed_entropy_len( &ctx, ctr_drbg_self_test_entropy,\n                                (void *) entropy_source_pr, nonce_pers_pr, 16, 32 ) );\n    mbedtls_ctr_drbg_set_prediction_resistance( &ctx, MBEDTLS_CTR_DRBG_PR_ON );\n    CHK( mbedtls_ctr_drbg_random( &ctx, buf, MBEDTLS_CTR_DRBG_BLOCKSIZE ) );\n    CHK( mbedtls_ctr_drbg_random( &ctx, buf, MBEDTLS_CTR_DRBG_BLOCKSIZE ) );\n    CHK( memcmp( buf, result_pr, MBEDTLS_CTR_DRBG_BLOCKSIZE ) );\n\n    mbedtls_ctr_drbg_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    /*\n     * Based on a NIST CTR_DRBG test vector (PR = FALSE)\n     */\n    if( verbose != 0 )\n        mbedtls_printf( \"  CTR_DRBG (PR = FALSE): \" );\n\n    mbedtls_ctr_drbg_init( &ctx );\n\n    test_offset = 0;\n    CHK( mbedtls_ctr_drbg_seed_entropy_len( &ctx, ctr_drbg_self_test_entropy,\n                            (void *) entropy_source_nopr, nonce_pers_nopr, 16, 32 ) );\n    CHK( mbedtls_ctr_drbg_random( &ctx, buf, 16 ) );\n    CHK( mbedtls_ctr_drbg_reseed( &ctx, NULL, 0 ) );\n    CHK( mbedtls_ctr_drbg_random( &ctx, buf, 16 ) );\n    CHK( memcmp( buf, result_nopr, 16 ) );\n\n    mbedtls_ctr_drbg_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n            mbedtls_printf( \"\\n\" );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_CTR_DRBG_C */\n","/*\n *  Debugging routines\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_DEBUG_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc      calloc\n#define mbedtls_free        free\n#define mbedtls_time_t      time_t\n#define mbedtls_snprintf    snprintf\n#endif\n\n#include \"mbedtls/debug.h\"\n\n#include <stdarg.h>\n#include <stdio.h>\n#include <string.h>\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n#define DEBUG_BUF_SIZE      512\n\nstatic int debug_threshold = 0;\n\nvoid mbedtls_debug_set_threshold( int threshold )\n{\n    debug_threshold = threshold;\n}\n\n/*\n * All calls to f_dbg must be made via this function\n */\nstatic inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,\n                                    const char *file, int line,\n                                    const char *str )\n{\n    /*\n     * If in a threaded environment, we need a thread identifier.\n     * Since there is no portable way to get one, use the address of the ssl\n     * context instead, as it shouldn't be shared between threads.\n     */\n#if defined(MBEDTLS_THREADING_C)\n    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */\n    mbedtls_snprintf( idstr, sizeof( idstr ), \"%p: %s\", (void*)ssl, str );\n    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );\n#else\n    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );\n#endif\n}\n\nvoid mbedtls_debug_print_msg( const mbedtls_ssl_context *ssl, int level,\n                              const char *file, int line,\n                              const char *format, ... )\n{\n    va_list argp;\n    char str[DEBUG_BUF_SIZE];\n    int ret;\n\n    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )\n        return;\n\n    va_start( argp, format );\n#if defined(_WIN32)\n#if defined(_TRUNCATE) && !defined(__MINGW32__)\n    ret = _vsnprintf_s( str, DEBUG_BUF_SIZE, _TRUNCATE, format, argp );\n#else\n    ret = _vsnprintf( str, DEBUG_BUF_SIZE, format, argp );\n    if( ret < 0 || (size_t) ret == DEBUG_BUF_SIZE )\n    {\n        str[DEBUG_BUF_SIZE-1] = '\\0';\n        ret = -1;\n    }\n#endif\n#else\n    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );\n#endif\n    va_end( argp );\n\n    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )\n    {\n        str[ret]     = '\\n';\n        str[ret + 1] = '\\0';\n    }\n\n    debug_send_line( ssl, level, file, line, str );\n}\n\nvoid mbedtls_debug_print_ret( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line,\n                      const char *text, int ret )\n{\n    char str[DEBUG_BUF_SIZE];\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )\n        return;\n\n    /*\n     * With non-blocking I/O and examples that just retry immediately,\n     * the logs would be quickly flooded with WANT_READ, so ignore that.\n     * Don't ignore WANT_WRITE however, since is is usually rare.\n     */\n    if( ret == MBEDTLS_ERR_SSL_WANT_READ )\n        return;\n\n    mbedtls_snprintf( str, sizeof( str ), \"%s() returned %d (-0x%04x)\\n\",\n              text, ret, -ret );\n\n    debug_send_line( ssl, level, file, line, str );\n}\n\nvoid mbedtls_debug_print_buf( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line, const char *text,\n                      const unsigned char *buf, size_t len )\n{\n    char str[DEBUG_BUF_SIZE];\n    char txt[17];\n    size_t i, idx = 0;\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )\n        return;\n\n    mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"dumping '%s' (%u bytes)\\n\",\n              text, (unsigned int) len );\n\n    debug_send_line( ssl, level, file, line, str );\n\n    idx = 0;\n    memset( txt, 0, sizeof( txt ) );\n    for( i = 0; i < len; i++ )\n    {\n        if( i >= 4096 )\n            break;\n\n        if( i % 16 == 0 )\n        {\n            if( i > 0 )\n            {\n                mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"  %s\\n\", txt );\n                debug_send_line( ssl, level, file, line, str );\n\n                idx = 0;\n                memset( txt, 0, sizeof( txt ) );\n            }\n\n            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"%04x: \",\n                             (unsigned int) i );\n\n        }\n\n        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \" %02x\",\n                         (unsigned int) buf[i] );\n        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;\n    }\n\n    if( len > 0 )\n    {\n        for( /* i = i */; i % 16 != 0; i++ )\n            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"   \" );\n\n        mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"  %s\\n\", txt );\n        debug_send_line( ssl, level, file, line, str );\n    }\n}\n\n#if defined(MBEDTLS_ECP_C)\nvoid mbedtls_debug_print_ecp( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line,\n                      const char *text, const mbedtls_ecp_point *X )\n{\n    char str[DEBUG_BUF_SIZE];\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )\n        return;\n\n    mbedtls_snprintf( str, sizeof( str ), \"%s(X)\", text );\n    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->X );\n\n    mbedtls_snprintf( str, sizeof( str ), \"%s(Y)\", text );\n    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );\n}\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_BIGNUM_C)\nvoid mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line,\n                      const char *text, const mbedtls_mpi *X )\n{\n    char str[DEBUG_BUF_SIZE];\n    int j, k, zeros = 1;\n    size_t i, n, idx = 0;\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )\n        return;\n\n    for( n = X->n - 1; n > 0; n-- )\n        if( X->p[n] != 0 )\n            break;\n\n    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )\n        if( ( ( X->p[n] >> j ) & 1 ) != 0 )\n            break;\n\n    mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"value of '%s' (%d bits) is:\\n\",\n              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );\n\n    debug_send_line( ssl, level, file, line, str );\n\n    idx = 0;\n    for( i = n + 1, j = 0; i > 0; i-- )\n    {\n        if( zeros && X->p[i - 1] == 0 )\n            continue;\n\n        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )\n        {\n            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )\n                continue;\n            else\n                zeros = 0;\n\n            if( j % 16 == 0 )\n            {\n                if( j > 0 )\n                {\n                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"\\n\" );\n                    debug_send_line( ssl, level, file, line, str );\n                    idx = 0;\n                }\n            }\n\n            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \" %02x\", (unsigned int)\n                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );\n\n            j++;\n        }\n\n    }\n\n    if( zeros == 1 )\n        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \" 00\" );\n\n    mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"\\n\" );\n    debug_send_line( ssl, level, file, line, str );\n}\n#endif /* MBEDTLS_BIGNUM_C */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nstatic void debug_print_pk( const mbedtls_ssl_context *ssl, int level,\n                            const char *file, int line,\n                            const char *text, const mbedtls_pk_context *pk )\n{\n    size_t i;\n    mbedtls_pk_debug_item items[MBEDTLS_PK_DEBUG_MAX_ITEMS];\n    char name[16];\n\n    memset( items, 0, sizeof( items ) );\n\n    if( mbedtls_pk_debug( pk, items ) != 0 )\n    {\n        debug_send_line( ssl, level, file, line,\n                          \"invalid PK context\\n\" );\n        return;\n    }\n\n    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )\n    {\n        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )\n            return;\n\n        mbedtls_snprintf( name, sizeof( name ), \"%s%s\", text, items[i].name );\n        name[sizeof( name ) - 1] = '\\0';\n\n        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )\n            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );\n        else\n#if defined(MBEDTLS_ECP_C)\n        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )\n            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );\n        else\n#endif\n            debug_send_line( ssl, level, file, line,\n                              \"should not happen\\n\" );\n    }\n}\n\nstatic void debug_print_line_by_line( const mbedtls_ssl_context *ssl, int level,\n                                      const char *file, int line, const char *text )\n{\n    char str[DEBUG_BUF_SIZE];\n    const char *start, *cur;\n\n    start = text;\n    for( cur = text; *cur != '\\0'; cur++ )\n    {\n        if( *cur == '\\n' )\n        {\n            size_t len = cur - start + 1;\n            if( len > DEBUG_BUF_SIZE - 1 )\n                len = DEBUG_BUF_SIZE - 1;\n\n            memcpy( str, start, len );\n            str[len] = '\\0';\n\n            debug_send_line( ssl, level, file, line, str );\n\n            start = cur + 1;\n        }\n    }\n}\n\nvoid mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line,\n                      const char *text, const mbedtls_x509_crt *crt )\n{\n    char str[DEBUG_BUF_SIZE];\n    int i = 0;\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )\n        return;\n\n    while( crt != NULL )\n    {\n        char buf[1024];\n\n        mbedtls_snprintf( str, sizeof( str ), \"%s #%d:\\n\", text, ++i );\n        debug_send_line( ssl, level, file, line, str );\n\n        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, \"\", crt );\n        debug_print_line_by_line( ssl, level, file, line, buf );\n\n        debug_print_pk( ssl, level, file, line, \"crt->\", &crt->pk );\n\n        crt = crt->next;\n    }\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n#endif /* MBEDTLS_DEBUG_C */\n","/*\n *  Elliptic curve Diffie-Hellman\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n * RFC 4492\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECDH_C)\n\n#include \"mbedtls/ecdh.h\"\n\n#include <string.h>\n\n#if !defined(MBEDTLS_ECDH_GEN_PUBLIC_ALT)\n/*\n * Generate public key: simple wrapper around mbedtls_ecp_gen_keypair\n */\nint mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    return mbedtls_ecp_gen_keypair( grp, d, Q, f_rng, p_rng );\n}\n#endif /* MBEDTLS_ECDH_GEN_PUBLIC_ALT */\n\n#if !defined(MBEDTLS_ECDH_COMPUTE_SHARED_ALT)\n/*\n * Compute shared secret (SEC1 3.3.1)\n */\nint mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,\n                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,\n                         int (*f_rng)(void *, unsigned char *, size_t),\n                         void *p_rng )\n{\n    int ret;\n    mbedtls_ecp_point P;\n\n    mbedtls_ecp_point_init( &P );\n\n    /*\n     * Make sure Q is a valid pubkey before using it\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &P, d, Q, f_rng, p_rng ) );\n\n    if( mbedtls_ecp_is_zero( &P ) )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );\n\ncleanup:\n    mbedtls_ecp_point_free( &P );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDH_COMPUTE_SHARED_ALT */\n\n/*\n * Initialize context\n */\nvoid mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );\n}\n\n/*\n * Free context\n */\nvoid mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    mbedtls_ecp_group_free( &ctx->grp );\n    mbedtls_ecp_point_free( &ctx->Q   );\n    mbedtls_ecp_point_free( &ctx->Qp  );\n    mbedtls_ecp_point_free( &ctx->Vi  );\n    mbedtls_ecp_point_free( &ctx->Vf  );\n    mbedtls_mpi_free( &ctx->d  );\n    mbedtls_mpi_free( &ctx->z  );\n    mbedtls_mpi_free( &ctx->_d );\n}\n\n/*\n * Setup and write the ServerKeyExhange parameters (RFC 4492)\n *      struct {\n *          ECParameters    curve_params;\n *          ECPoint         public;\n *      } ServerECDHParams;\n */\nint mbedtls_ecdh_make_params( mbedtls_ecdh_context *ctx, size_t *olen,\n                      unsigned char *buf, size_t blen,\n                      int (*f_rng)(void *, unsigned char *, size_t),\n                      void *p_rng )\n{\n    int ret;\n    size_t grp_len, pt_len;\n\n    if( ctx == NULL || ctx->grp.pbits == 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )\n                != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_ecp_tls_write_group( &ctx->grp, &grp_len, buf, blen ) )\n                != 0 )\n        return( ret );\n\n    buf += grp_len;\n    blen -= grp_len;\n\n    if( ( ret = mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,\n                                     &pt_len, buf, blen ) ) != 0 )\n        return( ret );\n\n    *olen = grp_len + pt_len;\n    return( 0 );\n}\n\n/*\n * Read the ServerKeyExhange parameters (RFC 4492)\n *      struct {\n *          ECParameters    curve_params;\n *          ECPoint         public;\n *      } ServerECDHParams;\n */\nint mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,\n                      const unsigned char **buf, const unsigned char *end )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )\n                != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * Get parameters from a keypair\n */\nint mbedtls_ecdh_get_params( mbedtls_ecdh_context *ctx, const mbedtls_ecp_keypair *key,\n                     mbedtls_ecdh_side side )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 )\n        return( ret );\n\n    /* If it's not our key, just import the public part as Qp */\n    if( side == MBEDTLS_ECDH_THEIRS )\n        return( mbedtls_ecp_copy( &ctx->Qp, &key->Q ) );\n\n    /* Our key: import public (as Q) and private parts */\n    if( side != MBEDTLS_ECDH_OURS )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 ||\n        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * Setup and export the client public value\n */\nint mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,\n                      unsigned char *buf, size_t blen,\n                      int (*f_rng)(void *, unsigned char *, size_t),\n                      void *p_rng )\n{\n    int ret;\n\n    if( ctx == NULL || ctx->grp.pbits == 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )\n                != 0 )\n        return( ret );\n\n    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,\n                                olen, buf, blen );\n}\n\n/*\n * Parse and import the client's public value\n */\nint mbedtls_ecdh_read_public( mbedtls_ecdh_context *ctx,\n                      const unsigned char *buf, size_t blen )\n{\n    int ret;\n    const unsigned char *p = buf;\n\n    if( ctx == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, &p, blen ) ) != 0 )\n        return( ret );\n\n    if( (size_t)( p - buf ) != blen )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    return( 0 );\n}\n\n/*\n * Derive and export the shared secret\n */\nint mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,\n                      unsigned char *buf, size_t blen,\n                      int (*f_rng)(void *, unsigned char *, size_t),\n                      void *p_rng )\n{\n    int ret;\n\n    if( ctx == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp, &ctx->d,\n                                     f_rng, p_rng ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    if( mbedtls_mpi_size( &ctx->z ) > blen )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );\n    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );\n}\n\n#endif /* MBEDTLS_ECDH_C */\n","/*\n *  Elliptic curves over GF(p): curve-specific data and functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n\n#include \"mbedtls/ecp.h\"\n\n#include <string.h>\n\n#if !defined(MBEDTLS_ECP_ALT)\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n/*\n * Conversion macros for embedded constants:\n * build lists of mbedtls_mpi_uint's from lists of unsigned char's grouped by 8, 4 or 2\n */\n#if defined(MBEDTLS_HAVE_INT32)\n\n#define BYTES_TO_T_UINT_4( a, b, c, d )             \\\n    ( (mbedtls_mpi_uint) a <<  0 ) |                          \\\n    ( (mbedtls_mpi_uint) b <<  8 ) |                          \\\n    ( (mbedtls_mpi_uint) c << 16 ) |                          \\\n    ( (mbedtls_mpi_uint) d << 24 )\n\n#define BYTES_TO_T_UINT_2( a, b )                   \\\n    BYTES_TO_T_UINT_4( a, b, 0, 0 )\n\n#define BYTES_TO_T_UINT_8( a, b, c, d, e, f, g, h ) \\\n    BYTES_TO_T_UINT_4( a, b, c, d ),                \\\n    BYTES_TO_T_UINT_4( e, f, g, h )\n\n#else /* 64-bits */\n\n#define BYTES_TO_T_UINT_8( a, b, c, d, e, f, g, h ) \\\n    ( (mbedtls_mpi_uint) a <<  0 ) |                          \\\n    ( (mbedtls_mpi_uint) b <<  8 ) |                          \\\n    ( (mbedtls_mpi_uint) c << 16 ) |                          \\\n    ( (mbedtls_mpi_uint) d << 24 ) |                          \\\n    ( (mbedtls_mpi_uint) e << 32 ) |                          \\\n    ( (mbedtls_mpi_uint) f << 40 ) |                          \\\n    ( (mbedtls_mpi_uint) g << 48 ) |                          \\\n    ( (mbedtls_mpi_uint) h << 56 )\n\n#define BYTES_TO_T_UINT_4( a, b, c, d )             \\\n    BYTES_TO_T_UINT_8( a, b, c, d, 0, 0, 0, 0 )\n\n#define BYTES_TO_T_UINT_2( a, b )                   \\\n    BYTES_TO_T_UINT_8( a, b, 0, 0, 0, 0, 0, 0 )\n\n#endif /* bits in mbedtls_mpi_uint */\n\n/*\n * Note: the constants are in little-endian order\n * to be directly usable in MPIs\n */\n\n/*\n * Domain parameters for secp192r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\nstatic const mbedtls_mpi_uint secp192r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp192r1_b[] = {\n    BYTES_TO_T_UINT_8( 0xB1, 0xB9, 0x46, 0xC1, 0xEC, 0xDE, 0xB8, 0xFE ),\n    BYTES_TO_T_UINT_8( 0x49, 0x30, 0x24, 0x72, 0xAB, 0xE9, 0xA7, 0x0F ),\n    BYTES_TO_T_UINT_8( 0xE7, 0x80, 0x9C, 0xE5, 0x19, 0x05, 0x21, 0x64 ),\n};\nstatic const mbedtls_mpi_uint secp192r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x12, 0x10, 0xFF, 0x82, 0xFD, 0x0A, 0xFF, 0xF4 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x88, 0xA1, 0x43, 0xEB, 0x20, 0xBF, 0x7C ),\n    BYTES_TO_T_UINT_8( 0xF6, 0x90, 0x30, 0xB0, 0x0E, 0xA8, 0x8D, 0x18 ),\n};\nstatic const mbedtls_mpi_uint secp192r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x11, 0x48, 0x79, 0x1E, 0xA1, 0x77, 0xF9, 0x73 ),\n    BYTES_TO_T_UINT_8( 0xD5, 0xCD, 0x24, 0x6B, 0xED, 0x11, 0x10, 0x63 ),\n    BYTES_TO_T_UINT_8( 0x78, 0xDA, 0xC8, 0xFF, 0x95, 0x2B, 0x19, 0x07 ),\n};\nstatic const mbedtls_mpi_uint secp192r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x31, 0x28, 0xD2, 0xB4, 0xB1, 0xC9, 0x6B, 0x14 ),\n    BYTES_TO_T_UINT_8( 0x36, 0xF8, 0xDE, 0x99, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */\n\n/*\n * Domain parameters for secp224r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\nstatic const mbedtls_mpi_uint secp224r1_p[] = {\n    BYTES_TO_T_UINT_8( 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp224r1_b[] = {\n    BYTES_TO_T_UINT_8( 0xB4, 0xFF, 0x55, 0x23, 0x43, 0x39, 0x0B, 0x27 ),\n    BYTES_TO_T_UINT_8( 0xBA, 0xD8, 0xBF, 0xD7, 0xB7, 0xB0, 0x44, 0x50 ),\n    BYTES_TO_T_UINT_8( 0x56, 0x32, 0x41, 0xF5, 0xAB, 0xB3, 0x04, 0x0C ),\n    BYTES_TO_T_UINT_4( 0x85, 0x0A, 0x05, 0xB4 ),\n};\nstatic const mbedtls_mpi_uint secp224r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x21, 0x1D, 0x5C, 0x11, 0xD6, 0x80, 0x32, 0x34 ),\n    BYTES_TO_T_UINT_8( 0x22, 0x11, 0xC2, 0x56, 0xD3, 0xC1, 0x03, 0x4A ),\n    BYTES_TO_T_UINT_8( 0xB9, 0x90, 0x13, 0x32, 0x7F, 0xBF, 0xB4, 0x6B ),\n    BYTES_TO_T_UINT_4( 0xBD, 0x0C, 0x0E, 0xB7 ),\n};\nstatic const mbedtls_mpi_uint secp224r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x34, 0x7E, 0x00, 0x85, 0x99, 0x81, 0xD5, 0x44 ),\n    BYTES_TO_T_UINT_8( 0x64, 0x47, 0x07, 0x5A, 0xA0, 0x75, 0x43, 0xCD ),\n    BYTES_TO_T_UINT_8( 0xE6, 0xDF, 0x22, 0x4C, 0xFB, 0x23, 0xF7, 0xB5 ),\n    BYTES_TO_T_UINT_4( 0x88, 0x63, 0x37, 0xBD ),\n};\nstatic const mbedtls_mpi_uint secp224r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x3D, 0x2A, 0x5C, 0x5C, 0x45, 0x29, 0xDD, 0x13 ),\n    BYTES_TO_T_UINT_8( 0x3E, 0xF0, 0xB8, 0xE0, 0xA2, 0x16, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_4( 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */\n\n/*\n * Domain parameters for secp256r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\nstatic const mbedtls_mpi_uint secp256r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp256r1_b[] = {\n    BYTES_TO_T_UINT_8( 0x4B, 0x60, 0xD2, 0x27, 0x3E, 0x3C, 0xCE, 0x3B ),\n    BYTES_TO_T_UINT_8( 0xF6, 0xB0, 0x53, 0xCC, 0xB0, 0x06, 0x1D, 0x65 ),\n    BYTES_TO_T_UINT_8( 0xBC, 0x86, 0x98, 0x76, 0x55, 0xBD, 0xEB, 0xB3 ),\n    BYTES_TO_T_UINT_8( 0xE7, 0x93, 0x3A, 0xAA, 0xD8, 0x35, 0xC6, 0x5A ),\n};\nstatic const mbedtls_mpi_uint secp256r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x96, 0xC2, 0x98, 0xD8, 0x45, 0x39, 0xA1, 0xF4 ),\n    BYTES_TO_T_UINT_8( 0xA0, 0x33, 0xEB, 0x2D, 0x81, 0x7D, 0x03, 0x77 ),\n    BYTES_TO_T_UINT_8( 0xF2, 0x40, 0xA4, 0x63, 0xE5, 0xE6, 0xBC, 0xF8 ),\n    BYTES_TO_T_UINT_8( 0x47, 0x42, 0x2C, 0xE1, 0xF2, 0xD1, 0x17, 0x6B ),\n};\nstatic const mbedtls_mpi_uint secp256r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0xF5, 0x51, 0xBF, 0x37, 0x68, 0x40, 0xB6, 0xCB ),\n    BYTES_TO_T_UINT_8( 0xCE, 0x5E, 0x31, 0x6B, 0x57, 0x33, 0xCE, 0x2B ),\n    BYTES_TO_T_UINT_8( 0x16, 0x9E, 0x0F, 0x7C, 0x4A, 0xEB, 0xE7, 0x8E ),\n    BYTES_TO_T_UINT_8( 0x9B, 0x7F, 0x1A, 0xFE, 0xE2, 0x42, 0xE3, 0x4F ),\n};\nstatic const mbedtls_mpi_uint secp256r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x51, 0x25, 0x63, 0xFC, 0xC2, 0xCA, 0xB9, 0xF3 ),\n    BYTES_TO_T_UINT_8( 0x84, 0x9E, 0x17, 0xA7, 0xAD, 0xFA, 0xE6, 0xBC ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */\n\n/*\n * Domain parameters for secp384r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\nstatic const mbedtls_mpi_uint secp384r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp384r1_b[] = {\n    BYTES_TO_T_UINT_8( 0xEF, 0x2A, 0xEC, 0xD3, 0xED, 0xC8, 0x85, 0x2A ),\n    BYTES_TO_T_UINT_8( 0x9D, 0xD1, 0x2E, 0x8A, 0x8D, 0x39, 0x56, 0xC6 ),\n    BYTES_TO_T_UINT_8( 0x5A, 0x87, 0x13, 0x50, 0x8F, 0x08, 0x14, 0x03 ),\n    BYTES_TO_T_UINT_8( 0x12, 0x41, 0x81, 0xFE, 0x6E, 0x9C, 0x1D, 0x18 ),\n    BYTES_TO_T_UINT_8( 0x19, 0x2D, 0xF8, 0xE3, 0x6B, 0x05, 0x8E, 0x98 ),\n    BYTES_TO_T_UINT_8( 0xE4, 0xE7, 0x3E, 0xE2, 0xA7, 0x2F, 0x31, 0xB3 ),\n};\nstatic const mbedtls_mpi_uint secp384r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0xB7, 0x0A, 0x76, 0x72, 0x38, 0x5E, 0x54, 0x3A ),\n    BYTES_TO_T_UINT_8( 0x6C, 0x29, 0x55, 0xBF, 0x5D, 0xF2, 0x02, 0x55 ),\n    BYTES_TO_T_UINT_8( 0x38, 0x2A, 0x54, 0x82, 0xE0, 0x41, 0xF7, 0x59 ),\n    BYTES_TO_T_UINT_8( 0x98, 0x9B, 0xA7, 0x8B, 0x62, 0x3B, 0x1D, 0x6E ),\n    BYTES_TO_T_UINT_8( 0x74, 0xAD, 0x20, 0xF3, 0x1E, 0xC7, 0xB1, 0x8E ),\n    BYTES_TO_T_UINT_8( 0x37, 0x05, 0x8B, 0xBE, 0x22, 0xCA, 0x87, 0xAA ),\n};\nstatic const mbedtls_mpi_uint secp384r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x5F, 0x0E, 0xEA, 0x90, 0x7C, 0x1D, 0x43, 0x7A ),\n    BYTES_TO_T_UINT_8( 0x9D, 0x81, 0x7E, 0x1D, 0xCE, 0xB1, 0x60, 0x0A ),\n    BYTES_TO_T_UINT_8( 0xC0, 0xB8, 0xF0, 0xB5, 0x13, 0x31, 0xDA, 0xE9 ),\n    BYTES_TO_T_UINT_8( 0x7C, 0x14, 0x9A, 0x28, 0xBD, 0x1D, 0xF4, 0xF8 ),\n    BYTES_TO_T_UINT_8( 0x29, 0xDC, 0x92, 0x92, 0xBF, 0x98, 0x9E, 0x5D ),\n    BYTES_TO_T_UINT_8( 0x6F, 0x2C, 0x26, 0x96, 0x4A, 0xDE, 0x17, 0x36 ),\n};\nstatic const mbedtls_mpi_uint secp384r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x73, 0x29, 0xC5, 0xCC, 0x6A, 0x19, 0xEC, 0xEC ),\n    BYTES_TO_T_UINT_8( 0x7A, 0xA7, 0xB0, 0x48, 0xB2, 0x0D, 0x1A, 0x58 ),\n    BYTES_TO_T_UINT_8( 0xDF, 0x2D, 0x37, 0xF4, 0x81, 0x4D, 0x63, 0xC7 ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n\n/*\n * Domain parameters for secp521r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\nstatic const mbedtls_mpi_uint secp521r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_2( 0xFF, 0x01 ),\n};\nstatic const mbedtls_mpi_uint secp521r1_b[] = {\n    BYTES_TO_T_UINT_8( 0x00, 0x3F, 0x50, 0x6B, 0xD4, 0x1F, 0x45, 0xEF ),\n    BYTES_TO_T_UINT_8( 0xF1, 0x34, 0x2C, 0x3D, 0x88, 0xDF, 0x73, 0x35 ),\n    BYTES_TO_T_UINT_8( 0x07, 0xBF, 0xB1, 0x3B, 0xBD, 0xC0, 0x52, 0x16 ),\n    BYTES_TO_T_UINT_8( 0x7B, 0x93, 0x7E, 0xEC, 0x51, 0x39, 0x19, 0x56 ),\n    BYTES_TO_T_UINT_8( 0xE1, 0x09, 0xF1, 0x8E, 0x91, 0x89, 0xB4, 0xB8 ),\n    BYTES_TO_T_UINT_8( 0xF3, 0x15, 0xB3, 0x99, 0x5B, 0x72, 0xDA, 0xA2 ),\n    BYTES_TO_T_UINT_8( 0xEE, 0x40, 0x85, 0xB6, 0xA0, 0x21, 0x9A, 0x92 ),\n    BYTES_TO_T_UINT_8( 0x1F, 0x9A, 0x1C, 0x8E, 0x61, 0xB9, 0x3E, 0x95 ),\n    BYTES_TO_T_UINT_2( 0x51, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp521r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x66, 0xBD, 0xE5, 0xC2, 0x31, 0x7E, 0x7E, 0xF9 ),\n    BYTES_TO_T_UINT_8( 0x9B, 0x42, 0x6A, 0x85, 0xC1, 0xB3, 0x48, 0x33 ),\n    BYTES_TO_T_UINT_8( 0xDE, 0xA8, 0xFF, 0xA2, 0x27, 0xC1, 0x1D, 0xFE ),\n    BYTES_TO_T_UINT_8( 0x28, 0x59, 0xE7, 0xEF, 0x77, 0x5E, 0x4B, 0xA1 ),\n    BYTES_TO_T_UINT_8( 0xBA, 0x3D, 0x4D, 0x6B, 0x60, 0xAF, 0x28, 0xF8 ),\n    BYTES_TO_T_UINT_8( 0x21, 0xB5, 0x3F, 0x05, 0x39, 0x81, 0x64, 0x9C ),\n    BYTES_TO_T_UINT_8( 0x42, 0xB4, 0x95, 0x23, 0x66, 0xCB, 0x3E, 0x9E ),\n    BYTES_TO_T_UINT_8( 0xCD, 0xE9, 0x04, 0x04, 0xB7, 0x06, 0x8E, 0x85 ),\n    BYTES_TO_T_UINT_2( 0xC6, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp521r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x50, 0x66, 0xD1, 0x9F, 0x76, 0x94, 0xBE, 0x88 ),\n    BYTES_TO_T_UINT_8( 0x40, 0xC2, 0x72, 0xA2, 0x86, 0x70, 0x3C, 0x35 ),\n    BYTES_TO_T_UINT_8( 0x61, 0x07, 0xAD, 0x3F, 0x01, 0xB9, 0x50, 0xC5 ),\n    BYTES_TO_T_UINT_8( 0x40, 0x26, 0xF4, 0x5E, 0x99, 0x72, 0xEE, 0x97 ),\n    BYTES_TO_T_UINT_8( 0x2C, 0x66, 0x3E, 0x27, 0x17, 0xBD, 0xAF, 0x17 ),\n    BYTES_TO_T_UINT_8( 0x68, 0x44, 0x9B, 0x57, 0x49, 0x44, 0xF5, 0x98 ),\n    BYTES_TO_T_UINT_8( 0xD9, 0x1B, 0x7D, 0x2C, 0xB4, 0x5F, 0x8A, 0x5C ),\n    BYTES_TO_T_UINT_8( 0x04, 0xC0, 0x3B, 0x9A, 0x78, 0x6A, 0x29, 0x39 ),\n    BYTES_TO_T_UINT_2( 0x18, 0x01 ),\n};\nstatic const mbedtls_mpi_uint secp521r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x09, 0x64, 0x38, 0x91, 0x1E, 0xB7, 0x6F, 0xBB ),\n    BYTES_TO_T_UINT_8( 0xAE, 0x47, 0x9C, 0x89, 0xB8, 0xC9, 0xB5, 0x3B ),\n    BYTES_TO_T_UINT_8( 0xD0, 0xA5, 0x09, 0xF7, 0x48, 0x01, 0xCC, 0x7F ),\n    BYTES_TO_T_UINT_8( 0x6B, 0x96, 0x2F, 0xBF, 0x83, 0x87, 0x86, 0x51 ),\n    BYTES_TO_T_UINT_8( 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_2( 0xFF, 0x01 ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\nstatic const mbedtls_mpi_uint secp192k1_p[] = {\n    BYTES_TO_T_UINT_8( 0x37, 0xEE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp192k1_a[] = {\n    BYTES_TO_T_UINT_2( 0x00, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp192k1_b[] = {\n    BYTES_TO_T_UINT_2( 0x03, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp192k1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x7D, 0x6C, 0xE0, 0xEA, 0xB1, 0xD1, 0xA5, 0x1D ),\n    BYTES_TO_T_UINT_8( 0x34, 0xF4, 0xB7, 0x80, 0x02, 0x7D, 0xB0, 0x26 ),\n    BYTES_TO_T_UINT_8( 0xAE, 0xE9, 0x57, 0xC0, 0x0E, 0xF1, 0x4F, 0xDB ),\n};\nstatic const mbedtls_mpi_uint secp192k1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x9D, 0x2F, 0x5E, 0xD9, 0x88, 0xAA, 0x82, 0x40 ),\n    BYTES_TO_T_UINT_8( 0x34, 0x86, 0xBE, 0x15, 0xD0, 0x63, 0x41, 0x84 ),\n    BYTES_TO_T_UINT_8( 0xA7, 0x28, 0x56, 0x9C, 0x6D, 0x2F, 0x2F, 0x9B ),\n};\nstatic const mbedtls_mpi_uint secp192k1_n[] = {\n    BYTES_TO_T_UINT_8( 0x8D, 0xFD, 0xDE, 0x74, 0x6A, 0x46, 0x69, 0x0F ),\n    BYTES_TO_T_UINT_8( 0x17, 0xFC, 0xF2, 0x26, 0xFE, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\nstatic const mbedtls_mpi_uint secp224k1_p[] = {\n    BYTES_TO_T_UINT_8( 0x6D, 0xE5, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_4( 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp224k1_a[] = {\n    BYTES_TO_T_UINT_2( 0x00, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp224k1_b[] = {\n    BYTES_TO_T_UINT_2( 0x05, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp224k1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x5C, 0xA4, 0xB7, 0xB6, 0x0E, 0x65, 0x7E, 0x0F ),\n    BYTES_TO_T_UINT_8( 0xA9, 0x75, 0x70, 0xE4, 0xE9, 0x67, 0xA4, 0x69 ),\n    BYTES_TO_T_UINT_8( 0xA1, 0x28, 0xFC, 0x30, 0xDF, 0x99, 0xF0, 0x4D ),\n    BYTES_TO_T_UINT_4( 0x33, 0x5B, 0x45, 0xA1 ),\n};\nstatic const mbedtls_mpi_uint secp224k1_gy[] = {\n    BYTES_TO_T_UINT_8( 0xA5, 0x61, 0x6D, 0x55, 0xDB, 0x4B, 0xCA, 0xE2 ),\n    BYTES_TO_T_UINT_8( 0x59, 0xBD, 0xB0, 0xC0, 0xF7, 0x19, 0xE3, 0xF7 ),\n    BYTES_TO_T_UINT_8( 0xD6, 0xFB, 0xCA, 0x82, 0x42, 0x34, 0xBA, 0x7F ),\n    BYTES_TO_T_UINT_4( 0xED, 0x9F, 0x08, 0x7E ),\n};\nstatic const mbedtls_mpi_uint secp224k1_n[] = {\n    BYTES_TO_T_UINT_8( 0xF7, 0xB1, 0x9F, 0x76, 0x71, 0xA9, 0xF0, 0xCA ),\n    BYTES_TO_T_UINT_8( 0x84, 0x61, 0xEC, 0xD2, 0xE8, 0xDC, 0x01, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\nstatic const mbedtls_mpi_uint secp256k1_p[] = {\n    BYTES_TO_T_UINT_8( 0x2F, 0xFC, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp256k1_a[] = {\n    BYTES_TO_T_UINT_2( 0x00, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp256k1_b[] = {\n    BYTES_TO_T_UINT_2( 0x07, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp256k1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x98, 0x17, 0xF8, 0x16, 0x5B, 0x81, 0xF2, 0x59 ),\n    BYTES_TO_T_UINT_8( 0xD9, 0x28, 0xCE, 0x2D, 0xDB, 0xFC, 0x9B, 0x02 ),\n    BYTES_TO_T_UINT_8( 0x07, 0x0B, 0x87, 0xCE, 0x95, 0x62, 0xA0, 0x55 ),\n    BYTES_TO_T_UINT_8( 0xAC, 0xBB, 0xDC, 0xF9, 0x7E, 0x66, 0xBE, 0x79 ),\n};\nstatic const mbedtls_mpi_uint secp256k1_gy[] = {\n    BYTES_TO_T_UINT_8( 0xB8, 0xD4, 0x10, 0xFB, 0x8F, 0xD0, 0x47, 0x9C ),\n    BYTES_TO_T_UINT_8( 0x19, 0x54, 0x85, 0xA6, 0x48, 0xB4, 0x17, 0xFD ),\n    BYTES_TO_T_UINT_8( 0xA8, 0x08, 0x11, 0x0E, 0xFC, 0xFB, 0xA4, 0x5D ),\n    BYTES_TO_T_UINT_8( 0x65, 0xC4, 0xA3, 0x26, 0x77, 0xDA, 0x3A, 0x48 ),\n};\nstatic const mbedtls_mpi_uint secp256k1_n[] = {\n    BYTES_TO_T_UINT_8( 0x41, 0x41, 0x36, 0xD0, 0x8C, 0x5E, 0xD2, 0xBF ),\n    BYTES_TO_T_UINT_8( 0x3B, 0xA0, 0x48, 0xAF, 0xE6, 0xDC, 0xAE, 0xBA ),\n    BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */\n\n/*\n * Domain parameters for brainpoolP256r1 (RFC 5639 3.4)\n */\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\nstatic const mbedtls_mpi_uint brainpoolP256r1_p[] = {\n    BYTES_TO_T_UINT_8( 0x77, 0x53, 0x6E, 0x1F, 0x1D, 0x48, 0x13, 0x20 ),\n    BYTES_TO_T_UINT_8( 0x28, 0x20, 0x26, 0xD5, 0x23, 0xF6, 0x3B, 0x6E ),\n    BYTES_TO_T_UINT_8( 0x72, 0x8D, 0x83, 0x9D, 0x90, 0x0A, 0x66, 0x3E ),\n    BYTES_TO_T_UINT_8( 0xBC, 0xA9, 0xEE, 0xA1, 0xDB, 0x57, 0xFB, 0xA9 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_a[] = {\n    BYTES_TO_T_UINT_8( 0xD9, 0xB5, 0x30, 0xF3, 0x44, 0x4B, 0x4A, 0xE9 ),\n    BYTES_TO_T_UINT_8( 0x6C, 0x5C, 0xDC, 0x26, 0xC1, 0x55, 0x80, 0xFB ),\n    BYTES_TO_T_UINT_8( 0xE7, 0xFF, 0x7A, 0x41, 0x30, 0x75, 0xF6, 0xEE ),\n    BYTES_TO_T_UINT_8( 0x57, 0x30, 0x2C, 0xFC, 0x75, 0x09, 0x5A, 0x7D ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_b[] = {\n    BYTES_TO_T_UINT_8( 0xB6, 0x07, 0x8C, 0xFF, 0x18, 0xDC, 0xCC, 0x6B ),\n    BYTES_TO_T_UINT_8( 0xCE, 0xE1, 0xF7, 0x5C, 0x29, 0x16, 0x84, 0x95 ),\n    BYTES_TO_T_UINT_8( 0xBF, 0x7C, 0xD7, 0xBB, 0xD9, 0xB5, 0x30, 0xF3 ),\n    BYTES_TO_T_UINT_8( 0x44, 0x4B, 0x4A, 0xE9, 0x6C, 0x5C, 0xDC, 0x26 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x62, 0x32, 0xCE, 0x9A, 0xBD, 0x53, 0x44, 0x3A ),\n    BYTES_TO_T_UINT_8( 0xC2, 0x23, 0xBD, 0xE3, 0xE1, 0x27, 0xDE, 0xB9 ),\n    BYTES_TO_T_UINT_8( 0xAF, 0xB7, 0x81, 0xFC, 0x2F, 0x48, 0x4B, 0x2C ),\n    BYTES_TO_T_UINT_8( 0xCB, 0x57, 0x7E, 0xCB, 0xB9, 0xAE, 0xD2, 0x8B ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x97, 0x69, 0x04, 0x2F, 0xC7, 0x54, 0x1D, 0x5C ),\n    BYTES_TO_T_UINT_8( 0x54, 0x8E, 0xED, 0x2D, 0x13, 0x45, 0x77, 0xC2 ),\n    BYTES_TO_T_UINT_8( 0xC9, 0x1D, 0x61, 0x14, 0x1A, 0x46, 0xF8, 0x97 ),\n    BYTES_TO_T_UINT_8( 0xFD, 0xC4, 0xDA, 0xC3, 0x35, 0xF8, 0x7E, 0x54 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_n[] = {\n    BYTES_TO_T_UINT_8( 0xA7, 0x56, 0x48, 0x97, 0x82, 0x0E, 0x1E, 0x90 ),\n    BYTES_TO_T_UINT_8( 0xF7, 0xA6, 0x61, 0xB5, 0xA3, 0x7A, 0x39, 0x8C ),\n    BYTES_TO_T_UINT_8( 0x71, 0x8D, 0x83, 0x9D, 0x90, 0x0A, 0x66, 0x3E ),\n    BYTES_TO_T_UINT_8( 0xBC, 0xA9, 0xEE, 0xA1, 0xDB, 0x57, 0xFB, 0xA9 ),\n};\n#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */\n\n/*\n * Domain parameters for brainpoolP384r1 (RFC 5639 3.6)\n */\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\nstatic const mbedtls_mpi_uint brainpoolP384r1_p[] = {\n    BYTES_TO_T_UINT_8( 0x53, 0xEC, 0x07, 0x31, 0x13, 0x00, 0x47, 0x87 ),\n    BYTES_TO_T_UINT_8( 0x71, 0x1A, 0x1D, 0x90, 0x29, 0xA7, 0xD3, 0xAC ),\n    BYTES_TO_T_UINT_8( 0x23, 0x11, 0xB7, 0x7F, 0x19, 0xDA, 0xB1, 0x12 ),\n    BYTES_TO_T_UINT_8( 0xB4, 0x56, 0x54, 0xED, 0x09, 0x71, 0x2F, 0x15 ),\n    BYTES_TO_T_UINT_8( 0xDF, 0x41, 0xE6, 0x50, 0x7E, 0x6F, 0x5D, 0x0F ),\n    BYTES_TO_T_UINT_8( 0x28, 0x6D, 0x38, 0xA3, 0x82, 0x1E, 0xB9, 0x8C ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_a[] = {\n    BYTES_TO_T_UINT_8( 0x26, 0x28, 0xCE, 0x22, 0xDD, 0xC7, 0xA8, 0x04 ),\n    BYTES_TO_T_UINT_8( 0xEB, 0xD4, 0x3A, 0x50, 0x4A, 0x81, 0xA5, 0x8A ),\n    BYTES_TO_T_UINT_8( 0x0F, 0xF9, 0x91, 0xBA, 0xEF, 0x65, 0x91, 0x13 ),\n    BYTES_TO_T_UINT_8( 0x87, 0x27, 0xB2, 0x4F, 0x8E, 0xA2, 0xBE, 0xC2 ),\n    BYTES_TO_T_UINT_8( 0xA0, 0xAF, 0x05, 0xCE, 0x0A, 0x08, 0x72, 0x3C ),\n    BYTES_TO_T_UINT_8( 0x0C, 0x15, 0x8C, 0x3D, 0xC6, 0x82, 0xC3, 0x7B ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_b[] = {\n    BYTES_TO_T_UINT_8( 0x11, 0x4C, 0x50, 0xFA, 0x96, 0x86, 0xB7, 0x3A ),\n    BYTES_TO_T_UINT_8( 0x94, 0xC9, 0xDB, 0x95, 0x02, 0x39, 0xB4, 0x7C ),\n    BYTES_TO_T_UINT_8( 0xD5, 0x62, 0xEB, 0x3E, 0xA5, 0x0E, 0x88, 0x2E ),\n    BYTES_TO_T_UINT_8( 0xA6, 0xD2, 0xDC, 0x07, 0xE1, 0x7D, 0xB7, 0x2F ),\n    BYTES_TO_T_UINT_8( 0x7C, 0x44, 0xF0, 0x16, 0x54, 0xB5, 0x39, 0x8B ),\n    BYTES_TO_T_UINT_8( 0x26, 0x28, 0xCE, 0x22, 0xDD, 0xC7, 0xA8, 0x04 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x1E, 0xAF, 0xD4, 0x47, 0xE2, 0xB2, 0x87, 0xEF ),\n    BYTES_TO_T_UINT_8( 0xAA, 0x46, 0xD6, 0x36, 0x34, 0xE0, 0x26, 0xE8 ),\n    BYTES_TO_T_UINT_8( 0xE8, 0x10, 0xBD, 0x0C, 0xFE, 0xCA, 0x7F, 0xDB ),\n    BYTES_TO_T_UINT_8( 0xE3, 0x4F, 0xF1, 0x7E, 0xE7, 0xA3, 0x47, 0x88 ),\n    BYTES_TO_T_UINT_8( 0x6B, 0x3F, 0xC1, 0xB7, 0x81, 0x3A, 0xA6, 0xA2 ),\n    BYTES_TO_T_UINT_8( 0xFF, 0x45, 0xCF, 0x68, 0xF0, 0x64, 0x1C, 0x1D ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x15, 0x53, 0x3C, 0x26, 0x41, 0x03, 0x82, 0x42 ),\n    BYTES_TO_T_UINT_8( 0x11, 0x81, 0x91, 0x77, 0x21, 0x46, 0x46, 0x0E ),\n    BYTES_TO_T_UINT_8( 0x28, 0x29, 0x91, 0xF9, 0x4F, 0x05, 0x9C, 0xE1 ),\n    BYTES_TO_T_UINT_8( 0x64, 0x58, 0xEC, 0xFE, 0x29, 0x0B, 0xB7, 0x62 ),\n    BYTES_TO_T_UINT_8( 0x52, 0xD5, 0xCF, 0x95, 0x8E, 0xEB, 0xB1, 0x5C ),\n    BYTES_TO_T_UINT_8( 0xA4, 0xC2, 0xF9, 0x20, 0x75, 0x1D, 0xBE, 0x8A ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x65, 0x65, 0x04, 0xE9, 0x02, 0x32, 0x88, 0x3B ),\n    BYTES_TO_T_UINT_8( 0x10, 0xC3, 0x7F, 0x6B, 0xAF, 0xB6, 0x3A, 0xCF ),\n    BYTES_TO_T_UINT_8( 0xA7, 0x25, 0x04, 0xAC, 0x6C, 0x6E, 0x16, 0x1F ),\n    BYTES_TO_T_UINT_8( 0xB3, 0x56, 0x54, 0xED, 0x09, 0x71, 0x2F, 0x15 ),\n    BYTES_TO_T_UINT_8( 0xDF, 0x41, 0xE6, 0x50, 0x7E, 0x6F, 0x5D, 0x0F ),\n    BYTES_TO_T_UINT_8( 0x28, 0x6D, 0x38, 0xA3, 0x82, 0x1E, 0xB9, 0x8C ),\n};\n#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */\n\n/*\n * Domain parameters for brainpoolP512r1 (RFC 5639 3.7)\n */\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\nstatic const mbedtls_mpi_uint brainpoolP512r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xF3, 0x48, 0x3A, 0x58, 0x56, 0x60, 0xAA, 0x28 ),\n    BYTES_TO_T_UINT_8( 0x85, 0xC6, 0x82, 0x2D, 0x2F, 0xFF, 0x81, 0x28 ),\n    BYTES_TO_T_UINT_8( 0xE6, 0x80, 0xA3, 0xE6, 0x2A, 0xA1, 0xCD, 0xAE ),\n    BYTES_TO_T_UINT_8( 0x42, 0x68, 0xC6, 0x9B, 0x00, 0x9B, 0x4D, 0x7D ),\n    BYTES_TO_T_UINT_8( 0x71, 0x08, 0x33, 0x70, 0xCA, 0x9C, 0x63, 0xD6 ),\n    BYTES_TO_T_UINT_8( 0x0E, 0xD2, 0xC9, 0xB3, 0xB3, 0x8D, 0x30, 0xCB ),\n    BYTES_TO_T_UINT_8( 0x07, 0xFC, 0xC9, 0x33, 0xAE, 0xE6, 0xD4, 0x3F ),\n    BYTES_TO_T_UINT_8( 0x8B, 0xC4, 0xE9, 0xDB, 0xB8, 0x9D, 0xDD, 0xAA ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_a[] = {\n    BYTES_TO_T_UINT_8( 0xCA, 0x94, 0xFC, 0x77, 0x4D, 0xAC, 0xC1, 0xE7 ),\n    BYTES_TO_T_UINT_8( 0xB9, 0xC7, 0xF2, 0x2B, 0xA7, 0x17, 0x11, 0x7F ),\n    BYTES_TO_T_UINT_8( 0xB5, 0xC8, 0x9A, 0x8B, 0xC9, 0xF1, 0x2E, 0x0A ),\n    BYTES_TO_T_UINT_8( 0xA1, 0x3A, 0x25, 0xA8, 0x5A, 0x5D, 0xED, 0x2D ),\n    BYTES_TO_T_UINT_8( 0xBC, 0x63, 0x98, 0xEA, 0xCA, 0x41, 0x34, 0xA8 ),\n    BYTES_TO_T_UINT_8( 0x10, 0x16, 0xF9, 0x3D, 0x8D, 0xDD, 0xCB, 0x94 ),\n    BYTES_TO_T_UINT_8( 0xC5, 0x4C, 0x23, 0xAC, 0x45, 0x71, 0x32, 0xE2 ),\n    BYTES_TO_T_UINT_8( 0x89, 0x3B, 0x60, 0x8B, 0x31, 0xA3, 0x30, 0x78 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_b[] = {\n    BYTES_TO_T_UINT_8( 0x23, 0xF7, 0x16, 0x80, 0x63, 0xBD, 0x09, 0x28 ),\n    BYTES_TO_T_UINT_8( 0xDD, 0xE5, 0xBA, 0x5E, 0xB7, 0x50, 0x40, 0x98 ),\n    BYTES_TO_T_UINT_8( 0x67, 0x3E, 0x08, 0xDC, 0xCA, 0x94, 0xFC, 0x77 ),\n    BYTES_TO_T_UINT_8( 0x4D, 0xAC, 0xC1, 0xE7, 0xB9, 0xC7, 0xF2, 0x2B ),\n    BYTES_TO_T_UINT_8( 0xA7, 0x17, 0x11, 0x7F, 0xB5, 0xC8, 0x9A, 0x8B ),\n    BYTES_TO_T_UINT_8( 0xC9, 0xF1, 0x2E, 0x0A, 0xA1, 0x3A, 0x25, 0xA8 ),\n    BYTES_TO_T_UINT_8( 0x5A, 0x5D, 0xED, 0x2D, 0xBC, 0x63, 0x98, 0xEA ),\n    BYTES_TO_T_UINT_8( 0xCA, 0x41, 0x34, 0xA8, 0x10, 0x16, 0xF9, 0x3D ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x22, 0xF8, 0xB9, 0xBC, 0x09, 0x22, 0x35, 0x8B ),\n    BYTES_TO_T_UINT_8( 0x68, 0x5E, 0x6A, 0x40, 0x47, 0x50, 0x6D, 0x7C ),\n    BYTES_TO_T_UINT_8( 0x5F, 0x7D, 0xB9, 0x93, 0x7B, 0x68, 0xD1, 0x50 ),\n    BYTES_TO_T_UINT_8( 0x8D, 0xD4, 0xD0, 0xE2, 0x78, 0x1F, 0x3B, 0xFF ),\n    BYTES_TO_T_UINT_8( 0x8E, 0x09, 0xD0, 0xF4, 0xEE, 0x62, 0x3B, 0xB4 ),\n    BYTES_TO_T_UINT_8( 0xC1, 0x16, 0xD9, 0xB5, 0x70, 0x9F, 0xED, 0x85 ),\n    BYTES_TO_T_UINT_8( 0x93, 0x6A, 0x4C, 0x9C, 0x2E, 0x32, 0x21, 0x5A ),\n    BYTES_TO_T_UINT_8( 0x64, 0xD9, 0x2E, 0xD8, 0xBD, 0xE4, 0xAE, 0x81 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x92, 0x08, 0xD8, 0x3A, 0x0F, 0x1E, 0xCD, 0x78 ),\n    BYTES_TO_T_UINT_8( 0x06, 0x54, 0xF0, 0xA8, 0x2F, 0x2B, 0xCA, 0xD1 ),\n    BYTES_TO_T_UINT_8( 0xAE, 0x63, 0x27, 0x8A, 0xD8, 0x4B, 0xCA, 0x5B ),\n    BYTES_TO_T_UINT_8( 0x5E, 0x48, 0x5F, 0x4A, 0x49, 0xDE, 0xDC, 0xB2 ),\n    BYTES_TO_T_UINT_8( 0x11, 0x81, 0x1F, 0x88, 0x5B, 0xC5, 0x00, 0xA0 ),\n    BYTES_TO_T_UINT_8( 0x1A, 0x7B, 0xA5, 0x24, 0x00, 0xF7, 0x09, 0xF2 ),\n    BYTES_TO_T_UINT_8( 0xFD, 0x22, 0x78, 0xCF, 0xA9, 0xBF, 0xEA, 0xC0 ),\n    BYTES_TO_T_UINT_8( 0xEC, 0x32, 0x63, 0x56, 0x5D, 0x38, 0xDE, 0x7D ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x69, 0x00, 0xA9, 0x9C, 0x82, 0x96, 0x87, 0xB5 ),\n    BYTES_TO_T_UINT_8( 0xDD, 0xDA, 0x5D, 0x08, 0x81, 0xD3, 0xB1, 0x1D ),\n    BYTES_TO_T_UINT_8( 0x47, 0x10, 0xAC, 0x7F, 0x19, 0x61, 0x86, 0x41 ),\n    BYTES_TO_T_UINT_8( 0x19, 0x26, 0xA9, 0x4C, 0x41, 0x5C, 0x3E, 0x55 ),\n    BYTES_TO_T_UINT_8( 0x70, 0x08, 0x33, 0x70, 0xCA, 0x9C, 0x63, 0xD6 ),\n    BYTES_TO_T_UINT_8( 0x0E, 0xD2, 0xC9, 0xB3, 0xB3, 0x8D, 0x30, 0xCB ),\n    BYTES_TO_T_UINT_8( 0x07, 0xFC, 0xC9, 0x33, 0xAE, 0xE6, 0xD4, 0x3F ),\n    BYTES_TO_T_UINT_8( 0x8B, 0xC4, 0xE9, 0xDB, 0xB8, 0x9D, 0xDD, 0xAA ),\n};\n#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */\n\n/*\n * Create an MPI from embedded constants\n * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)\n */\nstatic inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )\n{\n    X->s = 1;\n    X->n = len / sizeof( mbedtls_mpi_uint );\n    X->p = (mbedtls_mpi_uint *) p;\n}\n\n/*\n * Set an MPI to static value 1\n */\nstatic inline void ecp_mpi_set1( mbedtls_mpi *X )\n{\n    static mbedtls_mpi_uint one[] = { 1 };\n    X->s = 1;\n    X->n = 1;\n    X->p = one;\n}\n\n/*\n * Make group available from embedded constants\n */\nstatic int ecp_group_load( mbedtls_ecp_group *grp,\n                           const mbedtls_mpi_uint *p,  size_t plen,\n                           const mbedtls_mpi_uint *a,  size_t alen,\n                           const mbedtls_mpi_uint *b,  size_t blen,\n                           const mbedtls_mpi_uint *gx, size_t gxlen,\n                           const mbedtls_mpi_uint *gy, size_t gylen,\n                           const mbedtls_mpi_uint *n,  size_t nlen)\n{\n    ecp_mpi_load( &grp->P, p, plen );\n    if( a != NULL )\n        ecp_mpi_load( &grp->A, a, alen );\n    ecp_mpi_load( &grp->B, b, blen );\n    ecp_mpi_load( &grp->N, n, nlen );\n\n    ecp_mpi_load( &grp->G.X, gx, gxlen );\n    ecp_mpi_load( &grp->G.Y, gy, gylen );\n    ecp_mpi_set1( &grp->G.Z );\n\n    grp->pbits = mbedtls_mpi_bitlen( &grp->P );\n    grp->nbits = mbedtls_mpi_bitlen( &grp->N );\n\n    grp->h = 1;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_ECP_NIST_OPTIM)\n/* Forward declarations */\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\nstatic int ecp_mod_p192( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\nstatic int ecp_mod_p224( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\nstatic int ecp_mod_p256( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\nstatic int ecp_mod_p384( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\nstatic int ecp_mod_p521( mbedtls_mpi * );\n#endif\n\n#define NIST_MODP( P )      grp->modp = ecp_mod_ ## P;\n#else\n#define NIST_MODP( P )\n#endif /* MBEDTLS_ECP_NIST_OPTIM */\n\n/* Additional forward declarations */\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\nstatic int ecp_mod_p255( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)\nstatic int ecp_mod_p448( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\nstatic int ecp_mod_p192k1( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\nstatic int ecp_mod_p224k1( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\nstatic int ecp_mod_p256k1( mbedtls_mpi * );\n#endif\n\n#define LOAD_GROUP_A( G )   ecp_group_load( grp,            \\\n                            G ## _p,  sizeof( G ## _p  ),   \\\n                            G ## _a,  sizeof( G ## _a  ),   \\\n                            G ## _b,  sizeof( G ## _b  ),   \\\n                            G ## _gx, sizeof( G ## _gx ),   \\\n                            G ## _gy, sizeof( G ## _gy ),   \\\n                            G ## _n,  sizeof( G ## _n  ) )\n\n#define LOAD_GROUP( G )     ecp_group_load( grp,            \\\n                            G ## _p,  sizeof( G ## _p  ),   \\\n                            NULL,     0,                    \\\n                            G ## _b,  sizeof( G ## _b  ),   \\\n                            G ## _gx, sizeof( G ## _gx ),   \\\n                            G ## _gy, sizeof( G ## _gy ),   \\\n                            G ## _n,  sizeof( G ## _n  ) )\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n/*\n * Specialized function for creating the Curve25519 group\n */\nstatic int ecp_use_curve25519( mbedtls_ecp_group *grp )\n{\n    int ret;\n\n    /* Actually ( A + 2 ) / 4 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, \"01DB42\" ) );\n\n    /* P = 2^255 - 19 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );\n    grp->pbits = mbedtls_mpi_bitlen( &grp->P );\n\n    /* N = 2^252 + 27742317777372353535851937790883648493 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->N, 16,\n                                              \"14DEF9DEA2F79CD65812631A5CF5D3ED\" ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 252, 1 ) );\n\n    /* Y intentionally not set, since we use x/z coordinates.\n     * This is used as a marker to identify Montgomery curves! */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );\n    mbedtls_mpi_free( &grp->G.Y );\n\n    /* Actually, the required msb for private keys */\n    grp->nbits = 254;\n\ncleanup:\n    if( ret != 0 )\n        mbedtls_ecp_group_free( grp );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)\n/*\n * Specialized function for creating the Curve448 group\n */\nstatic int ecp_use_curve448( mbedtls_ecp_group *grp )\n{\n    mbedtls_mpi Ns;\n    int ret;\n\n    mbedtls_mpi_init( &Ns );\n\n    /* Actually ( A + 2 ) / 4 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, \"98AA\" ) );\n\n    /* P = 2^448 - 2^224 - 1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );\n    grp->pbits = mbedtls_mpi_bitlen( &grp->P );\n\n    /* Y intentionally not set, since we use x/z coordinates.\n     * This is used as a marker to identify Montgomery curves! */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );\n    mbedtls_mpi_free( &grp->G.Y );\n\n    /* N = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,\n                                              \"8335DC163BB124B65129C96FDE933D8D723A70AADC873D6D54A7BB0D\" ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );\n\n    /* Actually, the required msb for private keys */\n    grp->nbits = 447;\n\ncleanup:\n    mbedtls_mpi_free( &Ns );\n    if( ret != 0 )\n        mbedtls_ecp_group_free( grp );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */\n\n/*\n * Set a group using well-known domain parameters\n */\nint mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )\n{\n    mbedtls_ecp_group_free( grp );\n\n    grp->id = id;\n\n    switch( id )\n    {\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP192R1:\n            NIST_MODP( p192 );\n            return( LOAD_GROUP( secp192r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP224R1:\n            NIST_MODP( p224 );\n            return( LOAD_GROUP( secp224r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP256R1:\n            NIST_MODP( p256 );\n            return( LOAD_GROUP( secp256r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP384R1:\n            NIST_MODP( p384 );\n            return( LOAD_GROUP( secp384r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP521R1:\n            NIST_MODP( p521 );\n            return( LOAD_GROUP( secp521r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP192K1:\n            grp->modp = ecp_mod_p192k1;\n            return( LOAD_GROUP_A( secp192k1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP224K1:\n            grp->modp = ecp_mod_p224k1;\n            return( LOAD_GROUP_A( secp224k1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP256K1:\n            grp->modp = ecp_mod_p256k1;\n            return( LOAD_GROUP_A( secp256k1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\n        case MBEDTLS_ECP_DP_BP256R1:\n            return( LOAD_GROUP_A( brainpoolP256r1 ) );\n#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\n        case MBEDTLS_ECP_DP_BP384R1:\n            return( LOAD_GROUP_A( brainpoolP384r1 ) );\n#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\n        case MBEDTLS_ECP_DP_BP512R1:\n            return( LOAD_GROUP_A( brainpoolP512r1 ) );\n#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n        case MBEDTLS_ECP_DP_CURVE25519:\n            grp->modp = ecp_mod_p255;\n            return( ecp_use_curve25519( grp ) );\n#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)\n        case MBEDTLS_ECP_DP_CURVE448:\n            grp->modp = ecp_mod_p448;\n            return( ecp_use_curve448( grp ) );\n#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */\n\n        default:\n            mbedtls_ecp_group_free( grp );\n            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n    }\n}\n\n#if defined(MBEDTLS_ECP_NIST_OPTIM)\n/*\n * Fast reduction modulo the primes used by the NIST curves.\n *\n * These functions are critical for speed, but not needed for correct\n * operations. So, we make the choice to heavily rely on the internals of our\n * bignum library, which creates a tight coupling between these functions and\n * our MPI implementation.  However, the coupling between the ECP module and\n * MPI remains loose, since these functions can be deactivated at will.\n */\n\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n/*\n * Compared to the way things are presented in FIPS 186-3 D.2,\n * we proceed in columns, from right (least significant chunk) to left,\n * adding chunks to N in place, and keeping a carry for the next chunk.\n * This avoids moving things around in memory, and uselessly adding zeros,\n * compared to the more straightforward, line-oriented approach.\n *\n * For this prime we need to handle data in chunks of 64 bits.\n * Since this is always a multiple of our basic mbedtls_mpi_uint, we can\n * use a mbedtls_mpi_uint * to designate such a chunk, and small loops to handle it.\n */\n\n/* Add 64-bit chunks (dst += src) and update carry */\nstatic inline void add64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *src, mbedtls_mpi_uint *carry )\n{\n    unsigned char i;\n    mbedtls_mpi_uint c = 0;\n    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )\n    {\n        *dst += c;      c  = ( *dst < c );\n        *dst += *src;   c += ( *dst < *src );\n    }\n    *carry += c;\n}\n\n/* Add carry to a 64-bit chunk and update carry */\nstatic inline void carry64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *carry )\n{\n    unsigned char i;\n    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )\n    {\n        *dst += *carry;\n        *carry  = ( *dst < *carry );\n    }\n}\n\n#define WIDTH       8 / sizeof( mbedtls_mpi_uint )\n#define A( i )      N->p + i * WIDTH\n#define ADD( i )    add64( p, A( i ), &c )\n#define NEXT        p += WIDTH; carry64( p, &c )\n#define LAST        p += WIDTH; *p = c; while( ++p < end ) *p = 0\n\n/*\n * Fast quasi-reduction modulo p192 (FIPS 186-3 D.2.1)\n */\nstatic int ecp_mod_p192( mbedtls_mpi *N )\n{\n    int ret;\n    mbedtls_mpi_uint c = 0;\n    mbedtls_mpi_uint *p, *end;\n\n    /* Make sure we have enough blocks so that A(5) is legal */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, 6 * WIDTH ) );\n\n    p = N->p;\n    end = p + N->n;\n\n    ADD( 3 ); ADD( 5 );             NEXT; // A0 += A3 + A5\n    ADD( 3 ); ADD( 4 ); ADD( 5 );   NEXT; // A1 += A3 + A4 + A5\n    ADD( 4 ); ADD( 5 );             LAST; // A2 += A4 + A5\n\ncleanup:\n    return( ret );\n}\n\n#undef WIDTH\n#undef A\n#undef ADD\n#undef NEXT\n#undef LAST\n#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n/*\n * The reader is advised to first understand ecp_mod_p192() since the same\n * general structure is used here, but with additional complications:\n * (1) chunks of 32 bits, and (2) subtractions.\n */\n\n/*\n * For these primes, we need to handle data in chunks of 32 bits.\n * This makes it more complicated if we use 64 bits limbs in MPI,\n * which prevents us from using a uniform access method as for p192.\n *\n * So, we define a mini abstraction layer to access 32 bit chunks,\n * load them in 'cur' for work, and store them back from 'cur' when done.\n *\n * While at it, also define the size of N in terms of 32-bit chunks.\n */\n#define LOAD32      cur = A( i );\n\n#if defined(MBEDTLS_HAVE_INT32)  /* 32 bit */\n\n#define MAX32       N->n\n#define A( j )      N->p[j]\n#define STORE32     N->p[i] = cur;\n\n#else                               /* 64-bit */\n\n#define MAX32       N->n * 2\n#define A( j ) j % 2 ? (uint32_t)( N->p[j/2] >> 32 ) : (uint32_t)( N->p[j/2] )\n#define STORE32                                   \\\n    if( i % 2 ) {                                 \\\n        N->p[i/2] &= 0x00000000FFFFFFFF;          \\\n        N->p[i/2] |= ((mbedtls_mpi_uint) cur) << 32;        \\\n    } else {                                      \\\n        N->p[i/2] &= 0xFFFFFFFF00000000;          \\\n        N->p[i/2] |= (mbedtls_mpi_uint) cur;                \\\n    }\n\n#endif /* sizeof( mbedtls_mpi_uint ) */\n\n/*\n * Helpers for addition and subtraction of chunks, with signed carry.\n */\nstatic inline void add32( uint32_t *dst, uint32_t src, signed char *carry )\n{\n    *dst += src;\n    *carry += ( *dst < src );\n}\n\nstatic inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )\n{\n    *carry -= ( *dst < src );\n    *dst -= src;\n}\n\n#define ADD( j )    add32( &cur, A( j ), &c );\n#define SUB( j )    sub32( &cur, A( j ), &c );\n\n/*\n * Helpers for the main 'loop'\n * (see fix_negative for the motivation of C)\n */\n#define INIT( b )                                           \\\n    int ret;                                                \\\n    signed char c = 0, cc;                                  \\\n    uint32_t cur;                                           \\\n    size_t i = 0, bits = b;                                 \\\n    mbedtls_mpi C;                                                  \\\n    mbedtls_mpi_uint Cp[ b / 8 / sizeof( mbedtls_mpi_uint) + 1 ];               \\\n                                                            \\\n    C.s = 1;                                                \\\n    C.n = b / 8 / sizeof( mbedtls_mpi_uint) + 1;                      \\\n    C.p = Cp;                                               \\\n    memset( Cp, 0, C.n * sizeof( mbedtls_mpi_uint ) );                \\\n                                                            \\\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, b * 2 / 8 / sizeof( mbedtls_mpi_uint ) ) ); \\\n    LOAD32;\n\n#define NEXT                    \\\n    STORE32; i++; LOAD32;       \\\n    cc = c; c = 0;              \\\n    if( cc < 0 )                \\\n        sub32( &cur, -cc, &c ); \\\n    else                        \\\n        add32( &cur, cc, &c );  \\\n\n#define LAST                                    \\\n    STORE32; i++;                               \\\n    cur = c > 0 ? c : 0; STORE32;               \\\n    cur = 0; while( ++i < MAX32 ) { STORE32; }  \\\n    if( c < 0 ) fix_negative( N, c, &C, bits );\n\n/*\n * If the result is negative, we get it in the form\n * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'\n */\nstatic inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )\n{\n    int ret;\n\n    /* C = - c * 2^(bits + 32) */\n#if !defined(MBEDTLS_HAVE_INT64)\n    ((void) bits);\n#else\n    if( bits == 224 )\n        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;\n    else\n#endif\n        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;\n\n    /* N = - ( C - N ) */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );\n    N->s = -1;\n\ncleanup:\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n/*\n * Fast quasi-reduction modulo p224 (FIPS 186-3 D.2.2)\n */\nstatic int ecp_mod_p224( mbedtls_mpi *N )\n{\n    INIT( 224 );\n\n    SUB(  7 ); SUB( 11 );               NEXT; // A0 += -A7 - A11\n    SUB(  8 ); SUB( 12 );               NEXT; // A1 += -A8 - A12\n    SUB(  9 ); SUB( 13 );               NEXT; // A2 += -A9 - A13\n    SUB( 10 ); ADD(  7 ); ADD( 11 );    NEXT; // A3 += -A10 + A7 + A11\n    SUB( 11 ); ADD(  8 ); ADD( 12 );    NEXT; // A4 += -A11 + A8 + A12\n    SUB( 12 ); ADD(  9 ); ADD( 13 );    NEXT; // A5 += -A12 + A9 + A13\n    SUB( 13 ); ADD( 10 );               LAST; // A6 += -A13 + A10\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n/*\n * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)\n */\nstatic int ecp_mod_p256( mbedtls_mpi *N )\n{\n    INIT( 256 );\n\n    ADD(  8 ); ADD(  9 );\n    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0\n\n    ADD(  9 ); ADD( 10 );\n    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1\n\n    ADD( 10 ); ADD( 11 );\n    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2\n\n    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );\n    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3\n\n    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );\n    SUB(  9 ); SUB( 10 );                                   NEXT; // A4\n\n    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );\n    SUB( 10 ); SUB( 11 );                                   NEXT; // A5\n\n    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );\n    SUB(  8 ); SUB(  9 );                                   NEXT; // A6\n\n    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );\n    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n/*\n * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)\n */\nstatic int ecp_mod_p384( mbedtls_mpi *N )\n{\n    INIT( 384 );\n\n    ADD( 12 ); ADD( 21 ); ADD( 20 );\n    SUB( 23 );                                              NEXT; // A0\n\n    ADD( 13 ); ADD( 22 ); ADD( 23 );\n    SUB( 12 ); SUB( 20 );                                   NEXT; // A2\n\n    ADD( 14 ); ADD( 23 );\n    SUB( 13 ); SUB( 21 );                                   NEXT; // A2\n\n    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );\n    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3\n\n    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );\n    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4\n\n    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );\n    SUB( 16 );                                              NEXT; // A5\n\n    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );\n    SUB( 17 );                                              NEXT; // A6\n\n    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );\n    SUB( 18 );                                              NEXT; // A7\n\n    ADD( 20 ); ADD( 17 ); ADD( 16 );\n    SUB( 19 );                                              NEXT; // A8\n\n    ADD( 21 ); ADD( 18 ); ADD( 17 );\n    SUB( 20 );                                              NEXT; // A9\n\n    ADD( 22 ); ADD( 19 ); ADD( 18 );\n    SUB( 21 );                                              NEXT; // A10\n\n    ADD( 23 ); ADD( 20 ); ADD( 19 );\n    SUB( 22 );                                              LAST; // A11\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n\n#undef A\n#undef LOAD32\n#undef STORE32\n#undef MAX32\n#undef INIT\n#undef NEXT\n#undef LAST\n\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED ||\n          MBEDTLS_ECP_DP_SECP256R1_ENABLED ||\n          MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n/*\n * Here we have an actual Mersenne prime, so things are more straightforward.\n * However, chunks are aligned on a 'weird' boundary (521 bits).\n */\n\n/* Size of p521 in terms of mbedtls_mpi_uint */\n#define P521_WIDTH      ( 521 / 8 / sizeof( mbedtls_mpi_uint ) + 1 )\n\n/* Bits to keep in the most significant mbedtls_mpi_uint */\n#define P521_MASK       0x01FF\n\n/*\n * Fast quasi-reduction modulo p521 (FIPS 186-3 D.2.5)\n * Write N as A1 + 2^521 A0, return A0 + A1\n */\nstatic int ecp_mod_p521( mbedtls_mpi *N )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi M;\n    mbedtls_mpi_uint Mp[P521_WIDTH + 1];\n    /* Worst case for the size of M is when mbedtls_mpi_uint is 16 bits:\n     * we need to hold bits 513 to 1056, which is 34 limbs, that is\n     * P521_WIDTH + 1. Otherwise P521_WIDTH is enough. */\n\n    if( N->n < P521_WIDTH )\n        return( 0 );\n\n    /* M = A1 */\n    M.s = 1;\n    M.n = N->n - ( P521_WIDTH - 1 );\n    if( M.n > P521_WIDTH + 1 )\n        M.n = P521_WIDTH + 1;\n    M.p = Mp;\n    memcpy( Mp, N->p + P521_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 521 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );\n\n    /* N = A0 */\n    N->p[P521_WIDTH - 1] &= P521_MASK;\n    for( i = P521_WIDTH; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N = A0 + A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );\n\ncleanup:\n    return( ret );\n}\n\n#undef P521_WIDTH\n#undef P521_MASK\n#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */\n\n#endif /* MBEDTLS_ECP_NIST_OPTIM */\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n\n/* Size of p255 in terms of mbedtls_mpi_uint */\n#define P255_WIDTH      ( 255 / 8 / sizeof( mbedtls_mpi_uint ) + 1 )\n\n/*\n * Fast quasi-reduction modulo p255 = 2^255 - 19\n * Write N as A0 + 2^255 A1, return A0 + 19 * A1\n */\nstatic int ecp_mod_p255( mbedtls_mpi *N )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi M;\n    mbedtls_mpi_uint Mp[P255_WIDTH + 2];\n\n    if( N->n < P255_WIDTH )\n        return( 0 );\n\n    /* M = A1 */\n    M.s = 1;\n    M.n = N->n - ( P255_WIDTH - 1 );\n    if( M.n > P255_WIDTH + 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    M.p = Mp;\n    memset( Mp, 0, sizeof Mp );\n    memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );\n    M.n++; /* Make room for multiplication by 19 */\n\n    /* N = A0 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );\n    for( i = P255_WIDTH; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N = A0 + 19 * A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)\n\n/* Size of p448 in terms of mbedtls_mpi_uint */\n#define P448_WIDTH      ( 448 / 8 / sizeof( mbedtls_mpi_uint ) )\n\n/* Number of limbs fully occupied by 2^224 (max), and limbs used by it (min) */\n#define DIV_ROUND_UP( X, Y ) ( ( ( X ) + ( Y ) - 1 ) / ( Y ) )\n#define P224_WIDTH_MIN   ( 28 / sizeof( mbedtls_mpi_uint ) )\n#define P224_WIDTH_MAX   DIV_ROUND_UP( 28, sizeof( mbedtls_mpi_uint ) )\n#define P224_UNUSED_BITS ( ( P224_WIDTH_MAX * sizeof( mbedtls_mpi_uint ) * 8 ) - 224 )\n\n/*\n * Fast quasi-reduction modulo p448 = 2^448 - 2^224 - 1\n * Write N as A0 + 2^448 A1 and A1 as B0 + 2^224 B1, and return\n * A0 + A1 + B1 + (B0 + B1) * 2^224.  This is different to the reference\n * implementation of Curve448, which uses its own special 56-bit limbs rather\n * than a generic bignum library.  We could squeeze some extra speed out on\n * 32-bit machines by splitting N up into 32-bit limbs and doing the\n * arithmetic using the limbs directly as we do for the NIST primes above,\n * but for 64-bit targets it should use half the number of operations if we do\n * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.\n */\nstatic int ecp_mod_p448( mbedtls_mpi *N )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi M, Q;\n    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];\n\n    if( N->n <= P448_WIDTH )\n        return( 0 );\n\n    /* M = A1 */\n    M.s = 1;\n    M.n = N->n - ( P448_WIDTH );\n    if( M.n > P448_WIDTH )\n        /* Shouldn't be called with N larger than 2^896! */\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    M.p = Mp;\n    memset( Mp, 0, sizeof( Mp ) );\n    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );\n\n    /* N = A0 */\n    for( i = P448_WIDTH; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N += A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );\n\n    /* Q = B1, N += B1 */\n    Q = M;\n    Q.p = Qp;\n    memcpy( Qp, Mp, sizeof( Qp ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );\n\n    /* M = (B0 + B1) * 2^224, N += M */\n    if( sizeof( mbedtls_mpi_uint ) > 4 )\n        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );\n    for( i = P224_WIDTH_MAX; i < M.n; ++i )\n        Mp[i] = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );\n    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n/*\n * Fast quasi-reduction modulo P = 2^s - R,\n * with R about 33 bits, used by the Koblitz curves.\n *\n * Write N as A0 + 2^224 A1, return A0 + R * A1.\n * Actually do two passes, since R is big.\n */\n#define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P\n#define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R\nstatic inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,\n                                   size_t adjust, size_t shift, mbedtls_mpi_uint mask )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi M, R;\n    mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];\n\n    if( N->n < p_limbs )\n        return( 0 );\n\n    /* Init R */\n    R.s = 1;\n    R.p = Rp;\n    R.n = P_KOBLITZ_R;\n\n    /* Common setup for M */\n    M.s = 1;\n    M.p = Mp;\n\n    /* M = A1 */\n    M.n = N->n - ( p_limbs - adjust );\n    if( M.n > p_limbs + adjust )\n        M.n = p_limbs + adjust;\n    memset( Mp, 0, sizeof Mp );\n    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );\n    if( shift != 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );\n    M.n += R.n; /* Make room for multiplication by R */\n\n    /* N = A0 */\n    if( mask != 0 )\n        N->p[p_limbs - 1] &= mask;\n    for( i = p_limbs; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N = A0 + R * A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );\n\n    /* Second pass */\n\n    /* M = A1 */\n    M.n = N->n - ( p_limbs - adjust );\n    if( M.n > p_limbs + adjust )\n        M.n = p_limbs + adjust;\n    memset( Mp, 0, sizeof Mp );\n    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );\n    if( shift != 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );\n    M.n += R.n; /* Make room for multiplication by R */\n\n    /* N = A0 */\n    if( mask != 0 )\n        N->p[p_limbs - 1] &= mask;\n    for( i = p_limbs; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N = A0 + R * A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||\n          MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||\n          MBEDTLS_ECP_DP_SECP256K1_ENABLED) */\n\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n/*\n * Fast quasi-reduction modulo p192k1 = 2^192 - R,\n * with R = 2^32 + 2^12 + 2^8 + 2^7 + 2^6 + 2^3 + 1 = 0x0100001119\n */\nstatic int ecp_mod_p192k1( mbedtls_mpi *N )\n{\n    static mbedtls_mpi_uint Rp[] = {\n        BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };\n\n    return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );\n}\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n/*\n * Fast quasi-reduction modulo p224k1 = 2^224 - R,\n * with R = 2^32 + 2^12 + 2^11 + 2^9 + 2^7 + 2^4 + 2 + 1 = 0x0100001A93\n */\nstatic int ecp_mod_p224k1( mbedtls_mpi *N )\n{\n    static mbedtls_mpi_uint Rp[] = {\n        BYTES_TO_T_UINT_8( 0x93, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };\n\n#if defined(MBEDTLS_HAVE_INT64)\n    return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );\n#else\n    return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );\n#endif\n}\n\n#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n/*\n * Fast quasi-reduction modulo p256k1 = 2^256 - R,\n * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1\n */\nstatic int ecp_mod_p256k1( mbedtls_mpi *N )\n{\n    static mbedtls_mpi_uint Rp[] = {\n        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };\n    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );\n}\n#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */\n\n#endif /* !MBEDTLS_ECP_ALT */\n\n#endif /* MBEDTLS_ECP_C */\n","/*\n *  Entropy accumulator implementation\n *\n *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ENTROPY_C)\n\n#if defined(MBEDTLS_TEST_NULL_ENTROPY) && !defined(TARGET_SIMULATOR)\n#warning \"**** WARNING!  MBEDTLS_TEST_NULL_ENTROPY defined! \"\n#warning \"**** THIS BUILD HAS NO DEFINED ENTROPY SOURCES \"\n#warning \"**** THIS BUILD IS *NOT* SUITABLE FOR PRODUCTION USE \"\n#endif\n\n#include \"mbedtls/entropy.h\"\n#include \"mbedtls/entropy_poll.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_FS_IO)\n#include <stdio.h>\n#endif\n\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n#include \"mbedtls/platform.h\"\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf     printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#if defined(MBEDTLS_HAVEGE_C)\n#include \"mbedtls/havege.h\"\n#endif\n\n#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */\n\nvoid mbedtls_entropy_init( mbedtls_entropy_context *ctx )\n{\n    ctx->source_count = 0;\n    memset( ctx->source, 0, sizeof( ctx->source ) );\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_init( &ctx->mutex );\n#endif\n\n    ctx->accumulator_started = 0;\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n    mbedtls_sha512_init( &ctx->accumulator );\n#else\n    mbedtls_sha256_init( &ctx->accumulator );\n#endif\n#if defined(MBEDTLS_HAVEGE_C)\n    mbedtls_havege_init( &ctx->havege_data );\n#endif\n\n    /* Reminder: Update ENTROPY_HAVE_STRONG in the test files\n     *           when adding more strong entropy sources here. */\n\n#if defined(MBEDTLS_TEST_NULL_ENTROPY)\n    mbedtls_entropy_add_source( ctx, mbedtls_null_entropy_poll, NULL,\n                                1, MBEDTLS_ENTROPY_SOURCE_STRONG );\n#endif\n\n#if !defined(MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES)\n#if !defined(MBEDTLS_NO_PLATFORM_ENTROPY)\n    mbedtls_entropy_add_source( ctx, mbedtls_platform_entropy_poll, NULL,\n                                MBEDTLS_ENTROPY_MIN_PLATFORM,\n                                MBEDTLS_ENTROPY_SOURCE_STRONG );\n#endif\n#if defined(MBEDTLS_TIMING_C)\n    mbedtls_entropy_add_source( ctx, mbedtls_hardclock_poll, NULL,\n                                MBEDTLS_ENTROPY_MIN_HARDCLOCK,\n                                MBEDTLS_ENTROPY_SOURCE_WEAK );\n#endif\n#if defined(MBEDTLS_HAVEGE_C)\n    mbedtls_entropy_add_source( ctx, mbedtls_havege_poll, &ctx->havege_data,\n                                MBEDTLS_ENTROPY_MIN_HAVEGE,\n                                MBEDTLS_ENTROPY_SOURCE_STRONG );\n#endif\n#if defined(MBEDTLS_ENTROPY_HARDWARE_ALT)\n    mbedtls_entropy_add_source( ctx, mbedtls_hardware_poll, NULL,\n                                MBEDTLS_ENTROPY_MIN_HARDWARE,\n                                MBEDTLS_ENTROPY_SOURCE_STRONG );\n#endif\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n    mbedtls_entropy_add_source( ctx, mbedtls_nv_seed_poll, NULL,\n                                MBEDTLS_ENTROPY_BLOCK_SIZE,\n                                MBEDTLS_ENTROPY_SOURCE_STRONG );\n    ctx->initial_entropy_run = 0;\n#endif\n#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */\n}\n\nvoid mbedtls_entropy_free( mbedtls_entropy_context *ctx )\n{\n#if defined(MBEDTLS_HAVEGE_C)\n    mbedtls_havege_free( &ctx->havege_data );\n#endif\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_free( &ctx->mutex );\n#endif\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n    mbedtls_sha512_free( &ctx->accumulator );\n#else\n    mbedtls_sha256_free( &ctx->accumulator );\n#endif\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n    ctx->initial_entropy_run = 0;\n#endif\n    ctx->source_count = 0;\n    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );\n    ctx->accumulator_started = 0;\n}\n\nint mbedtls_entropy_add_source( mbedtls_entropy_context *ctx,\n                        mbedtls_entropy_f_source_ptr f_source, void *p_source,\n                        size_t threshold, int strong )\n{\n    int idx, ret = 0;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    idx = ctx->source_count;\n    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )\n    {\n        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;\n        goto exit;\n    }\n\n    ctx->source[idx].f_source  = f_source;\n    ctx->source[idx].p_source  = p_source;\n    ctx->source[idx].threshold = threshold;\n    ctx->source[idx].strong    = strong;\n\n    ctx->source_count++;\n\nexit:\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n/*\n * Entropy accumulator update\n */\nstatic int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,\n                           const unsigned char *data, size_t len )\n{\n    unsigned char header[2];\n    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];\n    size_t use_len = len;\n    const unsigned char *p = data;\n    int ret = 0;\n\n    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )\n    {\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )\n            goto cleanup;\n#else\n        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )\n            goto cleanup;\n#endif\n        p = tmp;\n        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;\n    }\n\n    header[0] = source_id;\n    header[1] = use_len & 0xFF;\n\n    /*\n     * Start the accumulator if this has not already happened. Note that\n     * it is sufficient to start the accumulator here only because all calls to\n     * gather entropy eventually execute this code.\n     */\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n    if( ctx->accumulator_started == 0 &&\n        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )\n        goto cleanup;\n    else\n        ctx->accumulator_started = 1;\n    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )\n        goto cleanup;\n    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );\n#else\n    if( ctx->accumulator_started == 0 &&\n        ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )\n        goto cleanup;\n    else\n        ctx->accumulator_started = 1;\n    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )\n        goto cleanup;\n    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );\n#endif\n\ncleanup:\n    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );\n\n    return( ret );\n}\n\nint mbedtls_entropy_update_manual( mbedtls_entropy_context *ctx,\n                           const unsigned char *data, size_t len )\n{\n    int ret;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    ret = entropy_update( ctx, MBEDTLS_ENTROPY_SOURCE_MANUAL, data, len );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n/*\n * Run through the different sources to add entropy to our accumulator\n */\nstatic int entropy_gather_internal( mbedtls_entropy_context *ctx )\n{\n    int ret, i, have_one_strong = 0;\n    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];\n    size_t olen;\n\n    if( ctx->source_count == 0 )\n        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );\n\n    /*\n     * Run through our entropy sources\n     */\n    for( i = 0; i < ctx->source_count; i++ )\n    {\n        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )\n            have_one_strong = 1;\n\n        olen = 0;\n        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,\n                        buf, MBEDTLS_ENTROPY_MAX_GATHER, &olen ) ) != 0 )\n        {\n            goto cleanup;\n        }\n\n        /*\n         * Add if we actually gathered something\n         */\n        if( olen > 0 )\n        {\n            if( ( ret = entropy_update( ctx, (unsigned char) i,\n                                        buf, olen ) ) != 0 )\n                return( ret );\n            ctx->source[i].size += olen;\n        }\n    }\n\n    if( have_one_strong == 0 )\n        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;\n\ncleanup:\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n    return( ret );\n}\n\n/*\n * Thread-safe wrapper for entropy_gather_internal()\n */\nint mbedtls_entropy_gather( mbedtls_entropy_context *ctx )\n{\n    int ret;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    ret = entropy_gather_internal( ctx );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\nint mbedtls_entropy_func( void *data, unsigned char *output, size_t len )\n{\n    int ret, count = 0, i, done;\n    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];\n\n    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n    /* Update the NV entropy seed before generating any entropy for outside\n     * use.\n     */\n    if( ctx->initial_entropy_run == 0 )\n    {\n        ctx->initial_entropy_run = 1;\n        if( ( ret = mbedtls_entropy_update_nv_seed( ctx ) ) != 0 )\n            return( ret );\n    }\n#endif\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    /*\n     * Always gather extra entropy before a call\n     */\n    do\n    {\n        if( count++ > ENTROPY_MAX_LOOP )\n        {\n            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;\n            goto exit;\n        }\n\n        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )\n            goto exit;\n\n        done = 1;\n        for( i = 0; i < ctx->source_count; i++ )\n            if( ctx->source[i].size < ctx->source[i].threshold )\n                done = 0;\n    }\n    while( ! done );\n\n    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );\n\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n    /*\n     * Note that at this stage it is assumed that the accumulator was started\n     * in a previous call to entropy_update(). If this is not guaranteed, the\n     * code below will fail.\n     */\n    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )\n        goto exit;\n\n    /*\n     * Reset accumulator and counters and recycle existing entropy\n     */\n    mbedtls_sha512_free( &ctx->accumulator );\n    mbedtls_sha512_init( &ctx->accumulator );\n    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,\n                                           MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )\n        goto exit;\n\n    /*\n     * Perform second SHA-512 on entropy\n     */\n    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,\n                                    buf, 0 ) ) != 0 )\n        goto exit;\n#else /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */\n    if( ( ret = mbedtls_sha256_finish_ret( &ctx->accumulator, buf ) ) != 0 )\n        goto exit;\n\n    /*\n     * Reset accumulator and counters and recycle existing entropy\n     */\n    mbedtls_sha256_free( &ctx->accumulator );\n    mbedtls_sha256_init( &ctx->accumulator );\n    if( ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, buf,\n                                           MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )\n        goto exit;\n\n    /*\n     * Perform second SHA-256 on entropy\n     */\n    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,\n                                    buf, 0 ) ) != 0 )\n        goto exit;\n#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */\n\n    for( i = 0; i < ctx->source_count; i++ )\n        ctx->source[i].size = 0;\n\n    memcpy( output, buf, len );\n\n    ret = 0;\n\nexit:\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\nint mbedtls_entropy_update_nv_seed( mbedtls_entropy_context *ctx )\n{\n    int ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];\n\n    /* Read new seed  and write it to NV */\n    if( ( ret = mbedtls_entropy_func( ctx, buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )\n        return( ret );\n\n    if( mbedtls_nv_seed_write( buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) < 0 )\n        return( MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR );\n\n    /* Manually update the remaining stream with a separator value to diverge */\n    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );\n    ret = mbedtls_entropy_update_manual( ctx, buf, MBEDTLS_ENTROPY_BLOCK_SIZE );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ENTROPY_NV_SEED */\n\n#if defined(MBEDTLS_FS_IO)\nint mbedtls_entropy_write_seed_file( mbedtls_entropy_context *ctx, const char *path )\n{\n    int ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;\n    FILE *f;\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];\n\n    if( ( f = fopen( path, \"wb\" ) ) == NULL )\n        return( MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR );\n\n    if( ( ret = mbedtls_entropy_func( ctx, buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )\n        goto exit;\n\n    if( fwrite( buf, 1, MBEDTLS_ENTROPY_BLOCK_SIZE, f ) != MBEDTLS_ENTROPY_BLOCK_SIZE )\n    {\n        ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;\n        goto exit;\n    }\n\n    ret = 0;\n\nexit:\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n    fclose( f );\n    return( ret );\n}\n\nint mbedtls_entropy_update_seed_file( mbedtls_entropy_context *ctx, const char *path )\n{\n    int ret = 0;\n    FILE *f;\n    size_t n;\n    unsigned char buf[ MBEDTLS_ENTROPY_MAX_SEED_SIZE ];\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR );\n\n    fseek( f, 0, SEEK_END );\n    n = (size_t) ftell( f );\n    fseek( f, 0, SEEK_SET );\n\n    if( n > MBEDTLS_ENTROPY_MAX_SEED_SIZE )\n        n = MBEDTLS_ENTROPY_MAX_SEED_SIZE;\n\n    if( fread( buf, 1, n, f ) != n )\n        ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;\n    else\n        ret = mbedtls_entropy_update_manual( ctx, buf, n );\n\n    fclose( f );\n\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_entropy_write_seed_file( ctx, path ) );\n}\n#endif /* MBEDTLS_FS_IO */\n\n#if defined(MBEDTLS_SELF_TEST)\n#if !defined(MBEDTLS_TEST_NULL_ENTROPY)\n/*\n * Dummy source function\n */\nstatic int entropy_dummy_source( void *data, unsigned char *output,\n                                 size_t len, size_t *olen )\n{\n    ((void) data);\n\n    memset( output, 0x2a, len );\n    *olen = len;\n\n    return( 0 );\n}\n#endif /* !MBEDTLS_TEST_NULL_ENTROPY */\n\n#if defined(MBEDTLS_ENTROPY_HARDWARE_ALT)\n\nstatic int mbedtls_entropy_source_self_test_gather( unsigned char *buf, size_t buf_len )\n{\n    int ret = 0;\n    size_t entropy_len = 0;\n    size_t olen = 0;\n    size_t attempts = buf_len;\n\n    while( attempts > 0 && entropy_len < buf_len )\n    {\n        if( ( ret = mbedtls_hardware_poll( NULL, buf + entropy_len,\n            buf_len - entropy_len, &olen ) ) != 0 )\n            return( ret );\n\n        entropy_len += olen;\n        attempts--;\n    }\n\n    if( entropy_len < buf_len )\n    {\n        ret = 1;\n    }\n\n    return( ret );\n}\n\n\nstatic int mbedtls_entropy_source_self_test_check_bits( const unsigned char *buf,\n                                                        size_t buf_len )\n{\n    unsigned char set= 0xFF;\n    unsigned char unset = 0x00;\n    size_t i;\n\n    for( i = 0; i < buf_len; i++ )\n    {\n        set &= buf[i];\n        unset |= buf[i];\n    }\n\n    return( set == 0xFF || unset == 0x00 );\n}\n\n/*\n * A test to ensure hat the entropy sources are functioning correctly\n * and there is no obvious failure. The test performs the following checks:\n *  - The entropy source is not providing only 0s (all bits unset) or 1s (all\n *    bits set).\n *  - The entropy source is not providing values in a pattern. Because the\n *    hardware could be providing data in an arbitrary length, this check polls\n *    the hardware entropy source twice and compares the result to ensure they\n *    are not equal.\n *  - The error code returned by the entropy source is not an error.\n */\nint mbedtls_entropy_source_self_test( int verbose )\n{\n    int ret = 0;\n    unsigned char buf0[2 * sizeof( unsigned long long int )];\n    unsigned char buf1[2 * sizeof( unsigned long long int )];\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ENTROPY_BIAS test: \" );\n\n    memset( buf0, 0x00, sizeof( buf0 ) );\n    memset( buf1, 0x00, sizeof( buf1 ) );\n\n    if( ( ret = mbedtls_entropy_source_self_test_gather( buf0, sizeof( buf0 ) ) ) != 0 )\n        goto cleanup;\n    if( ( ret = mbedtls_entropy_source_self_test_gather( buf1, sizeof( buf1 ) ) ) != 0 )\n        goto cleanup;\n\n    /* Make sure that the returned values are not all 0 or 1 */\n    if( ( ret = mbedtls_entropy_source_self_test_check_bits( buf0, sizeof( buf0 ) ) ) != 0 )\n        goto cleanup;\n    if( ( ret = mbedtls_entropy_source_self_test_check_bits( buf1, sizeof( buf1 ) ) ) != 0 )\n        goto cleanup;\n\n    /* Make sure that the entropy source is not returning values in a\n     * pattern */\n    ret = memcmp( buf0, buf1, sizeof( buf0 ) ) == 0;\n\ncleanup:\n    if( verbose != 0 )\n    {\n        if( ret != 0 )\n            mbedtls_printf( \"failed\\n\" );\n        else\n            mbedtls_printf( \"passed\\n\" );\n\n        mbedtls_printf( \"\\n\" );\n    }\n\n    return( ret != 0 );\n}\n\n#endif /* MBEDTLS_ENTROPY_HARDWARE_ALT */\n\n/*\n * The actual entropy quality is hard to test, but we can at least\n * test that the functions don't cause errors and write the correct\n * amount of data to buffers.\n */\nint mbedtls_entropy_self_test( int verbose )\n{\n    int ret = 1;\n#if !defined(MBEDTLS_TEST_NULL_ENTROPY)\n    mbedtls_entropy_context ctx;\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE] = { 0 };\n    unsigned char acc[MBEDTLS_ENTROPY_BLOCK_SIZE] = { 0 };\n    size_t i, j;\n#endif /* !MBEDTLS_TEST_NULL_ENTROPY */\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ENTROPY test: \" );\n\n#if !defined(MBEDTLS_TEST_NULL_ENTROPY)\n    mbedtls_entropy_init( &ctx );\n\n    /* First do a gather to make sure we have default sources */\n    if( ( ret = mbedtls_entropy_gather( &ctx ) ) != 0 )\n        goto cleanup;\n\n    ret = mbedtls_entropy_add_source( &ctx, entropy_dummy_source, NULL, 16,\n                                      MBEDTLS_ENTROPY_SOURCE_WEAK );\n    if( ret != 0 )\n        goto cleanup;\n\n    if( ( ret = mbedtls_entropy_update_manual( &ctx, buf, sizeof buf ) ) != 0 )\n        goto cleanup;\n\n    /*\n     * To test that mbedtls_entropy_func writes correct number of bytes:\n     * - use the whole buffer and rely on ASan to detect overruns\n     * - collect entropy 8 times and OR the result in an accumulator:\n     *   any byte should then be 0 with probably 2^(-64), so requiring\n     *   each of the 32 or 64 bytes to be non-zero has a false failure rate\n     *   of at most 2^(-58) which is acceptable.\n     */\n    for( i = 0; i < 8; i++ )\n    {\n        if( ( ret = mbedtls_entropy_func( &ctx, buf, sizeof( buf ) ) ) != 0 )\n            goto cleanup;\n\n        for( j = 0; j < sizeof( buf ); j++ )\n            acc[j] |= buf[j];\n    }\n\n    for( j = 0; j < sizeof( buf ); j++ )\n    {\n        if( acc[j] == 0 )\n        {\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n#if defined(MBEDTLS_ENTROPY_HARDWARE_ALT)\n    if( ( ret = mbedtls_entropy_source_self_test( 0 ) ) != 0 )\n        goto cleanup;\n#endif\n\ncleanup:\n    mbedtls_entropy_free( &ctx );\n#endif /* !MBEDTLS_TEST_NULL_ENTROPY */\n\n    if( verbose != 0 )\n    {\n        if( ret != 0 )\n            mbedtls_printf( \"failed\\n\" );\n        else\n            mbedtls_printf( \"passed\\n\" );\n\n        mbedtls_printf( \"\\n\" );\n    }\n\n    return( ret != 0 );\n}\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_ENTROPY_C */\n","/*\n *  Platform-specific and custom entropy polling functions\n *\n *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ENTROPY_C)\n\n#include \"mbedtls/entropy.h\"\n#include \"mbedtls/entropy_poll.h\"\n\n#if defined(MBEDTLS_TIMING_C)\n#include <string.h>\n#include \"mbedtls/timing.h\"\n#endif\n#if defined(MBEDTLS_HAVEGE_C)\n#include \"mbedtls/havege.h\"\n#endif\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n#include \"mbedtls/platform.h\"\n#endif\n\n#if !defined(MBEDTLS_NO_PLATFORM_ENTROPY)\n\n#if !defined(unix) && !defined(__unix__) && !defined(__unix) && \\\n    !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__)\n#error \"Platform entropy sources only work on Unix and Windows, see MBEDTLS_NO_PLATFORM_ENTROPY in config.h\"\n#endif\n\n#if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)\n\n#if !defined(_WIN32_WINNT)\n#define _WIN32_WINNT 0x0400\n#endif\n#include <windows.h>\n#include <wincrypt.h>\n\nint mbedtls_platform_entropy_poll( void *data, unsigned char *output, size_t len,\n                           size_t *olen )\n{\n    HCRYPTPROV provider;\n    ((void) data);\n    *olen = 0;\n\n    if( CryptAcquireContext( &provider, NULL, NULL,\n                              PROV_RSA_FULL, CRYPT_VERIFYCONTEXT ) == FALSE )\n    {\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n    }\n\n    if( CryptGenRandom( provider, (DWORD) len, output ) == FALSE )\n    {\n        CryptReleaseContext( provider, 0 );\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n    }\n\n    CryptReleaseContext( provider, 0 );\n    *olen = len;\n\n    return( 0 );\n}\n#else /* _WIN32 && !EFIX64 && !EFI32 */\n\n/*\n * Test for Linux getrandom() support.\n * Since there is no wrapper in the libc yet, use the generic syscall wrapper\n * available in GNU libc and compatible libc's (eg uClibc).\n */\n#if defined(__linux__) && defined(__GLIBC__)\n#include <unistd.h>\n#include <sys/syscall.h>\n#if defined(SYS_getrandom)\n#define HAVE_GETRANDOM\n\nstatic int getrandom_wrapper( void *buf, size_t buflen, unsigned int flags )\n{\n    /* MemSan cannot understand that the syscall writes to the buffer */\n#if defined(__has_feature)\n#if __has_feature(memory_sanitizer)\n    memset( buf, 0, buflen );\n#endif\n#endif\n\n    return( syscall( SYS_getrandom, buf, buflen, flags ) );\n}\n\n#include <sys/utsname.h>\n/* Check if version is at least 3.17.0 */\nstatic int check_version_3_17_plus( void )\n{\n    int minor;\n    struct utsname un;\n    const char *ver;\n\n    /* Get version information */\n    uname(&un);\n    ver = un.release;\n\n    /* Check major version; assume a single digit */\n    if( ver[0] < '3' || ver[0] > '9' || ver [1] != '.' )\n        return( -1 );\n\n    if( ver[0] - '0' > 3 )\n        return( 0 );\n\n    /* Ok, so now we know major == 3, check minor.\n     * Assume 1 or 2 digits. */\n    if( ver[2] < '0' || ver[2] > '9' )\n        return( -1 );\n\n    minor = ver[2] - '0';\n\n    if( ver[3] >= '0' && ver[3] <= '9' )\n        minor = 10 * minor + ver[3] - '0';\n    else if( ver [3] != '.' )\n        return( -1 );\n\n    if( minor < 17 )\n        return( -1 );\n\n    return( 0 );\n}\nstatic int has_getrandom = -1;\n#endif /* SYS_getrandom */\n#endif /* __linux__ */\n\n#include <stdio.h>\n\nint mbedtls_platform_entropy_poll( void *data,\n                           unsigned char *output, size_t len, size_t *olen )\n{\n    FILE *file;\n    size_t read_len;\n    ((void) data);\n\n#if defined(HAVE_GETRANDOM)\n    if( has_getrandom == -1 )\n        has_getrandom = ( check_version_3_17_plus() == 0 );\n\n    if( has_getrandom )\n    {\n        int ret;\n\n        if( ( ret = getrandom_wrapper( output, len, 0 ) ) < 0 )\n            return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n        *olen = ret;\n        return( 0 );\n    }\n#endif /* HAVE_GETRANDOM */\n\n    *olen = 0;\n\n    file = fopen( \"/dev/urandom\", \"rb\" );\n    if( file == NULL )\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n    read_len = fread( output, 1, len, file );\n    if( read_len != len )\n    {\n        fclose( file );\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n    }\n\n    fclose( file );\n    *olen = len;\n\n    return( 0 );\n}\n#endif /* _WIN32 && !EFIX64 && !EFI32 */\n#endif /* !MBEDTLS_NO_PLATFORM_ENTROPY */\n\n#if defined(MBEDTLS_TEST_NULL_ENTROPY)\nint mbedtls_null_entropy_poll( void *data,\n                    unsigned char *output, size_t len, size_t *olen )\n{\n    ((void) data);\n    ((void) output);\n    *olen = 0;\n\n    if( len < sizeof(unsigned char) )\n        return( 0 );\n\n    *olen = sizeof(unsigned char);\n\n    return( 0 );\n}\n#endif\n\n#if defined(MBEDTLS_TIMING_C)\nint mbedtls_hardclock_poll( void *data,\n                    unsigned char *output, size_t len, size_t *olen )\n{\n    unsigned long timer = mbedtls_timing_hardclock();\n    ((void) data);\n    *olen = 0;\n\n    if( len < sizeof(unsigned long) )\n        return( 0 );\n\n    memcpy( output, &timer, sizeof(unsigned long) );\n    *olen = sizeof(unsigned long);\n\n    return( 0 );\n}\n#endif /* MBEDTLS_TIMING_C */\n\n#if defined(MBEDTLS_HAVEGE_C)\nint mbedtls_havege_poll( void *data,\n                 unsigned char *output, size_t len, size_t *olen )\n{\n    mbedtls_havege_state *hs = (mbedtls_havege_state *) data;\n    *olen = 0;\n\n    if( mbedtls_havege_random( hs, output, len ) != 0 )\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n    *olen = len;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_HAVEGE_C */\n\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\nint mbedtls_nv_seed_poll( void *data,\n                          unsigned char *output, size_t len, size_t *olen )\n{\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];\n    size_t use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;\n    ((void) data);\n\n    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );\n\n    if( mbedtls_nv_seed_read( buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) < 0 )\n      return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n    if( len < use_len )\n      use_len = len;\n\n    memcpy( output, buf, use_len );\n    *olen = use_len;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_ENTROPY_NV_SEED */\n\n#endif /* MBEDTLS_ENTROPY_C */\n","/* Based on src/http/ngx_http_parse.c from NGINX copyright Igor Sysoev\n *\n * Additional changes are licensed under the same terms as NGINX and\n * copyright Joyent, Inc. and other Node contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n#include \"http_parser.h\"\n#include <assert.h>\n#include <stddef.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#ifndef ULLONG_MAX\n# define ULLONG_MAX ((uint64_t) -1) /* 2^64-1 */\n#endif\n\n#ifndef MIN\n# define MIN(a,b) ((a) < (b) ? (a) : (b))\n#endif\n\n#ifndef ARRAY_SIZE\n# define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))\n#endif\n\n#ifndef BIT_AT\n# define BIT_AT(a, i)                                                \\\n  (!!((unsigned int) (a)[(unsigned int) (i) >> 3] &                  \\\n   (1 << ((unsigned int) (i) & 7))))\n#endif\n\n#ifndef ELEM_AT\n# define ELEM_AT(a, i, v) ((unsigned int) (i) < ARRAY_SIZE(a) ? (a)[(i)] : (v))\n#endif\n\n#define SET_ERRNO(e)                                                 \\\ndo {                                                                 \\\n  parser->http_errno = (e);                                          \\\n} while(0)\n\n#define CURRENT_STATE() p_state\n#define UPDATE_STATE(V) p_state = (enum state) (V);\n#define RETURN(V)                                                    \\\ndo {                                                                 \\\n  parser->state = CURRENT_STATE();                                   \\\n  return (V);                                                        \\\n} while (0);\n#define REEXECUTE()                                                  \\\n  goto reexecute;                                                    \\\n\n\n#ifdef __GNUC__\n# define LIKELY(X) __builtin_expect(!!(X), 1)\n# define UNLIKELY(X) __builtin_expect(!!(X), 0)\n#else\n# define LIKELY(X) (X)\n# define UNLIKELY(X) (X)\n#endif\n\n\n/* Run the notify callback FOR, returning ER if it fails */\n#define CALLBACK_NOTIFY_(FOR, ER)                                    \\\ndo {                                                                 \\\n  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \\\n                                                                     \\\n  if (LIKELY(settings->on_##FOR)) {                                  \\\n    parser->state = CURRENT_STATE();                                 \\\n    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \\\n      SET_ERRNO(HPE_CB_##FOR);                                       \\\n    }                                                                \\\n    UPDATE_STATE(parser->state);                                     \\\n                                                                     \\\n    /* We either errored above or got paused; get out */             \\\n    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \\\n      return (ER);                                                   \\\n    }                                                                \\\n  }                                                                  \\\n} while (0)\n\n/* Run the notify callback FOR and consume the current byte */\n#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)\n\n/* Run the notify callback FOR and don't consume the current byte */\n#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)\n\n/* Run data callback FOR with LEN bytes, returning ER if it fails */\n#define CALLBACK_DATA_(FOR, LEN, ER)                                 \\\ndo {                                                                 \\\n  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \\\n                                                                     \\\n  if (FOR##_mark) {                                                  \\\n    if (LIKELY(settings->on_##FOR)) {                                \\\n      parser->state = CURRENT_STATE();                               \\\n      if (UNLIKELY(0 !=                                              \\\n                   settings->on_##FOR(parser, FOR##_mark, (LEN)))) { \\\n        SET_ERRNO(HPE_CB_##FOR);                                     \\\n      }                                                              \\\n      UPDATE_STATE(parser->state);                                   \\\n                                                                     \\\n      /* We either errored above or got paused; get out */           \\\n      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \\\n        return (ER);                                                 \\\n      }                                                              \\\n    }                                                                \\\n    FOR##_mark = NULL;                                               \\\n  }                                                                  \\\n} while (0)\n\n/* Run the data callback FOR and consume the current byte */\n#define CALLBACK_DATA(FOR)                                           \\\n    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)\n\n/* Run the data callback FOR and don't consume the current byte */\n#define CALLBACK_DATA_NOADVANCE(FOR)                                 \\\n    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)\n\n/* Set the mark FOR; non-destructive if mark is already set */\n#define MARK(FOR)                                                    \\\ndo {                                                                 \\\n  if (!FOR##_mark) {                                                 \\\n    FOR##_mark = p;                                                  \\\n  }                                                                  \\\n} while (0)\n\n/* Don't allow the total size of the HTTP headers (including the status\n * line) to exceed HTTP_MAX_HEADER_SIZE.  This check is here to protect\n * embedders against denial-of-service attacks where the attacker feeds\n * us a never-ending header that the embedder keeps buffering.\n *\n * This check is arguably the responsibility of embedders but we're doing\n * it on the embedder's behalf because most won't bother and this way we\n * make the web a little safer.  HTTP_MAX_HEADER_SIZE is still far bigger\n * than any reasonable request or response so this should never affect\n * day-to-day operation.\n */\n#define COUNT_HEADER_SIZE(V)                                         \\\ndo {                                                                 \\\n  parser->nread += (V);                                              \\\n  if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {            \\\n    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \\\n    goto error;                                                      \\\n  }                                                                  \\\n} while (0)\n\n\n#define PROXY_CONNECTION \"proxy-connection\"\n#define CONNECTION \"connection\"\n#define CONTENT_LENGTH \"content-length\"\n#define TRANSFER_ENCODING \"transfer-encoding\"\n#define UPGRADE \"upgrade\"\n#define CHUNKED \"chunked\"\n#define KEEP_ALIVE \"keep-alive\"\n#define CLOSE \"close\"\n\n\nstatic const char *method_strings[] =\n  {\n#define XX(num, name, string) #string,\n  HTTP_METHOD_MAP(XX)\n#undef XX\n  };\n\n\n/* Tokens as defined by rfc 2616. Also lowercases them.\n *        token       = 1*<any CHAR except CTLs or separators>\n *     separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *                    | \",\" | \";\" | \":\" | \"\\\" | <\">\n *                    | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *                    | \"{\" | \"}\" | SP | HT\n */\nstatic const char tokens[256] = {\n/*   0 nul    1 soh    2 stx    3 etx    4 eot    5 enq    6 ack    7 bel  */\n        0,       0,       0,       0,       0,       0,       0,       0,\n/*   8 bs     9 ht    10 nl    11 vt    12 np    13 cr    14 so    15 si   */\n        0,       0,       0,       0,       0,       0,       0,       0,\n/*  16 dle   17 dc1   18 dc2   19 dc3   20 dc4   21 nak   22 syn   23 etb */\n        0,       0,       0,       0,       0,       0,       0,       0,\n/*  24 can   25 em    26 sub   27 esc   28 fs    29 gs    30 rs    31 us  */\n        0,       0,       0,       0,       0,       0,       0,       0,\n/*  32 sp    33  !    34  \"    35  #    36  $    37  %    38  &    39  '  */\n        0,      '!',      0,      '#',     '$',     '%',     '&',    '\\'',\n/*  40  (    41  )    42  *    43  +    44  ,    45  -    46  .    47  /  */\n        0,       0,      '*',     '+',      0,      '-',     '.',      0,\n/*  48  0    49  1    50  2    51  3    52  4    53  5    54  6    55  7  */\n       '0',     '1',     '2',     '3',     '4',     '5',     '6',     '7',\n/*  56  8    57  9    58  :    59  ;    60  <    61  =    62  >    63  ?  */\n       '8',     '9',      0,       0,       0,       0,       0,       0,\n/*  64  @    65  A    66  B    67  C    68  D    69  E    70  F    71  G  */\n        0,      'a',     'b',     'c',     'd',     'e',     'f',     'g',\n/*  72  H    73  I    74  J    75  K    76  L    77  M    78  N    79  O  */\n       'h',     'i',     'j',     'k',     'l',     'm',     'n',     'o',\n/*  80  P    81  Q    82  R    83  S    84  T    85  U    86  V    87  W  */\n       'p',     'q',     'r',     's',     't',     'u',     'v',     'w',\n/*  88  X    89  Y    90  Z    91  [    92  \\    93  ]    94  ^    95  _  */\n       'x',     'y',     'z',      0,       0,       0,      '^',     '_',\n/*  96  `    97  a    98  b    99  c   100  d   101  e   102  f   103  g  */\n       '`',     'a',     'b',     'c',     'd',     'e',     'f',     'g',\n/* 104  h   105  i   106  j   107  k   108  l   109  m   110  n   111  o  */\n       'h',     'i',     'j',     'k',     'l',     'm',     'n',     'o',\n/* 112  p   113  q   114  r   115  s   116  t   117  u   118  v   119  w  */\n       'p',     'q',     'r',     's',     't',     'u',     'v',     'w',\n/* 120  x   121  y   122  z   123  {   124  |   125  }   126  ~   127 del */\n       'x',     'y',     'z',      0,      '|',      0,      '~',       0 };\n\n\nstatic const int8_t unhex[256] =\n  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  , 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,-1,-1,-1,-1,-1,-1\n  ,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  };\n\n\n#if HTTP_PARSER_STRICT\n# define T(v) 0\n#else\n# define T(v) v\n#endif\n\n\nstatic const uint8_t normal_url_char[32] = {\n/*   0 nul    1 soh    2 stx    3 etx    4 eot    5 enq    6 ack    7 bel  */\n        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,\n/*   8 bs     9 ht    10 nl    11 vt    12 np    13 cr    14 so    15 si   */\n        0    | T(2)   |   0    |   0    | T(16)  |   0    |   0    |   0,\n/*  16 dle   17 dc1   18 dc2   19 dc3   20 dc4   21 nak   22 syn   23 etb */\n        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,\n/*  24 can   25 em    26 sub   27 esc   28 fs    29 gs    30 rs    31 us  */\n        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,\n/*  32 sp    33  !    34  \"    35  #    36  $    37  %    38  &    39  '  */\n        0    |   2    |   4    |   0    |   16   |   32   |   64   |  128,\n/*  40  (    41  )    42  *    43  +    44  ,    45  -    46  .    47  /  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  48  0    49  1    50  2    51  3    52  4    53  5    54  6    55  7  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  56  8    57  9    58  :    59  ;    60  <    61  =    62  >    63  ?  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |   0,\n/*  64  @    65  A    66  B    67  C    68  D    69  E    70  F    71  G  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  72  H    73  I    74  J    75  K    76  L    77  M    78  N    79  O  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  80  P    81  Q    82  R    83  S    84  T    85  U    86  V    87  W  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  88  X    89  Y    90  Z    91  [    92  \\    93  ]    94  ^    95  _  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  96  `    97  a    98  b    99  c   100  d   101  e   102  f   103  g  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/* 104  h   105  i   106  j   107  k   108  l   109  m   110  n   111  o  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/* 112  p   113  q   114  r   115  s   116  t   117  u   118  v   119  w  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/* 120  x   121  y   122  z   123  {   124  |   125  }   126  ~   127 del */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |   0, };\n\n#undef T\n\nenum state\n  { s_dead = 1 /* important that this is > 0 */\n\n  , s_start_req_or_res\n  , s_res_or_resp_H\n  , s_start_res\n  , s_res_H\n  , s_res_HT\n  , s_res_HTT\n  , s_res_HTTP\n  , s_res_first_http_major\n  , s_res_http_major\n  , s_res_first_http_minor\n  , s_res_http_minor\n  , s_res_first_status_code\n  , s_res_status_code\n  , s_res_status_start\n  , s_res_status\n  , s_res_line_almost_done\n\n  , s_start_req\n\n  , s_req_method\n  , s_req_spaces_before_url\n  , s_req_schema\n  , s_req_schema_slash\n  , s_req_schema_slash_slash\n  , s_req_server_start\n  , s_req_server\n  , s_req_server_with_at\n  , s_req_path\n  , s_req_query_string_start\n  , s_req_query_string\n  , s_req_fragment_start\n  , s_req_fragment\n  , s_req_http_start\n  , s_req_http_H\n  , s_req_http_HT\n  , s_req_http_HTT\n  , s_req_http_HTTP\n  , s_req_first_http_major\n  , s_req_http_major\n  , s_req_first_http_minor\n  , s_req_http_minor\n  , s_req_line_almost_done\n\n  , s_header_field_start\n  , s_header_field\n  , s_header_value_discard_ws\n  , s_header_value_discard_ws_almost_done\n  , s_header_value_discard_lws\n  , s_header_value_start\n  , s_header_value\n  , s_header_value_lws\n\n  , s_header_almost_done\n\n  , s_chunk_size_start\n  , s_chunk_size\n  , s_chunk_parameters\n  , s_chunk_size_almost_done\n\n  , s_headers_almost_done\n  , s_headers_done\n\n  /* Important: 's_headers_done' must be the last 'header' state. All\n   * states beyond this must be 'body' states. It is used for overflow\n   * checking. See the PARSING_HEADER() macro.\n   */\n\n  , s_chunk_data\n  , s_chunk_data_almost_done\n  , s_chunk_data_done\n\n  , s_body_identity\n  , s_body_identity_eof\n\n  , s_message_done\n  };\n\n\n#define PARSING_HEADER(state) (state <= s_headers_done)\n\n\nenum header_states\n  { h_general = 0\n  , h_C\n  , h_CO\n  , h_CON\n\n  , h_matching_connection\n  , h_matching_proxy_connection\n  , h_matching_content_length\n  , h_matching_transfer_encoding\n  , h_matching_upgrade\n\n  , h_connection\n  , h_content_length\n  , h_transfer_encoding\n  , h_upgrade\n\n  , h_matching_transfer_encoding_chunked\n  , h_matching_connection_token_start\n  , h_matching_connection_keep_alive\n  , h_matching_connection_close\n  , h_matching_connection_upgrade\n  , h_matching_connection_token\n\n  , h_transfer_encoding_chunked\n  , h_connection_keep_alive\n  , h_connection_close\n  , h_connection_upgrade\n  };\n\nenum http_host_state\n  {\n    s_http_host_dead = 1\n  , s_http_userinfo_start\n  , s_http_userinfo\n  , s_http_host_start\n  , s_http_host_v6_start\n  , s_http_host\n  , s_http_host_v6\n  , s_http_host_v6_end\n  , s_http_host_v6_zone_start\n  , s_http_host_v6_zone\n  , s_http_host_port_start\n  , s_http_host_port\n};\n\n/* Macros for character classes; depends on strict-mode  */\n#define CR                  '\\r'\n#define LF                  '\\n'\n#define LOWER(c)            (unsigned char)(c | 0x20)\n#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')\n#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')\n#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))\n#define IS_HEX(c)           (IS_NUM(c) || (LOWER(c) >= 'a' && LOWER(c) <= 'f'))\n#define IS_MARK(c)          ((c) == '-' || (c) == '_' || (c) == '.' || \\\n  (c) == '!' || (c) == '~' || (c) == '*' || (c) == '\\'' || (c) == '(' || \\\n  (c) == ')')\n#define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \\\n  (c) == ';' || (c) == ':' || (c) == '&' || (c) == '=' || (c) == '+' || \\\n  (c) == '$' || (c) == ',')\n\n#define STRICT_TOKEN(c)     (tokens[(unsigned char)c])\n\n#if HTTP_PARSER_STRICT\n#define TOKEN(c)            (tokens[(unsigned char)c])\n#define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))\n#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')\n#else\n#define TOKEN(c)            ((c == ' ') ? ' ' : tokens[(unsigned char)c])\n#define IS_URL_CHAR(c)                                                         \\\n  (BIT_AT(normal_url_char, (unsigned char)c) || ((c) & 0x80))\n#define IS_HOST_CHAR(c)                                                        \\\n  (IS_ALPHANUM(c) || (c) == '.' || (c) == '-' || (c) == '_')\n#endif\n\n/**\n * Verify that a char is a valid visible (printable) US-ASCII\n * character or %x80-FF\n **/\n#define IS_HEADER_CHAR(ch)                                                     \\\n  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))\n\n#define start_state (parser->type == HTTP_REQUEST ? s_start_req : s_start_res)\n\n\n#if HTTP_PARSER_STRICT\n# define STRICT_CHECK(cond)                                          \\\ndo {                                                                 \\\n  if (cond) {                                                        \\\n    SET_ERRNO(HPE_STRICT);                                           \\\n    goto error;                                                      \\\n  }                                                                  \\\n} while (0)\n# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)\n#else\n# define STRICT_CHECK(cond)\n# define NEW_MESSAGE() start_state\n#endif\n\n\n/* Map errno values to strings for human-readable output */\n#define HTTP_STRERROR_GEN(n, s) { \"HPE_\" #n, s },\nstatic struct {\n  const char *name;\n  const char *description;\n} http_strerror_tab[] = {\n  HTTP_ERRNO_MAP(HTTP_STRERROR_GEN)\n};\n#undef HTTP_STRERROR_GEN\n\nint http_message_needs_eof(const http_parser *parser);\n\n/* Our URL parser.\n *\n * This is designed to be shared by http_parser_execute() for URL validation,\n * hence it has a state transition + byte-for-byte interface. In addition, it\n * is meant to be embedded in http_parser_parse_url(), which does the dirty\n * work of turning state transitions URL components for its API.\n *\n * This function should only be invoked with non-space characters. It is\n * assumed that the caller cares about (and can detect) the transition between\n * URL and non-URL states by looking for these.\n */\nstatic enum state\nparse_url_char(enum state s, const char ch)\n{\n  if (ch == ' ' || ch == '\\r' || ch == '\\n') {\n    return s_dead;\n  }\n\n#if HTTP_PARSER_STRICT\n  if (ch == '\\t' || ch == '\\f') {\n    return s_dead;\n  }\n#endif\n\n  switch (s) {\n    case s_req_spaces_before_url:\n      /* Proxied requests are followed by scheme of an absolute URI (alpha).\n       * All methods except CONNECT are followed by '/' or '*'.\n       */\n\n      if (ch == '/' || ch == '*') {\n        return s_req_path;\n      }\n\n      if (IS_ALPHA(ch)) {\n        return s_req_schema;\n      }\n\n      break;\n\n    case s_req_schema:\n      if (IS_ALPHA(ch)) {\n        return s;\n      }\n\n      if (ch == ':') {\n        return s_req_schema_slash;\n      }\n\n      break;\n\n    case s_req_schema_slash:\n      if (ch == '/') {\n        return s_req_schema_slash_slash;\n      }\n\n      break;\n\n    case s_req_schema_slash_slash:\n      if (ch == '/') {\n        return s_req_server_start;\n      }\n\n      break;\n\n    case s_req_server_with_at:\n      if (ch == '@') {\n        return s_dead;\n      }\n\n    /* FALLTHROUGH */\n    case s_req_server_start:\n    case s_req_server:\n      if (ch == '/') {\n        return s_req_path;\n      }\n\n      if (ch == '?') {\n        return s_req_query_string_start;\n      }\n\n      if (ch == '@') {\n        return s_req_server_with_at;\n      }\n\n      if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {\n        return s_req_server;\n      }\n\n      break;\n\n    case s_req_path:\n      if (IS_URL_CHAR(ch)) {\n        return s;\n      }\n\n      switch (ch) {\n        case '?':\n          return s_req_query_string_start;\n\n        case '#':\n          return s_req_fragment_start;\n      }\n\n      break;\n\n    case s_req_query_string_start:\n    case s_req_query_string:\n      if (IS_URL_CHAR(ch)) {\n        return s_req_query_string;\n      }\n\n      switch (ch) {\n        case '?':\n          /* allow extra '?' in query string */\n          return s_req_query_string;\n\n        case '#':\n          return s_req_fragment_start;\n      }\n\n      break;\n\n    case s_req_fragment_start:\n      if (IS_URL_CHAR(ch)) {\n        return s_req_fragment;\n      }\n\n      switch (ch) {\n        case '?':\n          return s_req_fragment;\n\n        case '#':\n          return s;\n      }\n\n      break;\n\n    case s_req_fragment:\n      if (IS_URL_CHAR(ch)) {\n        return s;\n      }\n\n      switch (ch) {\n        case '?':\n        case '#':\n          return s;\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  /* We should never fall out of the switch above unless there's an error */\n  return s_dead;\n}\n\nsize_t http_parser_execute (http_parser *parser,\n                            const http_parser_settings *settings,\n                            const char *data,\n                            size_t len)\n{\n  char c, ch;\n  int8_t unhex_val;\n  const char *p = data;\n  const char *header_field_mark = 0;\n  const char *header_value_mark = 0;\n  const char *url_mark = 0;\n  const char *body_mark = 0;\n  const char *status_mark = 0;\n  enum state p_state = (enum state) parser->state;\n  const unsigned int lenient = parser->lenient_http_headers;\n\n  /* We're in an error state. Don't bother doing anything. */\n  if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {\n    return 0;\n  }\n\n  if (len == 0) {\n    switch (CURRENT_STATE()) {\n      case s_body_identity_eof:\n        /* Use of CALLBACK_NOTIFY() here would erroneously return 1 byte read if\n         * we got paused.\n         */\n        CALLBACK_NOTIFY_NOADVANCE(message_complete);\n        return 0;\n\n      case s_dead:\n      case s_start_req_or_res:\n      case s_start_res:\n      case s_start_req:\n        return 0;\n\n      default:\n        SET_ERRNO(HPE_INVALID_EOF_STATE);\n        return 1;\n    }\n  }\n\n\n  if (CURRENT_STATE() == s_header_field)\n    header_field_mark = data;\n  if (CURRENT_STATE() == s_header_value)\n    header_value_mark = data;\n  switch (CURRENT_STATE()) {\n  case s_req_path:\n  case s_req_schema:\n  case s_req_schema_slash:\n  case s_req_schema_slash_slash:\n  case s_req_server_start:\n  case s_req_server:\n  case s_req_server_with_at:\n  case s_req_query_string_start:\n  case s_req_query_string:\n  case s_req_fragment_start:\n  case s_req_fragment:\n    url_mark = data;\n    break;\n  case s_res_status:\n    status_mark = data;\n    break;\n  default:\n    break;\n  }\n\n  for (p=data; p != data + len; p++) {\n    ch = *p;\n\n    if (PARSING_HEADER(CURRENT_STATE()))\n      COUNT_HEADER_SIZE(1);\n\nreexecute:\n    switch (CURRENT_STATE()) {\n\n      case s_dead:\n        /* this state is used after a 'Connection: close' message\n         * the parser will error out if it reads another message\n         */\n        if (LIKELY(ch == CR || ch == LF))\n          break;\n\n        SET_ERRNO(HPE_CLOSED_CONNECTION);\n        goto error;\n\n      case s_start_req_or_res:\n      {\n        if (ch == CR || ch == LF)\n          break;\n        parser->flags = 0;\n        parser->content_length = ULLONG_MAX;\n\n        if (ch == 'H') {\n          UPDATE_STATE(s_res_or_resp_H);\n\n          CALLBACK_NOTIFY(message_begin);\n        } else {\n          parser->type = HTTP_REQUEST;\n          UPDATE_STATE(s_start_req);\n          REEXECUTE();\n        }\n\n        break;\n      }\n\n      case s_res_or_resp_H:\n        if (ch == 'T') {\n          parser->type = HTTP_RESPONSE;\n          UPDATE_STATE(s_res_HT);\n        } else {\n          if (UNLIKELY(ch != 'E')) {\n            SET_ERRNO(HPE_INVALID_CONSTANT);\n            goto error;\n          }\n\n          parser->type = HTTP_REQUEST;\n          parser->method = HTTP_HEAD;\n          parser->index = 2;\n          UPDATE_STATE(s_req_method);\n        }\n        break;\n\n      case s_start_res:\n      {\n        parser->flags = 0;\n        parser->content_length = ULLONG_MAX;\n\n        switch (ch) {\n          case 'H':\n            UPDATE_STATE(s_res_H);\n            break;\n\n          case CR:\n          case LF:\n            break;\n\n          default:\n            SET_ERRNO(HPE_INVALID_CONSTANT);\n            goto error;\n        }\n\n        CALLBACK_NOTIFY(message_begin);\n        break;\n      }\n\n      case s_res_H:\n        STRICT_CHECK(ch != 'T');\n        UPDATE_STATE(s_res_HT);\n        break;\n\n      case s_res_HT:\n        STRICT_CHECK(ch != 'T');\n        UPDATE_STATE(s_res_HTT);\n        break;\n\n      case s_res_HTT:\n        STRICT_CHECK(ch != 'P');\n        UPDATE_STATE(s_res_HTTP);\n        break;\n\n      case s_res_HTTP:\n        STRICT_CHECK(ch != '/');\n        UPDATE_STATE(s_res_first_http_major);\n        break;\n\n      case s_res_first_http_major:\n        if (UNLIKELY(ch < '0' || ch > '9')) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_major = ch - '0';\n        UPDATE_STATE(s_res_http_major);\n        break;\n\n      /* major HTTP version or dot */\n      case s_res_http_major:\n      {\n        if (ch == '.') {\n          UPDATE_STATE(s_res_first_http_minor);\n          break;\n        }\n\n        if (!IS_NUM(ch)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_major *= 10;\n        parser->http_major += ch - '0';\n\n        if (UNLIKELY(parser->http_major > 999)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        break;\n      }\n\n      /* first digit of minor HTTP version */\n      case s_res_first_http_minor:\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_minor = ch - '0';\n        UPDATE_STATE(s_res_http_minor);\n        break;\n\n      /* minor HTTP version or end of request line */\n      case s_res_http_minor:\n      {\n        if (ch == ' ') {\n          UPDATE_STATE(s_res_first_status_code);\n          break;\n        }\n\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_minor *= 10;\n        parser->http_minor += ch - '0';\n\n        if (UNLIKELY(parser->http_minor > 999)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        break;\n      }\n\n      case s_res_first_status_code:\n      {\n        if (!IS_NUM(ch)) {\n          if (ch == ' ') {\n            break;\n          }\n\n          SET_ERRNO(HPE_INVALID_STATUS);\n          goto error;\n        }\n        parser->status_code = ch - '0';\n        UPDATE_STATE(s_res_status_code);\n        break;\n      }\n\n      case s_res_status_code:\n      {\n        if (!IS_NUM(ch)) {\n          switch (ch) {\n            case ' ':\n              UPDATE_STATE(s_res_status_start);\n              break;\n            case CR:\n              UPDATE_STATE(s_res_line_almost_done);\n              break;\n            case LF:\n              UPDATE_STATE(s_header_field_start);\n              break;\n            default:\n              SET_ERRNO(HPE_INVALID_STATUS);\n              goto error;\n          }\n          break;\n        }\n\n        parser->status_code *= 10;\n        parser->status_code += ch - '0';\n\n        if (UNLIKELY(parser->status_code > 999)) {\n          SET_ERRNO(HPE_INVALID_STATUS);\n          goto error;\n        }\n\n        break;\n      }\n\n      case s_res_status_start:\n      {\n        if (ch == CR) {\n          UPDATE_STATE(s_res_line_almost_done);\n          break;\n        }\n\n        if (ch == LF) {\n          UPDATE_STATE(s_header_field_start);\n          break;\n        }\n\n        MARK(status);\n        UPDATE_STATE(s_res_status);\n        parser->index = 0;\n        break;\n      }\n\n      case s_res_status:\n        if (ch == CR) {\n          UPDATE_STATE(s_res_line_almost_done);\n          CALLBACK_DATA(status);\n          break;\n        }\n\n        if (ch == LF) {\n          UPDATE_STATE(s_header_field_start);\n          CALLBACK_DATA(status);\n          break;\n        }\n\n        break;\n\n      case s_res_line_almost_done:\n        STRICT_CHECK(ch != LF);\n        UPDATE_STATE(s_header_field_start);\n        break;\n\n      case s_start_req:\n      {\n        if (ch == CR || ch == LF)\n          break;\n        parser->flags = 0;\n        parser->content_length = ULLONG_MAX;\n\n        if (UNLIKELY(!IS_ALPHA(ch))) {\n          SET_ERRNO(HPE_INVALID_METHOD);\n          goto error;\n        }\n\n        parser->method = (enum http_method) 0;\n        parser->index = 1;\n        switch (ch) {\n          case 'A': parser->method = HTTP_ACL; break;\n          case 'B': parser->method = HTTP_BIND; break;\n          case 'C': parser->method = HTTP_CONNECT; /* or COPY, CHECKOUT */ break;\n          case 'D': parser->method = HTTP_DELETE; break;\n          case 'G': parser->method = HTTP_GET; break;\n          case 'H': parser->method = HTTP_HEAD; break;\n          case 'L': parser->method = HTTP_LOCK; /* or LINK */ break;\n          case 'M': parser->method = HTTP_MKCOL; /* or MOVE, MKACTIVITY, MERGE, M-SEARCH, MKCALENDAR */ break;\n          case 'N': parser->method = HTTP_NOTIFY; break;\n          case 'O': parser->method = HTTP_OPTIONS; break;\n          case 'P': parser->method = HTTP_POST;\n            /* or PROPFIND|PROPPATCH|PUT|PATCH|PURGE */\n            break;\n          case 'R': parser->method = HTTP_REPORT; /* or REBIND */ break;\n          case 'S': parser->method = HTTP_SUBSCRIBE; /* or SEARCH */ break;\n          case 'T': parser->method = HTTP_TRACE; break;\n          case 'U': parser->method = HTTP_UNLOCK; /* or UNSUBSCRIBE, UNBIND, UNLINK */ break;\n          default:\n            SET_ERRNO(HPE_INVALID_METHOD);\n            goto error;\n        }\n        UPDATE_STATE(s_req_method);\n\n        CALLBACK_NOTIFY(message_begin);\n\n        break;\n      }\n\n      case s_req_method:\n      {\n        const char *matcher;\n        if (UNLIKELY(ch == '\\0')) {\n          SET_ERRNO(HPE_INVALID_METHOD);\n          goto error;\n        }\n\n        matcher = method_strings[parser->method];\n        if (ch == ' ' && matcher[parser->index] == '\\0') {\n          UPDATE_STATE(s_req_spaces_before_url);\n        } else if (ch == matcher[parser->index]) {\n          ; /* nada */\n        } else if (IS_ALPHA(ch)) {\n\n          switch (parser->method << 16 | parser->index << 8 | ch) {\n#define XX(meth, pos, ch, new_meth) \\\n            case (HTTP_##meth << 16 | pos << 8 | ch): \\\n              parser->method = HTTP_##new_meth; break;\n\n            XX(POST,      1, 'U', PUT)\n            XX(POST,      1, 'A', PATCH)\n            XX(CONNECT,   1, 'H', CHECKOUT)\n            XX(CONNECT,   2, 'P', COPY)\n            XX(MKCOL,     1, 'O', MOVE)\n            XX(MKCOL,     1, 'E', MERGE)\n            XX(MKCOL,     2, 'A', MKACTIVITY)\n            XX(MKCOL,     3, 'A', MKCALENDAR)\n            XX(SUBSCRIBE, 1, 'E', SEARCH)\n            XX(REPORT,    2, 'B', REBIND)\n            XX(POST,      1, 'R', PROPFIND)\n            XX(PROPFIND,  4, 'P', PROPPATCH)\n            XX(PUT,       2, 'R', PURGE)\n            XX(LOCK,      1, 'I', LINK)\n            XX(UNLOCK,    2, 'S', UNSUBSCRIBE)\n            XX(UNLOCK,    2, 'B', UNBIND)\n            XX(UNLOCK,    3, 'I', UNLINK)\n#undef XX\n\n            default:\n              SET_ERRNO(HPE_INVALID_METHOD);\n              goto error;\n          }\n        } else if (ch == '-' &&\n                   parser->index == 1 &&\n                   parser->method == HTTP_MKCOL) {\n          parser->method = HTTP_MSEARCH;\n        } else {\n          SET_ERRNO(HPE_INVALID_METHOD);\n          goto error;\n        }\n\n        ++parser->index;\n        break;\n      }\n\n      case s_req_spaces_before_url:\n      {\n        if (ch == ' ') break;\n\n        MARK(url);\n        if (parser->method == HTTP_CONNECT) {\n          UPDATE_STATE(s_req_server_start);\n        }\n\n        UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));\n        if (UNLIKELY(CURRENT_STATE() == s_dead)) {\n          SET_ERRNO(HPE_INVALID_URL);\n          goto error;\n        }\n\n        break;\n      }\n\n      case s_req_schema:\n      case s_req_schema_slash:\n      case s_req_schema_slash_slash:\n      case s_req_server_start:\n      {\n        switch (ch) {\n          /* No whitespace allowed here */\n          case ' ':\n          case CR:\n          case LF:\n            SET_ERRNO(HPE_INVALID_URL);\n            goto error;\n          default:\n            UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));\n            if (UNLIKELY(CURRENT_STATE() == s_dead)) {\n              SET_ERRNO(HPE_INVALID_URL);\n              goto error;\n            }\n        }\n\n        break;\n      }\n\n      case s_req_server:\n      case s_req_server_with_at:\n      case s_req_path:\n      case s_req_query_string_start:\n      case s_req_query_string:\n      case s_req_fragment_start:\n      case s_req_fragment:\n      {\n        switch (ch) {\n          case ' ':\n            UPDATE_STATE(s_req_http_start);\n            CALLBACK_DATA(url);\n            break;\n          case CR:\n          case LF:\n            parser->http_major = 0;\n            parser->http_minor = 9;\n            UPDATE_STATE((ch == CR) ?\n              s_req_line_almost_done :\n              s_header_field_start);\n            CALLBACK_DATA(url);\n            break;\n          default:\n            UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));\n            if (UNLIKELY(CURRENT_STATE() == s_dead)) {\n              SET_ERRNO(HPE_INVALID_URL);\n              goto error;\n            }\n        }\n        break;\n      }\n\n      case s_req_http_start:\n        switch (ch) {\n          case 'H':\n            UPDATE_STATE(s_req_http_H);\n            break;\n          case ' ':\n            break;\n          default:\n            SET_ERRNO(HPE_INVALID_CONSTANT);\n            goto error;\n        }\n        break;\n\n      case s_req_http_H:\n        STRICT_CHECK(ch != 'T');\n        UPDATE_STATE(s_req_http_HT);\n        break;\n\n      case s_req_http_HT:\n        STRICT_CHECK(ch != 'T');\n        UPDATE_STATE(s_req_http_HTT);\n        break;\n\n      case s_req_http_HTT:\n        STRICT_CHECK(ch != 'P');\n        UPDATE_STATE(s_req_http_HTTP);\n        break;\n\n      case s_req_http_HTTP:\n        STRICT_CHECK(ch != '/');\n        UPDATE_STATE(s_req_first_http_major);\n        break;\n\n      /* first digit of major HTTP version */\n      case s_req_first_http_major:\n        if (UNLIKELY(ch < '1' || ch > '9')) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_major = ch - '0';\n        UPDATE_STATE(s_req_http_major);\n        break;\n\n      /* major HTTP version or dot */\n      case s_req_http_major:\n      {\n        if (ch == '.') {\n          UPDATE_STATE(s_req_first_http_minor);\n          break;\n        }\n\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_major *= 10;\n        parser->http_major += ch - '0';\n\n        if (UNLIKELY(parser->http_major > 999)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        break;\n      }\n\n      /* first digit of minor HTTP version */\n      case s_req_first_http_minor:\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_minor = ch - '0';\n        UPDATE_STATE(s_req_http_minor);\n        break;\n\n      /* minor HTTP version or end of request line */\n      case s_req_http_minor:\n      {\n        if (ch == CR) {\n          UPDATE_STATE(s_req_line_almost_done);\n          break;\n        }\n\n        if (ch == LF) {\n          UPDATE_STATE(s_header_field_start);\n          break;\n        }\n\n        /* XXX allow spaces after digit? */\n\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_minor *= 10;\n        parser->http_minor += ch - '0';\n\n        if (UNLIKELY(parser->http_minor > 999)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        break;\n      }\n\n      /* end of request line */\n      case s_req_line_almost_done:\n      {\n        if (UNLIKELY(ch != LF)) {\n          SET_ERRNO(HPE_LF_EXPECTED);\n          goto error;\n        }\n\n        UPDATE_STATE(s_header_field_start);\n        break;\n      }\n\n      case s_header_field_start:\n      {\n        if (ch == CR) {\n          UPDATE_STATE(s_headers_almost_done);\n          break;\n        }\n\n        if (ch == LF) {\n          /* they might be just sending \\n instead of \\r\\n so this would be\n           * the second \\n to denote the end of headers*/\n          UPDATE_STATE(s_headers_almost_done);\n          REEXECUTE();\n        }\n\n        c = TOKEN(ch);\n\n        if (UNLIKELY(!c)) {\n          SET_ERRNO(HPE_INVALID_HEADER_TOKEN);\n          goto error;\n        }\n\n        MARK(header_field);\n\n        parser->index = 0;\n        UPDATE_STATE(s_header_field);\n\n        switch (c) {\n          case 'c':\n            parser->header_state = h_C;\n            break;\n\n          case 'p':\n            parser->header_state = h_matching_proxy_connection;\n            break;\n\n          case 't':\n            parser->header_state = h_matching_transfer_encoding;\n            break;\n\n          case 'u':\n            parser->header_state = h_matching_upgrade;\n            break;\n\n          default:\n            parser->header_state = h_general;\n            break;\n        }\n        break;\n      }\n\n      case s_header_field:\n      {\n        const char* start = p;\n        for (; p != data + len; p++) {\n          ch = *p;\n          c = TOKEN(ch);\n\n          if (!c)\n            break;\n\n          switch (parser->header_state) {\n            case h_general:\n              break;\n\n            case h_C:\n              parser->index++;\n              parser->header_state = (c == 'o' ? h_CO : h_general);\n              break;\n\n            case h_CO:\n              parser->index++;\n              parser->header_state = (c == 'n' ? h_CON : h_general);\n              break;\n\n            case h_CON:\n              parser->index++;\n              switch (c) {\n                case 'n':\n                  parser->header_state = h_matching_connection;\n                  break;\n                case 't':\n                  parser->header_state = h_matching_content_length;\n                  break;\n                default:\n                  parser->header_state = h_general;\n                  break;\n              }\n              break;\n\n            /* connection */\n\n            case h_matching_connection:\n              parser->index++;\n              if (parser->index > sizeof(CONNECTION)-1\n                  || c != CONNECTION[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(CONNECTION)-2) {\n                parser->header_state = h_connection;\n              }\n              break;\n\n            /* proxy-connection */\n\n            case h_matching_proxy_connection:\n              parser->index++;\n              if (parser->index > sizeof(PROXY_CONNECTION)-1\n                  || c != PROXY_CONNECTION[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(PROXY_CONNECTION)-2) {\n                parser->header_state = h_connection;\n              }\n              break;\n\n            /* content-length */\n\n            case h_matching_content_length:\n              parser->index++;\n              if (parser->index > sizeof(CONTENT_LENGTH)-1\n                  || c != CONTENT_LENGTH[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(CONTENT_LENGTH)-2) {\n                parser->header_state = h_content_length;\n              }\n              break;\n\n            /* transfer-encoding */\n\n            case h_matching_transfer_encoding:\n              parser->index++;\n              if (parser->index > sizeof(TRANSFER_ENCODING)-1\n                  || c != TRANSFER_ENCODING[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(TRANSFER_ENCODING)-2) {\n                parser->header_state = h_transfer_encoding;\n              }\n              break;\n\n            /* upgrade */\n\n            case h_matching_upgrade:\n              parser->index++;\n              if (parser->index > sizeof(UPGRADE)-1\n                  || c != UPGRADE[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(UPGRADE)-2) {\n                parser->header_state = h_upgrade;\n              }\n              break;\n\n            case h_connection:\n            case h_content_length:\n            case h_transfer_encoding:\n            case h_upgrade:\n              if (ch != ' ') parser->header_state = h_general;\n              break;\n\n            default:\n              assert(0 && \"Unknown header_state\");\n              break;\n          }\n        }\n\n        COUNT_HEADER_SIZE(p - start);\n\n        if (p == data + len) {\n          --p;\n          break;\n        }\n\n        if (ch == ':') {\n          UPDATE_STATE(s_header_value_discard_ws);\n          CALLBACK_DATA(header_field);\n          break;\n        }\n\n        SET_ERRNO(HPE_INVALID_HEADER_TOKEN);\n        goto error;\n      }\n\n      case s_header_value_discard_ws:\n        if (ch == ' ' || ch == '\\t') break;\n\n        if (ch == CR) {\n          UPDATE_STATE(s_header_value_discard_ws_almost_done);\n          break;\n        }\n\n        if (ch == LF) {\n          UPDATE_STATE(s_header_value_discard_lws);\n          break;\n        }\n\n        /* FALLTHROUGH */\n\n      case s_header_value_start:\n      {\n        MARK(header_value);\n\n        UPDATE_STATE(s_header_value);\n        parser->index = 0;\n\n        c = LOWER(ch);\n\n        switch (parser->header_state) {\n          case h_upgrade:\n            parser->flags |= F_UPGRADE;\n            parser->header_state = h_general;\n            break;\n\n          case h_transfer_encoding:\n            /* looking for 'Transfer-Encoding: chunked' */\n            if ('c' == c) {\n              parser->header_state = h_matching_transfer_encoding_chunked;\n            } else {\n              parser->header_state = h_general;\n            }\n            break;\n\n          case h_content_length:\n            if (UNLIKELY(!IS_NUM(ch))) {\n              SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);\n              goto error;\n            }\n\n            if (parser->flags & F_CONTENTLENGTH) {\n              SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);\n              goto error;\n            }\n\n            parser->flags |= F_CONTENTLENGTH;\n            parser->content_length = ch - '0';\n            break;\n\n          case h_connection:\n            /* looking for 'Connection: keep-alive' */\n            if (c == 'k') {\n              parser->header_state = h_matching_connection_keep_alive;\n            /* looking for 'Connection: close' */\n            } else if (c == 'c') {\n              parser->header_state = h_matching_connection_close;\n            } else if (c == 'u') {\n              parser->header_state = h_matching_connection_upgrade;\n            } else {\n              parser->header_state = h_matching_connection_token;\n            }\n            break;\n\n          /* Multi-value `Connection` header */\n          case h_matching_connection_token_start:\n            break;\n\n          default:\n            parser->header_state = h_general;\n            break;\n        }\n        break;\n      }\n\n      case s_header_value:\n      {\n        const char* start = p;\n        enum header_states h_state = (enum header_states) parser->header_state;\n        for (; p != data + len; p++) {\n          ch = *p;\n          if (ch == CR) {\n            UPDATE_STATE(s_header_almost_done);\n            parser->header_state = h_state;\n            CALLBACK_DATA(header_value);\n            break;\n          }\n\n          if (ch == LF) {\n            UPDATE_STATE(s_header_almost_done);\n            COUNT_HEADER_SIZE(p - start);\n            parser->header_state = h_state;\n            CALLBACK_DATA_NOADVANCE(header_value);\n            REEXECUTE();\n          }\n\n          if (!lenient && !IS_HEADER_CHAR(ch)) {\n            SET_ERRNO(HPE_INVALID_HEADER_TOKEN);\n            goto error;\n          }\n\n          c = LOWER(ch);\n\n          switch (h_state) {\n            case h_general:\n            {\n              const char* p_cr;\n              const char* p_lf;\n              size_t limit = data + len - p;\n\n              limit = MIN(limit, HTTP_MAX_HEADER_SIZE);\n\n              p_cr = (const char*) memchr(p, CR, limit);\n              p_lf = (const char*) memchr(p, LF, limit);\n              if (p_cr != NULL) {\n                if (p_lf != NULL && p_cr >= p_lf)\n                  p = p_lf;\n                else\n                  p = p_cr;\n              } else if (UNLIKELY(p_lf != NULL)) {\n                p = p_lf;\n              } else {\n                p = data + len;\n              }\n              --p;\n\n              break;\n            }\n\n            case h_connection:\n            case h_transfer_encoding:\n              assert(0 && \"Shouldn't get here.\");\n              break;\n\n            case h_content_length:\n            {\n              uint64_t t;\n\n              if (ch == ' ') break;\n\n              if (UNLIKELY(!IS_NUM(ch))) {\n                SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);\n                parser->header_state = h_state;\n                goto error;\n              }\n\n              t = parser->content_length;\n              t *= 10;\n              t += ch - '0';\n\n              /* Overflow? Test against a conservative limit for simplicity. */\n              if (UNLIKELY((ULLONG_MAX - 10) / 10 < parser->content_length)) {\n                SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);\n                parser->header_state = h_state;\n                goto error;\n              }\n\n              parser->content_length = t;\n              break;\n            }\n\n            /* Transfer-Encoding: chunked */\n            case h_matching_transfer_encoding_chunked:\n              parser->index++;\n              if (parser->index > sizeof(CHUNKED)-1\n                  || c != CHUNKED[parser->index]) {\n                h_state = h_general;\n              } else if (parser->index == sizeof(CHUNKED)-2) {\n                h_state = h_transfer_encoding_chunked;\n              }\n              break;\n\n            case h_matching_connection_token_start:\n              /* looking for 'Connection: keep-alive' */\n              if (c == 'k') {\n                h_state = h_matching_connection_keep_alive;\n              /* looking for 'Connection: close' */\n              } else if (c == 'c') {\n                h_state = h_matching_connection_close;\n              } else if (c == 'u') {\n                h_state = h_matching_connection_upgrade;\n              } else if (STRICT_TOKEN(c)) {\n                h_state = h_matching_connection_token;\n              } else if (c == ' ' || c == '\\t') {\n                /* Skip lws */\n              } else {\n                h_state = h_general;\n              }\n              break;\n\n            /* looking for 'Connection: keep-alive' */\n            case h_matching_connection_keep_alive:\n              parser->index++;\n              if (parser->index > sizeof(KEEP_ALIVE)-1\n                  || c != KEEP_ALIVE[parser->index]) {\n                h_state = h_matching_connection_token;\n              } else if (parser->index == sizeof(KEEP_ALIVE)-2) {\n                h_state = h_connection_keep_alive;\n              }\n              break;\n\n            /* looking for 'Connection: close' */\n            case h_matching_connection_close:\n              parser->index++;\n              if (parser->index > sizeof(CLOSE)-1 || c != CLOSE[parser->index]) {\n                h_state = h_matching_connection_token;\n              } else if (parser->index == sizeof(CLOSE)-2) {\n                h_state = h_connection_close;\n              }\n              break;\n\n            /* looking for 'Connection: upgrade' */\n            case h_matching_connection_upgrade:\n              parser->index++;\n              if (parser->index > sizeof(UPGRADE) - 1 ||\n                  c != UPGRADE[parser->index]) {\n                h_state = h_matching_connection_token;\n              } else if (parser->index == sizeof(UPGRADE)-2) {\n                h_state = h_connection_upgrade;\n              }\n              break;\n\n            case h_matching_connection_token:\n              if (ch == ',') {\n                h_state = h_matching_connection_token_start;\n                parser->index = 0;\n              }\n              break;\n\n            case h_transfer_encoding_chunked:\n              if (ch != ' ') h_state = h_general;\n              break;\n\n            case h_connection_keep_alive:\n            case h_connection_close:\n            case h_connection_upgrade:\n              if (ch == ',') {\n                if (h_state == h_connection_keep_alive) {\n                  parser->flags |= F_CONNECTION_KEEP_ALIVE;\n                } else if (h_state == h_connection_close) {\n                  parser->flags |= F_CONNECTION_CLOSE;\n                } else if (h_state == h_connection_upgrade) {\n                  parser->flags |= F_CONNECTION_UPGRADE;\n                }\n                h_state = h_matching_connection_token_start;\n                parser->index = 0;\n              } else if (ch != ' ') {\n                h_state = h_matching_connection_token;\n              }\n              break;\n\n            default:\n              UPDATE_STATE(s_header_value);\n              h_state = h_general;\n              break;\n          }\n        }\n        parser->header_state = h_state;\n\n        COUNT_HEADER_SIZE(p - start);\n\n        if (p == data + len)\n          --p;\n        break;\n      }\n\n      case s_header_almost_done:\n      {\n        if (UNLIKELY(ch != LF)) {\n          SET_ERRNO(HPE_LF_EXPECTED);\n          goto error;\n        }\n\n        UPDATE_STATE(s_header_value_lws);\n        break;\n      }\n\n      case s_header_value_lws:\n      {\n        if (ch == ' ' || ch == '\\t') {\n          UPDATE_STATE(s_header_value_start);\n          REEXECUTE();\n        }\n\n        /* finished the header */\n        switch (parser->header_state) {\n          case h_connection_keep_alive:\n            parser->flags |= F_CONNECTION_KEEP_ALIVE;\n            break;\n          case h_connection_close:\n            parser->flags |= F_CONNECTION_CLOSE;\n            break;\n          case h_transfer_encoding_chunked:\n            parser->flags |= F_CHUNKED;\n            break;\n          case h_connection_upgrade:\n            parser->flags |= F_CONNECTION_UPGRADE;\n            break;\n          default:\n            break;\n        }\n\n        UPDATE_STATE(s_header_field_start);\n        REEXECUTE();\n      }\n\n      case s_header_value_discard_ws_almost_done:\n      {\n        STRICT_CHECK(ch != LF);\n        UPDATE_STATE(s_header_value_discard_lws);\n        break;\n      }\n\n      case s_header_value_discard_lws:\n      {\n        if (ch == ' ' || ch == '\\t') {\n          UPDATE_STATE(s_header_value_discard_ws);\n          break;\n        } else {\n          switch (parser->header_state) {\n            case h_connection_keep_alive:\n              parser->flags |= F_CONNECTION_KEEP_ALIVE;\n              break;\n            case h_connection_close:\n              parser->flags |= F_CONNECTION_CLOSE;\n              break;\n            case h_connection_upgrade:\n              parser->flags |= F_CONNECTION_UPGRADE;\n              break;\n            case h_transfer_encoding_chunked:\n              parser->flags |= F_CHUNKED;\n              break;\n            default:\n              break;\n          }\n\n          /* header value was empty */\n          MARK(header_value);\n          UPDATE_STATE(s_header_field_start);\n          CALLBACK_DATA_NOADVANCE(header_value);\n          REEXECUTE();\n        }\n      }\n\n      case s_headers_almost_done:\n      {\n        STRICT_CHECK(ch != LF);\n\n        if (parser->flags & F_TRAILING) {\n          /* End of a chunked request */\n          UPDATE_STATE(s_message_done);\n          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);\n          REEXECUTE();\n        }\n\n        /* Cannot use chunked encoding and a content-length header together\n           per the HTTP specification. */\n        if ((parser->flags & F_CHUNKED) &&\n            (parser->flags & F_CONTENTLENGTH)) {\n          SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);\n          goto error;\n        }\n\n        UPDATE_STATE(s_headers_done);\n\n        /* Set this here so that on_headers_complete() callbacks can see it */\n        parser->upgrade =\n          ((parser->flags & (F_UPGRADE | F_CONNECTION_UPGRADE)) ==\n           (F_UPGRADE | F_CONNECTION_UPGRADE) ||\n           parser->method == HTTP_CONNECT);\n\n        /* Here we call the headers_complete callback. This is somewhat\n         * different than other callbacks because if the user returns 1, we\n         * will interpret that as saying that this message has no body. This\n         * is needed for the annoying case of recieving a response to a HEAD\n         * request.\n         *\n         * We'd like to use CALLBACK_NOTIFY_NOADVANCE() here but we cannot, so\n         * we have to simulate it by handling a change in errno below.\n         */\n        if (settings->on_headers_complete) {\n          switch (settings->on_headers_complete(parser)) {\n            case 0:\n              break;\n\n            case 2:\n              parser->upgrade = 1;\n\n            case 1:\n              parser->flags |= F_SKIPBODY;\n              break;\n\n            default:\n              SET_ERRNO(HPE_CB_headers_complete);\n              RETURN(p - data); /* Error */\n          }\n        }\n\n        if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {\n          RETURN(p - data);\n        }\n\n        REEXECUTE();\n      }\n\n      case s_headers_done:\n      {\n        int hasBody;\n        STRICT_CHECK(ch != LF);\n\n        parser->nread = 0;\n\n        hasBody = parser->flags & F_CHUNKED ||\n          (parser->content_length > 0 && parser->content_length != ULLONG_MAX);\n        if (parser->upgrade && (parser->method == HTTP_CONNECT ||\n                                (parser->flags & F_SKIPBODY) || !hasBody)) {\n          /* Exit, the rest of the message is in a different protocol. */\n          UPDATE_STATE(NEW_MESSAGE());\n          CALLBACK_NOTIFY(message_complete);\n          RETURN((p - data) + 1);\n        }\n\n        if (parser->flags & F_SKIPBODY) {\n          UPDATE_STATE(NEW_MESSAGE());\n          CALLBACK_NOTIFY(message_complete);\n        } else if (parser->flags & F_CHUNKED) {\n          /* chunked encoding - ignore Content-Length header */\n          UPDATE_STATE(s_chunk_size_start);\n        } else {\n          if (parser->content_length == 0) {\n            /* Content-Length header given but zero: Content-Length: 0\\r\\n */\n            UPDATE_STATE(NEW_MESSAGE());\n            CALLBACK_NOTIFY(message_complete);\n          } else if (parser->content_length != ULLONG_MAX) {\n            /* Content-Length header given and non-zero */\n            UPDATE_STATE(s_body_identity);\n          } else {\n            if (!http_message_needs_eof(parser)) {\n              /* Assume content-length 0 - read the next */\n              UPDATE_STATE(NEW_MESSAGE());\n              CALLBACK_NOTIFY(message_complete);\n            } else {\n              /* Read body until EOF */\n              UPDATE_STATE(s_body_identity_eof);\n            }\n          }\n        }\n\n        break;\n      }\n\n      case s_body_identity:\n      {\n        uint64_t to_read = MIN(parser->content_length,\n                               (uint64_t) ((data + len) - p));\n\n        assert(parser->content_length != 0\n            && parser->content_length != ULLONG_MAX);\n\n        /* The difference between advancing content_length and p is because\n         * the latter will automaticaly advance on the next loop iteration.\n         * Further, if content_length ends up at 0, we want to see the last\n         * byte again for our message complete callback.\n         */\n        MARK(body);\n        parser->content_length -= to_read;\n        p += to_read - 1;\n\n        if (parser->content_length == 0) {\n          UPDATE_STATE(s_message_done);\n\n          /* Mimic CALLBACK_DATA_NOADVANCE() but with one extra byte.\n           *\n           * The alternative to doing this is to wait for the next byte to\n           * trigger the data callback, just as in every other case. The\n           * problem with this is that this makes it difficult for the test\n           * harness to distinguish between complete-on-EOF and\n           * complete-on-length. It's not clear that this distinction is\n           * important for applications, but let's keep it for now.\n           */\n          CALLBACK_DATA_(body, p - body_mark + 1, p - data);\n          REEXECUTE();\n        }\n\n        break;\n      }\n\n      /* read until EOF */\n      case s_body_identity_eof:\n        MARK(body);\n        p = data + len - 1;\n\n        break;\n\n      case s_message_done:\n        UPDATE_STATE(NEW_MESSAGE());\n        CALLBACK_NOTIFY(message_complete);\n        if (parser->upgrade) {\n          /* Exit, the rest of the message is in a different protocol. */\n          RETURN((p - data) + 1);\n        }\n        break;\n\n      case s_chunk_size_start:\n      {\n        assert(parser->nread == 1);\n        assert(parser->flags & F_CHUNKED);\n\n        unhex_val = unhex[(unsigned char)ch];\n        if (UNLIKELY(unhex_val == -1)) {\n          SET_ERRNO(HPE_INVALID_CHUNK_SIZE);\n          goto error;\n        }\n\n        parser->content_length = unhex_val;\n        UPDATE_STATE(s_chunk_size);\n        break;\n      }\n\n      case s_chunk_size:\n      {\n        uint64_t t;\n\n        assert(parser->flags & F_CHUNKED);\n\n        if (ch == CR) {\n          UPDATE_STATE(s_chunk_size_almost_done);\n          break;\n        }\n\n        unhex_val = unhex[(unsigned char)ch];\n\n        if (unhex_val == -1) {\n          if (ch == ';' || ch == ' ') {\n            UPDATE_STATE(s_chunk_parameters);\n            break;\n          }\n\n          SET_ERRNO(HPE_INVALID_CHUNK_SIZE);\n          goto error;\n        }\n\n        t = parser->content_length;\n        t *= 16;\n        t += unhex_val;\n\n        /* Overflow? Test against a conservative limit for simplicity. */\n        if (UNLIKELY((ULLONG_MAX - 16) / 16 < parser->content_length)) {\n          SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);\n          goto error;\n        }\n\n        parser->content_length = t;\n        break;\n      }\n\n      case s_chunk_parameters:\n      {\n        assert(parser->flags & F_CHUNKED);\n        /* just ignore this shit. TODO check for overflow */\n        if (ch == CR) {\n          UPDATE_STATE(s_chunk_size_almost_done);\n          break;\n        }\n        break;\n      }\n\n      case s_chunk_size_almost_done:\n      {\n        assert(parser->flags & F_CHUNKED);\n        STRICT_CHECK(ch != LF);\n\n        parser->nread = 0;\n\n        if (parser->content_length == 0) {\n          parser->flags |= F_TRAILING;\n          UPDATE_STATE(s_header_field_start);\n        } else {\n          UPDATE_STATE(s_chunk_data);\n        }\n        CALLBACK_NOTIFY(chunk_header);\n        break;\n      }\n\n      case s_chunk_data:\n      {\n        uint64_t to_read = MIN(parser->content_length,\n                               (uint64_t) ((data + len) - p));\n\n        assert(parser->flags & F_CHUNKED);\n        assert(parser->content_length != 0\n            && parser->content_length != ULLONG_MAX);\n\n        /* See the explanation in s_body_identity for why the content\n         * length and data pointers are managed this way.\n         */\n        MARK(body);\n        parser->content_length -= to_read;\n        p += to_read - 1;\n\n        if (parser->content_length == 0) {\n          UPDATE_STATE(s_chunk_data_almost_done);\n        }\n\n        break;\n      }\n\n      case s_chunk_data_almost_done:\n        assert(parser->flags & F_CHUNKED);\n        assert(parser->content_length == 0);\n        STRICT_CHECK(ch != CR);\n        UPDATE_STATE(s_chunk_data_done);\n        CALLBACK_DATA(body);\n        break;\n\n      case s_chunk_data_done:\n        assert(parser->flags & F_CHUNKED);\n        STRICT_CHECK(ch != LF);\n        parser->nread = 0;\n        UPDATE_STATE(s_chunk_size_start);\n        CALLBACK_NOTIFY(chunk_complete);\n        break;\n\n      default:\n        assert(0 && \"unhandled state\");\n        SET_ERRNO(HPE_INVALID_INTERNAL_STATE);\n        goto error;\n    }\n  }\n\n  /* Run callbacks for any marks that we have leftover after we ran our of\n   * bytes. There should be at most one of these set, so it's OK to invoke\n   * them in series (unset marks will not result in callbacks).\n   *\n   * We use the NOADVANCE() variety of callbacks here because 'p' has already\n   * overflowed 'data' and this allows us to correct for the off-by-one that\n   * we'd otherwise have (since CALLBACK_DATA() is meant to be run with a 'p'\n   * value that's in-bounds).\n   */\n\n  assert(((header_field_mark ? 1 : 0) +\n          (header_value_mark ? 1 : 0) +\n          (url_mark ? 1 : 0)  +\n          (body_mark ? 1 : 0) +\n          (status_mark ? 1 : 0)) <= 1);\n\n  CALLBACK_DATA_NOADVANCE(header_field);\n  CALLBACK_DATA_NOADVANCE(header_value);\n  CALLBACK_DATA_NOADVANCE(url);\n  CALLBACK_DATA_NOADVANCE(body);\n  CALLBACK_DATA_NOADVANCE(status);\n\n  RETURN(len);\n\nerror:\n  if (HTTP_PARSER_ERRNO(parser) == HPE_OK) {\n    SET_ERRNO(HPE_UNKNOWN);\n  }\n\n  RETURN(p - data);\n}\n\n\n/* Does the parser need to see an EOF to find the end of the message? */\nint\nhttp_message_needs_eof (const http_parser *parser)\n{\n  if (parser->type == HTTP_REQUEST) {\n    return 0;\n  }\n\n  /* See RFC 2616 section 4.4 */\n  if (parser->status_code / 100 == 1 || /* 1xx e.g. Continue */\n      parser->status_code == 204 ||     /* No Content */\n      parser->status_code == 304 ||     /* Not Modified */\n      parser->flags & F_SKIPBODY) {     /* response to a HEAD request */\n    return 0;\n  }\n\n  if ((parser->flags & F_CHUNKED) || parser->content_length != ULLONG_MAX) {\n    return 0;\n  }\n\n  return 1;\n}\n\n\nint\nhttp_should_keep_alive (const http_parser *parser)\n{\n  if (parser->http_major > 0 && parser->http_minor > 0) {\n    /* HTTP/1.1 */\n    if (parser->flags & F_CONNECTION_CLOSE) {\n      return 0;\n    }\n  } else {\n    /* HTTP/1.0 or earlier */\n    if (!(parser->flags & F_CONNECTION_KEEP_ALIVE)) {\n      return 0;\n    }\n  }\n\n  return !http_message_needs_eof(parser);\n}\n\n\nconst char *\nhttp_method_str (enum http_method m)\n{\n  return ELEM_AT(method_strings, m, \"<unknown>\");\n}\n\n\nvoid\nhttp_parser_init (http_parser *parser, enum http_parser_type t)\n{\n  void *data = parser->data; /* preserve application data */\n  memset(parser, 0, sizeof(*parser));\n  parser->data = data;\n  parser->type = t;\n  parser->state = (t == HTTP_REQUEST ? s_start_req : (t == HTTP_RESPONSE ? s_start_res : s_start_req_or_res));\n  parser->http_errno = HPE_OK;\n}\n\nvoid\nhttp_parser_settings_init(http_parser_settings *settings)\n{\n  memset(settings, 0, sizeof(*settings));\n}\n\nconst char *\nhttp_errno_name(enum http_errno err) {\n  assert(((size_t) err) < ARRAY_SIZE(http_strerror_tab));\n  return http_strerror_tab[err].name;\n}\n\nconst char *\nhttp_errno_description(enum http_errno err) {\n  assert(((size_t) err) < ARRAY_SIZE(http_strerror_tab));\n  return http_strerror_tab[err].description;\n}\n\nstatic enum http_host_state\nhttp_parse_host_char(enum http_host_state s, const char ch) {\n  switch(s) {\n    case s_http_userinfo:\n    case s_http_userinfo_start:\n      if (ch == '@') {\n        return s_http_host_start;\n      }\n\n      if (IS_USERINFO_CHAR(ch)) {\n        return s_http_userinfo;\n      }\n      break;\n\n    case s_http_host_start:\n      if (ch == '[') {\n        return s_http_host_v6_start;\n      }\n\n      if (IS_HOST_CHAR(ch)) {\n        return s_http_host;\n      }\n\n      break;\n\n    case s_http_host:\n      if (IS_HOST_CHAR(ch)) {\n        return s_http_host;\n      }\n\n    /* FALLTHROUGH */\n    case s_http_host_v6_end:\n      if (ch == ':') {\n        return s_http_host_port_start;\n      }\n\n      break;\n\n    case s_http_host_v6:\n      if (ch == ']') {\n        return s_http_host_v6_end;\n      }\n\n    /* FALLTHROUGH */\n    case s_http_host_v6_start:\n      if (IS_HEX(ch) || ch == ':' || ch == '.') {\n        return s_http_host_v6;\n      }\n\n      if (s == s_http_host_v6 && ch == '%') {\n        return s_http_host_v6_zone_start;\n      }\n      break;\n\n    case s_http_host_v6_zone:\n      if (ch == ']') {\n        return s_http_host_v6_end;\n      }\n\n    /* FALLTHROUGH */\n    case s_http_host_v6_zone_start:\n      /* RFC 6874 Zone ID consists of 1*( unreserved / pct-encoded) */\n      if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' || ch == '_' ||\n          ch == '~') {\n        return s_http_host_v6_zone;\n      }\n      break;\n\n    case s_http_host_port:\n    case s_http_host_port_start:\n      if (IS_NUM(ch)) {\n        return s_http_host_port;\n      }\n\n      break;\n\n    default:\n      break;\n  }\n  return s_http_host_dead;\n}\n\nstatic int\nhttp_parse_host(const char * buf, struct http_parser_url *u, int found_at) {\n  enum http_host_state s;\n\n  const char *p;\n  size_t buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;\n\n  assert(u->field_set & (1 << UF_HOST));\n\n  u->field_data[UF_HOST].len = 0;\n\n  s = found_at ? s_http_userinfo_start : s_http_host_start;\n\n  for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {\n    enum http_host_state new_s = http_parse_host_char(s, *p);\n\n    if (new_s == s_http_host_dead) {\n      return 1;\n    }\n\n    switch(new_s) {\n      case s_http_host:\n        if (s != s_http_host) {\n          u->field_data[UF_HOST].off = p - buf;\n        }\n        u->field_data[UF_HOST].len++;\n        break;\n\n      case s_http_host_v6:\n        if (s != s_http_host_v6) {\n          u->field_data[UF_HOST].off = p - buf;\n        }\n        u->field_data[UF_HOST].len++;\n        break;\n\n      case s_http_host_v6_zone_start:\n      case s_http_host_v6_zone:\n        u->field_data[UF_HOST].len++;\n        break;\n\n      case s_http_host_port:\n        if (s != s_http_host_port) {\n          u->field_data[UF_PORT].off = p - buf;\n          u->field_data[UF_PORT].len = 0;\n          u->field_set |= (1 << UF_PORT);\n        }\n        u->field_data[UF_PORT].len++;\n        break;\n\n      case s_http_userinfo:\n        if (s != s_http_userinfo) {\n          u->field_data[UF_USERINFO].off = p - buf ;\n          u->field_data[UF_USERINFO].len = 0;\n          u->field_set |= (1 << UF_USERINFO);\n        }\n        u->field_data[UF_USERINFO].len++;\n        break;\n\n      default:\n        break;\n    }\n    s = new_s;\n  }\n\n  /* Make sure we don't end somewhere unexpected */\n  switch (s) {\n    case s_http_host_start:\n    case s_http_host_v6_start:\n    case s_http_host_v6:\n    case s_http_host_v6_zone_start:\n    case s_http_host_v6_zone:\n    case s_http_host_port_start:\n    case s_http_userinfo:\n    case s_http_userinfo_start:\n      return 1;\n    default:\n      break;\n  }\n\n  return 0;\n}\n\nvoid\nhttp_parser_url_init(struct http_parser_url *u) {\n  memset(u, 0, sizeof(*u));\n}\n\nint\nhttp_parser_parse_url(const char *buf, size_t buflen, int is_connect,\n                      struct http_parser_url *u)\n{\n  enum state s;\n  const char *p;\n  enum http_parser_url_fields uf, old_uf;\n  int found_at = 0;\n\n  u->port = u->field_set = 0;\n  s = is_connect ? s_req_server_start : s_req_spaces_before_url;\n  old_uf = UF_MAX;\n\n  for (p = buf; p < buf + buflen; p++) {\n    s = parse_url_char(s, *p);\n\n    /* Figure out the next field that we're operating on */\n    switch (s) {\n      case s_dead:\n        return 1;\n\n      /* Skip delimeters */\n      case s_req_schema_slash:\n      case s_req_schema_slash_slash:\n      case s_req_server_start:\n      case s_req_query_string_start:\n      case s_req_fragment_start:\n        continue;\n\n      case s_req_schema:\n        uf = UF_SCHEMA;\n        break;\n\n      case s_req_server_with_at:\n        found_at = 1;\n\n      /* FALLTROUGH */\n      case s_req_server:\n        uf = UF_HOST;\n        break;\n\n      case s_req_path:\n        uf = UF_PATH;\n        break;\n\n      case s_req_query_string:\n        uf = UF_QUERY;\n        break;\n\n      case s_req_fragment:\n        uf = UF_FRAGMENT;\n        break;\n\n      default:\n        assert(!\"Unexpected state\");\n        return 1;\n    }\n\n    /* Nothing's changed; soldier on */\n    if (uf == old_uf) {\n      u->field_data[uf].len++;\n      continue;\n    }\n\n    u->field_data[uf].off = p - buf;\n    u->field_data[uf].len = 1;\n\n    u->field_set |= (1 << uf);\n    old_uf = uf;\n  }\n\n  /* host must be present if there is a schema */\n  /* parsing http:///toto will fail */\n  if ((u->field_set & (1 << UF_SCHEMA)) &&\n      (u->field_set & (1 << UF_HOST)) == 0) {\n    return 1;\n  }\n\n  if (u->field_set & (1 << UF_HOST)) {\n    if (http_parse_host(buf, u, found_at) != 0) {\n      return 1;\n    }\n  }\n\n  /* CONNECT requests can only contain \"hostname:port\" */\n  if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {\n    return 1;\n  }\n\n  if (u->field_set & (1 << UF_PORT)) {\n    /* Don't bother with endp; we've already validated the string */\n    unsigned long v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);\n\n    /* Ports have a max value of 2^16 */\n    if (v > 0xffff) {\n      return 1;\n    }\n\n    u->port = (uint16_t) v;\n  }\n\n  return 0;\n}\n\nvoid\nhttp_parser_pause(http_parser *parser, int paused) {\n  /* Users should only be pausing/unpausing a parser that is not in an error\n   * state. In non-debug builds, there's not much that we can do about this\n   * other than ignore it.\n   */\n  if (HTTP_PARSER_ERRNO(parser) == HPE_OK ||\n      HTTP_PARSER_ERRNO(parser) == HPE_PAUSED) {\n    SET_ERRNO((paused) ? HPE_PAUSED : HPE_OK);\n  } else {\n    assert(0 && \"Attempting to pause parser in error state\");\n  }\n}\n\nint\nhttp_body_is_final(const struct http_parser *parser) {\n    return parser->state == s_message_done;\n}\n\nunsigned long\nhttp_parser_version(void) {\n  return HTTP_PARSER_VERSION_MAJOR * 0x10000 |\n         HTTP_PARSER_VERSION_MINOR * 0x00100 |\n         HTTP_PARSER_VERSION_PATCH * 0x00001;\n}\n","/* events\n * Copyright (c) 2016 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include \"events/EventQueue.h\"\n\n#include \"events/mbed_events.h\"\n#include \"mbed.h\"\n\n\nEventQueue::EventQueue(unsigned event_size, unsigned char *event_pointer) {\n    if (!event_pointer) {\n        equeue_create(&_equeue, event_size);\n    } else {\n        equeue_create_inplace(&_equeue, event_size, event_pointer);\n    }\n}\n\nEventQueue::~EventQueue() {\n    equeue_destroy(&_equeue);\n}\n\nvoid EventQueue::dispatch(int ms) {\n    return equeue_dispatch(&_equeue, ms);\n}\n\nvoid EventQueue::break_dispatch() {\n    return equeue_break(&_equeue);\n}\n\nunsigned EventQueue::tick() {\n    return equeue_tick();\n}\n\nvoid EventQueue::cancel(int id) {\n    return equeue_cancel(&_equeue, id);\n}\n\nint EventQueue::time_left(int id) {\n    return equeue_timeleft(&_equeue, id);\n}\n\nvoid EventQueue::background(Callback<void(int)> update) {\n    _update = update;\n\n    if (_update) {\n        equeue_background(&_equeue, &Callback<void(int)>::thunk, &_update);\n    } else {\n        equeue_background(&_equeue, 0, 0);\n    }\n}\n\nvoid EventQueue::chain(EventQueue *target) {\n    if (target) {\n        equeue_chain(&_equeue, &target->_equeue);\n    } else {\n        equeue_chain(&_equeue, 0);\n    }\n}\n","/* events\n * Copyright (c) 2017 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"events/mbed_shared_queues.h\"\n#include \"mbed.h\"\n\nusing namespace events;\n\nnamespace mbed {\n\n#ifdef MBED_CONF_RTOS_PRESENT\n/* Create an event queue, and start the thread that dispatches it. Static\n * variables mean this happens once the first time each template instantiation\n * is called. This is currently instantiated no more than twice.\n */\ntemplate\n<osPriority Priority, size_t QueueSize, size_t StackSize>\nEventQueue *do_shared_event_queue_with_thread()\n{\n    static uint64_t queue_buffer[QueueSize / sizeof(uint64_t)];\n    static EventQueue queue(sizeof queue_buffer, (unsigned char *) queue_buffer);\n\n    static uint64_t stack[StackSize / sizeof(uint64_t)];\n    static Thread thread(Priority, StackSize, (unsigned char *) stack);\n\n    Thread::State state = thread.get_state();\n    if (state == Thread::Inactive || state == Thread::Deleted) {\n        osStatus status = thread.start(callback(&queue, &EventQueue::dispatch_forever));\n        MBED_ASSERT(status == osOK);\n        if (status != osOK) {\n            return NULL;\n        }\n    }\n\n    return &queue;\n}\n#endif\n\nEventQueue *mbed_event_queue()\n{\n#if MBED_CONF_EVENTS_SHARED_DISPATCH_FROM_APPLICATION || !defined MBED_CONF_RTOS_PRESENT\n    /* Only create the EventQueue, but no dispatching thread */\n    static unsigned char queue_buffer[MBED_CONF_EVENTS_SHARED_EVENTSIZE];\n    static EventQueue queue(sizeof queue_buffer, queue_buffer);\n\n    return &queue;\n#else\n    return do_shared_event_queue_with_thread<osPriorityNormal, MBED_CONF_EVENTS_SHARED_EVENTSIZE, MBED_CONF_EVENTS_SHARED_STACKSIZE>();\n#endif\n}\n\n#ifdef MBED_CONF_RTOS_PRESENT\nEventQueue *mbed_highprio_event_queue()\n{\n    return do_shared_event_queue_with_thread<osPriorityHigh, MBED_CONF_EVENTS_SHARED_HIGHPRIO_EVENTSIZE, MBED_CONF_EVENTS_SHARED_HIGHPRIO_STACKSIZE>();\n}\n#endif\n\n}\n","/*\n * Flexible event queue for dispatching events\n *\n * Copyright (c) 2016 Christopher Haster\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include \"equeue/equeue.h\"\n#include \"mbed_wait_api.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n\n// calculate the relative-difference between absolute times while\n// correctly handling overflow conditions\nstatic inline int equeue_tickdiff(unsigned a, unsigned b) {\n    return (int)(unsigned)(a - b);\n}\n\n// calculate the relative-difference between absolute times, but\n// also clamp to zero, resulting in only non-zero values.\nstatic inline int equeue_clampdiff(unsigned a, unsigned b) {\n    int diff = equeue_tickdiff(a, b);\n    return ~(diff >> (8*sizeof(int)-1)) & diff;\n}\n\n// Increment the unique id in an event, hiding the event from cancel\nstatic inline void equeue_incid(equeue_t *q, struct equeue_event *e) {\n    e->id += 1;\n    if ((e->id << q->npw2) == 0) {\n        e->id = 1;\n    }\n}\n\n\n// equeue lifetime management\nint equeue_create(equeue_t *q, size_t size) {\n    // dynamically allocate the specified buffer\n    void *buffer = malloc(size);\n    if (!buffer) {\n        return -1;\n    }\n\n    int err = equeue_create_inplace(q, size, buffer);\n    q->allocated = buffer;\n    return err;\n}\n\nint equeue_create_inplace(equeue_t *q, size_t size, void *buffer) {\n    // setup queue around provided buffer\n    q->buffer = buffer;\n    q->allocated = 0;\n\n    q->npw2 = 0;\n    for (unsigned s = size; s; s >>= 1) {\n        q->npw2++;\n    }\n\n    q->chunks = 0;\n    q->slab.size = size;\n    q->slab.data = buffer;\n\n    q->queue = 0;\n    q->tick = equeue_tick();\n    q->generation = 0;\n    q->break_requested = false;\n\n    q->background.active = false;\n    q->background.update = 0;\n    q->background.timer = 0;\n\n    q->dispatch_called = false;\n\n    // initialize platform resources\n    int err;\n    err = equeue_sema_create(&q->eventsema);\n    if (err < 0) {\n        return err;\n    }\n\n    err = equeue_mutex_create(&q->queuelock);\n    if (err < 0) {\n        return err;\n    }\n\n    err = equeue_mutex_create(&q->memlock);\n    if (err < 0) {\n        return err;\n    }\n\n    return 0;\n}\n\nvoid equeue_destroy(equeue_t *q) {\n    // call destructors on pending events\n    for (struct equeue_event *es = q->queue; es; es = es->next) {\n        for (struct equeue_event *e = q->queue; e; e = e->sibling) {\n            if (e->dtor) {\n                e->dtor(e + 1);\n            }\n        }\n    }\n\n    // notify background timer\n    if (q->background.update) {\n        q->background.update(q->background.timer, -1);\n    }\n\n    // clean up platform resources + memory\n    equeue_mutex_destroy(&q->memlock);\n    equeue_mutex_destroy(&q->queuelock);\n    equeue_sema_destroy(&q->eventsema);\n    free(q->allocated);\n}\n\n\n// equeue chunk allocation functions\nstatic struct equeue_event *equeue_mem_alloc(equeue_t *q, size_t size) {\n#ifdef TARGET_SIMULATOR\n    // ok... so for some reason this is necessary\n    // no idea why, maybe something with blocks not actually allocated until we yield back\n    // however... only after dispatch was called the first time, not before, otherwise it hangs.\n    if (q->dispatch_called) {\n        wait_ms(10);\n    }\n#endif\n    // add event overhead\n    size += sizeof(struct equeue_event);\n    size = (size + sizeof(void*)-1) & ~(sizeof(void*)-1);\n\n    equeue_mutex_lock(&q->memlock);\n\n    // check if a good chunk is available\n    for (struct equeue_event **p = &q->chunks; *p; p = &(*p)->next) {\n        if ((*p)->size >= size) {\n            struct equeue_event *e = *p;\n            if (e->sibling) {\n                *p = e->sibling;\n                (*p)->next = e->next;\n            } else {\n                *p = e->next;\n            }\n\n            equeue_mutex_unlock(&q->memlock);\n            return e;\n        }\n    }\n\n    // otherwise allocate a new chunk out of the slab\n    if (q->slab.size >= size) {\n        struct equeue_event *e = (struct equeue_event *)q->slab.data;\n        q->slab.data += size;\n        q->slab.size -= size;\n        e->size = size;\n        e->id = 1;\n\n        equeue_mutex_unlock(&q->memlock);\n        return e;\n    }\n\n    equeue_mutex_unlock(&q->memlock);\n    return 0;\n}\n\nstatic void equeue_mem_dealloc(equeue_t *q, struct equeue_event *e) {\n    equeue_mutex_lock(&q->memlock);\n\n    // stick chunk into list of chunks\n    struct equeue_event **p = &q->chunks;\n    while (*p && (*p)->size < e->size) {\n        p = &(*p)->next;\n    }\n\n    if (*p && (*p)->size == e->size) {\n        e->sibling = *p;\n        e->next = (*p)->next;\n    } else {\n        e->sibling = 0;\n        e->next = *p;\n    }\n    *p = e;\n\n    equeue_mutex_unlock(&q->memlock);\n}\n\nvoid *equeue_alloc(equeue_t *q, size_t size) {\n    struct equeue_event *e = equeue_mem_alloc(q, size);\n    if (!e) {\n        return 0;\n    }\n\n    e->target = 0;\n    e->period = -1;\n    e->dtor = 0;\n\n    return e + 1;\n}\n\nvoid equeue_dealloc(equeue_t *q, void *p) {\n    struct equeue_event *e = (struct equeue_event*)p - 1;\n\n    if (e->dtor) {\n        e->dtor(e+1);\n    }\n\n    equeue_mem_dealloc(q, e);\n}\n\n\n// equeue scheduling functions\nstatic int equeue_enqueue(equeue_t *q, struct equeue_event *e, unsigned tick) {\n    // setup event and hash local id with buffer offset for unique id\n    int id = (e->id << q->npw2) | ((unsigned char *)e - q->buffer);\n    e->target = tick + equeue_clampdiff(e->target, tick);\n    e->generation = q->generation;\n\n    equeue_mutex_lock(&q->queuelock);\n\n    // find the event slot\n    struct equeue_event **p = &q->queue;\n    while (*p && equeue_tickdiff((*p)->target, e->target) < 0) {\n        p = &(*p)->next;\n    }\n\n    // insert at head in slot\n    if (*p && (*p)->target == e->target) {\n        e->next = (*p)->next;\n        if (e->next) {\n            e->next->ref = &e->next;\n        }\n\n        e->sibling = *p;\n        e->sibling->ref = &e->sibling;\n    } else {\n        e->next = *p;\n        if (e->next) {\n            e->next->ref = &e->next;\n        }\n\n        e->sibling = 0;\n    }\n\n    *p = e;\n    e->ref = p;\n\n    // notify background timer\n    if ((q->background.update && q->background.active) &&\n        (q->queue == e && !e->sibling)) {\n        q->background.update(q->background.timer,\n                equeue_clampdiff(e->target, tick));\n    }\n\n    equeue_mutex_unlock(&q->queuelock);\n\n    return id;\n}\n\nstatic struct equeue_event *equeue_unqueue(equeue_t *q, int id) {\n    // decode event from unique id and check that the local id matches\n    struct equeue_event *e = (struct equeue_event *)\n            &q->buffer[id & ((1 << q->npw2)-1)];\n\n    equeue_mutex_lock(&q->queuelock);\n    if (e->id != id >> q->npw2) {\n        equeue_mutex_unlock(&q->queuelock);\n        return 0;\n    }\n\n    // clear the event and check if already in-flight\n    e->cb = 0;\n    e->period = -1;\n\n    int diff = equeue_tickdiff(e->target, q->tick);\n    if (diff < 0 || (diff == 0 && e->generation != q->generation)) {\n        equeue_mutex_unlock(&q->queuelock);\n        return 0;\n    }\n\n    // disentangle from queue\n    if (e->sibling) {\n        e->sibling->next = e->next;\n        if (e->sibling->next) {\n            e->sibling->next->ref = &e->sibling->next;\n        }\n\n        *e->ref = e->sibling;\n        e->sibling->ref = e->ref;\n    } else {\n        *e->ref = e->next;\n        if (e->next) {\n            e->next->ref = e->ref;\n        }\n    }\n\n    equeue_incid(q, e);\n    equeue_mutex_unlock(&q->queuelock);\n\n    return e;\n}\n\nstatic struct equeue_event *equeue_dequeue(equeue_t *q, unsigned target) {\n    equeue_mutex_lock(&q->queuelock);\n\n    // find all expired events and mark a new generation\n    q->generation += 1;\n    if (equeue_tickdiff(q->tick, target) <= 0) {\n        q->tick = target;\n    }\n\n    struct equeue_event *head = q->queue;\n    struct equeue_event **p = &head;\n    while (*p && equeue_tickdiff((*p)->target, target) <= 0) {\n        p = &(*p)->next;\n    }\n\n    q->queue = *p;\n    if (q->queue) {\n        q->queue->ref = &q->queue;\n    }\n\n    *p = 0;\n\n    equeue_mutex_unlock(&q->queuelock);\n\n    // reverse and flatten each slot to match insertion order\n    struct equeue_event **tail = &head;\n    struct equeue_event *ess = head;\n    while (ess) {\n        struct equeue_event *es = ess;\n        ess = es->next;\n\n        struct equeue_event *prev = 0;\n        for (struct equeue_event *e = es; e; e = e->sibling) {\n            e->next = prev;\n            prev = e;\n        }\n\n        *tail = prev;\n        tail = &es->next;\n    }\n\n    return head;\n}\n\nint equeue_post(equeue_t *q, void (*cb)(void*), void *p) {\n    struct equeue_event *e = (struct equeue_event*)p - 1;\n    unsigned tick = equeue_tick();\n    e->cb = cb;\n    e->target = tick + e->target;\n\n    int id = equeue_enqueue(q, e, tick);\n    equeue_sema_signal(&q->eventsema);\n    return id;\n}\n\nvoid equeue_cancel(equeue_t *q, int id) {\n    if (!id) {\n        return;\n    }\n\n    struct equeue_event *e = equeue_unqueue(q, id);\n    if (e) {\n        equeue_dealloc(q, e + 1);\n    }\n}\n\nint equeue_timeleft(equeue_t *q, int id) {\n    int ret = -1;\n\n    if (!id) {\n        return -1;\n    }\n\n    // decode event from unique id and check that the local id matches\n    struct equeue_event *e = (struct equeue_event *)\n            &q->buffer[id & ((1 << q->npw2)-1)];\n\n    equeue_mutex_lock(&q->queuelock);\n    if (e->id == id >> q->npw2) {\n        ret = equeue_clampdiff(e->target, equeue_tick());\n    }\n    equeue_mutex_unlock(&q->queuelock);\n    return ret;\n}\n\nvoid equeue_break(equeue_t *q) {\n    equeue_mutex_lock(&q->queuelock);\n    q->break_requested = true;\n    equeue_mutex_unlock(&q->queuelock);\n    equeue_sema_signal(&q->eventsema);\n}\n\nvoid equeue_dispatch(equeue_t *q, int ms) {\n#ifdef TARGET_SIMULATOR\n    if (!q->dispatch_called) {\n        q->dispatch_called = true;\n    }\n#endif\n\n    unsigned tick = equeue_tick();\n    unsigned timeout = tick + ms;\n    q->background.active = false;\n\n    while (1) {\n        // collect all the available events and next deadline\n        struct equeue_event *es = equeue_dequeue(q, tick);\n\n        // dispatch events\n        while (es) {\n            struct equeue_event *e = es;\n            es = e->next;\n\n            // actually dispatch the callbacks\n            void (*cb)(void *) = e->cb;\n            if (cb) {\n                cb(e + 1);\n            }\n\n            // reenqueue periodic events or deallocate\n            if (e->period >= 0) {\n                e->target += e->period;\n                equeue_enqueue(q, e, equeue_tick());\n            } else {\n                equeue_incid(q, e);\n                equeue_dealloc(q, e+1);\n            }\n        }\n\n        int deadline = -1;\n        tick = equeue_tick();\n\n        // check if we should stop dispatching soon\n        if (ms >= 0) {\n            deadline = equeue_tickdiff(timeout, tick);\n            if (deadline <= 0) {\n                // update background timer if necessary\n                if (q->background.update) {\n                    equeue_mutex_lock(&q->queuelock);\n                    if (q->background.update && q->queue) {\n                        q->background.update(q->background.timer,\n                                equeue_clampdiff(q->queue->target, tick));\n                    }\n                    q->background.active = true;\n                    equeue_mutex_unlock(&q->queuelock);\n                }\n                q->break_requested = false;\n                return;\n            }\n        }\n\n        // find closest deadline\n        equeue_mutex_lock(&q->queuelock);\n        if (q->queue) {\n            int diff = equeue_clampdiff(q->queue->target, tick);\n            if ((unsigned)diff < (unsigned)deadline) {\n                deadline = diff;\n            }\n        }\n        equeue_mutex_unlock(&q->queuelock);\n\n        // wait for events\n        equeue_sema_wait(&q->eventsema, deadline);\n\n        // check if we were notified to break out of dispatch\n        if (q->break_requested) {\n            equeue_mutex_lock(&q->queuelock);\n            if (q->break_requested) {\n                q->break_requested = false;\n                equeue_mutex_unlock(&q->queuelock);\n                return;\n            }\n            equeue_mutex_unlock(&q->queuelock);\n        }\n\n        // update tick for next iteration\n        tick = equeue_tick();\n\n#ifdef TARGET_SIMULATOR\n        // yield back to browser in between to process events\n        wait_ms(20);\n#endif\n    }\n}\n\n\n// event functions\nvoid equeue_event_delay(void *p, int ms) {\n    struct equeue_event *e = (struct equeue_event*)p - 1;\n    e->target = ms;\n}\n\nvoid equeue_event_period(void *p, int ms) {\n    struct equeue_event *e = (struct equeue_event*)p - 1;\n    e->period = ms;\n}\n\nvoid equeue_event_dtor(void *p, void (*dtor)(void *)) {\n    struct equeue_event *e = (struct equeue_event*)p - 1;\n    e->dtor = dtor;\n}\n\n\n// simple callbacks\nstruct ecallback {\n    void (*cb)(void*);\n    void *data;\n};\n\nstatic void ecallback_dispatch(void *p) {\n    struct ecallback *e = (struct ecallback*)p;\n    e->cb(e->data);\n}\n\nint equeue_call(equeue_t *q, void (*cb)(void*), void *data) {\n    struct ecallback *e = equeue_alloc(q, sizeof(struct ecallback));\n    if (!e) {\n        return 0;\n    }\n\n    e->cb = cb;\n    e->data = data;\n    return equeue_post(q, ecallback_dispatch, e);\n}\n\nint equeue_call_in(equeue_t *q, int ms, void (*cb)(void*), void *data) {\n    struct ecallback *e = equeue_alloc(q, sizeof(struct ecallback));\n    if (!e) {\n        return 0;\n    }\n\n    equeue_event_delay(e, ms);\n    e->cb = cb;\n    e->data = data;\n    return equeue_post(q, ecallback_dispatch, e);\n}\n\nint equeue_call_every(equeue_t *q, int ms, void (*cb)(void*), void *data) {\n    struct ecallback *e = equeue_alloc(q, sizeof(struct ecallback));\n    if (!e) {\n        return 0;\n    }\n\n    equeue_event_delay(e, ms);\n    equeue_event_period(e, ms);\n    e->cb = cb;\n    e->data = data;\n    return equeue_post(q, ecallback_dispatch, e);\n}\n\n\n// backgrounding\nvoid equeue_background(equeue_t *q,\n        void (*update)(void *timer, int ms), void *timer) {\n    equeue_mutex_lock(&q->queuelock);\n    if (q->background.update) {\n        q->background.update(q->background.timer, -1);\n    }\n\n    q->background.update = update;\n    q->background.timer = timer;\n\n    if (q->background.update && q->queue) {\n        q->background.update(q->background.timer,\n                equeue_clampdiff(q->queue->target, equeue_tick()));\n    }\n    q->background.active = true;\n    equeue_mutex_unlock(&q->queuelock);\n}\n\nstruct equeue_chain_context {\n    equeue_t *q;\n    equeue_t *target;\n    int id;\n};\n\nstatic void equeue_chain_dispatch(void *p) {\n    equeue_dispatch((equeue_t *)p, 0);\n}\n\nstatic void equeue_chain_update(void *p, int ms) {\n    struct equeue_chain_context *c = (struct equeue_chain_context *)p;\n    equeue_cancel(c->target, c->id);\n\n    if (ms >= 0) {\n        c->id = equeue_call_in(c->target, ms, equeue_chain_dispatch, c->q);\n    } else {\n        equeue_dealloc(c->target, c);\n    }\n}\n\nvoid equeue_chain(equeue_t *q, equeue_t *target) {\n    if (!target) {\n        equeue_background(q, 0, 0);\n        return;\n    }\n\n    struct equeue_chain_context *c = equeue_alloc(q,\n            sizeof(struct equeue_chain_context));\n\n    c->q = q;\n    c->target = target;\n    c->id = 0;\n\n    equeue_background(q, equeue_chain_update, c);\n}\n","/*\n * Implementation for Posix compliant platforms\n *\n * Copyright (c) 2016 Christopher Haster\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include \"equeue/equeue_platform.h\"\n\n#if defined(EQUEUE_PLATFORM_POSIX)\n\n#include <time.h>\n#include <sys/time.h>\n#include <errno.h>\n\n\n// Tick operations\nunsigned equeue_tick(void) {\n    struct timeval tv;\n    gettimeofday(&tv, 0);\n    return (unsigned)(tv.tv_sec*1000 + tv.tv_usec/1000);\n}\n\n\n// Mutex operations\nint equeue_mutex_create(equeue_mutex_t *m) {\n    return pthread_mutex_init(m, 0);\n}\n\nvoid equeue_mutex_destroy(equeue_mutex_t *m) {\n    pthread_mutex_destroy(m);\n}\n\nvoid equeue_mutex_lock(equeue_mutex_t *m) {\n    pthread_mutex_lock(m);\n}\n\nvoid equeue_mutex_unlock(equeue_mutex_t *m) {\n    pthread_mutex_unlock(m);\n}\n\n\n// Semaphore operations\nint equeue_sema_create(equeue_sema_t *s) {\n    int err = pthread_mutex_init(&s->mutex, 0);\n    if (err) {\n        return err;\n    }\n\n    err = pthread_cond_init(&s->cond, 0);\n    if (err) {\n        return err;\n    }\n\n    s->signal = false;\n    return 0;\n}\n\nvoid equeue_sema_destroy(equeue_sema_t *s) {\n    pthread_cond_destroy(&s->cond);\n    pthread_mutex_destroy(&s->mutex);\n}\n\nvoid equeue_sema_signal(equeue_sema_t *s) {\n    pthread_mutex_lock(&s->mutex);\n    s->signal = true;\n    pthread_cond_signal(&s->cond);\n    pthread_mutex_unlock(&s->mutex);\n}\n\nbool equeue_sema_wait(equeue_sema_t *s, int ms) {\n    pthread_mutex_lock(&s->mutex);\n    if (!s->signal) {\n        if (ms < 0) {\n            pthread_cond_wait(&s->cond, &s->mutex);\n        } else {\n            struct timeval tv;\n            gettimeofday(&tv, 0);\n\n            struct timespec ts = {\n                .tv_sec = ms/1000 + tv.tv_sec,\n                .tv_nsec = ms*1000000 + tv.tv_usec*1000,\n            };\n\n            pthread_cond_timedwait(&s->cond, &s->mutex, &ts);\n        }\n    }\n\n    bool signal = s->signal;\n    s->signal = false;\n    pthread_mutex_unlock(&s->mutex);\n\n    return signal;\n}\n\n#endif\n","/*\n * Copyright (c) 2014-2015 ARM Limited. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n * Licensed under the Apache License, Version 2.0 (the License); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\n#ifdef MBED_CONF_MBED_TRACE_ENABLE\n#undef MBED_CONF_MBED_TRACE_ENABLE\n#endif\n#define MBED_CONF_MBED_TRACE_ENABLE 1\n#ifndef MBED_CONF_MBED_TRACE_FEA_IPV6\n#define MBED_CONF_MBED_TRACE_FEA_IPV6 1\n#endif\n\n#include \"mbed-trace/mbed_trace.h\"\n#if MBED_CONF_MBED_TRACE_FEA_IPV6 == 1\n#include \"mbed-client-libservice/ip6string.h\"\n#include \"mbed-client-libservice/common_functions.h\"\n#endif\n\n#if defined(YOTTA_CFG_MBED_TRACE_MEM)\n#define MBED_TRACE_MEM_INCLUDE      YOTTA_CFG_MBED_TRACE_MEM_INCLUDE\n#define MBED_TRACE_MEM_ALLOC        YOTTA_CFG_MBED_TRACE_MEM_ALLOC\n#define MBED_TRACE_MEM_FREE         YOTTA_CFG_MBED_TRACE_MEM_FREE\n#else /* YOTTA_CFG_MEMLIB */\n// Default options\n#ifndef MBED_TRACE_MEM_INCLUDE\n#define MBED_TRACE_MEM_INCLUDE   <stdlib.h>\n#endif\n#include MBED_TRACE_MEM_INCLUDE\n#ifndef MBED_TRACE_MEM_ALLOC\n#define MBED_TRACE_MEM_ALLOC malloc\n#endif\n#ifndef MBED_TRACE_MEM_FREE\n#define MBED_TRACE_MEM_FREE  free\n#endif\n#endif /* YOTTA_CFG_MEMLIB */\n\n#define VT100_COLOR_ERROR \"\\x1b[31m\"\n#define VT100_COLOR_WARN  \"\\x1b[33m\"\n#define VT100_COLOR_INFO  \"\\x1b[39m\"\n#define VT100_COLOR_DEBUG \"\\x1b[90m\"\n\n/** default max trace line size in bytes */\n#ifdef MBED_TRACE_LINE_LENGTH\n#define DEFAULT_TRACE_LINE_LENGTH         MBED_TRACE_LINE_LENGTH\n#elif defined YOTTA_CFG_MBED_TRACE_LINE_LENGTH\n#warning YOTTA_CFG_MBED_TRACE_LINE_LENGTH is deprecated and will be removed in the future! Use MBED_TRACE_LINE_LENGTH instead.\n#define DEFAULT_TRACE_LINE_LENGTH         YOTTA_CFG_MBED_TRACE_LINE_LENGTH\n#else\n#define DEFAULT_TRACE_LINE_LENGTH         1024\n#endif\n\n/** default max temporary buffer size in bytes, used in\n    trace_ipv6, trace_ipv6_prefix and trace_array */\n#ifdef MBED_TRACE_TMP_LINE_LENGTH\n#define DEFAULT_TRACE_TMP_LINE_LEN        MBED_TRACE_TMP_LINE_LENGTH\n#elif defined YOTTA_CFG_MBED_TRACE_TMP_LINE_LEN\n#warning The YOTTA_CFG_MBED_TRACE_TMP_LINE_LEN flag is deprecated and will be removed in the future! Use MBED_TRACE_TMP_LINE_LENGTH instead.\n#define DEFAULT_TRACE_TMP_LINE_LEN        YOTTA_CFG_MBED_TRACE_TMP_LINE_LEN\n#elif defined YOTTA_CFG_MTRACE_TMP_LINE_LEN\n#warning The YOTTA_CFG_MTRACE_TMP_LINE_LEN flag is deprecated and will be removed in the future! Use MBED_TRACE_TMP_LINE_LENGTH instead.\n#define DEFAULT_TRACE_TMP_LINE_LEN        YOTTA_CFG_MTRACE_TMP_LINE_LEN\n#else\n#define DEFAULT_TRACE_TMP_LINE_LEN        128\n#endif\n\n/** default max filters (include/exclude) length in bytes */\n#ifdef MBED_TRACE_FILTER_LENGTH\n#define DEFAULT_TRACE_FILTER_LENGTH       MBED_TRACE_FILTER_LENGTH\n#else\n#define DEFAULT_TRACE_FILTER_LENGTH       24\n#endif\n\n/** default trace configuration bitmask */\n#ifdef MBED_TRACE_CONFIG\n#define DEFAULT_TRACE_CONFIG              MBED_TRACE_CONFIG\n#else\n#define DEFAULT_TRACE_CONFIG              TRACE_MODE_COLOR | TRACE_ACTIVE_LEVEL_ALL | TRACE_CARRIAGE_RETURN\n#endif\n\n/** default print function, just redirect str to printf */\nstatic void mbed_trace_realloc( char **buffer, int *length_ptr, int new_length);\nstatic void mbed_trace_default_print(const char *str);\nstatic void mbed_trace_reset_tmp(void);\n\ntypedef struct trace_s {\n    /** trace configuration bits */\n    uint8_t trace_config;\n    /** exclude filters list, related group name */\n    char *filters_exclude;\n    /** include filters list, related group name */\n    char *filters_include;\n    /** Filters length */\n    int filters_length;\n    /** trace line */\n    char *line;\n    /** trace line length */\n    int line_length;\n    /** temporary data */\n    char *tmp_data;\n    /** temporary data array length */\n    int tmp_data_length;\n    /** temporary data pointer */\n    char *tmp_data_ptr;\n\n    /** prefix function, which can be used to put time to the trace line */\n    char *(*prefix_f)(size_t);\n    /** suffix function, which can be used to some string to the end of trace line */\n    char *(*suffix_f)(void);\n    /** print out function. Can be redirect to flash for example. */\n    void (*printf)(const char *);\n    /** print out function for TRACE_LEVEL_CMD */\n    void (*cmd_printf)(const char *);\n    /** mutex wait function which can be called to lock against a mutex. */\n    void (*mutex_wait_f)(void);\n    /** mutex release function which must be used to release the mutex locked by mutex_wait_f. */\n    void (*mutex_release_f)(void);\n    /** number of times the mutex has been locked */\n    int mutex_lock_count;\n} trace_t;\n\nstatic trace_t m_trace = {\n    .trace_config = DEFAULT_TRACE_CONFIG,\n    .filters_exclude = 0,\n    .filters_include = 0,\n    .filters_length = DEFAULT_TRACE_FILTER_LENGTH,\n    .line = 0,\n    .line_length = DEFAULT_TRACE_LINE_LENGTH,\n    .tmp_data = 0,\n    .tmp_data_length = DEFAULT_TRACE_TMP_LINE_LEN,\n    .prefix_f = 0,\n    .suffix_f = 0,\n    .printf  = mbed_trace_default_print,\n    .cmd_printf = 0,\n    .mutex_wait_f = 0,\n    .mutex_release_f = 0,\n    .mutex_lock_count = 0\n};\n\nint mbed_trace_init(void)\n{\n    if (m_trace.line == NULL) {\n        m_trace.line = MBED_TRACE_MEM_ALLOC(m_trace.line_length);\n    }\n\n    if (m_trace.tmp_data == NULL) {\n        m_trace.tmp_data = MBED_TRACE_MEM_ALLOC(m_trace.tmp_data_length);\n    }\n    m_trace.tmp_data_ptr = m_trace.tmp_data;\n\n    if (m_trace.filters_exclude == NULL) {\n        m_trace.filters_exclude = MBED_TRACE_MEM_ALLOC(m_trace.filters_length);\n    }\n    if (m_trace.filters_include == NULL) {\n        m_trace.filters_include = MBED_TRACE_MEM_ALLOC(m_trace.filters_length);\n    }\n\n    if (m_trace.line == NULL ||\n            m_trace.tmp_data == NULL ||\n            m_trace.filters_exclude == NULL  ||\n            m_trace.filters_include == NULL) {\n        //memory allocation fail\n        mbed_trace_free();\n        return -1;\n    }\n    memset(m_trace.tmp_data, 0, m_trace.tmp_data_length);\n    memset(m_trace.filters_exclude, 0, m_trace.filters_length);\n    memset(m_trace.filters_include, 0, m_trace.filters_length);\n    memset(m_trace.line, 0, m_trace.line_length);\n\n    return 0;\n}\nvoid mbed_trace_free(void)\n{\n    // release memory\n    MBED_TRACE_MEM_FREE(m_trace.line);\n    MBED_TRACE_MEM_FREE(m_trace.tmp_data);\n    MBED_TRACE_MEM_FREE(m_trace.filters_exclude);\n    MBED_TRACE_MEM_FREE(m_trace.filters_include);\n\n    // reset to default values\n    m_trace.trace_config = DEFAULT_TRACE_CONFIG;\n    m_trace.filters_exclude = 0;\n    m_trace.filters_include = 0;\n    m_trace.filters_length = DEFAULT_TRACE_FILTER_LENGTH;\n    m_trace.line = 0;\n    m_trace.line_length = DEFAULT_TRACE_LINE_LENGTH;\n    m_trace.tmp_data = 0;\n    m_trace.tmp_data_length = DEFAULT_TRACE_TMP_LINE_LEN;\n    m_trace.prefix_f = 0;\n    m_trace.suffix_f = 0;\n    m_trace.printf  = mbed_trace_default_print;\n    m_trace.cmd_printf = 0;\n    m_trace.mutex_wait_f = 0;\n    m_trace.mutex_release_f = 0;\n    m_trace.mutex_lock_count = 0;\n}\nstatic void mbed_trace_realloc( char **buffer, int *length_ptr, int new_length)\n{\n    MBED_TRACE_MEM_FREE(*buffer);\n    *buffer  = MBED_TRACE_MEM_ALLOC(new_length);\n    *length_ptr = new_length;\n}\nvoid mbed_trace_buffer_sizes(int lineLength, int tmpLength)\n{\n    if( lineLength > 0 ) {\n        mbed_trace_realloc( &(m_trace.line), &m_trace.line_length, lineLength );\n    }\n    if( tmpLength > 0 ) {\n        mbed_trace_realloc( &(m_trace.tmp_data), &m_trace.tmp_data_length, tmpLength);\n        mbed_trace_reset_tmp();\n    }\n}\nvoid mbed_trace_config_set(uint8_t config)\n{\n    m_trace.trace_config = config;\n}\nuint8_t mbed_trace_config_get(void)\n{\n    return m_trace.trace_config;\n}\nvoid mbed_trace_prefix_function_set(char *(*pref_f)(size_t))\n{\n    m_trace.prefix_f = pref_f;\n}\nvoid mbed_trace_suffix_function_set(char *(*suffix_f)(void))\n{\n    m_trace.suffix_f = suffix_f;\n}\nvoid mbed_trace_print_function_set(void (*printf)(const char *))\n{\n    m_trace.printf = printf;\n}\nvoid mbed_trace_cmdprint_function_set(void (*printf)(const char *))\n{\n    m_trace.cmd_printf = printf;\n}\nvoid mbed_trace_mutex_wait_function_set(void (*mutex_wait_f)(void))\n{\n    m_trace.mutex_wait_f = mutex_wait_f;\n}\nvoid mbed_trace_mutex_release_function_set(void (*mutex_release_f)(void))\n{\n    m_trace.mutex_release_f = mutex_release_f;\n}\nvoid mbed_trace_exclude_filters_set(char *filters)\n{\n    if (filters) {\n        (void)strncpy(m_trace.filters_exclude, filters, m_trace.filters_length);\n    } else {\n        m_trace.filters_exclude[0] = 0;\n    }\n}\nconst char *mbed_trace_exclude_filters_get(void)\n{\n    return m_trace.filters_exclude;\n}\nconst char *mbed_trace_include_filters_get(void)\n{\n    return m_trace.filters_include;\n}\nvoid mbed_trace_include_filters_set(char *filters)\n{\n    if (filters) {\n        (void)strncpy(m_trace.filters_include, filters, m_trace.filters_length);\n    } else {\n        m_trace.filters_include[0] = 0;\n    }\n}\nstatic int8_t mbed_trace_skip(int8_t dlevel, const char *grp)\n{\n    if (dlevel >= 0 && grp != 0) {\n        // filter debug prints only when dlevel is >0 and grp is given\n\n        /// @TODO this could be much better..\n        if (m_trace.filters_exclude[0] != '\\0' &&\n                strstr(m_trace.filters_exclude, grp) != 0) {\n            //grp was in exclude list\n            return 1;\n        }\n        if (m_trace.filters_include[0] != '\\0' &&\n                strstr(m_trace.filters_include, grp) == 0) {\n            //grp was in include list\n            return 1;\n        }\n    }\n    return 0;\n}\nstatic void mbed_trace_default_print(const char *str)\n{\n    puts(str);\n}\nvoid mbed_tracef(uint8_t dlevel, const char *grp, const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    mbed_vtracef(dlevel, grp, fmt, ap);\n    va_end(ap);\n}\nvoid mbed_vtracef(uint8_t dlevel, const char* grp, const char *fmt, va_list ap)\n{\n    if ( m_trace.mutex_wait_f ) {\n        m_trace.mutex_wait_f();\n        m_trace.mutex_lock_count++;\n    }\n\n    if (NULL == m_trace.line) {\n        goto end;\n    }\n\n    m_trace.line[0] = 0; //by default trace is empty\n\n    if (mbed_trace_skip(dlevel, grp) || fmt == 0 || grp == 0 || !m_trace.printf) {\n        //return tmp data pointer back to the beginning\n        mbed_trace_reset_tmp();\n        goto end;\n    }\n    if ((m_trace.trace_config & TRACE_MASK_LEVEL) &  dlevel) {\n        bool color = (m_trace.trace_config & TRACE_MODE_COLOR) != 0;\n        bool plain = (m_trace.trace_config & TRACE_MODE_PLAIN) != 0;\n        bool cr    = (m_trace.trace_config & TRACE_CARRIAGE_RETURN) != 0;\n\n        int retval = 0, bLeft = m_trace.line_length;\n        char *ptr = m_trace.line;\n        if (plain == true || dlevel == TRACE_LEVEL_CMD) {\n            //add trace data\n            retval = vsnprintf(ptr, bLeft, fmt, ap);\n            if (dlevel == TRACE_LEVEL_CMD && m_trace.cmd_printf) {\n                m_trace.cmd_printf(m_trace.line);\n                m_trace.cmd_printf(\"\\n\");\n            } else {\n                //print out whole data\n                m_trace.printf(m_trace.line);\n            }\n        } else {\n            if (color) {\n                if (cr) {\n                    retval = snprintf(ptr, bLeft, \"\\r\\x1b[2K\");\n                    if (retval >= bLeft) {\n                        retval = 0;\n                    }\n                    if (retval > 0) {\n                        ptr += retval;\n                        bLeft -= retval;\n                    }\n                }\n                if (bLeft > 0) {\n                    //include color in ANSI/VT100 escape code\n                    switch (dlevel) {\n                        case (TRACE_LEVEL_ERROR):\n                            retval = snprintf(ptr, bLeft, \"%s\", VT100_COLOR_ERROR);\n                            break;\n                        case (TRACE_LEVEL_WARN):\n                            retval = snprintf(ptr, bLeft, \"%s\", VT100_COLOR_WARN);\n                            break;\n                        case (TRACE_LEVEL_INFO):\n                            retval = snprintf(ptr, bLeft, \"%s\", VT100_COLOR_INFO);\n                            break;\n                        case (TRACE_LEVEL_DEBUG):\n                            retval = snprintf(ptr, bLeft, \"%s\", VT100_COLOR_DEBUG);\n                            break;\n                        default:\n                            color = 0; //avoid unneeded color-terminate code\n                            retval = 0;\n                            break;\n                    }\n                    if (retval >= bLeft) {\n                        retval = 0;\n                    }\n                    if (retval > 0 && color) {\n                        ptr += retval;\n                        bLeft -= retval;\n                    }\n                }\n\n            }\n            if (bLeft > 0 && m_trace.prefix_f) {\n                //find out length of body\n                size_t sz = 0;\n                va_list ap2;\n                va_copy(ap2, ap);\n                sz = vsnprintf(NULL, 0, fmt, ap2) + retval + (retval ? 4 : 0);\n                va_end(ap2);\n                //add prefix string\n                retval = snprintf(ptr, bLeft, \"%s\", m_trace.prefix_f(sz));\n                if (retval >= bLeft) {\n                    retval = 0;\n                }\n                if (retval > 0) {\n                    ptr += retval;\n                    bLeft -= retval;\n                }\n            }\n            if (bLeft > 0) {\n                //add group tag\n                switch (dlevel) {\n                    case (TRACE_LEVEL_ERROR):\n                        retval = snprintf(ptr, bLeft, \"[ERR ][%-4s]: \", grp);\n                        break;\n                    case (TRACE_LEVEL_WARN):\n                        retval = snprintf(ptr, bLeft, \"[WARN][%-4s]: \", grp);\n                        break;\n                    case (TRACE_LEVEL_INFO):\n                        retval = snprintf(ptr, bLeft, \"[INFO][%-4s]: \", grp);\n                        break;\n                    case (TRACE_LEVEL_DEBUG):\n                        retval = snprintf(ptr, bLeft, \"[DBG ][%-4s]: \", grp);\n                        break;\n                    default:\n                        retval = snprintf(ptr, bLeft, \"              \");\n                        break;\n                }\n                if (retval >= bLeft) {\n                    retval = 0;\n                }\n                if (retval > 0) {\n                    ptr += retval;\n                    bLeft -= retval;\n                }\n            }\n            if (retval > 0 && bLeft > 0) {\n                //add trace text\n                retval = vsnprintf(ptr, bLeft, fmt, ap);\n                if (retval >= bLeft) {\n                    retval = 0;\n                }\n                if (retval > 0) {\n                    ptr += retval;\n                    bLeft -= retval;\n                }\n            }\n\n            if (retval > 0 && bLeft > 0  && m_trace.suffix_f) {\n                //add suffix string\n                retval = snprintf(ptr, bLeft, \"%s\", m_trace.suffix_f());\n                if (retval >= bLeft) {\n                    retval = 0;\n                }\n                if (retval > 0) {\n                    ptr += retval;\n                    bLeft -= retval;\n                }\n            }\n\n            if (retval > 0 && bLeft > 0  && color) {\n                //add zero color VT100 when color mode\n                retval = snprintf(ptr, bLeft, \"\\x1b[0m\");\n                if (retval >= bLeft) {\n                    retval = 0;\n                }\n                if (retval > 0) {\n                    // not used anymore\n                    //ptr += retval;\n                    //bLeft -= retval;\n                }\n            }\n            //print out whole data\n            m_trace.printf(m_trace.line);\n        }\n        //return tmp data pointer back to the beginning\n        mbed_trace_reset_tmp();\n    }\n\nend:\n    if ( m_trace.mutex_release_f ) {\n        // Store the mutex lock count to temp variable so that it won't get\n        // clobbered during last loop iteration when mutex gets released\n        int count = m_trace.mutex_lock_count;\n        m_trace.mutex_lock_count = 0;\n        // Since the helper functions (eg. mbed_trace_array) are used like this:\n        //   mbed_tracef(TRACE_LEVEL_INFO, \"grp\", \"%s\", mbed_trace_array(some_array))\n        // The helper function MUST acquire the mutex if it modifies any buffers. However\n        // it CANNOT unlock the mutex because that would allow another thread to acquire\n        // the mutex after helper function unlocks it and before mbed_tracef acquires it\n        // for itself. This means that here we have to unlock the mutex as many times\n        // as it was acquired by trace function and any possible helper functions.\n        do {\n            m_trace.mutex_release_f();\n        } while (--count > 0);\n    }\n}\nstatic void mbed_trace_reset_tmp(void)\n{\n    m_trace.tmp_data_ptr = m_trace.tmp_data;\n}\nconst char *mbed_trace_last(void)\n{\n    return m_trace.line;\n}\n/* Helping functions */\n#define tmp_data_left()  m_trace.tmp_data_length-(m_trace.tmp_data_ptr-m_trace.tmp_data)\n#if MBED_CONF_MBED_TRACE_FEA_IPV6 == 1\nchar *mbed_trace_ipv6(const void *addr_ptr)\n{\n    /** Acquire mutex. It is released before returning from mbed_vtracef. */\n    if ( m_trace.mutex_wait_f ) {\n        m_trace.mutex_wait_f();\n        m_trace.mutex_lock_count++;\n    }\n    char *str = m_trace.tmp_data_ptr;\n    if (str == NULL) {\n        return \"\";\n    }\n    if (tmp_data_left() < 41) {\n        return \"\";\n    }\n    if (addr_ptr == NULL) {\n        return \"<null>\";\n    }\n    str[0] = 0;\n    m_trace.tmp_data_ptr += ip6tos(addr_ptr, str) + 1;\n    return str;\n}\nchar *mbed_trace_ipv6_prefix(const uint8_t *prefix, uint8_t prefix_len)\n{\n    /** Acquire mutex. It is released before returning from mbed_vtracef. */\n    if ( m_trace.mutex_wait_f ) {\n        m_trace.mutex_wait_f();\n        m_trace.mutex_lock_count++;\n    }\n    char *str = m_trace.tmp_data_ptr;\n    if (str == NULL) {\n        return \"\";\n    }\n    if (tmp_data_left() < 45) {\n        return \"\";\n    }\n\n    if ((prefix_len != 0 && prefix == NULL) || prefix_len > 128) {\n        return \"<err>\";\n    }\n\n    m_trace.tmp_data_ptr += ip6_prefix_tos(prefix, prefix_len, str) + 1;\n    return str;\n}\n#endif //MBED_CONF_MBED_TRACE_FEA_IPV6\nchar *mbed_trace_array(const uint8_t *buf, uint16_t len)\n{\n    /** Acquire mutex. It is released before returning from mbed_vtracef. */\n    if ( m_trace.mutex_wait_f ) {\n        m_trace.mutex_wait_f();\n        m_trace.mutex_lock_count++;\n    }\n    int i, bLeft = tmp_data_left();\n    char *str, *wptr;\n    str = m_trace.tmp_data_ptr;\n    if (len == 0 || str == NULL || bLeft == 0) {\n        return \"\";\n    }\n    if (buf == NULL) {\n        return \"<null>\";\n    }\n    wptr = str;\n    wptr[0] = 0;\n    const uint8_t *ptr = buf;\n    char overflow = 0;\n    for (i = 0; i < len; i++) {\n        if (bLeft <= 3) {\n            overflow = 1;\n            break;\n        }\n        int retval = snprintf(wptr, bLeft, \"%02x:\", *ptr++);\n        if (retval <= 0 || retval > bLeft) {\n            break;\n        }\n        bLeft -= retval;\n        wptr += retval;\n    }\n    if (wptr > str) {\n        if( overflow ) {\n            // replace last character as 'star',\n            // which indicate buffer len is not enough\n            *(wptr - 1) = '*';\n        } else {\n            //null to replace last ':' character\n            *(wptr - 1) = 0;\n        }\n    }\n    m_trace.tmp_data_ptr = wptr;\n    return str;\n}\n","/*\n * Copyright (c) 2014-2015 ARM Limited. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n * Licensed under the Apache License, Version 2.0 (the License); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#ifndef COMMON_FUNCTIONS_H_\n#define COMMON_FUNCTIONS_H_\n\n#include \"ns_types.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * Common write 64-bit variable to 8-bit pointer.\n *\n * Write 64 bits in big-endian (network) byte order.\n *\n * \\param value 64-bit variable\n * \\param ptr pointer where data to be written\n *\n * \\return updated pointer\n */\nNS_INLINE uint8_t *common_write_64_bit(uint64_t value, uint8_t ptr[__static 8]);\n\n/*\n * Common read 64-bit variable from 8-bit pointer.\n *\n * Read 64 bits in big-endian (network) byte order.\n *\n * \\param data_buf pointer where data to be read\n *\n * \\return 64-bit variable\n */\nNS_INLINE uint64_t common_read_64_bit(const uint8_t data_buf[__static 8]);\n\n/*\n * Common write 32-bit variable to 8-bit pointer.\n *\n * Write 32 bits in big-endian (network) byte order.\n *\n * \\param value 32-bit variable\n * \\param ptr pointer where data to be written\n *\n * \\return updated pointer\n */\nNS_INLINE uint8_t *common_write_32_bit(uint32_t value, uint8_t ptr[__static 4]);\n\n/*\n * Common read 32-bit variable from 8-bit pointer.\n *\n * Read 32 bits in big-endian (network) byte order.\n *\n * \\param data_buf pointer where data to be read\n *\n * \\return 32-bit variable\n */\nNS_INLINE uint32_t common_read_32_bit(const uint8_t data_buf[__static 4]);\n\n/*\n * Common write 32-bit variable to 8-bit pointer.\n *\n * Write 32 bits in little-endian byte order.\n *\n * \\param value 32-bit variable\n * \\param ptr pointer where data to be written\n *\n * \\return updated pointer\n */\nNS_INLINE uint8_t *common_write_32_bit_inverse(uint32_t value, uint8_t ptr[__static 4]);\n\n/*\n * Common read 32-bit variable from 8-bit pointer.\n *\n * Read 32 bits in little-endian byte order.\n *\n * \\param data_buf pointer where data to be read\n *\n * \\return 32-bit variable\n */\nNS_INLINE uint32_t common_read_32_bit_inverse(const uint8_t data_buf[__static 4]);\n\n/*\n * Common write 24-bit variable to 8-bit pointer.\n *\n * Write 24 bits in big-endian (network) byte order.\n *\n * \\param value 24-bit variable\n * \\param ptr pointer where data to be written\n *\n * \\return updated pointer\n */\nNS_INLINE uint8_t *common_write_24_bit(uint_fast24_t value, uint8_t ptr[__static 3]);\n\n/*\n * Common read 24-bit variable from 8-bit pointer.\n *\n * Read 24 bits in big-endian (network) byte order.\n *\n * \\param data_buf pointer where data to be read\n *\n * \\return 24-bit variable\n */\nNS_INLINE uint_fast24_t common_read_24_bit(const uint8_t data_buf[__static 3]);\n\n/*\n * Common write 24-bit variable to 8-bit pointer.\n *\n * Write 24 bits in little-endian byte order.\n *\n * \\param value 24-bit variable\n * \\param ptr pointer where data to be written\n *\n * \\return updated pointer\n */\nNS_INLINE uint8_t *common_write_24_bit_inverse(uint_fast24_t value, uint8_t ptr[__static 3]);\n\n/*\n * Common read 24-bit variable from 8-bit pointer.\n *\n * Read 24 bits in little-endian byte order.\n *\n * \\param data_buf pointer where data to be read\n *\n * \\return 24-bit variable\n */\nNS_INLINE uint_fast24_t common_read_24_bit_inverse(const uint8_t data_buf[__static 3]);\n\n/*\n * Common write 16-bit variable to 8-bit pointer.\n *\n * Write 16 bits in big-endian (network) byte order.\n *\n * \\param value 16-bit variable\n * \\param ptr pointer where data to be written\n *\n * \\return updated pointer\n */\nNS_INLINE uint8_t *common_write_16_bit(uint16_t value, uint8_t ptr[__static 2]);\n\n/*\n * Common read 16-bit variable from 8-bit pointer.\n *\n * Read 16 bits in big-endian (network) byte order.\n *\n * \\param data_buf pointer where data to be read\n *\n * \\return 16-bit variable\n */\nNS_INLINE uint16_t common_read_16_bit(const uint8_t data_buf[__static 2]);\n\n/*\n * Common write 16-bit variable to 8-bit pointer.\n *\n * Write 16 bits in little-endian byte order.\n *\n * \\param value 16-bit variable\n * \\param ptr pointer where data to be written\n *\n * \\return updated pointer\n */\nNS_INLINE uint8_t *common_write_16_bit_inverse(uint16_t value, uint8_t ptr[__static 2]);\n\n/*\n * Common read 16-bit variable from 8-bit pointer.\n *\n * Read 16 bits in little-endian byte order.\n *\n * \\param data_buf pointer where data to be read\n *\n * \\return 16-bit variable\n */\nNS_INLINE uint16_t common_read_16_bit_inverse(const uint8_t data_buf[__static 2]);\n\n/*\n * Count bits in a byte\n *\n * \\param byte byte to inspect\n *\n * \\return number of 1-bits in byte\n */\nNS_INLINE uint_fast8_t common_count_bits(uint8_t byte);\n\n/*\n * Count leading zeros in a byte\n *\n * \\deprecated Use common_count_leading_zeros_8\n *\n * \\param byte byte to inspect\n *\n * \\return number of leading zeros in byte (0-8)\n */\nNS_INLINE uint_fast8_t common_count_leading_zeros(uint8_t byte);\n\n/*\n * Count leading zeros in a byte\n *\n * \\param byte byte to inspect\n *\n * \\return number of leading zeros in byte (0-8)\n */\nNS_INLINE uint_fast8_t common_count_leading_zeros_8(uint8_t byte);\n\n/*\n * Count leading zeros in a 16-bit value\n *\n * \\param value value to inspect\n *\n * \\return number of leading zeros in byte (0-16)\n */\nNS_INLINE uint_fast8_t common_count_leading_zeros_16(uint16_t value);\n\n/*\n * Count leading zeros in a 32-bit value\n *\n * \\param value value to inspect\n *\n * \\return number of leading zeros in byte (0-32)\n */\nNS_INLINE uint_fast8_t common_count_leading_zeros_32(uint32_t value);\n\n/*\n * Compare 8-bit serial numbers\n *\n * Compare two 8-bit serial numbers, according to RFC 1982 Serial Number\n * Arithmetic.\n *\n * \\param s1 first serial number\n * \\param s2 second serial number\n *\n * \\return true if s1 > s2\n * \\return false if s1 <= s2, or the comparison is undefined\n */\nNS_INLINE bool common_serial_number_greater_8(uint8_t s1, uint8_t s2);\n\n/*\n * Compare 16-bit serial numbers\n *\n * Compare two 16-bit serial numbers, according to RFC 1982 Serial Number\n * Arithmetic.\n *\n * \\param s1 first serial number\n * \\param s2 second serial number\n *\n * \\return true if s1 > s2\n * \\return false if s1 <= s2, or the comparison is undefined\n */\nNS_INLINE bool common_serial_number_greater_16(uint16_t s1, uint16_t s2);\n\n/*\n * Compare 32-bit serial numbers\n *\n * Compare two 32-bit serial numbers, according to RFC 1982 Serial Number\n * Arithmetic.\n *\n * \\param s1 first serial number\n * \\param s2 second serial number\n *\n * \\return true if s1 > s2\n * \\return false if s1 <= s2, or the comparison is undefined\n */\nNS_INLINE bool common_serial_number_greater_32(uint32_t s1, uint32_t s2);\n\n/*\n * Test a bit in an bit array.\n *\n * Check whether a particular bit is set in a bit string. The bit array\n * is in big-endian (network) bit order.\n *\n * \\param bitset pointer to bit array\n * \\param bit index of bit - 0 is the most significant bit of the first byte\n *\n * \\return true if the bit is set\n */\nNS_INLINE bool bit_test(const uint8_t *bitset, uint_fast8_t bit);\n\n/*\n * Set a bit in an bit array.\n *\n * Set a bit in a bit array. The array is in big-endian (network) bit order.\n *\n * \\param bitset pointer to bit array\n * \\param bit index of bit - 0 is the most significant bit of the first byte\n */\nNS_INLINE void bit_set(uint8_t *bitset, uint_fast8_t bit);\n\n/*\n * Clear a bit in an bit array.\n *\n * Clear a bit in a bit array. The bit array is in big-endian (network) bit order.\n *\n * \\param bitset pointer to bit array\n * \\param bit index of bit - 0 is the most significant bit of the first byte\n */\nNS_INLINE void bit_clear(uint8_t *bitset, uint_fast8_t bit);\n\n/*\n * Compare two bitstrings.\n *\n * Compare two bitstrings of specified length. The bit strings are in\n * big-endian (network) bit order.\n *\n * \\param a pointer to first string\n * \\param b pointer to second string\n * \\param bits number of bits to compare\n *\n * \\return true if the strings compare equal\n */\nbool bitsequal(const uint8_t *a, const uint8_t *b, uint_fast8_t bits);\n\n/*\n * Copy a bitstring\n *\n * Copy a bitstring of specified length. The bit string is in big-endian\n * (network) bit order. Bits beyond the bitlength at the destination are not\n * modified.\n *\n * For example, copying 4 bits sets the first 4 bits of dst[0] from src[0],\n * the lower 4 bits of dst[0] are unmodified.\n *\n * \\param dst destination pointer\n * \\param src source pointer\n * \\param bits number of bits to copy\n *\n * \\return the value of dst\n */\nuint8_t *bitcopy(uint8_t *restrict dst, const uint8_t *restrict src, uint_fast8_t bits);\n\n/*\n * Copy a bitstring and pad last byte with zeros\n *\n * Copy a bitstring of specified length. The bit string is in big-endian\n * (network) bit order. Bits beyond the bitlength in the last destination byte are\n * zeroed.\n *\n * For example, copying 4 bits sets the first 4 bits of dst[0] from src[0], and\n * the lower 4 bits of dst[0] are set to 0.\n *\n * \\param dst destination pointer\n * \\param src source pointer\n * \\param bits number of bits to copy\n *\n * \\return the value of dst\n */\nuint8_t *bitcopy0(uint8_t *restrict dst, const uint8_t *restrict src, uint_fast8_t bits);\n\n/* Provide definitions, either for inlining, or for common_functions.c */\n#if defined NS_ALLOW_INLINING || defined COMMON_FUNCTIONS_FN\n#ifndef COMMON_FUNCTIONS_FN\n#define COMMON_FUNCTIONS_FN NS_INLINE\n#endif\n\nCOMMON_FUNCTIONS_FN uint8_t *common_write_64_bit(uint64_t value, uint8_t ptr[__static 8])\n{\n    *ptr++ = value >> 56;\n    *ptr++ = value >> 48;\n    *ptr++ = value >> 40;\n    *ptr++ = value >> 32;\n    *ptr++ = value >> 24;\n    *ptr++ = value >> 16;\n    *ptr++ = value >> 8;\n    *ptr++ = value;\n    return ptr;\n}\n\nCOMMON_FUNCTIONS_FN uint64_t common_read_64_bit(const uint8_t data_buf[__static 8])\n{\n    uint64_t temp_64;\n    temp_64 = (uint64_t)(*data_buf++) << 56;\n    temp_64 += (uint64_t)(*data_buf++) << 48;\n    temp_64 += (uint64_t)(*data_buf++) << 40;\n    temp_64 += (uint64_t)(*data_buf++) << 32;\n    temp_64 += (uint64_t)(*data_buf++) << 24;\n    temp_64 += (uint64_t)(*data_buf++) << 16;\n    temp_64 += (uint64_t)(*data_buf++) << 8;\n    temp_64 += *data_buf++;\n    return temp_64;\n}\n\nCOMMON_FUNCTIONS_FN uint8_t *common_write_32_bit(uint32_t value, uint8_t ptr[__static 4])\n{\n    *ptr++ = value >> 24;\n    *ptr++ = value >> 16;\n    *ptr++ = value >> 8;\n    *ptr++ = value;\n    return ptr;\n}\n\nCOMMON_FUNCTIONS_FN uint32_t common_read_32_bit(const uint8_t data_buf[__static 4])\n{\n    uint32_t temp_32;\n    temp_32 = (uint32_t)(*data_buf++) << 24;\n    temp_32 += (uint32_t)(*data_buf++) << 16;\n    temp_32 += (uint32_t)(*data_buf++) << 8;\n    temp_32 += *data_buf++;\n    return temp_32;\n}\n\nCOMMON_FUNCTIONS_FN uint8_t *common_write_32_bit_inverse(uint32_t value, uint8_t ptr[__static 4])\n{\n    *ptr++ = value;\n    *ptr++ = value >> 8;\n    *ptr++ = value >> 16;\n    *ptr++ = value >> 24;\n    return ptr;\n}\n\nCOMMON_FUNCTIONS_FN uint32_t common_read_32_bit_inverse(const uint8_t data_buf[__static 4])\n{\n    uint32_t temp_32;\n    temp_32 =  *data_buf++;\n    temp_32 += (uint32_t)(*data_buf++) << 8;\n    temp_32 += (uint32_t)(*data_buf++) << 16;\n    temp_32 += (uint32_t)(*data_buf++) << 24;\n    return temp_32;\n}\n\nCOMMON_FUNCTIONS_FN uint8_t *common_write_24_bit(uint_fast24_t value, uint8_t ptr[__static 3])\n{\n    *ptr++ = value >> 16;\n    *ptr++ = value >> 8;\n    *ptr++ = value;\n    return ptr;\n}\n\nCOMMON_FUNCTIONS_FN uint_fast24_t common_read_24_bit(const uint8_t data_buf[__static 3])\n{\n    uint_fast24_t temp_24;\n    temp_24 = (uint_fast24_t)(*data_buf++) << 16;\n    temp_24 += (uint_fast24_t)(*data_buf++) << 8;\n    temp_24 += *data_buf++;\n    return temp_24;\n}\n\nCOMMON_FUNCTIONS_FN uint8_t *common_write_24_bit_inverse(uint_fast24_t value, uint8_t ptr[__static 3])\n{\n    *ptr++ = value;\n    *ptr++ = value >> 8;\n    *ptr++ = value >> 16;\n    return ptr;\n}\n\nCOMMON_FUNCTIONS_FN uint_fast24_t common_read_24_bit_inverse(const uint8_t data_buf[__static 3])\n{\n    uint_fast24_t temp_24;\n    temp_24 =  *data_buf++;\n    temp_24 += (uint_fast24_t)(*data_buf++) << 8;\n    temp_24 += (uint_fast24_t)(*data_buf++) << 16;\n    return temp_24;\n}\n\nCOMMON_FUNCTIONS_FN uint8_t *common_write_16_bit(uint16_t value, uint8_t ptr[__static 2])\n{\n    *ptr++ = value >> 8;\n    *ptr++ = value;\n    return ptr;\n}\n\nCOMMON_FUNCTIONS_FN uint16_t common_read_16_bit(const uint8_t data_buf[__static 2])\n{\n    uint16_t temp_16;\n    temp_16 = (uint16_t)(*data_buf++) << 8;\n    temp_16 += *data_buf++;\n    return temp_16;\n}\n\nCOMMON_FUNCTIONS_FN uint8_t *common_write_16_bit_inverse(uint16_t value, uint8_t ptr[__static 2])\n{\n    *ptr++ = value;\n    *ptr++ = value >> 8;\n    return ptr;\n}\n\nCOMMON_FUNCTIONS_FN uint16_t common_read_16_bit_inverse(const uint8_t data_buf[__static 2])\n{\n    uint16_t temp_16;\n    temp_16 = *data_buf++;\n    temp_16 += (uint16_t)(*data_buf++) << 8;\n    return temp_16;\n}\n\nCOMMON_FUNCTIONS_FN uint_fast8_t common_count_bits(uint8_t byte)\n{\n    /* First step sets each bit pair to be count of bits (00,01,10) */\n    /* [00-00 = 00, 01-00 = 01, 10-01 = 01, 11-01 = 10] */\n    uint_fast8_t count = byte - ((byte >> 1) & 0x55);\n    /* Add bit pairs to make each nibble contain count of bits (0-4) */\n    count = (count & 0x33) + ((count >> 2) & 0x33);\n    /* Final result is sum of nibbles (0-8) */\n    count = (count >> 4) + (count & 0x0F);\n    return count;\n}\n\nCOMMON_FUNCTIONS_FN uint_fast8_t common_count_leading_zeros(uint8_t byte)\n{\n    return common_count_leading_zeros_8(byte);\n}\n\nCOMMON_FUNCTIONS_FN uint_fast8_t common_count_leading_zeros_8(uint8_t byte)\n{\n#ifdef  __CC_ARM\n    return byte ? __clz((unsigned int) byte << 24) : 8;\n#elif defined __GNUC__\n    return byte ? __builtin_clz((unsigned int) byte << 24) : 8;\n#else\n    uint_fast8_t cnt = 0;\n    if (byte == 0) {\n        return 8;\n    }\n    if ((byte & 0xF0) == 0) {\n        byte <<= 4;\n        cnt += 4;\n    }\n    if ((byte & 0xC0) == 0) {\n        byte <<= 2;\n        cnt += 2;\n    }\n    if ((byte & 0x80) == 0) {\n        cnt += 1;\n    }\n\n    return cnt;\n#endif\n}\n\nCOMMON_FUNCTIONS_FN uint_fast8_t common_count_leading_zeros_16(uint16_t value)\n{\n#ifdef  __CC_ARM\n    return value ? __clz((unsigned int) value << 16) : 16;\n#elif defined __GNUC__\n    return value ? __builtin_clz((unsigned int) value << 16) : 16;\n#else\n    uint_fast8_t cnt = 0;\n    if (value == 0) {\n        return 16;\n    }\n    if ((value & 0xFF00) == 0) {\n        value <<= 8;\n        cnt += 8;\n    }\n    if ((value & 0xF000) == 0) {\n        value <<= 4;\n        cnt += 4;\n    }\n    if ((value & 0xC000) == 0) {\n        value <<= 2;\n        cnt += 2;\n    }\n    if ((value & 0x8000) == 0) {\n        cnt += 1;\n    }\n\n    return cnt;\n#endif\n}\n\nCOMMON_FUNCTIONS_FN uint_fast8_t common_count_leading_zeros_32(uint32_t value)\n{\n#ifdef  __CC_ARM\n    return __clz(value);\n#elif defined __GNUC__\n    return value ? __builtin_clz(value) : 32;\n#else\n    uint_fast8_t cnt = 0;\n    if (value == 0) {\n        return 32;\n    }\n    if ((value & 0xFFFF0000) == 0) {\n        value <<= 16;\n        cnt += 16;\n    }\n    if ((value & 0xFF000000) == 0) {\n        value <<= 8;\n        cnt += 8;\n    }\n    if ((value & 0xF0000000) == 0) {\n        value <<= 4;\n        cnt += 4;\n    }\n    if ((value & 0xC0000000) == 0) {\n        value <<= 2;\n        cnt += 2;\n    }\n    if ((value & 0x80000000) == 0) {\n        cnt += 1;\n    }\n\n    return cnt;\n#endif\n}\n\nCOMMON_FUNCTIONS_FN bool common_serial_number_greater_8(uint8_t s1, uint8_t s2)\n{\n    return (s1 > s2 && s1 - s2 < UINT8_C(0x80)) || (s1 < s2 && s2 - s1 > UINT8_C(0x80));\n}\n\nCOMMON_FUNCTIONS_FN bool common_serial_number_greater_16(uint16_t s1, uint16_t s2)\n{\n    return (s1 > s2 && s1 - s2 < UINT16_C(0x8000)) || (s1 < s2 && s2 - s1 > UINT16_C(0x8000));\n}\n\nCOMMON_FUNCTIONS_FN bool common_serial_number_greater_32(uint32_t s1, uint32_t s2)\n{\n    return (s1 > s2 && s1 - s2 < UINT32_C(0x80000000)) || (s1 < s2 && s2 - s1 > UINT32_C(0x80000000));\n}\n\nCOMMON_FUNCTIONS_FN bool bit_test(const uint8_t *bitset, uint_fast8_t bit)\n{\n    return bitset[bit >> 3] & (0x80 >> (bit & 7));\n}\n\nCOMMON_FUNCTIONS_FN void bit_set(uint8_t *bitset, uint_fast8_t bit)\n{\n    bitset[bit >> 3] |= (0x80 >> (bit & 7));\n}\n\nCOMMON_FUNCTIONS_FN void bit_clear(uint8_t *bitset, uint_fast8_t bit)\n{\n    bitset[bit >> 3] &= ~(0x80 >> (bit & 7));\n}\n\n#endif /* defined NS_ALLOW_INLINING || defined COMMON_FUNCTIONS_FN */\n\n#ifdef __cplusplus\n}\n#endif\n#endif /*__COMMON_FUNCTIONS_H_*/\n","/*\n * Copyright (c) 2014-2015 ARM Limited. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n * Licensed under the Apache License, Version 2.0 (the License); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include <stdio.h>\n#include <string.h>\n#include \"common_functions.h\"\n#include \"ip6string.h\"\n\n/**\n * Print binary IPv6 address to a string.\n * String must contain enough room for full address, 40 bytes exact.\n * IPv4 tunneling addresses are not covered.\n * \\param addr IPv6 address.\n * \\p buffer to write string to.\n */\nuint_fast8_t ip6tos(const void *ip6addr, char *p)\n{\n    char *p_orig = p;\n    uint_fast8_t zero_start = 255, zero_len = 1;\n    const uint8_t *addr = ip6addr;\n    uint_fast16_t part;\n\n    /* Follow RFC 5952 - pre-scan for longest run of zeros */\n    for (uint_fast8_t n = 0; n < 8; n++) {\n        part = *addr++;\n        part = (part << 8) | *addr++;\n        if (part != 0) {\n            continue;\n        }\n\n        /* We're at the start of a run of zeros - scan to non-zero (or end) */\n        uint_fast8_t n0 = n;\n        for (n = n0 + 1; n < 8; n++) {\n            part = *addr++;\n            part = (part << 8) | *addr++;\n            if (part != 0) {\n                break;\n            }\n        }\n\n        /* Now n0->initial zero of run, n->after final zero in run. Is this the\n         * longest run yet? If equal, we stick with the previous one - RFC 5952\n         * S4.2.3. Note that zero_len being initialised to 1 stops us\n         * shortening a 1-part run (S4.2.2.)\n         */\n        if (n - n0 > zero_len) {\n            zero_start = n0;\n            zero_len = n - n0;\n        }\n\n        /* Continue scan for initial zeros from part n+1 - we've already\n         * consumed part n, and know it's non-zero. */\n    }\n\n    /* Now go back and print, jumping over any zero run */\n    addr = ip6addr;\n    for (uint_fast8_t n = 0; n < 8;) {\n        if (n == zero_start) {\n            if (n == 0) {\n                *p++ = ':';\n            }\n            *p++ = ':';\n            addr += 2 * zero_len;\n            n += zero_len;\n            continue;\n        }\n\n        part = *addr++;\n        part = (part << 8) | *addr++;\n        n++;\n\n        p += sprintf(p, \"%\"PRIxFAST16, part);\n\n        /* One iteration writes \"part:\" rather than \":part\", and has the\n         * explicit check for n == 8 below, to allow easy extension for\n         * IPv4-in-IPv6-type addresses (\"xxxx::xxxx:a.b.c.d\"): we'd just\n         * run the same loop for 6 parts, and output would then finish with the\n         * required : or ::, ready for \"a.b.c.d\" to be tacked on.\n         */\n        if (n != 8) {\n            *p++ = ':';\n        }\n    }\n    *p = '\\0';\n\n    // Return length of generated string, excluding the terminating null character\n    return p - p_orig;\n}\n\nuint_fast8_t ip6_prefix_tos(const void *prefix, uint_fast8_t prefix_len, char *p)\n{\n    char *wptr = p;\n    uint8_t addr[16] = {0};\n\n    if (prefix_len > 128) {\n        return 0;\n    }\n\n    // Generate prefix part of the string\n    bitcopy(addr, prefix, prefix_len);\n    wptr += ip6tos(addr, wptr);\n    // Add the prefix length part of the string\n    wptr += sprintf(wptr, \"/%\"PRIuFAST8, prefix_len);\n\n    // Return total length of generated string\n    return wptr - p;\n}\n","/*\n * Copyright (c) 2014-2015 ARM Limited. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n * Licensed under the Apache License, Version 2.0 (the License); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include <string.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include \"common_functions.h\"\n#include \"ip6string.h\"\n\nstatic uint16_t hex(const char *p);\n\n/**\n * Convert numeric IPv6 address string to a binary.\n * IPv4 tunnelling addresses are not covered.\n * \\param ip6addr IPv6 address in string format.\n * \\param len Length of ipv6 string.\n * \\param dest buffer for address. MUST be 16 bytes.\n */\nvoid stoip6(const char *ip6addr, size_t len, void *dest)\n{\n    uint8_t *addr;\n    const char *p, *q;\n    int_fast8_t field_no, coloncolon = -1;\n\n    addr = dest;\n\n    if (len > 39) { // Too long, not possible. We do not support IPv4-mapped IPv6 addresses\n        return;\n    }\n\n    // First go forward the string, until end, noting :: position if any\n    for (field_no = 0, p = ip6addr; (len > (size_t)(p - ip6addr)) && *p && field_no < 8; p = q + 1) {\n        q = p;\n        // Seek for ':' or end\n        while (*q && (*q != ':')) {\n            q++;\n        }\n        //Convert and write this part, (high-endian AKA network byte order)\n        addr = common_write_16_bit(hex(p), addr);\n        field_no++;\n        //Check if we reached \"::\"\n        if ((len > (size_t)(q - ip6addr)) && *q && (q[0] == ':') && (q[1] == ':')) {\n            coloncolon = field_no;\n            q++;\n        }\n    }\n\n    if (coloncolon != -1) {\n        /* Insert zeros in the appropriate place */\n        uint_fast8_t head_size = 2 * coloncolon;\n        uint_fast8_t inserted_size = 2 * (8 - field_no);\n        uint_fast8_t tail_size = 16 - head_size - inserted_size;\n        addr = dest;\n        memmove(addr + head_size + inserted_size, addr + head_size, tail_size);\n        memset(addr + head_size, 0, inserted_size);\n    } else if (field_no != 8) {\n        /* Should really report an error if we didn't get 8 fields */\n        memset(addr, 0, 16 - field_no * 2);\n    }\n}\nunsigned char  sipv6_prefixlength(const char *ip6addr)\n{\n    char *ptr = strchr(ip6addr, '/');\n    if (ptr) {\n        return (unsigned char)strtoul(ptr + 1, 0, 10);\n    }\n    return 0;\n}\nstatic uint16_t hex(const char *p)\n{\n    uint16_t val = 0;\n\n    for (;;) {\n        char c = *p++;\n        if ((c >= '0') && (c <= '9')) {\n            val = (val << 4) | (c - '0');\n        } else if ((c >= 'A') && (c <= 'F')) {\n            val = (val << 4) | (10 + (c - 'A'));\n        } else if ((c >= 'a') && (c <= 'f')) {\n            val = (val << 4) | (10 + (c - 'a'));\n        } else {\n            break; // Non hex character\n        }\n    }\n    return val;\n}\n","/* mbed Microcontroller Library\n * Copyright (c) 2006-2015 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#ifndef MBED_CALLBACK_H\n#define MBED_CALLBACK_H\n\n#include <string.h>\n#include <stdint.h>\n#include <new>\n#include \"platform/mbed_assert.h\"\n#include \"platform/mbed_toolchain.h\"\n\nnamespace mbed {\n/** \\addtogroup platform */\n/** @{*/\n/**\n * \\defgroup platform_Callback Callback class\n * @{\n */\n\n/** Callback class based on template specialization\n *\n * @note Synchronization level: Not protected\n */\ntemplate <typename F>\nclass Callback;\n\n// Internal sfinae declarations\n//\n// These are used to eliminate overloads based on type attributes\n// 1. Does a function object have a call operator\n// 2. Does a function object fit in the available storage\n//\n// These eliminations are handled cleanly by the compiler and avoid\n// massive and misleading error messages when confronted with an\n// invalid type (or worse, runtime failures)\nnamespace detail {\n    struct nil {};\n\n    template <bool B, typename R = nil>\n    struct enable_if { typedef R type; };\n\n    template <typename R>\n    struct enable_if<false, R> {};\n\n    template <typename M, M>\n    struct is_type {\n        static const bool value = true;\n    };\n}\n\n#define MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, M)                            \\\n    typename detail::enable_if<                                             \\\n            detail::is_type<M, &F::operator()>::value &&                    \\\n            sizeof(F) <= sizeof(uintptr_t)                                  \\\n        >::type = detail::nil()\n\n/** Callback class based on template specialization\n *\n * @note Synchronization level: Not protected\n */\ntemplate <typename R>\nclass Callback<R()> {\npublic:\n    /** Create a Callback with a static function\n     *  @param func     Static function to attach\n     */\n    Callback(R (*func)() = 0) {\n        if (!func) {\n            memset(this, 0, sizeof(Callback));\n        } else {\n            generate(func);\n        }\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     */\n    Callback(const Callback<R()> &func) {\n        if (func._ops) {\n            func._ops->move(this, &func);\n        }\n        _ops = func._ops;\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(U *obj, R (T::*method)()) {\n        generate(method_context<T, R (T::*)()>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const U *obj, R (T::*method)() const) {\n        generate(method_context<const T, R (T::*)() const>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(volatile U *obj, R (T::*method)() volatile) {\n        generate(method_context<volatile T, R (T::*)() volatile>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const volatile U *obj, R (T::*method)() const volatile) {\n        generate(method_context<const volatile T, R (T::*)() const volatile>(obj, method));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(T*), U *arg) {\n        generate(function_context<R (*)(T*), T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const T*), const U *arg) {\n        generate(function_context<R (*)(const T*), const T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(volatile T*), volatile U *arg) {\n        generate(function_context<R (*)(volatile T*), volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const volatile T*), const volatile U *arg) {\n        generate(function_context<R (*)(const volatile T*), const volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)())) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() const)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() const volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(U *obj, R (*func)(T*)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const U *obj, R (*func)(const T*)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(volatile U *obj, R (*func)(volatile T*)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const volatile U *obj, R (*func)(const volatile T*)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Destroy a callback\n     */\n    ~Callback() {\n        if (_ops) {\n            _ops->dtor(this);\n        }\n    }\n\n    /** Attach a static function\n     *  @param func     Static function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)()) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const Callback<R()> &func) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(U *obj, R (T::*method)()) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const U *obj, R (T::*method)() const) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile U *obj, R (T::*method)() volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile U *obj, R (T::*method)() const volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(T*), U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const T*), const U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(volatile T*), volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const volatile T*), const volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a function object\n     *  @param f     Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)())) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f     Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() const)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() const volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(U *obj, R (*func)(T*)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const U *obj, R (*func)(const T*)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(volatile U *obj, R (*func)(volatile T*)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const volatile U *obj, R (*func)(const volatile T*)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Assign a callback\n     */\n    Callback &operator=(const Callback &that) {\n        if (this != &that) {\n            this->~Callback();\n            new (this) Callback(that);\n        }\n\n        return *this;\n    }\n\n    /** Call the attached function\n     */\n    R call() const {\n        MBED_ASSERT(_ops);\n        return _ops->call(this);\n    }\n\n    /** Call the attached function\n     */\n    R operator()() const {\n        return call();\n    }\n\n    /** Test if function has been attached\n     */\n    operator bool() const {\n        return _ops;\n    }\n\n    /** Test for equality\n     */\n    friend bool operator==(const Callback &l, const Callback &r) {\n        return memcmp(&l, &r, sizeof(Callback)) == 0;\n    }\n\n    /** Test for inequality\n     */\n    friend bool operator!=(const Callback &l, const Callback &r) {\n        return !(l == r);\n    }\n\n    /** Static thunk for passing as C-style function\n     *  @param func Callback to call passed as void pointer\n     *  @return the value as determined by func which is of \n     *      type and determined by the signiture of func\n     */\n    static R thunk(void *func) {\n        return static_cast<Callback*>(func)->call();\n    }\n\nprivate:\n    // Stored as pointer to function and pointer to optional object\n    // Function pointer is stored as union of possible function types\n    // to guarantee proper size and alignment\n    struct _class;\n    union {\n        void (*_staticfunc)();\n        void (*_boundfunc)(_class*);\n        void (_class::*_methodfunc)();\n    } _func;\n    void *_obj;\n\n    // Dynamically dispatched operations\n    const struct ops {\n        R (*call)(const void*);\n        void (*move)(void*, const void*);\n        void (*dtor)(void*);\n    } *_ops;\n\n    // Generate operations for function object\n    template <typename F>\n    void generate(const F &f) {\n        static const ops ops = {\n            &Callback::function_call<F>,\n            &Callback::function_move<F>,\n            &Callback::function_dtor<F>,\n        };\n\n        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),\n                \"Type F must not exceed the size of the Callback class\");\n        memset(this, 0, sizeof(Callback));\n        new (this) F(f);\n        _ops = &ops;\n    }\n\n    // Function attributes\n    template <typename F>\n    static R function_call(const void *p) {\n        return (*(F*)p)();\n    }\n\n    template <typename F>\n    static void function_move(void *d, const void *p) {\n        new (d) F(*(F*)p);\n    }\n\n    template <typename F>\n    static void function_dtor(void *p) {\n        ((F*)p)->~F();\n    }\n\n    // Wrappers for functions with context\n    template <typename O, typename M>\n    struct method_context {\n        M method;\n        O *obj;\n\n        method_context(O *obj, M method)\n            : method(method), obj(obj) {}\n\n        R operator()() const {\n            return (obj->*method)();\n        }\n    };\n\n    template <typename F, typename A>\n    struct function_context {\n        F func;\n        A *arg;\n\n        function_context(F func, A *arg)\n            : func(func), arg(arg) {}\n\n        R operator()() const {\n            return func(arg);\n        }\n    };\n};\n\n/** Callback class based on template specialization\n *\n * @note Synchronization level: Not protected\n */\ntemplate <typename R, typename A0>\nclass Callback<R(A0)> {\npublic:\n    /** Create a Callback with a static function\n     *  @param func     Static function to attach\n     */\n    Callback(R (*func)(A0) = 0) {\n        if (!func) {\n            memset(this, 0, sizeof(Callback));\n        } else {\n            generate(func);\n        }\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     */\n    Callback(const Callback<R(A0)> &func) {\n        if (func._ops) {\n            func._ops->move(this, &func);\n        }\n        _ops = func._ops;\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(U *obj, R (T::*method)(A0)) {\n        generate(method_context<T, R (T::*)(A0)>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const U *obj, R (T::*method)(A0) const) {\n        generate(method_context<const T, R (T::*)(A0) const>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(volatile U *obj, R (T::*method)(A0) volatile) {\n        generate(method_context<volatile T, R (T::*)(A0) volatile>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const volatile U *obj, R (T::*method)(A0) const volatile) {\n        generate(method_context<const volatile T, R (T::*)(A0) const volatile>(obj, method));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(T*, A0), U *arg) {\n        generate(function_context<R (*)(T*, A0), T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const T*, A0), const U *arg) {\n        generate(function_context<R (*)(const T*, A0), const T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(volatile T*, A0), volatile U *arg) {\n        generate(function_context<R (*)(volatile T*, A0), volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const volatile T*, A0), const volatile U *arg) {\n        generate(function_context<R (*)(const volatile T*, A0), const volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0))) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) const)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) const volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(U *obj, R (*func)(T*, A0)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const U *obj, R (*func)(const T*, A0)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(volatile U *obj, R (*func)(volatile T*, A0)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const volatile U *obj, R (*func)(const volatile T*, A0)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Destroy a callback\n     */\n    ~Callback() {\n        if (_ops) {\n            _ops->dtor(this);\n        }\n    }\n\n    /** Attach a static function\n     *  @param func     Static function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(A0)) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const Callback<R(A0)> &func) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(U *obj, R (T::*method)(A0)) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const U *obj, R (T::*method)(A0) const) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile U *obj, R (T::*method)(A0) volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile U *obj, R (T::*method)(A0) const volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(T*, A0), U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const T*, A0), const U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(volatile T*, A0), volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const volatile T*, A0), const volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0))) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) const)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) const volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(U *obj, R (*func)(T*, A0)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const U *obj, R (*func)(const T*, A0)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(volatile U *obj, R (*func)(volatile T*, A0)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const volatile U *obj, R (*func)(const volatile T*, A0)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Assign a callback\n     */\n    Callback &operator=(const Callback &that) {\n        if (this != &that) {\n            this->~Callback();\n            new (this) Callback(that);\n        }\n\n        return *this;\n    }\n\n    /** Call the attached function\n     */\n    R call(A0 a0) const {\n        MBED_ASSERT(_ops);\n        return _ops->call(this, a0);\n    }\n\n    /** Call the attached function\n     */\n    R operator()(A0 a0) const {\n        return call(a0);\n    }\n\n    /** Test if function has been attached\n     */\n    operator bool() const {\n        return _ops;\n    }\n\n    /** Test for equality\n     */\n    friend bool operator==(const Callback &l, const Callback &r) {\n        return memcmp(&l, &r, sizeof(Callback)) == 0;\n    }\n\n    /** Test for inequality\n     */\n    friend bool operator!=(const Callback &l, const Callback &r) {\n        return !(l == r);\n    }\n\n    /** Static thunk for passing as C-style function\n     *  @param func Callback to call passed as void pointer\n     *  @param a0 An argument to be called with function func\n     *  @return the value as determined by func which is of \n     *      type and determined by the signiture of func\n     */\n    static R thunk(void *func, A0 a0) {\n        return static_cast<Callback*>(func)->call(a0);\n    }\n\nprivate:\n    // Stored as pointer to function and pointer to optional object\n    // Function pointer is stored as union of possible function types\n    // to guarantee proper size and alignment\n    struct _class;\n    union {\n        void (*_staticfunc)(A0);\n        void (*_boundfunc)(_class*, A0);\n        void (_class::*_methodfunc)(A0);\n    } _func;\n    void *_obj;\n\n    // Dynamically dispatched operations\n    const struct ops {\n        R (*call)(const void*, A0);\n        void (*move)(void*, const void*);\n        void (*dtor)(void*);\n    } *_ops;\n\n    // Generate operations for function object\n    template <typename F>\n    void generate(const F &f) {\n        static const ops ops = {\n            &Callback::function_call<F>,\n            &Callback::function_move<F>,\n            &Callback::function_dtor<F>,\n        };\n\n        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),\n                \"Type F must not exceed the size of the Callback class\");\n        memset(this, 0, sizeof(Callback));\n        new (this) F(f);\n        _ops = &ops;\n    }\n\n    // Function attributes\n    template <typename F>\n    static R function_call(const void *p, A0 a0) {\n        return (*(F*)p)(a0);\n    }\n\n    template <typename F>\n    static void function_move(void *d, const void *p) {\n        new (d) F(*(F*)p);\n    }\n\n    template <typename F>\n    static void function_dtor(void *p) {\n        ((F*)p)->~F();\n    }\n\n    // Wrappers for functions with context\n    template <typename O, typename M>\n    struct method_context {\n        M method;\n        O *obj;\n\n        method_context(O *obj, M method)\n            : method(method), obj(obj) {}\n\n        R operator()(A0 a0) const {\n            return (obj->*method)(a0);\n        }\n    };\n\n    template <typename F, typename A>\n    struct function_context {\n        F func;\n        A *arg;\n\n        function_context(F func, A *arg)\n            : func(func), arg(arg) {}\n\n        R operator()(A0 a0) const {\n            return func(arg, a0);\n        }\n    };\n};\n\n/** Callback class based on template specialization\n *\n * @note Synchronization level: Not protected\n */\ntemplate <typename R, typename A0, typename A1>\nclass Callback<R(A0, A1)> {\npublic:\n    /** Create a Callback with a static function\n     *  @param func     Static function to attach\n     */\n    Callback(R (*func)(A0, A1) = 0) {\n        if (!func) {\n            memset(this, 0, sizeof(Callback));\n        } else {\n            generate(func);\n        }\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     */\n    Callback(const Callback<R(A0, A1)> &func) {\n        if (func._ops) {\n            func._ops->move(this, &func);\n        }\n        _ops = func._ops;\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(U *obj, R (T::*method)(A0, A1)) {\n        generate(method_context<T, R (T::*)(A0, A1)>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const U *obj, R (T::*method)(A0, A1) const) {\n        generate(method_context<const T, R (T::*)(A0, A1) const>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(volatile U *obj, R (T::*method)(A0, A1) volatile) {\n        generate(method_context<volatile T, R (T::*)(A0, A1) volatile>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const volatile U *obj, R (T::*method)(A0, A1) const volatile) {\n        generate(method_context<const volatile T, R (T::*)(A0, A1) const volatile>(obj, method));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(T*, A0, A1), U *arg) {\n        generate(function_context<R (*)(T*, A0, A1), T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const T*, A0, A1), const U *arg) {\n        generate(function_context<R (*)(const T*, A0, A1), const T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(volatile T*, A0, A1), volatile U *arg) {\n        generate(function_context<R (*)(volatile T*, A0, A1), volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const volatile T*, A0, A1), const volatile U *arg) {\n        generate(function_context<R (*)(const volatile T*, A0, A1), const volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1))) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) const)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) const volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(U *obj, R (*func)(T*, A0, A1)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const U *obj, R (*func)(const T*, A0, A1)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(volatile U *obj, R (*func)(volatile T*, A0, A1)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Destroy a callback\n     */\n    ~Callback() {\n        if (_ops) {\n            _ops->dtor(this);\n        }\n    }\n\n    /** Attach a static function\n     *  @param func     Static function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(A0, A1)) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const Callback<R(A0, A1)> &func) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(U *obj, R (T::*method)(A0, A1)) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const U *obj, R (T::*method)(A0, A1) const) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile U *obj, R (T::*method)(A0, A1) volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile U *obj, R (T::*method)(A0, A1) const volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(T*, A0, A1), U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const T*, A0, A1), const U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(volatile T*, A0, A1), volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const volatile T*, A0, A1), const volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1))) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) const)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) const volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(U *obj, R (*func)(T*, A0, A1)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const U *obj, R (*func)(const T*, A0, A1)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(volatile U *obj, R (*func)(volatile T*, A0, A1)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const volatile U *obj, R (*func)(const volatile T*, A0, A1)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Assign a callback\n     */\n    Callback &operator=(const Callback &that) {\n        if (this != &that) {\n            this->~Callback();\n            new (this) Callback(that);\n        }\n\n        return *this;\n    }\n\n    /** Call the attached function\n     */\n    R call(A0 a0, A1 a1) const {\n        MBED_ASSERT(_ops);\n        return _ops->call(this, a0, a1);\n    }\n\n    /** Call the attached function\n     */\n    R operator()(A0 a0, A1 a1) const {\n        return call(a0, a1);\n    }\n\n    /** Test if function has been attached\n     */\n    operator bool() const {\n        return _ops;\n    }\n\n    /** Test for equality\n     */\n    friend bool operator==(const Callback &l, const Callback &r) {\n        return memcmp(&l, &r, sizeof(Callback)) == 0;\n    }\n\n    /** Test for inequality\n     */\n    friend bool operator!=(const Callback &l, const Callback &r) {\n        return !(l == r);\n    }\n\n    /** Static thunk for passing as C-style function\n     *  @param func Callback to call passed as void pointer\n     *  @param a0 An argument to be called with function func\n     *  @param a1 An argument to be called with function func\n     *  @return the value as determined by func which is of \n     *      type and determined by the signiture of func\n     */\n    static R thunk(void *func, A0 a0, A1 a1) {\n        return static_cast<Callback*>(func)->call(a0, a1);\n    }\n\nprivate:\n    // Stored as pointer to function and pointer to optional object\n    // Function pointer is stored as union of possible function types\n    // to guarantee proper size and alignment\n    struct _class;\n    union {\n        void (*_staticfunc)(A0, A1);\n        void (*_boundfunc)(_class*, A0, A1);\n        void (_class::*_methodfunc)(A0, A1);\n    } _func;\n    void *_obj;\n\n    // Dynamically dispatched operations\n    const struct ops {\n        R (*call)(const void*, A0, A1);\n        void (*move)(void*, const void*);\n        void (*dtor)(void*);\n    } *_ops;\n\n    // Generate operations for function object\n    template <typename F>\n    void generate(const F &f) {\n        static const ops ops = {\n            &Callback::function_call<F>,\n            &Callback::function_move<F>,\n            &Callback::function_dtor<F>,\n        };\n\n        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),\n                \"Type F must not exceed the size of the Callback class\");\n        memset(this, 0, sizeof(Callback));\n        new (this) F(f);\n        _ops = &ops;\n    }\n\n    // Function attributes\n    template <typename F>\n    static R function_call(const void *p, A0 a0, A1 a1) {\n        return (*(F*)p)(a0, a1);\n    }\n\n    template <typename F>\n    static void function_move(void *d, const void *p) {\n        new (d) F(*(F*)p);\n    }\n\n    template <typename F>\n    static void function_dtor(void *p) {\n        ((F*)p)->~F();\n    }\n\n    // Wrappers for functions with context\n    template <typename O, typename M>\n    struct method_context {\n        M method;\n        O *obj;\n\n        method_context(O *obj, M method)\n            : method(method), obj(obj) {}\n\n        R operator()(A0 a0, A1 a1) const {\n            return (obj->*method)(a0, a1);\n        }\n    };\n\n    template <typename F, typename A>\n    struct function_context {\n        F func;\n        A *arg;\n\n        function_context(F func, A *arg)\n            : func(func), arg(arg) {}\n\n        R operator()(A0 a0, A1 a1) const {\n            return func(arg, a0, a1);\n        }\n    };\n};\n\n/** Callback class based on template specialization\n *\n * @note Synchronization level: Not protected\n */\ntemplate <typename R, typename A0, typename A1, typename A2>\nclass Callback<R(A0, A1, A2)> {\npublic:\n    /** Create a Callback with a static function\n     *  @param func     Static function to attach\n     */\n    Callback(R (*func)(A0, A1, A2) = 0) {\n        if (!func) {\n            memset(this, 0, sizeof(Callback));\n        } else {\n            generate(func);\n        }\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     */\n    Callback(const Callback<R(A0, A1, A2)> &func) {\n        if (func._ops) {\n            func._ops->move(this, &func);\n        }\n        _ops = func._ops;\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(U *obj, R (T::*method)(A0, A1, A2)) {\n        generate(method_context<T, R (T::*)(A0, A1, A2)>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const U *obj, R (T::*method)(A0, A1, A2) const) {\n        generate(method_context<const T, R (T::*)(A0, A1, A2) const>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(volatile U *obj, R (T::*method)(A0, A1, A2) volatile) {\n        generate(method_context<volatile T, R (T::*)(A0, A1, A2) volatile>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const volatile U *obj, R (T::*method)(A0, A1, A2) const volatile) {\n        generate(method_context<const volatile T, R (T::*)(A0, A1, A2) const volatile>(obj, method));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(T*, A0, A1, A2), U *arg) {\n        generate(function_context<R (*)(T*, A0, A1, A2), T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const T*, A0, A1, A2), const U *arg) {\n        generate(function_context<R (*)(const T*, A0, A1, A2), const T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(volatile T*, A0, A1, A2), volatile U *arg) {\n        generate(function_context<R (*)(volatile T*, A0, A1, A2), volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const volatile T*, A0, A1, A2), const volatile U *arg) {\n        generate(function_context<R (*)(const volatile T*, A0, A1, A2), const volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2))) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) const)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) const volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(U *obj, R (*func)(T*, A0, A1, A2)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const U *obj, R (*func)(const T*, A0, A1, A2)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Destroy a callback\n     */\n    ~Callback() {\n        if (_ops) {\n            _ops->dtor(this);\n        }\n    }\n\n    /** Attach a static function\n     *  @param func     Static function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(A0, A1, A2)) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const Callback<R(A0, A1, A2)> &func) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(U *obj, R (T::*method)(A0, A1, A2)) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const U *obj, R (T::*method)(A0, A1, A2) const) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile U *obj, R (T::*method)(A0, A1, A2) volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile U *obj, R (T::*method)(A0, A1, A2) const volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(T*, A0, A1, A2), U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const T*, A0, A1, A2), const U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(volatile T*, A0, A1, A2), volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const volatile T*, A0, A1, A2), const volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2))) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) const)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) const volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(U *obj, R (*func)(T*, A0, A1, A2)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const U *obj, R (*func)(const T*, A0, A1, A2)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(volatile U *obj, R (*func)(volatile T*, A0, A1, A2)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Assign a callback\n     */\n    Callback &operator=(const Callback &that) {\n        if (this != &that) {\n            this->~Callback();\n            new (this) Callback(that);\n        }\n\n        return *this;\n    }\n\n    /** Call the attached function\n     */\n    R call(A0 a0, A1 a1, A2 a2) const {\n        MBED_ASSERT(_ops);\n        return _ops->call(this, a0, a1, a2);\n    }\n\n    /** Call the attached function\n     */\n    R operator()(A0 a0, A1 a1, A2 a2) const {\n        return call(a0, a1, a2);\n    }\n\n    /** Test if function has been attached\n     */\n    operator bool() const {\n        return _ops;\n    }\n\n    /** Test for equality\n     */\n    friend bool operator==(const Callback &l, const Callback &r) {\n        return memcmp(&l, &r, sizeof(Callback)) == 0;\n    }\n\n    /** Test for inequality\n     */\n    friend bool operator!=(const Callback &l, const Callback &r) {\n        return !(l == r);\n    }\n\n    /** Static thunk for passing as C-style function\n     *  @param func Callback to call passed as void pointer\n     *  @param a0 An argument to be called with function func\n     *  @param a1 An argument to be called with function func\n     *  @param a2 An argument to be called with function func\n     *  @return the value as determined by func which is of \n     *      type and determined by the signiture of func\n     */\n    static R thunk(void *func, A0 a0, A1 a1, A2 a2) {\n        return static_cast<Callback*>(func)->call(a0, a1, a2);\n    }\n\nprivate:\n    // Stored as pointer to function and pointer to optional object\n    // Function pointer is stored as union of possible function types\n    // to guarantee proper size and alignment\n    struct _class;\n    union {\n        void (*_staticfunc)(A0, A1, A2);\n        void (*_boundfunc)(_class*, A0, A1, A2);\n        void (_class::*_methodfunc)(A0, A1, A2);\n    } _func;\n    void *_obj;\n\n    // Dynamically dispatched operations\n    const struct ops {\n        R (*call)(const void*, A0, A1, A2);\n        void (*move)(void*, const void*);\n        void (*dtor)(void*);\n    } *_ops;\n\n    // Generate operations for function object\n    template <typename F>\n    void generate(const F &f) {\n        static const ops ops = {\n            &Callback::function_call<F>,\n            &Callback::function_move<F>,\n            &Callback::function_dtor<F>,\n        };\n\n        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),\n                \"Type F must not exceed the size of the Callback class\");\n        memset(this, 0, sizeof(Callback));\n        new (this) F(f);\n        _ops = &ops;\n    }\n\n    // Function attributes\n    template <typename F>\n    static R function_call(const void *p, A0 a0, A1 a1, A2 a2) {\n        return (*(F*)p)(a0, a1, a2);\n    }\n\n    template <typename F>\n    static void function_move(void *d, const void *p) {\n        new (d) F(*(F*)p);\n    }\n\n    template <typename F>\n    static void function_dtor(void *p) {\n        ((F*)p)->~F();\n    }\n\n    // Wrappers for functions with context\n    template <typename O, typename M>\n    struct method_context {\n        M method;\n        O *obj;\n\n        method_context(O *obj, M method)\n            : method(method), obj(obj) {}\n\n        R operator()(A0 a0, A1 a1, A2 a2) const {\n            return (obj->*method)(a0, a1, a2);\n        }\n    };\n\n    template <typename F, typename A>\n    struct function_context {\n        F func;\n        A *arg;\n\n        function_context(F func, A *arg)\n            : func(func), arg(arg) {}\n\n        R operator()(A0 a0, A1 a1, A2 a2) const {\n            return func(arg, a0, a1, a2);\n        }\n    };\n};\n\n/** Callback class based on template specialization\n *\n * @note Synchronization level: Not protected\n */\ntemplate <typename R, typename A0, typename A1, typename A2, typename A3>\nclass Callback<R(A0, A1, A2, A3)> {\npublic:\n    /** Create a Callback with a static function\n     *  @param func     Static function to attach\n     */\n    Callback(R (*func)(A0, A1, A2, A3) = 0) {\n        if (!func) {\n            memset(this, 0, sizeof(Callback));\n        } else {\n            generate(func);\n        }\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     */\n    Callback(const Callback<R(A0, A1, A2, A3)> &func) {\n        if (func._ops) {\n            func._ops->move(this, &func);\n        }\n        _ops = func._ops;\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(U *obj, R (T::*method)(A0, A1, A2, A3)) {\n        generate(method_context<T, R (T::*)(A0, A1, A2, A3)>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const U *obj, R (T::*method)(A0, A1, A2, A3) const) {\n        generate(method_context<const T, R (T::*)(A0, A1, A2, A3) const>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(volatile U *obj, R (T::*method)(A0, A1, A2, A3) volatile) {\n        generate(method_context<volatile T, R (T::*)(A0, A1, A2, A3) volatile>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const volatile U *obj, R (T::*method)(A0, A1, A2, A3) const volatile) {\n        generate(method_context<const volatile T, R (T::*)(A0, A1, A2, A3) const volatile>(obj, method));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(T*, A0, A1, A2, A3), U *arg) {\n        generate(function_context<R (*)(T*, A0, A1, A2, A3), T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const T*, A0, A1, A2, A3), const U *arg) {\n        generate(function_context<R (*)(const T*, A0, A1, A2, A3), const T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(volatile T*, A0, A1, A2, A3), volatile U *arg) {\n        generate(function_context<R (*)(volatile T*, A0, A1, A2, A3), volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const volatile T*, A0, A1, A2, A3), const volatile U *arg) {\n        generate(function_context<R (*)(const volatile T*, A0, A1, A2, A3), const volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3))) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) const)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) const volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(U *obj, R (*func)(T*, A0, A1, A2, A3)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const U *obj, R (*func)(const T*, A0, A1, A2, A3)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Destroy a callback\n     */\n    ~Callback() {\n        if (_ops) {\n            _ops->dtor(this);\n        }\n    }\n\n    /** Attach a static function\n     *  @param func     Static function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(A0, A1, A2, A3)) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const Callback<R(A0, A1, A2, A3)> &func) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(U *obj, R (T::*method)(A0, A1, A2, A3)) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const U *obj, R (T::*method)(A0, A1, A2, A3) const) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile U *obj, R (T::*method)(A0, A1, A2, A3) volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile U *obj, R (T::*method)(A0, A1, A2, A3) const volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(T*, A0, A1, A2, A3), U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const T*, A0, A1, A2, A3), const U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(volatile T*, A0, A1, A2, A3), volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const volatile T*, A0, A1, A2, A3), const volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3))) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) const)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) const volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(U *obj, R (*func)(T*, A0, A1, A2, A3)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const U *obj, R (*func)(const T*, A0, A1, A2, A3)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Assign a callback\n     */\n    Callback &operator=(const Callback &that) {\n        if (this != &that) {\n            this->~Callback();\n            new (this) Callback(that);\n        }\n\n        return *this;\n    }\n\n    /** Call the attached function\n     */\n    R call(A0 a0, A1 a1, A2 a2, A3 a3) const {\n        MBED_ASSERT(_ops);\n        return _ops->call(this, a0, a1, a2, a3);\n    }\n\n    /** Call the attached function\n     */\n    R operator()(A0 a0, A1 a1, A2 a2, A3 a3) const {\n        return call(a0, a1, a2, a3);\n    }\n\n    /** Test if function has been attached\n     */\n    operator bool() const {\n        return _ops;\n    }\n\n    /** Test for equality\n     */\n    friend bool operator==(const Callback &l, const Callback &r) {\n        return memcmp(&l, &r, sizeof(Callback)) == 0;\n    }\n\n    /** Test for inequality\n     */\n    friend bool operator!=(const Callback &l, const Callback &r) {\n        return !(l == r);\n    }\n\n    /** Static thunk for passing as C-style function\n     *  @param func Callback to call passed as void pointer\n     *  @param a0 An argument to be called with function func\n     *  @param a1 An argument to be called with function func\n     *  @param a2 An argument to be called with function func\n     *  @param a3 An argument to be called with function func\n     *  @return the value as determined by func which is of \n     *      type and determined by the signiture of func\n     */\n    static R thunk(void *func, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return static_cast<Callback*>(func)->call(a0, a1, a2, a3);\n    }\n\nprivate:\n    // Stored as pointer to function and pointer to optional object\n    // Function pointer is stored as union of possible function types\n    // to guarantee proper size and alignment\n    struct _class;\n    union {\n        void (*_staticfunc)(A0, A1, A2, A3);\n        void (*_boundfunc)(_class*, A0, A1, A2, A3);\n        void (_class::*_methodfunc)(A0, A1, A2, A3);\n    } _func;\n    void *_obj;\n\n    // Dynamically dispatched operations\n    const struct ops {\n        R (*call)(const void*, A0, A1, A2, A3);\n        void (*move)(void*, const void*);\n        void (*dtor)(void*);\n    } *_ops;\n\n    // Generate operations for function object\n    template <typename F>\n    void generate(const F &f) {\n        static const ops ops = {\n            &Callback::function_call<F>,\n            &Callback::function_move<F>,\n            &Callback::function_dtor<F>,\n        };\n\n        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),\n                \"Type F must not exceed the size of the Callback class\");\n        memset(this, 0, sizeof(Callback));\n        new (this) F(f);\n        _ops = &ops;\n    }\n\n    // Function attributes\n    template <typename F>\n    static R function_call(const void *p, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return (*(F*)p)(a0, a1, a2, a3);\n    }\n\n    template <typename F>\n    static void function_move(void *d, const void *p) {\n        new (d) F(*(F*)p);\n    }\n\n    template <typename F>\n    static void function_dtor(void *p) {\n        ((F*)p)->~F();\n    }\n\n    // Wrappers for functions with context\n    template <typename O, typename M>\n    struct method_context {\n        M method;\n        O *obj;\n\n        method_context(O *obj, M method)\n            : method(method), obj(obj) {}\n\n        R operator()(A0 a0, A1 a1, A2 a2, A3 a3) const {\n            return (obj->*method)(a0, a1, a2, a3);\n        }\n    };\n\n    template <typename F, typename A>\n    struct function_context {\n        F func;\n        A *arg;\n\n        function_context(F func, A *arg)\n            : func(func), arg(arg) {}\n\n        R operator()(A0 a0, A1 a1, A2 a2, A3 a3) const {\n            return func(arg, a0, a1, a2, a3);\n        }\n    };\n};\n\n/** Callback class based on template specialization\n *\n * @note Synchronization level: Not protected\n */\ntemplate <typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nclass Callback<R(A0, A1, A2, A3, A4)> {\npublic:\n    /** Create a Callback with a static function\n     *  @param func     Static function to attach\n     */\n    Callback(R (*func)(A0, A1, A2, A3, A4) = 0) {\n        if (!func) {\n            memset(this, 0, sizeof(Callback));\n        } else {\n            generate(func);\n        }\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     */\n    Callback(const Callback<R(A0, A1, A2, A3, A4)> &func) {\n        if (func._ops) {\n            func._ops->move(this, &func);\n        }\n        _ops = func._ops;\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(U *obj, R (T::*method)(A0, A1, A2, A3, A4)) {\n        generate(method_context<T, R (T::*)(A0, A1, A2, A3, A4)>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const U *obj, R (T::*method)(A0, A1, A2, A3, A4) const) {\n        generate(method_context<const T, R (T::*)(A0, A1, A2, A3, A4) const>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile) {\n        generate(method_context<volatile T, R (T::*)(A0, A1, A2, A3, A4) volatile>(obj, method));\n    }\n\n    /** Create a Callback with a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     */\n    template<typename T, typename U>\n    Callback(const volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile) {\n        generate(method_context<const volatile T, R (T::*)(A0, A1, A2, A3, A4) const volatile>(obj, method));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(T*, A0, A1, A2, A3, A4), U *arg) {\n        generate(function_context<R (*)(T*, A0, A1, A2, A3, A4), T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const T*, A0, A1, A2, A3, A4), const U *arg) {\n        generate(function_context<R (*)(const T*, A0, A1, A2, A3, A4), const T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(volatile T*, A0, A1, A2, A3, A4), volatile U *arg) {\n        generate(function_context<R (*)(volatile T*, A0, A1, A2, A3, A4), volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function \n     */\n    template<typename T, typename U>\n    Callback(R (*func)(const volatile T*, A0, A1, A2, A3, A4), const volatile U *arg) {\n        generate(function_context<R (*)(const volatile T*, A0, A1, A2, A3, A4), const volatile T>(func, arg));\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4))) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) const)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     */\n    template <typename F>\n    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) const volatile)) {\n        generate(f);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(U *obj, R (*func)(T*, A0, A1, A2, A3, A4)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const U *obj, R (*func)(const T*, A0, A1, A2, A3, A4)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3, A4)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Create a Callback with a static function and bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to Callback(func, arg)\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to Callback(func, arg)\")\n    Callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3, A4)) {\n        new (this) Callback(func, obj);\n    }\n\n    /** Destroy a callback\n     */\n    ~Callback() {\n        if (_ops) {\n            _ops->dtor(this);\n        }\n    }\n\n    /** Attach a static function\n     *  @param func     Static function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(A0, A1, A2, A3, A4)) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a Callback\n     *  @param func     The Callback to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const Callback<R(A0, A1, A2, A3, A4)> &func) {\n        this->~Callback();\n        new (this) Callback(func);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(U *obj, R (T::*method)(A0, A1, A2, A3, A4)) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const U *obj, R (T::*method)(A0, A1, A2, A3, A4) const) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a member function\n     *  @param obj      Pointer to object to invoke member function on\n     *  @param method   Member function to attach\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template<typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile) {\n        this->~Callback();\n        new (this) Callback(obj, method);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(T*, A0, A1, A2, A3, A4), U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const T*, A0, A1, A2, A3, A4), const U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(volatile T*, A0, A1, A2, A3, A4), volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param func     Static function to attach\n     *  @param arg      Pointer argument to function\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(R (*func)(const volatile T*, A0, A1, A2, A3, A4), const volatile U *arg) {\n        this->~Callback();\n        new (this) Callback(func, arg);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4))) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) const)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a function object\n     *  @param f Function object to attach\n     *  @note The function object is limited to a single word of storage\n     *  @deprecated\n     *      Replaced by simple assignment 'Callback cb = func'\n     */\n    template <typename F>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.4\",\n        \"Replaced by simple assignment 'Callback cb = func\")\n    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) const volatile)) {\n        this->~Callback();\n        new (this) Callback(f);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(U *obj, R (*func)(T*, A0, A1, A2, A3, A4)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const U *obj, R (*func)(const T*, A0, A1, A2, A3, A4)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3, A4)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Attach a static function with a bound pointer\n     *  @param obj  Pointer to object to bind to function\n     *  @param func Static function to attach\n     *  @deprecated\n     *      Arguments to callback have been reordered to attach(func, arg)\n     */\n    template <typename T, typename U>\n    MBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n        \"Arguments to callback have been reordered to attach(func, arg)\")\n    void attach(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3, A4)) {\n        this->~Callback();\n        new (this) Callback(func, obj);\n    }\n\n    /** Assign a callback\n     */\n    Callback &operator=(const Callback &that) {\n        if (this != &that) {\n            this->~Callback();\n            new (this) Callback(that);\n        }\n\n        return *this;\n    }\n\n    /** Call the attached function\n     */\n    R call(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) const {\n        MBED_ASSERT(_ops);\n        return _ops->call(this, a0, a1, a2, a3, a4);\n    }\n\n    /** Call the attached function\n     */\n    R operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) const {\n        return call(a0, a1, a2, a3, a4);\n    }\n\n    /** Test if function has been attached\n     */\n    operator bool() const {\n        return _ops;\n    }\n\n    /** Test for equality\n     */\n    friend bool operator==(const Callback &l, const Callback &r) {\n        return memcmp(&l, &r, sizeof(Callback)) == 0;\n    }\n\n    /** Test for inequality\n     */\n    friend bool operator!=(const Callback &l, const Callback &r) {\n        return !(l == r);\n    }\n\n    /** Static thunk for passing as C-style function\n     *  @param func Callback to call passed as void pointer\n     *  @param a0 An argument to be called with function func\n     *  @param a1 An argument to be called with function func\n     *  @param a2 An argument to be called with function func\n     *  @param a3 An argument to be called with function func\n     *  @param a4 An argument to be called with function func\n     *  @return the value as determined by func which is of \n     *      type and determined by the signiture of func\n     */\n    static R thunk(void *func, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return static_cast<Callback*>(func)->call(a0, a1, a2, a3, a4);\n    }\n\nprivate:\n    // Stored as pointer to function and pointer to optional object\n    // Function pointer is stored as union of possible function types\n    // to guarantee proper size and alignment\n    struct _class;\n    union {\n        void (*_staticfunc)(A0, A1, A2, A3, A4);\n        void (*_boundfunc)(_class*, A0, A1, A2, A3, A4);\n        void (_class::*_methodfunc)(A0, A1, A2, A3, A4);\n    } _func;\n    void *_obj;\n\n    // Dynamically dispatched operations\n    const struct ops {\n        R (*call)(const void*, A0, A1, A2, A3, A4);\n        void (*move)(void*, const void*);\n        void (*dtor)(void*);\n    } *_ops;\n\n    // Generate operations for function object\n    template <typename F>\n    void generate(const F &f) {\n        static const ops ops = {\n            &Callback::function_call<F>,\n            &Callback::function_move<F>,\n            &Callback::function_dtor<F>,\n        };\n\n        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),\n                \"Type F must not exceed the size of the Callback class\");\n        memset(this, 0, sizeof(Callback));\n        new (this) F(f);\n        _ops = &ops;\n    }\n\n    // Function attributes\n    template <typename F>\n    static R function_call(const void *p, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return (*(F*)p)(a0, a1, a2, a3, a4);\n    }\n\n    template <typename F>\n    static void function_move(void *d, const void *p) {\n        new (d) F(*(F*)p);\n    }\n\n    template <typename F>\n    static void function_dtor(void *p) {\n        ((F*)p)->~F();\n    }\n\n    // Wrappers for functions with context\n    template <typename O, typename M>\n    struct method_context {\n        M method;\n        O *obj;\n\n        method_context(O *obj, M method)\n            : method(method), obj(obj) {}\n\n        R operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) const {\n            return (obj->*method)(a0, a1, a2, a3, a4);\n        }\n    };\n\n    template <typename F, typename A>\n    struct function_context {\n        F func;\n        A *arg;\n\n        function_context(F func, A *arg)\n            : func(func), arg(arg) {}\n\n        R operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) const {\n            return func(arg, a0, a1, a2, a3, a4);\n        }\n    };\n};\n\n// Internally used event type\ntypedef Callback<void(int)> event_callback_t;\n\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R>\nCallback<R()> callback(R (*func)() = 0) {\n    return Callback<R()>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R>\nCallback<R()> callback(const Callback<R()> &func) {\n    return Callback<R()>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R>\nCallback<R()> callback(U *obj, R (T::*method)()) {\n    return Callback<R()>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R>\nCallback<R()> callback(const U *obj, R (T::*method)() const) {\n    return Callback<R()>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R>\nCallback<R()> callback(volatile U *obj, R (T::*method)() volatile) {\n    return Callback<R()>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R>\nCallback<R()> callback(const volatile U *obj, R (T::*method)() const volatile) {\n    return Callback<R()>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R>\nCallback<R()> callback(R (*func)(T*), U *arg) {\n    return Callback<R()>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R>\nCallback<R()> callback(R (*func)(const T*), const U *arg) {\n    return Callback<R()>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R>\nCallback<R()> callback(R (*func)(volatile T*), volatile U *arg) {\n    return Callback<R()>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R>\nCallback<R()> callback(R (*func)(const volatile T*), const volatile U *arg) {\n    return Callback<R()>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R()> callback(U *obj, R (*func)(T*)) {\n    return Callback<R()>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R()> callback(const U *obj, R (*func)(const T*)) {\n    return Callback<R()>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R()> callback(volatile U *obj, R (*func)(volatile T*)) {\n    return Callback<R()>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R()> callback(const volatile U *obj, R (*func)(const volatile T*)) {\n    return Callback<R()>(func, obj);\n}\n\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0>\nCallback<R(A0)> callback(R (*func)(A0) = 0) {\n    return Callback<R(A0)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0>\nCallback<R(A0)> callback(const Callback<R(A0)> &func) {\n    return Callback<R(A0)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0>\nCallback<R(A0)> callback(U *obj, R (T::*method)(A0)) {\n    return Callback<R(A0)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0>\nCallback<R(A0)> callback(const U *obj, R (T::*method)(A0) const) {\n    return Callback<R(A0)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0>\nCallback<R(A0)> callback(volatile U *obj, R (T::*method)(A0) volatile) {\n    return Callback<R(A0)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0>\nCallback<R(A0)> callback(const volatile U *obj, R (T::*method)(A0) const volatile) {\n    return Callback<R(A0)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0>\nCallback<R(A0)> callback(R (*func)(T*, A0), U *arg) {\n    return Callback<R(A0)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0>\nCallback<R(A0)> callback(R (*func)(const T*, A0), const U *arg) {\n    return Callback<R(A0)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0>\nCallback<R(A0)> callback(R (*func)(volatile T*, A0), volatile U *arg) {\n    return Callback<R(A0)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0>\nCallback<R(A0)> callback(R (*func)(const volatile T*, A0), const volatile U *arg) {\n    return Callback<R(A0)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0)> callback(U *obj, R (*func)(T*, A0)) {\n    return Callback<R(A0)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0)> callback(const U *obj, R (*func)(const T*, A0)) {\n    return Callback<R(A0)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0)> callback(volatile U *obj, R (*func)(volatile T*, A0)) {\n    return Callback<R(A0)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0)> callback(const volatile U *obj, R (*func)(const volatile T*, A0)) {\n    return Callback<R(A0)>(func, obj);\n}\n\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(R (*func)(A0, A1) = 0) {\n    return Callback<R(A0, A1)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(const Callback<R(A0, A1)> &func) {\n    return Callback<R(A0, A1)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(U *obj, R (T::*method)(A0, A1)) {\n    return Callback<R(A0, A1)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(const U *obj, R (T::*method)(A0, A1) const) {\n    return Callback<R(A0, A1)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(volatile U *obj, R (T::*method)(A0, A1) volatile) {\n    return Callback<R(A0, A1)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(const volatile U *obj, R (T::*method)(A0, A1) const volatile) {\n    return Callback<R(A0, A1)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(R (*func)(T*, A0, A1), U *arg) {\n    return Callback<R(A0, A1)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(R (*func)(const T*, A0, A1), const U *arg) {\n    return Callback<R(A0, A1)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(R (*func)(volatile T*, A0, A1), volatile U *arg) {\n    return Callback<R(A0, A1)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1>\nCallback<R(A0, A1)> callback(R (*func)(const volatile T*, A0, A1), const volatile U *arg) {\n    return Callback<R(A0, A1)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1)> callback(U *obj, R (*func)(T*, A0, A1)) {\n    return Callback<R(A0, A1)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1)> callback(const U *obj, R (*func)(const T*, A0, A1)) {\n    return Callback<R(A0, A1)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1)> callback(volatile U *obj, R (*func)(volatile T*, A0, A1)) {\n    return Callback<R(A0, A1)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1)> callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1)) {\n    return Callback<R(A0, A1)>(func, obj);\n}\n\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(R (*func)(A0, A1, A2) = 0) {\n    return Callback<R(A0, A1, A2)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(const Callback<R(A0, A1, A2)> &func) {\n    return Callback<R(A0, A1, A2)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(U *obj, R (T::*method)(A0, A1, A2)) {\n    return Callback<R(A0, A1, A2)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(const U *obj, R (T::*method)(A0, A1, A2) const) {\n    return Callback<R(A0, A1, A2)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(volatile U *obj, R (T::*method)(A0, A1, A2) volatile) {\n    return Callback<R(A0, A1, A2)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(const volatile U *obj, R (T::*method)(A0, A1, A2) const volatile) {\n    return Callback<R(A0, A1, A2)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(R (*func)(T*, A0, A1, A2), U *arg) {\n    return Callback<R(A0, A1, A2)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(R (*func)(const T*, A0, A1, A2), const U *arg) {\n    return Callback<R(A0, A1, A2)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(R (*func)(volatile T*, A0, A1, A2), volatile U *arg) {\n    return Callback<R(A0, A1, A2)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2>\nCallback<R(A0, A1, A2)> callback(R (*func)(const volatile T*, A0, A1, A2), const volatile U *arg) {\n    return Callback<R(A0, A1, A2)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2)> callback(U *obj, R (*func)(T*, A0, A1, A2)) {\n    return Callback<R(A0, A1, A2)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2)> callback(const U *obj, R (*func)(const T*, A0, A1, A2)) {\n    return Callback<R(A0, A1, A2)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2)> callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2)) {\n    return Callback<R(A0, A1, A2)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2)> callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2)) {\n    return Callback<R(A0, A1, A2)>(func, obj);\n}\n\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(R (*func)(A0, A1, A2, A3) = 0) {\n    return Callback<R(A0, A1, A2, A3)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(const Callback<R(A0, A1, A2, A3)> &func) {\n    return Callback<R(A0, A1, A2, A3)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(U *obj, R (T::*method)(A0, A1, A2, A3)) {\n    return Callback<R(A0, A1, A2, A3)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(const U *obj, R (T::*method)(A0, A1, A2, A3) const) {\n    return Callback<R(A0, A1, A2, A3)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(volatile U *obj, R (T::*method)(A0, A1, A2, A3) volatile) {\n    return Callback<R(A0, A1, A2, A3)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(const volatile U *obj, R (T::*method)(A0, A1, A2, A3) const volatile) {\n    return Callback<R(A0, A1, A2, A3)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(R (*func)(T*, A0, A1, A2, A3), U *arg) {\n    return Callback<R(A0, A1, A2, A3)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(R (*func)(const T*, A0, A1, A2, A3), const U *arg) {\n    return Callback<R(A0, A1, A2, A3)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(R (*func)(volatile T*, A0, A1, A2, A3), volatile U *arg) {\n    return Callback<R(A0, A1, A2, A3)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nCallback<R(A0, A1, A2, A3)> callback(R (*func)(const volatile T*, A0, A1, A2, A3), const volatile U *arg) {\n    return Callback<R(A0, A1, A2, A3)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2, A3)> callback(U *obj, R (*func)(T*, A0, A1, A2, A3)) {\n    return Callback<R(A0, A1, A2, A3)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2, A3)> callback(const U *obj, R (*func)(const T*, A0, A1, A2, A3)) {\n    return Callback<R(A0, A1, A2, A3)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2, A3)> callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3)) {\n    return Callback<R(A0, A1, A2, A3)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2, A3)> callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3)) {\n    return Callback<R(A0, A1, A2, A3)>(func, obj);\n}\n\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(R (*func)(A0, A1, A2, A3, A4) = 0) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @return         Callback with infered type\n */\ntemplate <typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(const Callback<R(A0, A1, A2, A3, A4)> &func) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(U *obj, R (T::*method)(A0, A1, A2, A3, A4)) {\n    return Callback<R(A0, A1, A2, A3, A4)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(const U *obj, R (T::*method)(A0, A1, A2, A3, A4) const) {\n    return Callback<R(A0, A1, A2, A3, A4)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile) {\n    return Callback<R(A0, A1, A2, A3, A4)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj      Optional pointer to object to bind to function\n *  @param method   Member function to attach\n *  @return         Callback with infered type\n */\ntemplate<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(const volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile) {\n    return Callback<R(A0, A1, A2, A3, A4)>(obj, method);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(R (*func)(T*, A0, A1, A2, A3, A4), U *arg) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(R (*func)(const T*, A0, A1, A2, A3, A4), const U *arg) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(R (*func)(volatile T*, A0, A1, A2, A3, A4), volatile U *arg) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param func     Static function to attach\n *  @param arg      Pointer argument to function\n *  @return         Callback with infered type\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nCallback<R(A0, A1, A2, A3, A4)> callback(R (*func)(const volatile T*, A0, A1, A2, A3, A4), const volatile U *arg) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func, arg);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2, A3, A4)> callback(U *obj, R (*func)(T*, A0, A1, A2, A3, A4)) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2, A3, A4)> callback(const U *obj, R (*func)(const T*, A0, A1, A2, A3, A4)) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2, A3, A4)> callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3, A4)) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func, obj);\n}\n\n/** Create a callback class with type infered from the arguments\n *\n *  @param obj  Optional pointer to object to bind to function\n *  @param func Static function to attach\n *  @return     Callback with infered type\n *  @deprecated\n *      Arguments to callback have been reordered to callback(func, arg)\n */\ntemplate <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\nMBED_DEPRECATED_SINCE(\"mbed-os-5.1\",\n    \"Arguments to callback have been reordered to callback(func, arg)\")\nCallback<R(A0, A1, A2, A3, A4)> callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3, A4)) {\n    return Callback<R(A0, A1, A2, A3, A4)>(func, obj);\n}\n\n/**@}*/\n\n/**@}*/\n\n} // namespace mbed\n\n#endif\n","/* events\n * Copyright (c) 2016 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef EVENT_QUEUE_H\n#define EVENT_QUEUE_H\n\n#include \"equeue/equeue.h\"\n#include \"platform/Callback.h\"\n#include \"platform/NonCopyable.h\"\n#include <cstddef>\n#include <new>\n\nnamespace events {\n/** \\addtogroup events */\n\n/** EVENTS_EVENT_SIZE\n *  Minimum size of an event\n *  This size fits a Callback<void()> at minimum\n */\n#define EVENTS_EVENT_SIZE \\\n    (EQUEUE_EVENT_SIZE - 2*sizeof(void*) + sizeof(mbed::Callback<void()>))\n\n/** EVENTS_QUEUE_SIZE\n *  Default size of buffer for events\n */\n#define EVENTS_QUEUE_SIZE (32*EVENTS_EVENT_SIZE)\n\n// Predeclared classes\ntemplate <typename F>\nclass Event;\n\n\n/** EventQueue\n *\n *  Flexible event queue for dispatching events\n * @ingroup events\n */\nclass EventQueue : private mbed::NonCopyable<EventQueue> {\npublic:\n    /** Create an EventQueue\n     *\n     *  Create an event queue. The event queue either allocates a buffer of\n     *  the specified size with malloc or uses the user provided buffer.\n     *\n     *  @param size     Size of buffer to use for events in bytes\n     *                  (default to EVENTS_QUEUE_SIZE)\n     *  @param buffer   Pointer to buffer to use for events\n     *                  (default to NULL)\n     */\n    EventQueue(unsigned size=EVENTS_QUEUE_SIZE, unsigned char *buffer=NULL);\n\n    /** Destroy an EventQueue\n     */\n    ~EventQueue();\n\n    /** Dispatch events\n     *\n     *  Executes events until the specified milliseconds have passed.\n     *  If ms is negative, the dispatch function will dispatch events\n     *  indefinitely or until break_dispatch is called on this queue.\n     *\n     *  When called with a finite timeout, the dispatch function is guaranteed\n     *  to terminate. When called with a timeout of 0, the dispatch function\n     *  does not wait and is irq safe.\n     *\n     *  @param ms       Time to wait for events in milliseconds, a negative\n     *                  value will dispatch events indefinitely\n     *                  (default to -1)\n     */\n    void dispatch(int ms=-1);\n\n    /** Dispatch events without a timeout\n     *\n     *  This is equivalent to EventQueue::dispatch with no arguments, but \n     *  avoids overload ambiguities when passed as a callback.\n     *\n     *  @see EventQueue::dispatch\n     */\n    void dispatch_forever() { dispatch(); }\n\n    /** Break out of a running event loop\n     *\n     *  Forces the specified event queue's dispatch loop to terminate. Pending\n     *  events may finish executing, but no new events will be executed.\n     */\n    void break_dispatch();\n\n    /** Millisecond counter\n     *\n     *  Returns the underlying tick of the event queue represented as the \n     *  number of milliseconds that have passed since an arbitrary point in\n     *  time. Intentionally overflows to 0 after 2^32-1.\n     *\n     *  @return         The underlying tick of the event queue in milliseconds\n     */\n    unsigned tick();\n\n    /** Cancel an in-flight event\n     *\n     *  Attempts to cancel an event referenced by the unique id returned from\n     *  one of the call functions. It is safe to call cancel after an event\n     *  has already been dispatched.\n     *\n     *  id must be valid i.e. event must have not finished executing.\n     *\n     *  The cancel function is irq safe.\n     *\n     *  If called while the event queue's dispatch loop is active, the cancel\n     *  function does not guarantee that the event will not execute after it\n     *  returns, as the event may have already begun executing.\n     *\n     *  @param id       Unique id of the event\n     */\n    void cancel(int id);\n\n    /** Query how much time is left for delayed event\n     *\n     *  If the event is delayed, this function can be used to query how much time\n     *  is left until the event is due to be dispatched.\n     *\n     *  id must be valid i.e. event must have not finished executing.\n     *\n     *  This function is irq safe.\n     *\n     *  @param id       Unique id of the event\n     *\n     *  @return         Remaining time in milliseconds or\n     *                   0 if event is already due to be dispatched or\n     *                     is currently executing.\n     *                  Undefined if id is invalid.\n     *\n     */\n    int time_left(int id);\n\n    /** Background an event queue onto a single-shot timer-interrupt\n     *\n     *  When updated, the event queue will call the provided update function\n     *  with a timeout indicating when the queue should be dispatched. A\n     *  negative timeout will be passed to the update function when the\n     *  timer-interrupt is no longer needed.\n     *\n     *  Passing a null function disables the existing update function.\n     *\n     *  The background function allows an event queue to take advantage of\n     *  hardware timers or other event loops, allowing an event queue to be\n     *  ran in the background without consuming the foreground thread.\n     *\n     *  @param update   Function called to indicate when the queue should be\n     *                  dispatched\n     */\n    void background(mbed::Callback<void(int)> update);\n\n    /** Chain an event queue onto another event queue\n     *\n     *  After chaining a queue to a target, calling dispatch on the target\n     *  queue will also dispatch events from this queue. The queues use\n     *  their own buffers and events must be handled independently.\n     *\n     *  A null queue as the target will unchain the existing queue.\n     *\n     *  The chain function allows multiple event queues to be composed,\n     *  sharing the context of a dispatch loop while still being managed\n     *  independently\n     *\n     *  @param target   Queue that will dispatch this queue's events as a\n     *                  part of its dispatch loop\n     */\n    void chain(EventQueue *target);\n\n    /** Calls an event on the queue\n     *\n     *  The specified callback will be executed in the context of the event\n     *  queue's dispatch loop.\n     *\n     *  The call function is irq safe and can act as a mechanism for moving\n     *  events out of irq contexts.\n     *\n     *  @param f        Function to execute in the context of the dispatch loop\n     *  @return         A unique id that represents the posted event and can\n     *                  be passed to cancel, or an id of 0 if there is not\n     *                  enough memory to allocate the event.\n     *                  Returned id will remain valid until event has finished\n     *                  executing.\n     */\n    template <typename F>\n    int call(F f) {\n        void *p = equeue_alloc(&_equeue, sizeof(F));\n        if (!p) {\n            return 0;\n        }\n\n        F *e = new (p) F(f);\n        equeue_event_dtor(e, &EventQueue::function_dtor<F>);\n        return equeue_post(&_equeue, &EventQueue::function_call<F>, e);\n    }\n\n    /** Calls an event on the queue\n     *  @see                    EventQueue::call\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0               Argument to pass to the callback\n     */\n    template <typename F, typename A0>\n    int call(F f, A0 a0) {\n        return call(context10<F, A0>(f, a0));\n    }\n\n    /** Calls an event on the queue\n     *  @see                    EventQueue::call\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0,a1            Arguments to pass to the callback\n     */\n    template <typename F, typename A0, typename A1>\n    int call(F f, A0 a0, A1 a1) {\n        return call(context20<F, A0, A1>(f, a0, a1));\n    }\n\n    /** Calls an event on the queue\n     *  @see                    EventQueue::call\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2         Arguments to pass to the callback\n     */\n    template <typename F, typename A0, typename A1, typename A2>\n    int call(F f, A0 a0, A1 a1, A2 a2) {\n        return call(context30<F, A0, A1, A2>(f, a0, a1, a2));\n    }\n\n    /** Calls an event on the queue\n     *  @see                     EventQueue::call\n     *  @param f                 Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2,a3       Arguments to pass to the callback\n     */\n    template <typename F, typename A0, typename A1, typename A2, typename A3>\n    int call(F f, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call(context40<F, A0, A1, A2, A3>(f, a0, a1, a2, a3));\n    }\n\n    /** Calls an event on the queue\n     *  @see                    EventQueue::call\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2,a3,a4   Arguments to pass to the callback\n     */\n    template <typename F, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call(F f, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call(context50<F, A0, A1, A2, A3, A4>(f, a0, a1, a2, a3, a4));\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R>\n    int call(T *obj, R (T::*method)()) {\n        return call(mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R>\n    int call(const T *obj, R (T::*method)() const) {\n        return call(mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R>\n    int call(volatile T *obj, R (T::*method)() volatile) {\n        return call(mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R>\n    int call(const volatile T *obj, R (T::*method)() const volatile) {\n        return call(mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0>\n    int call(T *obj, R (T::*method)(A0), A0 a0) {\n        return call(mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0>\n    int call(const T *obj, R (T::*method)(A0) const, A0 a0) {\n        return call(mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0>\n    int call(volatile T *obj, R (T::*method)(A0) volatile, A0 a0) {\n        return call(mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0>\n    int call(const volatile T *obj, R (T::*method)(A0) const volatile, A0 a0) {\n        return call(mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call(T *obj, R (T::*method)(A0, A1), A0 a0, A1 a1) {\n        return call(mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call(const T *obj, R (T::*method)(A0, A1) const, A0 a0, A1 a1) {\n        return call(mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call(volatile T *obj, R (T::*method)(A0, A1) volatile, A0 a0, A1 a1) {\n        return call(mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call(const volatile T *obj, R (T::*method)(A0, A1) const volatile, A0 a0, A1 a1) {\n        return call(mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call(T *obj, R (T::*method)(A0, A1, A2), A0 a0, A1 a1, A2 a2) {\n        return call(mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call(const T *obj, R (T::*method)(A0, A1, A2) const, A0 a0, A1 a1, A2 a2) {\n        return call(mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call(volatile T *obj, R (T::*method)(A0, A1, A2) volatile, A0 a0, A1 a1, A2 a2) {\n        return call(mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call(const volatile T *obj, R (T::*method)(A0, A1, A2) const volatile, A0 a0, A1 a1, A2 a2) {\n        return call(mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call(T *obj, R (T::*method)(A0, A1, A2, A3), A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call(mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call(const T *obj, R (T::*method)(A0, A1, A2, A3) const, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call(mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call(volatile T *obj, R (T::*method)(A0, A1, A2, A3) volatile, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call(mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call(const volatile T *obj, R (T::*method)(A0, A1, A2, A3) const volatile, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call(mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call(T *obj, R (T::*method)(A0, A1, A2, A3, A4), A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call(mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call(const T *obj, R (T::*method)(A0, A1, A2, A3, A4) const, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call(mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call(volatile T *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call(mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue\n     *  @see EventQueue::call\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call(const volatile T *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call(mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *\n     *  The specified callback will be executed in the context of the event\n     *  queue's dispatch loop.\n     *\n     *  The call_in function is irq safe and can act as a mechanism for moving\n     *  events out of irq contexts.\n     *\n     *  @param f        Function to execute in the context of the dispatch loop\n     *  @param ms       Time to delay in milliseconds\n     *  @return         A unique id that represents the posted event and can\n     *                  be passed to cancel, or an id of 0 if there is not\n     *                  enough memory to allocate the event.\n     */\n    template <typename F>\n    int call_in(int ms, F f) {\n        void *p = equeue_alloc(&_equeue, sizeof(F));\n        if (!p) {\n            return 0;\n        }\n\n        F *e = new (p) F(f);\n        equeue_event_delay(e, ms);\n        equeue_event_dtor(e, &EventQueue::function_dtor<F>);\n        return equeue_post(&_equeue, &EventQueue::function_call<F>, e);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see                        EventQueue::call_in\n     *  @param ms                   Time to delay in milliseconds\n     *  @param f                    Function to execute in the context of the dispatch loop\n     *  @param a0                   Argument to pass to the callback\n     */\n    template <typename F, typename A0>\n    int call_in(int ms, F f, A0 a0) {\n        return call_in(ms, context10<F, A0>(f, a0));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see                        EventQueue::call_in\n     *  @param ms                   Time to delay in milliseconds\n     *  @param f                    Function to execute in the context of the dispatch loop\n     *  @param a0,a1                Arguments to pass to the callback\n     */\n    template <typename F, typename A0, typename A1>\n    int call_in(int ms, F f, A0 a0, A1 a1) {\n        return call_in(ms, context20<F, A0, A1>(f, a0, a1));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see                        EventQueue::call_in\n     *  @param ms                   Time to delay in milliseconds\n     *  @param f                    Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2             Arguments to pass to the callback\n     */\n    template <typename F, typename A0, typename A1, typename A2>\n    int call_in(int ms, F f, A0 a0, A1 a1, A2 a2) {\n        return call_in(ms, context30<F, A0, A1, A2>(f, a0, a1, a2));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see                        EventQueue::call_in\n     *  @param ms                   Time to delay in milliseconds\n     *  @param f                    Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2,a3          Arguments to pass to the callback\n     */\n    template <typename F, typename A0, typename A1, typename A2, typename A3>\n    int call_in(int ms, F f, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_in(ms, context40<F, A0, A1, A2, A3>(f, a0, a1, a2, a3));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see                        EventQueue::call_in\n     *  @param ms                   Time to delay in milliseconds\n     *  @param f                    Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2,a3,a4       Arguments to pass to the callback\n     */\n    template <typename F, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_in(int ms, F f, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_in(ms, context50<F, A0, A1, A2, A3, A4>(f, a0, a1, a2, a3, a4));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R>\n    int call_in(int ms, T *obj, R (T::*method)()) {\n        return call_in(ms, mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R>\n    int call_in(int ms, const T *obj, R (T::*method)() const) {\n        return call_in(ms, mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R>\n    int call_in(int ms, volatile T *obj, R (T::*method)() volatile) {\n        return call_in(ms, mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R>\n    int call_in(int ms, const volatile T *obj, R (T::*method)() const volatile) {\n        return call_in(ms, mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0>\n    int call_in(int ms, T *obj, R (T::*method)(A0), A0 a0) {\n        return call_in(ms, mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0>\n    int call_in(int ms, const T *obj, R (T::*method)(A0) const, A0 a0) {\n        return call_in(ms, mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0>\n    int call_in(int ms, volatile T *obj, R (T::*method)(A0) volatile, A0 a0) {\n        return call_in(ms, mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0>\n    int call_in(int ms, const volatile T *obj, R (T::*method)(A0) const volatile, A0 a0) {\n        return call_in(ms, mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call_in(int ms, T *obj, R (T::*method)(A0, A1), A0 a0, A1 a1) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call_in(int ms, const T *obj, R (T::*method)(A0, A1) const, A0 a0, A1 a1) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call_in(int ms, volatile T *obj, R (T::*method)(A0, A1) volatile, A0 a0, A1 a1) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call_in(int ms, const volatile T *obj, R (T::*method)(A0, A1) const volatile, A0 a0, A1 a1) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call_in(int ms, T *obj, R (T::*method)(A0, A1, A2), A0 a0, A1 a1, A2 a2) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call_in(int ms, const T *obj, R (T::*method)(A0, A1, A2) const, A0 a0, A1 a1, A2 a2) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call_in(int ms, volatile T *obj, R (T::*method)(A0, A1, A2) volatile, A0 a0, A1 a1, A2 a2) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call_in(int ms, const volatile T *obj, R (T::*method)(A0, A1, A2) const volatile, A0 a0, A1 a1, A2 a2) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call_in(int ms, T *obj, R (T::*method)(A0, A1, A2, A3), A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call_in(int ms, const T *obj, R (T::*method)(A0, A1, A2, A3) const, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call_in(int ms, volatile T *obj, R (T::*method)(A0, A1, A2, A3) volatile, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call_in(int ms, const volatile T *obj, R (T::*method)(A0, A1, A2, A3) const volatile, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_in(int ms, T *obj, R (T::*method)(A0, A1, A2, A3, A4), A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_in(int ms, const T *obj, R (T::*method)(A0, A1, A2, A3, A4) const, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_in(int ms, volatile T *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue after a specified delay\n     *  @see EventQueue::call_in\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_in(int ms, const volatile T *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_in(ms, mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue periodically\n     *\n     *  @note The first call_every event occurs after the specified delay.\n     *  To create a periodic event that fires immediately, @see Event.\n     *\n     *  The specified callback will be executed in the context of the event\n     *  queue's dispatch loop.\n     *\n     *  The call_every function is irq safe and can act as a mechanism for\n     *  moving events out of irq contexts.\n     *\n     *  @param f        Function to execute in the context of the dispatch loop\n     *  @param ms       Period of the event in milliseconds\n     *  @return         A unique id that represents the posted event and can\n     *                  be passed to cancel, or an id of 0 if there is not\n     *                  enough memory to allocate the event.\n     */\n    template <typename F>\n    int call_every(int ms, F f) {\n        void *p = equeue_alloc(&_equeue, sizeof(F));\n        if (!p) {\n            return 0;\n        }\n\n        F *e = new (p) F(f);\n        equeue_event_delay(e, ms);\n        equeue_event_period(e, ms);\n        equeue_event_dtor(e, &EventQueue::function_dtor<F>);\n        return equeue_post(&_equeue, &EventQueue::function_call<F>, e);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see                    EventQueue::call_every\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0               Argument to pass to the callback\n     *  @param ms               Period of the event in milliseconds\n     */\n    template <typename F, typename A0>\n    int call_every(int ms, F f, A0 a0) {\n        return call_every(ms, context10<F, A0>(f, a0));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see                    EventQueue::call_every\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0,a1            Arguments to pass to the callback\n     *  @param ms               Period of the event in milliseconds\n     */\n    template <typename F, typename A0, typename A1>\n    int call_every(int ms, F f, A0 a0, A1 a1) {\n        return call_every(ms, context20<F, A0, A1>(f, a0, a1));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see                    EventQueue::call_every\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2         Arguments to pass to the callback\n     *  @param ms               Period of the event in milliseconds\n     */\n    template <typename F, typename A0, typename A1, typename A2>\n    int call_every(int ms, F f, A0 a0, A1 a1, A2 a2) {\n        return call_every(ms, context30<F, A0, A1, A2>(f, a0, a1, a2));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see                    EventQueue::call_every\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2,a3      Arguments to pass to the callback\n     *  @param ms               Period of the event in milliseconds\n     */\n    template <typename F, typename A0, typename A1, typename A2, typename A3>\n    int call_every(int ms, F f, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_every(ms, context40<F, A0, A1, A2, A3>(f, a0, a1, a2, a3));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see                    EventQueue::call_every\n     *  @param f                Function to execute in the context of the dispatch loop\n     *  @param a0,a1,a2,a3,a4   Arguments to pass to the callback\n     *  @param ms               Period of the event in milliseconds\n     */\n    template <typename F, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_every(int ms, F f, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_every(ms, context50<F, A0, A1, A2, A3, A4>(f, a0, a1, a2, a3, a4));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R>\n    int call_every(int ms, T *obj, R (T::*method)()) {\n        return call_every(ms, mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R>\n    int call_every(int ms, const T *obj, R (T::*method)() const) {\n        return call_every(ms, mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R>\n    int call_every(int ms, volatile T *obj, R (T::*method)() volatile) {\n        return call_every(ms, mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R>\n    int call_every(int ms, const volatile T *obj, R (T::*method)() const volatile) {\n        return call_every(ms, mbed::callback(obj, method));\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0>\n    int call_every(int ms, T *obj, R (T::*method)(A0), A0 a0) {\n        return call_every(ms, mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0>\n    int call_every(int ms, const T *obj, R (T::*method)(A0) const, A0 a0) {\n        return call_every(ms, mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0>\n    int call_every(int ms, volatile T *obj, R (T::*method)(A0) volatile, A0 a0) {\n        return call_every(ms, mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0>\n    int call_every(int ms, const volatile T *obj, R (T::*method)(A0) const volatile, A0 a0) {\n        return call_every(ms, mbed::callback(obj, method), a0);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call_every(int ms, T *obj, R (T::*method)(A0, A1), A0 a0, A1 a1) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call_every(int ms, const T *obj, R (T::*method)(A0, A1) const, A0 a0, A1 a1) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call_every(int ms, volatile T *obj, R (T::*method)(A0, A1) volatile, A0 a0, A1 a1) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    int call_every(int ms, const volatile T *obj, R (T::*method)(A0, A1) const volatile, A0 a0, A1 a1) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call_every(int ms, T *obj, R (T::*method)(A0, A1, A2), A0 a0, A1 a1, A2 a2) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call_every(int ms, const T *obj, R (T::*method)(A0, A1, A2) const, A0 a0, A1 a1, A2 a2) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call_every(int ms, volatile T *obj, R (T::*method)(A0, A1, A2) volatile, A0 a0, A1 a1, A2 a2) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    int call_every(int ms, const volatile T *obj, R (T::*method)(A0, A1, A2) const volatile, A0 a0, A1 a1, A2 a2) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call_every(int ms, T *obj, R (T::*method)(A0, A1, A2, A3), A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call_every(int ms, const T *obj, R (T::*method)(A0, A1, A2, A3) const, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call_every(int ms, volatile T *obj, R (T::*method)(A0, A1, A2, A3) volatile, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    int call_every(int ms, const volatile T *obj, R (T::*method)(A0, A1, A2, A3) const volatile, A0 a0, A1 a1, A2 a2, A3 a3) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2, a3);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_every(int ms, T *obj, R (T::*method)(A0, A1, A2, A3, A4), A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_every(int ms, const T *obj, R (T::*method)(A0, A1, A2, A3, A4) const, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_every(int ms, volatile T *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Calls an event on the queue periodically\n     *  @see EventQueue::call_every\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    int call_every(int ms, const volatile T *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n        return call_every(ms, mbed::callback(obj, method), a0, a1, a2, a3, a4);\n    }\n\n    /** Creates an event bound to the event queue\n     *\n     *  Constructs an event bound to the specified event queue. The specified\n     *  callback acts as the target for the event and is executed in the\n     *  context of the event queue's dispatch loop once posted.\n     *\n     *  @param func        Function to execute when the event is dispatched\n     *  @return            Event that will dispatch on the specific queue\n     */\n    template <typename R>\n    Event<void()> event(R (*func)());\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R>\n    Event<void()> event(T *obj, R (T::*method)());\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R>\n    Event<void()> event(const T *obj, R (T::*method)() const);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R>\n    Event<void()> event(volatile T *obj, R (T::*method)() volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R>\n    Event<void()> event(const volatile T *obj, R (T::*method)() const volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R>\n    Event<void()> event(mbed::Callback<R()> cb);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0>\n    Event<void()> event(R (*func)(B0), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0>\n    Event<void()> event(T *obj, R (T::*method)(B0), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0>\n    Event<void()> event(const T *obj, R (T::*method)(B0) const, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0>\n    Event<void()> event(volatile T *obj, R (T::*method)(B0) volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0>\n    Event<void()> event(const volatile T *obj, R (T::*method)(B0) const volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0>\n    Event<void()> event(mbed::Callback<R(B0)> cb, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1>\n    Event<void()> event(R (*func)(B0, B1), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1>\n    Event<void()> event(T *obj, R (T::*method)(B0, B1), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1>\n    Event<void()> event(const T *obj, R (T::*method)(B0, B1) const, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1>\n    Event<void()> event(volatile T *obj, R (T::*method)(B0, B1) volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1>\n    Event<void()> event(const volatile T *obj, R (T::*method)(B0, B1) const volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1>\n    Event<void()> event(mbed::Callback<R(B0, B1)> cb, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2>\n    Event<void()> event(R (*func)(B0, B1, B2), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2>\n    Event<void()> event(T *obj, R (T::*method)(B0, B1, B2), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2>\n    Event<void()> event(const T *obj, R (T::*method)(B0, B1, B2) const, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2>\n    Event<void()> event(volatile T *obj, R (T::*method)(B0, B1, B2) volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2>\n    Event<void()> event(const volatile T *obj, R (T::*method)(B0, B1, B2) const volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2>\n    Event<void()> event(mbed::Callback<R(B0, B1, B2)> cb, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3>\n    Event<void()> event(R (*func)(B0, B1, B2, B3), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3>\n    Event<void()> event(T *obj, R (T::*method)(B0, B1, B2, B3), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3>\n    Event<void()> event(const T *obj, R (T::*method)(B0, B1, B2, B3) const, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3>\n    Event<void()> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3) volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3>\n    Event<void()> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3) const volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3>\n    Event<void()> event(mbed::Callback<R(B0, B1, B2, B3)> cb, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4>\n    Event<void()> event(R (*func)(B0, B1, B2, B3, B4), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4>\n    Event<void()> event(T *obj, R (T::*method)(B0, B1, B2, B3, B4), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4>\n    Event<void()> event(const T *obj, R (T::*method)(B0, B1, B2, B3, B4) const, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4>\n    Event<void()> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4) volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4>\n    Event<void()> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4) const volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4>\n    Event<void()> event(mbed::Callback<R(B0, B1, B2, B3, B4)> cb, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0>\n    Event<void(A0)> event(R (*func)(A0));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0>\n    Event<void(A0)> event(T *obj, R (T::*method)(A0));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0>\n    Event<void(A0)> event(const T *obj, R (T::*method)(A0) const);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0>\n    Event<void(A0)> event(volatile T *obj, R (T::*method)(A0) volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0>\n    Event<void(A0)> event(const volatile T *obj, R (T::*method)(A0) const volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0>\n    Event<void(A0)> event(mbed::Callback<R(A0)> cb);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0>\n    Event<void(A0)> event(R (*func)(B0, A0), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0>\n    Event<void(A0)> event(T *obj, R (T::*method)(B0, A0), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0>\n    Event<void(A0)> event(const T *obj, R (T::*method)(B0, A0) const, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0>\n    Event<void(A0)> event(volatile T *obj, R (T::*method)(B0, A0) volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0>\n    Event<void(A0)> event(const volatile T *obj, R (T::*method)(B0, A0) const volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0>\n    Event<void(A0)> event(mbed::Callback<R(B0, A0)> cb, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0>\n    Event<void(A0)> event(R (*func)(B0, B1, A0), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0>\n    Event<void(A0)> event(T *obj, R (T::*method)(B0, B1, A0), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0>\n    Event<void(A0)> event(const T *obj, R (T::*method)(B0, B1, A0) const, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0>\n    Event<void(A0)> event(volatile T *obj, R (T::*method)(B0, B1, A0) volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0>\n    Event<void(A0)> event(const volatile T *obj, R (T::*method)(B0, B1, A0) const volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0>\n    Event<void(A0)> event(mbed::Callback<R(B0, B1, A0)> cb, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0>\n    Event<void(A0)> event(R (*func)(B0, B1, B2, A0), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0>\n    Event<void(A0)> event(T *obj, R (T::*method)(B0, B1, B2, A0), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0>\n    Event<void(A0)> event(const T *obj, R (T::*method)(B0, B1, B2, A0) const, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0>\n    Event<void(A0)> event(volatile T *obj, R (T::*method)(B0, B1, B2, A0) volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0>\n    Event<void(A0)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, A0) const volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0>\n    Event<void(A0)> event(mbed::Callback<R(B0, B1, B2, A0)> cb, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0>\n    Event<void(A0)> event(R (*func)(B0, B1, B2, B3, A0), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0>\n    Event<void(A0)> event(T *obj, R (T::*method)(B0, B1, B2, B3, A0), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0>\n    Event<void(A0)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, A0) const, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0>\n    Event<void(A0)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0) volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0>\n    Event<void(A0)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0) const volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0>\n    Event<void(A0)> event(mbed::Callback<R(B0, B1, B2, B3, A0)> cb, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0>\n    Event<void(A0)> event(R (*func)(B0, B1, B2, B3, B4, A0), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0>\n    Event<void(A0)> event(T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0>\n    Event<void(A0)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0) const, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0>\n    Event<void(A0)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0) volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0>\n    Event<void(A0)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0) const volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0>\n    Event<void(A0)> event(mbed::Callback<R(B0, B1, B2, B3, B4, A0)> cb, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0, typename A1>\n    Event<void(A0, A1)> event(R (*func)(A0, A1));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    Event<void(A0, A1)> event(T *obj, R (T::*method)(A0, A1));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    Event<void(A0, A1)> event(const T *obj, R (T::*method)(A0, A1) const);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    Event<void(A0, A1)> event(volatile T *obj, R (T::*method)(A0, A1) volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1>\n    Event<void(A0, A1)> event(const volatile T *obj, R (T::*method)(A0, A1) const volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0, typename A1>\n    Event<void(A0, A1)> event(mbed::Callback<R(A0, A1)> cb);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0, typename A1>\n    Event<void(A0, A1)> event(R (*func)(B0, A0, A1), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1>\n    Event<void(A0, A1)> event(T *obj, R (T::*method)(B0, A0, A1), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1>\n    Event<void(A0, A1)> event(const T *obj, R (T::*method)(B0, A0, A1) const, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1>\n    Event<void(A0, A1)> event(volatile T *obj, R (T::*method)(B0, A0, A1) volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1>\n    Event<void(A0, A1)> event(const volatile T *obj, R (T::*method)(B0, A0, A1) const volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0, typename A1>\n    Event<void(A0, A1)> event(mbed::Callback<R(B0, A0, A1)> cb, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1>\n    Event<void(A0, A1)> event(R (*func)(B0, B1, A0, A1), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1>\n    Event<void(A0, A1)> event(T *obj, R (T::*method)(B0, B1, A0, A1), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1>\n    Event<void(A0, A1)> event(const T *obj, R (T::*method)(B0, B1, A0, A1) const, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1>\n    Event<void(A0, A1)> event(volatile T *obj, R (T::*method)(B0, B1, A0, A1) volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1>\n    Event<void(A0, A1)> event(const volatile T *obj, R (T::*method)(B0, B1, A0, A1) const volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1>\n    Event<void(A0, A1)> event(mbed::Callback<R(B0, B1, A0, A1)> cb, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1>\n    Event<void(A0, A1)> event(R (*func)(B0, B1, B2, A0, A1), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1>\n    Event<void(A0, A1)> event(T *obj, R (T::*method)(B0, B1, B2, A0, A1), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1>\n    Event<void(A0, A1)> event(const T *obj, R (T::*method)(B0, B1, B2, A0, A1) const, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1>\n    Event<void(A0, A1)> event(volatile T *obj, R (T::*method)(B0, B1, B2, A0, A1) volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1>\n    Event<void(A0, A1)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, A0, A1) const volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1>\n    Event<void(A0, A1)> event(mbed::Callback<R(B0, B1, B2, A0, A1)> cb, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1>\n    Event<void(A0, A1)> event(R (*func)(B0, B1, B2, B3, A0, A1), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1>\n    Event<void(A0, A1)> event(T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1>\n    Event<void(A0, A1)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1) const, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1>\n    Event<void(A0, A1)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1) volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1>\n    Event<void(A0, A1)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1) const volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1>\n    Event<void(A0, A1)> event(mbed::Callback<R(B0, B1, B2, B3, A0, A1)> cb, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1>\n    Event<void(A0, A1)> event(R (*func)(B0, B1, B2, B3, B4, A0, A1), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1>\n    Event<void(A0, A1)> event(T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1>\n    Event<void(A0, A1)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1) const, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1>\n    Event<void(A0, A1)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1) volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1>\n    Event<void(A0, A1)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1) const volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1>\n    Event<void(A0, A1)> event(mbed::Callback<R(B0, B1, B2, B3, B4, A0, A1)> cb, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(R (*func)(A0, A1, A2));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(T *obj, R (T::*method)(A0, A1, A2));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const T *obj, R (T::*method)(A0, A1, A2) const);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(volatile T *obj, R (T::*method)(A0, A1, A2) volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const volatile T *obj, R (T::*method)(A0, A1, A2) const volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(mbed::Callback<R(A0, A1, A2)> cb);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(R (*func)(B0, A0, A1, A2), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(T *obj, R (T::*method)(B0, A0, A1, A2), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const T *obj, R (T::*method)(B0, A0, A1, A2) const, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(volatile T *obj, R (T::*method)(B0, A0, A1, A2) volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const volatile T *obj, R (T::*method)(B0, A0, A1, A2) const volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(mbed::Callback<R(B0, A0, A1, A2)> cb, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(R (*func)(B0, B1, A0, A1, A2), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(T *obj, R (T::*method)(B0, B1, A0, A1, A2), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const T *obj, R (T::*method)(B0, B1, A0, A1, A2) const, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(volatile T *obj, R (T::*method)(B0, B1, A0, A1, A2) volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const volatile T *obj, R (T::*method)(B0, B1, A0, A1, A2) const volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(mbed::Callback<R(B0, B1, A0, A1, A2)> cb, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(R (*func)(B0, B1, B2, A0, A1, A2), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2) const, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(volatile T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2) volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2) const volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(mbed::Callback<R(B0, B1, B2, A0, A1, A2)> cb, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(R (*func)(B0, B1, B2, B3, A0, A1, A2), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2) const, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2) volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2) const volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(mbed::Callback<R(B0, B1, B2, B3, A0, A1, A2)> cb, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(R (*func)(B0, B1, B2, B3, B4, A0, A1, A2), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2) const, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2) volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2) const volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2>\n    Event<void(A0, A1, A2)> event(mbed::Callback<R(B0, B1, B2, B3, B4, A0, A1, A2)> cb, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(R (*func)(A0, A1, A2, A3));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(T *obj, R (T::*method)(A0, A1, A2, A3));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const T *obj, R (T::*method)(A0, A1, A2, A3) const);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(volatile T *obj, R (T::*method)(A0, A1, A2, A3) volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const volatile T *obj, R (T::*method)(A0, A1, A2, A3) const volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(mbed::Callback<R(A0, A1, A2, A3)> cb);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(R (*func)(B0, A0, A1, A2, A3), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(T *obj, R (T::*method)(B0, A0, A1, A2, A3), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const T *obj, R (T::*method)(B0, A0, A1, A2, A3) const, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(volatile T *obj, R (T::*method)(B0, A0, A1, A2, A3) volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const volatile T *obj, R (T::*method)(B0, A0, A1, A2, A3) const volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(mbed::Callback<R(B0, A0, A1, A2, A3)> cb, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(R (*func)(B0, B1, A0, A1, A2, A3), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(T *obj, R (T::*method)(B0, B1, A0, A1, A2, A3), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const T *obj, R (T::*method)(B0, B1, A0, A1, A2, A3) const, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(volatile T *obj, R (T::*method)(B0, B1, A0, A1, A2, A3) volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const volatile T *obj, R (T::*method)(B0, B1, A0, A1, A2, A3) const volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(mbed::Callback<R(B0, B1, A0, A1, A2, A3)> cb, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(R (*func)(B0, B1, B2, A0, A1, A2, A3), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2, A3), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2, A3) const, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(volatile T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2, A3) volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2, A3) const volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(mbed::Callback<R(B0, B1, B2, A0, A1, A2, A3)> cb, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(R (*func)(B0, B1, B2, B3, A0, A1, A2, A3), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2, A3), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2, A3) const, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2, A3) volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2, A3) const volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(mbed::Callback<R(B0, B1, B2, B3, A0, A1, A2, A3)> cb, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(R (*func)(B0, B1, B2, B3, B4, A0, A1, A2, A3), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2, A3), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2, A3) const, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2, A3) volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2, A3) const volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3>\n    Event<void(A0, A1, A2, A3)> event(mbed::Callback<R(B0, B1, B2, B3, B4, A0, A1, A2, A3)> cb, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(R (*func)(A0, A1, A2, A3, A4));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(T *obj, R (T::*method)(A0, A1, A2, A3, A4));\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const T *obj, R (T::*method)(A0, A1, A2, A3, A4) const);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(volatile T *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const volatile T *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(mbed::Callback<R(A0, A1, A2, A3, A4)> cb);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(R (*func)(B0, A0, A1, A2, A3, A4), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(T *obj, R (T::*method)(B0, A0, A1, A2, A3, A4), C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const T *obj, R (T::*method)(B0, A0, A1, A2, A3, A4) const, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(volatile T *obj, R (T::*method)(B0, A0, A1, A2, A3, A4) volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const volatile T *obj, R (T::*method)(B0, A0, A1, A2, A3, A4) const volatile, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename C0, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(mbed::Callback<R(B0, A0, A1, A2, A3, A4)> cb, C0 c0);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(R (*func)(B0, B1, A0, A1, A2, A3, A4), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(T *obj, R (T::*method)(B0, B1, A0, A1, A2, A3, A4), C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const T *obj, R (T::*method)(B0, B1, A0, A1, A2, A3, A4) const, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(volatile T *obj, R (T::*method)(B0, B1, A0, A1, A2, A3, A4) volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const volatile T *obj, R (T::*method)(B0, B1, A0, A1, A2, A3, A4) const volatile, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(mbed::Callback<R(B0, B1, A0, A1, A2, A3, A4)> cb, C0 c0, C1 c1);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(R (*func)(B0, B1, B2, A0, A1, A2, A3, A4), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2, A3, A4), C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2, A3, A4) const, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(volatile T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2, A3, A4) volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, A0, A1, A2, A3, A4) const volatile, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(mbed::Callback<R(B0, B1, B2, A0, A1, A2, A3, A4)> cb, C0 c0, C1 c1, C2 c2);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(R (*func)(B0, B1, B2, B3, A0, A1, A2, A3, A4), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2, A3, A4), C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2, A3, A4) const, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2, A3, A4) volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, A0, A1, A2, A3, A4) const volatile, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(mbed::Callback<R(B0, B1, B2, B3, A0, A1, A2, A3, A4)> cb, C0 c0, C1 c1, C2 c2, C3 c3);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(R (*func)(B0, B1, B2, B3, B4, A0, A1, A2, A3, A4), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2, A3, A4), C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2, A3, A4) const, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2, A3, A4) volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename T, typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(const volatile T *obj, R (T::*method)(B0, B1, B2, B3, B4, A0, A1, A2, A3, A4) const volatile, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\n    /** Creates an event bound to the event queue\n     *  @see EventQueue::event\n     */\n    template <typename R, typename B0, typename B1, typename B2, typename B3, typename B4, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3, typename A4>\n    Event<void(A0, A1, A2, A3, A4)> event(mbed::Callback<R(B0, B1, B2, B3, B4, A0, A1, A2, A3, A4)> cb, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4);\n\nprotected:\n    template <typename F>\n    friend class Event;\n    struct equeue _equeue;\n    mbed::Callback<void(int)> _update;\n\n    // Function attributes\n    template <typename F>\n    static void function_call(void *p) {\n        (*(F*)p)();\n    }\n\n    template <typename F>\n    static void function_dtor(void *p) {\n        ((F*)p)->~F();\n    }\n\n    // Context structures\n    template <typename F>\n    struct context00 {\n        F f;\n\n        context00(F f)\n            : f(f) {}\n\n        void operator()() {\n            f();\n        }\n    };\n\n    template <typename F, typename C0>\n    struct context10 {\n        F f; C0 c0;\n\n        context10(F f, C0 c0)\n            : f(f), c0(c0) {}\n\n        void operator()() {\n            f(c0);\n        }\n    };\n\n    template <typename F, typename C0, typename C1>\n    struct context20 {\n        F f; C0 c0; C1 c1;\n\n        context20(F f, C0 c0, C1 c1)\n            : f(f), c0(c0), c1(c1) {}\n\n        void operator()() {\n            f(c0, c1);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2>\n    struct context30 {\n        F f; C0 c0; C1 c1; C2 c2;\n\n        context30(F f, C0 c0, C1 c1, C2 c2)\n            : f(f), c0(c0), c1(c1), c2(c2) {}\n\n        void operator()() {\n            f(c0, c1, c2);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3>\n    struct context40 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3;\n\n        context40(F f, C0 c0, C1 c1, C2 c2, C3 c3)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3) {}\n\n        void operator()() {\n            f(c0, c1, c2, c3);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename C4>\n    struct context50 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3; C4 c4;\n\n        context50(F f, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3), c4(c4) {}\n\n        void operator()() {\n            f(c0, c1, c2, c3, c4);\n        }\n    };\n\n    template <typename F, typename A0>\n    struct context01 {\n        F f;\n\n        context01(F f)\n            : f(f) {}\n\n        void operator()(A0 a0) {\n            f(a0);\n        }\n    };\n\n    template <typename F, typename C0, typename A0>\n    struct context11 {\n        F f; C0 c0;\n\n        context11(F f, C0 c0)\n            : f(f), c0(c0) {}\n\n        void operator()(A0 a0) {\n            f(c0, a0);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename A0>\n    struct context21 {\n        F f; C0 c0; C1 c1;\n\n        context21(F f, C0 c0, C1 c1)\n            : f(f), c0(c0), c1(c1) {}\n\n        void operator()(A0 a0) {\n            f(c0, c1, a0);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename A0>\n    struct context31 {\n        F f; C0 c0; C1 c1; C2 c2;\n\n        context31(F f, C0 c0, C1 c1, C2 c2)\n            : f(f), c0(c0), c1(c1), c2(c2) {}\n\n        void operator()(A0 a0) {\n            f(c0, c1, c2, a0);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename A0>\n    struct context41 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3;\n\n        context41(F f, C0 c0, C1 c1, C2 c2, C3 c3)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3) {}\n\n        void operator()(A0 a0) {\n            f(c0, c1, c2, c3, a0);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0>\n    struct context51 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3; C4 c4;\n\n        context51(F f, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3), c4(c4) {}\n\n        void operator()(A0 a0) {\n            f(c0, c1, c2, c3, c4, a0);\n        }\n    };\n\n    template <typename F, typename A0, typename A1>\n    struct context02 {\n        F f;\n\n        context02(F f)\n            : f(f) {}\n\n        void operator()(A0 a0, A1 a1) {\n            f(a0, a1);\n        }\n    };\n\n    template <typename F, typename C0, typename A0, typename A1>\n    struct context12 {\n        F f; C0 c0;\n\n        context12(F f, C0 c0)\n            : f(f), c0(c0) {}\n\n        void operator()(A0 a0, A1 a1) {\n            f(c0, a0, a1);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename A0, typename A1>\n    struct context22 {\n        F f; C0 c0; C1 c1;\n\n        context22(F f, C0 c0, C1 c1)\n            : f(f), c0(c0), c1(c1) {}\n\n        void operator()(A0 a0, A1 a1) {\n            f(c0, c1, a0, a1);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename A0, typename A1>\n    struct context32 {\n        F f; C0 c0; C1 c1; C2 c2;\n\n        context32(F f, C0 c0, C1 c1, C2 c2)\n            : f(f), c0(c0), c1(c1), c2(c2) {}\n\n        void operator()(A0 a0, A1 a1) {\n            f(c0, c1, c2, a0, a1);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1>\n    struct context42 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3;\n\n        context42(F f, C0 c0, C1 c1, C2 c2, C3 c3)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3) {}\n\n        void operator()(A0 a0, A1 a1) {\n            f(c0, c1, c2, c3, a0, a1);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1>\n    struct context52 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3; C4 c4;\n\n        context52(F f, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3), c4(c4) {}\n\n        void operator()(A0 a0, A1 a1) {\n            f(c0, c1, c2, c3, c4, a0, a1);\n        }\n    };\n\n    template <typename F, typename A0, typename A1, typename A2>\n    struct context03 {\n        F f;\n\n        context03(F f)\n            : f(f) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2) {\n            f(a0, a1, a2);\n        }\n    };\n\n    template <typename F, typename C0, typename A0, typename A1, typename A2>\n    struct context13 {\n        F f; C0 c0;\n\n        context13(F f, C0 c0)\n            : f(f), c0(c0) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2) {\n            f(c0, a0, a1, a2);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename A0, typename A1, typename A2>\n    struct context23 {\n        F f; C0 c0; C1 c1;\n\n        context23(F f, C0 c0, C1 c1)\n            : f(f), c0(c0), c1(c1) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2) {\n            f(c0, c1, a0, a1, a2);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2>\n    struct context33 {\n        F f; C0 c0; C1 c1; C2 c2;\n\n        context33(F f, C0 c0, C1 c1, C2 c2)\n            : f(f), c0(c0), c1(c1), c2(c2) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2) {\n            f(c0, c1, c2, a0, a1, a2);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2>\n    struct context43 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3;\n\n        context43(F f, C0 c0, C1 c1, C2 c2, C3 c3)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2) {\n            f(c0, c1, c2, c3, a0, a1, a2);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2>\n    struct context53 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3; C4 c4;\n\n        context53(F f, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3), c4(c4) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2) {\n            f(c0, c1, c2, c3, c4, a0, a1, a2);\n        }\n    };\n\n    template <typename F, typename A0, typename A1, typename A2, typename A3>\n    struct context04 {\n        F f;\n\n        context04(F f)\n            : f(f) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3) {\n            f(a0, a1, a2, a3);\n        }\n    };\n\n    template <typename F, typename C0, typename A0, typename A1, typename A2, typename A3>\n    struct context14 {\n        F f; C0 c0;\n\n        context14(F f, C0 c0)\n            : f(f), c0(c0) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3) {\n            f(c0, a0, a1, a2, a3);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3>\n    struct context24 {\n        F f; C0 c0; C1 c1;\n\n        context24(F f, C0 c0, C1 c1)\n            : f(f), c0(c0), c1(c1) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3) {\n            f(c0, c1, a0, a1, a2, a3);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3>\n    struct context34 {\n        F f; C0 c0; C1 c1; C2 c2;\n\n        context34(F f, C0 c0, C1 c1, C2 c2)\n            : f(f), c0(c0), c1(c1), c2(c2) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3) {\n            f(c0, c1, c2, a0, a1, a2, a3);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3>\n    struct context44 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3;\n\n        context44(F f, C0 c0, C1 c1, C2 c2, C3 c3)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3) {\n            f(c0, c1, c2, c3, a0, a1, a2, a3);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3>\n    struct context54 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3; C4 c4;\n\n        context54(F f, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3), c4(c4) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3) {\n            f(c0, c1, c2, c3, c4, a0, a1, a2, a3);\n        }\n    };\n\n    template <typename F, typename A0, typename A1, typename A2, typename A3, typename A4>\n    struct context05 {\n        F f;\n\n        context05(F f)\n            : f(f) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n            f(a0, a1, a2, a3, a4);\n        }\n    };\n\n    template <typename F, typename C0, typename A0, typename A1, typename A2, typename A3, typename A4>\n    struct context15 {\n        F f; C0 c0;\n\n        context15(F f, C0 c0)\n            : f(f), c0(c0) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n            f(c0, a0, a1, a2, a3, a4);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename A0, typename A1, typename A2, typename A3, typename A4>\n    struct context25 {\n        F f; C0 c0; C1 c1;\n\n        context25(F f, C0 c0, C1 c1)\n            : f(f), c0(c0), c1(c1) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n            f(c0, c1, a0, a1, a2, a3, a4);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename A0, typename A1, typename A2, typename A3, typename A4>\n    struct context35 {\n        F f; C0 c0; C1 c1; C2 c2;\n\n        context35(F f, C0 c0, C1 c1, C2 c2)\n            : f(f), c0(c0), c1(c1), c2(c2) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n            f(c0, c1, c2, a0, a1, a2, a3, a4);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename A0, typename A1, typename A2, typename A3, typename A4>\n    struct context45 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3;\n\n        context45(F f, C0 c0, C1 c1, C2 c2, C3 c3)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n            f(c0, c1, c2, c3, a0, a1, a2, a3, a4);\n        }\n    };\n\n    template <typename F, typename C0, typename C1, typename C2, typename C3, typename C4, typename A0, typename A1, typename A2, typename A3, typename A4>\n    struct context55 {\n        F f; C0 c0; C1 c1; C2 c2; C3 c3; C4 c4;\n\n        context55(F f, C0 c0, C1 c1, C2 c2, C3 c3, C4 c4)\n            : f(f), c0(c0), c1(c1), c2(c2), c3(c3), c4(c4) {}\n\n        void operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {\n            f(c0, c1, c2, c3, c4, a0, a1, a2, a3, a4);\n        }\n    };\n};\n\n}\n\n#endif\n\n","/*\n *  NIST SP800-38D compliant GCM implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf\n *\n * See also:\n * [MGV] http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf\n *\n * We use the algorithm described as Shoup's method with 4-bit tables in\n * [MGV] 4.1, pp. 12-13, to enhance speed without using too much memory.\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_GCM_C)\n\n#include \"mbedtls/gcm.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_AESNI_C)\n#include \"mbedtls/aesni.h\"\n#endif\n\n#if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)\n#include \"mbedtls/aes.h\"\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */\n\n#if !defined(MBEDTLS_GCM_ALT)\n\n/*\n * 32-bit integer manipulation macros (big endian)\n */\n#ifndef GET_UINT32_BE\n#define GET_UINT32_BE(n,b,i)                            \\\n{                                                       \\\n    (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \\\n        | ( (uint32_t) (b)[(i) + 1] << 16 )             \\\n        | ( (uint32_t) (b)[(i) + 2] <<  8 )             \\\n        | ( (uint32_t) (b)[(i) + 3]       );            \\\n}\n#endif\n\n#ifndef PUT_UINT32_BE\n#define PUT_UINT32_BE(n,b,i)                            \\\n{                                                       \\\n    (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \\\n    (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \\\n    (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \\\n    (b)[(i) + 3] = (unsigned char) ( (n)       );       \\\n}\n#endif\n\n/*\n * Initialize a context\n */\nvoid mbedtls_gcm_init( mbedtls_gcm_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );\n}\n\n/*\n * Precompute small multiples of H, that is set\n *      HH[i] || HL[i] = H times i,\n * where i is seen as a field element as in [MGV], ie high-order bits\n * correspond to low powers of P. The result is stored in the same way, that\n * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL\n * corresponds to P^127.\n */\nstatic int gcm_gen_table( mbedtls_gcm_context *ctx )\n{\n    int ret, i, j;\n    uint64_t hi, lo;\n    uint64_t vl, vh;\n    unsigned char h[16];\n    size_t olen = 0;\n\n    memset( h, 0, 16 );\n    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )\n        return( ret );\n\n    /* pack h as two 64-bits ints, big-endian */\n    GET_UINT32_BE( hi, h,  0  );\n    GET_UINT32_BE( lo, h,  4  );\n    vh = (uint64_t) hi << 32 | lo;\n\n    GET_UINT32_BE( hi, h,  8  );\n    GET_UINT32_BE( lo, h,  12 );\n    vl = (uint64_t) hi << 32 | lo;\n\n    /* 8 = 1000 corresponds to 1 in GF(2^128) */\n    ctx->HL[8] = vl;\n    ctx->HH[8] = vh;\n\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    /* With CLMUL support, we need only h, not the rest of the table */\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )\n        return( 0 );\n#endif\n\n    /* 0 corresponds to 0 in GF(2^128) */\n    ctx->HH[0] = 0;\n    ctx->HL[0] = 0;\n\n    for( i = 4; i > 0; i >>= 1 )\n    {\n        uint32_t T = ( vl & 1 ) * 0xe1000000U;\n        vl  = ( vh << 63 ) | ( vl >> 1 );\n        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);\n\n        ctx->HL[i] = vl;\n        ctx->HH[i] = vh;\n    }\n\n    for( i = 2; i <= 8; i *= 2 )\n    {\n        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;\n        vh = *HiH;\n        vl = *HiL;\n        for( j = 1; j < i; j++ )\n        {\n            HiH[j] = vh ^ ctx->HH[j];\n            HiL[j] = vl ^ ctx->HL[j];\n        }\n    }\n\n    return( 0 );\n}\n\nint mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,\n                        mbedtls_cipher_id_t cipher,\n                        const unsigned char *key,\n                        unsigned int keybits )\n{\n    int ret;\n    const mbedtls_cipher_info_t *cipher_info;\n\n    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );\n    if( cipher_info == NULL )\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n\n    if( cipher_info->block_size != 16 )\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n\n    mbedtls_cipher_free( &ctx->cipher_ctx );\n\n    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,\n                               MBEDTLS_ENCRYPT ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    if( ( ret = gcm_gen_table( ctx ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * Shoup's method for multiplication use this table with\n *      last4[x] = x times P^128\n * where x and last4[x] are seen as elements of GF(2^128) as in [MGV]\n */\nstatic const uint64_t last4[16] =\n{\n    0x0000, 0x1c20, 0x3840, 0x2460,\n    0x7080, 0x6ca0, 0x48c0, 0x54e0,\n    0xe100, 0xfd20, 0xd940, 0xc560,\n    0x9180, 0x8da0, 0xa9c0, 0xb5e0\n};\n\n/*\n * Sets output to x times H using the precomputed tables.\n * x and output are seen as elements of GF(2^128) as in [MGV].\n */\nstatic void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],\n                      unsigned char output[16] )\n{\n    int i = 0;\n    unsigned char lo, hi, rem;\n    uint64_t zh, zl;\n\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) ) {\n        unsigned char h[16];\n\n        PUT_UINT32_BE( ctx->HH[8] >> 32, h,  0 );\n        PUT_UINT32_BE( ctx->HH[8],       h,  4 );\n        PUT_UINT32_BE( ctx->HL[8] >> 32, h,  8 );\n        PUT_UINT32_BE( ctx->HL[8],       h, 12 );\n\n        mbedtls_aesni_gcm_mult( output, x, h );\n        return;\n    }\n#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */\n\n    lo = x[15] & 0xf;\n\n    zh = ctx->HH[lo];\n    zl = ctx->HL[lo];\n\n    for( i = 15; i >= 0; i-- )\n    {\n        lo = x[i] & 0xf;\n        hi = x[i] >> 4;\n\n        if( i != 15 )\n        {\n            rem = (unsigned char) zl & 0xf;\n            zl = ( zh << 60 ) | ( zl >> 4 );\n            zh = ( zh >> 4 );\n            zh ^= (uint64_t) last4[rem] << 48;\n            zh ^= ctx->HH[lo];\n            zl ^= ctx->HL[lo];\n\n        }\n\n        rem = (unsigned char) zl & 0xf;\n        zl = ( zh << 60 ) | ( zl >> 4 );\n        zh = ( zh >> 4 );\n        zh ^= (uint64_t) last4[rem] << 48;\n        zh ^= ctx->HH[hi];\n        zl ^= ctx->HL[hi];\n    }\n\n    PUT_UINT32_BE( zh >> 32, output, 0 );\n    PUT_UINT32_BE( zh, output, 4 );\n    PUT_UINT32_BE( zl >> 32, output, 8 );\n    PUT_UINT32_BE( zl, output, 12 );\n}\n\nint mbedtls_gcm_starts( mbedtls_gcm_context *ctx,\n                int mode,\n                const unsigned char *iv,\n                size_t iv_len,\n                const unsigned char *add,\n                size_t add_len )\n{\n    int ret;\n    unsigned char work_buf[16];\n    size_t i;\n    const unsigned char *p;\n    size_t use_len, olen = 0;\n\n    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */\n    /* IV is not allowed to be zero length */\n    if( iv_len == 0 ||\n      ( (uint64_t) iv_len  ) >> 61 != 0 ||\n      ( (uint64_t) add_len ) >> 61 != 0 )\n    {\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n    }\n\n    memset( ctx->y, 0x00, sizeof(ctx->y) );\n    memset( ctx->buf, 0x00, sizeof(ctx->buf) );\n\n    ctx->mode = mode;\n    ctx->len = 0;\n    ctx->add_len = 0;\n\n    if( iv_len == 12 )\n    {\n        memcpy( ctx->y, iv, iv_len );\n        ctx->y[15] = 1;\n    }\n    else\n    {\n        memset( work_buf, 0x00, 16 );\n        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );\n\n        p = iv;\n        while( iv_len > 0 )\n        {\n            use_len = ( iv_len < 16 ) ? iv_len : 16;\n\n            for( i = 0; i < use_len; i++ )\n                ctx->y[i] ^= p[i];\n\n            gcm_mult( ctx, ctx->y, ctx->y );\n\n            iv_len -= use_len;\n            p += use_len;\n        }\n\n        for( i = 0; i < 16; i++ )\n            ctx->y[i] ^= work_buf[i];\n\n        gcm_mult( ctx, ctx->y, ctx->y );\n    }\n\n    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,\n                             &olen ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    ctx->add_len = add_len;\n    p = add;\n    while( add_len > 0 )\n    {\n        use_len = ( add_len < 16 ) ? add_len : 16;\n\n        for( i = 0; i < use_len; i++ )\n            ctx->buf[i] ^= p[i];\n\n        gcm_mult( ctx, ctx->buf, ctx->buf );\n\n        add_len -= use_len;\n        p += use_len;\n    }\n\n    return( 0 );\n}\n\nint mbedtls_gcm_update( mbedtls_gcm_context *ctx,\n                size_t length,\n                const unsigned char *input,\n                unsigned char *output )\n{\n    int ret;\n    unsigned char ectr[16];\n    size_t i;\n    const unsigned char *p;\n    unsigned char *out_p = output;\n    size_t use_len, olen = 0;\n\n    if( output > input && (size_t) ( output - input ) < length )\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n\n    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes\n     * Also check for possible overflow */\n    if( ctx->len + length < ctx->len ||\n        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )\n    {\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n    }\n\n    ctx->len += length;\n\n    p = input;\n    while( length > 0 )\n    {\n        use_len = ( length < 16 ) ? length : 16;\n\n        for( i = 16; i > 12; i-- )\n            if( ++ctx->y[i - 1] != 0 )\n                break;\n\n        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,\n                                   &olen ) ) != 0 )\n        {\n            return( ret );\n        }\n\n        for( i = 0; i < use_len; i++ )\n        {\n            if( ctx->mode == MBEDTLS_GCM_DECRYPT )\n                ctx->buf[i] ^= p[i];\n            out_p[i] = ectr[i] ^ p[i];\n            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )\n                ctx->buf[i] ^= out_p[i];\n        }\n\n        gcm_mult( ctx, ctx->buf, ctx->buf );\n\n        length -= use_len;\n        p += use_len;\n        out_p += use_len;\n    }\n\n    return( 0 );\n}\n\nint mbedtls_gcm_finish( mbedtls_gcm_context *ctx,\n                unsigned char *tag,\n                size_t tag_len )\n{\n    unsigned char work_buf[16];\n    size_t i;\n    uint64_t orig_len = ctx->len * 8;\n    uint64_t orig_add_len = ctx->add_len * 8;\n\n    if( tag_len > 16 || tag_len < 4 )\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n\n    memcpy( tag, ctx->base_ectr, tag_len );\n\n    if( orig_len || orig_add_len )\n    {\n        memset( work_buf, 0x00, 16 );\n\n        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );\n        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );\n        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );\n        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );\n\n        for( i = 0; i < 16; i++ )\n            ctx->buf[i] ^= work_buf[i];\n\n        gcm_mult( ctx, ctx->buf, ctx->buf );\n\n        for( i = 0; i < tag_len; i++ )\n            tag[i] ^= ctx->buf[i];\n    }\n\n    return( 0 );\n}\n\nint mbedtls_gcm_crypt_and_tag( mbedtls_gcm_context *ctx,\n                       int mode,\n                       size_t length,\n                       const unsigned char *iv,\n                       size_t iv_len,\n                       const unsigned char *add,\n                       size_t add_len,\n                       const unsigned char *input,\n                       unsigned char *output,\n                       size_t tag_len,\n                       unsigned char *tag )\n{\n    int ret;\n\n    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\nint mbedtls_gcm_auth_decrypt( mbedtls_gcm_context *ctx,\n                      size_t length,\n                      const unsigned char *iv,\n                      size_t iv_len,\n                      const unsigned char *add,\n                      size_t add_len,\n                      const unsigned char *tag,\n                      size_t tag_len,\n                      const unsigned char *input,\n                      unsigned char *output )\n{\n    int ret;\n    unsigned char check_tag[16];\n    size_t i;\n    int diff;\n\n    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,\n                                   iv, iv_len, add, add_len,\n                                   input, output, tag_len, check_tag ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    /* Check tag in \"constant-time\" */\n    for( diff = 0, i = 0; i < tag_len; i++ )\n        diff |= tag[i] ^ check_tag[i];\n\n    if( diff != 0 )\n    {\n        mbedtls_platform_zeroize( output, length );\n        return( MBEDTLS_ERR_GCM_AUTH_FAILED );\n    }\n\n    return( 0 );\n}\n\nvoid mbedtls_gcm_free( mbedtls_gcm_context *ctx )\n{\n    mbedtls_cipher_free( &ctx->cipher_ctx );\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );\n}\n\n#endif /* !MBEDTLS_GCM_ALT */\n\n#if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)\n/*\n * AES-GCM test vectors from:\n *\n * http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmtestvectors.zip\n */\n#define MAX_TESTS   6\n\nstatic const int key_index[MAX_TESTS] =\n    { 0, 0, 1, 1, 1, 1 };\n\nstatic const unsigned char key[MAX_TESTS][32] =\n{\n    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n    { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,\n      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,\n      0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,\n      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 },\n};\n\nstatic const size_t iv_len[MAX_TESTS] =\n    { 12, 12, 12, 12, 8, 60 };\n\nstatic const int iv_index[MAX_TESTS] =\n    { 0, 0, 1, 1, 1, 2 };\n\nstatic const unsigned char iv[MAX_TESTS][64] =\n{\n    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00 },\n    { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,\n      0xde, 0xca, 0xf8, 0x88 },\n    { 0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,\n      0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,\n      0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,\n      0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,\n      0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,\n      0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,\n      0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,\n      0xa6, 0x37, 0xb3, 0x9b },\n};\n\nstatic const size_t add_len[MAX_TESTS] =\n    { 0, 0, 0, 20, 20, 20 };\n\nstatic const int add_index[MAX_TESTS] =\n    { 0, 0, 0, 1, 1, 1 };\n\nstatic const unsigned char additional[MAX_TESTS][64] =\n{\n    { 0x00 },\n    { 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,\n      0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,\n      0xab, 0xad, 0xda, 0xd2 },\n};\n\nstatic const size_t pt_len[MAX_TESTS] =\n    { 0, 16, 64, 60, 60, 60 };\n\nstatic const int pt_index[MAX_TESTS] =\n    { 0, 0, 1, 1, 1, 1 };\n\nstatic const unsigned char pt[MAX_TESTS][64] =\n{\n    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n    { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,\n      0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,\n      0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,\n      0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,\n      0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,\n      0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,\n      0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,\n      0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 },\n};\n\nstatic const unsigned char ct[MAX_TESTS * 3][64] =\n{\n    { 0x00 },\n    { 0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,\n      0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78 },\n    { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,\n      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,\n      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,\n      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,\n      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,\n      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,\n      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,\n      0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85 },\n    { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,\n      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,\n      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,\n      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,\n      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,\n      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,\n      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,\n      0x3d, 0x58, 0xe0, 0x91 },\n    { 0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,\n      0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,\n      0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,\n      0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,\n      0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,\n      0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,\n      0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,\n      0xc2, 0x3f, 0x45, 0x98 },\n    { 0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,\n      0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,\n      0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,\n      0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,\n      0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,\n      0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,\n      0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,\n      0x4c, 0x34, 0xae, 0xe5 },\n    { 0x00 },\n    { 0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,\n      0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00 },\n    { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,\n      0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,\n      0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,\n      0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,\n      0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,\n      0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,\n      0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,\n      0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 },\n    { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,\n      0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,\n      0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,\n      0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,\n      0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,\n      0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,\n      0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,\n      0xcc, 0xda, 0x27, 0x10 },\n    { 0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,\n      0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,\n      0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,\n      0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,\n      0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,\n      0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,\n      0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,\n      0xa0, 0xf0, 0x62, 0xf7 },\n    { 0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,\n      0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,\n      0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,\n      0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,\n      0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,\n      0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,\n      0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,\n      0xe9, 0xb7, 0x37, 0x3b },\n    { 0x00 },\n    { 0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,\n      0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18 },\n    { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,\n      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,\n      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,\n      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,\n      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,\n      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,\n      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,\n      0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad },\n    { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,\n      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,\n      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,\n      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,\n      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,\n      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,\n      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,\n      0xbc, 0xc9, 0xf6, 0x62 },\n    { 0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,\n      0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,\n      0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,\n      0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,\n      0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,\n      0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,\n      0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,\n      0xf4, 0x7c, 0x9b, 0x1f },\n    { 0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,\n      0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,\n      0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,\n      0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,\n      0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,\n      0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,\n      0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,\n      0x44, 0xae, 0x7e, 0x3f },\n};\n\nstatic const unsigned char tag[MAX_TESTS * 3][16] =\n{\n    { 0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,\n      0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a },\n    { 0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,\n      0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf },\n    { 0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,\n      0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4 },\n    { 0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,\n      0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47 },\n    { 0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,\n      0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb },\n    { 0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,\n      0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50 },\n    { 0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,\n      0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35 },\n    { 0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,\n      0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb },\n    { 0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,\n      0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14 },\n    { 0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,\n      0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c },\n    { 0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,\n      0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8 },\n    { 0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,\n      0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9 },\n    { 0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,\n      0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b },\n    { 0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,\n      0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19 },\n    { 0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,\n      0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c },\n    { 0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,\n      0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b },\n    { 0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,\n      0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2 },\n    { 0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,\n      0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a },\n};\n\nint mbedtls_gcm_self_test( int verbose )\n{\n    mbedtls_gcm_context ctx;\n    unsigned char buf[64];\n    unsigned char tag_buf[16];\n    int i, j, ret;\n    mbedtls_cipher_id_t cipher = MBEDTLS_CIPHER_ID_AES;\n\n    for( j = 0; j < 3; j++ )\n    {\n        int key_len = 128 + 64 * j;\n\n        for( i = 0; i < MAX_TESTS; i++ )\n        {\n            mbedtls_gcm_init( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"  AES-GCM-%3d #%d (%s): \",\n                                key_len, i, \"enc\" );\n\n            ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],\n                                      key_len );\n            /*\n             * AES-192 is an optional feature that may be unavailable when\n             * there is an alternative underlying implementation i.e. when\n             * MBEDTLS_AES_ALT is defined.\n             */\n            if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && key_len == 192 )\n            {\n                mbedtls_printf( \"skipped\\n\" );\n                break;\n            }\n            else if( ret != 0 )\n            {\n                goto exit;\n            }\n\n            ret = mbedtls_gcm_crypt_and_tag( &ctx, MBEDTLS_GCM_ENCRYPT,\n                                        pt_len[i],\n                                        iv[iv_index[i]], iv_len[i],\n                                        additional[add_index[i]], add_len[i],\n                                        pt[pt_index[i]], buf, 16, tag_buf );\n            if( ret != 0 )\n                goto exit;\n\n            if ( memcmp( buf, ct[j * 6 + i], pt_len[i] ) != 0 ||\n                 memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )\n            {\n                ret = 1;\n                goto exit;\n            }\n\n            mbedtls_gcm_free( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"passed\\n\" );\n\n            mbedtls_gcm_init( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"  AES-GCM-%3d #%d (%s): \",\n                                key_len, i, \"dec\" );\n\n            ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],\n                                      key_len );\n            if( ret != 0 )\n                goto exit;\n\n            ret = mbedtls_gcm_crypt_and_tag( &ctx, MBEDTLS_GCM_DECRYPT,\n                                        pt_len[i],\n                                        iv[iv_index[i]], iv_len[i],\n                                        additional[add_index[i]], add_len[i],\n                                        ct[j * 6 + i], buf, 16, tag_buf );\n\n            if( ret != 0 )\n                goto exit;\n\n            if( memcmp( buf, pt[pt_index[i]], pt_len[i] ) != 0 ||\n                memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )\n            {\n                ret = 1;\n                goto exit;\n            }\n\n            mbedtls_gcm_free( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"passed\\n\" );\n\n            mbedtls_gcm_init( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"  AES-GCM-%3d #%d split (%s): \",\n                                key_len, i, \"enc\" );\n\n            ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],\n                                      key_len );\n            if( ret != 0 )\n                goto exit;\n\n            ret = mbedtls_gcm_starts( &ctx, MBEDTLS_GCM_ENCRYPT,\n                                      iv[iv_index[i]], iv_len[i],\n                                      additional[add_index[i]], add_len[i] );\n            if( ret != 0 )\n                goto exit;\n\n            if( pt_len[i] > 32 )\n            {\n                size_t rest_len = pt_len[i] - 32;\n                ret = mbedtls_gcm_update( &ctx, 32, pt[pt_index[i]], buf );\n                if( ret != 0 )\n                    goto exit;\n\n                ret = mbedtls_gcm_update( &ctx, rest_len, pt[pt_index[i]] + 32,\n                                  buf + 32 );\n                if( ret != 0 )\n                    goto exit;\n            }\n            else\n            {\n                ret = mbedtls_gcm_update( &ctx, pt_len[i], pt[pt_index[i]], buf );\n                if( ret != 0 )\n                    goto exit;\n            }\n\n            ret = mbedtls_gcm_finish( &ctx, tag_buf, 16 );\n            if( ret != 0 )\n                goto exit;\n\n            if( memcmp( buf, ct[j * 6 + i], pt_len[i] ) != 0 ||\n                memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )\n            {\n                ret = 1;\n                goto exit;\n            }\n\n            mbedtls_gcm_free( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"passed\\n\" );\n\n            mbedtls_gcm_init( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"  AES-GCM-%3d #%d split (%s): \",\n                                key_len, i, \"dec\" );\n\n            ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],\n                                      key_len );\n            if( ret != 0 )\n                goto exit;\n\n            ret = mbedtls_gcm_starts( &ctx, MBEDTLS_GCM_DECRYPT,\n                              iv[iv_index[i]], iv_len[i],\n                              additional[add_index[i]], add_len[i] );\n            if( ret != 0 )\n                goto exit;\n\n            if( pt_len[i] > 32 )\n            {\n                size_t rest_len = pt_len[i] - 32;\n                ret = mbedtls_gcm_update( &ctx, 32, ct[j * 6 + i], buf );\n                if( ret != 0 )\n                    goto exit;\n\n                ret = mbedtls_gcm_update( &ctx, rest_len, ct[j * 6 + i] + 32,\n                                          buf + 32 );\n                if( ret != 0 )\n                    goto exit;\n            }\n            else\n            {\n                ret = mbedtls_gcm_update( &ctx, pt_len[i], ct[j * 6 + i],\n                                          buf );\n                if( ret != 0 )\n                    goto exit;\n            }\n\n            ret = mbedtls_gcm_finish( &ctx, tag_buf, 16 );\n            if( ret != 0 )\n                goto exit;\n\n            if( memcmp( buf, pt[pt_index[i]], pt_len[i] ) != 0 ||\n                memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )\n            {\n                ret = 1;\n                goto exit;\n            }\n\n            mbedtls_gcm_free( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"passed\\n\" );\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    ret = 0;\n\nexit:\n    if( ret != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n        mbedtls_gcm_free( &ctx );\n    }\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */\n\n#endif /* MBEDTLS_GCM_C */\n","/*\n *  HMAC_DRBG implementation (NIST SP 800-90)\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n *  The NIST SP 800-90A DRBGs are described in the following publication.\n *  http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf\n *  References below are based on rev. 1 (January 2012).\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_HMAC_DRBG_C)\n\n#include \"mbedtls/hmac_drbg.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_FS_IO)\n#include <stdio.h>\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_SELF_TEST */\n#endif /* MBEDTLS_PLATFORM_C */\n\n/*\n * HMAC_DRBG context initialization\n */\nvoid mbedtls_hmac_drbg_init( mbedtls_hmac_drbg_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_init( &ctx->mutex );\n#endif\n}\n\n/*\n * HMAC_DRBG update, using optional additional data (10.1.2.2)\n */\nvoid mbedtls_hmac_drbg_update( mbedtls_hmac_drbg_context *ctx,\n                       const unsigned char *additional, size_t add_len )\n{\n    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );\n    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;\n    unsigned char sep[1];\n    unsigned char K[MBEDTLS_MD_MAX_SIZE];\n\n    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )\n    {\n        /* Step 1 or 4 */\n        mbedtls_md_hmac_reset( &ctx->md_ctx );\n        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );\n        mbedtls_md_hmac_update( &ctx->md_ctx, sep, 1 );\n        if( rounds == 2 )\n            mbedtls_md_hmac_update( &ctx->md_ctx, additional, add_len );\n        mbedtls_md_hmac_finish( &ctx->md_ctx, K );\n\n        /* Step 2 or 5 */\n        mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len );\n        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );\n        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );\n    }\n}\n\n/*\n * Simplified HMAC_DRBG initialisation (for use with deterministic ECDSA)\n */\nint mbedtls_hmac_drbg_seed_buf( mbedtls_hmac_drbg_context *ctx,\n                        const mbedtls_md_info_t * md_info,\n                        const unsigned char *data, size_t data_len )\n{\n    int ret;\n\n    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )\n        return( ret );\n\n    /*\n     * Set initial working state.\n     * Use the V memory location, which is currently all 0, to initialize the\n     * MD context with an all-zero key. Then set V to its initial value.\n     */\n    mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, mbedtls_md_get_size( md_info ) );\n    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );\n\n    mbedtls_hmac_drbg_update( ctx, data, data_len );\n\n    return( 0 );\n}\n\n/*\n * HMAC_DRBG reseeding: 10.1.2.4 (arabic) + 9.2 (Roman)\n */\nint mbedtls_hmac_drbg_reseed( mbedtls_hmac_drbg_context *ctx,\n                      const unsigned char *additional, size_t len )\n{\n    unsigned char seed[MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT];\n    size_t seedlen;\n\n    /* III. Check input length */\n    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||\n        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )\n    {\n        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );\n    }\n\n    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );\n\n    /* IV. Gather entropy_len bytes of entropy for the seed */\n    if( ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) != 0 )\n        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );\n\n    seedlen = ctx->entropy_len;\n\n    /* 1. Concatenate entropy and additional data if any */\n    if( additional != NULL && len != 0 )\n    {\n        memcpy( seed + seedlen, additional, len );\n        seedlen += len;\n    }\n\n    /* 2. Update state */\n    mbedtls_hmac_drbg_update( ctx, seed, seedlen );\n\n    /* 3. Reset reseed_counter */\n    ctx->reseed_counter = 1;\n\n    /* 4. Done */\n    return( 0 );\n}\n\n/*\n * HMAC_DRBG initialisation (10.1.2.3 + 9.1)\n */\nint mbedtls_hmac_drbg_seed( mbedtls_hmac_drbg_context *ctx,\n                    const mbedtls_md_info_t * md_info,\n                    int (*f_entropy)(void *, unsigned char *, size_t),\n                    void *p_entropy,\n                    const unsigned char *custom,\n                    size_t len )\n{\n    int ret;\n    size_t entropy_len, md_size;\n\n    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )\n        return( ret );\n\n    md_size = mbedtls_md_get_size( md_info );\n\n    /*\n     * Set initial working state.\n     * Use the V memory location, which is currently all 0, to initialize the\n     * MD context with an all-zero key. Then set V to its initial value.\n     */\n    mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, md_size );\n    memset( ctx->V, 0x01, md_size );\n\n    ctx->f_entropy = f_entropy;\n    ctx->p_entropy = p_entropy;\n\n    ctx->reseed_interval = MBEDTLS_HMAC_DRBG_RESEED_INTERVAL;\n\n    /*\n     * See SP800-57 5.6.1 (p. 65-66) for the security strength provided by\n     * each hash function, then according to SP800-90A rev1 10.1 table 2,\n     * min_entropy_len (in bits) is security_strength.\n     *\n     * (This also matches the sizes used in the NIST test vectors.)\n     */\n    entropy_len = md_size <= 20 ? 16 : /* 160-bits hash -> 128 bits */\n                  md_size <= 28 ? 24 : /* 224-bits hash -> 192 bits */\n                                  32;  /* better (256+) -> 256 bits */\n\n    /*\n     * For initialisation, use more entropy to emulate a nonce\n     * (Again, matches test vectors.)\n     */\n    ctx->entropy_len = entropy_len * 3 / 2;\n\n    if( ( ret = mbedtls_hmac_drbg_reseed( ctx, custom, len ) ) != 0 )\n        return( ret );\n\n    ctx->entropy_len = entropy_len;\n\n    return( 0 );\n}\n\n/*\n * Set prediction resistance\n */\nvoid mbedtls_hmac_drbg_set_prediction_resistance( mbedtls_hmac_drbg_context *ctx,\n                                          int resistance )\n{\n    ctx->prediction_resistance = resistance;\n}\n\n/*\n * Set entropy length grabbed for reseeds\n */\nvoid mbedtls_hmac_drbg_set_entropy_len( mbedtls_hmac_drbg_context *ctx, size_t len )\n{\n    ctx->entropy_len = len;\n}\n\n/*\n * Set reseed interval\n */\nvoid mbedtls_hmac_drbg_set_reseed_interval( mbedtls_hmac_drbg_context *ctx, int interval )\n{\n    ctx->reseed_interval = interval;\n}\n\n/*\n * HMAC_DRBG random function with optional additional data:\n * 10.1.2.5 (arabic) + 9.3 (Roman)\n */\nint mbedtls_hmac_drbg_random_with_add( void *p_rng,\n                               unsigned char *output, size_t out_len,\n                               const unsigned char *additional, size_t add_len )\n{\n    int ret;\n    mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;\n    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );\n    size_t left = out_len;\n    unsigned char *out = output;\n\n    /* II. Check request length */\n    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )\n        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );\n\n    /* III. Check input length */\n    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )\n        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );\n\n    /* 1. (aka VII and IX) Check reseed counter and PR */\n    if( ctx->f_entropy != NULL && /* For no-reseeding instances */\n        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||\n          ctx->reseed_counter > ctx->reseed_interval ) )\n    {\n        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )\n            return( ret );\n\n        add_len = 0; /* VII.4 */\n    }\n\n    /* 2. Use additional data if any */\n    if( additional != NULL && add_len != 0 )\n        mbedtls_hmac_drbg_update( ctx, additional, add_len );\n\n    /* 3, 4, 5. Generate bytes */\n    while( left != 0 )\n    {\n        size_t use_len = left > md_len ? md_len : left;\n\n        mbedtls_md_hmac_reset( &ctx->md_ctx );\n        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );\n        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );\n\n        memcpy( out, ctx->V, use_len );\n        out += use_len;\n        left -= use_len;\n    }\n\n    /* 6. Update */\n    mbedtls_hmac_drbg_update( ctx, additional, add_len );\n\n    /* 7. Update reseed counter */\n    ctx->reseed_counter++;\n\n    /* 8. Done */\n    return( 0 );\n}\n\n/*\n * HMAC_DRBG random function\n */\nint mbedtls_hmac_drbg_random( void *p_rng, unsigned char *output, size_t out_len )\n{\n    int ret;\n    mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n/*\n * Free an HMAC_DRBG context\n */\nvoid mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_free( &ctx->mutex );\n#endif\n    mbedtls_md_free( &ctx->md_ctx );\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );\n}\n\n#if defined(MBEDTLS_FS_IO)\nint mbedtls_hmac_drbg_write_seed_file( mbedtls_hmac_drbg_context *ctx, const char *path )\n{\n    int ret;\n    FILE *f;\n    unsigned char buf[ MBEDTLS_HMAC_DRBG_MAX_INPUT ];\n\n    if( ( f = fopen( path, \"wb\" ) ) == NULL )\n        return( MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR );\n\n    if( ( ret = mbedtls_hmac_drbg_random( ctx, buf, sizeof( buf ) ) ) != 0 )\n        goto exit;\n\n    if( fwrite( buf, 1, sizeof( buf ), f ) != sizeof( buf ) )\n    {\n        ret = MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR;\n        goto exit;\n    }\n\n    ret = 0;\n\nexit:\n    fclose( f );\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n    return( ret );\n}\n\nint mbedtls_hmac_drbg_update_seed_file( mbedtls_hmac_drbg_context *ctx, const char *path )\n{\n    int ret = 0;\n    FILE *f;\n    size_t n;\n    unsigned char buf[ MBEDTLS_HMAC_DRBG_MAX_INPUT ];\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR );\n\n    fseek( f, 0, SEEK_END );\n    n = (size_t) ftell( f );\n    fseek( f, 0, SEEK_SET );\n\n    if( n > MBEDTLS_HMAC_DRBG_MAX_INPUT )\n    {\n        fclose( f );\n        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );\n    }\n\n    if( fread( buf, 1, n, f ) != n )\n        ret = MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR;\n    else\n        mbedtls_hmac_drbg_update( ctx, buf, n );\n\n    fclose( f );\n\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_hmac_drbg_write_seed_file( ctx, path ) );\n}\n#endif /* MBEDTLS_FS_IO */\n\n\n#if defined(MBEDTLS_SELF_TEST)\n\n#if !defined(MBEDTLS_SHA1_C)\n/* Dummy checkup routine */\nint mbedtls_hmac_drbg_self_test( int verbose )\n{\n    (void) verbose;\n    return( 0 );\n}\n#else\n\n#define OUTPUT_LEN  80\n\n/* From a NIST PR=true test vector */\nstatic const unsigned char entropy_pr[] = {\n    0xa0, 0xc9, 0xab, 0x58, 0xf1, 0xe2, 0xe5, 0xa4, 0xde, 0x3e, 0xbd, 0x4f,\n    0xf7, 0x3e, 0x9c, 0x5b, 0x64, 0xef, 0xd8, 0xca, 0x02, 0x8c, 0xf8, 0x11,\n    0x48, 0xa5, 0x84, 0xfe, 0x69, 0xab, 0x5a, 0xee, 0x42, 0xaa, 0x4d, 0x42,\n    0x17, 0x60, 0x99, 0xd4, 0x5e, 0x13, 0x97, 0xdc, 0x40, 0x4d, 0x86, 0xa3,\n    0x7b, 0xf5, 0x59, 0x54, 0x75, 0x69, 0x51, 0xe4 };\nstatic const unsigned char result_pr[OUTPUT_LEN] = {\n    0x9a, 0x00, 0xa2, 0xd0, 0x0e, 0xd5, 0x9b, 0xfe, 0x31, 0xec, 0xb1, 0x39,\n    0x9b, 0x60, 0x81, 0x48, 0xd1, 0x96, 0x9d, 0x25, 0x0d, 0x3c, 0x1e, 0x94,\n    0x10, 0x10, 0x98, 0x12, 0x93, 0x25, 0xca, 0xb8, 0xfc, 0xcc, 0x2d, 0x54,\n    0x73, 0x19, 0x70, 0xc0, 0x10, 0x7a, 0xa4, 0x89, 0x25, 0x19, 0x95, 0x5e,\n    0x4b, 0xc6, 0x00, 0x1d, 0x7f, 0x4e, 0x6a, 0x2b, 0xf8, 0xa3, 0x01, 0xab,\n    0x46, 0x05, 0x5c, 0x09, 0xa6, 0x71, 0x88, 0xf1, 0xa7, 0x40, 0xee, 0xf3,\n    0xe1, 0x5c, 0x02, 0x9b, 0x44, 0xaf, 0x03, 0x44 };\n\n/* From a NIST PR=false test vector */\nstatic const unsigned char entropy_nopr[] = {\n    0x79, 0x34, 0x9b, 0xbf, 0x7c, 0xdd, 0xa5, 0x79, 0x95, 0x57, 0x86, 0x66,\n    0x21, 0xc9, 0x13, 0x83, 0x11, 0x46, 0x73, 0x3a, 0xbf, 0x8c, 0x35, 0xc8,\n    0xc7, 0x21, 0x5b, 0x5b, 0x96, 0xc4, 0x8e, 0x9b, 0x33, 0x8c, 0x74, 0xe3,\n    0xe9, 0x9d, 0xfe, 0xdf };\nstatic const unsigned char result_nopr[OUTPUT_LEN] = {\n    0xc6, 0xa1, 0x6a, 0xb8, 0xd4, 0x20, 0x70, 0x6f, 0x0f, 0x34, 0xab, 0x7f,\n    0xec, 0x5a, 0xdc, 0xa9, 0xd8, 0xca, 0x3a, 0x13, 0x3e, 0x15, 0x9c, 0xa6,\n    0xac, 0x43, 0xc6, 0xf8, 0xa2, 0xbe, 0x22, 0x83, 0x4a, 0x4c, 0x0a, 0x0a,\n    0xff, 0xb1, 0x0d, 0x71, 0x94, 0xf1, 0xc1, 0xa5, 0xcf, 0x73, 0x22, 0xec,\n    0x1a, 0xe0, 0x96, 0x4e, 0xd4, 0xbf, 0x12, 0x27, 0x46, 0xe0, 0x87, 0xfd,\n    0xb5, 0xb3, 0xe9, 0x1b, 0x34, 0x93, 0xd5, 0xbb, 0x98, 0xfa, 0xed, 0x49,\n    0xe8, 0x5f, 0x13, 0x0f, 0xc8, 0xa4, 0x59, 0xb7 };\n\n/* \"Entropy\" from buffer */\nstatic size_t test_offset;\nstatic int hmac_drbg_self_test_entropy( void *data,\n                                        unsigned char *buf, size_t len )\n{\n    const unsigned char *p = data;\n    memcpy( buf, p + test_offset, len );\n    test_offset += len;\n    return( 0 );\n}\n\n#define CHK( c )    if( (c) != 0 )                          \\\n                    {                                       \\\n                        if( verbose != 0 )                  \\\n                            mbedtls_printf( \"failed\\n\" );  \\\n                        return( 1 );                        \\\n                    }\n\n/*\n * Checkup routine for HMAC_DRBG with SHA-1\n */\nint mbedtls_hmac_drbg_self_test( int verbose )\n{\n    mbedtls_hmac_drbg_context ctx;\n    unsigned char buf[OUTPUT_LEN];\n    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );\n\n    mbedtls_hmac_drbg_init( &ctx );\n\n    /*\n     * PR = True\n     */\n    if( verbose != 0 )\n        mbedtls_printf( \"  HMAC_DRBG (PR = True) : \" );\n\n    test_offset = 0;\n    CHK( mbedtls_hmac_drbg_seed( &ctx, md_info,\n                         hmac_drbg_self_test_entropy, (void *) entropy_pr,\n                         NULL, 0 ) );\n    mbedtls_hmac_drbg_set_prediction_resistance( &ctx, MBEDTLS_HMAC_DRBG_PR_ON );\n    CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );\n    CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );\n    CHK( memcmp( buf, result_pr, OUTPUT_LEN ) );\n    mbedtls_hmac_drbg_free( &ctx );\n\n    mbedtls_hmac_drbg_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    /*\n     * PR = False\n     */\n    if( verbose != 0 )\n        mbedtls_printf( \"  HMAC_DRBG (PR = False) : \" );\n\n    mbedtls_hmac_drbg_init( &ctx );\n\n    test_offset = 0;\n    CHK( mbedtls_hmac_drbg_seed( &ctx, md_info,\n                         hmac_drbg_self_test_entropy, (void *) entropy_nopr,\n                         NULL, 0 ) );\n    CHK( mbedtls_hmac_drbg_reseed( &ctx, NULL, 0 ) );\n    CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );\n    CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );\n    CHK( memcmp( buf, result_nopr, OUTPUT_LEN ) );\n    mbedtls_hmac_drbg_free( &ctx );\n\n    mbedtls_hmac_drbg_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_HMAC_DRBG_C */\n","/**\n * \\file mbedtls_md.c\n *\n * \\brief Generic message digest wrapper for mbed TLS\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_MD_C)\n\n#include \"mbedtls/md.h\"\n#include \"mbedtls/md_internal.h\"\n#include \"mbedtls/platform_util.h\"\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#include <string.h>\n\n#if defined(MBEDTLS_FS_IO)\n#include <stdio.h>\n#endif\n\n/*\n * Reminder: update profiles in x509_crt.c when adding a new hash!\n */\nstatic const int supported_digests[] = {\n\n#if defined(MBEDTLS_SHA512_C)\n        MBEDTLS_MD_SHA512,\n        MBEDTLS_MD_SHA384,\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n        MBEDTLS_MD_SHA256,\n        MBEDTLS_MD_SHA224,\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n        MBEDTLS_MD_SHA1,\n#endif\n\n#if defined(MBEDTLS_RIPEMD160_C)\n        MBEDTLS_MD_RIPEMD160,\n#endif\n\n#if defined(MBEDTLS_MD5_C)\n        MBEDTLS_MD_MD5,\n#endif\n\n#if defined(MBEDTLS_MD4_C)\n        MBEDTLS_MD_MD4,\n#endif\n\n#if defined(MBEDTLS_MD2_C)\n        MBEDTLS_MD_MD2,\n#endif\n\n        MBEDTLS_MD_NONE\n};\n\nconst int *mbedtls_md_list( void )\n{\n    return( supported_digests );\n}\n\nconst mbedtls_md_info_t *mbedtls_md_info_from_string( const char *md_name )\n{\n    if( NULL == md_name )\n        return( NULL );\n\n    /* Get the appropriate digest information */\n#if defined(MBEDTLS_MD2_C)\n    if( !strcmp( \"MD2\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_MD2 );\n#endif\n#if defined(MBEDTLS_MD4_C)\n    if( !strcmp( \"MD4\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_MD4 );\n#endif\n#if defined(MBEDTLS_MD5_C)\n    if( !strcmp( \"MD5\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_MD5 );\n#endif\n#if defined(MBEDTLS_RIPEMD160_C)\n    if( !strcmp( \"RIPEMD160\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_RIPEMD160 );\n#endif\n#if defined(MBEDTLS_SHA1_C)\n    if( !strcmp( \"SHA1\", md_name ) || !strcmp( \"SHA\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );\n#endif\n#if defined(MBEDTLS_SHA256_C)\n    if( !strcmp( \"SHA224\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA224 );\n    if( !strcmp( \"SHA256\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA256 );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n    if( !strcmp( \"SHA384\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA384 );\n    if( !strcmp( \"SHA512\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA512 );\n#endif\n    return( NULL );\n}\n\nconst mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )\n{\n    switch( md_type )\n    {\n#if defined(MBEDTLS_MD2_C)\n        case MBEDTLS_MD_MD2:\n            return( &mbedtls_md2_info );\n#endif\n#if defined(MBEDTLS_MD4_C)\n        case MBEDTLS_MD_MD4:\n            return( &mbedtls_md4_info );\n#endif\n#if defined(MBEDTLS_MD5_C)\n        case MBEDTLS_MD_MD5:\n            return( &mbedtls_md5_info );\n#endif\n#if defined(MBEDTLS_RIPEMD160_C)\n        case MBEDTLS_MD_RIPEMD160:\n            return( &mbedtls_ripemd160_info );\n#endif\n#if defined(MBEDTLS_SHA1_C)\n        case MBEDTLS_MD_SHA1:\n            return( &mbedtls_sha1_info );\n#endif\n#if defined(MBEDTLS_SHA256_C)\n        case MBEDTLS_MD_SHA224:\n            return( &mbedtls_sha224_info );\n        case MBEDTLS_MD_SHA256:\n            return( &mbedtls_sha256_info );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n        case MBEDTLS_MD_SHA384:\n            return( &mbedtls_sha384_info );\n        case MBEDTLS_MD_SHA512:\n            return( &mbedtls_sha512_info );\n#endif\n        default:\n            return( NULL );\n    }\n}\n\nvoid mbedtls_md_init( mbedtls_md_context_t *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );\n}\n\nvoid mbedtls_md_free( mbedtls_md_context_t *ctx )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return;\n\n    if( ctx->md_ctx != NULL )\n        ctx->md_info->ctx_free_func( ctx->md_ctx );\n\n    if( ctx->hmac_ctx != NULL )\n    {\n        mbedtls_platform_zeroize( ctx->hmac_ctx,\n                                  2 * ctx->md_info->block_size );\n        mbedtls_free( ctx->hmac_ctx );\n    }\n\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );\n}\n\nint mbedtls_md_clone( mbedtls_md_context_t *dst,\n                      const mbedtls_md_context_t *src )\n{\n    if( dst == NULL || dst->md_info == NULL ||\n        src == NULL || src->md_info == NULL ||\n        dst->md_info != src->md_info )\n    {\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n    }\n\n    dst->md_info->clone_func( dst->md_ctx, src->md_ctx );\n\n    return( 0 );\n}\n\n#if ! defined(MBEDTLS_DEPRECATED_REMOVED)\nint mbedtls_md_init_ctx( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info )\n{\n    return mbedtls_md_setup( ctx, md_info, 1 );\n}\n#endif\n\nint mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )\n{\n    if( md_info == NULL || ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )\n        return( MBEDTLS_ERR_MD_ALLOC_FAILED );\n\n    if( hmac != 0 )\n    {\n        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );\n        if( ctx->hmac_ctx == NULL )\n        {\n            md_info->ctx_free_func( ctx->md_ctx );\n            return( MBEDTLS_ERR_MD_ALLOC_FAILED );\n        }\n    }\n\n    ctx->md_info = md_info;\n\n    return( 0 );\n}\n\nint mbedtls_md_starts( mbedtls_md_context_t *ctx )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->starts_func( ctx->md_ctx ) );\n}\n\nint mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );\n}\n\nint mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );\n}\n\nint mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,\n            unsigned char *output )\n{\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( md_info->digest_func( input, ilen, output ) );\n}\n\n#if defined(MBEDTLS_FS_IO)\nint mbedtls_md_file( const mbedtls_md_info_t *md_info, const char *path, unsigned char *output )\n{\n    int ret;\n    FILE *f;\n    size_t n;\n    mbedtls_md_context_t ctx;\n    unsigned char buf[1024];\n\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_MD_FILE_IO_ERROR );\n\n    mbedtls_md_init( &ctx );\n\n    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )\n        goto cleanup;\n\n    if( ( ret = md_info->starts_func( ctx.md_ctx ) ) != 0 )\n        goto cleanup;\n\n    while( ( n = fread( buf, 1, sizeof( buf ), f ) ) > 0 )\n        if( ( ret = md_info->update_func( ctx.md_ctx, buf, n ) ) != 0 )\n            goto cleanup;\n\n    if( ferror( f ) != 0 )\n        ret = MBEDTLS_ERR_MD_FILE_IO_ERROR;\n    else\n        ret = md_info->finish_func( ctx.md_ctx, output );\n\ncleanup:\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n    fclose( f );\n    mbedtls_md_free( &ctx );\n\n    return( ret );\n}\n#endif /* MBEDTLS_FS_IO */\n\nint mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )\n{\n    int ret;\n    unsigned char sum[MBEDTLS_MD_MAX_SIZE];\n    unsigned char *ipad, *opad;\n    size_t i;\n\n    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    if( keylen > (size_t) ctx->md_info->block_size )\n    {\n        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )\n            goto cleanup;\n        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )\n            goto cleanup;\n        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )\n            goto cleanup;\n\n        keylen = ctx->md_info->size;\n        key = sum;\n    }\n\n    ipad = (unsigned char *) ctx->hmac_ctx;\n    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;\n\n    memset( ipad, 0x36, ctx->md_info->block_size );\n    memset( opad, 0x5C, ctx->md_info->block_size );\n\n    for( i = 0; i < keylen; i++ )\n    {\n        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );\n        opad[i] = (unsigned char)( opad[i] ^ key[i] );\n    }\n\n    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )\n        goto cleanup;\n    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,\n                                           ctx->md_info->block_size ) ) != 0 )\n        goto cleanup;\n\ncleanup:\n    mbedtls_platform_zeroize( sum, sizeof( sum ) );\n\n    return( ret );\n}\n\nint mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )\n{\n    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );\n}\n\nint mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )\n{\n    int ret;\n    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];\n    unsigned char *opad;\n\n    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;\n\n    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )\n        return( ret );\n    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )\n        return( ret );\n    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,\n                                           ctx->md_info->block_size ) ) != 0 )\n        return( ret );\n    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,\n                                           ctx->md_info->size ) ) != 0 )\n        return( ret );\n    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );\n}\n\nint mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )\n{\n    int ret;\n    unsigned char *ipad;\n\n    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    ipad = (unsigned char *) ctx->hmac_ctx;\n\n    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )\n        return( ret );\n    return( ctx->md_info->update_func( ctx->md_ctx, ipad,\n                                       ctx->md_info->block_size ) );\n}\n\nint mbedtls_md_hmac( const mbedtls_md_info_t *md_info,\n                     const unsigned char *key, size_t keylen,\n                     const unsigned char *input, size_t ilen,\n                     unsigned char *output )\n{\n    mbedtls_md_context_t ctx;\n    int ret;\n\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    mbedtls_md_init( &ctx );\n\n    if( ( ret = mbedtls_md_setup( &ctx, md_info, 1 ) ) != 0 )\n        goto cleanup;\n\n    if( ( ret = mbedtls_md_hmac_starts( &ctx, key, keylen ) ) != 0 )\n        goto cleanup;\n    if( ( ret = mbedtls_md_hmac_update( &ctx, input, ilen ) ) != 0 )\n        goto cleanup;\n    if( ( ret = mbedtls_md_hmac_finish( &ctx, output ) ) != 0 )\n        goto cleanup;\n\ncleanup:\n    mbedtls_md_free( &ctx );\n\n    return( ret );\n}\n\nint mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->process_func( ctx->md_ctx, data ) );\n}\n\nunsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )\n{\n    if( md_info == NULL )\n        return( 0 );\n\n    return md_info->size;\n}\n\nmbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info )\n{\n    if( md_info == NULL )\n        return( MBEDTLS_MD_NONE );\n\n    return md_info->type;\n}\n\nconst char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )\n{\n    if( md_info == NULL )\n        return( NULL );\n\n    return md_info->name;\n}\n\n#endif /* MBEDTLS_MD_C */\n","/**\n * \\file md_wrap.c\n *\n * \\brief Generic message digest wrapper for mbed TLS\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_MD_C)\n\n#include \"mbedtls/md_internal.h\"\n\n#if defined(MBEDTLS_MD2_C)\n#include \"mbedtls/md2.h\"\n#endif\n\n#if defined(MBEDTLS_MD4_C)\n#include \"mbedtls/md4.h\"\n#endif\n\n#if defined(MBEDTLS_MD5_C)\n#include \"mbedtls/md5.h\"\n#endif\n\n#if defined(MBEDTLS_RIPEMD160_C)\n#include \"mbedtls/ripemd160.h\"\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n#include \"mbedtls/sha1.h\"\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n#include \"mbedtls/sha256.h\"\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n#include \"mbedtls/sha512.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#if defined(MBEDTLS_MD2_C)\n\nstatic int md2_starts_wrap( void *ctx )\n{\n    return( mbedtls_md2_starts_ret( (mbedtls_md2_context *) ctx ) );\n}\n\nstatic int md2_update_wrap( void *ctx, const unsigned char *input,\n                             size_t ilen )\n{\n    return( mbedtls_md2_update_ret( (mbedtls_md2_context *) ctx, input, ilen ) );\n}\n\nstatic int md2_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_md2_finish_ret( (mbedtls_md2_context *) ctx, output ) );\n}\n\nstatic void *md2_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md2_context ) );\n\n    if( ctx != NULL )\n        mbedtls_md2_init( (mbedtls_md2_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void md2_ctx_free( void *ctx )\n{\n    mbedtls_md2_free( (mbedtls_md2_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void md2_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_md2_clone( (mbedtls_md2_context *) dst,\n                 (const mbedtls_md2_context *) src );\n}\n\nstatic int md2_process_wrap( void *ctx, const unsigned char *data )\n{\n    ((void) data);\n\n    return( mbedtls_internal_md2_process( (mbedtls_md2_context *) ctx ) );\n}\n\nconst mbedtls_md_info_t mbedtls_md2_info = {\n    MBEDTLS_MD_MD2,\n    \"MD2\",\n    16,\n    16,\n    md2_starts_wrap,\n    md2_update_wrap,\n    md2_finish_wrap,\n    mbedtls_md2_ret,\n    md2_ctx_alloc,\n    md2_ctx_free,\n    md2_clone_wrap,\n    md2_process_wrap,\n};\n\n#endif /* MBEDTLS_MD2_C */\n\n#if defined(MBEDTLS_MD4_C)\n\nstatic int md4_starts_wrap( void *ctx )\n{\n    return( mbedtls_md4_starts_ret( (mbedtls_md4_context *) ctx ) );\n}\n\nstatic int md4_update_wrap( void *ctx, const unsigned char *input,\n                             size_t ilen )\n{\n    return( mbedtls_md4_update_ret( (mbedtls_md4_context *) ctx, input, ilen ) );\n}\n\nstatic int md4_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_md4_finish_ret( (mbedtls_md4_context *) ctx, output ) );\n}\n\nstatic void *md4_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md4_context ) );\n\n    if( ctx != NULL )\n        mbedtls_md4_init( (mbedtls_md4_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void md4_ctx_free( void *ctx )\n{\n    mbedtls_md4_free( (mbedtls_md4_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void md4_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_md4_clone( (mbedtls_md4_context *) dst,\n                       (const mbedtls_md4_context *) src );\n}\n\nstatic int md4_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_md4_process( (mbedtls_md4_context *) ctx, data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_md4_info = {\n    MBEDTLS_MD_MD4,\n    \"MD4\",\n    16,\n    64,\n    md4_starts_wrap,\n    md4_update_wrap,\n    md4_finish_wrap,\n    mbedtls_md4_ret,\n    md4_ctx_alloc,\n    md4_ctx_free,\n    md4_clone_wrap,\n    md4_process_wrap,\n};\n\n#endif /* MBEDTLS_MD4_C */\n\n#if defined(MBEDTLS_MD5_C)\n\nstatic int md5_starts_wrap( void *ctx )\n{\n    return( mbedtls_md5_starts_ret( (mbedtls_md5_context *) ctx ) );\n}\n\nstatic int md5_update_wrap( void *ctx, const unsigned char *input,\n                             size_t ilen )\n{\n    return( mbedtls_md5_update_ret( (mbedtls_md5_context *) ctx, input, ilen ) );\n}\n\nstatic int md5_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_md5_finish_ret( (mbedtls_md5_context *) ctx, output ) );\n}\n\nstatic void *md5_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );\n\n    if( ctx != NULL )\n        mbedtls_md5_init( (mbedtls_md5_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void md5_ctx_free( void *ctx )\n{\n    mbedtls_md5_free( (mbedtls_md5_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void md5_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_md5_clone( (mbedtls_md5_context *) dst,\n                       (const mbedtls_md5_context *) src );\n}\n\nstatic int md5_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_md5_process( (mbedtls_md5_context *) ctx, data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_md5_info = {\n    MBEDTLS_MD_MD5,\n    \"MD5\",\n    16,\n    64,\n    md5_starts_wrap,\n    md5_update_wrap,\n    md5_finish_wrap,\n    mbedtls_md5_ret,\n    md5_ctx_alloc,\n    md5_ctx_free,\n    md5_clone_wrap,\n    md5_process_wrap,\n};\n\n#endif /* MBEDTLS_MD5_C */\n\n#if defined(MBEDTLS_RIPEMD160_C)\n\nstatic int ripemd160_starts_wrap( void *ctx )\n{\n    return( mbedtls_ripemd160_starts_ret( (mbedtls_ripemd160_context *) ctx ) );\n}\n\nstatic int ripemd160_update_wrap( void *ctx, const unsigned char *input,\n                                   size_t ilen )\n{\n    return( mbedtls_ripemd160_update_ret( (mbedtls_ripemd160_context *) ctx,\n                                          input, ilen ) );\n}\n\nstatic int ripemd160_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_ripemd160_finish_ret( (mbedtls_ripemd160_context *) ctx,\n                                          output ) );\n}\n\nstatic void *ripemd160_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ripemd160_context ) );\n\n    if( ctx != NULL )\n        mbedtls_ripemd160_init( (mbedtls_ripemd160_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void ripemd160_ctx_free( void *ctx )\n{\n    mbedtls_ripemd160_free( (mbedtls_ripemd160_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void ripemd160_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_ripemd160_clone( (mbedtls_ripemd160_context *) dst,\n                       (const mbedtls_ripemd160_context *) src );\n}\n\nstatic int ripemd160_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_ripemd160_process(\n                                (mbedtls_ripemd160_context *) ctx, data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_ripemd160_info = {\n    MBEDTLS_MD_RIPEMD160,\n    \"RIPEMD160\",\n    20,\n    64,\n    ripemd160_starts_wrap,\n    ripemd160_update_wrap,\n    ripemd160_finish_wrap,\n    mbedtls_ripemd160_ret,\n    ripemd160_ctx_alloc,\n    ripemd160_ctx_free,\n    ripemd160_clone_wrap,\n    ripemd160_process_wrap,\n};\n\n#endif /* MBEDTLS_RIPEMD160_C */\n\n#if defined(MBEDTLS_SHA1_C)\n\nstatic int sha1_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );\n}\n\nstatic int sha1_update_wrap( void *ctx, const unsigned char *input,\n                              size_t ilen )\n{\n    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,\n                                     input, ilen ) );\n}\n\nstatic int sha1_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );\n}\n\nstatic void *sha1_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );\n\n    if( ctx != NULL )\n        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void sha1_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,\n                  (const mbedtls_sha1_context *) src );\n}\n\nstatic void sha1_ctx_free( void *ctx )\n{\n    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic int sha1_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,\n                                           data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha1_info = {\n    MBEDTLS_MD_SHA1,\n    \"SHA1\",\n    20,\n    64,\n    sha1_starts_wrap,\n    sha1_update_wrap,\n    sha1_finish_wrap,\n    mbedtls_sha1_ret,\n    sha1_ctx_alloc,\n    sha1_ctx_free,\n    sha1_clone_wrap,\n    sha1_process_wrap,\n};\n\n#endif /* MBEDTLS_SHA1_C */\n\n/*\n * Wrappers for generic message digests\n */\n#if defined(MBEDTLS_SHA256_C)\n\nstatic int sha224_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );\n}\n\nstatic int sha224_update_wrap( void *ctx, const unsigned char *input,\n                                size_t ilen )\n{\n    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,\n                                       input, ilen ) );\n}\n\nstatic int sha224_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,\n                                       output ) );\n}\n\nstatic int sha224_wrap( const unsigned char *input, size_t ilen,\n                        unsigned char *output )\n{\n    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );\n}\n\nstatic void *sha224_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );\n\n    if( ctx != NULL )\n        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void sha224_ctx_free( void *ctx )\n{\n    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void sha224_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,\n                    (const mbedtls_sha256_context *) src );\n}\n\nstatic int sha224_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,\n                                             data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha224_info = {\n    MBEDTLS_MD_SHA224,\n    \"SHA224\",\n    28,\n    64,\n    sha224_starts_wrap,\n    sha224_update_wrap,\n    sha224_finish_wrap,\n    sha224_wrap,\n    sha224_ctx_alloc,\n    sha224_ctx_free,\n    sha224_clone_wrap,\n    sha224_process_wrap,\n};\n\nstatic int sha256_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );\n}\n\nstatic int sha256_wrap( const unsigned char *input, size_t ilen,\n                        unsigned char *output )\n{\n    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha256_info = {\n    MBEDTLS_MD_SHA256,\n    \"SHA256\",\n    32,\n    64,\n    sha256_starts_wrap,\n    sha224_update_wrap,\n    sha224_finish_wrap,\n    sha256_wrap,\n    sha224_ctx_alloc,\n    sha224_ctx_free,\n    sha224_clone_wrap,\n    sha224_process_wrap,\n};\n\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n\nstatic int sha384_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );\n}\n\nstatic int sha384_update_wrap( void *ctx, const unsigned char *input,\n                               size_t ilen )\n{\n    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,\n                                       input, ilen ) );\n}\n\nstatic int sha384_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,\n                                       output ) );\n}\n\nstatic int sha384_wrap( const unsigned char *input, size_t ilen,\n                        unsigned char *output )\n{\n    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );\n}\n\nstatic void *sha384_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );\n\n    if( ctx != NULL )\n        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void sha384_ctx_free( void *ctx )\n{\n    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void sha384_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,\n                    (const mbedtls_sha512_context *) src );\n}\n\nstatic int sha384_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,\n                                             data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha384_info = {\n    MBEDTLS_MD_SHA384,\n    \"SHA384\",\n    48,\n    128,\n    sha384_starts_wrap,\n    sha384_update_wrap,\n    sha384_finish_wrap,\n    sha384_wrap,\n    sha384_ctx_alloc,\n    sha384_ctx_free,\n    sha384_clone_wrap,\n    sha384_process_wrap,\n};\n\nstatic int sha512_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );\n}\n\nstatic int sha512_wrap( const unsigned char *input, size_t ilen,\n                        unsigned char *output )\n{\n    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha512_info = {\n    MBEDTLS_MD_SHA512,\n    \"SHA512\",\n    64,\n    128,\n    sha512_starts_wrap,\n    sha384_update_wrap,\n    sha384_finish_wrap,\n    sha512_wrap,\n    sha384_ctx_alloc,\n    sha384_ctx_free,\n    sha384_clone_wrap,\n    sha384_process_wrap,\n};\n\n#endif /* MBEDTLS_SHA512_C */\n\n#endif /* MBEDTLS_MD_C */\n","/**\n * \\file oid.c\n *\n * \\brief Object Identifier (OID) database\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_OID_C)\n\n#include \"mbedtls/oid.h\"\n#include \"mbedtls/rsa.h\"\n\n#include <stdio.h>\n#include <string.h>\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#define mbedtls_snprintf snprintf\n#endif\n\n#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)\n#include \"mbedtls/x509.h\"\n#endif\n\n/*\n * Macro to automatically add the size of #define'd OIDs\n */\n#define ADD_LEN(s)      s, MBEDTLS_OID_SIZE(s)\n\n/*\n * Macro to generate an internal function for oid_XXX_from_asn1() (used by\n * the other functions)\n */\n#define FN_OID_TYPED_FROM_ASN1( TYPE_T, NAME, LIST )                        \\\nstatic const TYPE_T * oid_ ## NAME ## _from_asn1( const mbedtls_asn1_buf *oid )     \\\n{                                                                           \\\n    const TYPE_T *p = LIST;                                                 \\\n    const mbedtls_oid_descriptor_t *cur = (const mbedtls_oid_descriptor_t *) p;             \\\n    if( p == NULL || oid == NULL ) return( NULL );                          \\\n    while( cur->asn1 != NULL ) {                                            \\\n        if( cur->asn1_len == oid->len &&                                    \\\n            memcmp( cur->asn1, oid->p, oid->len ) == 0 ) {                  \\\n            return( p );                                                    \\\n        }                                                                   \\\n        p++;                                                                \\\n        cur = (const mbedtls_oid_descriptor_t *) p;                                 \\\n    }                                                                       \\\n    return( NULL );                                                         \\\n}\n\n/*\n * Macro to generate a function for retrieving a single attribute from the\n * descriptor of an mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_DESCRIPTOR_ATTR1(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1) \\\nint FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1 )                  \\\n{                                                                       \\\n    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );        \\\n    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );            \\\n    *ATTR1 = data->descriptor.ATTR1;                                    \\\n    return( 0 );                                                        \\\n}\n\n/*\n * Macro to generate a function for retrieving a single attribute from an\n * mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_ATTR1(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1) \\\nint FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1 )                  \\\n{                                                                       \\\n    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );        \\\n    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );            \\\n    *ATTR1 = data->ATTR1;                                               \\\n    return( 0 );                                                        \\\n}\n\n/*\n * Macro to generate a function for retrieving two attributes from an\n * mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_ATTR2(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1,     \\\n                         ATTR2_TYPE, ATTR2)                                 \\\nint FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1, ATTR2_TYPE * ATTR2 )  \\\n{                                                                           \\\n    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );            \\\n    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );                \\\n    *ATTR1 = data->ATTR1;                                                   \\\n    *ATTR2 = data->ATTR2;                                                   \\\n    return( 0 );                                                            \\\n}\n\n/*\n * Macro to generate a function for retrieving the OID based on a single\n * attribute from a mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_OID_BY_ATTR1(FN_NAME, TYPE_T, LIST, ATTR1_TYPE, ATTR1)   \\\nint FN_NAME( ATTR1_TYPE ATTR1, const char **oid, size_t *olen )             \\\n{                                                                           \\\n    const TYPE_T *cur = LIST;                                               \\\n    while( cur->descriptor.asn1 != NULL ) {                                 \\\n        if( cur->ATTR1 == ATTR1 ) {                                         \\\n            *oid = cur->descriptor.asn1;                                    \\\n            *olen = cur->descriptor.asn1_len;                               \\\n            return( 0 );                                                    \\\n        }                                                                   \\\n        cur++;                                                              \\\n    }                                                                       \\\n    return( MBEDTLS_ERR_OID_NOT_FOUND );                                   \\\n}\n\n/*\n * Macro to generate a function for retrieving the OID based on two\n * attributes from a mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_OID_BY_ATTR2(FN_NAME, TYPE_T, LIST, ATTR1_TYPE, ATTR1,   \\\n                                ATTR2_TYPE, ATTR2)                          \\\nint FN_NAME( ATTR1_TYPE ATTR1, ATTR2_TYPE ATTR2, const char **oid ,         \\\n             size_t *olen )                                                 \\\n{                                                                           \\\n    const TYPE_T *cur = LIST;                                               \\\n    while( cur->descriptor.asn1 != NULL ) {                                 \\\n        if( cur->ATTR1 == ATTR1 && cur->ATTR2 == ATTR2 ) {                  \\\n            *oid = cur->descriptor.asn1;                                    \\\n            *olen = cur->descriptor.asn1_len;                               \\\n            return( 0 );                                                    \\\n        }                                                                   \\\n        cur++;                                                              \\\n    }                                                                       \\\n    return( MBEDTLS_ERR_OID_NOT_FOUND );                                   \\\n}\n\n#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)\n/*\n * For X520 attribute types\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    const char          *short_name;\n} oid_x520_attr_t;\n\nstatic const oid_x520_attr_t oid_x520_attr_type[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_CN ),          \"id-at-commonName\",               \"Common Name\" },\n        \"CN\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_COUNTRY ),     \"id-at-countryName\",              \"Country\" },\n        \"C\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_LOCALITY ),    \"id-at-locality\",                 \"Locality\" },\n        \"L\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_STATE ),       \"id-at-state\",                    \"State\" },\n        \"ST\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_ORGANIZATION ),\"id-at-organizationName\",         \"Organization\" },\n        \"O\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_ORG_UNIT ),    \"id-at-organizationalUnitName\",   \"Org Unit\" },\n        \"OU\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS9_EMAIL ),    \"emailAddress\",                   \"E-mail address\" },\n        \"emailAddress\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_SERIAL_NUMBER ),\"id-at-serialNumber\",            \"Serial number\" },\n        \"serialNumber\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_POSTAL_ADDRESS ),\"id-at-postalAddress\",          \"Postal address\" },\n        \"postalAddress\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_POSTAL_CODE ), \"id-at-postalCode\",               \"Postal code\" },\n        \"postalCode\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_SUR_NAME ),    \"id-at-surName\",                  \"Surname\" },\n        \"SN\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_GIVEN_NAME ),  \"id-at-givenName\",                \"Given name\" },\n        \"GN\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_INITIALS ),    \"id-at-initials\",                 \"Initials\" },\n        \"initials\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_GENERATION_QUALIFIER ), \"id-at-generationQualifier\", \"Generation qualifier\" },\n        \"generationQualifier\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_TITLE ),       \"id-at-title\",                    \"Title\" },\n        \"title\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_DN_QUALIFIER ),\"id-at-dnQualifier\",              \"Distinguished Name qualifier\" },\n        \"dnQualifier\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_PSEUDONYM ),   \"id-at-pseudonym\",                \"Pseudonym\" },\n        \"pseudonym\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_DOMAIN_COMPONENT ), \"id-domainComponent\",           \"Domain component\" },\n        \"DC\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_UNIQUE_IDENTIFIER ), \"id-at-uniqueIdentifier\",    \"Unique Identifier\" },\n        \"uniqueIdentifier\",\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        NULL,\n    }\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)\nFN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)\n\n/*\n * For X509 extensions\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    int                 ext_type;\n} oid_x509_ext_t;\n\nstatic const oid_x509_ext_t oid_x509_ext[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_BASIC_CONSTRAINTS ),    \"id-ce-basicConstraints\",   \"Basic Constraints\" },\n        MBEDTLS_X509_EXT_BASIC_CONSTRAINTS,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_KEY_USAGE ),            \"id-ce-keyUsage\",           \"Key Usage\" },\n        MBEDTLS_X509_EXT_KEY_USAGE,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_EXTENDED_KEY_USAGE ),   \"id-ce-extKeyUsage\",        \"Extended Key Usage\" },\n        MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_SUBJECT_ALT_NAME ),     \"id-ce-subjectAltName\",     \"Subject Alt Name\" },\n        MBEDTLS_X509_EXT_SUBJECT_ALT_NAME,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_NS_CERT_TYPE ),         \"id-netscape-certtype\",     \"Netscape Certificate Type\" },\n        MBEDTLS_X509_EXT_NS_CERT_TYPE,\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        0,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)\nFN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)\n\nstatic const mbedtls_oid_descriptor_t oid_ext_key_usage[] =\n{\n    { ADD_LEN( MBEDTLS_OID_SERVER_AUTH ),      \"id-kp-serverAuth\",      \"TLS Web Server Authentication\" },\n    { ADD_LEN( MBEDTLS_OID_CLIENT_AUTH ),      \"id-kp-clientAuth\",      \"TLS Web Client Authentication\" },\n    { ADD_LEN( MBEDTLS_OID_CODE_SIGNING ),     \"id-kp-codeSigning\",     \"Code Signing\" },\n    { ADD_LEN( MBEDTLS_OID_EMAIL_PROTECTION ), \"id-kp-emailProtection\", \"E-mail Protection\" },\n    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    \"id-kp-timeStamping\",    \"Time Stamping\" },\n    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     \"id-kp-OCSPSigning\",     \"OCSP Signing\" },\n    { NULL, 0, NULL, NULL },\n};\n\nFN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)\nFN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)\n#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */\n\n#if defined(MBEDTLS_MD_C)\n/*\n * For SignatureAlgorithmIdentifier\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_md_type_t           md_alg;\n    mbedtls_pk_type_t           pk_alg;\n} oid_sig_alg_t;\n\nstatic const oid_sig_alg_t oid_sig_alg[] =\n{\n#if defined(MBEDTLS_RSA_C)\n#if defined(MBEDTLS_MD2_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_MD2 ),        \"md2WithRSAEncryption\",     \"RSA with MD2\" },\n        MBEDTLS_MD_MD2,      MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_MD2_C */\n#if defined(MBEDTLS_MD4_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_MD4 ),        \"md4WithRSAEncryption\",     \"RSA with MD4\" },\n        MBEDTLS_MD_MD4,      MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_MD4_C */\n#if defined(MBEDTLS_MD5_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_MD5 ),        \"md5WithRSAEncryption\",     \"RSA with MD5\" },\n        MBEDTLS_MD_MD5,      MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_MD5_C */\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA1 ),       \"sha-1WithRSAEncryption\",   \"RSA with SHA1\" },\n        MBEDTLS_MD_SHA1,     MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA224 ),     \"sha224WithRSAEncryption\",  \"RSA with SHA-224\" },\n        MBEDTLS_MD_SHA224,   MBEDTLS_PK_RSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA256 ),     \"sha256WithRSAEncryption\",  \"RSA with SHA-256\" },\n        MBEDTLS_MD_SHA256,   MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA384 ),     \"sha384WithRSAEncryption\",  \"RSA with SHA-384\" },\n        MBEDTLS_MD_SHA384,   MBEDTLS_PK_RSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA512 ),     \"sha512WithRSAEncryption\",  \"RSA with SHA-512\" },\n        MBEDTLS_MD_SHA512,   MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_SHA512_C */\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_RSA_SHA_OBS ),      \"sha-1WithRSAEncryption\",   \"RSA with SHA1\" },\n        MBEDTLS_MD_SHA1,     MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_RSA_C */\n#if defined(MBEDTLS_ECDSA_C)\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA1 ),       \"ecdsa-with-SHA1\",      \"ECDSA with SHA1\" },\n        MBEDTLS_MD_SHA1,     MBEDTLS_PK_ECDSA,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA224 ),     \"ecdsa-with-SHA224\",    \"ECDSA with SHA224\" },\n        MBEDTLS_MD_SHA224,   MBEDTLS_PK_ECDSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA256 ),     \"ecdsa-with-SHA256\",    \"ECDSA with SHA256\" },\n        MBEDTLS_MD_SHA256,   MBEDTLS_PK_ECDSA,\n    },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA384 ),     \"ecdsa-with-SHA384\",    \"ECDSA with SHA384\" },\n        MBEDTLS_MD_SHA384,   MBEDTLS_PK_ECDSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA512 ),     \"ecdsa-with-SHA512\",    \"ECDSA with SHA512\" },\n        MBEDTLS_MD_SHA512,   MBEDTLS_PK_ECDSA,\n    },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_ECDSA_C */\n#if defined(MBEDTLS_RSA_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_RSASSA_PSS ),        \"RSASSA-PSS\",           \"RSASSA-PSS\" },\n        MBEDTLS_MD_NONE,     MBEDTLS_PK_RSASSA_PSS,\n    },\n#endif /* MBEDTLS_RSA_C */\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)\nFN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)\nFN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)\nFN_OID_GET_OID_BY_ATTR2(mbedtls_oid_get_oid_by_sig_alg, oid_sig_alg_t, oid_sig_alg, mbedtls_pk_type_t, pk_alg, mbedtls_md_type_t, md_alg)\n#endif /* MBEDTLS_MD_C */\n\n/*\n * For PublicKeyInfo (PKCS1, RFC 5480)\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_pk_type_t           pk_alg;\n} oid_pk_alg_t;\n\nstatic const oid_pk_alg_t oid_pk_alg[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_RSA ),      \"rsaEncryption\",   \"RSA\" },\n        MBEDTLS_PK_RSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_ALG_UNRESTRICTED ),  \"id-ecPublicKey\",   \"Generic EC key\" },\n        MBEDTLS_PK_ECKEY,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_ALG_ECDH ),          \"id-ecDH\",          \"EC key for ECDH\" },\n        MBEDTLS_PK_ECKEY_DH,\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_PK_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)\nFN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)\nFN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_pk_alg, oid_pk_alg_t, oid_pk_alg, mbedtls_pk_type_t, pk_alg)\n\n#if defined(MBEDTLS_ECP_C)\n/*\n * For namedCurve (RFC 5480)\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_ecp_group_id        grp_id;\n} oid_ecp_grp_t;\n\nstatic const oid_ecp_grp_t oid_ecp_grp[] =\n{\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP192R1 ), \"secp192r1\",    \"secp192r1\" },\n        MBEDTLS_ECP_DP_SECP192R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP224R1 ), \"secp224r1\",    \"secp224r1\" },\n        MBEDTLS_ECP_DP_SECP224R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP256R1 ), \"secp256r1\",    \"secp256r1\" },\n        MBEDTLS_ECP_DP_SECP256R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP384R1 ), \"secp384r1\",    \"secp384r1\" },\n        MBEDTLS_ECP_DP_SECP384R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP521R1 ), \"secp521r1\",    \"secp521r1\" },\n        MBEDTLS_ECP_DP_SECP521R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP192K1 ), \"secp192k1\",    \"secp192k1\" },\n        MBEDTLS_ECP_DP_SECP192K1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP224K1 ), \"secp224k1\",    \"secp224k1\" },\n        MBEDTLS_ECP_DP_SECP224K1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP256K1 ), \"secp256k1\",    \"secp256k1\" },\n        MBEDTLS_ECP_DP_SECP256K1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_BP256R1 ),   \"brainpoolP256r1\",\"brainpool256r1\" },\n        MBEDTLS_ECP_DP_BP256R1,\n    },\n#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_BP384R1 ),   \"brainpoolP384r1\",\"brainpool384r1\" },\n        MBEDTLS_ECP_DP_BP384R1,\n    },\n#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_BP512R1 ),   \"brainpoolP512r1\",\"brainpool512r1\" },\n        MBEDTLS_ECP_DP_BP512R1,\n    },\n#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_ECP_DP_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)\nFN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)\nFN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_ec_grp, oid_ecp_grp_t, oid_ecp_grp, mbedtls_ecp_group_id, grp_id)\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_CIPHER_C)\n/*\n * For PKCS#5 PBES2 encryption algorithm\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_cipher_type_t       cipher_alg;\n} oid_cipher_alg_t;\n\nstatic const oid_cipher_alg_t oid_cipher_alg[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_DES_CBC ),              \"desCBC\",       \"DES-CBC\" },\n        MBEDTLS_CIPHER_DES_CBC,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_DES_EDE3_CBC ),         \"des-ede3-cbc\", \"DES-EDE3-CBC\" },\n        MBEDTLS_CIPHER_DES_EDE3_CBC,\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_CIPHER_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)\nFN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)\n#endif /* MBEDTLS_CIPHER_C */\n\n#if defined(MBEDTLS_MD_C)\n/*\n * For digestAlgorithm\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_md_type_t           md_alg;\n} oid_md_alg_t;\n\nstatic const oid_md_alg_t oid_md_alg[] =\n{\n#if defined(MBEDTLS_MD2_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD2 ),       \"id-md2\",       \"MD2\" },\n        MBEDTLS_MD_MD2,\n    },\n#endif /* MBEDTLS_MD2_C */\n#if defined(MBEDTLS_MD4_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD4 ),       \"id-md4\",       \"MD4\" },\n        MBEDTLS_MD_MD4,\n    },\n#endif /* MBEDTLS_MD4_C */\n#if defined(MBEDTLS_MD5_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD5 ),       \"id-md5\",       \"MD5\" },\n        MBEDTLS_MD_MD5,\n    },\n#endif /* MBEDTLS_MD5_C */\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA1 ),      \"id-sha1\",      \"SHA-1\" },\n        MBEDTLS_MD_SHA1,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA224 ),    \"id-sha224\",    \"SHA-224\" },\n        MBEDTLS_MD_SHA224,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA256 ),    \"id-sha256\",    \"SHA-256\" },\n        MBEDTLS_MD_SHA256,\n    },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA384 ),    \"id-sha384\",    \"SHA-384\" },\n        MBEDTLS_MD_SHA384,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA512 ),    \"id-sha512\",    \"SHA-512\" },\n        MBEDTLS_MD_SHA512,\n    },\n#endif /* MBEDTLS_SHA512_C */\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_MD_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)\nFN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)\nFN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)\n\n/*\n * For HMAC digestAlgorithm\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_md_type_t           md_hmac;\n} oid_md_hmac_t;\n\nstatic const oid_md_hmac_t oid_md_hmac[] =\n{\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_HMAC_SHA1 ),      \"hmacSHA1\",      \"HMAC-SHA-1\" },\n        MBEDTLS_MD_SHA1,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_HMAC_SHA224 ),    \"hmacSHA224\",    \"HMAC-SHA-224\" },\n        MBEDTLS_MD_SHA224,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_HMAC_SHA256 ),    \"hmacSHA256\",    \"HMAC-SHA-256\" },\n        MBEDTLS_MD_SHA256,\n    },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_HMAC_SHA384 ),    \"hmacSHA384\",    \"HMAC-SHA-384\" },\n        MBEDTLS_MD_SHA384,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_HMAC_SHA512 ),    \"hmacSHA512\",    \"HMAC-SHA-512\" },\n        MBEDTLS_MD_SHA512,\n    },\n#endif /* MBEDTLS_SHA512_C */\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_MD_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)\nFN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)\n#endif /* MBEDTLS_MD_C */\n\n#if defined(MBEDTLS_PKCS12_C)\n/*\n * For PKCS#12 PBEs\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_md_type_t           md_alg;\n    mbedtls_cipher_type_t       cipher_alg;\n} oid_pkcs12_pbe_alg_t;\n\nstatic const oid_pkcs12_pbe_alg_t oid_pkcs12_pbe_alg[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS12_PBE_SHA1_DES3_EDE_CBC ), \"pbeWithSHAAnd3-KeyTripleDES-CBC\", \"PBE with SHA1 and 3-Key 3DES\" },\n        MBEDTLS_MD_SHA1,      MBEDTLS_CIPHER_DES_EDE3_CBC,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS12_PBE_SHA1_DES2_EDE_CBC ), \"pbeWithSHAAnd2-KeyTripleDES-CBC\", \"PBE with SHA1 and 2-Key 3DES\" },\n        MBEDTLS_MD_SHA1,      MBEDTLS_CIPHER_DES_EDE_CBC,\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)\nFN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)\n#endif /* MBEDTLS_PKCS12_C */\n\n#define OID_SAFE_SNPRINTF                               \\\n    do {                                                \\\n        if( ret < 0 || (size_t) ret >= n )              \\\n            return( MBEDTLS_ERR_OID_BUF_TOO_SMALL );    \\\n                                                        \\\n        n -= (size_t) ret;                              \\\n        p += (size_t) ret;                              \\\n    } while( 0 )\n\n/* Return the x.y.z.... style numeric string for the given OID */\nint mbedtls_oid_get_numeric_string( char *buf, size_t size,\n                            const mbedtls_asn1_buf *oid )\n{\n    int ret;\n    size_t i, n;\n    unsigned int value;\n    char *p;\n\n    p = buf;\n    n = size;\n\n    /* First byte contains first two dots */\n    if( oid->len > 0 )\n    {\n        ret = mbedtls_snprintf( p, n, \"%d.%d\", oid->p[0] / 40, oid->p[0] % 40 );\n        OID_SAFE_SNPRINTF;\n    }\n\n    value = 0;\n    for( i = 1; i < oid->len; i++ )\n    {\n        /* Prevent overflow in value. */\n        if( ( ( value << 7 ) >> 7 ) != value )\n            return( MBEDTLS_ERR_OID_BUF_TOO_SMALL );\n\n        value <<= 7;\n        value += oid->p[i] & 0x7F;\n\n        if( !( oid->p[i] & 0x80 ) )\n        {\n            /* Last byte */\n            ret = mbedtls_snprintf( p, n, \".%d\", value );\n            OID_SAFE_SNPRINTF;\n            value = 0;\n        }\n    }\n\n    return( (int) ( size - n ) );\n}\n\n#endif /* MBEDTLS_OID_C */\n","/*\n *  Privacy Enhanced Mail (PEM) decoding\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)\n\n#include \"mbedtls/pem.h\"\n#include \"mbedtls/base64.h\"\n#include \"mbedtls/des.h\"\n#include \"mbedtls/aes.h\"\n#include \"mbedtls/md5.h\"\n#include \"mbedtls/cipher.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#if defined(MBEDTLS_PEM_PARSE_C)\nvoid mbedtls_pem_init( mbedtls_pem_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_pem_context ) );\n}\n\n#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \\\n    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )\n/*\n * Read a 16-byte hex string and convert it to binary\n */\nstatic int pem_get_iv( const unsigned char *s, unsigned char *iv,\n                       size_t iv_len )\n{\n    size_t i, j, k;\n\n    memset( iv, 0, iv_len );\n\n    for( i = 0; i < iv_len * 2; i++, s++ )\n    {\n        if( *s >= '0' && *s <= '9' ) j = *s - '0'; else\n        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else\n        if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else\n            return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );\n\n        k = ( ( i & 1 ) != 0 ) ? j : j << 4;\n\n        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );\n    }\n\n    return( 0 );\n}\n\nstatic int pem_pbkdf1( unsigned char *key, size_t keylen,\n                       unsigned char *iv,\n                       const unsigned char *pwd, size_t pwdlen )\n{\n    mbedtls_md5_context md5_ctx;\n    unsigned char md5sum[16];\n    size_t use_len;\n    int ret;\n\n    mbedtls_md5_init( &md5_ctx );\n\n    /*\n     * key[ 0..15] = MD5(pwd || IV)\n     */\n    if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv,  8 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )\n        goto exit;\n\n    if( keylen <= 16 )\n    {\n        memcpy( key, md5sum, keylen );\n        goto exit;\n    }\n\n    memcpy( key, md5sum, 16 );\n\n    /*\n     * key[16..23] = MD5(key[ 0..15] || pwd || IV])\n     */\n    if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, md5sum, 16 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv, 8 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )\n        goto exit;\n\n    use_len = 16;\n    if( keylen < 32 )\n        use_len = keylen - 16;\n\n    memcpy( key + 16, md5sum, use_len );\n\nexit:\n    mbedtls_md5_free( &md5_ctx );\n    mbedtls_platform_zeroize( md5sum, 16 );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_DES_C)\n/*\n * Decrypt with DES-CBC, using PBKDF1 for key derivation\n */\nstatic int pem_des_decrypt( unsigned char des_iv[8],\n                            unsigned char *buf, size_t buflen,\n                            const unsigned char *pwd, size_t pwdlen )\n{\n    mbedtls_des_context des_ctx;\n    unsigned char des_key[8];\n    int ret;\n\n    mbedtls_des_init( &des_ctx );\n\n    if( ( ret = pem_pbkdf1( des_key, 8, des_iv, pwd, pwdlen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_des_setkey_dec( &des_ctx, des_key ) ) != 0 )\n        goto exit;\n    ret = mbedtls_des_crypt_cbc( &des_ctx, MBEDTLS_DES_DECRYPT, buflen,\n                     des_iv, buf, buf );\n\nexit:\n    mbedtls_des_free( &des_ctx );\n    mbedtls_platform_zeroize( des_key, 8 );\n\n    return( ret );\n}\n\n/*\n * Decrypt with 3DES-CBC, using PBKDF1 for key derivation\n */\nstatic int pem_des3_decrypt( unsigned char des3_iv[8],\n                             unsigned char *buf, size_t buflen,\n                             const unsigned char *pwd, size_t pwdlen )\n{\n    mbedtls_des3_context des3_ctx;\n    unsigned char des3_key[24];\n    int ret;\n\n    mbedtls_des3_init( &des3_ctx );\n\n    if( ( ret = pem_pbkdf1( des3_key, 24, des3_iv, pwd, pwdlen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_des3_set3key_dec( &des3_ctx, des3_key ) ) != 0 )\n        goto exit;\n    ret = mbedtls_des3_crypt_cbc( &des3_ctx, MBEDTLS_DES_DECRYPT, buflen,\n                     des3_iv, buf, buf );\n\nexit:\n    mbedtls_des3_free( &des3_ctx );\n    mbedtls_platform_zeroize( des3_key, 24 );\n\n    return( ret );\n}\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_AES_C)\n/*\n * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation\n */\nstatic int pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,\n                            unsigned char *buf, size_t buflen,\n                            const unsigned char *pwd, size_t pwdlen )\n{\n    mbedtls_aes_context aes_ctx;\n    unsigned char aes_key[32];\n    int ret;\n\n    mbedtls_aes_init( &aes_ctx );\n\n    if( ( ret = pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 ) ) != 0 )\n        goto exit;\n    ret = mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,\n                     aes_iv, buf, buf );\n\nexit:\n    mbedtls_aes_free( &aes_ctx );\n    mbedtls_platform_zeroize( aes_key, keylen );\n\n    return( ret );\n}\n#endif /* MBEDTLS_AES_C */\n\n#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */\n\nint mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,\n                     const unsigned char *data, const unsigned char *pwd,\n                     size_t pwdlen, size_t *use_len )\n{\n    int ret, enc;\n    size_t len;\n    unsigned char *buf;\n    const unsigned char *s1, *s2, *end;\n#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \\\n    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )\n    unsigned char pem_iv[16];\n    mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;\n#else\n    ((void) pwd);\n    ((void) pwdlen);\n#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */\n\n    if( ctx == NULL )\n        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );\n\n    s1 = (unsigned char *) strstr( (const char *) data, header );\n\n    if( s1 == NULL )\n        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );\n\n    s2 = (unsigned char *) strstr( (const char *) data, footer );\n\n    if( s2 == NULL || s2 <= s1 )\n        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );\n\n    s1 += strlen( header );\n    if( *s1 == ' '  ) s1++;\n    if( *s1 == '\\r' ) s1++;\n    if( *s1 == '\\n' ) s1++;\n    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );\n\n    end = s2;\n    end += strlen( footer );\n    if( *end == ' '  ) end++;\n    if( *end == '\\r' ) end++;\n    if( *end == '\\n' ) end++;\n    *use_len = end - data;\n\n    enc = 0;\n\n    if( s2 - s1 >= 22 && memcmp( s1, \"Proc-Type: 4,ENCRYPTED\", 22 ) == 0 )\n    {\n#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \\\n    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )\n        enc++;\n\n        s1 += 22;\n        if( *s1 == '\\r' ) s1++;\n        if( *s1 == '\\n' ) s1++;\n        else return( MBEDTLS_ERR_PEM_INVALID_DATA );\n\n\n#if defined(MBEDTLS_DES_C)\n        if( s2 - s1 >= 23 && memcmp( s1, \"DEK-Info: DES-EDE3-CBC,\", 23 ) == 0 )\n        {\n            enc_alg = MBEDTLS_CIPHER_DES_EDE3_CBC;\n\n            s1 += 23;\n            if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8 ) != 0 )\n                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );\n\n            s1 += 16;\n        }\n        else if( s2 - s1 >= 18 && memcmp( s1, \"DEK-Info: DES-CBC,\", 18 ) == 0 )\n        {\n            enc_alg = MBEDTLS_CIPHER_DES_CBC;\n\n            s1 += 18;\n            if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8) != 0 )\n                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );\n\n            s1 += 16;\n        }\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_AES_C)\n        if( s2 - s1 >= 14 && memcmp( s1, \"DEK-Info: AES-\", 14 ) == 0 )\n        {\n            if( s2 - s1 < 22 )\n                return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );\n            else if( memcmp( s1, \"DEK-Info: AES-128-CBC,\", 22 ) == 0 )\n                enc_alg = MBEDTLS_CIPHER_AES_128_CBC;\n            else if( memcmp( s1, \"DEK-Info: AES-192-CBC,\", 22 ) == 0 )\n                enc_alg = MBEDTLS_CIPHER_AES_192_CBC;\n            else if( memcmp( s1, \"DEK-Info: AES-256-CBC,\", 22 ) == 0 )\n                enc_alg = MBEDTLS_CIPHER_AES_256_CBC;\n            else\n                return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );\n\n            s1 += 22;\n            if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )\n                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );\n\n            s1 += 32;\n        }\n#endif /* MBEDTLS_AES_C */\n\n        if( enc_alg == MBEDTLS_CIPHER_NONE )\n            return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );\n\n        if( *s1 == '\\r' ) s1++;\n        if( *s1 == '\\n' ) s1++;\n        else return( MBEDTLS_ERR_PEM_INVALID_DATA );\n#else\n        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );\n#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */\n    }\n\n    if( s1 >= s2 )\n        return( MBEDTLS_ERR_PEM_INVALID_DATA );\n\n    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );\n\n    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )\n        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );\n\n    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )\n        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );\n\n    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )\n    {\n        mbedtls_platform_zeroize( buf, len );\n        mbedtls_free( buf );\n        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );\n    }\n\n    if( enc != 0 )\n    {\n#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \\\n    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )\n        if( pwd == NULL )\n        {\n            mbedtls_platform_zeroize( buf, len );\n            mbedtls_free( buf );\n            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );\n        }\n\n        ret = 0;\n\n#if defined(MBEDTLS_DES_C)\n        if( enc_alg == MBEDTLS_CIPHER_DES_EDE3_CBC )\n            ret = pem_des3_decrypt( pem_iv, buf, len, pwd, pwdlen );\n        else if( enc_alg == MBEDTLS_CIPHER_DES_CBC )\n            ret = pem_des_decrypt( pem_iv, buf, len, pwd, pwdlen );\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_AES_C)\n        if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )\n            ret = pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );\n        else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )\n            ret = pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );\n        else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )\n            ret = pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );\n#endif /* MBEDTLS_AES_C */\n\n        if( ret != 0 )\n        {\n            mbedtls_free( buf );\n            return( ret );\n        }\n\n        /*\n         * The result will be ASN.1 starting with a SEQUENCE tag, with 1 to 3\n         * length bytes (allow 4 to be sure) in all known use cases.\n         *\n         * Use that as a heuristic to try to detect password mismatches.\n         */\n        if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )\n        {\n            mbedtls_platform_zeroize( buf, len );\n            mbedtls_free( buf );\n            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );\n        }\n#else\n        mbedtls_platform_zeroize( buf, len );\n        mbedtls_free( buf );\n        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );\n#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */\n    }\n\n    ctx->buf = buf;\n    ctx->buflen = len;\n\n    return( 0 );\n}\n\nvoid mbedtls_pem_free( mbedtls_pem_context *ctx )\n{\n    if( ctx->buf != NULL )\n        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );\n    mbedtls_free( ctx->buf );\n    mbedtls_free( ctx->info );\n\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );\n}\n#endif /* MBEDTLS_PEM_PARSE_C */\n\n#if defined(MBEDTLS_PEM_WRITE_C)\nint mbedtls_pem_write_buffer( const char *header, const char *footer,\n                      const unsigned char *der_data, size_t der_len,\n                      unsigned char *buf, size_t buf_len, size_t *olen )\n{\n    int ret;\n    unsigned char *encode_buf = NULL, *c, *p = buf;\n    size_t len = 0, use_len, add_len = 0;\n\n    mbedtls_base64_encode( NULL, 0, &use_len, der_data, der_len );\n    add_len = strlen( header ) + strlen( footer ) + ( use_len / 64 ) + 1;\n\n    if( use_len + add_len > buf_len )\n    {\n        *olen = use_len + add_len;\n        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );\n    }\n\n    if( use_len != 0 &&\n        ( ( encode_buf = mbedtls_calloc( 1, use_len ) ) == NULL ) )\n        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );\n\n    if( ( ret = mbedtls_base64_encode( encode_buf, use_len, &use_len, der_data,\n                               der_len ) ) != 0 )\n    {\n        mbedtls_free( encode_buf );\n        return( ret );\n    }\n\n    memcpy( p, header, strlen( header ) );\n    p += strlen( header );\n    c = encode_buf;\n\n    while( use_len )\n    {\n        len = ( use_len > 64 ) ? 64 : use_len;\n        memcpy( p, c, len );\n        use_len -= len;\n        p += len;\n        c += len;\n        *p++ = '\\n';\n    }\n\n    memcpy( p, footer, strlen( footer ) );\n    p += strlen( footer );\n\n    *p++ = '\\0';\n    *olen = p - buf;\n\n    mbedtls_free( encode_buf );\n    return( 0 );\n}\n#endif /* MBEDTLS_PEM_WRITE_C */\n#endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */\n","/*\n *  Public Key abstraction layer\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_PK_C)\n#include \"mbedtls/pk.h\"\n#include \"mbedtls/pk_internal.h\"\n\n#include \"mbedtls/platform_util.h\"\n\n#if defined(MBEDTLS_RSA_C)\n#include \"mbedtls/rsa.h\"\n#endif\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n#include \"mbedtls/ecdsa.h\"\n#endif\n\n#include <limits.h>\n#include <stdint.h>\n\n/*\n * Initialise a mbedtls_pk_context\n */\nvoid mbedtls_pk_init( mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    ctx->pk_info = NULL;\n    ctx->pk_ctx = NULL;\n}\n\n/*\n * Free (the components of) a mbedtls_pk_context\n */\nvoid mbedtls_pk_free( mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return;\n\n    ctx->pk_info->ctx_free_func( ctx->pk_ctx );\n\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );\n}\n\n/*\n * Get pk_info structure from type\n */\nconst mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )\n{\n    switch( pk_type ) {\n#if defined(MBEDTLS_RSA_C)\n        case MBEDTLS_PK_RSA:\n            return( &mbedtls_rsa_info );\n#endif\n#if defined(MBEDTLS_ECP_C)\n        case MBEDTLS_PK_ECKEY:\n            return( &mbedtls_eckey_info );\n        case MBEDTLS_PK_ECKEY_DH:\n            return( &mbedtls_eckeydh_info );\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n        case MBEDTLS_PK_ECDSA:\n            return( &mbedtls_ecdsa_info );\n#endif\n        /* MBEDTLS_PK_RSA_ALT omitted on purpose */\n        default:\n            return( NULL );\n    }\n}\n\n/*\n * Initialise context\n */\nint mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )\n{\n    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )\n        return( MBEDTLS_ERR_PK_ALLOC_FAILED );\n\n    ctx->pk_info = info;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_PK_RSA_ALT_SUPPORT)\n/*\n * Initialize an RSA-alt context\n */\nint mbedtls_pk_setup_rsa_alt( mbedtls_pk_context *ctx, void * key,\n                         mbedtls_pk_rsa_alt_decrypt_func decrypt_func,\n                         mbedtls_pk_rsa_alt_sign_func sign_func,\n                         mbedtls_pk_rsa_alt_key_len_func key_len_func )\n{\n    mbedtls_rsa_alt_context *rsa_alt;\n    const mbedtls_pk_info_t *info = &mbedtls_rsa_alt_info;\n\n    if( ctx == NULL || ctx->pk_info != NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )\n        return( MBEDTLS_ERR_PK_ALLOC_FAILED );\n\n    ctx->pk_info = info;\n\n    rsa_alt = (mbedtls_rsa_alt_context *) ctx->pk_ctx;\n\n    rsa_alt->key = key;\n    rsa_alt->decrypt_func = decrypt_func;\n    rsa_alt->sign_func = sign_func;\n    rsa_alt->key_len_func = key_len_func;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_PK_RSA_ALT_SUPPORT */\n\n/*\n * Tell if a PK can do the operations of the given type\n */\nint mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )\n{\n    /* null or NONE context can't do anything */\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( 0 );\n\n    return( ctx->pk_info->can_do( type ) );\n}\n\n/*\n * Helper for mbedtls_pk_sign and mbedtls_pk_verify\n */\nstatic inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )\n{\n    const mbedtls_md_info_t *md_info;\n\n    if( *hash_len != 0 )\n        return( 0 );\n\n    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )\n        return( -1 );\n\n    *hash_len = mbedtls_md_get_size( md_info );\n    return( 0 );\n}\n\n/*\n * Verify a signature\n */\nint mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,\n               const unsigned char *hash, size_t hash_len,\n               const unsigned char *sig, size_t sig_len )\n{\n    if( ctx == NULL || ctx->pk_info == NULL ||\n        pk_hashlen_helper( md_alg, &hash_len ) != 0 )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->verify_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,\n                                       sig, sig_len ) );\n}\n\n/*\n * Verify a signature with options\n */\nint mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,\n                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   const unsigned char *sig, size_t sig_len )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ! mbedtls_pk_can_do( ctx, type ) )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    if( type == MBEDTLS_PK_RSASSA_PSS )\n    {\n#if defined(MBEDTLS_RSA_C) && defined(MBEDTLS_PKCS1_V21)\n        int ret;\n        const mbedtls_pk_rsassa_pss_options *pss_opts;\n\n#if SIZE_MAX > UINT_MAX\n        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )\n            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n#endif /* SIZE_MAX > UINT_MAX */\n\n        if( options == NULL )\n            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;\n\n        if( sig_len < mbedtls_pk_get_len( ctx ) )\n            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );\n\n        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),\n                NULL, NULL, MBEDTLS_RSA_PUBLIC,\n                md_alg, (unsigned int) hash_len, hash,\n                pss_opts->mgf1_hash_id,\n                pss_opts->expected_salt_len,\n                sig );\n        if( ret != 0 )\n            return( ret );\n\n        if( sig_len > mbedtls_pk_get_len( ctx ) )\n            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );\n\n        return( 0 );\n#else\n        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );\n#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */\n    }\n\n    /* General case: no options */\n    if( options != NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );\n}\n\n/*\n * Make a signature\n */\nint mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,\n             const unsigned char *hash, size_t hash_len,\n             unsigned char *sig, size_t *sig_len,\n             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    if( ctx == NULL || ctx->pk_info == NULL ||\n        pk_hashlen_helper( md_alg, &hash_len ) != 0 )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->sign_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,\n                                     sig, sig_len, f_rng, p_rng ) );\n}\n\n/*\n * Decrypt message\n */\nint mbedtls_pk_decrypt( mbedtls_pk_context *ctx,\n                const unsigned char *input, size_t ilen,\n                unsigned char *output, size_t *olen, size_t osize,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->decrypt_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    return( ctx->pk_info->decrypt_func( ctx->pk_ctx, input, ilen,\n                output, olen, osize, f_rng, p_rng ) );\n}\n\n/*\n * Encrypt message\n */\nint mbedtls_pk_encrypt( mbedtls_pk_context *ctx,\n                const unsigned char *input, size_t ilen,\n                unsigned char *output, size_t *olen, size_t osize,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->encrypt_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,\n                output, olen, osize, f_rng, p_rng ) );\n}\n\n/*\n * Check public-private key pair\n */\nint mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_context *prv )\n{\n    if( pub == NULL || pub->pk_info == NULL ||\n        prv == NULL || prv->pk_info == NULL ||\n        prv->pk_info->check_pair_func == NULL )\n    {\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n    }\n\n    if( prv->pk_info->type == MBEDTLS_PK_RSA_ALT )\n    {\n        if( pub->pk_info->type != MBEDTLS_PK_RSA )\n            return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n    }\n    else\n    {\n        if( pub->pk_info != prv->pk_info )\n            return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n    }\n\n    return( prv->pk_info->check_pair_func( pub->pk_ctx, prv->pk_ctx ) );\n}\n\n/*\n * Get key size in bits\n */\nsize_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( 0 );\n\n    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );\n}\n\n/*\n * Export debug information\n */\nint mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->debug_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    ctx->pk_info->debug_func( ctx->pk_ctx, items );\n    return( 0 );\n}\n\n/*\n * Access the PK type name\n */\nconst char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( \"invalid PK\" );\n\n    return( ctx->pk_info->name );\n}\n\n/*\n * Access the PK type\n */\nmbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_PK_NONE );\n\n    return( ctx->pk_info->type );\n}\n\n#endif /* MBEDTLS_PK_C */\n","/*\n *  Public Key abstraction layer: wrapper functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_PK_C)\n#include \"mbedtls/pk_internal.h\"\n\n/* Even if RSA not activated, for the sake of RSA-alt */\n#include \"mbedtls/rsa.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n\n#if defined(MBEDTLS_ECDSA_C)\n#include \"mbedtls/ecdsa.h\"\n#endif\n\n#if defined(MBEDTLS_PK_RSA_ALT_SUPPORT)\n#include \"mbedtls/platform_util.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#include <limits.h>\n#include <stdint.h>\n\n#if defined(MBEDTLS_RSA_C)\nstatic int rsa_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_RSA ||\n            type == MBEDTLS_PK_RSASSA_PSS );\n}\n\nstatic size_t rsa_get_bitlen( const void *ctx )\n{\n    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;\n    return( 8 * mbedtls_rsa_get_len( rsa ) );\n}\n\nstatic int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   const unsigned char *sig, size_t sig_len )\n{\n    int ret;\n    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;\n    size_t rsa_len = mbedtls_rsa_get_len( rsa );\n\n#if SIZE_MAX > UINT_MAX\n    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n#endif /* SIZE_MAX > UINT_MAX */\n\n    if( sig_len < rsa_len )\n        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );\n\n    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,\n                                  MBEDTLS_RSA_PUBLIC, md_alg,\n                                  (unsigned int) hash_len, hash, sig ) ) != 0 )\n        return( ret );\n\n    /* The buffer contains a valid signature followed by extra data.\n     * We have a special error code for that so that so that callers can\n     * use mbedtls_pk_verify() to check \"Does the buffer start with a\n     * valid signature?\" and not just \"Does the buffer contain a valid\n     * signature?\". */\n    if( sig_len > rsa_len )\n        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );\n\n    return( 0 );\n}\n\nstatic int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;\n\n#if SIZE_MAX > UINT_MAX\n    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n#endif /* SIZE_MAX > UINT_MAX */\n\n    *sig_len = mbedtls_rsa_get_len( rsa );\n\n    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,\n                md_alg, (unsigned int) hash_len, hash, sig ) );\n}\n\nstatic int rsa_decrypt_wrap( void *ctx,\n                    const unsigned char *input, size_t ilen,\n                    unsigned char *output, size_t *olen, size_t osize,\n                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;\n\n    if( ilen != mbedtls_rsa_get_len( rsa ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,\n                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );\n}\n\nstatic int rsa_encrypt_wrap( void *ctx,\n                    const unsigned char *input, size_t ilen,\n                    unsigned char *output, size_t *olen, size_t osize,\n                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;\n    *olen = mbedtls_rsa_get_len( rsa );\n\n    if( *olen > osize )\n        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );\n\n    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,\n                                       ilen, input, output ) );\n}\n\nstatic int rsa_check_pair_wrap( const void *pub, const void *prv )\n{\n    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,\n                                (const mbedtls_rsa_context *) prv ) );\n}\n\nstatic void *rsa_alloc_wrap( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );\n\n    if( ctx != NULL )\n        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );\n\n    return( ctx );\n}\n\nstatic void rsa_free_wrap( void *ctx )\n{\n    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )\n{\n    items->type = MBEDTLS_PK_DEBUG_MPI;\n    items->name = \"rsa.N\";\n    items->value = &( ((mbedtls_rsa_context *) ctx)->N );\n\n    items++;\n\n    items->type = MBEDTLS_PK_DEBUG_MPI;\n    items->name = \"rsa.E\";\n    items->value = &( ((mbedtls_rsa_context *) ctx)->E );\n}\n\nconst mbedtls_pk_info_t mbedtls_rsa_info = {\n    MBEDTLS_PK_RSA,\n    \"RSA\",\n    rsa_get_bitlen,\n    rsa_can_do,\n    rsa_verify_wrap,\n    rsa_sign_wrap,\n    rsa_decrypt_wrap,\n    rsa_encrypt_wrap,\n    rsa_check_pair_wrap,\n    rsa_alloc_wrap,\n    rsa_free_wrap,\n    rsa_debug,\n};\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_ECP_C)\n/*\n * Generic EC key\n */\nstatic int eckey_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_ECKEY ||\n            type == MBEDTLS_PK_ECKEY_DH ||\n            type == MBEDTLS_PK_ECDSA );\n}\n\nstatic size_t eckey_get_bitlen( const void *ctx )\n{\n    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );\n}\n\n#if defined(MBEDTLS_ECDSA_C)\n/* Forward declarations */\nstatic int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                       const unsigned char *hash, size_t hash_len,\n                       const unsigned char *sig, size_t sig_len );\n\nstatic int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\nstatic int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                       const unsigned char *hash, size_t hash_len,\n                       const unsigned char *sig, size_t sig_len )\n{\n    int ret;\n    mbedtls_ecdsa_context ecdsa;\n\n    mbedtls_ecdsa_init( &ecdsa );\n\n    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )\n        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );\n\n    mbedtls_ecdsa_free( &ecdsa );\n\n    return( ret );\n}\n\nstatic int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_ecdsa_context ecdsa;\n\n    mbedtls_ecdsa_init( &ecdsa );\n\n    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )\n        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,\n                               f_rng, p_rng );\n\n    mbedtls_ecdsa_free( &ecdsa );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_ECDSA_C */\n\nstatic int eckey_check_pair( const void *pub, const void *prv )\n{\n    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,\n                                (const mbedtls_ecp_keypair *) prv ) );\n}\n\nstatic void *eckey_alloc_wrap( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );\n\n    if( ctx != NULL )\n        mbedtls_ecp_keypair_init( ctx );\n\n    return( ctx );\n}\n\nstatic void eckey_free_wrap( void *ctx )\n{\n    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )\n{\n    items->type = MBEDTLS_PK_DEBUG_ECP;\n    items->name = \"eckey.Q\";\n    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );\n}\n\nconst mbedtls_pk_info_t mbedtls_eckey_info = {\n    MBEDTLS_PK_ECKEY,\n    \"EC\",\n    eckey_get_bitlen,\n    eckey_can_do,\n#if defined(MBEDTLS_ECDSA_C)\n    eckey_verify_wrap,\n    eckey_sign_wrap,\n#else\n    NULL,\n    NULL,\n#endif\n    NULL,\n    NULL,\n    eckey_check_pair,\n    eckey_alloc_wrap,\n    eckey_free_wrap,\n    eckey_debug,\n};\n\n/*\n * EC key restricted to ECDH\n */\nstatic int eckeydh_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_ECKEY ||\n            type == MBEDTLS_PK_ECKEY_DH );\n}\n\nconst mbedtls_pk_info_t mbedtls_eckeydh_info = {\n    MBEDTLS_PK_ECKEY_DH,\n    \"EC_DH\",\n    eckey_get_bitlen,         /* Same underlying key structure */\n    eckeydh_can_do,\n    NULL,\n    NULL,\n    NULL,\n    NULL,\n    eckey_check_pair,\n    eckey_alloc_wrap,       /* Same underlying key structure */\n    eckey_free_wrap,        /* Same underlying key structure */\n    eckey_debug,            /* Same underlying key structure */\n};\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_ECDSA_C)\nstatic int ecdsa_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_ECDSA );\n}\n\nstatic int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                       const unsigned char *hash, size_t hash_len,\n                       const unsigned char *sig, size_t sig_len )\n{\n    int ret;\n    ((void) md_alg);\n\n    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,\n                                hash, hash_len, sig, sig_len );\n\n    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )\n        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );\n\n    return( ret );\n}\n\nstatic int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,\n                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );\n}\n\nstatic void *ecdsa_alloc_wrap( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );\n\n    if( ctx != NULL )\n        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void ecdsa_free_wrap( void *ctx )\n{\n    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nconst mbedtls_pk_info_t mbedtls_ecdsa_info = {\n    MBEDTLS_PK_ECDSA,\n    \"ECDSA\",\n    eckey_get_bitlen,     /* Compatible key structures */\n    ecdsa_can_do,\n    ecdsa_verify_wrap,\n    ecdsa_sign_wrap,\n    NULL,\n    NULL,\n    eckey_check_pair,   /* Compatible key structures */\n    ecdsa_alloc_wrap,\n    ecdsa_free_wrap,\n    eckey_debug,        /* Compatible key structures */\n};\n#endif /* MBEDTLS_ECDSA_C */\n\n#if defined(MBEDTLS_PK_RSA_ALT_SUPPORT)\n/*\n * Support for alternative RSA-private implementations\n */\n\nstatic int rsa_alt_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_RSA );\n}\n\nstatic size_t rsa_alt_get_bitlen( const void *ctx )\n{\n    const mbedtls_rsa_alt_context *rsa_alt = (const mbedtls_rsa_alt_context *) ctx;\n\n    return( 8 * rsa_alt->key_len_func( rsa_alt->key ) );\n}\n\nstatic int rsa_alt_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_alt_context *rsa_alt = (mbedtls_rsa_alt_context *) ctx;\n\n#if SIZE_MAX > UINT_MAX\n    if( UINT_MAX < hash_len )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n#endif /* SIZE_MAX > UINT_MAX */\n\n    *sig_len = rsa_alt->key_len_func( rsa_alt->key );\n\n    return( rsa_alt->sign_func( rsa_alt->key, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,\n                md_alg, (unsigned int) hash_len, hash, sig ) );\n}\n\nstatic int rsa_alt_decrypt_wrap( void *ctx,\n                    const unsigned char *input, size_t ilen,\n                    unsigned char *output, size_t *olen, size_t osize,\n                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_alt_context *rsa_alt = (mbedtls_rsa_alt_context *) ctx;\n\n    ((void) f_rng);\n    ((void) p_rng);\n\n    if( ilen != rsa_alt->key_len_func( rsa_alt->key ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    return( rsa_alt->decrypt_func( rsa_alt->key,\n                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );\n}\n\n#if defined(MBEDTLS_RSA_C)\nstatic int rsa_alt_check_pair( const void *pub, const void *prv )\n{\n    unsigned char sig[MBEDTLS_MPI_MAX_SIZE];\n    unsigned char hash[32];\n    size_t sig_len = 0;\n    int ret;\n\n    if( rsa_alt_get_bitlen( prv ) != rsa_get_bitlen( pub ) )\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n\n    memset( hash, 0x2a, sizeof( hash ) );\n\n    if( ( ret = rsa_alt_sign_wrap( (void *) prv, MBEDTLS_MD_NONE,\n                                   hash, sizeof( hash ),\n                                   sig, &sig_len, NULL, NULL ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    if( rsa_verify_wrap( (void *) pub, MBEDTLS_MD_NONE,\n                         hash, sizeof( hash ), sig, sig_len ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_RSA_C */\n\nstatic void *rsa_alt_alloc_wrap( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_alt_context ) );\n\n    if( ctx != NULL )\n        memset( ctx, 0, sizeof( mbedtls_rsa_alt_context ) );\n\n    return( ctx );\n}\n\nstatic void rsa_alt_free_wrap( void *ctx )\n{\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_rsa_alt_context ) );\n    mbedtls_free( ctx );\n}\n\nconst mbedtls_pk_info_t mbedtls_rsa_alt_info = {\n    MBEDTLS_PK_RSA_ALT,\n    \"RSA-alt\",\n    rsa_alt_get_bitlen,\n    rsa_alt_can_do,\n    NULL,\n    rsa_alt_sign_wrap,\n    rsa_alt_decrypt_wrap,\n    NULL,\n#if defined(MBEDTLS_RSA_C)\n    rsa_alt_check_pair,\n#else\n    NULL,\n#endif\n    rsa_alt_alloc_wrap,\n    rsa_alt_free_wrap,\n    NULL,\n};\n\n#endif /* MBEDTLS_PK_RSA_ALT_SUPPORT */\n\n#endif /* MBEDTLS_PK_C */\n","/*\n *  Public Key layer for parsing key files and structures\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_PK_PARSE_C)\n\n#include \"mbedtls/pk.h\"\n#include \"mbedtls/asn1.h\"\n#include \"mbedtls/oid.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_RSA_C)\n#include \"mbedtls/rsa.h\"\n#endif\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n#include \"mbedtls/ecdsa.h\"\n#endif\n#if defined(MBEDTLS_PEM_PARSE_C)\n#include \"mbedtls/pem.h\"\n#endif\n#if defined(MBEDTLS_PKCS5_C)\n#include \"mbedtls/pkcs5.h\"\n#endif\n#if defined(MBEDTLS_PKCS12_C)\n#include \"mbedtls/pkcs12.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#if defined(MBEDTLS_FS_IO)\n/*\n * Load all data from a file into a given buffer.\n *\n * The file is expected to contain either PEM or DER encoded data.\n * A terminating null byte is always appended. It is included in the announced\n * length only if the data looks like it is PEM encoded.\n */\nint mbedtls_pk_load_file( const char *path, unsigned char **buf, size_t *n )\n{\n    FILE *f;\n    long size;\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_PK_FILE_IO_ERROR );\n\n    fseek( f, 0, SEEK_END );\n    if( ( size = ftell( f ) ) == -1 )\n    {\n        fclose( f );\n        return( MBEDTLS_ERR_PK_FILE_IO_ERROR );\n    }\n    fseek( f, 0, SEEK_SET );\n\n    *n = (size_t) size;\n\n    if( *n + 1 == 0 ||\n        ( *buf = mbedtls_calloc( 1, *n + 1 ) ) == NULL )\n    {\n        fclose( f );\n        return( MBEDTLS_ERR_PK_ALLOC_FAILED );\n    }\n\n    if( fread( *buf, 1, *n, f ) != *n )\n    {\n        fclose( f );\n\n        mbedtls_platform_zeroize( *buf, *n );\n        mbedtls_free( *buf );\n\n        return( MBEDTLS_ERR_PK_FILE_IO_ERROR );\n    }\n\n    fclose( f );\n\n    (*buf)[*n] = '\\0';\n\n    if( strstr( (const char *) *buf, \"-----BEGIN \" ) != NULL )\n        ++*n;\n\n    return( 0 );\n}\n\n/*\n * Load and parse a private key\n */\nint mbedtls_pk_parse_keyfile( mbedtls_pk_context *ctx,\n                      const char *path, const char *pwd )\n{\n    int ret;\n    size_t n;\n    unsigned char *buf;\n\n    if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )\n        return( ret );\n\n    if( pwd == NULL )\n        ret = mbedtls_pk_parse_key( ctx, buf, n, NULL, 0 );\n    else\n        ret = mbedtls_pk_parse_key( ctx, buf, n,\n                (const unsigned char *) pwd, strlen( pwd ) );\n\n    mbedtls_platform_zeroize( buf, n );\n    mbedtls_free( buf );\n\n    return( ret );\n}\n\n/*\n * Load and parse a public key\n */\nint mbedtls_pk_parse_public_keyfile( mbedtls_pk_context *ctx, const char *path )\n{\n    int ret;\n    size_t n;\n    unsigned char *buf;\n\n    if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )\n        return( ret );\n\n    ret = mbedtls_pk_parse_public_key( ctx, buf, n );\n\n    mbedtls_platform_zeroize( buf, n );\n    mbedtls_free( buf );\n\n    return( ret );\n}\n#endif /* MBEDTLS_FS_IO */\n\n#if defined(MBEDTLS_ECP_C)\n/* Minimally parse an ECParameters buffer to and mbedtls_asn1_buf\n *\n * ECParameters ::= CHOICE {\n *   namedCurve         OBJECT IDENTIFIER\n *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }\n *   -- implicitCurve   NULL\n * }\n */\nstatic int pk_get_ecparams( unsigned char **p, const unsigned char *end,\n                            mbedtls_asn1_buf *params )\n{\n    int ret;\n\n    if ( end - *p < 1 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    /* Tag may be either OID or SEQUENCE */\n    params->tag = **p;\n    if( params->tag != MBEDTLS_ASN1_OID\n#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)\n            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )\n#endif\n            )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );\n    }\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    params->p = *p;\n    *p += params->len;\n\n    if( *p != end )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)\n/*\n * Parse a SpecifiedECDomain (SEC 1 C.2) and (mostly) fill the group with it.\n * WARNING: the resulting group should only be used with\n * pk_group_id_from_specified(), since its base point may not be set correctly\n * if it was encoded compressed.\n *\n *  SpecifiedECDomain ::= SEQUENCE {\n *      version SpecifiedECDomainVersion(ecdpVer1 | ecdpVer2 | ecdpVer3, ...),\n *      fieldID FieldID {{FieldTypes}},\n *      curve Curve,\n *      base ECPoint,\n *      order INTEGER,\n *      cofactor INTEGER OPTIONAL,\n *      hash HashAlgorithm OPTIONAL,\n *      ...\n *  }\n *\n * We only support prime-field as field type, and ignore hash and cofactor.\n */\nstatic int pk_group_from_specified( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )\n{\n    int ret;\n    unsigned char *p = params->p;\n    const unsigned char * const end = params->p + params->len;\n    const unsigned char *end_field, *end_curve;\n    size_t len;\n    int ver;\n\n    /* SpecifiedECDomainVersion ::= INTEGER { 1, 2, 3 } */\n    if( ( ret = mbedtls_asn1_get_int( &p, end, &ver ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ver < 1 || ver > 3 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n\n    /*\n     * FieldID { FIELD-ID:IOSet } ::= SEQUENCE { -- Finite field\n     *       fieldType FIELD-ID.&id({IOSet}),\n     *       parameters FIELD-ID.&Type({IOSet}{@fieldType})\n     * }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( ret );\n\n    end_field = p + len;\n\n    /*\n     * FIELD-ID ::= TYPE-IDENTIFIER\n     * FieldTypes FIELD-ID ::= {\n     *       { Prime-p IDENTIFIED BY prime-field } |\n     *       { Characteristic-two IDENTIFIED BY characteristic-two-field }\n     * }\n     * prime-field OBJECT IDENTIFIER ::= { id-fieldType 1 }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end_field, &len, MBEDTLS_ASN1_OID ) ) != 0 )\n        return( ret );\n\n    if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||\n        memcmp( p, MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD, len ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );\n    }\n\n    p += len;\n\n    /* Prime-p ::= INTEGER -- Field of size p. */\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    grp->pbits = mbedtls_mpi_bitlen( &grp->P );\n\n    if( p != end_field )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    /*\n     * Curve ::= SEQUENCE {\n     *       a FieldElement,\n     *       b FieldElement,\n     *       seed BIT STRING OPTIONAL\n     *       -- Shall be present if used in SpecifiedECDomain\n     *       -- with version equal to ecdpVer2 or ecdpVer3\n     * }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( ret );\n\n    end_curve = p + len;\n\n    /*\n     * FieldElement ::= OCTET STRING\n     * containing an integer in the case of a prime field\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||\n        ( ret = mbedtls_mpi_read_binary( &grp->A, p, len ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    p += len;\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||\n        ( ret = mbedtls_mpi_read_binary( &grp->B, p, len ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    p += len;\n\n    /* Ignore seed BIT STRING OPTIONAL */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_BIT_STRING ) ) == 0 )\n        p += len;\n\n    if( p != end_curve )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    /*\n     * ECPoint ::= OCTET STRING\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ( ret = mbedtls_ecp_point_read_binary( grp, &grp->G,\n                                      ( const unsigned char *) p, len ) ) != 0 )\n    {\n        /*\n         * If we can't read the point because it's compressed, cheat by\n         * reading only the X coordinate and the parity bit of Y.\n         */\n        if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||\n            ( p[0] != 0x02 && p[0] != 0x03 ) ||\n            len != mbedtls_mpi_size( &grp->P ) + 1 ||\n            mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||\n            mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||\n            mbedtls_mpi_lset( &grp->G.Z, 1 ) != 0 )\n        {\n            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n        }\n    }\n\n    p += len;\n\n    /*\n     * order INTEGER\n     */\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    grp->nbits = mbedtls_mpi_bitlen( &grp->N );\n\n    /*\n     * Allow optional elements by purposefully not enforcing p == end here.\n     */\n\n    return( 0 );\n}\n\n/*\n * Find the group id associated with an (almost filled) group as generated by\n * pk_group_from_specified(), or return an error if unknown.\n */\nstatic int pk_group_id_from_group( const mbedtls_ecp_group *grp, mbedtls_ecp_group_id *grp_id )\n{\n    int ret = 0;\n    mbedtls_ecp_group ref;\n    const mbedtls_ecp_group_id *id;\n\n    mbedtls_ecp_group_init( &ref );\n\n    for( id = mbedtls_ecp_grp_id_list(); *id != MBEDTLS_ECP_DP_NONE; id++ )\n    {\n        /* Load the group associated to that id */\n        mbedtls_ecp_group_free( &ref );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );\n\n        /* Compare to the group we were given, starting with easy tests */\n        if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&\n            mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&\n            /* For Y we may only know the parity bit, so compare only that */\n            mbedtls_mpi_get_bit( &grp->G.Y, 0 ) == mbedtls_mpi_get_bit( &ref.G.Y, 0 ) )\n        {\n            break;\n        }\n\n    }\n\ncleanup:\n    mbedtls_ecp_group_free( &ref );\n\n    *grp_id = *id;\n\n    if( ret == 0 && *id == MBEDTLS_ECP_DP_NONE )\n        ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;\n\n    return( ret );\n}\n\n/*\n * Parse a SpecifiedECDomain (SEC 1 C.2) and find the associated group ID\n */\nstatic int pk_group_id_from_specified( const mbedtls_asn1_buf *params,\n                                       mbedtls_ecp_group_id *grp_id )\n{\n    int ret;\n    mbedtls_ecp_group grp;\n\n    mbedtls_ecp_group_init( &grp );\n\n    if( ( ret = pk_group_from_specified( params, &grp ) ) != 0 )\n        goto cleanup;\n\n    ret = pk_group_id_from_group( &grp, grp_id );\n\ncleanup:\n    mbedtls_ecp_group_free( &grp );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PK_PARSE_EC_EXTENDED */\n\n/*\n * Use EC parameters to initialise an EC group\n *\n * ECParameters ::= CHOICE {\n *   namedCurve         OBJECT IDENTIFIER\n *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }\n *   -- implicitCurve   NULL\n */\nstatic int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )\n{\n    int ret;\n    mbedtls_ecp_group_id grp_id;\n\n    if( params->tag == MBEDTLS_ASN1_OID )\n    {\n        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )\n            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );\n    }\n    else\n    {\n#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)\n        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )\n            return( ret );\n#else\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n#endif\n    }\n\n    /*\n     * grp may already be initilialized; if so, make sure IDs match\n     */\n    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n\n    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * EC public key is an EC point\n *\n * The caller is responsible for clearing the structure upon failure if\n * desired. Take care to pass along the possible ECP_FEATURE_UNAVAILABLE\n * return code of mbedtls_ecp_point_read_binary() and leave p in a usable state.\n */\nstatic int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,\n                            mbedtls_ecp_keypair *key )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,\n                    (const unsigned char *) *p, end - *p ) ) == 0 )\n    {\n        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );\n    }\n\n    /*\n     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed\n     */\n    *p = (unsigned char *) end;\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_RSA_C)\n/*\n *  RSAPublicKey ::= SEQUENCE {\n *      modulus           INTEGER,  -- n\n *      publicExponent    INTEGER   -- e\n *  }\n */\nstatic int pk_get_rsapubkey( unsigned char **p,\n                             const unsigned char *end,\n                             mbedtls_rsa_context *rsa )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );\n\n    if( *p + len != end )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    /* Import N */\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );\n\n    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,\n                                        NULL, 0, NULL, 0 ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );\n\n    *p += len;\n\n    /* Import E */\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );\n\n    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,\n                                        NULL, 0, *p, len ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );\n\n    *p += len;\n\n    if( mbedtls_rsa_complete( rsa ) != 0 ||\n        mbedtls_rsa_check_pubkey( rsa ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );\n    }\n\n    if( *p != end )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_RSA_C */\n\n/* Get a PK algorithm identifier\n *\n *  AlgorithmIdentifier  ::=  SEQUENCE  {\n *       algorithm               OBJECT IDENTIFIER,\n *       parameters              ANY DEFINED BY algorithm OPTIONAL  }\n */\nstatic int pk_get_pk_alg( unsigned char **p,\n                          const unsigned char *end,\n                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )\n{\n    int ret;\n    mbedtls_asn1_buf alg_oid;\n\n    memset( params, 0, sizeof(mbedtls_asn1_buf) );\n\n    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );\n\n    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    /*\n     * No parameters with RSA (only for EC)\n     */\n    if( *pk_alg == MBEDTLS_PK_RSA &&\n            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||\n                params->len != 0 ) )\n    {\n        return( MBEDTLS_ERR_PK_INVALID_ALG );\n    }\n\n    return( 0 );\n}\n\n/*\n *  SubjectPublicKeyInfo  ::=  SEQUENCE  {\n *       algorithm            AlgorithmIdentifier,\n *       subjectPublicKey     BIT STRING }\n */\nint mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,\n                        mbedtls_pk_context *pk )\n{\n    int ret;\n    size_t len;\n    mbedtls_asn1_buf alg_params;\n    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;\n    const mbedtls_pk_info_t *pk_info;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,\n                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = *p + len;\n\n    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );\n\n    if( *p + len != end )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_RSA_C)\n    if( pk_alg == MBEDTLS_PK_RSA )\n    {\n        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );\n    } else\n#endif /* MBEDTLS_RSA_C */\n#if defined(MBEDTLS_ECP_C)\n    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )\n    {\n        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );\n        if( ret == 0 )\n            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );\n    } else\n#endif /* MBEDTLS_ECP_C */\n        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;\n\n    if( ret == 0 && *p != end )\n        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY\n              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;\n\n    if( ret != 0 )\n        mbedtls_pk_free( pk );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_RSA_C)\n/*\n * Parse a PKCS#1 encoded private RSA key\n */\nstatic int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,\n                                   const unsigned char *key,\n                                   size_t keylen )\n{\n    int ret, version;\n    size_t len;\n    unsigned char *p, *end;\n\n    mbedtls_mpi T;\n    mbedtls_mpi_init( &T );\n\n    p = (unsigned char *) key;\n    end = p + keylen;\n\n    /*\n     * This function parses the RSAPrivateKey (PKCS#1)\n     *\n     *  RSAPrivateKey ::= SEQUENCE {\n     *      version           Version,\n     *      modulus           INTEGER,  -- n\n     *      publicExponent    INTEGER,  -- e\n     *      privateExponent   INTEGER,  -- d\n     *      prime1            INTEGER,  -- p\n     *      prime2            INTEGER,  -- q\n     *      exponent1         INTEGER,  -- d mod (p-1)\n     *      exponent2         INTEGER,  -- d mod (q-1)\n     *      coefficient       INTEGER,  -- (inverse of q) mod p\n     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL\n     *  }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = p + len;\n\n    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    if( version != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );\n    }\n\n    /* Import N */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,\n                                        NULL, 0, NULL, 0 ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Import E */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,\n                                        NULL, 0, p, len ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Import D */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,\n                                        p, len, NULL, 0 ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Import P */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,\n                                        NULL, 0, NULL, 0 ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Import Q */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,\n                                        NULL, 0, NULL, 0 ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Complete the RSA private key */\n    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )\n        goto cleanup;\n\n    /* Check optional parameters */\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||\n        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||\n        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )\n        goto cleanup;\n\n    if( p != end )\n    {\n        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &T );\n\n    if( ret != 0 )\n    {\n        /* Wrap error code if it's coming from a lower level */\n        if( ( ret & 0xff80 ) == 0 )\n            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;\n        else\n            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;\n\n        mbedtls_rsa_free( rsa );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_ECP_C)\n/*\n * Parse a SEC1 encoded private EC key\n */\nstatic int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,\n                                  const unsigned char *key,\n                                  size_t keylen )\n{\n    int ret;\n    int version, pubkey_done;\n    size_t len;\n    mbedtls_asn1_buf params;\n    unsigned char *p = (unsigned char *) key;\n    unsigned char *end = p + keylen;\n    unsigned char *end2;\n\n    /*\n     * RFC 5915, or SEC1 Appendix C.4\n     *\n     * ECPrivateKey ::= SEQUENCE {\n     *      version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\n     *      privateKey     OCTET STRING,\n     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\n     *      publicKey  [1] BIT STRING OPTIONAL\n     *    }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = p + len;\n\n    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( version != 1 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )\n    {\n        mbedtls_ecp_keypair_free( eck );\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    p += len;\n\n    pubkey_done = 0;\n    if( p != end )\n    {\n        /*\n         * Is 'parameters' present?\n         */\n        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )\n        {\n            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||\n                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )\n            {\n                mbedtls_ecp_keypair_free( eck );\n                return( ret );\n            }\n        }\n        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )\n        {\n            mbedtls_ecp_keypair_free( eck );\n            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n        }\n    }\n\n    if( p != end )\n    {\n        /*\n         * Is 'publickey' present? If not, or if we can't read it (eg because it\n         * is compressed), create it from the private key.\n         */\n        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )\n        {\n            end2 = p + len;\n\n            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )\n                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n            if( p + len != end2 )\n                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )\n                pubkey_done = 1;\n            else\n            {\n                /*\n                 * The only acceptable failure mode of pk_get_ecpubkey() above\n                 * is if the point format is not recognized.\n                 */\n                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )\n                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n            }\n        }\n        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )\n        {\n            mbedtls_ecp_keypair_free( eck );\n            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n        }\n    }\n\n    if( ! pubkey_done &&\n        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,\n                                                      NULL, NULL ) ) != 0 )\n    {\n        mbedtls_ecp_keypair_free( eck );\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )\n    {\n        mbedtls_ecp_keypair_free( eck );\n        return( ret );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_ECP_C */\n\n/*\n * Parse an unencrypted PKCS#8 encoded private key\n *\n * Notes:\n *\n * - This function does not own the key buffer. It is the\n *   responsibility of the caller to take care of zeroizing\n *   and freeing it after use.\n *\n * - The function is responsible for freeing the provided\n *   PK context on failure.\n *\n */\nstatic int pk_parse_key_pkcs8_unencrypted_der(\n                                    mbedtls_pk_context *pk,\n                                    const unsigned char* key,\n                                    size_t keylen )\n{\n    int ret, version;\n    size_t len;\n    mbedtls_asn1_buf params;\n    unsigned char *p = (unsigned char *) key;\n    unsigned char *end = p + keylen;\n    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;\n    const mbedtls_pk_info_t *pk_info;\n\n    /*\n     * This function parses the PrivateKeyInfo object (PKCS#8 v1.2 = RFC 5208)\n     *\n     *    PrivateKeyInfo ::= SEQUENCE {\n     *      version                   Version,\n     *      privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n     *      privateKey                PrivateKey,\n     *      attributes           [0]  IMPLICIT Attributes OPTIONAL }\n     *\n     *    Version ::= INTEGER\n     *    PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier\n     *    PrivateKey ::= OCTET STRING\n     *\n     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey\n     */\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = p + len;\n\n    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( version != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );\n\n    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( len < 1 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_RSA_C)\n    if( pk_alg == MBEDTLS_PK_RSA )\n    {\n        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n            return( ret );\n        }\n    } else\n#endif /* MBEDTLS_RSA_C */\n#if defined(MBEDTLS_ECP_C)\n    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )\n    {\n        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||\n            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n            return( ret );\n        }\n    } else\n#endif /* MBEDTLS_ECP_C */\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    return( 0 );\n}\n\n/*\n * Parse an encrypted PKCS#8 encoded private key\n *\n * To save space, the decryption happens in-place on the given key buffer.\n * Also, while this function may modify the keybuffer, it doesn't own it,\n * and instead it is the responsibility of the caller to zeroize and properly\n * free it after use.\n *\n */\n#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)\nstatic int pk_parse_key_pkcs8_encrypted_der(\n                                    mbedtls_pk_context *pk,\n                                    unsigned char *key, size_t keylen,\n                                    const unsigned char *pwd, size_t pwdlen )\n{\n    int ret, decrypted = 0;\n    size_t len;\n    unsigned char *buf;\n    unsigned char *p, *end;\n    mbedtls_asn1_buf pbe_alg_oid, pbe_params;\n#if defined(MBEDTLS_PKCS12_C)\n    mbedtls_cipher_type_t cipher_alg;\n    mbedtls_md_type_t md_alg;\n#endif\n\n    p = key;\n    end = p + keylen;\n\n    if( pwdlen == 0 )\n        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );\n\n    /*\n     * This function parses the EncryptedPrivateKeyInfo object (PKCS#8)\n     *\n     *  EncryptedPrivateKeyInfo ::= SEQUENCE {\n     *    encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n     *    encryptedData        EncryptedData\n     *  }\n     *\n     *  EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n     *\n     *  EncryptedData ::= OCTET STRING\n     *\n     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo\n     *\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = p + len;\n\n    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    buf = p;\n\n    /*\n     * Decrypt EncryptedData with appropriate PBE\n     */\n#if defined(MBEDTLS_PKCS12_C)\n    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )\n    {\n        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,\n                                cipher_alg, md_alg,\n                                pwd, pwdlen, p, len, buf ) ) != 0 )\n        {\n            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )\n                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n\n            return( ret );\n        }\n\n        decrypted = 1;\n    }\n    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )\n    {\n        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,\n                                             MBEDTLS_PKCS12_PBE_DECRYPT,\n                                             pwd, pwdlen,\n                                             p, len, buf ) ) != 0 )\n        {\n            return( ret );\n        }\n\n        // Best guess for password mismatch when using RC4. If first tag is\n        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE\n        //\n        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )\n            return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n\n        decrypted = 1;\n    }\n    else\n#endif /* MBEDTLS_PKCS12_C */\n#if defined(MBEDTLS_PKCS5_C)\n    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )\n    {\n        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,\n                                  p, len, buf ) ) != 0 )\n        {\n            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )\n                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n\n            return( ret );\n        }\n\n        decrypted = 1;\n    }\n    else\n#endif /* MBEDTLS_PKCS5_C */\n    {\n        ((void) pwd);\n    }\n\n    if( decrypted == 0 )\n        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );\n\n    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );\n}\n#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */\n\n/*\n * Parse a private key\n */\nint mbedtls_pk_parse_key( mbedtls_pk_context *pk,\n                  const unsigned char *key, size_t keylen,\n                  const unsigned char *pwd, size_t pwdlen )\n{\n    int ret;\n    const mbedtls_pk_info_t *pk_info;\n\n#if defined(MBEDTLS_PEM_PARSE_C)\n    size_t len;\n    mbedtls_pem_context pem;\n\n    mbedtls_pem_init( &pem );\n\n#if defined(MBEDTLS_RSA_C)\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN RSA PRIVATE KEY-----\",\n                               \"-----END RSA PRIVATE KEY-----\",\n                               key, pwd, pwdlen, &len );\n\n    if( ret == 0 )\n    {\n        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );\n        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||\n            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),\n                                            pem.buf, pem.buflen ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n        }\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )\n        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )\n        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n        return( ret );\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_ECP_C)\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN EC PRIVATE KEY-----\",\n                               \"-----END EC PRIVATE KEY-----\",\n                               key, pwd, pwdlen, &len );\n    if( ret == 0 )\n    {\n        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );\n\n        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||\n            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),\n                                           pem.buf, pem.buflen ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n        }\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )\n        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )\n        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n        return( ret );\n#endif /* MBEDTLS_ECP_C */\n\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN PRIVATE KEY-----\",\n                               \"-----END PRIVATE KEY-----\",\n                               key, NULL, 0, &len );\n    if( ret == 0 )\n    {\n        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,\n                                                pem.buf, pem.buflen ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n        }\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n        return( ret );\n\n#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN ENCRYPTED PRIVATE KEY-----\",\n                               \"-----END ENCRYPTED PRIVATE KEY-----\",\n                               key, NULL, 0, &len );\n    if( ret == 0 )\n    {\n        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,\n                                                      pem.buf, pem.buflen,\n                                                      pwd, pwdlen ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n        }\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n        return( ret );\n#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */\n#else\n    ((void) ret);\n    ((void) pwd);\n    ((void) pwdlen);\n#endif /* MBEDTLS_PEM_PARSE_C */\n\n    /*\n     * At this point we only know it's not a PEM formatted key. Could be any\n     * of the known DER encoded private key formats\n     *\n     * We try the different DER format parsers to see if one passes without\n     * error\n     */\n#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)\n    {\n        unsigned char *key_copy;\n\n        if( keylen == 0 )\n            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n\n        if( ( key_copy = mbedtls_calloc( 1, keylen ) ) == NULL )\n            return( MBEDTLS_ERR_PK_ALLOC_FAILED );\n\n        memcpy( key_copy, key, keylen );\n\n        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,\n                                                pwd, pwdlen );\n\n        mbedtls_platform_zeroize( key_copy, keylen );\n        mbedtls_free( key_copy );\n    }\n\n    if( ret == 0 )\n        return( 0 );\n\n    mbedtls_pk_free( pk );\n\n    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )\n    {\n        return( ret );\n    }\n#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */\n\n    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )\n        return( 0 );\n\n    mbedtls_pk_free( pk );\n\n#if defined(MBEDTLS_RSA_C)\n\n    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );\n    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||\n        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),\n                                        key, keylen ) ) != 0 )\n    {\n        mbedtls_pk_free( pk );\n    }\n    else\n    {\n        return( 0 );\n    }\n\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_ECP_C)\n\n    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );\n    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||\n        ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),\n                                       key, keylen ) ) != 0 )\n    {\n        mbedtls_pk_free( pk );\n    }\n    else\n    {\n        return( 0 );\n    }\n\n#endif /* MBEDTLS_ECP_C */\n\n    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n}\n\n/*\n * Parse a public key\n */\nint mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,\n                         const unsigned char *key, size_t keylen )\n{\n    int ret;\n    unsigned char *p;\n#if defined(MBEDTLS_RSA_C)\n    const mbedtls_pk_info_t *pk_info;\n#endif\n#if defined(MBEDTLS_PEM_PARSE_C)\n    size_t len;\n    mbedtls_pem_context pem;\n\n    mbedtls_pem_init( &pem );\n#if defined(MBEDTLS_RSA_C)\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN RSA PUBLIC KEY-----\",\n                               \"-----END RSA PUBLIC KEY-----\",\n                               key, NULL, 0, &len );\n\n    if( ret == 0 )\n    {\n        p = pem.buf;\n        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )\n            return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n        if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )\n            return( ret );\n\n        if ( ( ret = pk_get_rsapubkey( &p, p + pem.buflen, mbedtls_pk_rsa( *ctx ) ) ) != 0 )\n            mbedtls_pk_free( ctx );\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n    {\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n#endif /* MBEDTLS_RSA_C */\n\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                \"-----BEGIN PUBLIC KEY-----\",\n                \"-----END PUBLIC KEY-----\",\n                key, NULL, 0, &len );\n\n    if( ret == 0 )\n    {\n        /*\n         * Was PEM encoded\n         */\n        p = pem.buf;\n\n        ret = mbedtls_pk_parse_subpubkey( &p,  p + pem.buflen, ctx );\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n    {\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    mbedtls_pem_free( &pem );\n#endif /* MBEDTLS_PEM_PARSE_C */\n\n#if defined(MBEDTLS_RSA_C)\n    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )\n        return( ret );\n\n    p = (unsigned char *)key;\n    ret = pk_get_rsapubkey( &p, p + keylen, mbedtls_pk_rsa( *ctx ) );\n    if( ret == 0 )\n    {\n        return( ret );\n    }\n    mbedtls_pk_free( ctx );\n    if( ret != ( MBEDTLS_ERR_PK_INVALID_PUBKEY + MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )\n    {\n        return( ret );\n    }\n#endif /* MBEDTLS_RSA_C */\n    p = (unsigned char *) key;\n\n    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_PK_PARSE_C */\n","/*\n * Common and shared functions used by multiple modules in the Mbed TLS\n * library.\n *\n *  Copyright (C) 2018, Arm Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of Mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#include \"mbedtls/platform_util.h\"\n\n#include <stddef.h>\n#include <string.h>\n\n#if !defined(MBEDTLS_PLATFORM_ZEROIZE_ALT)\n/*\n * This implementation should never be optimized out by the compiler\n *\n * This implementation for mbedtls_platform_zeroize() was inspired from Colin\n * Percival's blog article at:\n *\n * http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html\n *\n * It uses a volatile function pointer to the standard memset(). Because the\n * pointer is volatile the compiler expects it to change at\n * any time and will not optimize out the call that could potentially perform\n * other operations on the input buffer instead of just setting it to 0.\n * Nevertheless, as pointed out by davidtgoldblatt on Hacker News\n * (refer to http://www.daemonology.net/blog/2014-09-05-erratum.html for\n * details), optimizations of the following form are still possible:\n *\n * if( memset_func != memset )\n *     memset_func( buf, 0, len );\n *\n * Note that it is extremely difficult to guarantee that\n * mbedtls_platform_zeroize() will not be optimized out by aggressive compilers\n * in a portable way. For this reason, Mbed TLS also provides the configuration\n * option MBEDTLS_PLATFORM_ZEROIZE_ALT, which allows users to configure\n * mbedtls_platform_zeroize() to use a suitable implementation for their\n * platform and needs.\n */\nstatic void * (* const volatile memset_func)( void *, int, size_t ) = memset;\n\nvoid mbedtls_platform_zeroize( void *buf, size_t len )\n{\n    memset_func( buf, 0, len );\n}\n#endif /* MBEDTLS_PLATFORM_ZEROIZE_ALT */\n","/*\n *  The RSA public-key cryptosystem\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n *  The following sources were referenced in the design of this implementation\n *  of the RSA algorithm:\n *\n *  [1] A method for obtaining digital signatures and public-key cryptosystems\n *      R Rivest, A Shamir, and L Adleman\n *      http://people.csail.mit.edu/rivest/pubs.html#RSA78\n *\n *  [2] Handbook of Applied Cryptography - 1997, Chapter 8\n *      Menezes, van Oorschot and Vanstone\n *\n *  [3] Malware Guard Extension: Using SGX to Conceal Cache Attacks\n *      Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice and\n *      Stefan Mangard\n *      https://arxiv.org/abs/1702.08719v2\n *\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_RSA_C)\n\n#include \"mbedtls/rsa.h\"\n#include \"mbedtls/rsa_internal.h\"\n#include \"mbedtls/oid.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_PKCS1_V21)\n#include \"mbedtls/md.h\"\n#endif\n\n#if defined(MBEDTLS_PKCS1_V15) && !defined(__OpenBSD__)\n#include <stdlib.h>\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#define mbedtls_calloc calloc\n#define mbedtls_free   free\n#endif\n\n#if !defined(MBEDTLS_RSA_ALT)\n\n#if defined(MBEDTLS_PKCS1_V15)\n/* constant-time buffer comparison */\nstatic inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )\n{\n    size_t i;\n    const unsigned char *A = (const unsigned char *) a;\n    const unsigned char *B = (const unsigned char *) b;\n    unsigned char diff = 0;\n\n    for( i = 0; i < n; i++ )\n        diff |= A[i] ^ B[i];\n\n    return( diff );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\nint mbedtls_rsa_import( mbedtls_rsa_context *ctx,\n                        const mbedtls_mpi *N,\n                        const mbedtls_mpi *P, const mbedtls_mpi *Q,\n                        const mbedtls_mpi *D, const mbedtls_mpi *E )\n{\n    int ret;\n\n    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||\n        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||\n        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||\n        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||\n        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n    }\n\n    if( N != NULL )\n        ctx->len = mbedtls_mpi_size( &ctx->N );\n\n    return( 0 );\n}\n\nint mbedtls_rsa_import_raw( mbedtls_rsa_context *ctx,\n                            unsigned char const *N, size_t N_len,\n                            unsigned char const *P, size_t P_len,\n                            unsigned char const *Q, size_t Q_len,\n                            unsigned char const *D, size_t D_len,\n                            unsigned char const *E, size_t E_len )\n{\n    int ret = 0;\n\n    if( N != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );\n        ctx->len = mbedtls_mpi_size( &ctx->N );\n    }\n\n    if( P != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );\n\n    if( Q != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );\n\n    if( D != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );\n\n    if( E != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );\n\ncleanup:\n\n    if( ret != 0 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n\n    return( 0 );\n}\n\n/*\n * Checks whether the context fields are set in such a way\n * that the RSA primitives will be able to execute without error.\n * It does *not* make guarantees for consistency of the parameters.\n */\nstatic int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,\n                              int blinding_needed )\n{\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    /* blinding_needed is only used for NO_CRT to decide whether\n     * P,Q need to be present or not. */\n    ((void) blinding_needed);\n#endif\n\n    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||\n        ctx->len > MBEDTLS_MPI_MAX_SIZE )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n\n    /*\n     * 1. Modular exponentiation needs positive, odd moduli.\n     */\n\n    /* Modular exponentiation wrt. N is always used for\n     * RSA public key operations. */\n    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||\n        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    /* Modular exponentiation for P and Q is only\n     * used for private key operations and if CRT\n     * is used. */\n    if( is_priv &&\n        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||\n          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||\n          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||\n          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n#endif /* !MBEDTLS_RSA_NO_CRT */\n\n    /*\n     * 2. Exponents must be positive\n     */\n\n    /* Always need E for public key operations */\n    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n#if defined(MBEDTLS_RSA_NO_CRT)\n    /* For private key operations, use D or DP & DQ\n     * as (unblinded) exponents. */\n    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n#else\n    if( is_priv &&\n        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||\n          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    /* Blinding shouldn't make exponents negative either,\n     * so check that P, Q >= 1 if that hasn't yet been\n     * done as part of 1. */\n#if defined(MBEDTLS_RSA_NO_CRT)\n    if( is_priv && blinding_needed &&\n        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||\n          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n#endif\n\n    /* It wouldn't lead to an error if it wasn't satisfied,\n     * but check for QP >= 1 nonetheless. */\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    if( is_priv &&\n        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n#endif\n\n    return( 0 );\n}\n\nint mbedtls_rsa_complete( mbedtls_rsa_context *ctx )\n{\n    int ret = 0;\n\n    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );\n    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );\n    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );\n    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );\n    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );\n\n    /*\n     * Check whether provided parameters are enough\n     * to deduce all others. The following incomplete\n     * parameter sets for private keys are supported:\n     *\n     * (1) P, Q missing.\n     * (2) D and potentially N missing.\n     *\n     */\n\n    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;\n    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;\n    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;\n    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;\n\n    /* These three alternatives are mutually exclusive */\n    const int is_priv = n_missing || pq_missing || d_missing;\n\n    if( !is_priv && !is_pub )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /*\n     * Step 1: Deduce N if P, Q are provided.\n     */\n\n    if( !have_N && have_P && have_Q )\n    {\n        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,\n                                         &ctx->Q ) ) != 0 )\n        {\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n        }\n\n        ctx->len = mbedtls_mpi_size( &ctx->N );\n    }\n\n    /*\n     * Step 2: Deduce and verify all remaining core parameters.\n     */\n\n    if( pq_missing )\n    {\n        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,\n                                         &ctx->P, &ctx->Q );\n        if( ret != 0 )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n\n    }\n    else if( d_missing )\n    {\n        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,\n                                                         &ctx->Q,\n                                                         &ctx->E,\n                                                         &ctx->D ) ) != 0 )\n        {\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n        }\n    }\n\n    /*\n     * Step 3: Deduce all additional parameters specific\n     *         to our current RSA implementation.\n     */\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    if( is_priv )\n    {\n        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,\n                                      &ctx->DP, &ctx->DQ, &ctx->QP );\n        if( ret != 0 )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n    }\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    /*\n     * Step 3: Basic sanity checks\n     */\n\n    return( rsa_check_context( ctx, is_priv, 1 ) );\n}\n\nint mbedtls_rsa_export_raw( const mbedtls_rsa_context *ctx,\n                            unsigned char *N, size_t N_len,\n                            unsigned char *P, size_t P_len,\n                            unsigned char *Q, size_t Q_len,\n                            unsigned char *D, size_t D_len,\n                            unsigned char *E, size_t E_len )\n{\n    int ret = 0;\n\n    /* Check if key is private or public */\n    const int is_priv =\n        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;\n\n    if( !is_priv )\n    {\n        /* If we're trying to export private parameters for a public key,\n         * something must be wrong. */\n        if( P != NULL || Q != NULL || D != NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    }\n\n    if( N != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->N, N, N_len ) );\n\n    if( P != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->P, P, P_len ) );\n\n    if( Q != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->Q, Q, Q_len ) );\n\n    if( D != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->D, D, D_len ) );\n\n    if( E != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->E, E, E_len ) );\n\ncleanup:\n\n    return( ret );\n}\n\nint mbedtls_rsa_export( const mbedtls_rsa_context *ctx,\n                        mbedtls_mpi *N, mbedtls_mpi *P, mbedtls_mpi *Q,\n                        mbedtls_mpi *D, mbedtls_mpi *E )\n{\n    int ret;\n\n    /* Check if key is private or public */\n    int is_priv =\n        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;\n\n    if( !is_priv )\n    {\n        /* If we're trying to export private parameters for a public key,\n         * something must be wrong. */\n        if( P != NULL || Q != NULL || D != NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    }\n\n    /* Export all requested core parameters. */\n\n    if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||\n        ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||\n        ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||\n        ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||\n        ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )\n    {\n        return( ret );\n    }\n\n    return( 0 );\n}\n\n/*\n * Export CRT parameters\n * This must also be implemented if CRT is not used, for being able to\n * write DER encoded RSA keys. The helper function mbedtls_rsa_deduce_crt\n * can be used in this case.\n */\nint mbedtls_rsa_export_crt( const mbedtls_rsa_context *ctx,\n                            mbedtls_mpi *DP, mbedtls_mpi *DQ, mbedtls_mpi *QP )\n{\n    int ret;\n\n    /* Check if key is private or public */\n    int is_priv =\n        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;\n\n    if( !is_priv )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    /* Export all requested blinding parameters. */\n    if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||\n        ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||\n        ( QP != NULL && ( ret = mbedtls_mpi_copy( QP, &ctx->QP ) ) != 0 ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n    }\n#else\n    if( ( ret = mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,\n                                        DP, DQ, QP ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n    }\n#endif\n\n    return( 0 );\n}\n\n/*\n * Initialize an RSA context\n */\nvoid mbedtls_rsa_init( mbedtls_rsa_context *ctx,\n               int padding,\n               int hash_id )\n{\n    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );\n\n    mbedtls_rsa_set_padding( ctx, padding, hash_id );\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_init( &ctx->mutex );\n#endif\n}\n\n/*\n * Set padding for an existing RSA context\n */\nvoid mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )\n{\n    ctx->padding = padding;\n    ctx->hash_id = hash_id;\n}\n\n/*\n * Get length in bytes of RSA modulus\n */\n\nsize_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )\n{\n    return( ctx->len );\n}\n\n\n#if defined(MBEDTLS_GENPRIME)\n\n/*\n * Generate an RSA keypair\n *\n * This generation method follows the RSA key pair generation procedure of\n * FIPS 186-4 if 2^16 < exponent < 2^256 and nbits = 2048 or nbits = 3072.\n */\nint mbedtls_rsa_gen_key( mbedtls_rsa_context *ctx,\n                 int (*f_rng)(void *, unsigned char *, size_t),\n                 void *p_rng,\n                 unsigned int nbits, int exponent )\n{\n    int ret;\n    mbedtls_mpi H, G, L;\n\n    if( f_rng == NULL || nbits < 128 || exponent < 3 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    if( nbits % 2 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &H );\n    mbedtls_mpi_init( &G );\n    mbedtls_mpi_init( &L );\n\n    /*\n     * find primes P and Q with Q < P so that:\n     * 1.  |P-Q| > 2^( nbits / 2 - 100 )\n     * 2.  GCD( E, (P-1)*(Q-1) ) == 1\n     * 3.  E^-1 mod LCM(P-1, Q-1) > 2^( nbits / 2 )\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->E, exponent ) );\n\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1, 0,\n                                                f_rng, p_rng ) );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->Q, nbits >> 1, 0,\n                                                f_rng, p_rng ) );\n\n        /* make sure the difference between p and q is not too small (FIPS 186-4 §B.3.3 step 5.4) */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &H, &ctx->P, &ctx->Q ) );\n        if( mbedtls_mpi_bitlen( &H ) <= ( ( nbits >= 200 ) ? ( ( nbits >> 1 ) - 99 ) : 0 ) )\n            continue;\n\n        /* not required by any standards, but some users rely on the fact that P > Q */\n        if( H.s < 0 )\n            mbedtls_mpi_swap( &ctx->P, &ctx->Q );\n\n        /* Temporarily replace P,Q by P-1, Q-1 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->P, &ctx->P, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->Q, &ctx->Q, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &ctx->P, &ctx->Q ) );\n\n        /* check GCD( E, (P-1)*(Q-1) ) == 1 (FIPS 186-4 §B.3.1 criterion 2(a)) */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );\n        if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )\n            continue;\n\n        /* compute smallest possible D = E^-1 mod LCM(P-1, Q-1) (FIPS 186-4 §B.3.1 criterion 3(b)) */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->P, &ctx->Q ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L, NULL, &H, &G ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->D, &ctx->E, &L ) );\n\n        if( mbedtls_mpi_bitlen( &ctx->D ) <= ( ( nbits + 1 ) / 2 ) ) // (FIPS 186-4 §B.3.1 criterion 3(a))\n            continue;\n\n        break;\n    }\n    while( 1 );\n\n    /* Restore P,Q */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->P,  &ctx->P, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->Q,  &ctx->Q, 1 ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P, &ctx->Q ) );\n\n    ctx->len = mbedtls_mpi_size( &ctx->N );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    /*\n     * DP = D mod (P - 1)\n     * DQ = D mod (Q - 1)\n     * QP = Q^-1 mod P\n     */\n    MBEDTLS_MPI_CHK( mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,\n                                             &ctx->DP, &ctx->DQ, &ctx->QP ) );\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    /* Double-check */\n    MBEDTLS_MPI_CHK( mbedtls_rsa_check_privkey( ctx ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &H );\n    mbedtls_mpi_free( &G );\n    mbedtls_mpi_free( &L );\n\n    if( ret != 0 )\n    {\n        mbedtls_rsa_free( ctx );\n        return( MBEDTLS_ERR_RSA_KEY_GEN_FAILED + ret );\n    }\n\n    return( 0 );\n}\n\n#endif /* MBEDTLS_GENPRIME */\n\n/*\n * Check a public RSA key\n */\nint mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )\n{\n    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n\n    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||\n        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||\n        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    return( 0 );\n}\n\n/*\n * Check for the consistency of all fields in an RSA private key context\n */\nint mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )\n{\n    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||\n        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,\n                                     &ctx->D, &ctx->E, NULL, NULL ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,\n                                       &ctx->DP, &ctx->DQ, &ctx->QP ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n#endif\n\n    return( 0 );\n}\n\n/*\n * Check if contexts holding a public and private key match\n */\nint mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,\n                                const mbedtls_rsa_context *prv )\n{\n    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||\n        mbedtls_rsa_check_privkey( prv ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||\n        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    return( 0 );\n}\n\n/*\n * Do an RSA public key operation\n */\nint mbedtls_rsa_public( mbedtls_rsa_context *ctx,\n                const unsigned char *input,\n                unsigned char *output )\n{\n    int ret;\n    size_t olen;\n    mbedtls_mpi T;\n\n    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &T );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );\n\n    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )\n    {\n        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    olen = ctx->len;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );\n\ncleanup:\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    mbedtls_mpi_free( &T );\n\n    if( ret != 0 )\n        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );\n\n    return( 0 );\n}\n\n/*\n * Generate or update blinding values, see section 10 of:\n *  KOCHER, Paul C. Timing attacks on implementations of Diffie-Hellman, RSA,\n *  DSS, and other systems. In : Advances in Cryptology-CRYPTO'96. Springer\n *  Berlin Heidelberg, 1996. p. 104-113.\n */\nstatic int rsa_prepare_blinding( mbedtls_rsa_context *ctx,\n                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret, count = 0;\n\n    if( ctx->Vf.p != NULL )\n    {\n        /* We already have blinding values, just update them by squaring */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );\n\n        goto cleanup;\n    }\n\n    /* Unblinding value: Vf = random number, invertible mod N */\n    do {\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_RSA_RNG_FAILED );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );\n    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );\n\n    /* Blinding value: Vi =  Vf^(-e) mod N */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );\n\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Exponent blinding supposed to prevent side-channel attacks using multiple\n * traces of measurements to recover the RSA key. The more collisions are there,\n * the more bits of the key can be recovered. See [3].\n *\n * Collecting n collisions with m bit long blinding value requires 2^(m-m/n)\n * observations on avarage.\n *\n * For example with 28 byte blinding to achieve 2 collisions the adversary has\n * to make 2^112 observations on avarage.\n *\n * (With the currently (as of 2017 April) known best algorithms breaking 2048\n * bit RSA requires approximately as much time as trying out 2^112 random keys.\n * Thus in this sense with 28 byte blinding the security is not reduced by\n * side-channel attacks like the one in [3])\n *\n * This countermeasure does not help if the key recovery is possible with a\n * single trace.\n */\n#define RSA_EXPONENT_BLINDING 28\n\n/*\n * Do an RSA private key operation\n */\nint mbedtls_rsa_private( mbedtls_rsa_context *ctx,\n                 int (*f_rng)(void *, unsigned char *, size_t),\n                 void *p_rng,\n                 const unsigned char *input,\n                 unsigned char *output )\n{\n    int ret;\n    size_t olen;\n\n    /* Temporary holding the result */\n    mbedtls_mpi T;\n\n    /* Temporaries holding P-1, Q-1 and the\n     * exponent blinding factor, respectively. */\n    mbedtls_mpi P1, Q1, R;\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    /* Temporaries holding the results mod p resp. mod q. */\n    mbedtls_mpi TP, TQ;\n\n    /* Temporaries holding the blinded exponents for\n     * the mod p resp. mod q computation (if used). */\n    mbedtls_mpi DP_blind, DQ_blind;\n\n    /* Pointers to actual exponents to be used - either the unblinded\n     * or the blinded ones, depending on the presence of a PRNG. */\n    mbedtls_mpi *DP = &ctx->DP;\n    mbedtls_mpi *DQ = &ctx->DQ;\n#else\n    /* Temporary holding the blinded exponent (if used). */\n    mbedtls_mpi D_blind;\n\n    /* Pointer to actual exponent to be used - either the unblinded\n     * or the blinded one, depending on the presence of a PRNG. */\n    mbedtls_mpi *D = &ctx->D;\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    /* Temporaries holding the initial input and the double\n     * checked result; should be the same in the end. */\n    mbedtls_mpi I, C;\n\n    if( rsa_check_context( ctx, 1             /* private key checks */,\n                                f_rng != NULL /* blinding y/n       */ ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    /* MPI Initialization */\n    mbedtls_mpi_init( &T );\n\n    mbedtls_mpi_init( &P1 );\n    mbedtls_mpi_init( &Q1 );\n    mbedtls_mpi_init( &R );\n\n    if( f_rng != NULL )\n    {\n#if defined(MBEDTLS_RSA_NO_CRT)\n        mbedtls_mpi_init( &D_blind );\n#else\n        mbedtls_mpi_init( &DP_blind );\n        mbedtls_mpi_init( &DQ_blind );\n#endif\n    }\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );\n#endif\n\n    mbedtls_mpi_init( &I );\n    mbedtls_mpi_init( &C );\n\n    /* End of MPI initialization */\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );\n    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )\n    {\n        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );\n\n    if( f_rng != NULL )\n    {\n        /*\n         * Blinding\n         * T = T * Vi mod N\n         */\n        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );\n\n        /*\n         * Exponent blinding\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );\n\n#if defined(MBEDTLS_RSA_NO_CRT)\n        /*\n         * D_blind = ( P - 1 ) * ( Q - 1 ) * R + D\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,\n                         f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &D_blind, &P1, &Q1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &D_blind, &D_blind, &R ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &D_blind, &D_blind, &ctx->D ) );\n\n        D = &D_blind;\n#else\n        /*\n         * DP_blind = ( P - 1 ) * R + DP\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,\n                         f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,\n                    &ctx->DP ) );\n\n        DP = &DP_blind;\n\n        /*\n         * DQ_blind = ( Q - 1 ) * R + DQ\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,\n                         f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,\n                    &ctx->DQ ) );\n\n        DQ = &DQ_blind;\n#endif /* MBEDTLS_RSA_NO_CRT */\n    }\n\n#if defined(MBEDTLS_RSA_NO_CRT)\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, D, &ctx->N, &ctx->RN ) );\n#else\n    /*\n     * Faster decryption using the CRT\n     *\n     * TP = input ^ dP mod P\n     * TQ = input ^ dQ mod Q\n     */\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );\n\n    /*\n     * T = (TP - TQ) * (Q^-1 mod P) mod P\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );\n\n    /*\n     * T = TQ + T * Q\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    if( f_rng != NULL )\n    {\n        /*\n         * Unblind\n         * T = T * Vf mod N\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );\n    }\n\n    /* Verify the result to prevent glitching attacks. */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,\n                                          &ctx->N, &ctx->RN ) );\n    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    olen = ctx->len;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );\n\ncleanup:\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    mbedtls_mpi_free( &P1 );\n    mbedtls_mpi_free( &Q1 );\n    mbedtls_mpi_free( &R );\n\n    if( f_rng != NULL )\n    {\n#if defined(MBEDTLS_RSA_NO_CRT)\n        mbedtls_mpi_free( &D_blind );\n#else\n        mbedtls_mpi_free( &DP_blind );\n        mbedtls_mpi_free( &DQ_blind );\n#endif\n    }\n\n    mbedtls_mpi_free( &T );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );\n#endif\n\n    mbedtls_mpi_free( &C );\n    mbedtls_mpi_free( &I );\n\n    if( ret != 0 )\n        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_PKCS1_V21)\n/**\n * Generate and apply the MGF1 operation (from PKCS#1 v2.1) to a buffer.\n *\n * \\param dst       buffer to mask\n * \\param dlen      length of destination buffer\n * \\param src       source of the mask generation\n * \\param slen      length of the source buffer\n * \\param md_ctx    message digest context to use\n */\nstatic int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,\n                      size_t slen, mbedtls_md_context_t *md_ctx )\n{\n    unsigned char mask[MBEDTLS_MD_MAX_SIZE];\n    unsigned char counter[4];\n    unsigned char *p;\n    unsigned int hlen;\n    size_t i, use_len;\n    int ret = 0;\n\n    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );\n    memset( counter, 0, 4 );\n\n    hlen = mbedtls_md_get_size( md_ctx->md_info );\n\n    /* Generate and apply dbMask */\n    p = dst;\n\n    while( dlen > 0 )\n    {\n        use_len = hlen;\n        if( dlen < hlen )\n            use_len = dlen;\n\n        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )\n            goto exit;\n\n        for( i = 0; i < use_len; ++i )\n            *p++ ^= mask[i];\n\n        counter[3]++;\n\n        dlen -= use_len;\n    }\n\nexit:\n    mbedtls_platform_zeroize( mask, sizeof( mask ) );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V21)\n/*\n * Implementation of the PKCS#1 v2.1 RSAES-OAEP-ENCRYPT function\n */\nint mbedtls_rsa_rsaes_oaep_encrypt( mbedtls_rsa_context *ctx,\n                            int (*f_rng)(void *, unsigned char *, size_t),\n                            void *p_rng,\n                            int mode,\n                            const unsigned char *label, size_t label_len,\n                            size_t ilen,\n                            const unsigned char *input,\n                            unsigned char *output )\n{\n    size_t olen;\n    int ret;\n    unsigned char *p = output;\n    unsigned int hlen;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    if( f_rng == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    olen = ctx->len;\n    hlen = mbedtls_md_get_size( md_info );\n\n    /* first comparison checks for overflow */\n    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    memset( output, 0, olen );\n\n    *p++ = 0;\n\n    /* Generate a random octet string seed */\n    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )\n        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );\n\n    p += hlen;\n\n    /* Construct DB */\n    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )\n        return( ret );\n    p += hlen;\n    p += olen - 2 * hlen - 2 - ilen;\n    *p++ = 1;\n    memcpy( p, input, ilen );\n\n    mbedtls_md_init( &md_ctx );\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )\n        goto exit;\n\n    /* maskedDB: Apply dbMask to DB */\n    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,\n                          &md_ctx ) ) != 0 )\n        goto exit;\n\n    /* maskedSeed: Apply seedMask to seed */\n    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,\n                          &md_ctx ) ) != 0 )\n        goto exit;\n\nexit:\n    mbedtls_md_free( &md_ctx );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( ( mode == MBEDTLS_RSA_PUBLIC )\n            ? mbedtls_rsa_public(  ctx, output, output )\n            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V15)\n/*\n * Implementation of the PKCS#1 v2.1 RSAES-PKCS1-V1_5-ENCRYPT function\n */\nint mbedtls_rsa_rsaes_pkcs1_v15_encrypt( mbedtls_rsa_context *ctx,\n                                 int (*f_rng)(void *, unsigned char *, size_t),\n                                 void *p_rng,\n                                 int mode, size_t ilen,\n                                 const unsigned char *input,\n                                 unsigned char *output )\n{\n    size_t nb_pad, olen;\n    int ret;\n    unsigned char *p = output;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    // We don't check p_rng because it won't be dereferenced here\n    if( f_rng == NULL || input == NULL || output == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    olen = ctx->len;\n\n    /* first comparison checks for overflow */\n    if( ilen + 11 < ilen || olen < ilen + 11 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    nb_pad = olen - 3 - ilen;\n\n    *p++ = 0;\n    if( mode == MBEDTLS_RSA_PUBLIC )\n    {\n        *p++ = MBEDTLS_RSA_CRYPT;\n\n        while( nb_pad-- > 0 )\n        {\n            int rng_dl = 100;\n\n            do {\n                ret = f_rng( p_rng, p, 1 );\n            } while( *p == 0 && --rng_dl && ret == 0 );\n\n            /* Check if RNG failed to generate data */\n            if( rng_dl == 0 || ret != 0 )\n                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );\n\n            p++;\n        }\n    }\n    else\n    {\n        *p++ = MBEDTLS_RSA_SIGN;\n\n        while( nb_pad-- > 0 )\n            *p++ = 0xFF;\n    }\n\n    *p++ = 0;\n    memcpy( p, input, ilen );\n\n    return( ( mode == MBEDTLS_RSA_PUBLIC )\n            ? mbedtls_rsa_public(  ctx, output, output )\n            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Add the message padding, then do an RSA operation\n */\nint mbedtls_rsa_pkcs1_encrypt( mbedtls_rsa_context *ctx,\n                       int (*f_rng)(void *, unsigned char *, size_t),\n                       void *p_rng,\n                       int mode, size_t ilen,\n                       const unsigned char *input,\n                       unsigned char *output )\n{\n    switch( ctx->padding )\n    {\n#if defined(MBEDTLS_PKCS1_V15)\n        case MBEDTLS_RSA_PKCS_V15:\n            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,\n                                                input, output );\n#endif\n\n#if defined(MBEDTLS_PKCS1_V21)\n        case MBEDTLS_RSA_PKCS_V21:\n            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,\n                                           ilen, input, output );\n#endif\n\n        default:\n            return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n    }\n}\n\n#if defined(MBEDTLS_PKCS1_V21)\n/*\n * Implementation of the PKCS#1 v2.1 RSAES-OAEP-DECRYPT function\n */\nint mbedtls_rsa_rsaes_oaep_decrypt( mbedtls_rsa_context *ctx,\n                            int (*f_rng)(void *, unsigned char *, size_t),\n                            void *p_rng,\n                            int mode,\n                            const unsigned char *label, size_t label_len,\n                            size_t *olen,\n                            const unsigned char *input,\n                            unsigned char *output,\n                            size_t output_max_len )\n{\n    int ret;\n    size_t ilen, i, pad_len;\n    unsigned char *p, bad, pad_done;\n    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];\n    unsigned char lhash[MBEDTLS_MD_MAX_SIZE];\n    unsigned int hlen;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n\n    /*\n     * Parameters sanity checks\n     */\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    ilen = ctx->len;\n\n    if( ilen < 16 || ilen > sizeof( buf ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    hlen = mbedtls_md_get_size( md_info );\n\n    // checking for integer underflow\n    if( 2 * hlen + 2 > ilen )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /*\n     * RSA operation\n     */\n    ret = ( mode == MBEDTLS_RSA_PUBLIC )\n          ? mbedtls_rsa_public(  ctx, input, buf )\n          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );\n\n    if( ret != 0 )\n        goto cleanup;\n\n    /*\n     * Unmask data and generate lHash\n     */\n    mbedtls_md_init( &md_ctx );\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )\n    {\n        mbedtls_md_free( &md_ctx );\n        goto cleanup;\n    }\n\n    /* seed: Apply seedMask to maskedSeed */\n    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,\n                          &md_ctx ) ) != 0 ||\n    /* DB: Apply dbMask to maskedDB */\n        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,\n                          &md_ctx ) ) != 0 )\n    {\n        mbedtls_md_free( &md_ctx );\n        goto cleanup;\n    }\n\n    mbedtls_md_free( &md_ctx );\n\n    /* Generate lHash */\n    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )\n        goto cleanup;\n\n    /*\n     * Check contents, in \"constant-time\"\n     */\n    p = buf;\n    bad = 0;\n\n    bad |= *p++; /* First byte must be 0 */\n\n    p += hlen; /* Skip seed */\n\n    /* Check lHash */\n    for( i = 0; i < hlen; i++ )\n        bad |= lhash[i] ^ *p++;\n\n    /* Get zero-padding len, but always read till end of buffer\n     * (minus one, for the 01 byte) */\n    pad_len = 0;\n    pad_done = 0;\n    for( i = 0; i < ilen - 2 * hlen - 2; i++ )\n    {\n        pad_done |= p[i];\n        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;\n    }\n\n    p += pad_len;\n    bad |= *p++ ^ 0x01;\n\n    /*\n     * The only information \"leaked\" is whether the padding was correct or not\n     * (eg, no data is copied if it was not correct). This meets the\n     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between\n     * the different error conditions.\n     */\n    if( bad != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;\n        goto cleanup;\n    }\n\n    if( ilen - ( p - buf ) > output_max_len )\n    {\n        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;\n        goto cleanup;\n    }\n\n    *olen = ilen - (p - buf);\n    memcpy( output, p, *olen );\n    ret = 0;\n\ncleanup:\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V15)\n/*\n * Implementation of the PKCS#1 v2.1 RSAES-PKCS1-V1_5-DECRYPT function\n */\nint mbedtls_rsa_rsaes_pkcs1_v15_decrypt( mbedtls_rsa_context *ctx,\n                                 int (*f_rng)(void *, unsigned char *, size_t),\n                                 void *p_rng,\n                                 int mode, size_t *olen,\n                                 const unsigned char *input,\n                                 unsigned char *output,\n                                 size_t output_max_len)\n{\n    int ret;\n    size_t ilen, pad_count = 0, i;\n    unsigned char *p, bad, pad_done = 0;\n    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    ilen = ctx->len;\n\n    if( ilen < 16 || ilen > sizeof( buf ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    ret = ( mode == MBEDTLS_RSA_PUBLIC )\n          ? mbedtls_rsa_public(  ctx, input, buf )\n          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );\n\n    if( ret != 0 )\n        goto cleanup;\n\n    p = buf;\n    bad = 0;\n\n    /*\n     * Check and get padding len in \"constant-time\"\n     */\n    bad |= *p++; /* First byte must be 0 */\n\n    /* This test does not depend on secret data */\n    if( mode == MBEDTLS_RSA_PRIVATE )\n    {\n        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;\n\n        /* Get padding len, but always read till end of buffer\n         * (minus one, for the 00 byte) */\n        for( i = 0; i < ilen - 3; i++ )\n        {\n            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;\n            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;\n        }\n\n        p += pad_count;\n        bad |= *p++; /* Must be zero */\n    }\n    else\n    {\n        bad |= *p++ ^ MBEDTLS_RSA_SIGN;\n\n        /* Get padding len, but always read till end of buffer\n         * (minus one, for the 00 byte) */\n        for( i = 0; i < ilen - 3; i++ )\n        {\n            pad_done |= ( p[i] != 0xFF );\n            pad_count += ( pad_done == 0 );\n        }\n\n        p += pad_count;\n        bad |= *p++; /* Must be zero */\n    }\n\n    bad |= ( pad_count < 8 );\n\n    if( bad )\n    {\n        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;\n        goto cleanup;\n    }\n\n    if( ilen - ( p - buf ) > output_max_len )\n    {\n        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;\n        goto cleanup;\n    }\n\n    *olen = ilen - (p - buf);\n    memcpy( output, p, *olen );\n    ret = 0;\n\ncleanup:\n    mbedtls_platform_zeroize( buf, sizeof( buf ) );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Do an RSA operation, then remove the message padding\n */\nint mbedtls_rsa_pkcs1_decrypt( mbedtls_rsa_context *ctx,\n                       int (*f_rng)(void *, unsigned char *, size_t),\n                       void *p_rng,\n                       int mode, size_t *olen,\n                       const unsigned char *input,\n                       unsigned char *output,\n                       size_t output_max_len)\n{\n    switch( ctx->padding )\n    {\n#if defined(MBEDTLS_PKCS1_V15)\n        case MBEDTLS_RSA_PKCS_V15:\n            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,\n                                                input, output, output_max_len );\n#endif\n\n#if defined(MBEDTLS_PKCS1_V21)\n        case MBEDTLS_RSA_PKCS_V21:\n            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,\n                                           olen, input, output,\n                                           output_max_len );\n#endif\n\n        default:\n            return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n    }\n}\n\n#if defined(MBEDTLS_PKCS1_V21)\n/*\n * Implementation of the PKCS#1 v2.1 RSASSA-PSS-SIGN function\n */\nint mbedtls_rsa_rsassa_pss_sign( mbedtls_rsa_context *ctx,\n                         int (*f_rng)(void *, unsigned char *, size_t),\n                         void *p_rng,\n                         int mode,\n                         mbedtls_md_type_t md_alg,\n                         unsigned int hashlen,\n                         const unsigned char *hash,\n                         unsigned char *sig )\n{\n    size_t olen;\n    unsigned char *p = sig;\n    unsigned char salt[MBEDTLS_MD_MAX_SIZE];\n    unsigned int slen, hlen, offset = 0;\n    int ret;\n    size_t msb;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    if( f_rng == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    olen = ctx->len;\n\n    if( md_alg != MBEDTLS_MD_NONE )\n    {\n        /* Gather length of hash to sign */\n        md_info = mbedtls_md_info_from_type( md_alg );\n        if( md_info == NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        hashlen = mbedtls_md_get_size( md_info );\n    }\n\n    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    hlen = mbedtls_md_get_size( md_info );\n    slen = hlen;\n\n    if( olen < hlen + slen + 2 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    memset( sig, 0, olen );\n\n    /* Generate salt of length slen */\n    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )\n        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );\n\n    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */\n    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;\n    p += olen - hlen * 2 - 2;\n    *p++ = 0x01;\n    memcpy( p, salt, slen );\n    p += slen;\n\n    mbedtls_md_init( &md_ctx );\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )\n        goto exit;\n\n    /* Generate H = Hash( M' ) */\n    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )\n        goto exit;\n\n    /* Compensate for boundary condition when applying mask */\n    if( msb % 8 == 0 )\n        offset = 1;\n\n    /* maskedDB: Apply dbMask to DB */\n    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,\n                          &md_ctx ) ) != 0 )\n        goto exit;\n\n    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;\n    sig[0] &= 0xFF >> ( olen * 8 - msb );\n\n    p += hlen;\n    *p++ = 0xBC;\n\n    mbedtls_platform_zeroize( salt, sizeof( salt ) );\n\nexit:\n    mbedtls_md_free( &md_ctx );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( ( mode == MBEDTLS_RSA_PUBLIC )\n            ? mbedtls_rsa_public(  ctx, sig, sig )\n            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V15)\n/*\n * Implementation of the PKCS#1 v2.1 RSASSA-PKCS1-V1_5-SIGN function\n */\n\n/* Construct a PKCS v1.5 encoding of a hashed message\n *\n * This is used both for signature generation and verification.\n *\n * Parameters:\n * - md_alg:  Identifies the hash algorithm used to generate the given hash;\n *            MBEDTLS_MD_NONE if raw data is signed.\n * - hashlen: Length of hash in case hashlen is MBEDTLS_MD_NONE.\n * - hash:    Buffer containing the hashed message or the raw data.\n * - dst_len: Length of the encoded message.\n * - dst:     Buffer to hold the encoded message.\n *\n * Assumptions:\n * - hash has size hashlen if md_alg == MBEDTLS_MD_NONE.\n * - hash has size corresponding to md_alg if md_alg != MBEDTLS_MD_NONE.\n * - dst points to a buffer of size at least dst_len.\n *\n */\nstatic int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,\n                                        unsigned int hashlen,\n                                        const unsigned char *hash,\n                                        size_t dst_len,\n                                        unsigned char *dst )\n{\n    size_t oid_size  = 0;\n    size_t nb_pad    = dst_len;\n    unsigned char *p = dst;\n    const char *oid  = NULL;\n\n    /* Are we signing hashed or raw data? */\n    if( md_alg != MBEDTLS_MD_NONE )\n    {\n        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );\n        if( md_info == NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        hashlen = mbedtls_md_get_size( md_info );\n\n        /* Double-check that 8 + hashlen + oid_size can be used as a\n         * 1-byte ASN.1 length encoding and that there's no overflow. */\n        if( 8 + hashlen + oid_size  >= 0x80         ||\n            10 + hashlen            <  hashlen      ||\n            10 + hashlen + oid_size <  10 + hashlen )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        /*\n         * Static bounds check:\n         * - Need 10 bytes for five tag-length pairs.\n         *   (Insist on 1-byte length encodings to protect against variants of\n         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)\n         * - Need hashlen bytes for hash\n         * - Need oid_size bytes for hash alg OID.\n         */\n        if( nb_pad < 10 + hashlen + oid_size )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n        nb_pad -= 10 + hashlen + oid_size;\n    }\n    else\n    {\n        if( nb_pad < hashlen )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        nb_pad -= hashlen;\n    }\n\n    /* Need space for signature header and padding delimiter (3 bytes),\n     * and 8 bytes for the minimal padding */\n    if( nb_pad < 3 + 8 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    nb_pad -= 3;\n\n    /* Now nb_pad is the amount of memory to be filled\n     * with padding, and at least 8 bytes long. */\n\n    /* Write signature header and padding */\n    *p++ = 0;\n    *p++ = MBEDTLS_RSA_SIGN;\n    memset( p, 0xFF, nb_pad );\n    p += nb_pad;\n    *p++ = 0;\n\n    /* Are we signing raw data? */\n    if( md_alg == MBEDTLS_MD_NONE )\n    {\n        memcpy( p, hash, hashlen );\n        return( 0 );\n    }\n\n    /* Signing hashed data, add corresponding ASN.1 structure\n     *\n     * DigestInfo ::= SEQUENCE {\n     *   digestAlgorithm DigestAlgorithmIdentifier,\n     *   digest Digest }\n     * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n     * Digest ::= OCTET STRING\n     *\n     * Schematic:\n     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]\n     *                                 TAG-NULL + LEN [ NULL ] ]\n     *                 TAG-OCTET + LEN [ HASH ] ]\n     */\n    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;\n    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );\n    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;\n    *p++ = (unsigned char)( 0x04 + oid_size );\n    *p++ = MBEDTLS_ASN1_OID;\n    *p++ = (unsigned char) oid_size;\n    memcpy( p, oid, oid_size );\n    p += oid_size;\n    *p++ = MBEDTLS_ASN1_NULL;\n    *p++ = 0x00;\n    *p++ = MBEDTLS_ASN1_OCTET_STRING;\n    *p++ = (unsigned char) hashlen;\n    memcpy( p, hash, hashlen );\n    p += hashlen;\n\n    /* Just a sanity-check, should be automatic\n     * after the initial bounds check. */\n    if( p != dst + dst_len )\n    {\n        mbedtls_platform_zeroize( dst, dst_len );\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n\n    return( 0 );\n}\n\n/*\n * Do an RSA operation to sign the message digest\n */\nint mbedtls_rsa_rsassa_pkcs1_v15_sign( mbedtls_rsa_context *ctx,\n                               int (*f_rng)(void *, unsigned char *, size_t),\n                               void *p_rng,\n                               int mode,\n                               mbedtls_md_type_t md_alg,\n                               unsigned int hashlen,\n                               const unsigned char *hash,\n                               unsigned char *sig )\n{\n    int ret;\n    unsigned char *sig_try = NULL, *verif = NULL;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /*\n     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)\n     */\n\n    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,\n                                             ctx->len, sig ) ) != 0 )\n        return( ret );\n\n    /*\n     * Call respective RSA primitive\n     */\n\n    if( mode == MBEDTLS_RSA_PUBLIC )\n    {\n        /* Skip verification on a public key operation */\n        return( mbedtls_rsa_public( ctx, sig, sig ) );\n    }\n\n    /* Private key operation\n     *\n     * In order to prevent Lenstra's attack, make the signature in a\n     * temporary buffer and check it before returning it.\n     */\n\n    sig_try = mbedtls_calloc( 1, ctx->len );\n    if( sig_try == NULL )\n        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n\n    verif = mbedtls_calloc( 1, ctx->len );\n    if( verif == NULL )\n    {\n        mbedtls_free( sig_try );\n        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );\n\n    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;\n        goto cleanup;\n    }\n\n    memcpy( sig, sig_try, ctx->len );\n\ncleanup:\n    mbedtls_free( sig_try );\n    mbedtls_free( verif );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Do an RSA operation to sign the message digest\n */\nint mbedtls_rsa_pkcs1_sign( mbedtls_rsa_context *ctx,\n                    int (*f_rng)(void *, unsigned char *, size_t),\n                    void *p_rng,\n                    int mode,\n                    mbedtls_md_type_t md_alg,\n                    unsigned int hashlen,\n                    const unsigned char *hash,\n                    unsigned char *sig )\n{\n    switch( ctx->padding )\n    {\n#if defined(MBEDTLS_PKCS1_V15)\n        case MBEDTLS_RSA_PKCS_V15:\n            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,\n                                              hashlen, hash, sig );\n#endif\n\n#if defined(MBEDTLS_PKCS1_V21)\n        case MBEDTLS_RSA_PKCS_V21:\n            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,\n                                        hashlen, hash, sig );\n#endif\n\n        default:\n            return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n    }\n}\n\n#if defined(MBEDTLS_PKCS1_V21)\n/*\n * Implementation of the PKCS#1 v2.1 RSASSA-PSS-VERIFY function\n */\nint mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_rsa_context *ctx,\n                               int (*f_rng)(void *, unsigned char *, size_t),\n                               void *p_rng,\n                               int mode,\n                               mbedtls_md_type_t md_alg,\n                               unsigned int hashlen,\n                               const unsigned char *hash,\n                               mbedtls_md_type_t mgf1_hash_id,\n                               int expected_salt_len,\n                               const unsigned char *sig )\n{\n    int ret;\n    size_t siglen;\n    unsigned char *p;\n    unsigned char *hash_start;\n    unsigned char result[MBEDTLS_MD_MAX_SIZE];\n    unsigned char zeros[8];\n    unsigned int hlen;\n    size_t observed_salt_len, msb;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    siglen = ctx->len;\n\n    if( siglen < 16 || siglen > sizeof( buf ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    ret = ( mode == MBEDTLS_RSA_PUBLIC )\n          ? mbedtls_rsa_public(  ctx, sig, buf )\n          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );\n\n    if( ret != 0 )\n        return( ret );\n\n    p = buf;\n\n    if( buf[siglen - 1] != 0xBC )\n        return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n\n    if( md_alg != MBEDTLS_MD_NONE )\n    {\n        /* Gather length of hash to sign */\n        md_info = mbedtls_md_info_from_type( md_alg );\n        if( md_info == NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        hashlen = mbedtls_md_get_size( md_info );\n    }\n\n    md_info = mbedtls_md_info_from_type( mgf1_hash_id );\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    hlen = mbedtls_md_get_size( md_info );\n\n    memset( zeros, 0, 8 );\n\n    /*\n     * Note: EMSA-PSS verification is over the length of N - 1 bits\n     */\n    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;\n\n    if( buf[0] >> ( 8 - siglen * 8 + msb ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /* Compensate for boundary condition when applying mask */\n    if( msb % 8 == 0 )\n    {\n        p++;\n        siglen -= 1;\n    }\n\n    if( siglen < hlen + 2 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    hash_start = p + siglen - hlen - 1;\n\n    mbedtls_md_init( &md_ctx );\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )\n        goto exit;\n\n    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );\n    if( ret != 0 )\n        goto exit;\n\n    buf[0] &= 0xFF >> ( siglen * 8 - msb );\n\n    while( p < hash_start - 1 && *p == 0 )\n        p++;\n\n    if( *p++ != 0x01 )\n    {\n        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;\n        goto exit;\n    }\n\n    observed_salt_len = hash_start - p;\n\n    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&\n        observed_salt_len != (size_t) expected_salt_len )\n    {\n        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;\n        goto exit;\n    }\n\n    /*\n     * Generate H = Hash( M' )\n     */\n    ret = mbedtls_md_starts( &md_ctx );\n    if ( ret != 0 )\n        goto exit;\n    ret = mbedtls_md_update( &md_ctx, zeros, 8 );\n    if ( ret != 0 )\n        goto exit;\n    ret = mbedtls_md_update( &md_ctx, hash, hashlen );\n    if ( ret != 0 )\n        goto exit;\n    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );\n    if ( ret != 0 )\n        goto exit;\n    ret = mbedtls_md_finish( &md_ctx, result );\n    if ( ret != 0 )\n        goto exit;\n\n    if( memcmp( hash_start, result, hlen ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;\n        goto exit;\n    }\n\nexit:\n    mbedtls_md_free( &md_ctx );\n\n    return( ret );\n}\n\n/*\n * Simplified PKCS#1 v2.1 RSASSA-PSS-VERIFY function\n */\nint mbedtls_rsa_rsassa_pss_verify( mbedtls_rsa_context *ctx,\n                           int (*f_rng)(void *, unsigned char *, size_t),\n                           void *p_rng,\n                           int mode,\n                           mbedtls_md_type_t md_alg,\n                           unsigned int hashlen,\n                           const unsigned char *hash,\n                           const unsigned char *sig )\n{\n    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )\n                             ? (mbedtls_md_type_t) ctx->hash_id\n                             : md_alg;\n\n    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,\n                                       md_alg, hashlen, hash,\n                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,\n                                       sig ) );\n\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V15)\n/*\n * Implementation of the PKCS#1 v2.1 RSASSA-PKCS1-v1_5-VERIFY function\n */\nint mbedtls_rsa_rsassa_pkcs1_v15_verify( mbedtls_rsa_context *ctx,\n                                 int (*f_rng)(void *, unsigned char *, size_t),\n                                 void *p_rng,\n                                 int mode,\n                                 mbedtls_md_type_t md_alg,\n                                 unsigned int hashlen,\n                                 const unsigned char *hash,\n                                 const unsigned char *sig )\n{\n    int ret = 0;\n    const size_t sig_len = ctx->len;\n    unsigned char *encoded = NULL, *encoded_expected = NULL;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /*\n     * Prepare expected PKCS1 v1.5 encoding of hash.\n     */\n\n    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||\n        ( encoded_expected = mbedtls_calloc( 1, sig_len ) ) == NULL )\n    {\n        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;\n        goto cleanup;\n    }\n\n    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,\n                                             encoded_expected ) ) != 0 )\n        goto cleanup;\n\n    /*\n     * Apply RSA primitive to get what should be PKCS1 encoded hash.\n     */\n\n    ret = ( mode == MBEDTLS_RSA_PUBLIC )\n          ? mbedtls_rsa_public(  ctx, sig, encoded )\n          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );\n    if( ret != 0 )\n        goto cleanup;\n\n    /*\n     * Compare\n     */\n\n    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,\n                                      sig_len ) ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;\n        goto cleanup;\n    }\n\ncleanup:\n\n    if( encoded != NULL )\n    {\n        mbedtls_platform_zeroize( encoded, sig_len );\n        mbedtls_free( encoded );\n    }\n\n    if( encoded_expected != NULL )\n    {\n        mbedtls_platform_zeroize( encoded_expected, sig_len );\n        mbedtls_free( encoded_expected );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Do an RSA operation and check the message digest\n */\nint mbedtls_rsa_pkcs1_verify( mbedtls_rsa_context *ctx,\n                      int (*f_rng)(void *, unsigned char *, size_t),\n                      void *p_rng,\n                      int mode,\n                      mbedtls_md_type_t md_alg,\n                      unsigned int hashlen,\n                      const unsigned char *hash,\n                      const unsigned char *sig )\n{\n    switch( ctx->padding )\n    {\n#if defined(MBEDTLS_PKCS1_V15)\n        case MBEDTLS_RSA_PKCS_V15:\n            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,\n                                                hashlen, hash, sig );\n#endif\n\n#if defined(MBEDTLS_PKCS1_V21)\n        case MBEDTLS_RSA_PKCS_V21:\n            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,\n                                          hashlen, hash, sig );\n#endif\n\n        default:\n            return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n    }\n}\n\n/*\n * Copy the components of an RSA key\n */\nint mbedtls_rsa_copy( mbedtls_rsa_context *dst, const mbedtls_rsa_context *src )\n{\n    int ret;\n\n    dst->ver = src->ver;\n    dst->len = src->len;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->N, &src->N ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->E, &src->E ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->D, &src->D ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->P, &src->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Q, &src->Q ) );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->DP, &src->DP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->DQ, &src->DQ ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->QP, &src->QP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RP, &src->RP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RQ, &src->RQ ) );\n#endif\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RN, &src->RN ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Vi, &src->Vi ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Vf, &src->Vf ) );\n\n    dst->padding = src->padding;\n    dst->hash_id = src->hash_id;\n\ncleanup:\n    if( ret != 0 )\n        mbedtls_rsa_free( dst );\n\n    return( ret );\n}\n\n/*\n * Free the components of an RSA key\n */\nvoid mbedtls_rsa_free( mbedtls_rsa_context *ctx )\n{\n    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );\n    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );\n    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );\n    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );\n    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );\n    mbedtls_mpi_free( &ctx->DP );\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_free( &ctx->mutex );\n#endif\n}\n\n#endif /* !MBEDTLS_RSA_ALT */\n\n#if defined(MBEDTLS_SELF_TEST)\n\n#include \"mbedtls/sha1.h\"\n\n/*\n * Example RSA-1024 keypair, for test purposes\n */\n#define KEY_LEN 128\n\n#define RSA_N   \"9292758453063D803DD603D5E777D788\" \\\n                \"8ED1D5BF35786190FA2F23EBC0848AEA\" \\\n                \"DDA92CA6C3D80B32C4D109BE0F36D6AE\" \\\n                \"7130B9CED7ACDF54CFC7555AC14EEBAB\" \\\n                \"93A89813FBF3C4F8066D2D800F7C38A8\" \\\n                \"1AE31942917403FF4946B0A83D3D3E05\" \\\n                \"EE57C6F5F5606FB5D4BC6CD34EE0801A\" \\\n                \"5E94BB77B07507233A0BC7BAC8F90F79\"\n\n#define RSA_E   \"10001\"\n\n#define RSA_D   \"24BF6185468786FDD303083D25E64EFC\" \\\n                \"66CA472BC44D253102F8B4A9D3BFA750\" \\\n                \"91386C0077937FE33FA3252D28855837\" \\\n                \"AE1B484A8A9A45F7EE8C0C634F99E8CD\" \\\n                \"DF79C5CE07EE72C7F123142198164234\" \\\n                \"CABB724CF78B8173B9F880FC86322407\" \\\n                \"AF1FEDFDDE2BEB674CA15F3E81A1521E\" \\\n                \"071513A1E85B5DFA031F21ECAE91A34D\"\n\n#define RSA_P   \"C36D0EB7FCD285223CFB5AABA5BDA3D8\" \\\n                \"2C01CAD19EA484A87EA4377637E75500\" \\\n                \"FCB2005C5C7DD6EC4AC023CDA285D796\" \\\n                \"C3D9E75E1EFC42488BB4F1D13AC30A57\"\n\n#define RSA_Q   \"C000DF51A7C77AE8D7C7370C1FF55B69\" \\\n                \"E211C2B9E5DB1ED0BF61D0D9899620F4\" \\\n                \"910E4168387E3C30AA1E00C339A79508\" \\\n                \"8452DD96A9A5EA5D9DCA68DA636032AF\"\n\n#define PT_LEN  24\n#define RSA_PT  \"\\xAA\\xBB\\xCC\\x03\\x02\\x01\\x00\\xFF\\xFF\\xFF\\xFF\\xFF\" \\\n                \"\\x11\\x22\\x33\\x0A\\x0B\\x0C\\xCC\\xDD\\xDD\\xDD\\xDD\\xDD\"\n\n#if defined(MBEDTLS_PKCS1_V15)\nstatic int myrand( void *rng_state, unsigned char *output, size_t len )\n{\n#if !defined(__OpenBSD__)\n    size_t i;\n\n    if( rng_state != NULL )\n        rng_state  = NULL;\n\n    for( i = 0; i < len; ++i )\n        output[i] = rand();\n#else\n    if( rng_state != NULL )\n        rng_state = NULL;\n\n    arc4random_buf( output, len );\n#endif /* !OpenBSD */\n\n    return( 0 );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Checkup routine\n */\nint mbedtls_rsa_self_test( int verbose )\n{\n    int ret = 0;\n#if defined(MBEDTLS_PKCS1_V15)\n    size_t len;\n    mbedtls_rsa_context rsa;\n    unsigned char rsa_plaintext[PT_LEN];\n    unsigned char rsa_decrypted[PT_LEN];\n    unsigned char rsa_ciphertext[KEY_LEN];\n#if defined(MBEDTLS_SHA1_C)\n    unsigned char sha1sum[20];\n#endif\n\n    mbedtls_mpi K;\n\n    mbedtls_mpi_init( &K );\n    mbedtls_rsa_init( &rsa, MBEDTLS_RSA_PKCS_V15, 0 );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_N  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, &K, NULL, NULL, NULL, NULL ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_P  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, NULL, &K, NULL, NULL, NULL ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_Q  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, NULL, NULL, &K, NULL, NULL ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_D  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, NULL, NULL, NULL, &K, NULL ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_E  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, NULL, NULL, NULL, NULL, &K ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_rsa_complete( &rsa ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  RSA key validation: \" );\n\n    if( mbedtls_rsa_check_pubkey(  &rsa ) != 0 ||\n        mbedtls_rsa_check_privkey( &rsa ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n  PKCS#1 encryption : \" );\n\n    memcpy( rsa_plaintext, RSA_PT, PT_LEN );\n\n    if( mbedtls_rsa_pkcs1_encrypt( &rsa, myrand, NULL, MBEDTLS_RSA_PUBLIC,\n                                   PT_LEN, rsa_plaintext,\n                                   rsa_ciphertext ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n  PKCS#1 decryption : \" );\n\n    if( mbedtls_rsa_pkcs1_decrypt( &rsa, myrand, NULL, MBEDTLS_RSA_PRIVATE,\n                                   &len, rsa_ciphertext, rsa_decrypted,\n                                   sizeof(rsa_decrypted) ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( memcmp( rsa_decrypted, rsa_plaintext, len ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n#if defined(MBEDTLS_SHA1_C)\n    if( verbose != 0 )\n        mbedtls_printf( \"  PKCS#1 data sign  : \" );\n\n    if( mbedtls_sha1_ret( rsa_plaintext, PT_LEN, sha1sum ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( mbedtls_rsa_pkcs1_sign( &rsa, myrand, NULL,\n                                MBEDTLS_RSA_PRIVATE, MBEDTLS_MD_SHA1, 0,\n                                sha1sum, rsa_ciphertext ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n  PKCS#1 sig. verify: \" );\n\n    if( mbedtls_rsa_pkcs1_verify( &rsa, NULL, NULL,\n                                  MBEDTLS_RSA_PUBLIC, MBEDTLS_MD_SHA1, 0,\n                                  sha1sum, rsa_ciphertext ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n#endif /* MBEDTLS_SHA1_C */\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\ncleanup:\n    mbedtls_mpi_free( &K );\n    mbedtls_rsa_free( &rsa );\n#else /* MBEDTLS_PKCS1_V15 */\n    ((void) verbose);\n#endif /* MBEDTLS_PKCS1_V15 */\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_RSA_C */\n","#include <stdio.h>\n#include \"EthernetInterface.h\"\n#include \"emscripten.h\"\n#include \"mbed_wait_api.h\"\n\n// NOTE: The wait_ms() calls are to make sure the main thread yields, instead of constantly blocks.\n// This way there's time to flush printf() calls in between network calls.\n\nEthernetInterface::EthernetInterface() {\n    memset(_cbs, 0, sizeof(_cbs));\n}\n\nnsapi_error_t EthernetInterface::set_network(const char *ip_address, const char *netmask, const char *gateway) {\n    printf(\"EthernetInterface::set_network is not supported\\n\");\n\n    return NSAPI_ERROR_OK;\n}\nnsapi_error_t EthernetInterface::set_dhcp(bool dhcp) {\n    printf(\"EthernetInterface::set_dhcp is not supported\\n\");\n\n    return NSAPI_ERROR_OK;\n}\n\nnsapi_error_t EthernetInterface::connect() {\n    // immediately return OK\n    return NSAPI_ERROR_OK;\n}\n\nnsapi_error_t EthernetInterface::disconnect() {\n    return NSAPI_ERROR_OK;\n}\n\nconst char * EthernetInterface::get_mac_address() {\n    const char *ret = (const char*)EM_ASM_INT({\n        return window.MbedJSHal.network.get_mac_address();\n    }, 0);\n    wait_ms(1);\n    return ret;\n}\nconst char * EthernetInterface::get_ip_address() {\n    const char *ret = (const char*)EM_ASM_INT({\n        return window.MbedJSHal.network.get_ip_address();\n    }, 0);\n    wait_ms(1);\n    return ret;\n}\nconst char * EthernetInterface::get_netmask() {\n    const char *ret = (const char*)EM_ASM_INT({\n        return window.MbedJSHal.network.get_netmask();\n    }, 0);\n    wait_ms(1);\n    return ret;\n}\nconst char * EthernetInterface::get_gateway() {\n    return 0;\n}\n\nint EthernetInterface::socket_open(void **handle, nsapi_protocol_t proto) {\n    struct simulated_socket *socket = new struct simulated_socket();\n\n    int socket_id = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_open($0);\n    }, proto);\n\n    if (socket_id == -1) {\n        return -3001;\n    }\n\n    socket->id = socket_id;\n    socket->connected = false;\n    socket->proto = proto;\n\n    *handle = socket;\n\n    wait_ms(1);\n\n    return NSAPI_ERROR_OK;\n}\n\nvoid EthernetInterface::socket_attach(void *handle, void (*callback)(void *), void *data)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n    _cbs[socket->id].callback = callback;\n    _cbs[socket->id].data = data;\n}\n\nint EthernetInterface::socket_close(void *handle)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    int ret = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_close($0);\n    }, socket->id);\n\n    wait_ms(1);\n\n    socket->connected = false;\n    delete socket;\n    return ret;\n}\n\nint EthernetInterface::socket_sendto(void *handle, const SocketAddress &addr, const void *data, unsigned size)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    if (socket->connected && socket->addr != addr) {\n        printf(\"EthernetInterface::socket_sendto trying to send to different address than where connected to\\n\");\n        return NSAPI_ERROR_DEVICE_ERROR;\n    }\n\n    if (!socket->connected) {\n        int err = socket_connect(socket, addr);\n        if (err < 0) {\n            return err;\n        }\n        socket->addr = addr;\n    }\n\n    wait_ms(1);\n\n    return socket_send(socket, data, size);\n}\n\nint EthernetInterface::socket_send(void *handle, const void *data, unsigned size)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    int ret = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_send($0, $1, $2);\n    }, socket->id, (uint32_t)data, size);\n\n    wait_ms(1);\n\n    return ret;\n}\n\nint EthernetInterface::socket_connect(void *handle, const SocketAddress &addr)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    int ret = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_connect($0, $1, $2);\n    }, socket->id, (uint32_t)addr.get_ip_address(), addr.get_port());\n\n    if (ret != 0) {\n        return NSAPI_ERROR_DEVICE_ERROR;\n    }\n\n    wait_ms(1);\n\n    socket->connected = true;\n    return 0;\n}\n\nint EthernetInterface::socket_recvfrom(void *handle, SocketAddress *addr, void *data, unsigned size)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n    int ret = socket_recv(socket, data, size);\n    if (ret >= 0 && addr) {\n        *addr = socket->addr;\n    }\n\n    wait_ms(1);\n\n    return ret;\n}\n\nint EthernetInterface::socket_recv(void *handle, void *data, unsigned size)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    int recv = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_recv($0, $1, $2);\n    }, socket->id, (uint32_t)data, size);\n\n    if (recv < 0) {\n        return NSAPI_ERROR_WOULD_BLOCK;\n    }\n\n    wait_ms(1);\n\n    return recv;\n}\n\nint EthernetInterface::socket_bind(void *handle, const SocketAddress &address)\n{\n    return NSAPI_ERROR_UNSUPPORTED;\n}\n\nint EthernetInterface::socket_listen(void *handle, int backlog)\n{\n    return NSAPI_ERROR_UNSUPPORTED;\n}\n\nint EthernetInterface::socket_accept(void *handle, void **socket, SocketAddress *address)\n{\n    return NSAPI_ERROR_UNSUPPORTED;\n}\n\n","/* NetworkStack\n * Copyright (c) 2015 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef NETWORK_INTERFACE_H\n#define NETWORK_INTERFACE_H\n\n#include \"netsocket/nsapi_types.h\"\n#include \"netsocket/SocketAddress.h\"\n#include \"Callback.h\"\n#include \"DNS.h\"\n\n\n// Predeclared classes\nclass NetworkStack;\nclass EthInterface;\nclass WiFiInterface;\nclass MeshInterface;\nclass CellularBase;\nclass EMACInterface;\n\n/** NetworkInterface class\n *\n *  Common interface that is shared between network devices\n *  @addtogroup netsocket\n */\nclass NetworkInterface: public DNS {\npublic:\n\n    virtual ~NetworkInterface() {};\n\n    /** Return the default network interface\n     *\n     * Returns the default network interface, as determined by JSON option\n     * target.network-default-interface-type or other overrides.\n     *\n     * The type of the interface returned can be tested via the ethInterface()\n     * etc downcasts.\n     *\n     * The default behaviour is to return the default interface for the\n     * interface type specified by target.network-default-interface-type. Targets\n     * should set this in their targets.json to guide default selection,\n     * and applications may override.\n     *\n     * The interface returned should be already configured for use such that its\n     * connect() method works with no parameters. For connection types needing\n     * configuration, settings should normally be obtained from JSON - the\n     * settings for the core types are under the \"nsapi\" JSON config tree.\n     *\n     * The list of possible settings for default interface type is open-ended,\n     * as is the number of possible providers. Core providers are:\n     *\n     * * ETHERNET: EthernetInterface, using default EMAC and OnboardNetworkStack\n     * * MESH: ThreadInterface or LoWPANNDInterface, using default NanostackRfPhy\n     * * CELLULAR: OnboardModemInterface\n     * * WIFI: None - always provided by a specific class\n     *\n     * Specific drivers may be activated by other settings of the\n     * default-network-interface-type configuration.  This will depend on the\n     * target and the driver. For example a board may have its default setting\n     * as \"AUTO\" which causes it to autodetect an Ethernet cable. This should\n     * be described in the target's documentation.\n     *\n     * An application can override all target settings by implementing\n     * NetworkInterface::get_default_instance() themselves - the default\n     * definition is weak, and calls get_target_default_instance().\n     */\n    static NetworkInterface *get_default_instance();\n\n    /** Get the local MAC address\n     *\n     *  Provided MAC address is intended for info or debug purposes and\n     *  may not be provided if the underlying network interface does not\n     *  provide a MAC address\n     *  \n     *  @return         Null-terminated representation of the local MAC address\n     *                  or null if no MAC address is available\n     */\n    virtual const char *get_mac_address();\n\n    /** Get the local IP address\n     *\n     *  @return         Null-terminated representation of the local IP address\n     *                  or null if no IP address has been received\n     */\n    virtual const char *get_ip_address();\n\n    /** Get the local network mask\n     *\n     *  @return         Null-terminated representation of the local network mask \n     *                  or null if no network mask has been received\n     */\n    virtual const char *get_netmask();\n\n    /** Get the local gateway\n     *\n     *  @return         Null-terminated representation of the local gateway\n     *                  or null if no network mask has been received\n     */\n    virtual const char *get_gateway();\n\n    /** Set a static IP address\n     *\n     *  Configures this network interface to use a static IP address.\n     *  Implicitly disables DHCP, which can be enabled in set_dhcp.\n     *  Requires that the network is disconnected.\n     *\n     *  @param ip_address Null-terminated representation of the local IP address\n     *  @param netmask    Null-terminated representation of the local network mask\n     *  @param gateway    Null-terminated representation of the local gateway\n     *  @return           0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t set_network(\n            const char *ip_address, const char *netmask, const char *gateway);\n\n    /** Enable or disable DHCP on the network\n     *\n     *  Enables DHCP on connecting the network. Defaults to enabled unless\n     *  a static IP address has been assigned. Requires that the network is\n     *  disconnected.\n     *\n     *  @param dhcp     True to enable DHCP\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t set_dhcp(bool dhcp);\n\n    /** Start the interface\n     *\n     *  @return     0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t connect() = 0;\n\n    /** Stop the interface\n     *\n     *  @return     0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t disconnect() = 0;\n\n    /** Translates a hostname to an IP address with specific version\n     *\n     *  The hostname may be either a domain name or an IP address. If the\n     *  hostname is an IP address, no network transactions will be performed.\n     *\n     *  If no stack-specific DNS resolution is provided, the hostname\n     *  will be resolve using a UDP socket on the stack.\n     *\n     *  @param host     Hostname to resolve\n     *  @param address  Destination for the host SocketAddress\n     *  @param version  IP version of address to resolve, NSAPI_UNSPEC indicates\n     *                  version is chosen by the stack (defaults to NSAPI_UNSPEC)\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t gethostbyname(const char *host,\n            SocketAddress *address, nsapi_version_t version = NSAPI_UNSPEC);\n\n    /** Hostname translation callback (asynchronous)\n     *\n     *  Callback will be called after DNS resolution completes or a failure occurs.\n     *\n     *  Callback should not take more than 10ms to execute, otherwise it might\n     *  prevent underlying thread processing. A portable user of the callback\n     *  should not make calls to network operations due to stack size limitations.\n     *  The callback should not perform expensive operations such as socket recv/send\n     *  calls or blocking operations.\n     *\n     *  @param status  0 on success, negative error code on failure\n     *  @param address On success, destination for the host SocketAddress\n     */\n    typedef mbed::Callback<void (nsapi_error_t result, SocketAddress *address)> hostbyname_cb_t;\n\n    /** Translates a hostname to an IP address (asynchronous)\n     *\n     *  The hostname may be either a domain name or an IP address. If the\n     *  hostname is an IP address, no network transactions will be performed.\n     *\n     *  If no stack-specific DNS resolution is provided, the hostname\n     *  will be resolve using a UDP socket on the stack.\n     *\n     *  Call is non-blocking. Result of the DNS operation is returned by the callback.\n     *  If this function returns failure, callback will not be called. In case result\n     *  is success (IP address was found from DNS cache), callback will be called\n     *  before function returns.\n     *\n     *  @param host     Hostname to resolve\n     *  @param callback Callback that is called for result\n     *  @param version  IP version of address to resolve, NSAPI_UNSPEC indicates\n     *                  version is chosen by the stack (defaults to NSAPI_UNSPEC)\n     *  @return         0 on immediate success,\n     *                  negative error code on immediate failure or\n     *                  a positive unique id that represents the hostname translation operation\n     *                  and can be passed to cancel\n     */\n    virtual nsapi_value_or_error_t gethostbyname_async(const char *host, hostbyname_cb_t callback,\n            nsapi_version_t version = NSAPI_UNSPEC);\n\n    /** Cancels asynchronous hostname translation\n     *\n     *  When translation is cancelled, callback will not be called.\n     *\n     *  @param id       Unique id of the hostname translation operation\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t gethostbyname_async_cancel(int id);\n\n    /** Add a domain name server to list of servers to query\n     *\n     *  @param address  Destination for the host address\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t add_dns_server(const SocketAddress &address);\n\n    /** Register callback for status reporting\n     *\n     *  The specified status callback function will be called on status changes\n     *  on the network. The parameters on the callback are the event type and\n     *  event-type dependent reason parameter.\n     *\n     *  @param status_cb The callback for status changes\n     */\n    virtual void attach(mbed::Callback<void(nsapi_event_t, intptr_t)> status_cb);\n\n    /** Get the connection status\n     *\n     *  @return         The connection status according to ConnectionStatusType\n     */\n    virtual nsapi_connection_status_t get_connection_status() const;\n\n    /** Set blocking status of connect() which by default should be blocking\n     *\n     *  @param blocking true if connect is blocking\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t set_blocking(bool blocking);\n\n    /** Dynamic downcast to an EthInterface */\n    virtual EthInterface *ethInterface() {\n        return 0;\n    }\n\n    /** Dynamic downcast to a WiFiInterface */\n    virtual WiFiInterface *wifiInterface() {\n        return 0;\n    }\n\n    /** Dynamic downcast to a MeshInterface */\n    virtual MeshInterface *meshInterface() {\n        return 0;\n    }\n\n    /** Dynamic downcast to a CellularBase */\n    virtual CellularBase *cellularBase() {\n        return 0;\n    }\n\n    /** Dynamic downcast to an EMACInterface */\n    virtual EMACInterface *emacInterface() {\n        return 0;\n    }\n\nprotected:\n    friend class Socket;\n    friend class UDPSocket;\n    friend class TCPSocket;\n    friend class TCPServer;\n    friend class SocketAddress;\n    template <typename IF>\n    friend NetworkStack *nsapi_create_stack(IF *iface);\n\n    /** Provide access to the NetworkStack object\n     *\n     *  @return The underlying NetworkStack object\n     */\n    virtual NetworkStack *get_stack() = 0;\n\n    /** Get the target's default network instance.\n     *\n     * This method can be overridden by the target. Default implementations\n     * are provided weakly by various subsystems as described in\n     * NetworkInterface::get_default_instance(), so targets should not\n     * need to override in simple cases.\n     *\n     * If a target has more elaborate interface selection, it can completely\n     * override this behaviour by implementing\n     * NetworkInterface::get_target_default_instance() themselves, either\n     * unconditionally, or for a specific network-default-interface-type setting\n     *\n     * For example, a device with both Ethernet and Wi-fi could be set up its\n     * target so that:\n     *    * DEVICE_EMAC is set, and it provides EMAC::get_default_instance(),\n     *      which means EthernetInterface provides EthInterface::get_target_instance()\n     *      based on that EMAC.\n     *    * It provides WifiInterface::get_target_default_instance().\n     *    * The core will route NetworkInterface::get_default_instance() to\n     *      either of those if network-default-interface-type is set to\n     *      ETHERNET or WIFI.\n     *    * The board overrides NetworkInterface::get_target_default_instance()\n     *      if network-default-interface-type is set to AUTO. This returns\n     *      either EthInterface::get_default_instance() or WiFIInterface::get_default_instance()\n     *      depending on a cable detection.\n     *\n     *\n     * performs the search described by get_default_instance.\n     */\n    static NetworkInterface *get_target_default_instance();\n};\n\n\n#endif\n","/* LWIP implementation of NetworkInterfaceAPI\n * Copyright (c) 2015 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef ETHERNET_INTERFACE_H\n#define ETHERNET_INTERFACE_H\n\n#define IPADDR_STRLEN_MAX   16\n#define MAX_SOCKET_COUNT    100\n\n#include \"nsapi.h\"\n\n// Forward declaration\nclass NetworkStack;\n\nstruct simulated_socket {\n    int id;\n    nsapi_protocol_t proto;\n    bool connected;\n    SocketAddress addr;\n};\n\n/** EthernetInterface class\n *  Implementation of the NetworkStack for LWIP\n */\nclass EthernetInterface : public NetworkInterface, public NetworkStack\n{\npublic:\n    /** EthernetInterface lifetime\n     */\n    EthernetInterface();\n\n    /** Set a static IP address\n     *\n     *  Configures this network interface to use a static IP address.\n     *  Implicitly disables DHCP, which can be enabled in set_dhcp.\n     *  Requires that the network is disconnected.\n     *\n     *  @param address  Null-terminated representation of the local IP address\n     *  @param netmask  Null-terminated representation of the local network mask\n     *  @param gateway  Null-terminated representation of the local gateway\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t set_network(\n            const char *ip_address, const char *netmask, const char *gateway);\n\n    /** Enable or disable DHCP on the network\n     *\n     *  Requires that the network is disconnected\n     *\n     *  @param dhcp     False to disable dhcp (defaults to enabled)\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t set_dhcp(bool dhcp);\n\n    /** Start the interface\n     *  @return             0 on success, negative on failure\n     */\n    virtual nsapi_error_t connect();\n\n    /** Stop the interface\n     *  @return             0 on success, negative on failure\n     */\n    virtual nsapi_error_t disconnect();\n\n    /** Get the local MAC address\n     *\n     *  Provided MAC address is intended for info or debug purposes and\n     *  may not be provided if the underlying network interface does not\n     *  provide a MAC address\n     *\n     *  @return         Null-terminated representation of the local MAC address\n     *                  or null if no MAC address is available\n     */\n    virtual const char *get_mac_address();\n\n    /** Get the local IP address\n     *\n     *  @return         Null-terminated representation of the local IP address\n     *                  or null if no IP address has been recieved\n     */\n    virtual const char *get_ip_address();\n\n    /** Get the local network mask\n     *\n     *  @return         Null-terminated representation of the local network mask\n     *                  or null if no network mask has been recieved\n     */\n    virtual const char *get_netmask();\n\n    /** Get the local gateways\n     *\n     *  @return         Null-terminated representation of the local gateway\n     *                  or null if no network mask has been recieved\n     */\n    virtual const char *get_gateway();\n\n    /** Translates a hostname to an IP address with specific version\n     *\n     *  The hostname may be either a domain name or an IP address. If the\n     *  hostname is an IP address, no network transactions will be performed.\n     *\n     *  If no stack-specific DNS resolution is provided, the hostname\n     *  will be resolve using a UDP socket on the stack.\n     *\n     *  @param address  Destination for the host SocketAddress\n     *  @param host     Hostname to resolve\n     *  @param version  IP version of address to resolve, NSAPI_UNSPEC indicates\n     *                  version is chosen by the stack (defaults to NSAPI_UNSPEC)\n     *  @return         0 on success, negative error code on failure\n     */\n    using NetworkInterface::gethostbyname;\n\nprotected:\n    /** Open a socket\n     *  @param handle       Handle in which to store new socket\n     *  @param proto        Type of socket to open, NSAPI_TCP or NSAPI_UDP\n     *  @return             0 on success, negative on failure\n     */\n    virtual int socket_open(void **handle, nsapi_protocol_t proto);\n\n    /** Close the socket\n     *  @param handle       Socket handle\n     *  @return             0 on success, negative on failure\n     *  @note On failure, any memory associated with the socket must still\n     *        be cleaned up\n     */\n    virtual int socket_close(void *handle);\n\n    /** Bind a server socket to a specific port\n     *  @param handle       Socket handle\n     *  @param address      Local address to listen for incoming connections on\n     *  @return             0 on success, negative on failure.\n     */\n    virtual int socket_bind(void *handle, const SocketAddress &address);\n\n    /** Start listening for incoming connections\n     *  @param handle       Socket handle\n     *  @param backlog      Number of pending connections that can be queued up at any\n     *                      one time [Default: 1]\n     *  @return             0 on success, negative on failure\n     */\n    virtual int socket_listen(void *handle, int backlog);\n\n    /** Connects this TCP socket to the server\n     *  @param handle       Socket handle\n     *  @param address      SocketAddress to connect to\n     *  @return             0 on success, negative on failure\n     */\n    virtual int socket_connect(void *handle, const SocketAddress &address);\n\n    /** Accept a new connection.\n     *  @param handle       Handle in which to store new socket\n     *  @param server       Socket handle to server to accept from\n     *  @return             0 on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_accept(void *handle, void **socket, SocketAddress *address);\n\n    /** Send data to the remote host\n     *  @param handle       Socket handle\n     *  @param data         The buffer to send to the host\n     *  @param size         The length of the buffer to send\n     *  @return             Number of written bytes on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_send(void *handle, const void *data, unsigned size);\n\n    /** Receive data from the remote host\n     *  @param handle       Socket handle\n     *  @param data         The buffer in which to store the data received from the host\n     *  @param size         The maximum length of the buffer\n     *  @return             Number of received bytes on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_recv(void *handle, void *data, unsigned size);\n\n    /** Send a packet to a remote endpoint\n     *  @param handle       Socket handle\n     *  @param address      The remote SocketAddress\n     *  @param data         The packet to be sent\n     *  @param size         The length of the packet to be sent\n     *  @return             The number of written bytes on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_sendto(void *handle, const SocketAddress &address, const void *data, unsigned size);\n\n    /** Receive a packet from a remote endpoint\n     *  @param handle       Socket handle\n     *  @param address      Destination for the remote SocketAddress or null\n     *  @param buffer       The buffer for storing the incoming packet data\n     *                      If a packet is too long to fit in the supplied buffer,\n     *                      excess bytes are discarded\n     *  @param size         The length of the buffer\n     *  @return             The number of received bytes on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_recvfrom(void *handle, SocketAddress *address, void *buffer, unsigned size);\n\n    /** Register a callback on state change of the socket\n     *  @param handle       Socket handle\n     *  @param callback     Function to call on state change\n     *  @param data         Argument to pass to callback\n     *  @note Callback may be called in an interrupt context.\n     */\n    virtual void socket_attach(void *handle, void (*callback)(void *), void *data);\n\nprotected:\n    /** Provide access to the underlying stack\n     *\n     *  @return The underlying network stack\n     */\n    virtual NetworkStack *get_stack() {\n        return this;\n    }\n\n    bool _dhcp;\n    char _ip_address[IPADDR_STRLEN_MAX];\n    char _netmask[NSAPI_IPv4_SIZE];\n    char _gateway[NSAPI_IPv4_SIZE];\n\n    struct {\n        void (*callback)(void *);\n        void *data;\n    } _cbs[MAX_SOCKET_COUNT];\n};\n\n\n#endif\n","/**\n / _____)             _              | |\n( (____  _____ ____ _| |_ _____  ____| |__\n \\____ \\| ___ |    (_   _) ___ |/ ___)  _ \\\n _____) ) ____| | | || |_| ____( (___| | | |\n(______/|_____)_|_|_| \\__)_____)\\____)_| |_|\n    (C)2013 Semtech\n ___ _____ _   ___ _  _____ ___  ___  ___ ___\n/ __|_   _/_\\ / __| |/ / __/ _ \\| _ \\/ __| __|\n\\__ \\ | |/ _ \\ (__| ' <| _| (_) |   / (__| _|\n|___/ |_/_/ \\_\\___|_|\\_\\_| \\___/|_|_\\\\___|___|\nembedded.connectivity.solutions===============\n\nDescription: LoRaWAN stack layer that controls both MAC and PHY underneath\n\nLicense: Revised BSD License, see LICENSE.TXT file include in the project\n\nMaintainer: Miguel Luis ( Semtech ), Gregory Cristian ( Semtech ) and Daniel Jaeckle ( STACKFORCE )\n\nCopyright (c) 2017, Arm Limited and affiliates.\n\nSPDX-License-Identifier: BSD-3-Clause\n*/\n\n#include <stdio.h>\n#include <math.h> //rint\n#include <string.h>\n#include \"mbed.h\"\n#include \"SX1276_LoRaRadio.h\"\n#include \"sx1276Regs-Fsk.h\"\n#include \"sx1276Regs-LoRa.h\"\n\n#include \"mbed_trace.h\"\n#define TRACE_GROUP \"LRAD\"\n\n/*!\n * Sync word for Private LoRa networks\n */\n#define LORA_MAC_PRIVATE_SYNCWORD                   0x12\n\n/*!\n * Sync word for Public LoRa networks\n */\n#define LORA_MAC_PUBLIC_SYNCWORD                    0x34\n\n/*!\n * SX1276 definitions\n */\n#define XTAL_FREQ                                   32000000\n#define FREQ_STEP                                   61.03515625\n\n/*!\n * Constant values need to compute the RSSI value\n */\n#define RSSI_OFFSET_LF                              -164.0\n#define RSSI_OFFSET_HF                              -157.0\n#define RF_MID_BAND_THRESH                          525000000\n\n\n/*!\n * FSK bandwidth definition\n */\ntypedef struct\n{\n    uint32_t bandwidth;\n    uint8_t  register_value;\n} fsk_bw_t;\n\n/*!\n * Radio registers definition\n */\ntypedef struct\n{\n    uint8_t     modem;\n    uint8_t     addr;\n    uint8_t     value;\n} radio_registers_t;\n\n#define RADIO_INIT_REGISTERS_VALUE                \\\n{                                                 \\\n    { MODEM_FSK , REG_LNA                , 0x23 },\\\n    { MODEM_FSK , REG_RXCONFIG           , 0x1E },\\\n    { MODEM_FSK , REG_RSSICONFIG         , 0xD2 },\\\n    { MODEM_FSK , REG_AFCFEI             , 0x01 },\\\n    { MODEM_FSK , REG_PREAMBLEDETECT     , 0xAA },\\\n    { MODEM_FSK , REG_OSC                , 0x07 },\\\n    { MODEM_FSK , REG_SYNCCONFIG         , 0x12 },\\\n    { MODEM_FSK , REG_SYNCVALUE1         , 0xC1 },\\\n    { MODEM_FSK , REG_SYNCVALUE2         , 0x94 },\\\n    { MODEM_FSK , REG_SYNCVALUE3         , 0xC1 },\\\n    { MODEM_FSK , REG_PACKETCONFIG1      , 0xD8 },\\\n    { MODEM_FSK , REG_FIFOTHRESH         , 0x8F },\\\n    { MODEM_FSK , REG_IMAGECAL           , 0x02 },\\\n    { MODEM_FSK , REG_DIOMAPPING1        , 0x00 },\\\n    { MODEM_FSK , REG_DIOMAPPING2        , 0x30 },\\\n    { MODEM_LORA, REG_LR_PAYLOADMAXLENGTH, 0x40 },\\\n}\n\nstatic const fsk_bw_t fsk_bandwidths[] =\n{\n    { 2600  , 0x17 },\n    { 3100  , 0x0F },\n    { 3900  , 0x07 },\n    { 5200  , 0x16 },\n    { 6300  , 0x0E },\n    { 7800  , 0x06 },\n    { 10400 , 0x15 },\n    { 12500 , 0x0D },\n    { 15600 , 0x05 },\n    { 20800 , 0x14 },\n    { 25000 , 0x0C },\n    { 31300 , 0x04 },\n    { 41700 , 0x13 },\n    { 50000 , 0x0B },\n    { 62500 , 0x03 },\n    { 83333 , 0x12 },\n    { 100000, 0x0A },\n    { 125000, 0x02 },\n    { 166700, 0x11 },\n    { 200000, 0x09 },\n    { 250000, 0x01 },\n    { 300000, 0x00 }, // Invalid bandwidth\n};\n\n/**\n * SPI read/write masks\n */\n#define SPI_WRITE_CMD   0x80\n#define SPI_READ_CMD    0x7F\n\n/**\n * Signals\n */\n#define SIG_DIO0    0x01\n#define SIG_DIO1    0x02\n#define SIG_DIO2    0x04\n#define SIG_DIO3    0x08\n#define SIG_DIO4    0x10\n#define SIG_DIO5    0x20\n#define SIG_TIMOUT  0x40\n\n/**\n * Radio hardware registers initialization\n */\nstatic const radio_registers_t radio_reg_init[] = RADIO_INIT_REGISTERS_VALUE;\n\nenum RadioVariant {\n    SX1276UNDEFINED = 0,\n    SX1276MB1LAS,\n    SX1276MB1MAS\n};\n\n#ifdef MBED_SX1276_LORA_RADIO_SPI_FREQUENCY\n#define SPI_FREQUENCY    MBED_SX1276_LORA_RADIO_SPI_FREQUENCY\n#else\n#define SPI_FREQUENCY    8000000\n#endif\n\n/**\n * Constructor\n */\nSX1276_LoRaRadio::SX1276_LoRaRadio(PinName spi_mosi,\n                                   PinName spi_miso,\n                                   PinName spi_sclk,\n                                   PinName nss,\n                                   PinName reset,\n                                   PinName dio0,\n                                   PinName dio1,\n                                   PinName dio2,\n                                   PinName dio3,\n                                   PinName dio4,\n                                   PinName dio5,\n                                   PinName rf_switch_ctl1,\n                                   PinName rf_switch_ctl2,\n                                   PinName txctl,\n                                   PinName rxctl,\n                                   PinName antswitch,\n                                   PinName pwr_amp_ctl,\n                                   PinName tcxo)\n    :  _chip_select(nss, 1),\n        _reset_ctl(reset),\n        _dio0_ctl(dio0), _dio1_ctl(dio1), _dio2_ctl(dio2), _dio3_ctl(dio3), _dio4_ctl(dio4), _dio5_ctl(dio5),\n        _rf_switch_ctl1(rf_switch_ctl1, 0), _rf_switch_ctl2(rf_switch_ctl2, 0),\n        _txctl(txctl, 0), _rxctl(rxctl, 0),\n        _ant_switch(antswitch, PIN_INPUT, PullUp, 0),\n        _pwr_amp_ctl(pwr_amp_ctl),\n        _tcxo(tcxo)\n\n#ifdef MBED_CONF_RTOS_PRESENT\n        , irq_thread(osPriorityRealtime, 1024)\n#endif\n{\n    _rf_ctrls.ant_switch = antswitch;\n    _rf_ctrls.pwr_amp_ctl = pwr_amp_ctl;\n    _rf_ctrls.rf_switch_ctl1 = rf_switch_ctl1;\n    _rf_ctrls.rf_switch_ctl2 = rf_switch_ctl2;\n    _rf_ctrls.rxctl = rxctl;\n    _rf_ctrls.txctl = txctl;\n    _rf_ctrls.tcxo = tcxo;\n\n    _dio4_pin = dio4;\n    _dio5_pin = dio5;\n\n    _radio_events = NULL;\n\n    if (tcxo != NC) {\n        _tcxo = 1;\n    }\n\n#ifdef MBED_CONF_RTOS_PRESENT\n    irq_thread.start(mbed::callback(this, &SX1276_LoRaRadio::rf_irq_task));\n#endif\n\n    EM_ASM_({\n        window.MbedJSHal.lora.init($0);\n    }, this);\n}\n\n/**\n * Destructor\n */\nSX1276_LoRaRadio::~SX1276_LoRaRadio()\n{\n\n}\n\n/*****************************************************************************\n * Public APIs                                                               *\n ****************************************************************************/\n/**\n * Acquire lock\n */\nvoid SX1276_LoRaRadio::lock(void)\n{\n    mutex.lock();\n}\n\n/**\n * Release lock\n */\nvoid SX1276_LoRaRadio::unlock(void)\n{\n    mutex.unlock();\n}\n\n/**\n * Initializes radio module\n */\nvoid SX1276_LoRaRadio::init_radio(radio_events_t *events)\n{\n    _radio_events = events;\n\n    // Reset the radio transceiver\n    radio_reset();\n\n    // set modem type - defaults to FSK here\n    set_modem(MODEM_FSK);\n\n    // set state to be idle\n    _rf_settings.state = RF_IDLE;\n}\n\n/**\n * Can be used by application/stack or the driver itself\n */\nvoid SX1276_LoRaRadio::radio_reset()\n{\n    tr_debug(\"radio_reset\");\n}\n\n/**\n * TODO: The purpose of this API is unclear.\n *       Need to start an internal discussion.\n */\nbool SX1276_LoRaRadio::check_rf_frequency(uint32_t frequency)\n{\n    // Implement check. Currently all frequencies are supported ? What band ?\n    return true;\n}\n\n/**\n * Returns current status of the radio state machine\n */\nuint8_t SX1276_LoRaRadio::get_status(void)\n{\n    return _rf_settings.state;\n}\n\n/**\n * Sets up carrier frequency\n */\nvoid SX1276_LoRaRadio::set_channel(uint32_t freq)\n{\n    // tr_debug(\"set_channel (freq=%u)\", freq);\n    _rf_settings.channel = freq;\n    freq = (uint32_t) ((double) freq / (double) FREQ_STEP);\n}\n\n/**\n * Generates 32 bit random number based upon RSSI monitoring\n * Used for various calculation by the stack for example dev nonce\n *\n * When this API is used modem is set in LoRa mode and all interrupts are\n * masked. If the user had been using FSK mode, it should be noted that a\n * change of mode is required again because the registers have changed.\n * In addition to that RX and TX configuration APIs should be called again in\n * order to have correct desires setup.\n */\nuint32_t SX1276_LoRaRadio::random( void )\n{\n    uint32_t rnd = EM_ASM_INT({\n        return Math.random() * 0x8000000 | 0;\n    });\n\n    sleep();\n\n    return rnd;\n}\n\n/**\n * Sets up receiver related configurations\n *\n * Must be called before setting the radio in rx mode\n */\nvoid SX1276_LoRaRadio::set_rx_config(radio_modems_t modem, uint32_t bandwidth,\n                                     uint32_t datarate, uint8_t coderate,\n                                     uint32_t bandwidth_afc,\n                                     uint16_t preamble_len,\n                                     uint16_t symb_timeout, bool fix_len,\n                                     uint8_t payload_len, bool crc_on,\n                                     bool freq_hop_on, uint8_t hop_period,\n                                     bool iq_inverted, bool rx_continuous)\n{\n    set_modem(modem);\n\n    switch (modem) {\n        case MODEM_FSK:\n            _rf_settings.fsk.bandwidth = bandwidth;\n            _rf_settings.fsk.datarate = datarate;\n            _rf_settings.fsk.bandwidth_afc = bandwidth_afc;\n            _rf_settings.fsk.fix_len = fix_len;\n            _rf_settings.fsk.payload_len = payload_len;\n            _rf_settings.fsk.crc_on = crc_on;\n            _rf_settings.fsk.iq_inverted = iq_inverted;\n            _rf_settings.fsk.rx_continuous = rx_continuous;\n            _rf_settings.fsk.preamble_len = preamble_len;\n            _rf_settings.fsk.rx_single_timeout = symb_timeout\n                    * ((1.0 / (double) datarate) * 8.0) * 1e3;\n\n            datarate = (uint16_t) ((double) XTAL_FREQ / (double) datarate);\n\n            // tr_debug(\"set_rx_config FSK\");\n\n            break;\n\n        case MODEM_LORA:\n\n            if (bandwidth > 2) {\n                // Fatal error: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported\n                while (1)\n                    ;\n                // TODO Return a proper error from here\n            }\n\n            // stupid hack. TODO think something better\n            bandwidth+=7;\n\n            _rf_settings.lora.bandwidth = bandwidth;\n            _rf_settings.lora.datarate = datarate;\n            _rf_settings.lora.coderate = coderate;\n            _rf_settings.lora.preamble_len = preamble_len;\n            _rf_settings.lora.fix_len = fix_len;\n            _rf_settings.lora.payload_len = payload_len;\n            _rf_settings.lora.crc_on = crc_on;\n            _rf_settings.lora.freq_hop_on = freq_hop_on;\n            _rf_settings.lora.hop_period = hop_period;\n            _rf_settings.lora.iq_inverted = iq_inverted;\n            _rf_settings.lora.rx_continuous = rx_continuous;\n\n            if (datarate > 12) {\n                datarate = 12;\n            } else if (datarate < 6) {\n                datarate = 6;\n            }\n\n            if (((bandwidth == 7) && ((datarate == 11) || (datarate == 12)))\n                    || ((bandwidth == 8) && (datarate == 12))) {\n                _rf_settings.lora.low_datarate_optimize = 0x01;\n            } else {\n                _rf_settings.lora.low_datarate_optimize = 0x00;\n            }\n\n            // tr_debug(\"set_rx_config LORA\");\n            break;\n\n        default:\n            break;\n    }\n}\n\n/**\n * Sets up transmitter related configuration\n *\n * Must be called before putting the radio module in Tx mode or trying\n * to send\n */\nvoid SX1276_LoRaRadio::set_tx_config(radio_modems_t modem, int8_t power,\n                                     uint32_t fdev, uint32_t bandwidth,\n                                     uint32_t datarate, uint8_t coderate,\n                                     uint16_t preamble_len, bool fix_len,\n                                     bool crc_on, bool freq_hop_on,\n                                     uint8_t hop_period, bool iq_inverted,\n                                     uint32_t timeout)\n{\n    set_modem(modem);\n    set_rf_tx_power(power);\n\n    switch (modem) {\n        case MODEM_FSK:\n            _rf_settings.fsk.power = power;\n            _rf_settings.fsk.f_dev = fdev;\n            _rf_settings.fsk.bandwidth = bandwidth;\n            _rf_settings.fsk.datarate = datarate;\n            _rf_settings.fsk.preamble_len = preamble_len;\n            _rf_settings.fsk.fix_len = fix_len;\n            _rf_settings.fsk.crc_on = crc_on;\n            _rf_settings.fsk.iq_inverted = iq_inverted;\n            _rf_settings.fsk.tx_timeout = timeout;\n\n            fdev = (uint16_t) ((double) fdev / (double) FREQ_STEP);\n\n            // tr_debug(\"set_tx_config FSK\");\n\n            break;\n\n        case MODEM_LORA:\n            _rf_settings.lora.power = power;\n            if (bandwidth > 2) {\n                // Fatal error: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported\n                while (1)\n                    ;\n            }\n            bandwidth += 7;\n            _rf_settings.lora.bandwidth = bandwidth;\n            _rf_settings.lora.datarate = datarate;\n            _rf_settings.lora.coderate = coderate;\n            _rf_settings.lora.preamble_len = preamble_len;\n            _rf_settings.lora.fix_len = fix_len;\n            _rf_settings.lora.freq_hop_on = freq_hop_on;\n            _rf_settings.lora.hop_period = hop_period;\n            _rf_settings.lora.crc_on = crc_on;\n            _rf_settings.lora.iq_inverted = iq_inverted;\n            _rf_settings.lora.tx_timeout = timeout;\n\n            if (datarate > 12) {\n                datarate = 12;\n            } else if (datarate < 6) {\n                datarate = 6;\n            }\n            if (((bandwidth == 7) && ((datarate == 11) || (datarate == 12)))\n                    || ((bandwidth == 8) && (datarate == 12))) {\n                _rf_settings.lora.low_datarate_optimize = 0x01;\n            } else {\n                _rf_settings.lora.low_datarate_optimize = 0x00;\n            }\n\n            // tr_debug(\"set_rx_config LORA\");\n\n            break;\n    }\n}\n\n/**\n * Calculates time on Air i.e., dwell time for a single packet\n *\n * Crucial for the stack in order to calculate dwell time so as to control\n * duty cycling.\n */\nuint32_t SX1276_LoRaRadio::time_on_air(radio_modems_t modem, uint8_t pkt_len)\n{\n    uint32_t airTime = 0;\n\n    // tr_debug(\"time_on_air\");\n\n    switch (modem) {\n        case MODEM_FSK:\n            airTime = 1;\n\n            break;\n        case MODEM_LORA:\n            double bw = 0.0;\n            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported\n            switch (_rf_settings.lora.bandwidth) {\n                //case 0: // 7.8 kHz\n                //    bw = 78e2;\n                //    break;\n                //case 1: // 10.4 kHz\n                //    bw = 104e2;\n                //    break;\n                //case 2: // 15.6 kHz\n                //    bw = 156e2;\n                //    break;\n                //case 3: // 20.8 kHz\n                //    bw = 208e2;\n                //    break;\n                //case 4: // 31.2 kHz\n                //    bw = 312e2;\n                //    break;\n                //case 5: // 41.4 kHz\n                //    bw = 414e2;\n                //    break;\n                //case 6: // 62.5 kHz\n                //    bw = 625e2;\n                //    break;\n                case 7: // 125 kHz\n                    bw = 125e3;\n                    break;\n                case 8: // 250 kHz\n                    bw = 250e3;\n                    break;\n                case 9: // 500 kHz\n                    bw = 500e3;\n                    break;\n            }\n\n            // Symbol rate : time for one symbol (secs)\n            double rs = bw / (1 << _rf_settings.lora.datarate);\n            double ts = 1 / rs;\n            // time of preamble\n            double tPreamble = (_rf_settings.lora.preamble_len + 4.25) * ts;\n            // Symbol length of payload and time\n            double tmp = ceil((8 * pkt_len - 4 * _rf_settings.lora.datarate + 28\n                            + 16 * _rf_settings.lora.crc_on\n                            - (_rf_settings.lora.fix_len ? 20 : 0))\n                            / (double) (4\n                                    * (_rf_settings.lora.datarate\n                                            - ((_rf_settings.lora.low_datarate_optimize > 0)\n                                                    ? 2 : 0))))\n                            * (_rf_settings.lora.coderate + 4);\n            double nPayload = 8 + ((tmp > 0) ? tmp : 0);\n            double tPayload = nPayload * ts;\n            // Time on air\n            double tOnAir = tPreamble + tPayload;\n            // return ms secs\n            airTime = floor(tOnAir * 1e3 + 0.999);\n\n            break;\n    }\n\n    tr_debug(\"time_on_air will be %u\", airTime);\n\n    return airTime;\n}\n\n/**\n * Prepares and sends the radio packet out in the air\n */\nvoid SX1276_LoRaRadio::send(uint8_t *buffer, uint8_t size)\n{\n    uint32_t tx_timeout = 0;\n\n    switch (_rf_settings.modem) {\n        case MODEM_FSK:\n            EM_ASM_({\n                window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5);\n            }, _rf_settings.channel, _rf_settings.fsk.power, _rf_settings.fsk.bandwidth, _rf_settings.fsk.datarate, buffer, size);\n        break;\n\n        case MODEM_LORA:\n            EM_ASM_({\n                window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5);\n            }, _rf_settings.channel, _rf_settings.lora.power, _rf_settings.lora.bandwidth, _rf_settings.lora.datarate, buffer, size);\n        break;\n    }\n\n    // tr_debug(\"send (modem=%d)\", _rf_settings.modem);\n    // for (size_t ix = 0; ix < size; ix++) {\n    //     printf(\"%02x \", buffer[ix]);\n    // }\n    // printf(\"\\n\");\n\n    // switch (_rf_settings.modem) {\n    //     case MODEM_FSK:\n    //         _rf_settings.fsk_packet_handler.nb_bytes = 0;\n    //         _rf_settings.fsk_packet_handler.size = size;\n\n    //         if (_rf_settings.fsk.fix_len == false) {\n    //             write_fifo((uint8_t*) &size, 1);\n    //         } else {\n    //             write_to_register(REG_PAYLOADLENGTH, size);\n    //         }\n\n    //         if ((size > 0) && (size <= 64)) {\n    //             _rf_settings.fsk_packet_handler.chunk_size = size;\n    //         } else {\n    //             memcpy(_data_buffer, buffer, size);\n    //             _rf_settings.fsk_packet_handler.chunk_size = 32;\n    //         }\n\n    //         // Write payload buffer\n    //         write_fifo(buffer, _rf_settings.fsk_packet_handler.chunk_size);\n    //         _rf_settings.fsk_packet_handler.nb_bytes +=\n    //                 _rf_settings.fsk_packet_handler.chunk_size;\n    //         tx_timeout = _rf_settings.fsk.tx_timeout;\n\n    //         break;\n\n    //     case MODEM_LORA:\n    //         if (_rf_settings.lora.iq_inverted == true) {\n    //             write_to_register(REG_LR_INVERTIQ, ((read_register(REG_LR_INVERTIQ)\n    //                             & RFLR_INVERTIQ_TX_MASK\n    //                             & RFLR_INVERTIQ_RX_MASK)\n    //                                 | RFLR_INVERTIQ_RX_OFF\n    //                                 | RFLR_INVERTIQ_TX_ON));\n    //             write_to_register( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON);\n    //         } else {\n    //             write_to_register(REG_LR_INVERTIQ, ((read_register( REG_LR_INVERTIQ)\n    //                             & RFLR_INVERTIQ_TX_MASK\n    //                             & RFLR_INVERTIQ_RX_MASK)\n    //                                 | RFLR_INVERTIQ_RX_OFF\n    //                                 | RFLR_INVERTIQ_TX_OFF));\n    //             write_to_register( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF);\n    //         }\n\n    //         _rf_settings.lora_packet_handler.size = size;\n\n    //         // Initializes the payload size\n    //         write_to_register(REG_LR_PAYLOADLENGTH, size);\n\n    //         // Full buffer used for Tx\n    //         write_to_register(REG_LR_FIFOTXBASEADDR, 0);\n    //         write_to_register(REG_LR_FIFOADDRPTR, 0);\n\n    //         // FIFO operations can not take place in Sleep mode\n    //         if ((read_register( REG_OPMODE) & ~RF_OPMODE_MASK) == RF_OPMODE_SLEEP) {\n    //             standby();\n    //             wait_ms(1);\n    //         }\n    //         // write_to_register payload buffer\n    //         write_fifo(buffer, size);\n    //         tx_timeout = _rf_settings.lora.tx_timeout;\n\n    //         break;\n    // }\n\n    transmit(tx_timeout);\n}\n\n/**\n * sets the radio module to sleep\n */\n\nvoid SX1276_LoRaRadio::sleep()\n{\n    tr_debug(\"sleep\");\n\n    // stop timers\n    tx_timeout_timer.detach();\n    rx_timeout_timer.detach();\n\n    // put module in sleep mode\n    set_operation_mode(RF_OPMODE_SLEEP);\n}\n\n/**\n * Put radio in Standby mode\n */\nvoid SX1276_LoRaRadio::standby( void )\n{\n    // tr_debug(\"standby\");\n\n    tx_timeout_timer.detach();\n    rx_timeout_timer.detach();\n\n    set_operation_mode(RF_OPMODE_STANDBY);\n    _rf_settings.state = RF_IDLE;\n}\n\nvoid SX1276_LoRaRadio::rx_frame(uint8_t* data, uint32_t size, uint32_t frequency, uint8_t bandwidth, uint8_t datarate) {\n    tr_debug(\"rx_frame, size=%u, freq=%u, bw=%u, dr=%u\", size, frequency, bandwidth, datarate);\n\n    EM_ASM({\n        console.log('rx_frame', Date.now());\n    });\n\n    if (_rf_settings.lora.bandwidth != bandwidth) {\n        tr_debug(\"rx_frame bw not correct (expecting %d, was %d)\", _rf_settings.lora.bandwidth, bandwidth);\n        return;\n    }\n\n    if (_rf_settings.lora.datarate != datarate) {\n        tr_debug(\"rx_frame dr not correct (expecting %d, was %d)\", _rf_settings.lora.datarate, datarate);\n        return;\n    }\n\n    if (_rf_settings.channel != frequency) {\n        tr_debug(\"rx_frame freq not correct (expecting %d, was %d)\", _rf_settings.channel, frequency);\n        return;\n    }\n\n    memcpy(_data_buffer, data, size);\n    _rf_settings.lora_packet_handler.size = size;\n    _rf_settings.lora_packet_handler.rssi_value = -35;\n    _rf_settings.lora_packet_handler.snr_value = -5;\n    _rf_settings.lora_packet_handler.pending = true;\n    _rf_settings.lora_packet_handler.timestamp_ms = EM_ASM_INT({ return Date.now(); });\n}\n\n/**\n * Sets the radio module in receive mode\n *\n * A DIO4 interrupt let's the state machine know that a preamble is detected\n * and finally a DIO0 interrupt let's the state machine know that a packet is\n * ready to be read from the FIFO\n */\nvoid SX1276_LoRaRadio::receive(uint32_t timeout)\n{\n    tr_debug(\"receive (timeout=%u). has_pending=%d\", timeout, _rf_settings.lora_packet_handler.pending);\n\n    EM_ASM({\n        console.log('receive', Date.now());\n    });\n\n    _rf_settings.state = RF_RX_RUNNING;\n\n    // q:\n    if (_rf_settings.lora_packet_handler.pending) {\n        uint32_t delta_ms = EM_ASM_INT({ return Date.now(); }) - _rf_settings.lora_packet_handler.timestamp_ms;\n\n        tr_debug(\"receive delta %u ms.\", delta_ms);\n\n        _rf_settings.lora_packet_handler.pending = false;\n\n        if (delta_ms > 500) {\n            tr_warn(\"receive delta was over 500 ms (was %u ms), discarding packet\", delta_ms);\n            return;\n        }\n\n        // after 200 ms. we send the rx_done event\n        rx_timeout_timer.attach_us(callback(this, &SX1276_LoRaRadio::rx_done_irq), 200 * 1e3);\n        return;\n    }\n\n    if (timeout != 0) {\n        rx_timeout_timer.attach_us(\n                callback(this, &SX1276_LoRaRadio::timeout_irq_isr),\n                timeout * 1e3);\n    }\n\n    // switch (_rf_settings.modem) {\n    //     case MODEM_FSK:\n    //         if (timeout == 0 && _rf_settings.fsk.rx_continuous == false) {\n    //              // user messed up probably timeout was 0 but mode was not\n    //              // continuous, force it to be continuous\n    //              _rf_settings.fsk.rx_continuous = true;\n    //          }\n\n    //         // DIO0=PayloadReady\n    //         // DIO1=FifoLevel\n    //         // DIO2=SyncAddr\n    //         // DIO3=FifoEmpty\n    //         // DIO4=Preamble\n    //         // DIO5=ModeReady\n    //         write_to_register(REG_DIOMAPPING1, (read_register( REG_DIOMAPPING1)\n    //                 & RF_DIOMAPPING1_DIO0_MASK\n    //                 & RF_DIOMAPPING1_DIO1_MASK\n    //                 & RF_DIOMAPPING1_DIO2_MASK)\n    //                           | RF_DIOMAPPING1_DIO0_00\n    //                           | RF_DIOMAPPING1_DIO1_00\n    //                           | RF_DIOMAPPING1_DIO2_11);\n\n    //         write_to_register(REG_DIOMAPPING2, (read_register( REG_DIOMAPPING2)\n    //                 & RF_DIOMAPPING2_DIO4_MASK\n    //                 & RF_DIOMAPPING2_MAP_MASK)\n    //                           | RF_DIOMAPPING2_DIO4_11\n    //                           | RF_DIOMAPPING2_MAP_PREAMBLEDETECT);\n\n    //         _rf_settings.fsk_packet_handler.fifo_thresh =\n    //                 read_register(REG_FIFOTHRESH) & 0x3F;\n\n    //         write_to_register(REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON\n    //                           | RF_RXCONFIG_AGCAUTO_ON\n    //                           | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT);\n\n    //         _rf_settings.fsk_packet_handler.preamble_detected = 0;\n    //         _rf_settings.fsk_packet_handler.sync_word_detected = 0;\n    //         _rf_settings.fsk_packet_handler.nb_bytes = 0;\n    //         _rf_settings.fsk_packet_handler.size = 0;\n\n    //         break;\n\n    //     case MODEM_LORA:\n    //         if (timeout == 0 && _rf_settings.lora.rx_continuous == false) {\n    //             // user messed up probably timeout was 0 but mode was not\n    //             // continuous, force it to be continuous\n    //             _rf_settings.lora.rx_continuous = true;\n    //         }\n    //         if (_rf_settings.lora.iq_inverted == true) {\n    //             write_to_register(REG_LR_INVERTIQ, ((read_register( REG_LR_INVERTIQ)\n    //                             & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK)\n    //                             | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF));\n    //             write_to_register( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON);\n    //         } else {\n    //             write_to_register(REG_LR_INVERTIQ, ((read_register( REG_LR_INVERTIQ)\n    //                             & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK)\n    //                             | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF));\n    //             write_to_register( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF);\n    //         }\n\n    //         // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal\n    //         if (_rf_settings.lora.bandwidth < 9) {\n    //             write_to_register(REG_LR_DETECTOPTIMIZE,\n    //                               read_register(REG_LR_DETECTOPTIMIZE) & 0x7F);\n    //             write_to_register(REG_LR_TEST30, 0x00);\n    //             switch (_rf_settings.lora.bandwidth) {\n    //                 case 0: // 7.8 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x48);\n    //                     set_channel(_rf_settings.channel + 7.81e3);\n    //                     break;\n    //                 case 1: // 10.4 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x44);\n    //                     set_channel(_rf_settings.channel + 10.42e3);\n    //                     break;\n    //                 case 2: // 15.6 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x44);\n    //                     set_channel(_rf_settings.channel + 15.62e3);\n    //                     break;\n    //                 case 3: // 20.8 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x44);\n    //                     set_channel(_rf_settings.channel + 20.83e3);\n    //                     break;\n    //                 case 4: // 31.2 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x44);\n    //                     set_channel(_rf_settings.channel + 31.25e3);\n    //                     break;\n    //                 case 5: // 41.4 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x44);\n    //                     set_channel(_rf_settings.channel + 41.67e3);\n    //                     break;\n    //                 case 6: // 62.5 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x40);\n    //                     break;\n    //                 case 7: // 125 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x40);\n    //                     break;\n    //                 case 8: // 250 kHz\n    //                     write_to_register( REG_LR_TEST2F, 0x40);\n    //                     break;\n    //             }\n    //         } else {\n    //             write_to_register( REG_LR_DETECTOPTIMIZE,\n    //                               read_register( REG_LR_DETECTOPTIMIZE) | 0x80);\n    //         }\n\n    //         if (_rf_settings.lora.freq_hop_on == true) {\n    //             write_to_register(REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_VALIDHEADER\n    //                               | RFLR_IRQFLAGS_TXDONE\n    //                               | RFLR_IRQFLAGS_CADDONE\n    //                               | RFLR_IRQFLAGS_CADDETECTED);\n\n    //             // DIO0=RxDone, DIO2=FhssChangeChannel\n    //             write_to_register(REG_DIOMAPPING1, (read_register(REG_DIOMAPPING1)\n    //                             & RFLR_DIOMAPPING1_DIO0_MASK\n    //                             & RFLR_DIOMAPPING1_DIO2_MASK)\n    //                             | RFLR_DIOMAPPING1_DIO0_00\n    //                             | RFLR_DIOMAPPING1_DIO2_00);\n    //         } else {\n    //             write_to_register(REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_VALIDHEADER\n    //                                | RFLR_IRQFLAGS_TXDONE\n    //                                | RFLR_IRQFLAGS_CADDONE\n    //                                | RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL\n    //                                | RFLR_IRQFLAGS_CADDETECTED);\n\n    //             // DIO0=RxDone\n    //             write_to_register(REG_DIOMAPPING1, (read_register( REG_DIOMAPPING1)\n    //                             & RFLR_DIOMAPPING1_DIO0_MASK)\n    //                               | RFLR_DIOMAPPING1_DIO0_00);\n    //         }\n    //         write_to_register(REG_LR_FIFORXBASEADDR, 0);\n    //         write_to_register(REG_LR_FIFOADDRPTR, 0);\n\n    //         break;\n    // }\n\n    // _rf_settings.state = RF_RX_RUNNING;\n\n    // if (timeout != 0) {\n    //     rx_timeout_timer.attach_us(\n    //             callback(this, &SX1276_LoRaRadio::timeout_irq_isr),\n    //             timeout * 1e3);\n    // }\n\n    // if (_rf_settings.modem == MODEM_FSK) {\n    //     set_operation_mode(RF_OPMODE_RECEIVER);\n\n    //     if (_rf_settings.fsk.rx_continuous == false) {\n    //         rx_timeout_sync_word.attach_us(\n    //                 callback(this, &SX1276_LoRaRadio::timeout_irq_isr),\n    //                 _rf_settings.fsk.rx_single_timeout * 1e3);\n    //     }\n\n    //     return;\n    // }\n\n    // If mode is LoRa set mode\n    if (_rf_settings.lora.rx_continuous == true) {\n        set_operation_mode(RFLR_OPMODE_RECEIVER);\n    } else {\n        set_operation_mode(RFLR_OPMODE_RECEIVER_SINGLE);\n    }\n}\n\n\n/**\n * Perform carrier sensing\n *\n * Checks for a certain time if the RSSI is above a given threshold.\n * This threshold determines if there is already a transmission going on\n * in the channel or not.\n *\n */\nbool SX1276_LoRaRadio::perform_carrier_sense(radio_modems_t modem,\n                                   uint32_t freq,\n                                   int16_t rssi_threshold,\n                                   uint32_t max_carrier_sense_time)\n{\n    // tr_debug(\"perform_carrier_sense\");\n\n    bool status = true;\n    int16_t rssi = 0;\n\n    set_modem(modem);\n    set_channel(freq);\n    set_operation_mode(RF_OPMODE_RECEIVER);\n\n    // hold on a bit, radio turn-around time\n    wait_ms(1);\n\n    Timer elapsed_time;\n    elapsed_time.start();\n\n    // Perform carrier sense for maxCarrierSenseTime\n    while (elapsed_time.read_ms() < (int)max_carrier_sense_time) {\n        rssi = get_rssi(modem);\n\n        if (rssi > rssi_threshold) {\n            status = false;\n            break;\n        }\n    }\n\n    sleep();\n    return status;\n}\n\n/**\n * TODO: Making sure if this API is valid only for LoRa modulation ?\n *\n * Indicates if the node is part of a private or public network\n */\nvoid SX1276_LoRaRadio::set_public_network(bool enable)\n{\n    set_modem(MODEM_LORA);\n\n    _rf_settings.lora.public_network = enable;\n\n    // tr_debug(\"set_public_network %d\", enable);\n\n}\n\n/**\n * Puts a limit on the size of payload the module can handle\n * By default it is MAX, i.e., 256 bytes\n */\nvoid SX1276_LoRaRadio::set_max_payload_length(radio_modems_t modem, uint8_t max)\n{\n    set_modem(modem);\n\n    // tr_debug(\"set_max_payload_length (modem=%d, max=%u)\", modem, max);\n}\n\n/**\n * Channel Activity detection (can be done only in LoRa mode)\n *\n * If any activity on the channel is detected, an interrupt is asserted on\n * DIO3. A callback will be generated to the stack/application upon the\n * assertion of DIO3.\n */\nvoid SX1276_LoRaRadio::start_cad()\n{\n    // tr_debug(\"start_cad\");\n}\n\n/**\n * Set transmission in continuous wave mode\n */\nvoid SX1276_LoRaRadio::set_tx_continuous_wave(uint32_t freq, int8_t power,\n                                              uint16_t time)\n{\n    // tr_debug(\"set_tx_continious_wave (freq=%u, power=%u, time=%u)\", freq, power, time);\n\n    uint8_t reg_val;\n\n    set_channel(freq);\n    set_tx_config(MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, time);\n    // reg_val = read_register(REG_PACKETCONFIG2);\n\n    // write_to_register( REG_PACKETCONFIG2, (reg_val & RF_PACKETCONFIG2_DATAMODE_MASK ) );\n    // // Disable radio interrupts\n    // write_to_register( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );\n    // write_to_register( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );\n\n    _rf_settings.state = RF_TX_RUNNING;\n    // tx_timeout_timer.attach_us(callback(this, &SX1276_LoRaRadio::timeout_irq_isr), time*1e3);\n    set_operation_mode(RF_OPMODE_TRANSMITTER);\n}\n\n/*****************************************************************************\n * Private APIs                                                              *\n ****************************************************************************/\n#ifdef MBED_CONF_RTOS_PRESENT\n/**\n * Thread task handling IRQs\n */\nvoid SX1276_LoRaRadio::rf_irq_task(void)\n{\n    for (;;) {\n        osEvent event = irq_thread.signal_wait(0, osWaitForever);\n        if (event.status != osEventSignal) {\n            continue;\n        }\n\n        lock();\n        if (event.value.signals & SIG_DIO0) {\n            handle_dio0_irq();\n        }\n        if (event.value.signals & SIG_DIO1) {\n            handle_dio1_irq();\n        }\n        if (event.value.signals & SIG_DIO2) {\n            handle_dio2_irq();\n        }\n        if (event.value.signals & SIG_DIO3) {\n            handle_dio3_irq();\n        }\n        if (event.value.signals & SIG_DIO4) {\n            handle_dio4_irq();\n        }\n        if (event.value.signals & SIG_DIO5) {\n            handle_dio5_irq();\n        }\n        if (event.value.signals & SIG_TIMOUT) {\n            handle_timeout_irq();\n        }\n        unlock();\n    }\n}\n#endif\n\n/**\n * Writes to FIIO provided by the chip\n */\nvoid SX1276_LoRaRadio::write_fifo(uint8_t *buffer, uint8_t size)\n{\n    // tr_debug(\"write_fifo (size=%u)\", size);\n}\n\n/**\n * Reads from the FIFO provided by the chip\n */\nvoid SX1276_LoRaRadio::read_fifo(uint8_t *buffer, uint8_t size)\n{\n    // tr_debug(\"read_fifo (size=%u)\", size);\n}\n\n/**\n * Sets up operation mode\n */\nvoid SX1276_LoRaRadio::set_operation_mode(uint8_t mode)\n{\n    // tr_debug(\"set_operation_mode (mode=%u)\", mode);\n\n    if (mode == RF_OPMODE_SLEEP) {\n        set_low_power_mode();\n    } else {\n        set_low_power_mode();\n        set_antenna_switch(mode);\n    }\n}\n\n/**\n * Sets the modem type to use\n *\n * At initialization FSK is chosen. Later stack or application\n * can choose to change.\n */\nvoid SX1276_LoRaRadio::set_modem(uint8_t modem )\n{\n    _rf_settings.modem = modem;\n\n    // tr_debug(\"set_modem %d\", _rf_settings.modem);\n}\n\n/**\n * Set the radio module variant\n */\nvoid SX1276_LoRaRadio::set_sx1276_variant_type()\n{\n    if (_rf_ctrls.ant_switch != NC) {\n        _ant_switch.input();\n        wait_ms(1);\n        if (_ant_switch == 1) {\n            radio_variant = SX1276MB1LAS;\n        } else {\n            radio_variant = SX1276MB1MAS;\n        }\n        _ant_switch.output();\n        wait_ms(1);\n    } else {\n        radio_variant = SX1276UNDEFINED;\n    }\n}\n\n/**\n * Sets the radio registers to defaults\n */\nvoid SX1276_LoRaRadio::setup_registers()\n{\n    // tr_debug(\"setup_registers\");\n}\n\n/**\n * Performs the Rx chain calibration for LF and HF bands\n *\n * Must be called just after the reset so all registers are at their\n * default values.\n */\nvoid SX1276_LoRaRadio::rx_chain_calibration(void)\n{\n    // tr_debug(\"rx_chain_calibration\");\n}\n\n/**\n * Gets FSK bandwidth values\n *\n * Gives either normal bandwidths or bandwidths for\n * AFC (auto frequency correction)\n */\nuint8_t SX1276_LoRaRadio::get_fsk_bw_reg_val(uint32_t bandwidth)\n{\n    uint8_t i;\n\n    for (i = 0; i < (sizeof(fsk_bandwidths) / sizeof(fsk_bw_t)) - 1; i++) {\n        if ((bandwidth >= fsk_bandwidths[i].bandwidth)\n                && (bandwidth < fsk_bandwidths[i + 1].bandwidth)) {\n            return fsk_bandwidths[i].register_value;\n        }\n    }\n    // ERROR: Value not found\n    // This should never happen\n    while (1);\n}\n\nuint8_t SX1276_LoRaRadio::get_pa_conf_reg(uint32_t channel)\n{\n    if (radio_variant == SX1276UNDEFINED) {\n        return RF_PACONFIG_PASELECT_PABOOST;\n    } else if (channel > RF_MID_BAND_THRESH) {\n        if (radio_variant == SX1276MB1LAS) {\n            return RF_PACONFIG_PASELECT_PABOOST;\n        } else {\n            return RF_PACONFIG_PASELECT_RFO;\n        }\n    } else {\n        return RF_PACONFIG_PASELECT_RFO;\n    }\n}\n\n/**\n * Sets the transmit power for the module\n */\nvoid SX1276_LoRaRadio::set_rf_tx_power(int8_t power)\n{\n    // tr_debug(\"set_rf_tx_power (power=%u)\", power);\n}\n\n/**\n * Actual TX - Transmit routine\n *\n * A DIO0 interrupt let the state machine know that a a packet is\n * successfully sent, otherwise a TxTimeout is invoked.\n * TxTimeout should never happen in normal circumstances as the radio should\n * be able to send a packet out in the air no matter what.\n */\nvoid SX1276_LoRaRadio::transmit(uint32_t timeout)\n{\n    tr_debug(\"transmit (timeout=%u)\", timeout);\n\n    _rf_settings.state = RF_TX_RUNNING;\n    // tx_timeout_timer.attach_us(callback(this,\n    //                            &SX1276_LoRaRadio::timeout_irq_isr), timeout*1e3);\n    set_operation_mode(RF_OPMODE_TRANSMITTER);\n\n    // after 100ms. we fire the tx_done event\n    tx_done_timer.attach_us(callback(this, &SX1276_LoRaRadio::tx_done_irq), 100 * 1e3);\n}\n\nvoid SX1276_LoRaRadio::tx_done_irq() {\n    tx_done_timer.detach();\n\n    _rf_settings.state = RF_IDLE;\n\n    tr_info(\"tx_done_irq\");\n\n    if ((_radio_events != NULL)\n        && (_radio_events->tx_done)) {\n\n        _radio_events->tx_done();\n    }\n}\n\nvoid SX1276_LoRaRadio::rx_done_irq() {\n    tr_debug(\"rx_done_irq\");\n\n    rx_timeout_timer.detach();\n\n    _rf_settings.state = RF_IDLE;\n\n    if ((_radio_events != NULL)\n        && (_radio_events->rx_done)) {\n\n        _radio_events->rx_done(_data_buffer,\n                _rf_settings.lora_packet_handler.size,\n                _rf_settings.lora_packet_handler.rssi_value,\n                _rf_settings.lora_packet_handler.snr_value);\n    }\n}\n\n/**\n * Get RSSI from the module\n */\nint16_t SX1276_LoRaRadio::get_rssi(radio_modems_t modem)\n{\n    // tr_debug(\"get_rssi\");\n\n    return -1;\n}\n\n/**\n * Sets the module in low power mode by disconnecting\n * TX and RX submodules, turning off power amplifier etc.\n */\nvoid SX1276_LoRaRadio::set_low_power_mode()\n{\n\n    // tr_debug(\"set_low_power_mode\");\n\n    if (_rf_ctrls.rf_switch_ctl1 != NC) {\n        _rf_switch_ctl1 = 0;\n    }\n\n    if (_rf_ctrls.rf_switch_ctl2 != NC) {\n        _rf_switch_ctl2 = 0;\n    }\n\n    if (_rf_ctrls.pwr_amp_ctl != NC) {\n        _pwr_amp_ctl = 0;\n    }\n\n    if (_rf_ctrls.txctl != NC) {\n        _txctl = 0;\n    }\n\n    if (_rf_ctrls.txctl != NC) {\n        _rxctl = 0;\n    }\n\n    if (_rf_ctrls.ant_switch != NC) {\n        _ant_switch = 0;\n    }\n}\n\n/**\n * Attaches ISRs to interrupt pins\n */\nvoid SX1276_LoRaRadio::setup_interrupts()\n{\n    _dio0_ctl.rise(callback(this, &SX1276_LoRaRadio::dio0_irq_isr));\n    _dio1_ctl.rise(callback(this, &SX1276_LoRaRadio::dio1_irq_isr));\n    _dio2_ctl.rise(callback(this, &SX1276_LoRaRadio::dio2_irq_isr));\n    _dio3_ctl.rise(callback(this, &SX1276_LoRaRadio::dio3_irq_isr));\n    if (_dio4_pin != NC) {\n        _dio4_ctl.rise(callback(this, &SX1276_LoRaRadio::dio4_irq_isr));\n    }\n    if (_dio5_pin != NC) {\n        _dio5_ctl.rise(callback(this, &SX1276_LoRaRadio::dio5_irq_isr));\n    }\n}\n\n/**\n * Sets up radio latch position according to the\n * radio mode\n */\nvoid SX1276_LoRaRadio::set_antenna_switch(uint8_t mode)\n{\n    // tr_debug(\"set_antenna_switch (mode=%u)\", mode);\n\n    // // here we got to do ifdef for changing controls\n    // // as some pins might be NC\n    // switch (mode) {\n    //     case RFLR_OPMODE_TRANSMITTER:\n    //         if (_rf_ctrls.rf_switch_ctl1 != NC\n    //             && _rf_ctrls.rf_switch_ctl2 != NC) {\n    //             // module is in transmit mode and RF latch switches\n    //             // are connected. Check if power amplifier boost is\n    //             // setup or not\n    //             if ((read_register(REG_PACONFIG) & RF_PACONFIG_PASELECT_PABOOST)\n    //                                    == RF_PACONFIG_PASELECT_PABOOST) {\n    //                 _rf_switch_ctl1 = 1;\n    //                 _rf_switch_ctl2 = 0;\n    //             } else {\n    //                 // power amplifier not selected\n    //                 _rf_switch_ctl1 = 0;\n    //                 _rf_switch_ctl2 = 1;\n    //             }\n    //         }\n    //         if (_rf_ctrls.txctl != NC && _rf_ctrls.rxctl != NC) {\n    //             // module is in transmit mode and tx/rx submodule control\n    //             // pins are connected\n    //             if (_rf_ctrls.pwr_amp_ctl != NC) {\n    //                 if (read_register(REG_PACONFIG) & RF_PACONFIG_PASELECT_PABOOST) {\n    //                     _pwr_amp_ctl = 1;\n    //                     _txctl = 0;\n    //                 } else {\n    //                     _pwr_amp_ctl = 0;\n    //                     _txctl = 1;\n    //                 }\n    //             } else {\n    //                 _txctl = 1;\n    //             }\n    //             _rxctl = 0;\n    //         }\n    //         if (_rf_ctrls.ant_switch != NC){\n    //             _ant_switch = 1;\n    //         }\n    //         break;\n    //     case RFLR_OPMODE_RECEIVER:\n    //     case RFLR_OPMODE_RECEIVER_SINGLE:\n    //     case RFLR_OPMODE_CAD:\n    //         if (_rf_ctrls.rf_switch_ctl1 != NC\n    //             && _rf_ctrls.rf_switch_ctl2 != NC) {\n    //             // radio is in reception or CAD mode and RF latch switches\n    //             // are connected\n    //             _rf_switch_ctl1 = 1;\n    //             _rf_switch_ctl2 = 1;\n    //         }\n    //         if (_rf_ctrls.txctl != NC && _rf_ctrls.rxctl != NC) {\n    //             _txctl = 0;\n    //             _rxctl = 1;\n    //         }\n    //         if (_rf_ctrls.ant_switch != NC) {\n    //             _ant_switch = 0;\n    //         }\n    //         if (_rf_ctrls.pwr_amp_ctl != NC) {\n    //             _pwr_amp_ctl = 0;\n    //         }\n    //         break;\n    //     default:\n    //         // Enforce default case  when any connected control pin is kept low.\n    //         if (_rf_ctrls.rf_switch_ctl1 != NC\n    //             && _rf_ctrls.rf_switch_ctl2 != NC) {\n    //             // radio is in reception or CAD mode and RF latch switches\n    //             // are connected\n    //             _rf_switch_ctl1 = 0;\n    //             _rf_switch_ctl2 = 0;\n    //         }\n    //         if (_rf_ctrls.txctl != NC && _rf_ctrls.rxctl != NC) {\n    //             _txctl = 0;\n    //             _rxctl = 0;\n    //         }\n    //         if (_rf_ctrls.ant_switch != NC) {\n    //             _ant_switch = 0;\n    //         }\n    //         if (_rf_ctrls.pwr_amp_ctl != NC) {\n    //             _pwr_amp_ctl = 0;\n    //         }\n    //         break;\n    // }\n}\n\n/*****************************************************************************\n * Interrupt service routines (ISRs) - set signals to the irq_thread         *\n ****************************************************************************/\nvoid SX1276_LoRaRadio::dio0_irq_isr()\n{\n#ifdef MBED_CONF_RTOS_PRESENT\n   irq_thread.signal_set(SIG_DIO0);\n#else\n   handle_dio0_irq();\n#endif\n}\n\nvoid SX1276_LoRaRadio::dio1_irq_isr()\n{\n#ifdef MBED_CONF_RTOS_PRESENT\n    irq_thread.signal_set(SIG_DIO1);\n#else\n    handle_dio1_irq();\n#endif\n}\n\nvoid SX1276_LoRaRadio::dio2_irq_isr()\n{\n#ifdef MBED_CONF_RTOS_PRESENT\n    irq_thread.signal_set(SIG_DIO2);\n#else\n    handle_dio2_irq();\n#endif\n}\n\nvoid SX1276_LoRaRadio::dio3_irq_isr()\n{\n#ifdef MBED_CONF_RTOS_PRESENT\n    irq_thread.signal_set(SIG_DIO3);\n#else\n    handle_dio3_irq();\n#endif\n}\n\nvoid SX1276_LoRaRadio::dio4_irq_isr()\n{\n#ifdef MBED_CONF_RTOS_PRESENT\n    irq_thread.signal_set(SIG_DIO4);\n#else\n    handle_dio4_irq();\n#endif\n}\n\nvoid SX1276_LoRaRadio::dio5_irq_isr()\n{\n#ifdef MBED_CONF_RTOS_PRESENT\n    irq_thread.signal_set(SIG_DIO5);\n#else\n    handle_dio5_irq();\n#endif\n}\n\n// This is not a hardware interrupt\n// we invoke it ourselves based upon\n// our timers\nvoid SX1276_LoRaRadio::timeout_irq_isr()\n{\n#ifdef MBED_CONF_RTOS_PRESENT\n    irq_thread.signal_set(SIG_TIMOUT);\n#else\n    handle_timeout_irq();\n#endif\n}\n\n/******************************************************************************\n * Interrupt Handlers                                                         *\n *****************************************************************************/\n\nvoid SX1276_LoRaRadio::handle_dio0_irq()\n{\n    // volatile uint8_t irqFlags = 0;\n\n    // switch (_rf_settings.state) {\n    //     case RF_RX_RUNNING:\n    //         switch (_rf_settings.modem) {\n    //             case MODEM_FSK:\n    //                 if (_rf_settings.fsk.crc_on == true) {\n    //                     irqFlags = read_register(REG_IRQFLAGS2);\n    //                     if ((irqFlags & RF_IRQFLAGS2_CRCOK)\n    //                             != RF_IRQFLAGS2_CRCOK) {\n    //                         // Clear Irqs\n    //                         write_to_register(REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |\n    //                                           RF_IRQFLAGS1_PREAMBLEDETECT |\n    //                                           RF_IRQFLAGS1_SYNCADDRESSMATCH);\n    //                         write_to_register(REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN);\n\n\n    //                         if (_rf_settings.fsk.rx_continuous == false) {\n    //                             rx_timeout_sync_word.detach();\n    //                             _rf_settings.state = RF_IDLE;\n    //                         } else {\n    //                             // Continuous mode restart Rx chain\n    //                             write_to_register(REG_RXCONFIG,\n    //                                               read_register(REG_RXCONFIG) |\n    //                                               RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK);\n    //                         }\n\n    //                         rx_timeout_timer.detach();\n\n    //                         if ((_radio_events != NULL)\n    //                                 && (_radio_events->rx_error)) {\n    //                             _radio_events->rx_error();\n    //                         }\n    //                         _rf_settings.fsk_packet_handler.preamble_detected = 0;\n    //                         _rf_settings.fsk_packet_handler.sync_word_detected = 0;\n    //                         _rf_settings.fsk_packet_handler.nb_bytes = 0;\n    //                         _rf_settings.fsk_packet_handler.size = 0;\n    //                         // break from here, a CRC error happened, RX_ERROR\n    //                         // was notified. No need to go any further\n    //                         break;\n    //                     }\n    //                 }\n\n    //                 // Read received packet size\n    //                 if ((_rf_settings.fsk_packet_handler.size == 0)\n    //                         && (_rf_settings.fsk_packet_handler.nb_bytes == 0)) {\n    //                     if (_rf_settings.fsk.fix_len == false) {\n    //                         read_fifo((uint8_t*) &_rf_settings.fsk_packet_handler.size, 1);\n    //                     } else {\n    //                         _rf_settings.fsk_packet_handler.size = read_register(REG_PAYLOADLENGTH);\n    //                     }\n    //                     read_fifo(_data_buffer + _rf_settings.fsk_packet_handler.nb_bytes,\n    //                             _rf_settings.fsk_packet_handler.size - _rf_settings.fsk_packet_handler.nb_bytes);\n    //                     _rf_settings.fsk_packet_handler.nb_bytes +=\n    //                             (_rf_settings.fsk_packet_handler.size - _rf_settings.fsk_packet_handler.nb_bytes);\n    //                 } else {\n    //                     read_fifo(_data_buffer + _rf_settings.fsk_packet_handler.nb_bytes,\n    //                             _rf_settings.fsk_packet_handler.size - _rf_settings.fsk_packet_handler.nb_bytes);\n    //                     _rf_settings.fsk_packet_handler.nb_bytes +=\n    //                             (_rf_settings.fsk_packet_handler.size - _rf_settings.fsk_packet_handler.nb_bytes);\n    //                 }\n\n    //                 if (_rf_settings.fsk.rx_continuous == false) {\n    //                     _rf_settings.state = RF_IDLE;\n    //                     rx_timeout_sync_word.detach();\n    //                 } else {\n    //                     // Continuous mode restart Rx chain\n    //                     write_to_register(REG_RXCONFIG, read_register(REG_RXCONFIG)\n    //                                     | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK);\n    //                 }\n\n    //                 rx_timeout_timer.detach();\n\n    //                 if ((_radio_events != NULL) && (_radio_events->rx_done)) {\n    //                     _radio_events->rx_done(\n    //                             _data_buffer,\n    //                             _rf_settings.fsk_packet_handler.size,\n    //                             _rf_settings.fsk_packet_handler.rssi_value, 0);\n    //                 }\n    //                 _rf_settings.fsk_packet_handler.preamble_detected = 0;\n    //                 _rf_settings.fsk_packet_handler.sync_word_detected = 0;\n    //                 _rf_settings.fsk_packet_handler.nb_bytes = 0;\n    //                 _rf_settings.fsk_packet_handler.size = 0;\n    //                 break;\n\n    //             case MODEM_LORA: {\n    //                 int8_t snr = 0;\n\n    //                 // Clear Irq\n    //                 write_to_register(REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE);\n\n    //                 irqFlags = read_register(REG_LR_IRQFLAGS);\n    //                 if ((irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK)\n    //                         == RFLR_IRQFLAGS_PAYLOADCRCERROR) {\n    //                     // Clear Irq\n    //                     write_to_register( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR);\n\n    //                     if (_rf_settings.lora.rx_continuous == false) {\n    //                         _rf_settings.state = RF_IDLE;\n    //                     }\n    //                     rx_timeout_timer.detach();\n\n    //                     if ((_radio_events != NULL)\n    //                             && (_radio_events->rx_error)) {\n    //                         _radio_events->rx_error();\n    //                     }\n    //                     break;\n    //                 }\n\n    //                 _rf_settings.lora_packet_handler.snr_value = read_register(\n    //                         REG_LR_PKTSNRVALUE);\n    //                 if (_rf_settings.lora_packet_handler.snr_value & 0x80) // The SNR sign bit is 1\n    //                         {\n    //                     // Invert and divide by 4\n    //                     snr = ((~_rf_settings.lora_packet_handler.snr_value + 1)\n    //                             & 0xFF) >> 2;\n    //                     snr = -snr;\n    //                 } else {\n    //                     // Divide by 4\n    //                     snr =\n    //                             (_rf_settings.lora_packet_handler.snr_value\n    //                                     & 0xFF) >> 2;\n    //                 }\n\n    //                 int16_t rssi = read_register( REG_LR_PKTRSSIVALUE);\n    //                 if (snr < 0) {\n    //                     if (_rf_settings.channel > RF_MID_BAND_THRESH) {\n    //                         _rf_settings.lora_packet_handler.rssi_value =\n    //                                 RSSI_OFFSET_HF + rssi + (rssi >> 4) + snr;\n    //                     } else {\n    //                         _rf_settings.lora_packet_handler.rssi_value =\n    //                                 RSSI_OFFSET_LF + rssi + (rssi >> 4) + snr;\n    //                     }\n    //                 } else {\n    //                     if (_rf_settings.channel > RF_MID_BAND_THRESH) {\n    //                         _rf_settings.lora_packet_handler.rssi_value =\n    //                                 RSSI_OFFSET_HF + rssi + (rssi >> 4);\n    //                     } else {\n    //                         _rf_settings.lora_packet_handler.rssi_value =\n    //                                 RSSI_OFFSET_LF + rssi + (rssi >> 4);\n    //                     }\n    //                 }\n\n    //                 _rf_settings.lora_packet_handler.size = read_register(REG_LR_RXNBBYTES);\n    //                 read_fifo(_data_buffer, _rf_settings.lora_packet_handler.size);\n\n    //                 if (_rf_settings.lora.rx_continuous == false) {\n    //                     _rf_settings.state = RF_IDLE;\n    //                 }\n    //                 rx_timeout_timer.detach();\n\n    //                 if ((_radio_events != NULL) && (_radio_events->rx_done)) {\n    //                     _radio_events->rx_done(_data_buffer,\n    //                             _rf_settings.lora_packet_handler.size,\n    //                             _rf_settings.lora_packet_handler.rssi_value,\n    //                             _rf_settings.lora_packet_handler.snr_value);\n    //                 }\n    //             }\n    //                 break;\n    //             default:\n    //                 break;\n    //         }\n    //         break;\n    //     case RF_TX_RUNNING:\n    //         tx_timeout_timer.detach();\n    //         // TxDone interrupt\n    //         switch (_rf_settings.modem) {\n    //             case MODEM_LORA:\n    //                 // Clear Irq\n    //                 write_to_register(REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE);\n    //                 // Intentional fall through\n    //             case MODEM_FSK:\n    //             default:\n    //                 _rf_settings.state = RF_IDLE;\n    //                 if ((_radio_events != NULL)\n    //                         && (_radio_events->tx_done)) {\n    //                     _radio_events->tx_done();\n    //                 }\n    //                 break;\n    //         }\n    //         break;\n    //     default:\n    //         break;\n    // }\n}\n\nvoid SX1276_LoRaRadio::handle_dio1_irq()\n{\n    // switch (_rf_settings.state) {\n    //     case RF_RX_RUNNING:\n    //         switch (_rf_settings.modem) {\n    //             case MODEM_FSK:\n    //                 // FifoLevel interrupt\n    //                 // Read received packet size\n    //                 if ((_rf_settings.fsk_packet_handler.size == 0)\n    //                         && (_rf_settings.fsk_packet_handler.nb_bytes == 0)) {\n    //                     if (_rf_settings.fsk.fix_len == false) {\n    //                         read_fifo((uint8_t*) &_rf_settings.fsk_packet_handler.size, 1);\n    //                     } else {\n    //                         _rf_settings.fsk_packet_handler.size =\n    //                                 read_register(REG_PAYLOADLENGTH);\n    //                     }\n    //                 }\n\n    //                 if ((_rf_settings.fsk_packet_handler.size\n    //                         - _rf_settings.fsk_packet_handler.nb_bytes)\n    //                         > _rf_settings.fsk_packet_handler.fifo_thresh) {\n    //                     read_fifo((_data_buffer + _rf_settings.fsk_packet_handler.nb_bytes),\n    //                             _rf_settings.fsk_packet_handler.fifo_thresh);\n    //                     _rf_settings.fsk_packet_handler.nb_bytes +=\n    //                             _rf_settings.fsk_packet_handler.fifo_thresh;\n    //                 } else {\n    //                     read_fifo((_data_buffer + _rf_settings.fsk_packet_handler.nb_bytes),\n    //                             _rf_settings.fsk_packet_handler.size\n    //                                     - _rf_settings.fsk_packet_handler.nb_bytes);\n    //                     _rf_settings.fsk_packet_handler.nb_bytes +=\n    //                             (_rf_settings.fsk_packet_handler.size\n    //                                     - _rf_settings.fsk_packet_handler.nb_bytes);\n    //                 }\n\n    //                 break;\n\n    //             case MODEM_LORA:\n    //                 // Sync time out\n    //                 rx_timeout_timer.detach();\n    //                 // Clear Irq\n    //                 write_to_register(REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT);\n    //                 _rf_settings.state = RF_IDLE;\n    //                 if ((_radio_events != NULL)\n    //                         && (_radio_events->rx_timeout)) {\n    //                     _radio_events->rx_timeout();\n    //                 }\n    //                 break;\n    //             default:\n    //                 break;\n    //         }\n\n    //         break;\n\n    //     case RF_TX_RUNNING:\n    //         switch (_rf_settings.modem) {\n    //             case MODEM_FSK:\n    //                 // FifoLevel interrupt\n    //                 if ((_rf_settings.fsk_packet_handler.size\n    //                         - _rf_settings.fsk_packet_handler.nb_bytes)\n    //                         > _rf_settings.fsk_packet_handler.chunk_size) {\n    //                     write_fifo((_data_buffer + _rf_settings.fsk_packet_handler.nb_bytes),\n    //                             _rf_settings.fsk_packet_handler.chunk_size);\n    //                     _rf_settings.fsk_packet_handler.nb_bytes +=\n    //                             _rf_settings.fsk_packet_handler.chunk_size;\n    //                 } else {\n    //                     // Write the last chunk of data\n    //                     write_fifo(_data_buffer + _rf_settings.fsk_packet_handler.nb_bytes,\n    //                             _rf_settings.fsk_packet_handler.size\n    //                                     - _rf_settings.fsk_packet_handler.nb_bytes);\n    //                     _rf_settings.fsk_packet_handler.nb_bytes +=\n    //                             _rf_settings.fsk_packet_handler.size - _rf_settings.fsk_packet_handler.nb_bytes;\n    //                 }\n\n    //                 break;\n\n    //             case MODEM_LORA:\n    //                 break;\n    //             default:\n    //                 break;\n    //         }\n    //         break;\n    //     default:\n    //         break;\n    // }\n}\n\nvoid SX1276_LoRaRadio::handle_dio2_irq(void)\n{\n    // switch (_rf_settings.state) {\n    //     case RF_RX_RUNNING:\n    //         switch (_rf_settings.modem) {\n    //             case MODEM_FSK:\n    //                 // DIO4 must have been asserted to set preamble_detected to true\n    //                 if ((_rf_settings.fsk_packet_handler.preamble_detected == 1)\n    //                         && (_rf_settings.fsk_packet_handler.sync_word_detected == 0)) {\n    //                     if (_rf_settings.fsk.rx_continuous == false) {\n    //                         rx_timeout_sync_word.detach();\n    //                     }\n\n    //                     _rf_settings.fsk_packet_handler.sync_word_detected = 1;\n\n    //                     _rf_settings.fsk_packet_handler.rssi_value =\n    //                             -(read_register(REG_RSSIVALUE) >> 1);\n\n    //                     _rf_settings.fsk_packet_handler.afc_value =\n    //                             (int32_t) (double) (((uint16_t) read_register(\n    //                                     REG_AFCMSB) << 8)\n    //                                     | (uint16_t) read_register( REG_AFCLSB))\n    //                                     * (double) FREQ_STEP;\n    //                     _rf_settings.fsk_packet_handler.rx_gain =\n    //                             (read_register( REG_LNA) >> 5) & 0x07;\n    //                 }\n\n    //                 break;\n\n    //             case MODEM_LORA:\n    //                 if (_rf_settings.lora.freq_hop_on == true) {\n    //                     // Clear Irq\n    //                     write_to_register(REG_LR_IRQFLAGS,\n    //                                       RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL);\n\n    //                     if ((_radio_events != NULL)\n    //                             && (_radio_events->fhss_change_channel)) {\n    //                         _radio_events->fhss_change_channel(\n    //                                 (read_register(REG_LR_HOPCHANNEL)\n    //                                         & RFLR_HOPCHANNEL_CHANNEL_MASK));\n    //                     }\n    //                 }\n\n    //                 break;\n\n    //             default:\n    //                 break;\n    //         }\n\n    //         break;\n\n    //     case RF_TX_RUNNING:\n    //         switch (_rf_settings.modem) {\n    //             case MODEM_FSK:\n    //                 break;\n    //             case MODEM_LORA:\n    //                 if (_rf_settings.lora.freq_hop_on == true) {\n    //                     // Clear Irq\n    //                     write_to_register(REG_LR_IRQFLAGS,\n    //                                       RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL);\n\n    //                     if ((_radio_events != NULL)\n    //                             && (_radio_events->fhss_change_channel)) {\n    //                         _radio_events->fhss_change_channel(\n    //                                 (read_register(REG_LR_HOPCHANNEL)\n    //                                         & RFLR_HOPCHANNEL_CHANNEL_MASK));\n    //                     }\n    //                 }\n    //                 break;\n    //             default:\n    //                 break;\n    //         }\n    //         break;\n    //     default:\n    //         break;\n    // }\n}\n\nvoid SX1276_LoRaRadio::handle_dio3_irq(void)\n{\n    // switch (_rf_settings.modem) {\n    //     case MODEM_FSK:\n    //         break;\n    //     case MODEM_LORA:\n    //         if ((read_register(REG_LR_IRQFLAGS) & RFLR_IRQFLAGS_CADDETECTED)\n    //                 == RFLR_IRQFLAGS_CADDETECTED) {\n    //             // Clear Irq\n    //             write_to_register(REG_LR_IRQFLAGS,\n    //                     RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE);\n    //             if ((_radio_events != NULL)\n    //                     && (_radio_events->cad_done)) {\n    //                 _radio_events->cad_done(true);\n    //             }\n    //         } else {\n    //             // Clear Irq\n    //             write_to_register(REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE);\n    //             if ((_radio_events != NULL)\n    //                     && (_radio_events->cad_done)) {\n    //                 _radio_events->cad_done(false);\n    //             }\n    //         }\n    //         break;\n    //     default:\n    //         break;\n    // }\n}\n\nvoid SX1276_LoRaRadio::handle_dio4_irq(void)\n{\n    // is asserted when a preamble is detected (FSK modem only)\n    // switch (_rf_settings.modem) {\n    //     case MODEM_FSK: {\n    //         if (_rf_settings.fsk_packet_handler.preamble_detected == 0) {\n    //             _rf_settings.fsk_packet_handler.preamble_detected = 1;\n    //         }\n    //     }\n    //         break;\n    //     case MODEM_LORA:\n    //         break;\n    //     default:\n    //         break;\n    // }\n}\n\nvoid SX1276_LoRaRadio::handle_dio5_irq()\n{\n    switch (_rf_settings.modem) {\n        case MODEM_FSK:\n            break;\n        case MODEM_LORA:\n            break;\n        default:\n            break;\n    }\n}\n\n\nvoid SX1276_LoRaRadio::handle_timeout_irq()\n{\n    tr_debug(\"handle_timeout_irq\");\n\n    switch (_rf_settings.state) {\n        case RF_RX_RUNNING:\n            if (_rf_settings.modem == MODEM_FSK) {\n                _rf_settings.fsk_packet_handler.preamble_detected = 0;\n                _rf_settings.fsk_packet_handler.sync_word_detected = 0;\n                _rf_settings.fsk_packet_handler.nb_bytes = 0;\n                _rf_settings.fsk_packet_handler.size = 0;\n\n                // Clear Irqs\n                // write_to_register(REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |\n                // RF_IRQFLAGS1_PREAMBLEDETECT |\n                // RF_IRQFLAGS1_SYNCADDRESSMATCH);\n                // write_to_register( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN);\n\n                if (_rf_settings.fsk.rx_continuous == true) {\n                    // Continuous mode restart Rx chain\n                    // write_to_register( REG_RXCONFIG,\n                    //                   read_register(REG_RXCONFIG) |\n                    //                   RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK);\n                } else {\n                    _rf_settings.state = RF_IDLE;\n                    rx_timeout_sync_word.attach_us(\n                            callback(this, &SX1276_LoRaRadio::timeout_irq_isr),\n                            _rf_settings.fsk.rx_single_timeout * 1e3);\n                }\n            }\n\n            if ((_radio_events != NULL)\n                    && (_radio_events->rx_timeout)) {\n                _radio_events->rx_timeout();\n            }\n\n            break;\n\n        case RF_TX_RUNNING:\n            // Tx timeout shouldn't happen.\n            // But it has been observed that when it happens it is a result of a\n            // corrupted SPI transfer\n            // The workaround is to put the radio in a known state.\n            // Thus, we re-initialize it.\n\n            // // Reset the radio\n            // radio_reset();\n\n            // // Initialize radio default values\n            // set_operation_mode(RF_OPMODE_SLEEP);\n\n            // // setup_registers();\n\n            // set_modem(MODEM_FSK);\n\n            // // Restore previous network type setting.\n            // set_public_network(_rf_settings.lora.public_network);\n\n            _rf_settings.state = RF_IDLE;\n            if ((_radio_events != NULL)\n                    && (_radio_events->tx_timeout)) {\n                _radio_events->tx_timeout();\n            }\n            break;\n        default:\n            break;\n    }\n}\n\n\nEMSCRIPTEN_KEEPALIVE\nextern \"C\" void handle_lora_downlink(uint32_t radioPtr, uint32_t dataPtr, uint32_t size, uint32_t freq, uint8_t bandwidth, uint8_t datarate) {\n    ((SX1276_LoRaRadio*)radioPtr)->rx_frame((uint8_t*)dataPtr, size, freq, bandwidth, datarate);\n}\n\n// EOF\n\n","\n/* NetworkStack\n * Copyright (c) 2015 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef NETWORK_STACK_H\n#define NETWORK_STACK_H\n\n#include \"nsapi_types.h\"\n#include \"netsocket/SocketAddress.h\"\n#include \"netsocket/NetworkInterface.h\"\n#include \"DNS.h\"\n\n// Predeclared classes\nclass OnboardNetworkStack;\n\n/** NetworkStack class\n *\n *  Common interface that is shared between hardware that\n *  can connect to a network over IP. By implementing the\n *  NetworkStack, a network stack can be used as a target\n *  for instantiating network sockets.\n *  @addtogroup netsocket\n */\nclass NetworkStack: public DNS\n{\npublic:\n    virtual ~NetworkStack() {};\n\n    /** Get the local IP address\n     *\n     *  @return         Null-terminated representation of the local IP address\n     *                  or null if not yet connected\n     */\n    virtual const char *get_ip_address();\n\n    /** Translates a hostname to an IP address with specific version\n     *\n     *  The hostname may be either a domain name or an IP address. If the\n     *  hostname is an IP address, no network transactions will be performed.\n     *\n     *  If no stack-specific DNS resolution is provided, the hostname\n     *  will be resolve using a UDP socket on the stack.\n     *\n     *  @param host     Hostname to resolve\n     *  @param address  Destination for the host SocketAddress\n     *  @param version  IP version of address to resolve, NSAPI_UNSPEC indicates\n     *                  version is chosen by the stack (defaults to NSAPI_UNSPEC)\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t gethostbyname(const char *host,\n            SocketAddress *address, nsapi_version_t version = NSAPI_UNSPEC);\n\n    /** Hostname translation callback (asynchronous)\n     *\n     *  Callback will be called after DNS resolution completes or a failure occurs.\n     *\n     *  Callback should not take more than 10ms to execute, otherwise it might\n     *  prevent underlying thread processing. A portable user of the callback\n     *  should not make calls to network operations due to stack size limitations.\n     *  The callback should not perform expensive operations such as socket recv/send\n     *  calls or blocking operations.\n     *\n     *  @param status  0 on success, negative error code on failure\n     *  @param address On success, destination for the host SocketAddress\n     */\n    typedef mbed::Callback<void (nsapi_error_t result, SocketAddress *address)> hostbyname_cb_t;\n\n    /** Translates a hostname to an IP address (asynchronous)\n     *\n     *  The hostname may be either a domain name or an IP address. If the\n     *  hostname is an IP address, no network transactions will be performed.\n     *\n     *  If no stack-specific DNS resolution is provided, the hostname\n     *  will be resolve using a UDP socket on the stack.\n     *\n     *  Call is non-blocking. Result of the DNS operation is returned by the callback.\n     *  If this function returns failure, callback will not be called. In case result\n     *  is success (IP address was found from DNS cache), callback will be called\n     *  before function returns.\n     *\n     *  @param host     Hostname to resolve\n     *  @param callback Callback that is called for result\n     *  @param version  IP version of address to resolve, NSAPI_UNSPEC indicates\n     *                  version is chosen by the stack (defaults to NSAPI_UNSPEC)\n     *  @return         0 on immediate success,\n     *                  negative error code on immediate failure or\n     *                  a positive unique id that represents the hostname translation operation\n     *                  and can be passed to cancel\n     */\n    virtual nsapi_value_or_error_t gethostbyname_async(const char *host, hostbyname_cb_t callback,\n            nsapi_version_t version = NSAPI_UNSPEC);\n\n    /** Cancels asynchronous hostname translation\n     *\n     *  When translation is cancelled, callback will not be called.\n     *\n     *  @param id       Unique id of the hostname translation operation\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t gethostbyname_async_cancel(int id);\n\n    /** Add a domain name server to list of servers to query\n     *\n     *  @param address  Destination for the host address\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t add_dns_server(const SocketAddress &address);\n\n    /** Get a domain name server from a list of servers to query\n     *\n     *  Returns a DNS server address for a index. If returns error no more\n     *  DNS servers to read.\n     *\n     *  @param index    Index of the DNS server, starts from zero\n     *  @param address  Destination for the host address\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t get_dns_server(int index, SocketAddress *address);\n\n    /*  Set stack options\n     *\n     *  setstackopt allows an application to pass stack-specific options\n     *  to the underlying stack using stack-specific level and option names,\n     *  or to request generic options using levels from nsapi_stack_level_t.\n     *\n     *  For unsupported options, NSAPI_ERROR_UNSUPPORTED is returned\n     *  and the stack is unmodified.\n     *\n     *  @param level    Stack-specific protocol level or nsapi_stack_level_t\n     *  @param optname  Level-specific option name\n     *  @param optval   Option value\n     *  @param optlen   Length of the option value\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t setstackopt(int level, int optname, const void *optval, unsigned optlen);\n\n    /*  Get stack options\n     *\n     *  getstackopt allows an application to retrieve stack-specific options\n     *  to the underlying stack using stack-specific level and option names,\n     *  or to request generic options using levels from nsapi_stack_level_t.\n     *\n     *  @param level    Stack-specific protocol level or nsapi_stack_level_t\n     *  @param optname  Level-specific option name\n     *  @param optval   Destination for option value\n     *  @param optlen   Length of the option value\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t getstackopt(int level, int optname, void *optval, unsigned *optlen);\n\n    /** Dynamic downcast to a OnboardNetworkStack */\n    virtual OnboardNetworkStack *onboardNetworkStack() { return 0; }\n\nprotected:\n    friend class Socket;\n    friend class UDPSocket;\n    friend class TCPSocket;\n    friend class TCPServer;\n\n    /** Opens a socket\n     *\n     *  Creates a network socket and stores it in the specified handle.\n     *  The handle must be passed to following calls on the socket.\n     *\n     *  A stack may have a finite number of sockets, in this case\n     *  NSAPI_ERROR_NO_SOCKET is returned if no socket is available.\n     *\n     *  @param handle   Destination for the handle to a newly created socket\n     *  @param proto    Protocol of socket to open, NSAPI_TCP or NSAPI_UDP\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_open(nsapi_socket_t *handle, nsapi_protocol_t proto) = 0;\n\n    /** Close the socket\n     *\n     *  Closes any open connection and deallocates any memory associated\n     *  with the socket.\n     *\n     *  @param handle   Socket handle\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_close(nsapi_socket_t handle) = 0;\n\n    /** Bind a specific address to a socket\n     *\n     *  Binding a socket specifies the address and port on which to receive\n     *  data. If the IP address is zeroed, only the port is bound.\n     *\n     *  @param handle   Socket handle\n     *  @param address  Local address to bind\n     *  @return         0 on success, negative error code on failure.\n     */\n    virtual nsapi_error_t socket_bind(nsapi_socket_t handle, const SocketAddress &address) = 0;\n\n    /** Listen for connections on a TCP socket\n     *\n     *  Marks the socket as a passive socket that can be used to accept\n     *  incoming connections.\n     *\n     *  @param handle   Socket handle\n     *  @param backlog  Number of pending connections that can be queued\n     *                  simultaneously\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_listen(nsapi_socket_t handle, int backlog) = 0;\n\n    /** Connects TCP socket to a remote host\n     *\n     *  Initiates a connection to a remote server specified by the\n     *  indicated address.\n     *\n     *  @param handle   Socket handle\n     *  @param address  The SocketAddress of the remote host\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_connect(nsapi_socket_t handle, const SocketAddress &address) = 0;\n\n    /** Accepts a connection on a TCP socket\n     *\n     *  The server socket must be bound and set to listen for connections.\n     *  On a new connection, creates a network socket and stores it in the\n     *  specified handle. The handle must be passed to following calls on\n     *  the socket.\n     *\n     *  A stack may have a finite number of sockets, in this case\n     *  NSAPI_ERROR_NO_SOCKET is returned if no socket is available.\n     *\n     *  This call is non-blocking. If accept would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param server   Socket handle to server to accept from\n     *  @param handle   Destination for a handle to the newly created socket\n     *  @param address  Destination for the remote address or NULL\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_accept(nsapi_socket_t server,\n            nsapi_socket_t *handle, SocketAddress *address=0) = 0;\n\n    /** Send data over a TCP socket\n     *\n     *  The socket must be connected to a remote host. Returns the number of\n     *  bytes sent from the buffer.\n     *\n     *  This call is non-blocking. If send would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param handle   Socket handle\n     *  @param data     Buffer of data to send to the host\n     *  @param size     Size of the buffer in bytes\n     *  @return         Number of sent bytes on success, negative error\n     *                  code on failure\n     */\n    virtual nsapi_size_or_error_t socket_send(nsapi_socket_t handle,\n            const void *data, nsapi_size_t size) = 0;\n\n    /** Receive data over a TCP socket\n     *\n     *  The socket must be connected to a remote host. Returns the number of\n     *  bytes received into the buffer.\n     *\n     *  This call is non-blocking. If recv would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param handle   Socket handle\n     *  @param data     Destination buffer for data received from the host\n     *  @param size     Size of the buffer in bytes\n     *  @return         Number of received bytes on success, negative error\n     *                  code on failure\n     */\n    virtual nsapi_size_or_error_t socket_recv(nsapi_socket_t handle,\n            void *data, nsapi_size_t size) = 0;\n\n    /** Send a packet over a UDP socket\n     *\n     *  Sends data to the specified address. Returns the number of bytes\n     *  sent from the buffer.\n     *\n     *  This call is non-blocking. If sendto would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param handle   Socket handle\n     *  @param address  The SocketAddress of the remote host\n     *  @param data     Buffer of data to send to the host\n     *  @param size     Size of the buffer in bytes\n     *  @return         Number of sent bytes on success, negative error\n     *                  code on failure\n     */\n    virtual nsapi_size_or_error_t socket_sendto(nsapi_socket_t handle, const SocketAddress &address,\n            const void *data, nsapi_size_t size) = 0;\n\n    /** Receive a packet over a UDP socket\n     *\n     *  Receives data and stores the source address in address if address\n     *  is not NULL. Returns the number of bytes received into the buffer.\n     *\n     *  This call is non-blocking. If recvfrom would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param handle   Socket handle\n     *  @param address  Destination for the source address or NULL\n     *  @param buffer   Destination buffer for data received from the host\n     *  @param size     Size of the buffer in bytes\n     *  @return         Number of received bytes on success, negative error\n     *                  code on failure\n     */\n    virtual nsapi_size_or_error_t socket_recvfrom(nsapi_socket_t handle, SocketAddress *address,\n            void *buffer, nsapi_size_t size) = 0;\n\n    /** Register a callback on state change of the socket\n     *\n     *  The specified callback will be called on state changes such as when\n     *  the socket can recv/send/accept successfully and on when an error\n     *  occurs. The callback may also be called spuriously without reason.\n     *\n     *  The callback may be called in an interrupt context and should not\n     *  perform expensive operations such as recv/send calls.\n     *\n     *  @param handle   Socket handle\n     *  @param callback Function to call on state change\n     *  @param data     Argument to pass to callback\n     */\n    virtual void socket_attach(nsapi_socket_t handle, void (*callback)(void *), void *data) = 0;\n\n    /*  Set stack-specific socket options\n     *\n     *  The setsockopt allow an application to pass stack-specific hints\n     *  to the underlying stack. For unsupported options,\n     *  NSAPI_ERROR_UNSUPPORTED is returned and the socket is unmodified.\n     *\n     *  @param handle   Socket handle\n     *  @param level    Stack-specific protocol level\n     *  @param optname  Stack-specific option identifier\n     *  @param optval   Option value\n     *  @param optlen   Length of the option value\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t setsockopt(nsapi_socket_t handle, int level,\n            int optname, const void *optval, unsigned optlen);\n\n    /*  Get stack-specific socket options\n     *\n     *  The getstackopt allow an application to retrieve stack-specific hints\n     *  from the underlying stack. For unsupported options,\n     *  NSAPI_ERROR_UNSUPPORTED is returned and optval is unmodified.\n     *\n     *  @param handle   Socket handle\n     *  @param level    Stack-specific protocol level\n     *  @param optname  Stack-specific option identifier\n     *  @param optval   Destination for option value\n     *  @param optlen   Length of the option value\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t getsockopt(nsapi_socket_t handle, int level,\n            int optname, void *optval, unsigned *optlen);\n\nprivate:\n\n    /** Call in callback\n      *\n      *  Callback is used to call the call in method of the network stack.\n      */\n    typedef mbed::Callback<nsapi_error_t (int delay_ms, mbed::Callback<void()> user_cb)> call_in_callback_cb_t;\n\n    /** Get a call in callback\n     *\n     *  Get a call in callback from the network stack context.\n     *\n     *  Callback should not take more than 10ms to execute, otherwise it might\n     *  prevent underlying thread processing. A portable user of the callback\n     *  should not make calls to network operations due to stack size limitations.\n     *  The callback should not perform expensive operations such as socket recv/send\n     *  calls or blocking operations.\n     *\n     *  @return         Call in callback\n     */\n    virtual call_in_callback_cb_t get_call_in_callback();\n\n    /** Call a callback after a delay\n     *\n     *  Call a callback from the network stack context after a delay. If function\n     *  returns error callback will not be called.\n     *\n     *  @param delay    Delay in milliseconds\n     *  @param func     Callback to be called\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t call_in(int delay, mbed::Callback<void()> func);\n};\n\n/** Convert a raw nsapi_stack_t object into a C++ NetworkStack object\n *\n *  @param stack    Reference to an object that can be converted to a stack\n *                  - A raw nsapi_stack_t object\n *                  - A reference to a network stack\n *                  - A reference to a network interface\n *  @return         Reference to the underlying network stack\n */\nNetworkStack *nsapi_create_stack(nsapi_stack_t *stack);\nNetworkStack *nsapi_create_stack(NetworkStack *stack);\n\ntemplate <typename IF>\nNetworkStack *nsapi_create_stack(IF *iface)\n{\n    return nsapi_create_stack(static_cast<NetworkInterface *>(iface)->get_stack());\n}\n\n\n#endif\n","/*\n *  SSLv3/TLSv1 client-side functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SSL_CLI_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free      free\n#endif\n\n#include \"mbedtls/debug.h\"\n#include \"mbedtls/ssl.h\"\n#include \"mbedtls/ssl_internal.h\"\n\n#include <string.h>\n\n#include <stdint.h>\n\n#if defined(MBEDTLS_HAVE_TIME)\n#include \"mbedtls/platform_time.h\"\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n#include \"mbedtls/platform_util.h\"\n#endif\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\nstatic void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,\n                                    unsigned char *buf,\n                                    size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t hostname_len;\n\n    *olen = 0;\n\n    if( ssl->hostname == NULL )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding server name extension: %s\",\n                   ssl->hostname ) );\n\n    hostname_len = strlen( ssl->hostname );\n\n    if( end < p || (size_t)( end - p ) < hostname_len + 9 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    /*\n     * Sect. 3, RFC 6066 (TLS Extensions Definitions)\n     *\n     * In order to provide any of the server names, clients MAY include an\n     * extension of type \"server_name\" in the (extended) client hello. The\n     * \"extension_data\" field of this extension SHALL contain\n     * \"ServerNameList\" where:\n     *\n     * struct {\n     *     NameType name_type;\n     *     select (name_type) {\n     *         case host_name: HostName;\n     *     } name;\n     * } ServerName;\n     *\n     * enum {\n     *     host_name(0), (255)\n     * } NameType;\n     *\n     * opaque HostName<1..2^16-1>;\n     *\n     * struct {\n     *     ServerName server_name_list<1..2^16-1>\n     * } ServerNameList;\n     *\n     */\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );\n    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );\n\n    memcpy( p, ssl->hostname, hostname_len );\n\n    *olen = hostname_len + 9;\n}\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\nstatic void ssl_write_renegotiation_ext( mbedtls_ssl_context *ssl,\n                                         unsigned char *buf,\n                                         size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    /* We're always including an TLS_EMPTY_RENEGOTIATION_INFO_SCSV in the\n     * initial ClientHello, in which case also adding the renegotiation\n     * info extension is NOT RECOMMENDED as per RFC 5746 Section 3.4. */\n    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding renegotiation extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 5 + ssl->verify_data_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    /*\n     * Secure renegotiation\n     */\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = ( ssl->verify_data_len + 1 ) & 0xFF;\n    *p++ = ssl->verify_data_len & 0xFF;\n\n    memcpy( p, ssl->own_verify_data, ssl->verify_data_len );\n\n    *olen = 5 + ssl->verify_data_len;\n}\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n/*\n * Only if we handle at least one key exchange that needs signatures.\n */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\nstatic void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,\n                                                unsigned char *buf,\n                                                size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t sig_alg_len = 0;\n    const int *md;\n#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)\n    unsigned char *sig_alg_list = buf + 6;\n#endif\n\n    *olen = 0;\n\n    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding signature_algorithms extension\" ) );\n\n    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )\n    {\n#if defined(MBEDTLS_ECDSA_C)\n        sig_alg_len += 2;\n#endif\n#if defined(MBEDTLS_RSA_C)\n        sig_alg_len += 2;\n#endif\n    }\n\n    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    /*\n     * Prepare signature_algorithms extension (TLS 1.2)\n     */\n    sig_alg_len = 0;\n\n    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )\n    {\n#if defined(MBEDTLS_ECDSA_C)\n        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );\n        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;\n#endif\n#if defined(MBEDTLS_RSA_C)\n        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );\n        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;\n#endif\n    }\n\n    /*\n     * enum {\n     *     none(0), md5(1), sha1(2), sha224(3), sha256(4), sha384(5),\n     *     sha512(6), (255)\n     * } HashAlgorithm;\n     *\n     * enum { anonymous(0), rsa(1), dsa(2), ecdsa(3), (255) }\n     *   SignatureAlgorithm;\n     *\n     * struct {\n     *     HashAlgorithm hash;\n     *     SignatureAlgorithm signature;\n     * } SignatureAndHashAlgorithm;\n     *\n     * SignatureAndHashAlgorithm\n     *   supported_signature_algorithms<2..2^16-2>;\n     */\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );\n\n    *olen = 6 + sig_alg_len;\n}\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,\n                                                     unsigned char *buf,\n                                                     size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    unsigned char *elliptic_curve_list = p + 6;\n    size_t elliptic_curve_len = 0;\n    const mbedtls_ecp_curve_info *info;\n#if defined(MBEDTLS_ECP_C)\n    const mbedtls_ecp_group_id *grp_id;\n#else\n    ((void) ssl);\n#endif\n\n    *olen = 0;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding supported_elliptic_curves extension\" ) );\n\n#if defined(MBEDTLS_ECP_C)\n    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )\n#else\n    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )\n#endif\n    {\n#if defined(MBEDTLS_ECP_C)\n        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );\n#endif\n        if( info == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"invalid curve in ssl configuration\" ) );\n            return;\n        }\n\n        elliptic_curve_len += 2;\n    }\n\n    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    elliptic_curve_len = 0;\n\n#if defined(MBEDTLS_ECP_C)\n    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )\n#else\n    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )\n#endif\n    {\n#if defined(MBEDTLS_ECP_C)\n        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );\n#endif\n        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;\n        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;\n    }\n\n    if( elliptic_curve_len == 0 )\n        return;\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );\n\n    *olen = 6 + elliptic_curve_len;\n}\n\nstatic void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,\n                                                   unsigned char *buf,\n                                                   size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding supported_point_formats extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 6 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 2;\n\n    *p++ = 1;\n    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;\n\n    *olen = 6;\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||\n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic void ssl_write_ecjpake_kkpp_ext( mbedtls_ssl_context *ssl,\n                                        unsigned char *buf,\n                                        size_t *olen )\n{\n    int ret;\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t kkpp_len;\n\n    *olen = 0;\n\n    /* Skip costly extension if we can't use EC J-PAKE anyway */\n    if( mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding ecjpake_kkpp extension\" ) );\n\n    if( end - p < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP      ) & 0xFF );\n\n    /*\n     * We may need to send ClientHello multiple times for Hello verification.\n     * We don't want to compute fresh values every time (both for performance\n     * and consistency reasons), so cache the extension content.\n     */\n    if( ssl->handshake->ecjpake_cache == NULL ||\n        ssl->handshake->ecjpake_cache_len == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"generating new ecjpake parameters\" ) );\n\n        ret = mbedtls_ecjpake_write_round_one( &ssl->handshake->ecjpake_ctx,\n                                        p + 2, end - p - 2, &kkpp_len,\n                                        ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1 , \"mbedtls_ecjpake_write_round_one\", ret );\n            return;\n        }\n\n        ssl->handshake->ecjpake_cache = mbedtls_calloc( 1, kkpp_len );\n        if( ssl->handshake->ecjpake_cache == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"allocation failed\" ) );\n            return;\n        }\n\n        memcpy( ssl->handshake->ecjpake_cache, p + 2, kkpp_len );\n        ssl->handshake->ecjpake_cache_len = kkpp_len;\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"re-using cached ecjpake parameters\" ) );\n\n        kkpp_len = ssl->handshake->ecjpake_cache_len;\n\n        if( (size_t)( end - p - 2 ) < kkpp_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n            return;\n        }\n\n        memcpy( p + 2, ssl->handshake->ecjpake_cache, kkpp_len );\n    }\n\n    *p++ = (unsigned char)( ( kkpp_len >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( kkpp_len      ) & 0xFF );\n\n    *olen = kkpp_len + 4;\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nstatic void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,\n                                               unsigned char *buf,\n                                               size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding max_fragment_length extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 5 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 1;\n\n    *p++ = ssl->conf->mfl_code;\n\n    *olen = 5;\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nstatic void ssl_write_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                          unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding truncated_hmac extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nstatic void ssl_write_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,\n                                       unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    if( ssl->conf->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED ||\n        ssl->conf->max_minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding encrypt_then_mac \"\n                        \"extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nstatic void ssl_write_extended_ms_ext( mbedtls_ssl_context *ssl,\n                                       unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||\n        ssl->conf->max_minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding extended_master_secret \"\n                        \"extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,\n                                          unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t tlen = ssl->session_negotiate->ticket_len;\n\n    *olen = 0;\n\n    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding session ticket extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 4 + tlen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( tlen      ) & 0xFF );\n\n    *olen = 4;\n\n    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"sending session ticket of length %d\", tlen ) );\n\n    memcpy( p, ssl->session_negotiate->ticket, tlen );\n\n    *olen += tlen;\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_SSL_ALPN)\nstatic void ssl_write_alpn_ext( mbedtls_ssl_context *ssl,\n                                unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t alpnlen = 0;\n    const char **cur;\n\n    *olen = 0;\n\n    if( ssl->conf->alpn_list == NULL )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding alpn extension\" ) );\n\n    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )\n        alpnlen += (unsigned char)( strlen( *cur ) & 0xFF ) + 1;\n\n    if( end < p || (size_t)( end - p ) < 6 + alpnlen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );\n\n    /*\n     * opaque ProtocolName<1..2^8-1>;\n     *\n     * struct {\n     *     ProtocolName protocol_name_list<2..2^16-1>\n     * } ProtocolNameList;\n     */\n\n    /* Skip writing extension and list length for now */\n    p += 4;\n\n    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )\n    {\n        *p = (unsigned char)( strlen( *cur ) & 0xFF );\n        memcpy( p + 1, *cur, *p );\n        p += 1 + *p;\n    }\n\n    *olen = p - buf;\n\n    /* List length = olen - 2 (ext_type) - 2 (ext_len) - 2 (list_len) */\n    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );\n    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );\n\n    /* Extension length = olen - 2 (ext_type) - 2 (ext_len) */\n    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );\n    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );\n}\n#endif /* MBEDTLS_SSL_ALPN */\n\n/*\n * Generate random bytes for ClientHello\n */\nstatic int ssl_generate_random( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *p = ssl->handshake->randbytes;\n#if defined(MBEDTLS_HAVE_TIME)\n    mbedtls_time_t t;\n#endif\n\n    /*\n     * When responding to a verify request, MUST reuse random (RFC 6347 4.2.1)\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->verify_cookie != NULL )\n    {\n        return( 0 );\n    }\n#endif\n\n#if defined(MBEDTLS_HAVE_TIME)\n    t = mbedtls_time( NULL );\n    *p++ = (unsigned char)( t >> 24 );\n    *p++ = (unsigned char)( t >> 16 );\n    *p++ = (unsigned char)( t >>  8 );\n    *p++ = (unsigned char)( t       );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, current time: %lu\", t ) );\n#else\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )\n        return( ret );\n\n    p += 4;\n#endif /* MBEDTLS_HAVE_TIME */\n\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/**\n * \\brief           Validate cipher suite against config in SSL context.\n *\n * \\param suite_info    cipher suite to validate\n * \\param ssl           SSL context\n * \\param min_minor_ver Minimal minor version to accept a cipher suite\n * \\param max_minor_ver Maximal minor version to accept a cipher suite\n *\n * \\return          0 if valid, else 1\n */\nstatic int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,\n                                     const mbedtls_ssl_context * ssl,\n                                     int min_minor_ver, int max_minor_ver )\n{\n    (void) ssl;\n    if( suite_info == NULL )\n        return( 1 );\n\n    if( suite_info->min_minor_ver > max_minor_ver ||\n            suite_info->max_minor_ver < min_minor_ver )\n        return( 1 );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n            ( suite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS ) )\n        return( 1 );\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n    if( ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&\n            suite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )\n        return( 1 );\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( suite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&\n            mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )\n        return( 1 );\n#endif\n\n    return( 0 );\n}\n\nstatic int ssl_write_client_hello( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t i, n, olen, ext_len = 0;\n    unsigned char *buf;\n    unsigned char *p, *q;\n    unsigned char offer_compress;\n    const int *ciphersuites;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write client hello\" ) );\n\n    if( ssl->conf->f_rng == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no RNG provided\") );\n        return( MBEDTLS_ERR_SSL_NO_RNG );\n    }\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )\n#endif\n    {\n        ssl->major_ver = ssl->conf->min_major_ver;\n        ssl->minor_ver = ssl->conf->min_minor_ver;\n    }\n\n    if( ssl->conf->max_major_ver == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"configured max major version is invalid, \"\n                            \"consider using mbedtls_ssl_config_defaults()\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    /*\n     *     0  .   0   handshake type\n     *     1  .   3   handshake length\n     *     4  .   5   highest version supported\n     *     6  .   9   current UNIX time\n     *    10  .  37   random bytes\n     */\n    buf = ssl->out_msg;\n    p = buf + 4;\n\n    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,\n                       ssl->conf->transport, p );\n    p += 2;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, max version: [%d:%d]\",\n                   buf[4], buf[5] ) );\n\n    if( ( ret = ssl_generate_random( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_generate_random\", ret );\n        return( ret );\n    }\n\n    memcpy( p, ssl->handshake->randbytes, 32 );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, random bytes\", p, 32 );\n    p += 32;\n\n    /*\n     *    38  .  38   session id length\n     *    39  . 39+n  session id\n     *   39+n . 39+n  DTLS only: cookie length (1 byte)\n     *   40+n .  ..   DTSL only: cookie\n     *   ..   . ..    ciphersuitelist length (2 bytes)\n     *   ..   . ..    ciphersuitelist\n     *   ..   . ..    compression methods length (1 byte)\n     *   ..   . ..    compression methods\n     *   ..   . ..    extensions length (2 bytes)\n     *   ..   . ..    extensions\n     */\n    n = ssl->session_negotiate->id_len;\n\n    if( n < 16 || n > 32 ||\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||\n#endif\n        ssl->handshake->resume == 0 )\n    {\n        n = 0;\n    }\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    /*\n     * RFC 5077 section 3.4: \"When presenting a ticket, the client MAY\n     * generate and include a Session ID in the TLS ClientHello.\"\n     */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )\n#endif\n    {\n        if( ssl->session_negotiate->ticket != NULL &&\n                ssl->session_negotiate->ticket_len != 0 )\n        {\n            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );\n\n            if( ret != 0 )\n                return( ret );\n\n            ssl->session_negotiate->id_len = n = 32;\n        }\n    }\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n    *p++ = (unsigned char) n;\n\n    for( i = 0; i < n; i++ )\n        *p++ = ssl->session_negotiate->id[i];\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, session id len.: %d\", n ) );\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"client hello, session id\", buf + 39, n );\n\n    /*\n     * DTLS cookie\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        if( ssl->handshake->verify_cookie == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"no verify cookie to send\" ) );\n            *p++ = 0;\n        }\n        else\n        {\n            MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, cookie\",\n                              ssl->handshake->verify_cookie,\n                              ssl->handshake->verify_cookie_len );\n\n            *p++ = ssl->handshake->verify_cookie_len;\n            memcpy( p, ssl->handshake->verify_cookie,\n                       ssl->handshake->verify_cookie_len );\n            p += ssl->handshake->verify_cookie_len;\n        }\n    }\n#endif\n\n    /*\n     * Ciphersuite list\n     */\n    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];\n\n    /* Skip writing ciphersuite length for now */\n    n = 0;\n    q = p;\n    p += 2;\n\n    for( i = 0; ciphersuites[i] != 0; i++ )\n    {\n        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );\n\n        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,\n                                      ssl->conf->min_minor_ver,\n                                      ssl->conf->max_minor_ver ) != 0 )\n            continue;\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, add ciphersuite: %04x\",\n                                    ciphersuites[i] ) );\n\n        n++;\n        *p++ = (unsigned char)( ciphersuites[i] >> 8 );\n        *p++ = (unsigned char)( ciphersuites[i]      );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, got %d ciphersuites (excluding SCSVs)\", n ) );\n\n    /*\n     * Add TLS_EMPTY_RENEGOTIATION_INFO_SCSV\n     */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )\n#endif\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"adding EMPTY_RENEGOTIATION_INFO_SCSV\" ) );\n        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );\n        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );\n        n++;\n    }\n\n    /* Some versions of OpenSSL don't handle it correctly if not at end */\n#if defined(MBEDTLS_SSL_FALLBACK_SCSV)\n    if( ssl->conf->fallback == MBEDTLS_SSL_IS_FALLBACK )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"adding FALLBACK_SCSV\" ) );\n        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE >> 8 );\n        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );\n        n++;\n    }\n#endif\n\n    *q++ = (unsigned char)( n >> 7 );\n    *q++ = (unsigned char)( n << 1 );\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    offer_compress = 1;\n#else\n    offer_compress = 0;\n#endif\n\n    /*\n     * We don't support compression with DTLS right now: if many records come\n     * in the same datagram, uncompressing one could overwrite the next one.\n     * We don't want to add complexity for handling that case unless there is\n     * an actual need for it.\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        offer_compress = 0;\n#endif\n\n    if( offer_compress )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, compress len.: %d\", 2 ) );\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, compress alg.: %d %d\",\n                            MBEDTLS_SSL_COMPRESS_DEFLATE, MBEDTLS_SSL_COMPRESS_NULL ) );\n\n        *p++ = 2;\n        *p++ = MBEDTLS_SSL_COMPRESS_DEFLATE;\n        *p++ = MBEDTLS_SSL_COMPRESS_NULL;\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, compress len.: %d\", 1 ) );\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, compress alg.: %d\",\n                            MBEDTLS_SSL_COMPRESS_NULL ) );\n\n        *p++ = 1;\n        *p++ = MBEDTLS_SSL_COMPRESS_NULL;\n    }\n\n    // First write extensions, then the total length\n    //\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n    /* Note that TLS_EMPTY_RENEGOTIATION_INFO_SCSV is always added\n     * even if MBEDTLS_SSL_RENEGOTIATION is not defined. */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n\n    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n    ssl_write_encrypt_then_mac_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_ALPN)\n    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n    /* olen unused if all extensions are disabled */\n    ((void) olen);\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, total extension length: %d\",\n                   ext_len ) );\n\n    if( ext_len > 0 )\n    {\n        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );\n        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );\n        p += ext_len;\n    }\n\n    ssl->out_msglen  = p - buf;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_send_flight_completed( ssl );\n#endif\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write client hello\" ) );\n\n    return( 0 );\n}\n\nstatic int ssl_parse_renegotiation_info( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        /* Check verify-data in constant-time. The length OTOH is no secret */\n        if( len    != 1 + ssl->verify_data_len * 2 ||\n            buf[0] !=     ssl->verify_data_len * 2 ||\n            mbedtls_ssl_safer_memcmp( buf + 1,\n                          ssl->own_verify_data, ssl->verify_data_len ) != 0 ||\n            mbedtls_ssl_safer_memcmp( buf + 1 + ssl->verify_data_len,\n                          ssl->peer_verify_data, ssl->verify_data_len ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching renegotiation info\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n    {\n        if( len != 1 || buf[0] != 0x00 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-zero length renegotiation info\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n\n        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;\n    }\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nstatic int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,\n                                              const unsigned char *buf,\n                                              size_t len )\n{\n    /*\n     * server should use the extension only if we did,\n     * and if so the server's value should match ours (and len is always 1)\n     */\n    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||\n        len != 1 ||\n        buf[0] != ssl->conf->mfl_code )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching max fragment length extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nstatic int ssl_parse_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED ||\n        len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching truncated HMAC extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    ((void) buf);\n\n    ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nstatic int ssl_parse_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( ssl->conf->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED ||\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||\n        len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching encrypt-then-MAC extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    ((void) buf);\n\n    ssl->session_negotiate->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nstatic int ssl_parse_extended_ms_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||\n        len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching extended master secret extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    ((void) buf);\n\n    ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||\n        len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching session ticket extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    ((void) buf);\n\n    ssl->handshake->new_session_ticket = 1;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic int ssl_parse_supported_point_formats_ext( mbedtls_ssl_context *ssl,\n                                                  const unsigned char *buf,\n                                                  size_t len )\n{\n    size_t list_size;\n    const unsigned char *p;\n\n    list_size = buf[0];\n    if( list_size + 1 != len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    p = buf + 1;\n    while( list_size > 0 )\n    {\n        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||\n            p[0] == MBEDTLS_ECP_PF_COMPRESSED )\n        {\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)\n            ssl->handshake->ecdh_ctx.point_format = p[0];\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n            ssl->handshake->ecjpake_ctx.point_format = p[0];\n#endif\n            MBEDTLS_SSL_DEBUG_MSG( 4, ( \"point format selected: %d\", p[0] ) );\n            return( 0 );\n        }\n\n        list_size--;\n        p++;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no point format in common\" ) );\n    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n    return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||\n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic int ssl_parse_ecjpake_kkpp( mbedtls_ssl_context *ssl,\n                                   const unsigned char *buf,\n                                   size_t len )\n{\n    int ret;\n\n    if( ssl->transform_negotiate->ciphersuite_info->key_exchange !=\n        MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"skip ecjpake kkpp extension\" ) );\n        return( 0 );\n    }\n\n    /* If we got here, we no longer need our cached extension */\n    mbedtls_free( ssl->handshake->ecjpake_cache );\n    ssl->handshake->ecjpake_cache = NULL;\n    ssl->handshake->ecjpake_cache_len = 0;\n\n    if( ( ret = mbedtls_ecjpake_read_round_one( &ssl->handshake->ecjpake_ctx,\n                                                buf, len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_one\", ret );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( ret );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_ALPN)\nstatic int ssl_parse_alpn_ext( mbedtls_ssl_context *ssl,\n                               const unsigned char *buf, size_t len )\n{\n    size_t list_len, name_len;\n    const char **p;\n\n    /* If we didn't send it, the server shouldn't send it */\n    if( ssl->conf->alpn_list == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching ALPN extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    /*\n     * opaque ProtocolName<1..2^8-1>;\n     *\n     * struct {\n     *     ProtocolName protocol_name_list<2..2^16-1>\n     * } ProtocolNameList;\n     *\n     * the \"ProtocolNameList\" MUST contain exactly one \"ProtocolName\"\n     */\n\n    /* Min length is 2 (list_len) + 1 (name_len) + 1 (name) */\n    if( len < 4 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    list_len = ( buf[0] << 8 ) | buf[1];\n    if( list_len != len - 2 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    name_len = buf[2];\n    if( name_len != list_len - 1 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    /* Check that the server chosen protocol was in our list and save it */\n    for( p = ssl->conf->alpn_list; *p != NULL; p++ )\n    {\n        if( name_len == strlen( *p ) &&\n            memcmp( buf + 3, *p, name_len ) == 0 )\n        {\n            ssl->alpn_chosen = *p;\n            return( 0 );\n        }\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"ALPN extension: no matching protocol\" ) );\n    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n    return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n}\n#endif /* MBEDTLS_SSL_ALPN */\n\n/*\n * Parse HelloVerifyRequest.  Only called after verifying the HS type.\n */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\nstatic int ssl_parse_hello_verify_request( mbedtls_ssl_context *ssl )\n{\n    const unsigned char *p = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n    int major_ver, minor_ver;\n    unsigned char cookie_len;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse hello verify request\" ) );\n\n    /*\n     * struct {\n     *   ProtocolVersion server_version;\n     *   opaque cookie<0..2^8-1>;\n     * } HelloVerifyRequest;\n     */\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"server version\", p, 2 );\n    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, p );\n    p += 2;\n\n    /*\n     * Since the RFC is not clear on this point, accept DTLS 1.0 (TLS 1.1)\n     * even is lower than our min version.\n     */\n    if( major_ver < MBEDTLS_SSL_MAJOR_VERSION_3 ||\n        minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 ||\n        major_ver > ssl->conf->max_major_ver  ||\n        minor_ver > ssl->conf->max_minor_ver  )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server version\" ) );\n\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n\n        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );\n    }\n\n    cookie_len = *p++;\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"cookie\", p, cookie_len );\n\n    if( ( ssl->in_msg + ssl->in_msglen ) - p < cookie_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1,\n            ( \"cookie length does not match incoming message size\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                    MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    mbedtls_free( ssl->handshake->verify_cookie );\n\n    ssl->handshake->verify_cookie = mbedtls_calloc( 1, cookie_len );\n    if( ssl->handshake->verify_cookie  == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc failed (%d bytes)\", cookie_len ) );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    memcpy( ssl->handshake->verify_cookie, p, cookie_len );\n    ssl->handshake->verify_cookie_len = cookie_len;\n\n    /* Start over at ClientHello */\n    ssl->state = MBEDTLS_SSL_CLIENT_HELLO;\n    mbedtls_ssl_reset_checksum( ssl );\n\n    mbedtls_ssl_recv_flight_completed( ssl );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse hello verify request\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\nstatic int ssl_parse_server_hello( mbedtls_ssl_context *ssl )\n{\n    int ret, i;\n    size_t n;\n    size_t ext_len;\n    unsigned char *buf, *ext;\n    unsigned char comp;\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    int accept_comp;\n#endif\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    int renegotiation_info_seen = 0;\n#endif\n    int handshake_failure = 0;\n    const mbedtls_ssl_ciphersuite_t *suite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server hello\" ) );\n\n    buf = ssl->in_msg;\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        /* No alert on a read error. */\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n        {\n            ssl->renego_records_seen++;\n\n            if( ssl->conf->renego_max_records >= 0 &&\n                ssl->renego_records_seen > ssl->conf->renego_max_records )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation requested, \"\n                                    \"but not honored by server\" ) );\n                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n            }\n\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-handshake message during renego\" ) );\n\n            ssl->keep_current_message = 1;\n            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );\n        }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        if( buf[0] == MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"received hello verify request\" ) );\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server hello\" ) );\n            return( ssl_parse_hello_verify_request( ssl ) );\n        }\n        else\n        {\n            /* We made it through the verification process */\n            mbedtls_free( ssl->handshake->verify_cookie );\n            ssl->handshake->verify_cookie = NULL;\n            ssl->handshake->verify_cookie_len = 0;\n        }\n    }\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||\n        buf[0] != MBEDTLS_SSL_HS_SERVER_HELLO )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    /*\n     *  0   .  1    server_version\n     *  2   . 33    random (maybe including 4 bytes of Unix time)\n     * 34   . 34    session_id length = n\n     * 35   . 34+n  session_id\n     * 35+n . 36+n  cipher_suite\n     * 37+n . 37+n  compression_method\n     *\n     * 38+n . 39+n  extensions length (optional)\n     * 40+n .  ..   extensions\n     */\n    buf += mbedtls_ssl_hs_hdr_len( ssl );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"server hello, version\", buf + 0, 2 );\n    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,\n                      ssl->conf->transport, buf + 0 );\n\n    if( ssl->major_ver < ssl->conf->min_major_ver ||\n        ssl->minor_ver < ssl->conf->min_minor_ver ||\n        ssl->major_ver > ssl->conf->max_major_ver ||\n        ssl->minor_ver > ssl->conf->max_minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server version out of bounds - \"\n                            \" min: [%d:%d], server: [%d:%d], max: [%d:%d]\",\n                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,\n                            ssl->major_ver, ssl->minor_ver,\n                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );\n\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n\n        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, current time: %lu\",\n                           ( (uint32_t) buf[2] << 24 ) |\n                           ( (uint32_t) buf[3] << 16 ) |\n                           ( (uint32_t) buf[4] <<  8 ) |\n                           ( (uint32_t) buf[5]       ) ) );\n\n    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );\n\n    n = buf[34];\n\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server hello, random bytes\", buf + 2, 32 );\n\n    if( n > 32 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )\n    {\n        ext_len = ( ( buf[38 + n] <<  8 )\n                  | ( buf[39 + n]       ) );\n\n        if( ( ext_len > 0 && ext_len < 4 ) ||\n            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n    }\n    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )\n    {\n        ext_len = 0;\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    /* ciphersuite (used later) */\n    i = ( buf[35 + n] << 8 ) | buf[36 + n];\n\n    /*\n     * Read and check compression\n     */\n    comp = buf[37 + n];\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    /* See comments in ssl_write_client_hello() */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        accept_comp = 0;\n    else\n#endif\n        accept_comp = 1;\n\n    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&\n        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )\n#else /* MBEDTLS_ZLIB_SUPPORT */\n    if( comp != MBEDTLS_SSL_COMPRESS_NULL )\n#endif/* MBEDTLS_ZLIB_SUPPORT */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server hello, bad compression: %d\", comp ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n    }\n\n    /*\n     * Initialize update checksum functions\n     */\n    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );\n\n    if( ssl->transform_negotiate->ciphersuite_info == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"ciphersuite info for %04x not found\", i ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, session id len.: %d\", n ) );\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server hello, session id\", buf + 35, n );\n\n    /*\n     * Check if the session can be resumed\n     */\n    if( ssl->handshake->resume == 0 || n == 0 ||\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||\n#endif\n        ssl->session_negotiate->ciphersuite != i ||\n        ssl->session_negotiate->compression != comp ||\n        ssl->session_negotiate->id_len != n ||\n        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )\n    {\n        ssl->state++;\n        ssl->handshake->resume = 0;\n#if defined(MBEDTLS_HAVE_TIME)\n        ssl->session_negotiate->start = mbedtls_time( NULL );\n#endif\n        ssl->session_negotiate->ciphersuite = i;\n        ssl->session_negotiate->compression = comp;\n        ssl->session_negotiate->id_len = n;\n        memcpy( ssl->session_negotiate->id, buf + 35, n );\n    }\n    else\n    {\n        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;\n\n        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n            return( ret );\n        }\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"%s session has been resumed\",\n                   ssl->handshake->resume ? \"a\" : \"no\" ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, chosen ciphersuite: %04x\", i ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, compress alg.: %d\", buf[37 + n] ) );\n\n    /*\n     * Perform cipher suite validation in same way as in ssl_write_client_hello.\n     */\n    i = 0;\n    while( 1 )\n    {\n        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n\n        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==\n            ssl->session_negotiate->ciphersuite )\n        {\n            break;\n        }\n    }\n\n    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );\n    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, chosen ciphersuite: %s\", suite_info->name ) );\n\n    if( comp != MBEDTLS_SSL_COMPRESS_NULL\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n        && comp != MBEDTLS_SSL_COMPRESS_DEFLATE\n#endif\n      )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n    ssl->session_negotiate->compression = comp;\n\n    ext = buf + 40 + n;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"server hello, total extension length: %d\", ext_len ) );\n\n    while( ext_len )\n    {\n        unsigned int ext_id   = ( ( ext[0] <<  8 )\n                                | ( ext[1]       ) );\n        unsigned int ext_size = ( ( ext[2] <<  8 )\n                                | ( ext[3]       ) );\n\n        if( ext_size + 4 > ext_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n\n        switch( ext_id )\n        {\n        case MBEDTLS_TLS_EXT_RENEGOTIATION_INFO:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found renegotiation extension\" ) );\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            renegotiation_info_seen = 1;\n#endif\n\n            if( ( ret = ssl_parse_renegotiation_info( ssl, ext + 4,\n                                                      ext_size ) ) != 0 )\n                return( ret );\n\n            break;\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n        case MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found max_fragment_length extension\" ) );\n\n            if( ( ret = ssl_parse_max_fragment_length_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n        case MBEDTLS_TLS_EXT_TRUNCATED_HMAC:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found truncated_hmac extension\" ) );\n\n            if( ( ret = ssl_parse_truncated_hmac_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n        case MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found encrypt_then_mac extension\" ) );\n\n            if( ( ret = ssl_parse_encrypt_then_mac_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n        case MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found extended_master_secret extension\" ) );\n\n            if( ( ret = ssl_parse_extended_ms_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n        case MBEDTLS_TLS_EXT_SESSION_TICKET:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found session_ticket extension\" ) );\n\n            if( ( ret = ssl_parse_session_ticket_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n        case MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found supported_point_formats extension\" ) );\n\n            if( ( ret = ssl_parse_supported_point_formats_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||\n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n        case MBEDTLS_TLS_EXT_ECJPAKE_KKPP:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found ecjpake_kkpp extension\" ) );\n\n            if( ( ret = ssl_parse_ecjpake_kkpp( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_ALPN)\n        case MBEDTLS_TLS_EXT_ALPN:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found alpn extension\" ) );\n\n            if( ( ret = ssl_parse_alpn_ext( ssl, ext + 4, ext_size ) ) != 0 )\n                return( ret );\n\n            break;\n#endif /* MBEDTLS_SSL_ALPN */\n\n        default:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"unknown extension found: %d (ignoring)\",\n                           ext_id ) );\n        }\n\n        ext_len -= 4 + ext_size;\n        ext += 4 + ext_size;\n\n        if( ext_len > 0 && ext_len < 4 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n    }\n\n    /*\n     * Renegotiation security checks\n     */\n    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation, breaking off handshake\" ) );\n        handshake_failure = 1;\n    }\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&\n             renegotiation_info_seen == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension missing (secure)\" ) );\n        handshake_failure = 1;\n    }\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n             ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation not allowed\" ) );\n        handshake_failure = 1;\n    }\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n             renegotiation_info_seen == 1 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension present (legacy)\" ) );\n        handshake_failure = 1;\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n    if( handshake_failure == 1 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server hello\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\nstatic int ssl_parse_server_dh_params( mbedtls_ssl_context *ssl, unsigned char **p,\n                                       unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n\n    /*\n     * Ephemeral DH parameters:\n     *\n     * struct {\n     *     opaque dh_p<1..2^16-1>;\n     *     opaque dh_g<1..2^16-1>;\n     *     opaque dh_Ys<1..2^16-1>;\n     * } ServerDHParams;\n     */\n    if( ( ret = mbedtls_dhm_read_params( &ssl->handshake->dhm_ctx, p, end ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 2, ( \"mbedtls_dhm_read_params\" ), ret );\n        return( ret );\n    }\n\n    if( ssl->handshake->dhm_ctx.len * 8 < ssl->conf->dhm_min_bitlen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"DHM prime too short: %d < %d\",\n                                    ssl->handshake->dhm_ctx.len * 8,\n                                    ssl->conf->dhm_min_bitlen ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: P \", &ssl->handshake->dhm_ctx.P  );\n    MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: G \", &ssl->handshake->dhm_ctx.G  );\n    MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: GY\", &ssl->handshake->dhm_ctx.GY );\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\nstatic int ssl_check_server_ecdh_params( const mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    curve_info = mbedtls_ecp_curve_info_from_grp_id( ssl->handshake->ecdh_ctx.grp.id );\n    if( curve_info == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"ECDH curve: %s\", curve_info->name ) );\n\n#if defined(MBEDTLS_ECP_C)\n    if( mbedtls_ssl_check_curve( ssl, ssl->handshake->ecdh_ctx.grp.id ) != 0 )\n#else\n    if( ssl->handshake->ecdh_ctx.grp.nbits < 163 ||\n        ssl->handshake->ecdh_ctx.grp.nbits > 521 )\n#endif\n        return( -1 );\n\n    MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Qp\", &ssl->handshake->ecdh_ctx.Qp );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\nstatic int ssl_parse_server_ecdh_params( mbedtls_ssl_context *ssl,\n                                         unsigned char **p,\n                                         unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n\n    /*\n     * Ephemeral ECDH parameters:\n     *\n     * struct {\n     *     ECParameters curve_params;\n     *     ECPoint      public;\n     * } ServerECDHParams;\n     */\n    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,\n                                  (const unsigned char **) p, end ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ecdh_read_params\" ), ret );\n        return( ret );\n    }\n\n    if( ssl_check_server_ecdh_params( ssl ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message (ECDHE curve)\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nstatic int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,\n                                      unsigned char **p,\n                                      unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t  len;\n    ((void) ssl);\n\n    /*\n     * PSK parameters:\n     *\n     * opaque psk_identity_hint<0..2^16-1>;\n     */\n    if( (*p) > end - 2 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message \"\n                                    \"(psk_identity_hint length)\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n    len = (*p)[0] << 8 | (*p)[1];\n    *p += 2;\n\n    if( (*p) > end - len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message \"\n                                    \"(psk_identity_hint length)\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    /*\n     * Note: we currently ignore the PKS identity hint, as we only allow one\n     * PSK to be provisionned on the client. This could be changed later if\n     * someone needs that feature.\n     */\n    *p += len;\n    ret = 0;\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED) ||                           \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n/*\n * Generate a pre-master secret and encrypt it with the server's RSA key\n */\nstatic int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,\n                                    size_t offset, size_t *olen,\n                                    size_t pms_offset )\n{\n    int ret;\n    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;\n    unsigned char *p = ssl->handshake->premaster + pms_offset;\n\n    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small for encrypted pms\" ) );\n        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );\n    }\n\n    /*\n     * Generate (part of) the pre-master as\n     *  struct {\n     *      ProtocolVersion client_version;\n     *      opaque random[46];\n     *  } PreMasterSecret;\n     */\n    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,\n                       ssl->conf->transport, p );\n\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"f_rng\", ret );\n        return( ret );\n    }\n\n    ssl->handshake->pmslen = 48;\n\n    if( ssl->session_negotiate->peer_cert == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /*\n     * Now write it out, encrypted\n     */\n    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,\n                MBEDTLS_PK_RSA ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"certificate key type mismatch\" ) );\n        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n    }\n\n    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,\n                            p, ssl->handshake->pmslen,\n                            ssl->out_msg + offset + len_bytes, olen,\n                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,\n                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_rsa_pkcs1_encrypt\", ret );\n        return( ret );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( len_bytes == 2 )\n    {\n        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );\n        ssl->out_msg[offset+1] = (unsigned char)( *olen      );\n        *olen += 2;\n    }\n#endif\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\nstatic int ssl_parse_signature_algorithm( mbedtls_ssl_context *ssl,\n                                          unsigned char **p,\n                                          unsigned char *end,\n                                          mbedtls_md_type_t *md_alg,\n                                          mbedtls_pk_type_t *pk_alg )\n{\n    ((void) ssl);\n    *md_alg = MBEDTLS_MD_NONE;\n    *pk_alg = MBEDTLS_PK_NONE;\n\n    /* Only in TLS 1.2 */\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        return( 0 );\n    }\n\n    if( (*p) + 2 > end )\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n\n    /*\n     * Get hash algorithm\n     */\n    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"Server used unsupported \"\n                            \"HashAlgorithm %d\", *(p)[0] ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    /*\n     * Get signature algorithm\n     */\n    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server used unsupported \"\n                            \"SignatureAlgorithm %d\", (*p)[1] ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    /*\n     * Check if the hash is acceptable\n     */\n    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server used HashAlgorithm %d that was not offered\",\n                                    *(p)[0] ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"Server used SignatureAlgorithm %d\", (*p)[1] ) );\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"Server used HashAlgorithm %d\", (*p)[0] ) );\n    *p += 2;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\nstatic int ssl_get_ecdh_params_from_cert( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    const mbedtls_ecp_keypair *peer_key;\n\n    if( ssl->session_negotiate->peer_cert == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,\n                     MBEDTLS_PK_ECKEY ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key not ECDH capable\" ) );\n        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n    }\n\n    peer_key = mbedtls_pk_ec( ssl->session_negotiate->peer_cert->pk );\n\n    if( ( ret = mbedtls_ecdh_get_params( &ssl->handshake->ecdh_ctx, peer_key,\n                                 MBEDTLS_ECDH_THEIRS ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ecdh_get_params\" ), ret );\n        return( ret );\n    }\n\n    if( ssl_check_server_ecdh_params( ssl ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server certificate (ECDH curve)\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\nstatic int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    unsigned char *p = NULL, *end = NULL;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server key exchange\" ) );\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n    ((void) p);\n    ((void) end);\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )\n    {\n        if( ( ret = ssl_get_ecdh_params_from_cert( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_get_ecdh_params_from_cert\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n    ((void) p);\n    ((void) end);\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /*\n     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server\n     * doesn't use a psk_identity_hint\n     */\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )\n    {\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        {\n            /* Current message is probably either\n             * CertificateRequest or ServerHelloDone */\n            ssl->keep_current_message = 1;\n            goto exit;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key exchange message must \"\n                                    \"not be skipped\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n    end = ssl->in_msg + ssl->in_hslen;\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server key exchange\", p, end - p );\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        if( ssl_parse_server_psk_hint( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    } /* FALLTROUGH */\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        ; /* nothing more to do */\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n    {\n        if( ssl_parse_server_dh_params( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA )\n    {\n        if( ssl_parse_server_ecdh_params( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        ret = mbedtls_ecjpake_read_round_two( &ssl->handshake->ecjpake_ctx,\n                                              p, end - p );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_two\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_server_signature( ciphersuite_info ) )\n    {\n        size_t sig_len, hashlen;\n        unsigned char hash[64];\n        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;\n        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;\n        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n        size_t params_len = p - params;\n\n        /*\n         * Handle the digitally-signed structure\n         */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            if( ssl_parse_signature_algorithm( ssl, &p, end,\n                                               &md_alg, &pk_alg ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n            }\n\n            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            pk_alg = mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );\n\n            /* Default hash for ECDSA is SHA-1 */\n            if( pk_alg == MBEDTLS_PK_ECDSA && md_alg == MBEDTLS_MD_NONE )\n                md_alg = MBEDTLS_MD_SHA1;\n        }\n        else\n#endif\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        /*\n         * Read signature\n         */\n\n        if( p > end - 2 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n        sig_len = ( p[0] << 8 ) | p[1];\n        p += 2;\n\n        if( p != end - sig_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"signature\", p, sig_len );\n\n        /*\n         * Compute the hash that has been signed\n         */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( md_alg == MBEDTLS_MD_NONE )\n        {\n            hashlen = 36;\n            ret = mbedtls_ssl_get_key_exchange_md_ssl_tls( ssl, hash, params,\n                                                           params_len );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( md_alg != MBEDTLS_MD_NONE )\n        {\n            /* Info from md_alg will be used instead */\n            hashlen = 0;\n            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, params,\n                                                          params_len, md_alg );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"parameters hash\", hash, hashlen != 0 ? hashlen :\n            (unsigned int) ( mbedtls_md_get_size( mbedtls_md_info_from_type( md_alg ) ) ) );\n\n        if( ssl->session_negotiate->peer_cert == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n        }\n\n        /*\n         * Verify signature\n         */\n        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n        }\n\n        if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,\n                               md_alg, hash, hashlen, p, sig_len ) ) != 0 )\n        {\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_verify\", ret );\n            return( ret );\n        }\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n\nexit:\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server key exchange\" ) );\n\n    return( 0 );\n}\n\n#if ! defined(MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED)\nstatic int ssl_parse_certificate_request( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate request\" ) );\n\n    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate request\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n#else /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */\nstatic int ssl_parse_certificate_request( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *buf;\n    size_t n = 0;\n    size_t cert_type_len = 0, dn_len = 0;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate request\" ) );\n\n    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate request\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    ssl->state++;\n    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"got %s certificate request\",\n                        ssl->client_auth ? \"a\" : \"no\" ) );\n\n    if( ssl->client_auth == 0 )\n    {\n        /* Current message is probably the ServerHelloDone */\n        ssl->keep_current_message = 1;\n        goto exit;\n    }\n\n    /*\n     *  struct {\n     *      ClientCertificateType certificate_types<1..2^8-1>;\n     *      SignatureAndHashAlgorithm\n     *        supported_signature_algorithms<2^16-1>; -- TLS 1.2 only\n     *      DistinguishedName certificate_authorities<0..2^16-1>;\n     *  } CertificateRequest;\n     *\n     *  Since we only support a single certificate on clients, let's just\n     *  ignore all the information that's supposed to help us pick a\n     *  certificate.\n     *\n     *  We could check that our certificate matches the request, and bail out\n     *  if it doesn't, but it's simpler to just send the certificate anyway,\n     *  and give the server the opportunity to decide if it should terminate\n     *  the connection when it doesn't like our certificate.\n     *\n     *  Same goes for the hash in TLS 1.2's signature_algorithms: at this\n     *  point we only have one hash available (see comments in\n     *  write_certificate_verify), so let's just use what we have.\n     *\n     *  However, we still minimally parse the message to check it is at least\n     *  superficially sane.\n     */\n    buf = ssl->in_msg;\n\n    /* certificate_types */\n    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );\n    }\n    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];\n    n = cert_type_len;\n\n    /*\n     * In the subsequent code there are two paths that read from buf:\n     *     * the length of the signature algorithms field (if minor version of\n     *       SSL is 3),\n     *     * distinguished name length otherwise.\n     * Both reach at most the index:\n     *    ...hdr_len + 2 + n,\n     * therefore the buffer length at this point must be greater than that\n     * regardless of the actual code path.\n     */\n    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );\n    }\n\n    /* supported_signature_algorithms */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )\n                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );\n#if defined(MBEDTLS_DEBUG_C)\n        unsigned char* sig_alg;\n        size_t i;\n#endif\n\n        /*\n         * The furthest access in buf is in the loop few lines below:\n         *     sig_alg[i + 1],\n         * where:\n         *     sig_alg = buf + ...hdr_len + 3 + n,\n         *     max(i) = sig_alg_len - 1.\n         * Therefore the furthest access is:\n         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],\n         * which reduces to:\n         *     buf[...hdr_len + 3 + n + sig_alg_len],\n         * which is one less than we need the buf to be.\n         */\n        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );\n        }\n\n#if defined(MBEDTLS_DEBUG_C)\n        sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;\n        for( i = 0; i < sig_alg_len; i += 2 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"Supported Signature Algorithm found: %d\"\n                                        \",%d\", sig_alg[i], sig_alg[i + 1]  ) );\n        }\n#endif\n\n        n += 2 + sig_alg_len;\n    }\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n    /* certificate_authorities */\n    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )\n             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );\n\n    n += dn_len;\n    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );\n    }\n\nexit:\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse certificate request\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */\n\nstatic int ssl_parse_server_hello_done( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server hello done\" ) );\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello done message\" ) );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||\n        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello done message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );\n    }\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_recv_flight_completed( ssl );\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server hello done\" ) );\n\n    return( 0 );\n}\n\nstatic int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t i, n;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write client key exchange\" ) );\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA )\n    {\n        /*\n         * DHM key exchange -- send G^X mod P\n         */\n        n = ssl->handshake->dhm_ctx.len;\n\n        ssl->out_msg[4] = (unsigned char)( n >> 8 );\n        ssl->out_msg[5] = (unsigned char)( n      );\n        i = 6;\n\n        ret = mbedtls_dhm_make_public( &ssl->handshake->dhm_ctx,\n                                (int) mbedtls_mpi_size( &ssl->handshake->dhm_ctx.P ),\n                               &ssl->out_msg[i], n,\n                                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_make_public\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: X \", &ssl->handshake->dhm_ctx.X  );\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: GX\", &ssl->handshake->dhm_ctx.GX );\n\n        if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,\n                                      ssl->handshake->premaster,\n                                      MBEDTLS_PREMASTER_SIZE,\n                                     &ssl->handshake->pmslen,\n                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_calc_secret\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->handshake->dhm_ctx.K  );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )\n    {\n        /*\n         * ECDH key exchange -- send client public value\n         */\n        i = 4;\n\n        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,\n                                &n,\n                                &ssl->out_msg[i], 1000,\n                                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_make_public\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Q\", &ssl->handshake->ecdh_ctx.Q );\n\n        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,\n                                      &ssl->handshake->pmslen,\n                                       ssl->handshake->premaster,\n                                       MBEDTLS_MPI_MAX_SIZE,\n                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_calc_secret\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"ECDH: z\", &ssl->handshake->ecdh_ctx.z );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_psk( ciphersuite_info ) )\n    {\n        /*\n         * opaque psk_identity<0..2^16-1>;\n         */\n        if( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no private key for PSK\" ) );\n            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n        }\n\n        i = 4;\n        n = ssl->conf->psk_identity_len;\n\n        if( i + 2 + n > MBEDTLS_SSL_MAX_CONTENT_LEN )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"psk identity too long or \"\n                                        \"SSL buffer too short\" ) );\n            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );\n        }\n\n        ssl->out_msg[i++] = (unsigned char)( n >> 8 );\n        ssl->out_msg[i++] = (unsigned char)( n      );\n\n        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );\n        i += ssl->conf->psk_identity_len;\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )\n        {\n            n = 0;\n        }\n        else\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        {\n            if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 2 ) ) != 0 )\n                return( ret );\n        }\n        else\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n        {\n            /*\n             * ClientDiffieHellmanPublic public (DHM send G^X mod P)\n             */\n            n = ssl->handshake->dhm_ctx.len;\n\n            if( i + 2 + n > MBEDTLS_SSL_MAX_CONTENT_LEN )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"psk identity or DHM size too long\"\n                                            \" or SSL buffer too short\" ) );\n                return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );\n            }\n\n            ssl->out_msg[i++] = (unsigned char)( n >> 8 );\n            ssl->out_msg[i++] = (unsigned char)( n      );\n\n            ret = mbedtls_dhm_make_public( &ssl->handshake->dhm_ctx,\n                    (int) mbedtls_mpi_size( &ssl->handshake->dhm_ctx.P ),\n                    &ssl->out_msg[i], n,\n                    ssl->conf->f_rng, ssl->conf->p_rng );\n            if( ret != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_make_public\", ret );\n                return( ret );\n            }\n        }\n        else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n        {\n            /*\n             * ClientECDiffieHellmanPublic public;\n             */\n            ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx, &n,\n                    &ssl->out_msg[i], MBEDTLS_SSL_MAX_CONTENT_LEN - i,\n                    ssl->conf->f_rng, ssl->conf->p_rng );\n            if( ret != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_make_public\", ret );\n                return( ret );\n            }\n\n            MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Q\", &ssl->handshake->ecdh_ctx.Q );\n        }\n        else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )\n    {\n        i = 4;\n        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )\n            return( ret );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        i = 4;\n\n        ret = mbedtls_ecjpake_write_round_two( &ssl->handshake->ecjpake_ctx,\n                ssl->out_msg + i, MBEDTLS_SSL_MAX_CONTENT_LEN - i, &n,\n                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_write_round_two\", ret );\n            return( ret );\n        }\n\n        ret = mbedtls_ecjpake_derive_secret( &ssl->handshake->ecjpake_ctx,\n                ssl->handshake->premaster, 32, &ssl->handshake->pmslen,\n                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_derive_secret\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n    {\n        ((void) ciphersuite_info);\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    ssl->out_msglen  = i + n;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;\n\n    ssl->state++;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write client key exchange\" ) );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)       && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)   && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)  && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)&& \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\nstatic int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate verify\" ) );\n\n    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n        return( ret );\n    }\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n#else\nstatic int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    size_t n = 0, offset = 0;\n    unsigned char hash[48];\n    unsigned char *hash_start = hash;\n    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;\n    unsigned int hashlen;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate verify\" ) );\n\n    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n        return( ret );\n    }\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    if( mbedtls_ssl_own_key( ssl ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no private key for certificate\" ) );\n        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n    }\n\n    /*\n     * Make an RSA signature of the handshake digests\n     */\n    ssl->handshake->calc_verify( ssl, hash );\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        /*\n         * digitally-signed struct {\n         *     opaque md5_hash[16];\n         *     opaque sha_hash[20];\n         * };\n         *\n         * md5_hash\n         *     MD5(handshake_messages);\n         *\n         * sha_hash\n         *     SHA(handshake_messages);\n         */\n        hashlen = 36;\n        md_alg = MBEDTLS_MD_NONE;\n\n        /*\n         * For ECDSA, default hash is SHA-1 only\n         */\n        if( mbedtls_pk_can_do( mbedtls_ssl_own_key( ssl ), MBEDTLS_PK_ECDSA ) )\n        {\n            hash_start += 16;\n            hashlen -= 16;\n            md_alg = MBEDTLS_MD_SHA1;\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        /*\n         * digitally-signed struct {\n         *     opaque handshake_messages[handshake_messages_length];\n         * };\n         *\n         * Taking shortcut here. We assume that the server always allows the\n         * PRF Hash function and has sent it in the allowed signature\n         * algorithms list received in the Certificate Request message.\n         *\n         * Until we encounter a server that does not, we will take this\n         * shortcut.\n         *\n         * Reason: Otherwise we should have running hashes for SHA512 and SHA224\n         *         in order to satisfy 'weird' needs from the server side.\n         */\n        if( ssl->transform_negotiate->ciphersuite_info->mac ==\n            MBEDTLS_MD_SHA384 )\n        {\n            md_alg = MBEDTLS_MD_SHA384;\n            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;\n        }\n        else\n        {\n            md_alg = MBEDTLS_MD_SHA256;\n            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;\n        }\n        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );\n\n        /* Info from md_alg will be used instead */\n        hashlen = 0;\n        offset = 2;\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,\n                         ssl->out_msg + 6 + offset, &n,\n                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_sign\", ret );\n        return( ret );\n    }\n\n    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );\n    ssl->out_msg[5 + offset] = (unsigned char)( n      );\n\n    ssl->out_msglen  = 6 + n + offset;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;\n\n    ssl->state++;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write certificate verify\" ) );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic int ssl_parse_new_session_ticket( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    uint32_t lifetime;\n    size_t ticket_len;\n    unsigned char *ticket;\n    const unsigned char *msg;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse new session ticket\" ) );\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad new session ticket message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /*\n     * struct {\n     *     uint32 ticket_lifetime_hint;\n     *     opaque ticket<0..2^16-1>;\n     * } NewSessionTicket;\n     *\n     * 0  .  3   ticket_lifetime_hint\n     * 4  .  5   ticket_len (n)\n     * 6  .  5+n ticket content\n     */\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||\n        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad new session ticket message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );\n    }\n\n    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n\n    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |\n               ( msg[2] <<  8 ) | ( msg[3]       );\n\n    ticket_len = ( msg[4] << 8 ) | ( msg[5] );\n\n    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad new session ticket message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket length: %d\", ticket_len ) );\n\n    /* We're not waiting for a NewSessionTicket message any more */\n    ssl->handshake->new_session_ticket = 0;\n    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;\n\n    /*\n     * Zero-length ticket means the server changed his mind and doesn't want\n     * to send a ticket after all, so just forget it\n     */\n    if( ticket_len == 0 )\n        return( 0 );\n\n    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,\n                              ssl->session_negotiate->ticket_len );\n    mbedtls_free( ssl->session_negotiate->ticket );\n    ssl->session_negotiate->ticket = NULL;\n    ssl->session_negotiate->ticket_len = 0;\n\n    if( ( ticket = mbedtls_calloc( 1, ticket_len ) ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"ticket alloc failed\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    memcpy( ticket, msg + 6, ticket_len );\n\n    ssl->session_negotiate->ticket = ticket;\n    ssl->session_negotiate->ticket_len = ticket_len;\n    ssl->session_negotiate->ticket_lifetime = lifetime;\n\n    /*\n     * RFC 5077 section 3.4:\n     * \"If the client receives a session ticket from the server, then it\n     * discards any Session ID that was sent in the ServerHello.\"\n     */\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket in use, discarding session id\" ) );\n    ssl->session_negotiate->id_len = 0;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse new session ticket\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n/*\n * SSL handshake -- client side -- single step\n */\nint mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )\n{\n    int ret = 0;\n\n    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"client state: %d\", ssl->state ) );\n\n    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )\n    {\n        if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )\n            return( ret );\n    }\n#endif\n\n    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used\n     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&\n        ssl->handshake->new_session_ticket != 0 )\n    {\n        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;\n    }\n#endif\n\n    switch( ssl->state )\n    {\n        case MBEDTLS_SSL_HELLO_REQUEST:\n            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;\n            break;\n\n       /*\n        *  ==>   ClientHello\n        */\n       case MBEDTLS_SSL_CLIENT_HELLO:\n           ret = ssl_write_client_hello( ssl );\n           break;\n\n       /*\n        *  <==   ServerHello\n        *        Certificate\n        *      ( ServerKeyExchange  )\n        *      ( CertificateRequest )\n        *        ServerHelloDone\n        */\n       case MBEDTLS_SSL_SERVER_HELLO:\n           ret = ssl_parse_server_hello( ssl );\n           break;\n\n       case MBEDTLS_SSL_SERVER_CERTIFICATE:\n           ret = mbedtls_ssl_parse_certificate( ssl );\n           break;\n\n       case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:\n           ret = ssl_parse_server_key_exchange( ssl );\n           break;\n\n       case MBEDTLS_SSL_CERTIFICATE_REQUEST:\n           ret = ssl_parse_certificate_request( ssl );\n           break;\n\n       case MBEDTLS_SSL_SERVER_HELLO_DONE:\n           ret = ssl_parse_server_hello_done( ssl );\n           break;\n\n       /*\n        *  ==> ( Certificate/Alert  )\n        *        ClientKeyExchange\n        *      ( CertificateVerify  )\n        *        ChangeCipherSpec\n        *        Finished\n        */\n       case MBEDTLS_SSL_CLIENT_CERTIFICATE:\n           ret = mbedtls_ssl_write_certificate( ssl );\n           break;\n\n       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:\n           ret = ssl_write_client_key_exchange( ssl );\n           break;\n\n       case MBEDTLS_SSL_CERTIFICATE_VERIFY:\n           ret = ssl_write_certificate_verify( ssl );\n           break;\n\n       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:\n           ret = mbedtls_ssl_write_change_cipher_spec( ssl );\n           break;\n\n       case MBEDTLS_SSL_CLIENT_FINISHED:\n           ret = mbedtls_ssl_write_finished( ssl );\n           break;\n\n       /*\n        *  <==   ( NewSessionTicket )\n        *        ChangeCipherSpec\n        *        Finished\n        */\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n       case MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET:\n           ret = ssl_parse_new_session_ticket( ssl );\n           break;\n#endif\n\n       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:\n           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );\n           break;\n\n       case MBEDTLS_SSL_SERVER_FINISHED:\n           ret = mbedtls_ssl_parse_finished( ssl );\n           break;\n\n       case MBEDTLS_SSL_FLUSH_BUFFERS:\n           MBEDTLS_SSL_DEBUG_MSG( 2, ( \"handshake: done\" ) );\n           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;\n           break;\n\n       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:\n           mbedtls_ssl_handshake_wrapup( ssl );\n           break;\n\n       default:\n           MBEDTLS_SSL_DEBUG_MSG( 1, ( \"invalid state %d\", ssl->state ) );\n           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n   }\n\n    return( ret );\n}\n#endif /* MBEDTLS_SSL_CLI_C */\n","/**\n * \\file ssl_internal.h\n *\n * \\brief Internal functions shared by the SSL modules\n */\n/*\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n#ifndef MBEDTLS_SSL_INTERNAL_H\n#define MBEDTLS_SSL_INTERNAL_H\n\n#include \"ssl.h\"\n#include \"cipher.h\"\n\n#if defined(MBEDTLS_MD5_C)\n#include \"md5.h\"\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n#include \"sha1.h\"\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n#include \"sha256.h\"\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n#include \"sha512.h\"\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n#include \"ecjpake.h\"\n#endif\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n/* Determine minimum supported version */\n#define MBEDTLS_SSL_MIN_MAJOR_VERSION           MBEDTLS_SSL_MAJOR_VERSION_3\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n#define MBEDTLS_SSL_MIN_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_0\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1)\n#define MBEDTLS_SSL_MIN_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_1\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1_1)\n#define MBEDTLS_SSL_MIN_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_2\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#define MBEDTLS_SSL_MIN_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_3\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_1 */\n#endif /* MBEDTLS_SSL_PROTO_TLS1   */\n#endif /* MBEDTLS_SSL_PROTO_SSL3   */\n\n#define MBEDTLS_SSL_MIN_VALID_MINOR_VERSION MBEDTLS_SSL_MINOR_VERSION_1\n#define MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION MBEDTLS_SSL_MAJOR_VERSION_3\n\n/* Determine maximum supported version */\n#define MBEDTLS_SSL_MAX_MAJOR_VERSION           MBEDTLS_SSL_MAJOR_VERSION_3\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#define MBEDTLS_SSL_MAX_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_3\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1_1)\n#define MBEDTLS_SSL_MAX_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_2\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1)\n#define MBEDTLS_SSL_MAX_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_1\n#else\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n#define MBEDTLS_SSL_MAX_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_0\n#endif /* MBEDTLS_SSL_PROTO_SSL3   */\n#endif /* MBEDTLS_SSL_PROTO_TLS1   */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_1 */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#define MBEDTLS_SSL_INITIAL_HANDSHAKE           0\n#define MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS   1   /* In progress */\n#define MBEDTLS_SSL_RENEGOTIATION_DONE          2   /* Done or aborted */\n#define MBEDTLS_SSL_RENEGOTIATION_PENDING       3   /* Requested (server only) */\n\n/*\n * DTLS retransmission states, see RFC 6347 4.2.4\n *\n * The SENDING state is merged in PREPARING for initial sends,\n * but is distinct for resends.\n *\n * Note: initial state is wrong for server, but is not used anyway.\n */\n#define MBEDTLS_SSL_RETRANS_PREPARING       0\n#define MBEDTLS_SSL_RETRANS_SENDING         1\n#define MBEDTLS_SSL_RETRANS_WAITING         2\n#define MBEDTLS_SSL_RETRANS_FINISHED        3\n\n/*\n * Allow extra bytes for record, authentication and encryption overhead:\n * counter (8) + header (5) + IV(16) + MAC (16-48) + padding (0-256)\n * and allow for a maximum of 1024 of compression expansion if\n * enabled.\n */\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n#define MBEDTLS_SSL_COMPRESSION_ADD          1024\n#else\n#define MBEDTLS_SSL_COMPRESSION_ADD             0\n#endif\n\n#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_MODE_CBC)\n/* Ciphersuites using HMAC */\n#if defined(MBEDTLS_SHA512_C)\n#define MBEDTLS_SSL_MAC_ADD                 48  /* SHA-384 used for HMAC */\n#elif defined(MBEDTLS_SHA256_C)\n#define MBEDTLS_SSL_MAC_ADD                 32  /* SHA-256 used for HMAC */\n#else\n#define MBEDTLS_SSL_MAC_ADD                 20  /* SHA-1   used for HMAC */\n#endif\n#else\n/* AEAD ciphersuites: GCM and CCM use a 128 bits tag */\n#define MBEDTLS_SSL_MAC_ADD                 16\n#endif\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#define MBEDTLS_SSL_PADDING_ADD            256\n#else\n#define MBEDTLS_SSL_PADDING_ADD              0\n#endif\n\n#define MBEDTLS_SSL_PAYLOAD_LEN ( MBEDTLS_SSL_MAX_CONTENT_LEN    \\\n                        + MBEDTLS_SSL_COMPRESSION_ADD            \\\n                        + MBEDTLS_MAX_IV_LENGTH                  \\\n                        + MBEDTLS_SSL_MAC_ADD                    \\\n                        + MBEDTLS_SSL_PADDING_ADD                \\\n                        )\n\n/*\n * Check that we obey the standard's message size bounds\n */\n\n#if MBEDTLS_SSL_MAX_CONTENT_LEN > 16384\n#error Bad configuration - record content too large.\n#endif\n\n#if MBEDTLS_SSL_PAYLOAD_LEN > 16384 + 2048\n#error Bad configuration - protected record payload too large.\n#endif\n\n/* Note: Even though the TLS record header is only 5 bytes\n   long, we're internally using 8 bytes to store the\n   implicit sequence number. */\n#define MBEDTLS_SSL_HEADER_LEN 13\n\n#define MBEDTLS_SSL_BUFFER_LEN  \\\n    ( ( MBEDTLS_SSL_HEADER_LEN ) + ( MBEDTLS_SSL_PAYLOAD_LEN ) )\n\n/*\n * TLS extension flags (for extensions with outgoing ServerHello content\n * that need it (e.g. for RENEGOTIATION_INFO the server already knows because\n * of state of the renegotiation flag, so no indicator is required)\n */\n#define MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT (1 << 0)\n#define MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK                 (1 << 1)\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n/*\n * Abstraction for a grid of allowed signature-hash-algorithm pairs.\n */\nstruct mbedtls_ssl_sig_hash_set_t\n{\n    /* At the moment, we only need to remember a single suitable\n     * hash algorithm per signature algorithm. As long as that's\n     * the case - and we don't need a general lookup function -\n     * we can implement the sig-hash-set as a map from signatures\n     * to hash algorithms. */\n    mbedtls_md_type_t rsa;\n    mbedtls_md_type_t ecdsa;\n};\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n/*\n * This structure contains the parameters only needed during handshake.\n */\nstruct mbedtls_ssl_handshake_params\n{\n    /*\n     * Handshake specific crypto variables\n     */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    mbedtls_ssl_sig_hash_set_t hash_algs;             /*!<  Set of suitable sig-hash pairs */\n#endif\n#if defined(MBEDTLS_DHM_C)\n    mbedtls_dhm_context dhm_ctx;                /*!<  DHM key exchange        */\n#endif\n#if defined(MBEDTLS_ECDH_C)\n    mbedtls_ecdh_context ecdh_ctx;              /*!<  ECDH key exchange       */\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    mbedtls_ecjpake_context ecjpake_ctx;        /*!< EC J-PAKE key exchange */\n#if defined(MBEDTLS_SSL_CLI_C)\n    unsigned char *ecjpake_cache;               /*!< Cache for ClientHello ext */\n    size_t ecjpake_cache_len;                   /*!< Length of cached data */\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    const mbedtls_ecp_curve_info **curves;      /*!<  Supported elliptic curves */\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    unsigned char *psk;                 /*!<  PSK from the callback         */\n    size_t psk_len;                     /*!<  Length of PSK from callback   */\n#endif\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n    mbedtls_ssl_key_cert *key_cert;     /*!< chosen key/cert pair (server)  */\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    int sni_authmode;                   /*!< authmode from SNI callback     */\n    mbedtls_ssl_key_cert *sni_key_cert; /*!< key/cert list from SNI         */\n    mbedtls_x509_crt *sni_ca_chain;     /*!< trusted CAs from SNI callback  */\n    mbedtls_x509_crl *sni_ca_crl;       /*!< trusted CAs CRLs from SNI      */\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    unsigned int out_msg_seq;           /*!<  Outgoing handshake sequence number */\n    unsigned int in_msg_seq;            /*!<  Incoming handshake sequence number */\n\n    unsigned char *verify_cookie;       /*!<  Cli: HelloVerifyRequest cookie\n                                              Srv: unused                    */\n    unsigned char verify_cookie_len;    /*!<  Cli: cookie length\n                                              Srv: flag for sending a cookie */\n\n    unsigned char *hs_msg;              /*!<  Reassembled handshake message  */\n\n    uint32_t retransmit_timeout;        /*!<  Current value of timeout       */\n    unsigned char retransmit_state;     /*!<  Retransmission state           */\n    mbedtls_ssl_flight_item *flight;            /*!<  Current outgoing flight        */\n    mbedtls_ssl_flight_item *cur_msg;           /*!<  Current message in flight      */\n    unsigned int in_flight_start_seq;   /*!<  Minimum message sequence in the\n                                              flight being received          */\n    mbedtls_ssl_transform *alt_transform_out;   /*!<  Alternative transform for\n                                              resending messages             */\n    unsigned char alt_out_ctr[8];       /*!<  Alternative record epoch/counter\n                                              for resending messages         */\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    /*\n     * Checksum contexts\n     */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n       mbedtls_md5_context fin_md5;\n      mbedtls_sha1_context fin_sha1;\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\n    mbedtls_sha256_context fin_sha256;\n#endif\n#if defined(MBEDTLS_SHA512_C)\n    mbedtls_sha512_context fin_sha512;\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n    void (*update_checksum)(mbedtls_ssl_context *, const unsigned char *, size_t);\n    void (*calc_verify)(mbedtls_ssl_context *, unsigned char *);\n    void (*calc_finished)(mbedtls_ssl_context *, unsigned char *, int);\n    int  (*tls_prf)(const unsigned char *, size_t, const char *,\n                    const unsigned char *, size_t,\n                    unsigned char *, size_t);\n\n    size_t pmslen;                      /*!<  premaster length        */\n\n    unsigned char randbytes[64];        /*!<  random bytes            */\n    unsigned char premaster[MBEDTLS_PREMASTER_SIZE];\n                                        /*!<  premaster secret        */\n\n    int resume;                         /*!<  session resume indicator*/\n    int max_major_ver;                  /*!< max. major version client*/\n    int max_minor_ver;                  /*!< max. minor version client*/\n    int cli_exts;                       /*!< client extension presence*/\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    int new_session_ticket;             /*!< use NewSessionTicket?    */\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n    int extended_ms;                    /*!< use Extended Master Secret? */\n#endif\n};\n\n/*\n * This structure contains a full set of runtime transform parameters\n * either in negotiation or active.\n */\nstruct mbedtls_ssl_transform\n{\n    /*\n     * Session specific crypto layer\n     */\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n                                        /*!<  Chosen cipersuite_info  */\n    unsigned int keylen;                /*!<  symmetric key length (bytes)  */\n    size_t minlen;                      /*!<  min. ciphertext length  */\n    size_t ivlen;                       /*!<  IV length               */\n    size_t fixed_ivlen;                 /*!<  Fixed part of IV (AEAD) */\n    size_t maclen;                      /*!<  MAC length              */\n\n    unsigned char iv_enc[16];           /*!<  IV (encryption)         */\n    unsigned char iv_dec[16];           /*!<  IV (decryption)         */\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    /* Needed only for SSL v3.0 secret */\n    unsigned char mac_enc[20];          /*!<  SSL v3.0 secret (enc)   */\n    unsigned char mac_dec[20];          /*!<  SSL v3.0 secret (dec)   */\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n\n    mbedtls_md_context_t md_ctx_enc;            /*!<  MAC (encryption)        */\n    mbedtls_md_context_t md_ctx_dec;            /*!<  MAC (decryption)        */\n\n    mbedtls_cipher_context_t cipher_ctx_enc;    /*!<  encryption context      */\n    mbedtls_cipher_context_t cipher_ctx_dec;    /*!<  decryption context      */\n\n    /*\n     * Session specific compression layer\n     */\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    z_stream ctx_deflate;               /*!<  compression context     */\n    z_stream ctx_inflate;               /*!<  decompression context   */\n#endif\n};\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n/*\n * List of certificate + private key pairs\n */\nstruct mbedtls_ssl_key_cert\n{\n    mbedtls_x509_crt *cert;                 /*!< cert                       */\n    mbedtls_pk_context *key;                /*!< private key                */\n    mbedtls_ssl_key_cert *next;             /*!< next key/cert pair         */\n};\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n/*\n * List of handshake messages kept around for resending\n */\nstruct mbedtls_ssl_flight_item\n{\n    unsigned char *p;       /*!< message, including handshake headers   */\n    size_t len;             /*!< length of p                            */\n    unsigned char type;     /*!< type of the message: handshake or CCS  */\n    mbedtls_ssl_flight_item *next;  /*!< next handshake message(s)              */\n};\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n\n/* Find an entry in a signature-hash set matching a given hash algorithm. */\nmbedtls_md_type_t mbedtls_ssl_sig_hash_set_find( mbedtls_ssl_sig_hash_set_t *set,\n                                                 mbedtls_pk_type_t sig_alg );\n/* Add a signature-hash-pair to a signature-hash set */\nvoid mbedtls_ssl_sig_hash_set_add( mbedtls_ssl_sig_hash_set_t *set,\n                                   mbedtls_pk_type_t sig_alg,\n                                   mbedtls_md_type_t md_alg );\n/* Allow exactly one hash algorithm for each signature. */\nvoid mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,\n                                          mbedtls_md_type_t md_alg );\n\n/* Setup an empty signature-hash set */\nstatic inline void mbedtls_ssl_sig_hash_set_init( mbedtls_ssl_sig_hash_set_t *set )\n{\n    mbedtls_ssl_sig_hash_set_const_hash( set, MBEDTLS_MD_NONE );\n}\n\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2) &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n/**\n * \\brief           Free referenced items in an SSL transform context and clear\n *                  memory\n *\n * \\param transform SSL transform context\n */\nvoid mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform );\n\n/**\n * \\brief           Free referenced items in an SSL handshake context and clear\n *                  memory\n *\n * \\param handshake SSL handshake context\n */\nvoid mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake );\n\nint mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_handshake_server_step( mbedtls_ssl_context *ssl );\nvoid mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_send_fatal_handshake_failure( mbedtls_ssl_context *ssl );\n\nvoid mbedtls_ssl_reset_checksum( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl );\nvoid mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl );\n\n/**\n * \\brief       Update record layer\n *\n *              This function roughly separates the implementation\n *              of the logic of (D)TLS from the implementation\n *              of the secure transport.\n *\n * \\param  ssl  SSL context to use\n *\n * \\return      0 or non-zero error code.\n *\n * \\note        A clarification on what is called 'record layer' here\n *              is in order, as many sensible definitions are possible:\n *\n *              The record layer takes as input an untrusted underlying\n *              transport (stream or datagram) and transforms it into\n *              a serially multiplexed, secure transport, which\n *              conceptually provides the following:\n *\n *              (1) Three datagram based, content-agnostic transports\n *                  for handshake, alert and CCS messages.\n *              (2) One stream- or datagram-based transport\n *                  for application data.\n *              (3) Functionality for changing the underlying transform\n *                  securing the contents.\n *\n *              The interface to this functionality is given as follows:\n *\n *              a Updating\n *                [Currently implemented by mbedtls_ssl_read_record]\n *\n *                Check if and on which of the four 'ports' data is pending:\n *                Nothing, a controlling datagram of type (1), or application\n *                data (2). In any case data is present, internal buffers\n *                provide access to the data for the user to process it.\n *                Consumption of type (1) datagrams is done automatically\n *                on the next update, invalidating that the internal buffers\n *                for previous datagrams, while consumption of application\n *                data (2) is user-controlled.\n *\n *              b Reading of application data\n *                [Currently manual adaption of ssl->in_offt pointer]\n *\n *                As mentioned in the last paragraph, consumption of data\n *                is different from the automatic consumption of control\n *                datagrams (1) because application data is treated as a stream.\n *\n *              c Tracking availability of application data\n *                [Currently manually through decreasing ssl->in_msglen]\n *\n *                For efficiency and to retain datagram semantics for\n *                application data in case of DTLS, the record layer\n *                provides functionality for checking how much application\n *                data is still available in the internal buffer.\n *\n *              d Changing the transformation securing the communication.\n *\n *              Given an opaque implementation of the record layer in the\n *              above sense, it should be possible to implement the logic\n *              of (D)TLS on top of it without the need to know anything\n *              about the record layer's internals. This is done e.g.\n *              in all the handshake handling functions, and in the\n *              application data reading function mbedtls_ssl_read.\n *\n * \\note        The above tries to give a conceptual picture of the\n *              record layer, but the current implementation deviates\n *              from it in some places. For example, our implementation of\n *              the update functionality through mbedtls_ssl_read_record\n *              discards datagrams depending on the current state, which\n *              wouldn't fall under the record layer's responsibility\n *              following the above definition.\n *\n */\nint mbedtls_ssl_read_record( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want );\n\nint mbedtls_ssl_write_record( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl );\n\nvoid mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,\n                            const mbedtls_ssl_ciphersuite_t *ciphersuite_info );\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nint mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex );\n#endif\n\n#if defined(MBEDTLS_PK_C)\nunsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk );\nunsigned char mbedtls_ssl_sig_from_pk_alg( mbedtls_pk_type_t type );\nmbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig );\n#endif\n\nmbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash );\nunsigned char mbedtls_ssl_hash_from_md_alg( int md );\nint mbedtls_ssl_set_calc_verify_md( mbedtls_ssl_context *ssl, int md );\n\n#if defined(MBEDTLS_ECP_C)\nint mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id );\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\nint mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,\n                                mbedtls_md_type_t md );\n#endif\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nstatic inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )\n{\n    mbedtls_ssl_key_cert *key_cert;\n\n    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )\n        key_cert = ssl->handshake->key_cert;\n    else\n        key_cert = ssl->conf->key_cert;\n\n    return( key_cert == NULL ? NULL : key_cert->key );\n}\n\nstatic inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )\n{\n    mbedtls_ssl_key_cert *key_cert;\n\n    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )\n        key_cert = ssl->handshake->key_cert;\n    else\n        key_cert = ssl->conf->key_cert;\n\n    return( key_cert == NULL ? NULL : key_cert->cert );\n}\n\n/*\n * Check usage of a certificate wrt extensions:\n * keyUsage, extendedKeyUsage (later), and nSCertType (later).\n *\n * Warning: cert_endpoint is the endpoint of the cert (ie, of our peer when we\n * check a cert we received from them)!\n *\n * Return 0 if everything is OK, -1 if not.\n */\nint mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,\n                          const mbedtls_ssl_ciphersuite_t *ciphersuite,\n                          int cert_endpoint,\n                          uint32_t *flags );\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\nvoid mbedtls_ssl_write_version( int major, int minor, int transport,\n                        unsigned char ver[2] );\nvoid mbedtls_ssl_read_version( int *major, int *minor, int transport,\n                       const unsigned char ver[2] );\n\nstatic inline size_t mbedtls_ssl_hdr_len( const mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        return( 13 );\n#else\n    ((void) ssl);\n#endif\n    return( 5 );\n}\n\nstatic inline size_t mbedtls_ssl_hs_hdr_len( const mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        return( 12 );\n#else\n    ((void) ssl);\n#endif\n    return( 4 );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\nvoid mbedtls_ssl_send_flight_completed( mbedtls_ssl_context *ssl );\nvoid mbedtls_ssl_recv_flight_completed( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_resend( mbedtls_ssl_context *ssl );\n#endif\n\n/* Visible for testing purposes only */\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\nint mbedtls_ssl_dtls_replay_check( mbedtls_ssl_context *ssl );\nvoid mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl );\n#endif\n\n/* constant-time buffer comparison */\nstatic inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )\n{\n    size_t i;\n    volatile const unsigned char *A = (volatile const unsigned char *) a;\n    volatile const unsigned char *B = (volatile const unsigned char *) b;\n    volatile unsigned char diff = 0;\n\n    for( i = 0; i < n; i++ )\n        diff |= A[i] ^ B[i];\n\n    return( diff );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\nint mbedtls_ssl_get_key_exchange_md_ssl_tls( mbedtls_ssl_context *ssl,\n                                        unsigned char *output,\n                                        unsigned char *data, size_t data_len );\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\nint mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,\n                                        unsigned char *output,\n                                        unsigned char *data, size_t data_len,\n                                        mbedtls_md_type_t md_alg );\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* ssl_internal.h */\n","/**\n * \\file ssl_ciphersuites.h\n *\n * \\brief SSL Ciphersuites for mbed TLS\n */\n/*\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n#ifndef MBEDTLS_SSL_CIPHERSUITES_H\n#define MBEDTLS_SSL_CIPHERSUITES_H\n\n#include \"pk.h\"\n#include \"cipher.h\"\n#include \"md.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * Supported ciphersuites (Official IANA names)\n */\n#define MBEDTLS_TLS_RSA_WITH_NULL_MD5                    0x01   /**< Weak! */\n#define MBEDTLS_TLS_RSA_WITH_NULL_SHA                    0x02   /**< Weak! */\n\n#define MBEDTLS_TLS_RSA_WITH_RC4_128_MD5                 0x04\n#define MBEDTLS_TLS_RSA_WITH_RC4_128_SHA                 0x05\n#define MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA                 0x09   /**< Weak! Not in TLS 1.2 */\n\n#define MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA            0x0A\n\n#define MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA             0x15   /**< Weak! Not in TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA        0x16\n\n#define MBEDTLS_TLS_PSK_WITH_NULL_SHA                    0x2C   /**< Weak! */\n#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA                0x2D   /**< Weak! */\n#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA                0x2E   /**< Weak! */\n#define MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA             0x2F\n\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA         0x33\n#define MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA             0x35\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA         0x39\n\n#define MBEDTLS_TLS_RSA_WITH_NULL_SHA256                 0x3B   /**< Weak! */\n#define MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256          0x3C   /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256          0x3D   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA        0x41\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA    0x45\n\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256      0x67   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256      0x6B   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA        0x84\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA    0x88\n\n#define MBEDTLS_TLS_PSK_WITH_RC4_128_SHA                 0x8A\n#define MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA            0x8B\n#define MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA             0x8C\n#define MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA             0x8D\n\n#define MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA             0x8E\n#define MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA        0x8F\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA         0x90\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA         0x91\n\n#define MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA             0x92\n#define MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA        0x93\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA         0x94\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA         0x95\n\n#define MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256          0x9C   /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384          0x9D   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256      0x9E   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384      0x9F   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256          0xA8   /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384          0xA9   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256      0xAA   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384      0xAB   /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256      0xAC   /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384      0xAD   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256          0xAE\n#define MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384          0xAF\n#define MBEDTLS_TLS_PSK_WITH_NULL_SHA256                 0xB0   /**< Weak! */\n#define MBEDTLS_TLS_PSK_WITH_NULL_SHA384                 0xB1   /**< Weak! */\n\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256      0xB2\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384      0xB3\n#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256             0xB4   /**< Weak! */\n#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384             0xB5   /**< Weak! */\n\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256      0xB6\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384      0xB7\n#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256             0xB8   /**< Weak! */\n#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384             0xB9   /**< Weak! */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256     0xBA   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 0xBE   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256     0xC0   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 0xC4   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA             0xC001 /**< Weak! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA          0xC002 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA     0xC003 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA      0xC004 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA      0xC005 /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA            0xC006 /**< Weak! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA         0xC007 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA    0xC008 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA     0xC009 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA     0xC00A /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA               0xC00B /**< Weak! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA            0xC00C /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA       0xC00D /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA        0xC00E /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA        0xC00F /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA              0xC010 /**< Weak! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA           0xC011 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA      0xC012 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA       0xC013 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA       0xC014 /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256  0xC023 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384  0xC024 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256   0xC025 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384   0xC026 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256    0xC027 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384    0xC028 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256     0xC029 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384     0xC02A /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256  0xC02B /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384  0xC02C /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256   0xC02D /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384   0xC02E /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256    0xC02F /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384    0xC030 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256     0xC031 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384     0xC032 /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA           0xC033 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA      0xC034 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA       0xC035 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA       0xC036 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256    0xC037 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384    0xC038 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA              0xC039 /**< Weak! No SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256           0xC03A /**< Weak! No SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384           0xC03B /**< Weak! No SSL3! */\n\n#define MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256         0xC03C /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384         0xC03D /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256     0xC044 /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384     0xC045 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 0xC048 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 0xC049 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256  0xC04A /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384  0xC04B /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256   0xC04C /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384   0xC04D /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256    0xC04E /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384    0xC04F /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256         0xC050 /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384         0xC051 /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256     0xC052 /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384     0xC053 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 0xC05C /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 0xC05D /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256  0xC05E /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384  0xC05F /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256   0xC060 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384   0xC061 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256    0xC062 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384    0xC063 /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256         0xC064 /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384         0xC065 /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256     0xC066 /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384     0xC067 /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256     0xC068 /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384     0xC069 /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256         0xC06A /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384         0xC06B /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256     0xC06C /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384     0xC06D /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256     0xC06E /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384     0xC06F /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256   0xC070 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384   0xC071 /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 0xC072 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 0xC073 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256  0xC074 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384  0xC075 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256   0xC076 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384   0xC077 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256    0xC078 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384    0xC079 /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256         0xC07A /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384         0xC07B /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256     0xC07C /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384     0xC07D /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 0xC086 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 0xC087 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256  0xC088 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384  0xC089 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256   0xC08A /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384   0xC08B /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256    0xC08C /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384    0xC08D /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256       0xC08E /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384       0xC08F /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256   0xC090 /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384   0xC091 /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256   0xC092 /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384   0xC093 /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256       0xC094\n#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384       0xC095\n#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256   0xC096\n#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384   0xC097\n#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256   0xC098\n#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384   0xC099\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 0xC09A /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 0xC09B /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_RSA_WITH_AES_128_CCM                0xC09C  /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_256_CCM                0xC09D  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM            0xC09E  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM            0xC09F  /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8              0xC0A0  /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8              0xC0A1  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8          0xC0A2  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8          0xC0A3  /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_128_CCM                0xC0A4  /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_256_CCM                0xC0A5  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM            0xC0A6  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM            0xC0A7  /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8              0xC0A8  /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8              0xC0A9  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8          0xC0AA  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8          0xC0AB  /**< TLS 1.2 */\n/* The last two are named with PSK_DHE in the RFC, which looks like a typo */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM        0xC0AC  /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM        0xC0AD  /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8      0xC0AE  /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8      0xC0AF  /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8          0xC0FF  /**< experimental */\n\n/* Reminder: update mbedtls_ssl_premaster_secret when adding a new key exchange.\n * Reminder: update MBEDTLS_KEY_EXCHANGE__xxx below\n */\ntypedef enum {\n    MBEDTLS_KEY_EXCHANGE_NONE = 0,\n    MBEDTLS_KEY_EXCHANGE_RSA,\n    MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n    MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n    MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n    MBEDTLS_KEY_EXCHANGE_PSK,\n    MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n    MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n    MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n    MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n    MBEDTLS_KEY_EXCHANGE_ECJPAKE,\n} mbedtls_key_exchange_type_t;\n\n/* Key exchanges using a certificate */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           || \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED\n#endif\n\n/* Key exchanges allowing client certificate requests */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)    ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED\n#endif\n\n/* Key exchanges involving server signature in ServerKeyExchange */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED\n#endif\n\n/* Key exchanges using ECDH */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED\n#endif\n\n/* Key exchanges that don't involve ephemeral keys */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           || \\\n    defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)           || \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED\n#endif\n\n/* Key exchanges that involve ephemeral keys */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED\n#endif\n\n/* Key exchanges using a PSK */\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)           || \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED\n#endif\n\n/* Key exchanges using DHE */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED\n#endif\n\n/* Key exchanges using ECDHE */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED\n#endif\n\ntypedef struct mbedtls_ssl_ciphersuite_t mbedtls_ssl_ciphersuite_t;\n\n#define MBEDTLS_CIPHERSUITE_WEAK       0x01    /**< Weak ciphersuite flag  */\n#define MBEDTLS_CIPHERSUITE_SHORT_TAG  0x02    /**< Short authentication tag,\n                                                     eg for CCM_8 */\n#define MBEDTLS_CIPHERSUITE_NODTLS     0x04    /**< Can't be used with DTLS */\n\n/**\n * \\brief   This structure is used for storing ciphersuite information\n */\nstruct mbedtls_ssl_ciphersuite_t\n{\n    int id;\n    const char * name;\n\n    mbedtls_cipher_type_t cipher;\n    mbedtls_md_type_t mac;\n    mbedtls_key_exchange_type_t key_exchange;\n\n    int min_major_ver;\n    int min_minor_ver;\n    int max_major_ver;\n    int max_minor_ver;\n\n    unsigned char flags;\n};\n\nconst int *mbedtls_ssl_list_ciphersuites( void );\n\nconst mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_string( const char *ciphersuite_name );\nconst mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite_id );\n\n#if defined(MBEDTLS_PK_C)\nmbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info );\nmbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_alg( const mbedtls_ssl_ciphersuite_t *info );\n#endif\n\nint mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info );\nint mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info );\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_has_pfs( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_ECJPAKE:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_no_pfs( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_uses_ecdh( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */\n\nstatic inline int mbedtls_ssl_ciphersuite_cert_req_allowed( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_uses_dhe( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED) */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_uses_ecdhe( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* ssl_ciphersuites.h */\n","/*\n *  SSLv3/TLSv1 server-side functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SSL_SRV_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free      free\n#endif\n\n#include \"mbedtls/debug.h\"\n#include \"mbedtls/ssl.h\"\n#include \"mbedtls/ssl_internal.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n\n#if defined(MBEDTLS_HAVE_TIME)\n#include \"mbedtls/platform_time.h\"\n#endif\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)\nint mbedtls_ssl_set_client_transport_id( mbedtls_ssl_context *ssl,\n                                 const unsigned char *info,\n                                 size_t ilen )\n{\n    if( ssl->conf->endpoint != MBEDTLS_SSL_IS_SERVER )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    mbedtls_free( ssl->cli_id );\n\n    if( ( ssl->cli_id = mbedtls_calloc( 1, ilen ) ) == NULL )\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n\n    memcpy( ssl->cli_id, info, ilen );\n    ssl->cli_id_len = ilen;\n\n    return( 0 );\n}\n\nvoid mbedtls_ssl_conf_dtls_cookies( mbedtls_ssl_config *conf,\n                           mbedtls_ssl_cookie_write_t *f_cookie_write,\n                           mbedtls_ssl_cookie_check_t *f_cookie_check,\n                           void *p_cookie )\n{\n    conf->f_cookie_write = f_cookie_write;\n    conf->f_cookie_check = f_cookie_check;\n    conf->p_cookie       = p_cookie;\n}\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\nstatic int ssl_parse_servername_ext( mbedtls_ssl_context *ssl,\n                                     const unsigned char *buf,\n                                     size_t len )\n{\n    int ret;\n    size_t servername_list_size, hostname_len;\n    const unsigned char *p;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"parse ServerName extension\" ) );\n\n    servername_list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );\n    if( servername_list_size + 2 != len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    p = buf + 2;\n    while( servername_list_size > 0 )\n    {\n        hostname_len = ( ( p[1] << 8 ) | p[2] );\n        if( hostname_len + 3 > servername_list_size )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        if( p[0] == MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME )\n        {\n            ret = ssl->conf->f_sni( ssl->conf->p_sni,\n                                    ssl, p + 3, hostname_len );\n            if( ret != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_sni_wrapper\", ret );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                        MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n            return( 0 );\n        }\n\n        servername_list_size -= hostname_len + 3;\n        p += hostname_len + 3;\n    }\n\n    if( servername_list_size != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\nstatic int ssl_parse_renegotiation_info( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        /* Check verify-data in constant-time. The length OTOH is no secret */\n        if( len    != 1 + ssl->verify_data_len ||\n            buf[0] !=     ssl->verify_data_len ||\n            mbedtls_ssl_safer_memcmp( buf + 1, ssl->peer_verify_data,\n                          ssl->verify_data_len ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching renegotiation info\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n    {\n        if( len != 1 || buf[0] != 0x0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-zero length renegotiation info\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;\n    }\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n\n/*\n * Status of the implementation of signature-algorithms extension:\n *\n * Currently, we are only considering the signature-algorithm extension\n * to pick a ciphersuite which allows us to send the ServerKeyExchange\n * message with a signature-hash combination that the user allows.\n *\n * We do *not* check whether all certificates in our certificate\n * chain are signed with an allowed signature-hash pair.\n * This needs to be done at a later stage.\n *\n */\nstatic int ssl_parse_signature_algorithms_ext( mbedtls_ssl_context *ssl,\n                                               const unsigned char *buf,\n                                               size_t len )\n{\n    size_t sig_alg_list_size;\n\n    const unsigned char *p;\n    const unsigned char *end = buf + len;\n\n    mbedtls_md_type_t md_cur;\n    mbedtls_pk_type_t sig_cur;\n\n    sig_alg_list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );\n    if( sig_alg_list_size + 2 != len ||\n        sig_alg_list_size % 2 != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /* Currently we only guarantee signing the ServerKeyExchange message according\n     * to the constraints specified in this extension (see above), so it suffices\n     * to remember only one suitable hash for each possible signature algorithm.\n     *\n     * This will change when we also consider certificate signatures,\n     * in which case we will need to remember the whole signature-hash\n     * pair list from the extension.\n     */\n\n    for( p = buf + 2; p < end; p += 2 )\n    {\n        /* Silently ignore unknown signature or hash algorithms. */\n\n        if( ( sig_cur = mbedtls_ssl_pk_alg_from_sig( p[1] ) ) == MBEDTLS_PK_NONE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext\"\n                                        \" unknown sig alg encoding %d\", p[1] ) );\n            continue;\n        }\n\n        /* Check if we support the hash the user proposes */\n        md_cur = mbedtls_ssl_md_alg_from_hash( p[0] );\n        if( md_cur == MBEDTLS_MD_NONE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext:\"\n                                        \" unknown hash alg encoding %d\", p[0] ) );\n            continue;\n        }\n\n        if( mbedtls_ssl_check_sig_hash( ssl, md_cur ) == 0 )\n        {\n            mbedtls_ssl_sig_hash_set_add( &ssl->handshake->hash_algs, sig_cur, md_cur );\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext:\"\n                                        \" match sig %d and hash %d\",\n                                        sig_cur, md_cur ) );\n        }\n        else\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext: \"\n                                        \"hash alg %d not supported\", md_cur ) );\n        }\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic int ssl_parse_supported_elliptic_curves( mbedtls_ssl_context *ssl,\n                                                const unsigned char *buf,\n                                                size_t len )\n{\n    size_t list_size, our_size;\n    const unsigned char *p;\n    const mbedtls_ecp_curve_info *curve_info, **curves;\n\n    list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );\n    if( list_size + 2 != len ||\n        list_size % 2 != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /* Should never happen unless client duplicates the extension */\n    if( ssl->handshake->curves != NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /* Don't allow our peer to make us allocate too much memory,\n     * and leave room for a final 0 */\n    our_size = list_size / 2 + 1;\n    if( our_size > MBEDTLS_ECP_DP_MAX )\n        our_size = MBEDTLS_ECP_DP_MAX;\n\n    if( ( curves = mbedtls_calloc( our_size, sizeof( *curves ) ) ) == NULL )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    ssl->handshake->curves = curves;\n\n    p = buf + 2;\n    while( list_size > 0 && our_size > 1 )\n    {\n        curve_info = mbedtls_ecp_curve_info_from_tls_id( ( p[0] << 8 ) | p[1] );\n\n        if( curve_info != NULL )\n        {\n            *curves++ = curve_info;\n            our_size--;\n        }\n\n        list_size -= 2;\n        p += 2;\n    }\n\n    return( 0 );\n}\n\nstatic int ssl_parse_supported_point_formats( mbedtls_ssl_context *ssl,\n                                              const unsigned char *buf,\n                                              size_t len )\n{\n    size_t list_size;\n    const unsigned char *p;\n\n    list_size = buf[0];\n    if( list_size + 1 != len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    p = buf + 1;\n    while( list_size > 0 )\n    {\n        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||\n            p[0] == MBEDTLS_ECP_PF_COMPRESSED )\n        {\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)\n            ssl->handshake->ecdh_ctx.point_format = p[0];\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n            ssl->handshake->ecjpake_ctx.point_format = p[0];\n#endif\n            MBEDTLS_SSL_DEBUG_MSG( 4, ( \"point format selected: %d\", p[0] ) );\n            return( 0 );\n        }\n\n        list_size--;\n        p++;\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||\n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic int ssl_parse_ecjpake_kkpp( mbedtls_ssl_context *ssl,\n                                   const unsigned char *buf,\n                                   size_t len )\n{\n    int ret;\n\n    if( mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"skip ecjpake kkpp extension\" ) );\n        return( 0 );\n    }\n\n    if( ( ret = mbedtls_ecjpake_read_round_one( &ssl->handshake->ecjpake_ctx,\n                                                buf, len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_one\", ret );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( ret );\n    }\n\n    /* Only mark the extension as OK when we're sure it is */\n    ssl->handshake->cli_exts |= MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nstatic int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,\n                                              const unsigned char *buf,\n                                              size_t len )\n{\n    if( len != 1 || buf[0] >= MBEDTLS_SSL_MAX_FRAG_LEN_INVALID )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ssl->session_negotiate->mfl_code = buf[0];\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nstatic int ssl_parse_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ((void) buf);\n\n    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )\n        ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nstatic int ssl_parse_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,\n                                      const unsigned char *buf,\n                                      size_t len )\n{\n    if( len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ((void) buf);\n\n    if( ssl->conf->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED &&\n        ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        ssl->session_negotiate->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nstatic int ssl_parse_extended_ms_ext( mbedtls_ssl_context *ssl,\n                                      const unsigned char *buf,\n                                      size_t len )\n{\n    if( len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ((void) buf);\n\n    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED &&\n        ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,\n                                         unsigned char *buf,\n                                         size_t len )\n{\n    int ret;\n    mbedtls_ssl_session session;\n\n    mbedtls_ssl_session_init( &session );\n\n    if( ssl->conf->f_ticket_parse == NULL ||\n        ssl->conf->f_ticket_write == NULL )\n    {\n        return( 0 );\n    }\n\n    /* Remember the client asked us to send a new ticket */\n    ssl->handshake->new_session_ticket = 1;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket length: %d\", len ) );\n\n    if( len == 0 )\n        return( 0 );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket rejected: renegotiating\" ) );\n        return( 0 );\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n    /*\n     * Failures are ok: just ignore the ticket and proceed.\n     */\n    if( ( ret = ssl->conf->f_ticket_parse( ssl->conf->p_ticket, &session,\n                                           buf, len ) ) != 0 )\n    {\n        mbedtls_ssl_session_free( &session );\n\n        if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket is not authentic\" ) );\n        else if( ret == MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED )\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket is expired\" ) );\n        else\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_ticket_parse\", ret );\n\n        return( 0 );\n    }\n\n    /*\n     * Keep the session ID sent by the client, since we MUST send it back to\n     * inform them we're accepting the ticket  (RFC 5077 section 3.4)\n     */\n    session.id_len = ssl->session_negotiate->id_len;\n    memcpy( &session.id, ssl->session_negotiate->id, session.id_len );\n\n    mbedtls_ssl_session_free( ssl->session_negotiate );\n    memcpy( ssl->session_negotiate, &session, sizeof( mbedtls_ssl_session ) );\n\n    /* Zeroize instead of free as we copied the content */\n    mbedtls_platform_zeroize( &session, sizeof( mbedtls_ssl_session ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"session successfully restored from ticket\" ) );\n\n    ssl->handshake->resume = 1;\n\n    /* Don't send a new ticket after all, this one is OK */\n    ssl->handshake->new_session_ticket = 0;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_SSL_ALPN)\nstatic int ssl_parse_alpn_ext( mbedtls_ssl_context *ssl,\n                               const unsigned char *buf, size_t len )\n{\n    size_t list_len, cur_len, ours_len;\n    const unsigned char *theirs, *start, *end;\n    const char **ours;\n\n    /* If ALPN not configured, just ignore the extension */\n    if( ssl->conf->alpn_list == NULL )\n        return( 0 );\n\n    /*\n     * opaque ProtocolName<1..2^8-1>;\n     *\n     * struct {\n     *     ProtocolName protocol_name_list<2..2^16-1>\n     * } ProtocolNameList;\n     */\n\n    /* Min length is 2 (list_len) + 1 (name_len) + 1 (name) */\n    if( len < 4 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    list_len = ( buf[0] << 8 ) | buf[1];\n    if( list_len != len - 2 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /*\n     * Validate peer's list (lengths)\n     */\n    start = buf + 2;\n    end = buf + len;\n    for( theirs = start; theirs != end; theirs += cur_len )\n    {\n        cur_len = *theirs++;\n\n        /* Current identifier must fit in list */\n        if( cur_len > (size_t)( end - theirs ) )\n        {\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        /* Empty strings MUST NOT be included */\n        if( cur_len == 0 )\n        {\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n    }\n\n    /*\n     * Use our order of preference\n     */\n    for( ours = ssl->conf->alpn_list; *ours != NULL; ours++ )\n    {\n        ours_len = strlen( *ours );\n        for( theirs = start; theirs != end; theirs += cur_len )\n        {\n            cur_len = *theirs++;\n\n            if( cur_len == ours_len &&\n                memcmp( theirs, *ours, cur_len ) == 0 )\n            {\n                ssl->alpn_chosen = *ours;\n                return( 0 );\n            }\n        }\n    }\n\n    /* If we get there, no match was found */\n    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                            MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL );\n    return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n}\n#endif /* MBEDTLS_SSL_ALPN */\n\n/*\n * Auxiliary functions for ServerHello parsing and related actions\n */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n/*\n * Return 0 if the given key uses one of the acceptable curves, -1 otherwise\n */\n#if defined(MBEDTLS_ECDSA_C)\nstatic int ssl_check_key_curve( mbedtls_pk_context *pk,\n                                const mbedtls_ecp_curve_info **curves )\n{\n    const mbedtls_ecp_curve_info **crv = curves;\n    mbedtls_ecp_group_id grp_id = mbedtls_pk_ec( *pk )->grp.id;\n\n    while( *crv != NULL )\n    {\n        if( (*crv)->grp_id == grp_id )\n            return( 0 );\n        crv++;\n    }\n\n    return( -1 );\n}\n#endif /* MBEDTLS_ECDSA_C */\n\n/*\n * Try picking a certificate for this ciphersuite,\n * return 0 on success and -1 on failure.\n */\nstatic int ssl_pick_cert( mbedtls_ssl_context *ssl,\n                          const mbedtls_ssl_ciphersuite_t * ciphersuite_info )\n{\n    mbedtls_ssl_key_cert *cur, *list, *fallback = NULL;\n    mbedtls_pk_type_t pk_alg =\n        mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );\n    uint32_t flags;\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    if( ssl->handshake->sni_key_cert != NULL )\n        list = ssl->handshake->sni_key_cert;\n    else\n#endif\n        list = ssl->conf->key_cert;\n\n    if( pk_alg == MBEDTLS_PK_NONE )\n        return( 0 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite requires certificate\" ) );\n\n    if( list == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server has no certificate\" ) );\n        return( -1 );\n    }\n\n    for( cur = list; cur != NULL; cur = cur->next )\n    {\n        MBEDTLS_SSL_DEBUG_CRT( 3, \"candidate certificate chain, certificate\",\n                          cur->cert );\n\n        if( ! mbedtls_pk_can_do( cur->key, pk_alg ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"certificate mismatch: key type\" ) );\n            continue;\n        }\n\n        /*\n         * This avoids sending the client a cert it'll reject based on\n         * keyUsage or other extensions.\n         *\n         * It also allows the user to provision different certificates for\n         * different uses based on keyUsage, eg if they want to avoid signing\n         * and decrypting with the same RSA key.\n         */\n        if( mbedtls_ssl_check_cert_usage( cur->cert, ciphersuite_info,\n                                  MBEDTLS_SSL_IS_SERVER, &flags ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"certificate mismatch: \"\n                                \"(extended) key usage extension\" ) );\n            continue;\n        }\n\n#if defined(MBEDTLS_ECDSA_C)\n        if( pk_alg == MBEDTLS_PK_ECDSA &&\n            ssl_check_key_curve( cur->key, ssl->handshake->curves ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"certificate mismatch: elliptic curve\" ) );\n            continue;\n        }\n#endif\n\n        /*\n         * Try to select a SHA-1 certificate for pre-1.2 clients, but still\n         * present them a SHA-higher cert rather than failing if it's the only\n         * one we got that satisfies the other conditions.\n         */\n        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 &&\n            cur->cert->sig_md != MBEDTLS_MD_SHA1 )\n        {\n            if( fallback == NULL )\n                fallback = cur;\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"certificate not preferred: \"\n                                    \"sha-2 with pre-TLS 1.2 client\" ) );\n            continue;\n            }\n        }\n\n        /* If we get there, we got a winner */\n        break;\n    }\n\n    if( cur == NULL )\n        cur = fallback;\n\n    /* Do not update ssl->handshake->key_cert unless there is a match */\n    if( cur != NULL )\n    {\n        ssl->handshake->key_cert = cur;\n        MBEDTLS_SSL_DEBUG_CRT( 3, \"selected certificate chain, certificate\",\n                          ssl->handshake->key_cert->cert );\n        return( 0 );\n    }\n\n    return( -1 );\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n/*\n * Check if a given ciphersuite is suitable for use with our config/keys/etc\n * Sets ciphersuite_info only if the suite matches.\n */\nstatic int ssl_ciphersuite_match( mbedtls_ssl_context *ssl, int suite_id,\n                                  const mbedtls_ssl_ciphersuite_t **ciphersuite_info )\n{\n    const mbedtls_ssl_ciphersuite_t *suite_info;\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    mbedtls_pk_type_t sig_type;\n#endif\n\n    suite_info = mbedtls_ssl_ciphersuite_from_id( suite_id );\n    if( suite_info == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"trying ciphersuite: %s\", suite_info->name ) );\n\n    if( suite_info->min_minor_ver > ssl->minor_ver ||\n        suite_info->max_minor_ver < ssl->minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: version\" ) );\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ( suite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS ) )\n        return( 0 );\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n    if( ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&\n            suite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: rc4\" ) );\n        return( 0 );\n    }\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( suite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&\n        ( ssl->handshake->cli_exts & MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK ) == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: ecjpake \"\n                                    \"not configured or ext missing\" ) );\n        return( 0 );\n    }\n#endif\n\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)\n    if( mbedtls_ssl_ciphersuite_uses_ec( suite_info ) &&\n        ( ssl->handshake->curves == NULL ||\n          ssl->handshake->curves[0] == NULL ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: \"\n                            \"no common elliptic curve\" ) );\n        return( 0 );\n    }\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    /* If the ciphersuite requires a pre-shared key and we don't\n     * have one, skip it now rather than failing later */\n    if( mbedtls_ssl_ciphersuite_uses_psk( suite_info ) &&\n        ssl->conf->f_psk == NULL &&\n        ( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL ||\n          ssl->conf->psk_identity_len == 0 || ssl->conf->psk_len == 0 ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: no pre-shared key\" ) );\n        return( 0 );\n    }\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    /* If the ciphersuite requires signing, check whether\n     * a suitable hash algorithm is present. */\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        sig_type = mbedtls_ssl_get_ciphersuite_sig_alg( suite_info );\n        if( sig_type != MBEDTLS_PK_NONE &&\n            mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs, sig_type ) == MBEDTLS_MD_NONE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: no suitable hash algorithm \"\n                                        \"for signature algorithm %d\", sig_type ) );\n            return( 0 );\n        }\n    }\n\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n    /*\n     * Final check: if ciphersuite requires us to have a\n     * certificate/key of a particular type:\n     * - select the appropriate certificate if we have one, or\n     * - try the next ciphersuite if we don't\n     * This must be done last since we modify the key_cert list.\n     */\n    if( ssl_pick_cert( ssl, suite_info ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: \"\n                            \"no suitable certificate\" ) );\n        return( 0 );\n    }\n#endif\n\n    *ciphersuite_info = suite_info;\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO)\nstatic int ssl_parse_client_hello_v2( mbedtls_ssl_context *ssl )\n{\n    int ret, got_common_suite;\n    unsigned int i, j;\n    size_t n;\n    unsigned int ciph_len, sess_len, chal_len;\n    unsigned char *buf, *p;\n    const int *ciphersuites;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse client hello v2\" ) );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"client hello v2 illegal for renegotiation\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n    buf = ssl->in_hdr;\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"record header\", buf, 5 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v2, message type: %d\",\n                   buf[2] ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v2, message len.: %d\",\n                   ( ( buf[0] & 0x7F ) << 8 ) | buf[1] ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v2, max. version: [%d:%d]\",\n                   buf[3], buf[4] ) );\n\n    /*\n     * SSLv2 Client Hello\n     *\n     * Record layer:\n     *     0  .   1   message length\n     *\n     * SSL layer:\n     *     2  .   2   message type\n     *     3  .   4   protocol version\n     */\n    if( buf[2] != MBEDTLS_SSL_HS_CLIENT_HELLO ||\n        buf[3] != MBEDTLS_SSL_MAJOR_VERSION_3 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    n = ( ( buf[0] << 8 ) | buf[1] ) & 0x7FFF;\n\n    if( n < 17 || n > 512 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ssl->major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;\n    ssl->minor_ver = ( buf[4] <= ssl->conf->max_minor_ver )\n                     ? buf[4]  : ssl->conf->max_minor_ver;\n\n    if( ssl->minor_ver < ssl->conf->min_minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"client only supports ssl smaller than minimum\"\n                            \" [%d:%d] < [%d:%d]\",\n                            ssl->major_ver, ssl->minor_ver,\n                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver ) );\n\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );\n    }\n\n    ssl->handshake->max_major_ver = buf[3];\n    ssl->handshake->max_minor_ver = buf[4];\n\n    if( ( ret = mbedtls_ssl_fetch_input( ssl, 2 + n ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_fetch_input\", ret );\n        return( ret );\n    }\n\n    ssl->handshake->update_checksum( ssl, buf + 2, n );\n\n    buf = ssl->in_msg;\n    n = ssl->in_left - 5;\n\n    /*\n     *    0  .   1   ciphersuitelist length\n     *    2  .   3   session id length\n     *    4  .   5   challenge length\n     *    6  .  ..   ciphersuitelist\n     *   ..  .  ..   session id\n     *   ..  .  ..   challenge\n     */\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"record contents\", buf, n );\n\n    ciph_len = ( buf[0] << 8 ) | buf[1];\n    sess_len = ( buf[2] << 8 ) | buf[3];\n    chal_len = ( buf[4] << 8 ) | buf[5];\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciph_len: %d, sess_len: %d, chal_len: %d\",\n                   ciph_len, sess_len, chal_len ) );\n\n    /*\n     * Make sure each parameter length is valid\n     */\n    if( ciph_len < 3 || ( ciph_len % 3 ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    if( sess_len > 32 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    if( chal_len < 8 || chal_len > 32 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    if( n != 6 + ciph_len + sess_len + chal_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, ciphersuitelist\",\n                   buf + 6, ciph_len );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, session id\",\n                   buf + 6 + ciph_len, sess_len );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, challenge\",\n                   buf + 6 + ciph_len + sess_len, chal_len );\n\n    p = buf + 6 + ciph_len;\n    ssl->session_negotiate->id_len = sess_len;\n    memset( ssl->session_negotiate->id, 0,\n            sizeof( ssl->session_negotiate->id ) );\n    memcpy( ssl->session_negotiate->id, p, ssl->session_negotiate->id_len );\n\n    p += sess_len;\n    memset( ssl->handshake->randbytes, 0, 64 );\n    memcpy( ssl->handshake->randbytes + 32 - chal_len, p, chal_len );\n\n    /*\n     * Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV\n     */\n    for( i = 0, p = buf + 6; i < ciph_len; i += 3, p += 3 )\n    {\n        if( p[0] == 0 && p[1] == 0 && p[2] == MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"received TLS_EMPTY_RENEGOTIATION_INFO \" ) );\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"received RENEGOTIATION SCSV \"\n                                    \"during renegotiation\" ) );\n\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n            ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;\n            break;\n        }\n    }\n\n#if defined(MBEDTLS_SSL_FALLBACK_SCSV)\n    for( i = 0, p = buf + 6; i < ciph_len; i += 3, p += 3 )\n    {\n        if( p[0] == 0 &&\n            p[1] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE >> 8 ) & 0xff ) &&\n            p[2] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      ) & 0xff ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"received FALLBACK_SCSV\" ) );\n\n            if( ssl->minor_ver < ssl->conf->max_minor_ver )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"inapropriate fallback\" ) );\n\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK );\n\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            break;\n        }\n    }\n#endif /* MBEDTLS_SSL_FALLBACK_SCSV */\n\n    got_common_suite = 0;\n    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];\n    ciphersuite_info = NULL;\n#if defined(MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE)\n    for( j = 0, p = buf + 6; j < ciph_len; j += 3, p += 3 )\n        for( i = 0; ciphersuites[i] != 0; i++ )\n#else\n    for( i = 0; ciphersuites[i] != 0; i++ )\n        for( j = 0, p = buf + 6; j < ciph_len; j += 3, p += 3 )\n#endif\n        {\n            if( p[0] != 0 ||\n                p[1] != ( ( ciphersuites[i] >> 8 ) & 0xFF ) ||\n                p[2] != ( ( ciphersuites[i]      ) & 0xFF ) )\n                continue;\n\n            got_common_suite = 1;\n\n            if( ( ret = ssl_ciphersuite_match( ssl, ciphersuites[i],\n                                               &ciphersuite_info ) ) != 0 )\n                return( ret );\n\n            if( ciphersuite_info != NULL )\n                goto have_ciphersuite_v2;\n        }\n\n    if( got_common_suite )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got ciphersuites in common, \"\n                            \"but none of them usable\" ) );\n        return( MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE );\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no ciphersuites in common\" ) );\n        return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );\n    }\n\nhave_ciphersuite_v2:\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"selected ciphersuite: %s\", ciphersuite_info->name ) );\n\n    ssl->session_negotiate->ciphersuite = ciphersuites[i];\n    ssl->transform_negotiate->ciphersuite_info = ciphersuite_info;\n\n    /*\n     * SSLv2 Client Hello relevant renegotiation security checks\n     */\n    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation, breaking off handshake\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ssl->in_left = 0;\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse client hello v2\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO */\n\n/* This function doesn't alert on errors that happen early during\n   ClientHello parsing because they might indicate that the client is\n   not talking SSL/TLS at all and would not understand our alert. */\nstatic int ssl_parse_client_hello( mbedtls_ssl_context *ssl )\n{\n    int ret, got_common_suite;\n    size_t i, j;\n    size_t ciph_offset, comp_offset, ext_offset;\n    size_t msg_len, ciph_len, sess_len, comp_len, ext_len;\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    size_t cookie_offset, cookie_len;\n#endif\n    unsigned char *buf, *p, *ext;\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    int renegotiation_info_seen = 0;\n#endif\n    int handshake_failure = 0;\n    const int *ciphersuites;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n    int major, minor;\n\n    /* If there is no signature-algorithm extension present,\n     * we need to fall back to the default values for allowed\n     * signature-hash pairs. */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    int sig_hash_alg_ext_present = 0;\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse client hello\" ) );\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\nread_record_header:\n#endif\n    /*\n     * If renegotiating, then the input was read with mbedtls_ssl_read_record(),\n     * otherwise read it ourselves manually in order to support SSLv2\n     * ClientHello, which doesn't use the same record layer format.\n     */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )\n#endif\n    {\n        if( ( ret = mbedtls_ssl_fetch_input( ssl, 5 ) ) != 0 )\n        {\n            /* No alert on a read error. */\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_fetch_input\", ret );\n            return( ret );\n        }\n    }\n\n    buf = ssl->in_hdr;\n\n#if defined(MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO)\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_STREAM )\n#endif\n        if( ( buf[0] & 0x80 ) != 0 )\n            return( ssl_parse_client_hello_v2( ssl ) );\n#endif\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"record header\", buf, mbedtls_ssl_hdr_len( ssl ) );\n\n    /*\n     * SSLv3/TLS Client Hello\n     *\n     * Record layer:\n     *     0  .   0   message type\n     *     1  .   2   protocol version\n     *     3  .   11  DTLS: epoch + record sequence number\n     *     3  .   4   message length\n     */\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, message type: %d\",\n                   buf[0] ) );\n\n    if( buf[0] != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, message len.: %d\",\n                   ( ssl->in_len[0] << 8 ) | ssl->in_len[1] ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, protocol version: [%d:%d]\",\n                   buf[1], buf[2] ) );\n\n    mbedtls_ssl_read_version( &major, &minor, ssl->conf->transport, buf + 1 );\n\n    /* According to RFC 5246 Appendix E.1, the version here is typically\n     * \"{03,00}, the lowest version number supported by the client, [or] the\n     * value of ClientHello.client_version\", so the only meaningful check here\n     * is the major version shouldn't be less than 3 */\n    if( major < MBEDTLS_SSL_MAJOR_VERSION_3 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /* For DTLS if this is the initial handshake, remember the client sequence\n     * number to use it in our next message (RFC 6347 4.2.1) */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        && ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE\n#endif\n        )\n    {\n        /* Epoch should be 0 for initial handshakes */\n        if( ssl->in_ctr[0] != 0 || ssl->in_ctr[1] != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        memcpy( ssl->out_ctr + 2, ssl->in_ctr + 2, 6 );\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\n        if( mbedtls_ssl_dtls_replay_check( ssl ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"replayed record, discarding\" ) );\n            ssl->next_record_offset = 0;\n            ssl->in_left = 0;\n            goto read_record_header;\n        }\n\n        /* No MAC to check yet, so we can update right now */\n        mbedtls_ssl_dtls_replay_update( ssl );\n#endif\n    }\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    msg_len = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        /* Set by mbedtls_ssl_read_record() */\n        msg_len = ssl->in_hslen;\n    }\n    else\n#endif\n    {\n        if( msg_len > MBEDTLS_SSL_MAX_CONTENT_LEN )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        if( ( ret = mbedtls_ssl_fetch_input( ssl,\n                       mbedtls_ssl_hdr_len( ssl ) + msg_len ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_fetch_input\", ret );\n            return( ret );\n        }\n\n    /* Done reading this record, get ready for the next one */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n            ssl->next_record_offset = msg_len + mbedtls_ssl_hdr_len( ssl );\n        else\n#endif\n            ssl->in_left = 0;\n    }\n\n    buf = ssl->in_msg;\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"record contents\", buf, msg_len );\n\n    ssl->handshake->update_checksum( ssl, buf, msg_len );\n\n    /*\n     * Handshake layer:\n     *     0  .   0   handshake type\n     *     1  .   3   handshake length\n     *     4  .   5   DTLS only: message seqence number\n     *     6  .   8   DTLS only: fragment offset\n     *     9  .  11   DTLS only: fragment length\n     */\n    if( msg_len < mbedtls_ssl_hs_hdr_len( ssl ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, handshake type: %d\", buf[0] ) );\n\n    if( buf[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, handshake len.: %d\",\n                   ( buf[1] << 16 ) | ( buf[2] << 8 ) | buf[3] ) );\n\n    /* We don't support fragmentation of ClientHello (yet?) */\n    if( buf[1] != 0 ||\n        msg_len != mbedtls_ssl_hs_hdr_len( ssl ) + ( ( buf[2] << 8 ) | buf[3] ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        /*\n         * Copy the client's handshake message_seq on initial handshakes,\n         * check sequence number on renego.\n         */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n        {\n            /* This couldn't be done in ssl_prepare_handshake_record() */\n            unsigned int cli_msg_seq = ( ssl->in_msg[4] << 8 ) |\n                                         ssl->in_msg[5];\n\n            if( cli_msg_seq != ssl->handshake->in_msg_seq )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message_seq: \"\n                                    \"%d (expected %d)\", cli_msg_seq,\n                                    ssl->handshake->in_msg_seq ) );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            ssl->handshake->in_msg_seq++;\n        }\n        else\n#endif\n        {\n            unsigned int cli_msg_seq = ( ssl->in_msg[4] << 8 ) |\n                                         ssl->in_msg[5];\n            ssl->handshake->out_msg_seq = cli_msg_seq;\n            ssl->handshake->in_msg_seq  = cli_msg_seq + 1;\n        }\n\n        /*\n         * For now we don't support fragmentation, so make sure\n         * fragment_offset == 0 and fragment_length == length\n         */\n        if( ssl->in_msg[6] != 0 || ssl->in_msg[7] != 0 || ssl->in_msg[8] != 0 ||\n            memcmp( ssl->in_msg + 1, ssl->in_msg + 9, 3 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"ClientHello fragmentation not supported\" ) );\n            return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n        }\n    }\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    buf += mbedtls_ssl_hs_hdr_len( ssl );\n    msg_len -= mbedtls_ssl_hs_hdr_len( ssl );\n\n    /*\n     * ClientHello layer:\n     *     0  .   1   protocol version\n     *     2  .  33   random bytes (starting with 4 bytes of Unix time)\n     *    34  .  35   session id length (1 byte)\n     *    35  . 34+x  session id\n     *   35+x . 35+x  DTLS only: cookie length (1 byte)\n     *   36+x .  ..   DTLS only: cookie\n     *    ..  .  ..   ciphersuite list length (2 bytes)\n     *    ..  .  ..   ciphersuite list\n     *    ..  .  ..   compression alg. list length (1 byte)\n     *    ..  .  ..   compression alg. list\n     *    ..  .  ..   extensions length (2 bytes, optional)\n     *    ..  .  ..   extensions (optional)\n     */\n\n    /*\n     * Minimal length (with everything empty and extensions ommitted) is\n     * 2 + 32 + 1 + 2 + 1 = 38 bytes. Check that first, so that we can\n     * read at least up to session id length without worrying.\n     */\n    if( msg_len < 38 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /*\n     * Check and save the protocol version\n     */\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, version\", buf, 2 );\n\n    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,\n                      ssl->conf->transport, buf );\n\n    ssl->handshake->max_major_ver = ssl->major_ver;\n    ssl->handshake->max_minor_ver = ssl->minor_ver;\n\n    if( ssl->major_ver < ssl->conf->min_major_ver ||\n        ssl->minor_ver < ssl->conf->min_minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"client only supports ssl smaller than minimum\"\n                            \" [%d:%d] < [%d:%d]\",\n                            ssl->major_ver, ssl->minor_ver,\n                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );\n    }\n\n    if( ssl->major_ver > ssl->conf->max_major_ver )\n    {\n        ssl->major_ver = ssl->conf->max_major_ver;\n        ssl->minor_ver = ssl->conf->max_minor_ver;\n    }\n    else if( ssl->minor_ver > ssl->conf->max_minor_ver )\n        ssl->minor_ver = ssl->conf->max_minor_ver;\n\n    /*\n     * Save client random (inc. Unix time)\n     */\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, random bytes\", buf + 2, 32 );\n\n    memcpy( ssl->handshake->randbytes, buf + 2, 32 );\n\n    /*\n     * Check the session ID length and save session ID\n     */\n    sess_len = buf[34];\n\n    if( sess_len > sizeof( ssl->session_negotiate->id ) ||\n        sess_len + 34 + 2 > msg_len ) /* 2 for cipherlist length field */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, session id\", buf + 35, sess_len );\n\n    ssl->session_negotiate->id_len = sess_len;\n    memset( ssl->session_negotiate->id, 0,\n            sizeof( ssl->session_negotiate->id ) );\n    memcpy( ssl->session_negotiate->id, buf + 35,\n            ssl->session_negotiate->id_len );\n\n    /*\n     * Check the cookie length and content\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        cookie_offset = 35 + sess_len;\n        cookie_len = buf[cookie_offset];\n\n        if( cookie_offset + 1 + cookie_len + 2 > msg_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, cookie\",\n                       buf + cookie_offset + 1, cookie_len );\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)\n        if( ssl->conf->f_cookie_check != NULL\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            && ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE\n#endif\n            )\n        {\n            if( ssl->conf->f_cookie_check( ssl->conf->p_cookie,\n                                     buf + cookie_offset + 1, cookie_len,\n                                     ssl->cli_id, ssl->cli_id_len ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 2, ( \"cookie verification failed\" ) );\n                ssl->handshake->verify_cookie_len = 1;\n            }\n            else\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 2, ( \"cookie verification passed\" ) );\n                ssl->handshake->verify_cookie_len = 0;\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */\n        {\n            /* We know we didn't send a cookie, so it should be empty */\n            if( cookie_len != 0 )\n            {\n                /* This may be an attacker's probe, so don't send an alert */\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"cookie verification skipped\" ) );\n        }\n\n    /*\n     * Check the ciphersuitelist length (will be parsed later)\n     */\n        ciph_offset = cookie_offset + 1 + cookie_len;\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n        ciph_offset = 35 + sess_len;\n\n    ciph_len = ( buf[ciph_offset + 0] << 8 )\n             | ( buf[ciph_offset + 1]      );\n\n    if( ciph_len < 2 ||\n        ciph_len + 2 + ciph_offset + 1 > msg_len || /* 1 for comp. alg. len */\n        ( ciph_len % 2 ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, ciphersuitelist\",\n                   buf + ciph_offset + 2,  ciph_len );\n\n    /*\n     * Check the compression algorithms length and pick one\n     */\n    comp_offset = ciph_offset + 2 + ciph_len;\n\n    comp_len = buf[comp_offset];\n\n    if( comp_len < 1 ||\n        comp_len > 16 ||\n        comp_len + comp_offset + 1 > msg_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, compression\",\n                      buf + comp_offset + 1, comp_len );\n\n    ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_NULL;\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    for( i = 0; i < comp_len; ++i )\n    {\n        if( buf[comp_offset + 1 + i] == MBEDTLS_SSL_COMPRESS_DEFLATE )\n        {\n            ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_DEFLATE;\n            break;\n        }\n    }\n#endif\n\n    /* See comments in ssl_write_client_hello() */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_NULL;\n#endif\n\n    /* Do not parse the extensions if the protocol is SSLv3 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    if( ( ssl->major_ver != 3 ) || ( ssl->minor_ver != 0 ) )\n    {\n#endif\n        /*\n         * Check the extension length\n         */\n        ext_offset = comp_offset + 1 + comp_len;\n        if( msg_len > ext_offset )\n        {\n            if( msg_len < ext_offset + 2 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            ext_len = ( buf[ext_offset + 0] << 8 )\n                    | ( buf[ext_offset + 1]      );\n\n            if( ( ext_len > 0 && ext_len < 4 ) ||\n                msg_len != ext_offset + 2 + ext_len )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n        }\n        else\n            ext_len = 0;\n\n        ext = buf + ext_offset + 2;\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello extensions\", ext, ext_len );\n\n        while( ext_len != 0 )\n        {\n            unsigned int ext_id   = ( ( ext[0] <<  8 )\n                                    | ( ext[1]       ) );\n            unsigned int ext_size = ( ( ext[2] <<  8 )\n                                    | ( ext[3]       ) );\n\n            if( ext_size + 4 > ext_len )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n            switch( ext_id )\n            {\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n            case MBEDTLS_TLS_EXT_SERVERNAME:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found ServerName extension\" ) );\n                if( ssl->conf->f_sni == NULL )\n                    break;\n\n                ret = ssl_parse_servername_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\n            case MBEDTLS_TLS_EXT_RENEGOTIATION_INFO:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found renegotiation extension\" ) );\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n                renegotiation_info_seen = 1;\n#endif\n\n                ret = ssl_parse_renegotiation_info( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n            case MBEDTLS_TLS_EXT_SIG_ALG:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found signature_algorithms extension\" ) );\n\n                ret = ssl_parse_signature_algorithms_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n\n                sig_hash_alg_ext_present = 1;\n                break;\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n            case MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found supported elliptic curves extension\" ) );\n\n                ret = ssl_parse_supported_elliptic_curves( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n\n            case MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found supported point formats extension\" ) );\n                ssl->handshake->cli_exts |= MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT;\n\n                ret = ssl_parse_supported_point_formats( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||\n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n            case MBEDTLS_TLS_EXT_ECJPAKE_KKPP:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found ecjpake kkpp extension\" ) );\n\n                ret = ssl_parse_ecjpake_kkpp( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n            case MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found max fragment length extension\" ) );\n\n                ret = ssl_parse_max_fragment_length_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n            case MBEDTLS_TLS_EXT_TRUNCATED_HMAC:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found truncated hmac extension\" ) );\n\n                ret = ssl_parse_truncated_hmac_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n            case MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found encrypt then mac extension\" ) );\n\n                ret = ssl_parse_encrypt_then_mac_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n            case MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found extended master secret extension\" ) );\n\n                ret = ssl_parse_extended_ms_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n            case MBEDTLS_TLS_EXT_SESSION_TICKET:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found session ticket extension\" ) );\n\n                ret = ssl_parse_session_ticket_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_SSL_ALPN)\n            case MBEDTLS_TLS_EXT_ALPN:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found alpn extension\" ) );\n\n                ret = ssl_parse_alpn_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n            default:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"unknown extension found: %d (ignoring)\",\n                               ext_id ) );\n            }\n\n            ext_len -= 4 + ext_size;\n            ext += 4 + ext_size;\n\n            if( ext_len > 0 && ext_len < 4 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n        }\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    }\n#endif\n\n#if defined(MBEDTLS_SSL_FALLBACK_SCSV)\n    for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )\n    {\n        if( p[0] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE >> 8 ) & 0xff ) &&\n            p[1] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      ) & 0xff ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"received FALLBACK_SCSV\" ) );\n\n            if( ssl->minor_ver < ssl->conf->max_minor_ver )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"inapropriate fallback\" ) );\n\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK );\n\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            break;\n        }\n    }\n#endif /* MBEDTLS_SSL_FALLBACK_SCSV */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n\n    /*\n     * Try to fall back to default hash SHA1 if the client\n     * hasn't provided any preferred signature-hash combinations.\n     */\n    if( sig_hash_alg_ext_present == 0 )\n    {\n        mbedtls_md_type_t md_default = MBEDTLS_MD_SHA1;\n\n        if( mbedtls_ssl_check_sig_hash( ssl, md_default ) != 0 )\n            md_default = MBEDTLS_MD_NONE;\n\n        mbedtls_ssl_sig_hash_set_const_hash( &ssl->handshake->hash_algs, md_default );\n    }\n\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n    /*\n     * Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV\n     */\n    for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )\n    {\n        if( p[0] == 0 && p[1] == MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"received TLS_EMPTY_RENEGOTIATION_INFO \" ) );\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"received RENEGOTIATION SCSV \"\n                                            \"during renegotiation\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n#endif\n            ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;\n            break;\n        }\n    }\n\n    /*\n     * Renegotiation security checks\n     */\n    if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION &&\n        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation, breaking off handshake\" ) );\n        handshake_failure = 1;\n    }\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&\n             renegotiation_info_seen == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension missing (secure)\" ) );\n        handshake_failure = 1;\n    }\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n             ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation not allowed\" ) );\n        handshake_failure = 1;\n    }\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n             renegotiation_info_seen == 1 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension present (legacy)\" ) );\n        handshake_failure = 1;\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n    if( handshake_failure == 1 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /*\n     * Search for a matching ciphersuite\n     * (At the end because we need information from the EC-based extensions\n     * and certificate from the SNI callback triggered by the SNI extension.)\n     */\n    got_common_suite = 0;\n    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];\n    ciphersuite_info = NULL;\n#if defined(MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE)\n    for( j = 0, p = buf + ciph_offset + 2; j < ciph_len; j += 2, p += 2 )\n        for( i = 0; ciphersuites[i] != 0; i++ )\n#else\n    for( i = 0; ciphersuites[i] != 0; i++ )\n        for( j = 0, p = buf + ciph_offset + 2; j < ciph_len; j += 2, p += 2 )\n#endif\n        {\n            if( p[0] != ( ( ciphersuites[i] >> 8 ) & 0xFF ) ||\n                p[1] != ( ( ciphersuites[i]      ) & 0xFF ) )\n                continue;\n\n            got_common_suite = 1;\n\n            if( ( ret = ssl_ciphersuite_match( ssl, ciphersuites[i],\n                                               &ciphersuite_info ) ) != 0 )\n                return( ret );\n\n            if( ciphersuite_info != NULL )\n                goto have_ciphersuite;\n        }\n\n    if( got_common_suite )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got ciphersuites in common, \"\n                            \"but none of them usable\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE );\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no ciphersuites in common\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );\n    }\n\nhave_ciphersuite:\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"selected ciphersuite: %s\", ciphersuite_info->name ) );\n\n    ssl->session_negotiate->ciphersuite = ciphersuites[i];\n    ssl->transform_negotiate->ciphersuite_info = ciphersuite_info;\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_recv_flight_completed( ssl );\n#endif\n\n    /* Debugging-only output for testsuite */\n#if defined(MBEDTLS_DEBUG_C)                         && \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)                && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        mbedtls_pk_type_t sig_alg = mbedtls_ssl_get_ciphersuite_sig_alg( ciphersuite_info );\n        if( sig_alg != MBEDTLS_PK_NONE )\n        {\n            mbedtls_md_type_t md_alg = mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs,\n                                                                  sig_alg );\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext: %d\",\n                                        mbedtls_ssl_hash_from_md_alg( md_alg ) ) );\n        }\n        else\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"no hash algorithm for signature algorithm \"\n                                        \"%d - should not happen\", sig_alg ) );\n        }\n    }\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse client hello\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nstatic void ssl_write_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                          unsigned char *buf,\n                                          size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->session_negotiate->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding truncated hmac extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nstatic void ssl_write_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,\n                                            unsigned char *buf,\n                                            size_t *olen )\n{\n    unsigned char *p = buf;\n    const mbedtls_ssl_ciphersuite_t *suite = NULL;\n    const mbedtls_cipher_info_t *cipher = NULL;\n\n    if( ssl->session_negotiate->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED ||\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        *olen = 0;\n        return;\n    }\n\n    /*\n     * RFC 7366: \"If a server receives an encrypt-then-MAC request extension\n     * from a client and then selects a stream or Authenticated Encryption\n     * with Associated Data (AEAD) ciphersuite, it MUST NOT send an\n     * encrypt-then-MAC response extension back to the client.\"\n     */\n    if( ( suite = mbedtls_ssl_ciphersuite_from_id(\n                    ssl->session_negotiate->ciphersuite ) ) == NULL ||\n        ( cipher = mbedtls_cipher_info_from_type( suite->cipher ) ) == NULL ||\n        cipher->mode != MBEDTLS_MODE_CBC )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding encrypt then mac extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nstatic void ssl_write_extended_ms_ext( mbedtls_ssl_context *ssl,\n                                       unsigned char *buf,\n                                       size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding extended master secret \"\n                        \"extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,\n                                          unsigned char *buf,\n                                          size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->handshake->new_session_ticket == 0 )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding session ticket extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\nstatic void ssl_write_renegotiation_ext( mbedtls_ssl_context *ssl,\n                                         unsigned char *buf,\n                                         size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, secure renegotiation extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        *p++ = 0x00;\n        *p++ = ( ssl->verify_data_len * 2 + 1 ) & 0xFF;\n        *p++ = ssl->verify_data_len * 2 & 0xFF;\n\n        memcpy( p, ssl->peer_verify_data, ssl->verify_data_len );\n        p += ssl->verify_data_len;\n        memcpy( p, ssl->own_verify_data, ssl->verify_data_len );\n        p += ssl->verify_data_len;\n    }\n    else\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n    {\n        *p++ = 0x00;\n        *p++ = 0x01;\n        *p++ = 0x00;\n    }\n\n    *olen = p - buf;\n}\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nstatic void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,\n                                               unsigned char *buf,\n                                               size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->session_negotiate->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, max_fragment_length extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 1;\n\n    *p++ = ssl->session_negotiate->mfl_code;\n\n    *olen = 5;\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,\n                                                   unsigned char *buf,\n                                                   size_t *olen )\n{\n    unsigned char *p = buf;\n    ((void) ssl);\n\n    if( ( ssl->handshake->cli_exts &\n          MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT ) == 0 )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, supported_point_formats extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 2;\n\n    *p++ = 1;\n    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;\n\n    *olen = 6;\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic void ssl_write_ecjpake_kkpp_ext( mbedtls_ssl_context *ssl,\n                                        unsigned char *buf,\n                                        size_t *olen )\n{\n    int ret;\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t kkpp_len;\n\n    *olen = 0;\n\n    /* Skip costly computation if not needed */\n    if( ssl->transform_negotiate->ciphersuite_info->key_exchange !=\n        MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, ecjpake kkpp extension\" ) );\n\n    if( end - p < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP      ) & 0xFF );\n\n    ret = mbedtls_ecjpake_write_round_one( &ssl->handshake->ecjpake_ctx,\n                                        p + 2, end - p - 2, &kkpp_len,\n                                        ssl->conf->f_rng, ssl->conf->p_rng );\n    if( ret != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1 , \"mbedtls_ecjpake_write_round_one\", ret );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( kkpp_len >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( kkpp_len      ) & 0xFF );\n\n    *olen = kkpp_len + 4;\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_ALPN )\nstatic void ssl_write_alpn_ext( mbedtls_ssl_context *ssl,\n                                unsigned char *buf, size_t *olen )\n{\n    if( ssl->alpn_chosen == NULL )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding alpn extension\" ) );\n\n    /*\n     * 0 . 1    ext identifier\n     * 2 . 3    ext length\n     * 4 . 5    protocol list length\n     * 6 . 6    protocol name length\n     * 7 . 7+n  protocol name\n     */\n    buf[0] = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );\n    buf[1] = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );\n\n    *olen = 7 + strlen( ssl->alpn_chosen );\n\n    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );\n    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );\n\n    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );\n    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );\n\n    buf[6] = (unsigned char)( ( ( *olen - 7 )      ) & 0xFF );\n\n    memcpy( buf + 7, ssl->alpn_chosen, *olen - 7 );\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C */\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)\nstatic int ssl_write_hello_verify_request( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *p = ssl->out_msg + 4;\n    unsigned char *cookie_len_byte;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write hello verify request\" ) );\n\n    /*\n     * struct {\n     *   ProtocolVersion server_version;\n     *   opaque cookie<0..2^8-1>;\n     * } HelloVerifyRequest;\n     */\n\n    /* The RFC is not clear on this point, but sending the actual negotiated\n     * version looks like the most interoperable thing to do. */\n    mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,\n                       ssl->conf->transport, p );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"server version\", p, 2 );\n    p += 2;\n\n    /* If we get here, f_cookie_check is not null */\n    if( ssl->conf->f_cookie_write == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"inconsistent cookie callbacks\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    /* Skip length byte until we know the length */\n    cookie_len_byte = p++;\n\n    if( ( ret = ssl->conf->f_cookie_write( ssl->conf->p_cookie,\n                                     &p, ssl->out_buf + MBEDTLS_SSL_BUFFER_LEN,\n                                     ssl->cli_id, ssl->cli_id_len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"f_cookie_write\", ret );\n        return( ret );\n    }\n\n    *cookie_len_byte = (unsigned char)( p - ( cookie_len_byte + 1 ) );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"cookie sent\", cookie_len_byte + 1, *cookie_len_byte );\n\n    ssl->out_msglen  = p - ssl->out_msg;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST;\n\n    ssl->state = MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write hello verify request\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */\n\nstatic int ssl_write_server_hello( mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_HAVE_TIME)\n    mbedtls_time_t t;\n#endif\n    int ret;\n    size_t olen, ext_len = 0, n;\n    unsigned char *buf, *p;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write server hello\" ) );\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->verify_cookie_len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"client hello was not authenticated\" ) );\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write server hello\" ) );\n\n        return( ssl_write_hello_verify_request( ssl ) );\n    }\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */\n\n    if( ssl->conf->f_rng == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no RNG provided\") );\n        return( MBEDTLS_ERR_SSL_NO_RNG );\n    }\n\n    /*\n     *     0  .   0   handshake type\n     *     1  .   3   handshake length\n     *     4  .   5   protocol version\n     *     6  .   9   UNIX time()\n     *    10  .  37   random bytes\n     */\n    buf = ssl->out_msg;\n    p = buf + 4;\n\n    mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,\n                       ssl->conf->transport, p );\n    p += 2;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, chosen version: [%d:%d]\",\n                        buf[4], buf[5] ) );\n\n#if defined(MBEDTLS_HAVE_TIME)\n    t = mbedtls_time( NULL );\n    *p++ = (unsigned char)( t >> 24 );\n    *p++ = (unsigned char)( t >> 16 );\n    *p++ = (unsigned char)( t >>  8 );\n    *p++ = (unsigned char)( t       );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, current time: %lu\", t ) );\n#else\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )\n        return( ret );\n\n    p += 4;\n#endif /* MBEDTLS_HAVE_TIME */\n\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )\n        return( ret );\n\n    p += 28;\n\n    memcpy( ssl->handshake->randbytes + 32, buf + 6, 32 );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"server hello, random bytes\", buf + 6, 32 );\n\n    /*\n     * Resume is 0  by default, see ssl_handshake_init().\n     * It may be already set to 1 by ssl_parse_session_ticket_ext().\n     * If not, try looking up session ID in our cache.\n     */\n    if( ssl->handshake->resume == 0 &&\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE &&\n#endif\n        ssl->session_negotiate->id_len != 0 &&\n        ssl->conf->f_get_cache != NULL &&\n        ssl->conf->f_get_cache( ssl->conf->p_cache, ssl->session_negotiate ) == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"session successfully restored from cache\" ) );\n        ssl->handshake->resume = 1;\n    }\n\n    if( ssl->handshake->resume == 0 )\n    {\n        /*\n         * New session, create a new session id,\n         * unless we're about to issue a session ticket\n         */\n        ssl->state++;\n\n#if defined(MBEDTLS_HAVE_TIME)\n        ssl->session_negotiate->start = mbedtls_time( NULL );\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n        if( ssl->handshake->new_session_ticket != 0 )\n        {\n            ssl->session_negotiate->id_len = n = 0;\n            memset( ssl->session_negotiate->id, 0, 32 );\n        }\n        else\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n        {\n            ssl->session_negotiate->id_len = n = 32;\n            if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id,\n                                    n ) ) != 0 )\n                return( ret );\n        }\n    }\n    else\n    {\n        /*\n         * Resuming a session\n         */\n        n = ssl->session_negotiate->id_len;\n        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;\n\n        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n            return( ret );\n        }\n    }\n\n    /*\n     *    38  .  38     session id length\n     *    39  . 38+n    session id\n     *   39+n . 40+n    chosen ciphersuite\n     *   41+n . 41+n    chosen compression alg.\n     *   42+n . 43+n    extensions length\n     *   44+n . 43+n+m  extensions\n     */\n    *p++ = (unsigned char) ssl->session_negotiate->id_len;\n    memcpy( p, ssl->session_negotiate->id, ssl->session_negotiate->id_len );\n    p += ssl->session_negotiate->id_len;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, session id len.: %d\", n ) );\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server hello, session id\", buf + 39, n );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"%s session has been resumed\",\n                   ssl->handshake->resume ? \"a\" : \"no\" ) );\n\n    *p++ = (unsigned char)( ssl->session_negotiate->ciphersuite >> 8 );\n    *p++ = (unsigned char)( ssl->session_negotiate->ciphersuite      );\n    *p++ = (unsigned char)( ssl->session_negotiate->compression      );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, chosen ciphersuite: %s\",\n           mbedtls_ssl_get_ciphersuite_name( ssl->session_negotiate->ciphersuite ) ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, compress alg.: 0x%02X\",\n                   ssl->session_negotiate->compression ) );\n\n    /* Do not write the extensions if the protocol is SSLv3 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    if( ( ssl->major_ver != 3 ) || ( ssl->minor_ver != 0 ) )\n    {\n#endif\n\n    /*\n     *  First write extensions, then the total length\n     */\n    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n    ssl_write_encrypt_then_mac_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_ALPN)\n    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, total extension length: %d\", ext_len ) );\n\n    if( ext_len > 0 )\n    {\n        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );\n        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );\n        p += ext_len;\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    }\n#endif\n\n    ssl->out_msglen  = p - buf;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_HELLO;\n\n    ret = mbedtls_ssl_write_record( ssl );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write server hello\" ) );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)       && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)   && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)  && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)&& \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\nstatic int ssl_write_certificate_request( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate request\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate request\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n#else\nstatic int ssl_write_certificate_request( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    size_t dn_size, total_dn_size; /* excluding length bytes */\n    size_t ct_len, sa_len; /* including length bytes */\n    unsigned char *buf, *p;\n    const unsigned char * const end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    const mbedtls_x509_crt *crt;\n    int authmode;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate request\" ) );\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    if( ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET )\n        authmode = ssl->handshake->sni_authmode;\n    else\n#endif\n        authmode = ssl->conf->authmode;\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||\n        authmode == MBEDTLS_SSL_VERIFY_NONE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate request\" ) );\n        return( 0 );\n    }\n\n    /*\n     *     0  .   0   handshake type\n     *     1  .   3   handshake length\n     *     4  .   4   cert type count\n     *     5  .. m-1  cert types\n     *     m  .. m+1  sig alg length (TLS 1.2 only)\n     *    m+1 .. n-1  SignatureAndHashAlgorithms (TLS 1.2 only)\n     *     n  .. n+1  length of all DNs\n     *    n+2 .. n+3  length of DN 1\n     *    n+4 .. ...  Distinguished Name #1\n     *    ... .. ...  length of DN 2, etc.\n     */\n    buf = ssl->out_msg;\n    p = buf + 4;\n\n    /*\n     * Supported certificate types\n     *\n     *     ClientCertificateType certificate_types<1..2^8-1>;\n     *     enum { (255) } ClientCertificateType;\n     */\n    ct_len = 0;\n\n#if defined(MBEDTLS_RSA_C)\n    p[1 + ct_len++] = MBEDTLS_SSL_CERT_TYPE_RSA_SIGN;\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n    p[1 + ct_len++] = MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN;\n#endif\n\n    p[0] = (unsigned char) ct_len++;\n    p += ct_len;\n\n    sa_len = 0;\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    /*\n     * Add signature_algorithms for verify (TLS 1.2)\n     *\n     *     SignatureAndHashAlgorithm supported_signature_algorithms<2..2^16-2>;\n     *\n     *     struct {\n     *           HashAlgorithm hash;\n     *           SignatureAlgorithm signature;\n     *     } SignatureAndHashAlgorithm;\n     *\n     *     enum { (255) } HashAlgorithm;\n     *     enum { (255) } SignatureAlgorithm;\n     */\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        const int *cur;\n\n        /*\n         * Supported signature algorithms\n         */\n        for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )\n        {\n            unsigned char hash = mbedtls_ssl_hash_from_md_alg( *cur );\n\n            if( MBEDTLS_SSL_HASH_NONE == hash || mbedtls_ssl_set_calc_verify_md( ssl, hash ) )\n                continue;\n\n#if defined(MBEDTLS_RSA_C)\n            p[2 + sa_len++] = hash;\n            p[2 + sa_len++] = MBEDTLS_SSL_SIG_RSA;\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n            p[2 + sa_len++] = hash;\n            p[2 + sa_len++] = MBEDTLS_SSL_SIG_ECDSA;\n#endif\n        }\n\n        p[0] = (unsigned char)( sa_len >> 8 );\n        p[1] = (unsigned char)( sa_len      );\n        sa_len += 2;\n        p += sa_len;\n    }\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n    /*\n     * DistinguishedName certificate_authorities<0..2^16-1>;\n     * opaque DistinguishedName<1..2^16-1>;\n     */\n    p += 2;\n\n    total_dn_size = 0;\n\n    if( ssl->conf->cert_req_ca_list ==  MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED )\n    {\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n        if( ssl->handshake->sni_ca_chain != NULL )\n            crt = ssl->handshake->sni_ca_chain;\n        else\n#endif\n            crt = ssl->conf->ca_chain;\n\n        while( crt != NULL && crt->version != 0 )\n        {\n            dn_size = crt->subject_raw.len;\n\n            if( end < p ||\n                (size_t)( end - p ) < dn_size ||\n                (size_t)( end - p ) < 2 + dn_size )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"skipping CAs: buffer too short\" ) );\n                break;\n            }\n\n            *p++ = (unsigned char)( dn_size >> 8 );\n            *p++ = (unsigned char)( dn_size      );\n            memcpy( p, crt->subject_raw.p, dn_size );\n            p += dn_size;\n\n            MBEDTLS_SSL_DEBUG_BUF( 3, \"requested DN\", p - dn_size, dn_size );\n\n            total_dn_size += 2 + dn_size;\n            crt = crt->next;\n        }\n    }\n\n    ssl->out_msglen  = p - buf;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_REQUEST;\n    ssl->out_msg[4 + ct_len + sa_len] = (unsigned char)( total_dn_size  >> 8 );\n    ssl->out_msg[5 + ct_len + sa_len] = (unsigned char)( total_dn_size       );\n\n    ret = mbedtls_ssl_write_record( ssl );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write certificate request\" ) );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\nstatic int ssl_get_ecdh_params_from_cert( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    if( ! mbedtls_pk_can_do( mbedtls_ssl_own_key( ssl ), MBEDTLS_PK_ECKEY ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key not ECDH capable\" ) );\n        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n    }\n\n    if( ( ret = mbedtls_ecdh_get_params( &ssl->handshake->ecdh_ctx,\n                                 mbedtls_pk_ec( *mbedtls_ssl_own_key( ssl ) ),\n                                 MBEDTLS_ECDH_OURS ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ecdh_get_params\" ), ret );\n        return( ret );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\nstatic int ssl_write_server_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t n = 0;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n                            ssl->transform_negotiate->ciphersuite_info;\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED)\n    unsigned char *p = ssl->out_msg + 4;\n    size_t len;\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n    unsigned char *dig_signed = p;\n    size_t dig_signed_len = 0;\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED */\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write server key exchange\" ) );\n\n    /*\n     *\n     * Part 1: Extract static ECDH parameters and abort\n     *         if ServerKeyExchange not needed.\n     *\n     */\n\n    /* For suites involving ECDH, extract DH parameters\n     * from certificate at this point. */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_ecdh( ciphersuite_info ) )\n    {\n        ssl_get_ecdh_params_from_cert( ssl );\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */\n\n    /* Key exchanges not involving ephemeral keys don't use\n     * ServerKeyExchange, so end here. */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)\n    if( mbedtls_ssl_ciphersuite_no_pfs( ciphersuite_info ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__NON_PFS__ENABLED */\n\n    /*\n     *\n     * Part 2: Provide key exchange parameters for chosen ciphersuite.\n     *\n     */\n\n    /*\n     * - ECJPAKE key exchanges\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n        ret = mbedtls_ecjpake_write_round_two( &ssl->handshake->ecjpake_ctx,\n                p, end - p, &len, ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_write_round_two\", ret );\n            return( ret );\n        }\n\n        p += len;\n        n += len;\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n    /*\n     * For (EC)DHE key exchanges with PSK, parameters are prefixed by support\n     * identity hint (RFC 4279, Sec. 3). Until someone needs this feature,\n     * we use empty support identity hints here.\n     **/\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)   || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        *(p++) = 0x00;\n        *(p++) = 0x00;\n\n        n += 2;\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n    /*\n     * - DHE key exchanges\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_dhe( ciphersuite_info ) )\n    {\n        if( ssl->conf->dhm_P.p == NULL || ssl->conf->dhm_G.p == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no DH parameters set\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n        }\n\n        /*\n         * Ephemeral DH parameters:\n         *\n         * struct {\n         *     opaque dh_p<1..2^16-1>;\n         *     opaque dh_g<1..2^16-1>;\n         *     opaque dh_Ys<1..2^16-1>;\n         * } ServerDHParams;\n         */\n        if( ( ret = mbedtls_dhm_set_group( &ssl->handshake->dhm_ctx,\n                                           &ssl->conf->dhm_P,\n                                           &ssl->conf->dhm_G ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_set_group\", ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_dhm_make_params( &ssl->handshake->dhm_ctx,\n                        (int) mbedtls_mpi_size( &ssl->handshake->dhm_ctx.P ),\n                        p, &len, ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_make_params\", ret );\n            return( ret );\n        }\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n        dig_signed = p;\n        dig_signed_len = len;\n#endif\n\n        p += len;\n        n += len;\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: X \", &ssl->handshake->dhm_ctx.X  );\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: P \", &ssl->handshake->dhm_ctx.P  );\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: G \", &ssl->handshake->dhm_ctx.G  );\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: GX\", &ssl->handshake->dhm_ctx.GX );\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED */\n\n    /*\n     * - ECDHE key exchanges\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_ecdhe( ciphersuite_info ) )\n    {\n        /*\n         * Ephemeral ECDH parameters:\n         *\n         * struct {\n         *     ECParameters curve_params;\n         *     ECPoint      public;\n         * } ServerECDHParams;\n         */\n        const mbedtls_ecp_curve_info **curve = NULL;\n        const mbedtls_ecp_group_id *gid;\n\n        /* Match our preference list against the offered curves */\n        for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )\n            for( curve = ssl->handshake->curves; *curve != NULL; curve++ )\n                if( (*curve)->grp_id == *gid )\n                    goto curve_matching_done;\n\ncurve_matching_done:\n        if( curve == NULL || *curve == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no matching curve for ECDHE\" ) );\n            return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"ECDHE curve: %s\", (*curve)->name ) );\n\n        if( ( ret = mbedtls_ecp_group_load( &ssl->handshake->ecdh_ctx.grp,\n                                       (*curve)->grp_id ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecp_group_load\", ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_ecdh_make_params( &ssl->handshake->ecdh_ctx, &len,\n                                      p, MBEDTLS_SSL_MAX_CONTENT_LEN - n,\n                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_make_params\", ret );\n            return( ret );\n        }\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n        dig_signed     = p;\n        dig_signed_len = len;\n#endif\n\n        p += len;\n        n += len;\n\n        MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Q \", &ssl->handshake->ecdh_ctx.Q );\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED */\n\n    /*\n     *\n     * Part 3: For key exchanges involving the server signing the\n     *         exchange parameters, compute and add the signature here.\n     *\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_server_signature( ciphersuite_info ) )\n    {\n        size_t signature_len = 0;\n        unsigned int hashlen = 0;\n        unsigned char hash[64];\n\n        /*\n         * 3.1: Choose hash algorithm:\n         * A: For TLS 1.2, obey signature-hash-algorithm extension\n         *    to choose appropriate hash.\n         * B: For SSL3, TLS1.0, TLS1.1 and ECDHE_ECDSA, use SHA1\n         *    (RFC 4492, Sec. 5.4)\n         * C: Otherwise, use MD5 + SHA1 (RFC 4346, Sec. 7.4.3)\n         */\n\n        mbedtls_md_type_t md_alg;\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        mbedtls_pk_type_t sig_alg =\n            mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            /* A: For TLS 1.2, obey signature-hash-algorithm extension\n             *    (RFC 5246, Sec. 7.4.1.4.1). */\n            if( sig_alg == MBEDTLS_PK_NONE ||\n                ( md_alg = mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs,\n                                                          sig_alg ) ) == MBEDTLS_MD_NONE )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n                /* (... because we choose a cipher suite\n                 *      only if there is a matching hash.) */\n                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA )\n        {\n            /* B: Default hash SHA1 */\n            md_alg = MBEDTLS_MD_SHA1;\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n        {\n            /* C: MD5 + SHA1 */\n            md_alg = MBEDTLS_MD_NONE;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"pick hash algorithm %d for signing\", md_alg ) );\n\n        /*\n         * 3.2: Compute the hash to be signed\n         */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( md_alg == MBEDTLS_MD_NONE )\n        {\n            hashlen = 36;\n            ret = mbedtls_ssl_get_key_exchange_md_ssl_tls( ssl, hash,\n                                                           dig_signed,\n                                                           dig_signed_len );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( md_alg != MBEDTLS_MD_NONE )\n        {\n            /* Info from md_alg will be used instead */\n            hashlen = 0;\n            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash,\n                                                          dig_signed,\n                                                          dig_signed_len,\n                                                          md_alg );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"parameters hash\", hash, hashlen != 0 ? hashlen :\n            (unsigned int) ( mbedtls_md_get_size( mbedtls_md_info_from_type( md_alg ) ) ) );\n\n        /*\n         * 3.3: Compute and add the signature\n         */\n        if( mbedtls_ssl_own_key( ssl ) == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no private key\" ) );\n            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n        }\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            /*\n             * For TLS 1.2, we need to specify signature and hash algorithm\n             * explicitly through a prefix to the signature.\n             *\n             * struct {\n             *    HashAlgorithm hash;\n             *    SignatureAlgorithm signature;\n             * } SignatureAndHashAlgorithm;\n             *\n             * struct {\n             *    SignatureAndHashAlgorithm algorithm;\n             *    opaque signature<0..2^16-1>;\n             * } DigitallySigned;\n             *\n             */\n\n            *(p++) = mbedtls_ssl_hash_from_md_alg( md_alg );\n            *(p++) = mbedtls_ssl_sig_from_pk_alg( sig_alg );\n\n            n += 2;\n        }\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n        if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash, hashlen,\n                        p + 2 , &signature_len, ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_sign\", ret );\n            return( ret );\n        }\n\n        *(p++) = (unsigned char)( signature_len >> 8 );\n        *(p++) = (unsigned char)( signature_len      );\n        n += 2;\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"my signature\", p, signature_len );\n\n        n += signature_len;\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n\n    /* Done with actual work; add header and send. */\n\n    ssl->out_msglen  = 4 + n;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE;\n\n    ssl->state++;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write server key exchange\" ) );\n\n    return( 0 );\n}\n\nstatic int ssl_write_server_hello_done( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write server hello done\" ) );\n\n    ssl->out_msglen  = 4;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_HELLO_DONE;\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_send_flight_completed( ssl );\n#endif\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write server hello done\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\nstatic int ssl_parse_client_dh_public( mbedtls_ssl_context *ssl, unsigned char **p,\n                                       const unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t n;\n\n    /*\n     * Receive G^Y mod P, premaster = (G^Y)^X mod P\n     */\n    if( *p + 2 > end )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    n = ( (*p)[0] << 8 ) | (*p)[1];\n    *p += 2;\n\n    if( *p + n > end )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    if( ( ret = mbedtls_dhm_read_public( &ssl->handshake->dhm_ctx, *p, n ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_read_public\", ret );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );\n    }\n\n    *p += n;\n\n    MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: GY\", &ssl->handshake->dhm_ctx.GY );\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED) ||                           \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\nstatic int ssl_parse_encrypted_pms( mbedtls_ssl_context *ssl,\n                                    const unsigned char *p,\n                                    const unsigned char *end,\n                                    size_t pms_offset )\n{\n    int ret;\n    size_t len = mbedtls_pk_get_len( mbedtls_ssl_own_key( ssl ) );\n    unsigned char *pms = ssl->handshake->premaster + pms_offset;\n    unsigned char ver[2];\n    unsigned char fake_pms[48], peer_pms[48];\n    unsigned char mask;\n    size_t i, peer_pmslen;\n    unsigned int diff;\n\n    if( ! mbedtls_pk_can_do( mbedtls_ssl_own_key( ssl ), MBEDTLS_PK_RSA ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no RSA private key\" ) );\n        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n    }\n\n    /*\n     * Decrypt the premaster using own private RSA key\n     */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        if( *p++ != ( ( len >> 8 ) & 0xFF ) ||\n            *p++ != ( ( len      ) & 0xFF ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n        }\n    }\n#endif\n\n    if( p + len != end )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    mbedtls_ssl_write_version( ssl->handshake->max_major_ver,\n                       ssl->handshake->max_minor_ver,\n                       ssl->conf->transport, ver );\n\n    /*\n     * Protection against Bleichenbacher's attack: invalid PKCS#1 v1.5 padding\n     * must not cause the connection to end immediately; instead, send a\n     * bad_record_mac later in the handshake.\n     * Also, avoid data-dependant branches here to protect against\n     * timing-based variants.\n     */\n    ret = ssl->conf->f_rng( ssl->conf->p_rng, fake_pms, sizeof( fake_pms ) );\n    if( ret != 0 )\n        return( ret );\n\n    ret = mbedtls_pk_decrypt( mbedtls_ssl_own_key( ssl ), p, len,\n                      peer_pms, &peer_pmslen,\n                      sizeof( peer_pms ),\n                      ssl->conf->f_rng, ssl->conf->p_rng );\n\n    diff  = (unsigned int) ret;\n    diff |= peer_pmslen ^ 48;\n    diff |= peer_pms[0] ^ ver[0];\n    diff |= peer_pms[1] ^ ver[1];\n\n#if defined(MBEDTLS_SSL_DEBUG_ALL)\n    if( diff != 0 )\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n#endif\n\n    if( sizeof( ssl->handshake->premaster ) < pms_offset ||\n        sizeof( ssl->handshake->premaster ) - pms_offset < 48 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n    ssl->handshake->pmslen = 48;\n\n    /* mask = diff ? 0xff : 0x00 using bit operations to avoid branches */\n    /* MSVC has a warning about unary minus on unsigned, but this is\n     * well-defined and precisely what we want to do here */\n#if defined(_MSC_VER)\n#pragma warning( push )\n#pragma warning( disable : 4146 )\n#endif\n    mask = - ( ( diff | - diff ) >> ( sizeof( unsigned int ) * 8 - 1 ) );\n#if defined(_MSC_VER)\n#pragma warning( pop )\n#endif\n\n    for( i = 0; i < ssl->handshake->pmslen; i++ )\n        pms[i] = ( mask & fake_pms[i] ) | ( (~mask) & peer_pms[i] );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nstatic int ssl_parse_client_psk_identity( mbedtls_ssl_context *ssl, unsigned char **p,\n                                          const unsigned char *end )\n{\n    int ret = 0;\n    size_t n;\n\n    if( ssl->conf->f_psk == NULL &&\n        ( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL ||\n          ssl->conf->psk_identity_len == 0 || ssl->conf->psk_len == 0 ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no pre-shared key\" ) );\n        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n    }\n\n    /*\n     * Receive client pre-shared key identity name\n     */\n    if( end - *p < 2 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    n = ( (*p)[0] << 8 ) | (*p)[1];\n    *p += 2;\n\n    if( n < 1 || n > 65535 || n > (size_t) ( end - *p ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    if( ssl->conf->f_psk != NULL )\n    {\n        if( ssl->conf->f_psk( ssl->conf->p_psk, ssl, *p, n ) != 0 )\n            ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;\n    }\n    else\n    {\n        /* Identity is not a big secret since clients send it in the clear,\n         * but treat it carefully anyway, just in case */\n        if( n != ssl->conf->psk_identity_len ||\n            mbedtls_ssl_safer_memcmp( ssl->conf->psk_identity, *p, n ) != 0 )\n        {\n            ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;\n        }\n    }\n\n    if( ret == MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY )\n    {\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"Unknown PSK identity\", *p, n );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY );\n        return( MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY );\n    }\n\n    *p += n;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\nstatic int ssl_parse_client_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n    unsigned char *p, *end;\n\n    ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse client key exchange\" ) );\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    p = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n    end = ssl->in_msg + ssl->in_hslen;\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA )\n    {\n        if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_dh_public\" ), ret );\n            return( ret );\n        }\n\n        if( p != end )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n        }\n\n        if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,\n                                      ssl->handshake->premaster,\n                                      MBEDTLS_PREMASTER_SIZE,\n                                     &ssl->handshake->pmslen,\n                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_calc_secret\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->handshake->dhm_ctx.K  );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )\n    {\n        if( ( ret = mbedtls_ecdh_read_public( &ssl->handshake->ecdh_ctx,\n                                      p, end - p) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_read_public\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );\n        }\n\n        MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Qp \", &ssl->handshake->ecdh_ctx.Qp );\n\n        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,\n                                      &ssl->handshake->pmslen,\n                                       ssl->handshake->premaster,\n                                       MBEDTLS_MPI_MAX_SIZE,\n                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_calc_secret\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"ECDH: z  \", &ssl->handshake->ecdh_ctx.z );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )\n    {\n        if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_psk_identity\" ), ret );\n            return( ret );\n        }\n\n        if( p != end )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n        }\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n    {\n        if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_psk_identity\" ), ret );\n            return( ret );\n        }\n\n        if( ( ret = ssl_parse_encrypted_pms( ssl, p, end, 2 ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_encrypted_pms\" ), ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n    {\n        if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_psk_identity\" ), ret );\n            return( ret );\n        }\n        if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_dh_public\" ), ret );\n            return( ret );\n        }\n\n        if( p != end )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n        }\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_psk_identity\" ), ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_ecdh_read_public( &ssl->handshake->ecdh_ctx,\n                                       p, end - p ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_read_public\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );\n        }\n\n        MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Qp \", &ssl->handshake->ecdh_ctx.Qp );\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )\n    {\n        if( ( ret = ssl_parse_encrypted_pms( ssl, p, end, 0 ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_parse_encrypted_pms_secret\" ), ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        ret = mbedtls_ecjpake_read_round_two( &ssl->handshake->ecjpake_ctx,\n                                              p, end - p );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_two\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n\n        ret = mbedtls_ecjpake_derive_secret( &ssl->handshake->ecjpake_ctx,\n                ssl->handshake->premaster, 32, &ssl->handshake->pmslen,\n                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_derive_secret\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n        return( ret );\n    }\n\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse client key exchange\" ) );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)       && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)   && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)  && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)&& \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\nstatic int ssl_parse_certificate_verify( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate verify\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n#else\nstatic int ssl_parse_certificate_verify( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t i, sig_len;\n    unsigned char hash[48];\n    unsigned char *hash_start = hash;\n    size_t hashlen;\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    mbedtls_pk_type_t pk_alg;\n#endif\n    mbedtls_md_type_t md_alg;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate verify\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||\n        ssl->session_negotiate->peer_cert == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    /* Read the message without adding it to the checksum */\n    do {\n\n        do ret = mbedtls_ssl_read_record_layer( ssl );\n        while( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );\n\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ssl_read_record_layer\" ), ret );\n            return( ret );\n        }\n\n        ret = mbedtls_ssl_handle_message_type( ssl );\n\n    } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret ||\n             MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );\n\n    if( 0 != ret )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ssl_handle_message_type\" ), ret );\n        return( ret );\n    }\n\n    ssl->state++;\n\n    /* Process the message contents */\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE ||\n        ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE_VERIFY )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate verify message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n    }\n\n    i = mbedtls_ssl_hs_hdr_len( ssl );\n\n    /*\n     *  struct {\n     *     SignatureAndHashAlgorithm algorithm; -- TLS 1.2 only\n     *     opaque signature<0..2^16-1>;\n     *  } DigitallySigned;\n     */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        md_alg = MBEDTLS_MD_NONE;\n        hashlen = 36;\n\n        /* For ECDSA, use SHA-1, not MD-5 + SHA-1 */\n        if( mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,\n                        MBEDTLS_PK_ECDSA ) )\n        {\n            hash_start += 16;\n            hashlen -= 16;\n            md_alg = MBEDTLS_MD_SHA1;\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 ||\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        if( i + 2 > ssl->in_hslen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate verify message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n        }\n\n        /*\n         * Hash\n         */\n        md_alg = mbedtls_ssl_md_alg_from_hash( ssl->in_msg[i] );\n\n        if( md_alg == MBEDTLS_MD_NONE || mbedtls_ssl_set_calc_verify_md( ssl, ssl->in_msg[i] ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"peer not adhering to requested sig_alg\"\n                                \" for verify message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n        }\n\n#if !defined(MBEDTLS_MD_SHA1)\n        if( MBEDTLS_MD_SHA1 == md_alg )\n            hash_start += 16;\n#endif\n\n        /* Info from md_alg will be used instead */\n        hashlen = 0;\n\n        i++;\n\n        /*\n         * Signature\n         */\n        if( ( pk_alg = mbedtls_ssl_pk_alg_from_sig( ssl->in_msg[i] ) )\n                        == MBEDTLS_PK_NONE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"peer not adhering to requested sig_alg\"\n                                \" for verify message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n        }\n\n        /*\n         * Check the certificate's key type matches the signature alg\n         */\n        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"sig_alg doesn't match cert key\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n        }\n\n        i++;\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    if( i + 2 > ssl->in_hslen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate verify message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n    }\n\n    sig_len = ( ssl->in_msg[i] << 8 ) | ssl->in_msg[i+1];\n    i += 2;\n\n    if( i + sig_len != ssl->in_hslen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate verify message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n    }\n\n    /* Calculate hash and verify signature */\n    ssl->handshake->calc_verify( ssl, hash );\n\n    if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,\n                           md_alg, hash_start, hashlen,\n                           ssl->in_msg + i, sig_len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_verify\", ret );\n        return( ret );\n    }\n\n    mbedtls_ssl_update_handshake_status( ssl );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse certificate verify\" ) );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic int ssl_write_new_session_ticket( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t tlen;\n    uint32_t lifetime;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write new session ticket\" ) );\n\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_NEW_SESSION_TICKET;\n\n    /*\n     * struct {\n     *     uint32 ticket_lifetime_hint;\n     *     opaque ticket<0..2^16-1>;\n     * } NewSessionTicket;\n     *\n     * 4  .  7   ticket_lifetime_hint (0 = unspecified)\n     * 8  .  9   ticket_len (n)\n     * 10 .  9+n ticket content\n     */\n\n    if( ( ret = ssl->conf->f_ticket_write( ssl->conf->p_ticket,\n                                ssl->session_negotiate,\n                                ssl->out_msg + 10,\n                                ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN,\n                                &tlen, &lifetime ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_ticket_write\", ret );\n        tlen = 0;\n    }\n\n    ssl->out_msg[4] = ( lifetime >> 24 ) & 0xFF;\n    ssl->out_msg[5] = ( lifetime >> 16 ) & 0xFF;\n    ssl->out_msg[6] = ( lifetime >>  8 ) & 0xFF;\n    ssl->out_msg[7] = ( lifetime       ) & 0xFF;\n\n    ssl->out_msg[8] = (unsigned char)( ( tlen >> 8 ) & 0xFF );\n    ssl->out_msg[9] = (unsigned char)( ( tlen      ) & 0xFF );\n\n    ssl->out_msglen = 10 + tlen;\n\n    /*\n     * Morally equivalent to updating ssl->state, but NewSessionTicket and\n     * ChangeCipherSpec share the same state.\n     */\n    ssl->handshake->new_session_ticket = 0;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write new session ticket\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n/*\n * SSL handshake -- server side -- single step\n */\nint mbedtls_ssl_handshake_server_step( mbedtls_ssl_context *ssl )\n{\n    int ret = 0;\n\n    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"server state: %d\", ssl->state ) );\n\n    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )\n    {\n        if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )\n            return( ret );\n    }\n#endif\n\n    switch( ssl->state )\n    {\n        case MBEDTLS_SSL_HELLO_REQUEST:\n            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;\n            break;\n\n        /*\n         *  <==   ClientHello\n         */\n        case MBEDTLS_SSL_CLIENT_HELLO:\n            ret = ssl_parse_client_hello( ssl );\n            break;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        case MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT:\n            return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );\n#endif\n\n        /*\n         *  ==>   ServerHello\n         *        Certificate\n         *      ( ServerKeyExchange  )\n         *      ( CertificateRequest )\n         *        ServerHelloDone\n         */\n        case MBEDTLS_SSL_SERVER_HELLO:\n            ret = ssl_write_server_hello( ssl );\n            break;\n\n        case MBEDTLS_SSL_SERVER_CERTIFICATE:\n            ret = mbedtls_ssl_write_certificate( ssl );\n            break;\n\n        case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:\n            ret = ssl_write_server_key_exchange( ssl );\n            break;\n\n        case MBEDTLS_SSL_CERTIFICATE_REQUEST:\n            ret = ssl_write_certificate_request( ssl );\n            break;\n\n        case MBEDTLS_SSL_SERVER_HELLO_DONE:\n            ret = ssl_write_server_hello_done( ssl );\n            break;\n\n        /*\n         *  <== ( Certificate/Alert  )\n         *        ClientKeyExchange\n         *      ( CertificateVerify  )\n         *        ChangeCipherSpec\n         *        Finished\n         */\n        case MBEDTLS_SSL_CLIENT_CERTIFICATE:\n            ret = mbedtls_ssl_parse_certificate( ssl );\n            break;\n\n        case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:\n            ret = ssl_parse_client_key_exchange( ssl );\n            break;\n\n        case MBEDTLS_SSL_CERTIFICATE_VERIFY:\n            ret = ssl_parse_certificate_verify( ssl );\n            break;\n\n        case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:\n            ret = mbedtls_ssl_parse_change_cipher_spec( ssl );\n            break;\n\n        case MBEDTLS_SSL_CLIENT_FINISHED:\n            ret = mbedtls_ssl_parse_finished( ssl );\n            break;\n\n        /*\n         *  ==> ( NewSessionTicket )\n         *        ChangeCipherSpec\n         *        Finished\n         */\n        case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n            if( ssl->handshake->new_session_ticket != 0 )\n                ret = ssl_write_new_session_ticket( ssl );\n            else\n#endif\n                ret = mbedtls_ssl_write_change_cipher_spec( ssl );\n            break;\n\n        case MBEDTLS_SSL_SERVER_FINISHED:\n            ret = mbedtls_ssl_write_finished( ssl );\n            break;\n\n        case MBEDTLS_SSL_FLUSH_BUFFERS:\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"handshake: done\" ) );\n            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;\n            break;\n\n        case MBEDTLS_SSL_HANDSHAKE_WRAPUP:\n            mbedtls_ssl_handshake_wrapup( ssl );\n            break;\n\n        default:\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"invalid state %d\", ssl->state ) );\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_SSL_SRV_C */\n","/*\n *  FIPS-180-2 compliant SHA-384/512 implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The SHA-512 Secure Hash Standard was published by NIST in 2002.\n *\n *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n\n#include \"mbedtls/sha512.h\"\n#include \"mbedtls/platform_util.h\"\n\n#if defined(_MSC_VER) || defined(__WATCOMC__)\n  #define UL64(x) x##ui64\n#else\n  #define UL64(x) x##ULL\n#endif\n\n#include <string.h>\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#include <stdlib.h>\n#define mbedtls_printf printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#if !defined(MBEDTLS_SHA512_ALT)\n\n/*\n * 64-bit integer manipulation macros (big endian)\n */\n#ifndef GET_UINT64_BE\n#define GET_UINT64_BE(n,b,i)                            \\\n{                                                       \\\n    (n) = ( (uint64_t) (b)[(i)    ] << 56 )       \\\n        | ( (uint64_t) (b)[(i) + 1] << 48 )       \\\n        | ( (uint64_t) (b)[(i) + 2] << 40 )       \\\n        | ( (uint64_t) (b)[(i) + 3] << 32 )       \\\n        | ( (uint64_t) (b)[(i) + 4] << 24 )       \\\n        | ( (uint64_t) (b)[(i) + 5] << 16 )       \\\n        | ( (uint64_t) (b)[(i) + 6] <<  8 )       \\\n        | ( (uint64_t) (b)[(i) + 7]       );      \\\n}\n#endif /* GET_UINT64_BE */\n\n#ifndef PUT_UINT64_BE\n#define PUT_UINT64_BE(n,b,i)                            \\\n{                                                       \\\n    (b)[(i)    ] = (unsigned char) ( (n) >> 56 );       \\\n    (b)[(i) + 1] = (unsigned char) ( (n) >> 48 );       \\\n    (b)[(i) + 2] = (unsigned char) ( (n) >> 40 );       \\\n    (b)[(i) + 3] = (unsigned char) ( (n) >> 32 );       \\\n    (b)[(i) + 4] = (unsigned char) ( (n) >> 24 );       \\\n    (b)[(i) + 5] = (unsigned char) ( (n) >> 16 );       \\\n    (b)[(i) + 6] = (unsigned char) ( (n) >>  8 );       \\\n    (b)[(i) + 7] = (unsigned char) ( (n)       );       \\\n}\n#endif /* PUT_UINT64_BE */\n\nvoid mbedtls_sha512_init( mbedtls_sha512_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );\n}\n\nvoid mbedtls_sha512_free( mbedtls_sha512_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );\n}\n\nvoid mbedtls_sha512_clone( mbedtls_sha512_context *dst,\n                           const mbedtls_sha512_context *src )\n{\n    *dst = *src;\n}\n\n/*\n * SHA-512 context setup\n */\nint mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )\n{\n    ctx->total[0] = 0;\n    ctx->total[1] = 0;\n\n    if( is384 == 0 )\n    {\n        /* SHA-512 */\n        ctx->state[0] = UL64(0x6A09E667F3BCC908);\n        ctx->state[1] = UL64(0xBB67AE8584CAA73B);\n        ctx->state[2] = UL64(0x3C6EF372FE94F82B);\n        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);\n        ctx->state[4] = UL64(0x510E527FADE682D1);\n        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);\n        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);\n        ctx->state[7] = UL64(0x5BE0CD19137E2179);\n    }\n    else\n    {\n        /* SHA-384 */\n        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);\n        ctx->state[1] = UL64(0x629A292A367CD507);\n        ctx->state[2] = UL64(0x9159015A3070DD17);\n        ctx->state[3] = UL64(0x152FECD8F70E5939);\n        ctx->state[4] = UL64(0x67332667FFC00B31);\n        ctx->state[5] = UL64(0x8EB44A8768581511);\n        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);\n        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);\n    }\n\n    ctx->is384 = is384;\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512_starts( mbedtls_sha512_context *ctx,\n                            int is384 )\n{\n    mbedtls_sha512_starts_ret( ctx, is384 );\n}\n#endif\n\n#if !defined(MBEDTLS_SHA512_PROCESS_ALT)\n\n/*\n * Round constants\n */\nstatic const uint64_t K[80] =\n{\n    UL64(0x428A2F98D728AE22),  UL64(0x7137449123EF65CD),\n    UL64(0xB5C0FBCFEC4D3B2F),  UL64(0xE9B5DBA58189DBBC),\n    UL64(0x3956C25BF348B538),  UL64(0x59F111F1B605D019),\n    UL64(0x923F82A4AF194F9B),  UL64(0xAB1C5ED5DA6D8118),\n    UL64(0xD807AA98A3030242),  UL64(0x12835B0145706FBE),\n    UL64(0x243185BE4EE4B28C),  UL64(0x550C7DC3D5FFB4E2),\n    UL64(0x72BE5D74F27B896F),  UL64(0x80DEB1FE3B1696B1),\n    UL64(0x9BDC06A725C71235),  UL64(0xC19BF174CF692694),\n    UL64(0xE49B69C19EF14AD2),  UL64(0xEFBE4786384F25E3),\n    UL64(0x0FC19DC68B8CD5B5),  UL64(0x240CA1CC77AC9C65),\n    UL64(0x2DE92C6F592B0275),  UL64(0x4A7484AA6EA6E483),\n    UL64(0x5CB0A9DCBD41FBD4),  UL64(0x76F988DA831153B5),\n    UL64(0x983E5152EE66DFAB),  UL64(0xA831C66D2DB43210),\n    UL64(0xB00327C898FB213F),  UL64(0xBF597FC7BEEF0EE4),\n    UL64(0xC6E00BF33DA88FC2),  UL64(0xD5A79147930AA725),\n    UL64(0x06CA6351E003826F),  UL64(0x142929670A0E6E70),\n    UL64(0x27B70A8546D22FFC),  UL64(0x2E1B21385C26C926),\n    UL64(0x4D2C6DFC5AC42AED),  UL64(0x53380D139D95B3DF),\n    UL64(0x650A73548BAF63DE),  UL64(0x766A0ABB3C77B2A8),\n    UL64(0x81C2C92E47EDAEE6),  UL64(0x92722C851482353B),\n    UL64(0xA2BFE8A14CF10364),  UL64(0xA81A664BBC423001),\n    UL64(0xC24B8B70D0F89791),  UL64(0xC76C51A30654BE30),\n    UL64(0xD192E819D6EF5218),  UL64(0xD69906245565A910),\n    UL64(0xF40E35855771202A),  UL64(0x106AA07032BBD1B8),\n    UL64(0x19A4C116B8D2D0C8),  UL64(0x1E376C085141AB53),\n    UL64(0x2748774CDF8EEB99),  UL64(0x34B0BCB5E19B48A8),\n    UL64(0x391C0CB3C5C95A63),  UL64(0x4ED8AA4AE3418ACB),\n    UL64(0x5B9CCA4F7763E373),  UL64(0x682E6FF3D6B2B8A3),\n    UL64(0x748F82EE5DEFB2FC),  UL64(0x78A5636F43172F60),\n    UL64(0x84C87814A1F0AB72),  UL64(0x8CC702081A6439EC),\n    UL64(0x90BEFFFA23631E28),  UL64(0xA4506CEBDE82BDE9),\n    UL64(0xBEF9A3F7B2C67915),  UL64(0xC67178F2E372532B),\n    UL64(0xCA273ECEEA26619C),  UL64(0xD186B8C721C0C207),\n    UL64(0xEADA7DD6CDE0EB1E),  UL64(0xF57D4F7FEE6ED178),\n    UL64(0x06F067AA72176FBA),  UL64(0x0A637DC5A2C898A6),\n    UL64(0x113F9804BEF90DAE),  UL64(0x1B710B35131C471B),\n    UL64(0x28DB77F523047D84),  UL64(0x32CAAB7B40C72493),\n    UL64(0x3C9EBE0A15C9BEBC),  UL64(0x431D67C49C100D4C),\n    UL64(0x4CC5D4BECB3E42B6),  UL64(0x597F299CFC657E2A),\n    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)\n};\n\nint mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,\n                                     const unsigned char data[128] )\n{\n    int i;\n    uint64_t temp1, temp2, W[80];\n    uint64_t A, B, C, D, E, F, G, H;\n\n#define  SHR(x,n) (x >> n)\n#define ROTR(x,n) (SHR(x,n) | (x << (64 - n)))\n\n#define S0(x) (ROTR(x, 1) ^ ROTR(x, 8) ^  SHR(x, 7))\n#define S1(x) (ROTR(x,19) ^ ROTR(x,61) ^  SHR(x, 6))\n\n#define S2(x) (ROTR(x,28) ^ ROTR(x,34) ^ ROTR(x,39))\n#define S3(x) (ROTR(x,14) ^ ROTR(x,18) ^ ROTR(x,41))\n\n#define F0(x,y,z) ((x & y) | (z & (x | y)))\n#define F1(x,y,z) (z ^ (x & (y ^ z)))\n\n#define P(a,b,c,d,e,f,g,h,x,K)                  \\\n{                                               \\\n    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \\\n    temp2 = S2(a) + F0(a,b,c);                  \\\n    d += temp1; h = temp1 + temp2;              \\\n}\n\n    for( i = 0; i < 16; i++ )\n    {\n        GET_UINT64_BE( W[i], data, i << 3 );\n    }\n\n    for( ; i < 80; i++ )\n    {\n        W[i] = S1(W[i -  2]) + W[i -  7] +\n               S0(W[i - 15]) + W[i - 16];\n    }\n\n    A = ctx->state[0];\n    B = ctx->state[1];\n    C = ctx->state[2];\n    D = ctx->state[3];\n    E = ctx->state[4];\n    F = ctx->state[5];\n    G = ctx->state[6];\n    H = ctx->state[7];\n    i = 0;\n\n    do\n    {\n        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;\n        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;\n        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;\n        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;\n        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;\n        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;\n        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;\n        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;\n    }\n    while( i < 80 );\n\n    ctx->state[0] += A;\n    ctx->state[1] += B;\n    ctx->state[2] += C;\n    ctx->state[3] += D;\n    ctx->state[4] += E;\n    ctx->state[5] += F;\n    ctx->state[6] += G;\n    ctx->state[7] += H;\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512_process( mbedtls_sha512_context *ctx,\n                             const unsigned char data[128] )\n{\n    mbedtls_internal_sha512_process( ctx, data );\n}\n#endif\n#endif /* !MBEDTLS_SHA512_PROCESS_ALT */\n\n/*\n * SHA-512 process buffer\n */\nint mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,\n                               const unsigned char *input,\n                               size_t ilen )\n{\n    int ret;\n    size_t fill;\n    unsigned int left;\n\n    if( ilen == 0 )\n        return( 0 );\n\n    left = (unsigned int) (ctx->total[0] & 0x7F);\n    fill = 128 - left;\n\n    ctx->total[0] += (uint64_t) ilen;\n\n    if( ctx->total[0] < (uint64_t) ilen )\n        ctx->total[1]++;\n\n    if( left && ilen >= fill )\n    {\n        memcpy( (void *) (ctx->buffer + left), input, fill );\n\n        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )\n            return( ret );\n\n        input += fill;\n        ilen  -= fill;\n        left = 0;\n    }\n\n    while( ilen >= 128 )\n    {\n        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )\n            return( ret );\n\n        input += 128;\n        ilen  -= 128;\n    }\n\n    if( ilen > 0 )\n        memcpy( (void *) (ctx->buffer + left), input, ilen );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512_update( mbedtls_sha512_context *ctx,\n                            const unsigned char *input,\n                            size_t ilen )\n{\n    mbedtls_sha512_update_ret( ctx, input, ilen );\n}\n#endif\n\nstatic const unsigned char sha512_padding[128] =\n{\n 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n};\n\n/*\n * SHA-512 final digest\n */\nint mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,\n                               unsigned char output[64] )\n{\n    int ret;\n    size_t last, padn;\n    uint64_t high, low;\n    unsigned char msglen[16];\n\n    high = ( ctx->total[0] >> 61 )\n         | ( ctx->total[1] <<  3 );\n    low  = ( ctx->total[0] <<  3 );\n\n    PUT_UINT64_BE( high, msglen, 0 );\n    PUT_UINT64_BE( low,  msglen, 8 );\n\n    last = (size_t)( ctx->total[0] & 0x7F );\n    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );\n\n    if( ( ret = mbedtls_sha512_update_ret( ctx, sha512_padding, padn ) ) != 0 )\n            return( ret );\n\n    if( ( ret = mbedtls_sha512_update_ret( ctx, msglen, 16 ) ) != 0 )\n            return( ret );\n\n    PUT_UINT64_BE( ctx->state[0], output,  0 );\n    PUT_UINT64_BE( ctx->state[1], output,  8 );\n    PUT_UINT64_BE( ctx->state[2], output, 16 );\n    PUT_UINT64_BE( ctx->state[3], output, 24 );\n    PUT_UINT64_BE( ctx->state[4], output, 32 );\n    PUT_UINT64_BE( ctx->state[5], output, 40 );\n\n    if( ctx->is384 == 0 )\n    {\n        PUT_UINT64_BE( ctx->state[6], output, 48 );\n        PUT_UINT64_BE( ctx->state[7], output, 56 );\n    }\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512_finish( mbedtls_sha512_context *ctx,\n                            unsigned char output[64] )\n{\n    mbedtls_sha512_finish_ret( ctx, output );\n}\n#endif\n\n#endif /* !MBEDTLS_SHA512_ALT */\n\n/*\n * output = SHA-512( input buffer )\n */\nint mbedtls_sha512_ret( const unsigned char *input,\n                    size_t ilen,\n                    unsigned char output[64],\n                    int is384 )\n{\n    int ret;\n    mbedtls_sha512_context ctx;\n\n    mbedtls_sha512_init( &ctx );\n\n    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )\n        goto exit;\n\nexit:\n    mbedtls_sha512_free( &ctx );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512( const unsigned char *input,\n                     size_t ilen,\n                     unsigned char output[64],\n                     int is384 )\n{\n    mbedtls_sha512_ret( input, ilen, output, is384 );\n}\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n\n/*\n * FIPS-180-2 test vectors\n */\nstatic const unsigned char sha512_test_buf[3][113] =\n{\n    { \"abc\" },\n    { \"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\"\n      \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\" },\n    { \"\" }\n};\n\nstatic const size_t sha512_test_buflen[3] =\n{\n    3, 112, 1000\n};\n\nstatic const unsigned char sha512_test_sum[6][64] =\n{\n    /*\n     * SHA-384 test vectors\n     */\n    { 0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B,\n      0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50, 0x07,\n      0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63,\n      0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF, 0x5B, 0xED,\n      0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23,\n      0x58, 0xBA, 0xEC, 0xA1, 0x34, 0xC8, 0x25, 0xA7 },\n    { 0x09, 0x33, 0x0C, 0x33, 0xF7, 0x11, 0x47, 0xE8,\n      0x3D, 0x19, 0x2F, 0xC7, 0x82, 0xCD, 0x1B, 0x47,\n      0x53, 0x11, 0x1B, 0x17, 0x3B, 0x3B, 0x05, 0xD2,\n      0x2F, 0xA0, 0x80, 0x86, 0xE3, 0xB0, 0xF7, 0x12,\n      0xFC, 0xC7, 0xC7, 0x1A, 0x55, 0x7E, 0x2D, 0xB9,\n      0x66, 0xC3, 0xE9, 0xFA, 0x91, 0x74, 0x60, 0x39 },\n    { 0x9D, 0x0E, 0x18, 0x09, 0x71, 0x64, 0x74, 0xCB,\n      0x08, 0x6E, 0x83, 0x4E, 0x31, 0x0A, 0x4A, 0x1C,\n      0xED, 0x14, 0x9E, 0x9C, 0x00, 0xF2, 0x48, 0x52,\n      0x79, 0x72, 0xCE, 0xC5, 0x70, 0x4C, 0x2A, 0x5B,\n      0x07, 0xB8, 0xB3, 0xDC, 0x38, 0xEC, 0xC4, 0xEB,\n      0xAE, 0x97, 0xDD, 0xD8, 0x7F, 0x3D, 0x89, 0x85 },\n\n    /*\n     * SHA-512 test vectors\n     */\n    { 0xDD, 0xAF, 0x35, 0xA1, 0x93, 0x61, 0x7A, 0xBA,\n      0xCC, 0x41, 0x73, 0x49, 0xAE, 0x20, 0x41, 0x31,\n      0x12, 0xE6, 0xFA, 0x4E, 0x89, 0xA9, 0x7E, 0xA2,\n      0x0A, 0x9E, 0xEE, 0xE6, 0x4B, 0x55, 0xD3, 0x9A,\n      0x21, 0x92, 0x99, 0x2A, 0x27, 0x4F, 0xC1, 0xA8,\n      0x36, 0xBA, 0x3C, 0x23, 0xA3, 0xFE, 0xEB, 0xBD,\n      0x45, 0x4D, 0x44, 0x23, 0x64, 0x3C, 0xE8, 0x0E,\n      0x2A, 0x9A, 0xC9, 0x4F, 0xA5, 0x4C, 0xA4, 0x9F },\n    { 0x8E, 0x95, 0x9B, 0x75, 0xDA, 0xE3, 0x13, 0xDA,\n      0x8C, 0xF4, 0xF7, 0x28, 0x14, 0xFC, 0x14, 0x3F,\n      0x8F, 0x77, 0x79, 0xC6, 0xEB, 0x9F, 0x7F, 0xA1,\n      0x72, 0x99, 0xAE, 0xAD, 0xB6, 0x88, 0x90, 0x18,\n      0x50, 0x1D, 0x28, 0x9E, 0x49, 0x00, 0xF7, 0xE4,\n      0x33, 0x1B, 0x99, 0xDE, 0xC4, 0xB5, 0x43, 0x3A,\n      0xC7, 0xD3, 0x29, 0xEE, 0xB6, 0xDD, 0x26, 0x54,\n      0x5E, 0x96, 0xE5, 0x5B, 0x87, 0x4B, 0xE9, 0x09 },\n    { 0xE7, 0x18, 0x48, 0x3D, 0x0C, 0xE7, 0x69, 0x64,\n      0x4E, 0x2E, 0x42, 0xC7, 0xBC, 0x15, 0xB4, 0x63,\n      0x8E, 0x1F, 0x98, 0xB1, 0x3B, 0x20, 0x44, 0x28,\n      0x56, 0x32, 0xA8, 0x03, 0xAF, 0xA9, 0x73, 0xEB,\n      0xDE, 0x0F, 0xF2, 0x44, 0x87, 0x7E, 0xA6, 0x0A,\n      0x4C, 0xB0, 0x43, 0x2C, 0xE5, 0x77, 0xC3, 0x1B,\n      0xEB, 0x00, 0x9C, 0x5C, 0x2C, 0x49, 0xAA, 0x2E,\n      0x4E, 0xAD, 0xB2, 0x17, 0xAD, 0x8C, 0xC0, 0x9B }\n};\n\n/*\n * Checkup routine\n */\nint mbedtls_sha512_self_test( int verbose )\n{\n    int i, j, k, buflen, ret = 0;\n    unsigned char *buf;\n    unsigned char sha512sum[64];\n    mbedtls_sha512_context ctx;\n\n    buf = mbedtls_calloc( 1024, sizeof(unsigned char) );\n    if( NULL == buf )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"Buffer allocation failed\\n\" );\n\n        return( 1 );\n    }\n\n    mbedtls_sha512_init( &ctx );\n\n    for( i = 0; i < 6; i++ )\n    {\n        j = i % 3;\n        k = i < 3;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  SHA-%d test #%d: \", 512 - k * 128, j + 1 );\n\n        if( ( ret = mbedtls_sha512_starts_ret( &ctx, k ) ) != 0 )\n            goto fail;\n\n        if( j == 2 )\n        {\n            memset( buf, 'a', buflen = 1000 );\n\n            for( j = 0; j < 1000; j++ )\n            {\n                ret = mbedtls_sha512_update_ret( &ctx, buf, buflen );\n                if( ret != 0 )\n                    goto fail;\n            }\n        }\n        else\n        {\n            ret = mbedtls_sha512_update_ret( &ctx, sha512_test_buf[j],\n                                             sha512_test_buflen[j] );\n            if( ret != 0 )\n                goto fail;\n        }\n\n        if( ( ret = mbedtls_sha512_finish_ret( &ctx, sha512sum ) ) != 0 )\n            goto fail;\n\n        if( memcmp( sha512sum, sha512_test_sum[i], 64 - k * 16 ) != 0 )\n        {\n            ret = 1;\n            goto fail;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    goto exit;\n\nfail:\n    if( verbose != 0 )\n        mbedtls_printf( \"failed\\n\" );\n\nexit:\n    mbedtls_sha512_free( &ctx );\n    mbedtls_free( buf );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_SHA512_C */\n","/**\n * \\file ssl_ciphersuites.c\n *\n * \\brief SSL ciphersuites for mbed TLS\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SSL_TLS_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#endif\n\n#include \"mbedtls/ssl_ciphersuites.h\"\n#include \"mbedtls/ssl.h\"\n\n#include <string.h>\n\n/*\n * Ordered from most preferred to least preferred in terms of security.\n *\n * Current rule (except rc4, weak and null which come last):\n * 1. By key exchange:\n *    Forward-secure non-PSK > forward-secure PSK > ECJPAKE > other non-PSK > other PSK\n * 2. By key length and cipher:\n *    AES-256 > Camellia-256 > ARIA-256 > AES-128 > Camellia-128 > ARIA-128 > 3DES\n * 3. By cipher mode when relevant GCM > CCM > CBC > CCM_8\n * 4. By hash function used when relevant\n * 5. By key exchange/auth again: EC > non-EC\n */\nstatic const int ciphersuite_preference[] =\n{\n#if defined(MBEDTLS_SSL_CIPHERSUITES)\n    MBEDTLS_SSL_CIPHERSUITES,\n#else\n    /* All AES-256 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8,\n\n    /* All CAMELLIA-256 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,\n\n    /* All ARIA-256 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384,\n\n    /* All AES-128 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8,\n\n    /* All CAMELLIA-128 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,\n\n    /* All ARIA-128 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256,\n\n    /* All remaining >= 128-bit ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,\n\n    /* The PSK ephemeral suites */\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8,\n    MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384,\n\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8,\n    MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256,\n\n    MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA,\n\n    /* The ECJPAKE suite */\n    MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8,\n\n    /* All AES-256 suites */\n    MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_WITH_AES_256_CCM,\n    MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8,\n\n    /* All CAMELLIA-256 suites */\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,\n\n    /* All ARIA-256 suites */\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384,\n    MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384,\n\n    /* All AES-128 suites */\n    MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_WITH_AES_128_CCM,\n    MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8,\n\n    /* All CAMELLIA-128 suites */\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,\n\n    /* All ARIA-128 suites */\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256,\n\n    /* All remaining >= 128-bit suites */\n    MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,\n\n    /* The RSA PSK suites */\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384,\n\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256,\n\n    MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA,\n\n    /* The PSK suites */\n    MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_PSK_WITH_AES_256_CCM,\n    MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8,\n    MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384,\n    MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384,\n\n    MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_PSK_WITH_AES_128_CCM,\n    MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8,\n    MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256,\n    MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256,\n\n    MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA,\n\n    /* RC4 suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_RSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_RSA_WITH_RC4_128_MD5,\n    MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_PSK_WITH_RC4_128_SHA,\n\n    /* Weak suites */\n    MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA,\n    MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA,\n\n    /* NULL suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA,\n\n    MBEDTLS_TLS_RSA_WITH_NULL_SHA256,\n    MBEDTLS_TLS_RSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_RSA_WITH_NULL_MD5,\n    MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA,\n    MBEDTLS_TLS_PSK_WITH_NULL_SHA384,\n    MBEDTLS_TLS_PSK_WITH_NULL_SHA256,\n    MBEDTLS_TLS_PSK_WITH_NULL_SHA,\n\n#endif /* MBEDTLS_SSL_CIPHERSUITES */\n    0\n};\n\nstatic const mbedtls_ssl_ciphersuite_t ciphersuite_definitions[] =\n{\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, \"TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, \"TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, \"TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, \"TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, \"TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, \"TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA512_C */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM, \"TLS-ECDHE-ECDSA-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8, \"TLS-ECDHE-ECDSA-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM, \"TLS-ECDHE-ECDSA-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8, \"TLS-ECDHE-ECDSA-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDHE-ECDSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDHE-ECDSA-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-ECDHE-ECDSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-ECDHE-ECDSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDHE-ECDSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, \"TLS-ECDHE-ECDSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA, \"TLS-ECDHE-ECDSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, \"TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, \"TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, \"TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, \"TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, \"TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, \"TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDHE-RSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDHE-RSA-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-ECDHE-RSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-ECDHE-RSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA, \"TLS-ECDHE-RSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA, \"TLS-ECDHE-RSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA512_C) && defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, \"TLS-DHE-RSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C && MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, \"TLS-DHE-RSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, \"TLS-DHE-RSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, \"TLS-DHE-RSA-WITH-AES-256-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA, \"TLS-DHE-RSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA, \"TLS-DHE-RSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM, \"TLS-DHE-RSA-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8, \"TLS-DHE-RSA-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM, \"TLS-DHE-RSA-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8, \"TLS-DHE-RSA-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256, \"TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA, \"TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA, \"TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-DHE-RSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-DHE-RSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA, \"TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA512_C) && defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384, \"TLS-RSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C && MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256, \"TLS-RSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256, \"TLS-RSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256, \"TLS-RSA-WITH-AES-256-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA, \"TLS-RSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA, \"TLS-RSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_RSA_WITH_AES_256_CCM, \"TLS-RSA-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8, \"TLS-RSA-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_RSA_WITH_AES_128_CCM, \"TLS-RSA-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8, \"TLS-RSA-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256, \"TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA, \"TLS-RSA-WITH-CAMELLIA-128-CBC-SHA\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA, \"TLS-RSA-WITH-CAMELLIA-256-CBC-SHA\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-RSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-RSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA, \"TLS-RSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_MD5_C)\n    { MBEDTLS_TLS_RSA_WITH_RC4_128_MD5, \"TLS-RSA-WITH-RC4-128-MD5\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_MD5, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_RC4_128_SHA, \"TLS-RSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, \"TLS-ECDH-RSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, \"TLS-ECDH-RSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, \"TLS-ECDH-RSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, \"TLS-ECDH-RSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, \"TLS-ECDH-RSA-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, \"TLS-ECDH-RSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDH-RSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDH-RSA-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-ECDH-RSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-ECDH-RSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDH-RSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA, \"TLS-ECDH-RSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA, \"TLS-ECDH-RSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, \"TLS-ECDH-ECDSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, \"TLS-ECDH-ECDSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, \"TLS-ECDH-ECDSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, \"TLS-ECDH-ECDSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, \"TLS-ECDH-ECDSA-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, \"TLS-ECDH-ECDSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDH-ECDSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDH-ECDSA-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-ECDH-ECDSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-ECDH-ECDSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDH-ECDSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA, \"TLS-ECDH-ECDSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA, \"TLS-ECDH-ECDSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256, \"TLS-PSK-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384, \"TLS-PSK-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256, \"TLS-PSK-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384, \"TLS-PSK-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA, \"TLS-PSK-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA, \"TLS-PSK-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_256_CCM, \"TLS-PSK-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8, \"TLS-PSK-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_PSK_WITH_AES_128_CCM, \"TLS-PSK-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8, \"TLS-PSK-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-PSK-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-PSK-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-PSK-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-PSK-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA, \"TLS-PSK-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_PSK_WITH_RC4_128_SHA, \"TLS-PSK-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256, \"TLS-DHE-PSK-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, \"TLS-DHE-PSK-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256, \"TLS-DHE-PSK-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384, \"TLS-DHE-PSK-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA, \"TLS-DHE-PSK-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA, \"TLS-DHE-PSK-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM, \"TLS-DHE-PSK-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8, \"TLS-DHE-PSK-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM, \"TLS-DHE-PSK-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8, \"TLS-DHE-PSK-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-DHE-PSK-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-DHE-PSK-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-DHE-PSK-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-DHE-PSK-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA, \"TLS-DHE-PSK-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA, \"TLS-DHE-PSK-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n#if defined(MBEDTLS_AES_C)\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256, \"TLS-ECDHE-PSK-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384, \"TLS-ECDHE-PSK-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA, \"TLS-ECDHE-PSK-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA, \"TLS-ECDHE-PSK-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDHE-PSK-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDHE-PSK-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDHE-PSK-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA, \"TLS-ECDHE-PSK-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256, \"TLS-RSA-PSK-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, \"TLS-RSA-PSK-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256, \"TLS-RSA-PSK-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384, \"TLS-RSA-PSK-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA, \"TLS-RSA-PSK-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA, \"TLS-RSA-PSK-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-RSA-PSK-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-RSA-PSK-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-RSA-PSK-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-RSA-PSK-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA, \"TLS-RSA-PSK-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA, \"TLS-RSA-PSK-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8, \"TLS-ECJPAKE-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECJPAKE,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_ENABLE_WEAK_CIPHERSUITES)\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n#if defined(MBEDTLS_MD5_C)\n    { MBEDTLS_TLS_RSA_WITH_NULL_MD5, \"TLS-RSA-WITH-NULL-MD5\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_MD5, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_NULL_SHA, \"TLS-RSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_WITH_NULL_SHA256, \"TLS-RSA-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_PSK_WITH_NULL_SHA, \"TLS-PSK-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_NULL_SHA256, \"TLS-PSK-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_NULL_SHA384, \"TLS-PSK-WITH-NULL-SHA384\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA, \"TLS-DHE-PSK-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256, \"TLS-DHE-PSK-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384, \"TLS-DHE-PSK-WITH-NULL-SHA384\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA, \"TLS-ECDHE-PSK-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256, \"TLS-ECDHE-PSK-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384, \"TLS-ECDHE-PSK-WITH-NULL-SHA384\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA, \"TLS-RSA-PSK-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256, \"TLS-RSA-PSK-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384, \"TLS-RSA-PSK-WITH-NULL-SHA384\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA, \"TLS-DHE-RSA-WITH-DES-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA, \"TLS-RSA-WITH-DES-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n#endif /* MBEDTLS_ENABLE_WEAK_CIPHERSUITES */\n\n#if defined(MBEDTLS_ARIA_C)\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-RSA-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-RSA-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-RSA-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-RSA-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-RSA-PSK-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-RSA-PSK-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-RSA-PSK-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-RSA-PSK-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-PSK-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384,MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-PSK-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-PSK-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-PSK-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-ECDH-RSA-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-ECDH-RSA-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-ECDH-RSA-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-ECDH-RSA-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-ECDHE-RSA-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-ECDHE-RSA-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-ECDHE-PSK-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-ECDHE-PSK-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-ECDHE-ECDSA-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-ECDHE-ECDSA-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-ECDH-ECDSA-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-ECDH-ECDSA-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-ECDH-ECDSA-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-ECDH-ECDSA-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-DHE-RSA-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-DHE-RSA-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384,\n             \"TLS-DHE-PSK-WITH-ARIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA512_C))\n    { MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384,\n             \"TLS-DHE-PSK-WITH-ARIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_ARIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_GCM_C) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256,\n             \"TLS-DHE-PSK-WITH-ARIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n#if (defined(MBEDTLS_CIPHER_MODE_CBC) && defined(MBEDTLS_SHA256_C))\n    { MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256,\n             \"TLS-DHE-PSK-WITH-ARIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_ARIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif\n\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#endif /* MBEDTLS_ARIA_C */\n\n\n    { 0, \"\",\n      MBEDTLS_CIPHER_NONE, MBEDTLS_MD_NONE, MBEDTLS_KEY_EXCHANGE_NONE,\n      0, 0, 0, 0, 0 }\n};\n\n#if defined(MBEDTLS_SSL_CIPHERSUITES)\nconst int *mbedtls_ssl_list_ciphersuites( void )\n{\n    return( ciphersuite_preference );\n}\n#else\n#define MAX_CIPHERSUITES    sizeof( ciphersuite_definitions     ) /         \\\n                            sizeof( ciphersuite_definitions[0]  )\nstatic int supported_ciphersuites[MAX_CIPHERSUITES];\nstatic int supported_init = 0;\n\nconst int *mbedtls_ssl_list_ciphersuites( void )\n{\n    /*\n     * On initial call filter out all ciphersuites not supported by current\n     * build based on presence in the ciphersuite_definitions.\n     */\n    if( supported_init == 0 )\n    {\n        const int *p;\n        int *q;\n\n        for( p = ciphersuite_preference, q = supported_ciphersuites;\n             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;\n             p++ )\n        {\n#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)\n            const mbedtls_ssl_ciphersuite_t *cs_info;\n            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&\n                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )\n#else\n            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )\n#endif\n                *(q++) = *p;\n        }\n        *q = 0;\n\n        supported_init = 1;\n    }\n\n    return( supported_ciphersuites );\n}\n#endif /* MBEDTLS_SSL_CIPHERSUITES */\n\nconst mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_string(\n                                                const char *ciphersuite_name )\n{\n    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;\n\n    if( NULL == ciphersuite_name )\n        return( NULL );\n\n    while( cur->id != 0 )\n    {\n        if( 0 == strcmp( cur->name, ciphersuite_name ) )\n            return( cur );\n\n        cur++;\n    }\n\n    return( NULL );\n}\n\nconst mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )\n{\n    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;\n\n    while( cur->id != 0 )\n    {\n        if( cur->id == ciphersuite )\n            return( cur );\n\n        cur++;\n    }\n\n    return( NULL );\n}\n\nconst char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )\n{\n    const mbedtls_ssl_ciphersuite_t *cur;\n\n    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );\n\n    if( cur == NULL )\n        return( \"unknown\" );\n\n    return( cur->name );\n}\n\nint mbedtls_ssl_get_ciphersuite_id( const char *ciphersuite_name )\n{\n    const mbedtls_ssl_ciphersuite_t *cur;\n\n    cur = mbedtls_ssl_ciphersuite_from_string( ciphersuite_name );\n\n    if( cur == NULL )\n        return( 0 );\n\n    return( cur->id );\n}\n\n#if defined(MBEDTLS_PK_C)\nmbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:\n            return( MBEDTLS_PK_RSA );\n\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n            return( MBEDTLS_PK_ECDSA );\n\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n            return( MBEDTLS_PK_ECKEY );\n\n        default:\n            return( MBEDTLS_PK_NONE );\n    }\n}\n\nmbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_alg( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n            return( MBEDTLS_PK_RSA );\n\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n            return( MBEDTLS_PK_ECDSA );\n\n        default:\n            return( MBEDTLS_PK_NONE );\n    }\n}\n\n#endif /* MBEDTLS_PK_C */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)\nint mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nint mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:\n        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#endif /* MBEDTLS_SSL_TLS_C */\n","/*\n *  Helper functions for the RSA module\n *\n *  Copyright (C) 2006-2017, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n *\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_RSA_C)\n\n#include \"mbedtls/rsa.h\"\n#include \"mbedtls/bignum.h\"\n#include \"mbedtls/rsa_internal.h\"\n\n/*\n * Compute RSA prime factors from public and private exponents\n *\n * Summary of algorithm:\n * Setting F := lcm(P-1,Q-1), the idea is as follows:\n *\n * (a) For any 1 <= X < N with gcd(X,N)=1, we have X^F = 1 modulo N, so X^(F/2)\n *     is a square root of 1 in Z/NZ. Since Z/NZ ~= Z/PZ x Z/QZ by CRT and the\n *     square roots of 1 in Z/PZ and Z/QZ are +1 and -1, this leaves the four\n *     possibilities X^(F/2) = (+-1, +-1). If it happens that X^(F/2) = (-1,+1)\n *     or (+1,-1), then gcd(X^(F/2) + 1, N) will be equal to one of the prime\n *     factors of N.\n *\n * (b) If we don't know F/2 but (F/2) * K for some odd (!) K, then the same\n *     construction still applies since (-)^K is the identity on the set of\n *     roots of 1 in Z/NZ.\n *\n * The public and private key primitives (-)^E and (-)^D are mutually inverse\n * bijections on Z/NZ if and only if (-)^(DE) is the identity on Z/NZ, i.e.\n * if and only if DE - 1 is a multiple of F, say DE - 1 = F * L.\n * Splitting L = 2^t * K with K odd, we have\n *\n *   DE - 1 = FL = (F/2) * (2^(t+1)) * K,\n *\n * so (F / 2) * K is among the numbers\n *\n *   (DE - 1) >> 1, (DE - 1) >> 2, ..., (DE - 1) >> ord\n *\n * where ord is the order of 2 in (DE - 1).\n * We can therefore iterate through these numbers apply the construction\n * of (a) and (b) above to attempt to factor N.\n *\n */\nint mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,\n                     mbedtls_mpi const *E, mbedtls_mpi const *D,\n                     mbedtls_mpi *P, mbedtls_mpi *Q )\n{\n    int ret = 0;\n\n    uint16_t attempt;  /* Number of current attempt  */\n    uint16_t iter;     /* Number of squares computed in the current attempt */\n\n    uint16_t order;    /* Order of 2 in DE - 1 */\n\n    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */\n    mbedtls_mpi K;  /* Temporary holding the current candidate */\n\n    const unsigned char primes[] = { 2,\n           3,    5,    7,   11,   13,   17,   19,   23,\n          29,   31,   37,   41,   43,   47,   53,   59,\n          61,   67,   71,   73,   79,   83,   89,   97,\n         101,  103,  107,  109,  113,  127,  131,  137,\n         139,  149,  151,  157,  163,  167,  173,  179,\n         181,  191,  193,  197,  199,  211,  223,  227,\n         229,  233,  239,  241,  251\n    };\n\n    const size_t num_primes = sizeof( primes ) / sizeof( *primes );\n\n    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||\n        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||\n        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||\n        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||\n        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )\n    {\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n    }\n\n    /*\n     * Initializations and temporary changes\n     */\n\n    mbedtls_mpi_init( &K );\n    mbedtls_mpi_init( &T );\n\n    /* T := DE - 1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );\n\n    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )\n    {\n        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    /* After this operation, T holds the largest odd divisor of DE - 1. */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );\n\n    /*\n     * Actual work\n     */\n\n    /* Skip trying 2 if N == 1 mod 8 */\n    attempt = 0;\n    if( N->p[0] % 8 == 1 )\n        attempt = 1;\n\n    for( ; attempt < num_primes; ++attempt )\n    {\n        mbedtls_mpi_lset( &K, primes[attempt] );\n\n        /* Check if gcd(K,N) = 1 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );\n        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )\n            continue;\n\n        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...\n         * and check whether they have nontrivial GCD with N. */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,\n                             Q /* temporarily use Q for storing Montgomery\n                                * multiplication helper values */ ) );\n\n        for( iter = 1; iter <= order; ++iter )\n        {\n            /* If we reach 1 prematurely, there's no point\n             * in continuing to square K */\n            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )\n                break;\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );\n\n            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&\n                mbedtls_mpi_cmp_mpi( P, N ) == -1 )\n            {\n                /*\n                 * Have found a nontrivial divisor P of N.\n                 * Set Q := N / P.\n                 */\n\n                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );\n                goto cleanup;\n            }\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );\n        }\n\n        /*\n         * If we get here, then either we prematurely aborted the loop because\n         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must\n         * be 1 if D,E,N were consistent.\n         * Check if that's the case and abort if not, to avoid very long,\n         * yet eventually failing, computations if N,D,E were not sane.\n         */\n        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )\n        {\n            break;\n        }\n    }\n\n    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;\n\ncleanup:\n\n    mbedtls_mpi_free( &K );\n    mbedtls_mpi_free( &T );\n    return( ret );\n}\n\n/*\n * Given P, Q and the public exponent E, deduce D.\n * This is essentially a modular inversion.\n */\nint mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,\n                                         mbedtls_mpi const *Q,\n                                         mbedtls_mpi const *E,\n                                         mbedtls_mpi *D )\n{\n    int ret = 0;\n    mbedtls_mpi K, L;\n\n    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||\n        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||\n        mbedtls_mpi_cmp_int( E, 0 ) == 0 )\n    {\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n    }\n\n    mbedtls_mpi_init( &K );\n    mbedtls_mpi_init( &L );\n\n    /* Temporarily put K := P-1 and L := Q-1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );\n\n    /* Temporarily put D := gcd(P-1, Q-1) */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );\n\n    /* K := LCM(P-1, Q-1) */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );\n\n    /* Compute modular inverse of E in LCM(P-1, Q-1) */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &K );\n    mbedtls_mpi_free( &L );\n\n    return( ret );\n}\n\n/*\n * Check that RSA CRT parameters are in accordance with core parameters.\n */\nint mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,\n                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,\n                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )\n{\n    int ret = 0;\n\n    mbedtls_mpi K, L;\n    mbedtls_mpi_init( &K );\n    mbedtls_mpi_init( &L );\n\n    /* Check that DP - D == 0 mod P - 1 */\n    if( DP != NULL )\n    {\n        if( P == NULL )\n        {\n            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );\n\n        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\n    /* Check that DQ - D == 0 mod Q - 1 */\n    if( DQ != NULL )\n    {\n        if( Q == NULL )\n        {\n            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );\n\n        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\n    /* Check that QP * Q - 1 == 0 mod P */\n    if( QP != NULL )\n    {\n        if( P == NULL || Q == NULL )\n        {\n            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );\n        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\ncleanup:\n\n    /* Wrap MPI error codes by RSA check failure error code */\n    if( ret != 0 &&\n        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&\n        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )\n    {\n        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n    }\n\n    mbedtls_mpi_free( &K );\n    mbedtls_mpi_free( &L );\n\n    return( ret );\n}\n\n/*\n * Check that core RSA parameters are sane.\n */\nint mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,\n                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,\n                                 const mbedtls_mpi *E,\n                                 int (*f_rng)(void *, unsigned char *, size_t),\n                                 void *p_rng )\n{\n    int ret = 0;\n    mbedtls_mpi K, L;\n\n    mbedtls_mpi_init( &K );\n    mbedtls_mpi_init( &L );\n\n    /*\n     * Step 1: If PRNG provided, check that P and Q are prime\n     */\n\n#if defined(MBEDTLS_GENPRIME)\n    if( f_rng != NULL && P != NULL &&\n        ( ret = mbedtls_mpi_is_prime( P, f_rng, p_rng ) ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n        goto cleanup;\n    }\n\n    if( f_rng != NULL && Q != NULL &&\n        ( ret = mbedtls_mpi_is_prime( Q, f_rng, p_rng ) ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n        goto cleanup;\n    }\n#else\n    ((void) f_rng);\n    ((void) p_rng);\n#endif /* MBEDTLS_GENPRIME */\n\n    /*\n     * Step 2: Check that 1 < N = P * Q\n     */\n\n    if( P != NULL && Q != NULL && N != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );\n        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||\n            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\n    /*\n     * Step 3: Check and 1 < D, E < N if present.\n     */\n\n    if( N != NULL && D != NULL && E != NULL )\n    {\n        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||\n             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||\n             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||\n             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\n    /*\n     * Step 4: Check that D, E are inverse modulo P-1 and Q-1\n     */\n\n    if( P != NULL && Q != NULL && D != NULL && E != NULL )\n    {\n        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||\n            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n\n        /* Compute DE-1 mod P-1 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );\n        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n\n        /* Compute DE-1 mod Q-1 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );\n        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &K );\n    mbedtls_mpi_free( &L );\n\n    /* Wrap MPI error codes by RSA check failure error code */\n    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )\n    {\n        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n    }\n\n    return( ret );\n}\n\nint mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,\n                            const mbedtls_mpi *D, mbedtls_mpi *DP,\n                            mbedtls_mpi *DQ, mbedtls_mpi *QP )\n{\n    int ret = 0;\n    mbedtls_mpi K;\n    mbedtls_mpi_init( &K );\n\n    /* DP = D mod P-1 */\n    if( DP != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );\n    }\n\n    /* DQ = D mod Q-1 */\n    if( DQ != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );\n    }\n\n    /* QP = Q^{-1} mod P */\n    if( QP != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );\n    }\n\ncleanup:\n    mbedtls_mpi_free( &K );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_RSA_C */\n","/*\n *  FIPS-180-2 compliant SHA-256 implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The SHA-256 Secure Hash Standard was published by NIST in 2002.\n *\n *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n\n#include \"mbedtls/sha256.h\"\n#include \"mbedtls/platform_util.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#include <stdlib.h>\n#define mbedtls_printf printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#if !defined(MBEDTLS_SHA256_ALT)\n\n/*\n * 32-bit integer manipulation macros (big endian)\n */\n#ifndef GET_UINT32_BE\n#define GET_UINT32_BE(n,b,i)                            \\\ndo {                                                    \\\n    (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \\\n        | ( (uint32_t) (b)[(i) + 1] << 16 )             \\\n        | ( (uint32_t) (b)[(i) + 2] <<  8 )             \\\n        | ( (uint32_t) (b)[(i) + 3]       );            \\\n} while( 0 )\n#endif\n\n#ifndef PUT_UINT32_BE\n#define PUT_UINT32_BE(n,b,i)                            \\\ndo {                                                    \\\n    (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \\\n    (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \\\n    (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \\\n    (b)[(i) + 3] = (unsigned char) ( (n)       );       \\\n} while( 0 )\n#endif\n\nvoid mbedtls_sha256_init( mbedtls_sha256_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );\n}\n\nvoid mbedtls_sha256_free( mbedtls_sha256_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );\n}\n\nvoid mbedtls_sha256_clone( mbedtls_sha256_context *dst,\n                           const mbedtls_sha256_context *src )\n{\n    *dst = *src;\n}\n\n/*\n * SHA-256 context setup\n */\nint mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )\n{\n    ctx->total[0] = 0;\n    ctx->total[1] = 0;\n\n    if( is224 == 0 )\n    {\n        /* SHA-256 */\n        ctx->state[0] = 0x6A09E667;\n        ctx->state[1] = 0xBB67AE85;\n        ctx->state[2] = 0x3C6EF372;\n        ctx->state[3] = 0xA54FF53A;\n        ctx->state[4] = 0x510E527F;\n        ctx->state[5] = 0x9B05688C;\n        ctx->state[6] = 0x1F83D9AB;\n        ctx->state[7] = 0x5BE0CD19;\n    }\n    else\n    {\n        /* SHA-224 */\n        ctx->state[0] = 0xC1059ED8;\n        ctx->state[1] = 0x367CD507;\n        ctx->state[2] = 0x3070DD17;\n        ctx->state[3] = 0xF70E5939;\n        ctx->state[4] = 0xFFC00B31;\n        ctx->state[5] = 0x68581511;\n        ctx->state[6] = 0x64F98FA7;\n        ctx->state[7] = 0xBEFA4FA4;\n    }\n\n    ctx->is224 = is224;\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256_starts( mbedtls_sha256_context *ctx,\n                            int is224 )\n{\n    mbedtls_sha256_starts_ret( ctx, is224 );\n}\n#endif\n\n#if !defined(MBEDTLS_SHA256_PROCESS_ALT)\nstatic const uint32_t K[] =\n{\n    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2,\n};\n\n#define  SHR(x,n) ((x & 0xFFFFFFFF) >> n)\n#define ROTR(x,n) (SHR(x,n) | (x << (32 - n)))\n\n#define S0(x) (ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3))\n#define S1(x) (ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))\n\n#define S2(x) (ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22))\n#define S3(x) (ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25))\n\n#define F0(x,y,z) ((x & y) | (z & (x | y)))\n#define F1(x,y,z) (z ^ (x & (y ^ z)))\n\n#define R(t)                                    \\\n(                                               \\\n    W[t] = S1(W[t -  2]) + W[t -  7] +          \\\n           S0(W[t - 15]) + W[t - 16]            \\\n)\n\n#define P(a,b,c,d,e,f,g,h,x,K)                  \\\n{                                               \\\n    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \\\n    temp2 = S2(a) + F0(a,b,c);                  \\\n    d += temp1; h = temp1 + temp2;              \\\n}\n\nint mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,\n                                const unsigned char data[64] )\n{\n    uint32_t temp1, temp2, W[64];\n    uint32_t A[8];\n    unsigned int i;\n\n    for( i = 0; i < 8; i++ )\n        A[i] = ctx->state[i];\n\n#if defined(MBEDTLS_SHA256_SMALLER)\n    for( i = 0; i < 64; i++ )\n    {\n        if( i < 16 )\n            GET_UINT32_BE( W[i], data, 4 * i );\n        else\n            R( i );\n\n        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );\n\n        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];\n        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;\n    }\n#else /* MBEDTLS_SHA256_SMALLER */\n    for( i = 0; i < 16; i++ )\n        GET_UINT32_BE( W[i], data, 4 * i );\n\n    for( i = 0; i < 16; i += 8 )\n    {\n        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );\n        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );\n        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );\n        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );\n        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );\n        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );\n        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );\n        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );\n    }\n\n    for( i = 16; i < 64; i += 8 )\n    {\n        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );\n        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );\n        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );\n        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );\n        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );\n        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );\n        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );\n        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );\n    }\n#endif /* MBEDTLS_SHA256_SMALLER */\n\n    for( i = 0; i < 8; i++ )\n        ctx->state[i] += A[i];\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256_process( mbedtls_sha256_context *ctx,\n                             const unsigned char data[64] )\n{\n    mbedtls_internal_sha256_process( ctx, data );\n}\n#endif\n#endif /* !MBEDTLS_SHA256_PROCESS_ALT */\n\n/*\n * SHA-256 process buffer\n */\nint mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,\n                               const unsigned char *input,\n                               size_t ilen )\n{\n    int ret;\n    size_t fill;\n    uint32_t left;\n\n    if( ilen == 0 )\n        return( 0 );\n\n    left = ctx->total[0] & 0x3F;\n    fill = 64 - left;\n\n    ctx->total[0] += (uint32_t) ilen;\n    ctx->total[0] &= 0xFFFFFFFF;\n\n    if( ctx->total[0] < (uint32_t) ilen )\n        ctx->total[1]++;\n\n    if( left && ilen >= fill )\n    {\n        memcpy( (void *) (ctx->buffer + left), input, fill );\n\n        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )\n            return( ret );\n\n        input += fill;\n        ilen  -= fill;\n        left = 0;\n    }\n\n    while( ilen >= 64 )\n    {\n        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )\n            return( ret );\n\n        input += 64;\n        ilen  -= 64;\n    }\n\n    if( ilen > 0 )\n        memcpy( (void *) (ctx->buffer + left), input, ilen );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256_update( mbedtls_sha256_context *ctx,\n                            const unsigned char *input,\n                            size_t ilen )\n{\n    mbedtls_sha256_update_ret( ctx, input, ilen );\n}\n#endif\n\nstatic const unsigned char sha256_padding[64] =\n{\n 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n};\n\n/*\n * SHA-256 final digest\n */\nint mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,\n                               unsigned char output[32] )\n{\n    int ret;\n    uint32_t last, padn;\n    uint32_t high, low;\n    unsigned char msglen[8];\n\n    high = ( ctx->total[0] >> 29 )\n         | ( ctx->total[1] <<  3 );\n    low  = ( ctx->total[0] <<  3 );\n\n    PUT_UINT32_BE( high, msglen, 0 );\n    PUT_UINT32_BE( low,  msglen, 4 );\n\n    last = ctx->total[0] & 0x3F;\n    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );\n\n    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_sha256_update_ret( ctx, msglen, 8 ) ) != 0 )\n        return( ret );\n\n    PUT_UINT32_BE( ctx->state[0], output,  0 );\n    PUT_UINT32_BE( ctx->state[1], output,  4 );\n    PUT_UINT32_BE( ctx->state[2], output,  8 );\n    PUT_UINT32_BE( ctx->state[3], output, 12 );\n    PUT_UINT32_BE( ctx->state[4], output, 16 );\n    PUT_UINT32_BE( ctx->state[5], output, 20 );\n    PUT_UINT32_BE( ctx->state[6], output, 24 );\n\n    if( ctx->is224 == 0 )\n        PUT_UINT32_BE( ctx->state[7], output, 28 );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256_finish( mbedtls_sha256_context *ctx,\n                            unsigned char output[32] )\n{\n    mbedtls_sha256_finish_ret( ctx, output );\n}\n#endif\n\n#endif /* !MBEDTLS_SHA256_ALT */\n\n/*\n * output = SHA-256( input buffer )\n */\nint mbedtls_sha256_ret( const unsigned char *input,\n                        size_t ilen,\n                        unsigned char output[32],\n                        int is224 )\n{\n    int ret;\n    mbedtls_sha256_context ctx;\n\n    mbedtls_sha256_init( &ctx );\n\n    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )\n        goto exit;\n\nexit:\n    mbedtls_sha256_free( &ctx );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256( const unsigned char *input,\n                     size_t ilen,\n                     unsigned char output[32],\n                     int is224 )\n{\n    mbedtls_sha256_ret( input, ilen, output, is224 );\n}\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n/*\n * FIPS-180-2 test vectors\n */\nstatic const unsigned char sha256_test_buf[3][57] =\n{\n    { \"abc\" },\n    { \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\" },\n    { \"\" }\n};\n\nstatic const size_t sha256_test_buflen[3] =\n{\n    3, 56, 1000\n};\n\nstatic const unsigned char sha256_test_sum[6][32] =\n{\n    /*\n     * SHA-224 test vectors\n     */\n    { 0x23, 0x09, 0x7D, 0x22, 0x34, 0x05, 0xD8, 0x22,\n      0x86, 0x42, 0xA4, 0x77, 0xBD, 0xA2, 0x55, 0xB3,\n      0x2A, 0xAD, 0xBC, 0xE4, 0xBD, 0xA0, 0xB3, 0xF7,\n      0xE3, 0x6C, 0x9D, 0xA7 },\n    { 0x75, 0x38, 0x8B, 0x16, 0x51, 0x27, 0x76, 0xCC,\n      0x5D, 0xBA, 0x5D, 0xA1, 0xFD, 0x89, 0x01, 0x50,\n      0xB0, 0xC6, 0x45, 0x5C, 0xB4, 0xF5, 0x8B, 0x19,\n      0x52, 0x52, 0x25, 0x25 },\n    { 0x20, 0x79, 0x46, 0x55, 0x98, 0x0C, 0x91, 0xD8,\n      0xBB, 0xB4, 0xC1, 0xEA, 0x97, 0x61, 0x8A, 0x4B,\n      0xF0, 0x3F, 0x42, 0x58, 0x19, 0x48, 0xB2, 0xEE,\n      0x4E, 0xE7, 0xAD, 0x67 },\n\n    /*\n     * SHA-256 test vectors\n     */\n    { 0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,\n      0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,\n      0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,\n      0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD },\n    { 0x24, 0x8D, 0x6A, 0x61, 0xD2, 0x06, 0x38, 0xB8,\n      0xE5, 0xC0, 0x26, 0x93, 0x0C, 0x3E, 0x60, 0x39,\n      0xA3, 0x3C, 0xE4, 0x59, 0x64, 0xFF, 0x21, 0x67,\n      0xF6, 0xEC, 0xED, 0xD4, 0x19, 0xDB, 0x06, 0xC1 },\n    { 0xCD, 0xC7, 0x6E, 0x5C, 0x99, 0x14, 0xFB, 0x92,\n      0x81, 0xA1, 0xC7, 0xE2, 0x84, 0xD7, 0x3E, 0x67,\n      0xF1, 0x80, 0x9A, 0x48, 0xA4, 0x97, 0x20, 0x0E,\n      0x04, 0x6D, 0x39, 0xCC, 0xC7, 0x11, 0x2C, 0xD0 }\n};\n\n/*\n * Checkup routine\n */\nint mbedtls_sha256_self_test( int verbose )\n{\n    int i, j, k, buflen, ret = 0;\n    unsigned char *buf;\n    unsigned char sha256sum[32];\n    mbedtls_sha256_context ctx;\n\n    buf = mbedtls_calloc( 1024, sizeof(unsigned char) );\n    if( NULL == buf )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"Buffer allocation failed\\n\" );\n\n        return( 1 );\n    }\n\n    mbedtls_sha256_init( &ctx );\n\n    for( i = 0; i < 6; i++ )\n    {\n        j = i % 3;\n        k = i < 3;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  SHA-%d test #%d: \", 256 - k * 32, j + 1 );\n\n        if( ( ret = mbedtls_sha256_starts_ret( &ctx, k ) ) != 0 )\n            goto fail;\n\n        if( j == 2 )\n        {\n            memset( buf, 'a', buflen = 1000 );\n\n            for( j = 0; j < 1000; j++ )\n            {\n                ret = mbedtls_sha256_update_ret( &ctx, buf, buflen );\n                if( ret != 0 )\n                    goto fail;\n            }\n\n        }\n        else\n        {\n            ret = mbedtls_sha256_update_ret( &ctx, sha256_test_buf[j],\n                                             sha256_test_buflen[j] );\n            if( ret != 0 )\n                 goto fail;\n        }\n\n        if( ( ret = mbedtls_sha256_finish_ret( &ctx, sha256sum ) ) != 0 )\n            goto fail;\n\n\n        if( memcmp( sha256sum, sha256_test_sum[i], 32 - k * 4 ) != 0 )\n        {\n            ret = 1;\n            goto fail;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    goto exit;\n\nfail:\n    if( verbose != 0 )\n        mbedtls_printf( \"failed\\n\" );\n\nexit:\n    mbedtls_sha256_free( &ctx );\n    mbedtls_free( buf );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_SHA256_C */\n"]}