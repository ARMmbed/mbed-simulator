{"version":3,"sources":["/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/easy-connect/EthernetInterface.cpp","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/easy-connect/EthernetInterface.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/netsocket/NetworkStack.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-http/http_parser/http_parser.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/aes.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/asn1parse.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/asn1write.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/base64.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/bignum.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/debug.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ecdh.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ecdsa.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ecp.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/error.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ccm.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/cipher.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/inc/mbedtls/cipher.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/cipher_wrap.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ctr_drbg.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ssl_srv.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/inc/mbedtls/ssl_internal.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ssl_cli.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/gcm.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/hmac_drbg.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/md.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/md_wrap.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/oid.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/pem.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/pk.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/pk_wrap.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/pkparse.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/rsa.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/rsa_internal.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/sha256.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/sha512.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ssl_ciphersuites.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/inc/mbedtls/ssl_ciphersuites.h","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ecp_curves.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/entropy.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/entropy_poll.c","/Users/janjon01/repos/mbed-simulator/mbed-simulator-hal/mbed-os/features/mbedtls/src/ssl_tls.c"],"names":[],"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;AACA;AAAA;AADA;;AAGA;;AACA;;;;;;;;;;;;;;;;AAKA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;;AAGA;AAAA;AACA;AAAA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;AAKA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;;;AAEA;AAAA;;;;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAKA;;;;AAEA;;;;AAEA;;;;AAEA;;;;;;;;;;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;AAAA;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAAA;;;;;;;;;;;;;;;AAKA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;AAAA;;AAAA;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AACA;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;;;AAAA;;AAAA;;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;AACA;;AAAA;;;;;;;AAAA;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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A;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAOA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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;;;;;;;;;;AAsDA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;;;;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;;;AAAA;;;;;AAAA;;;;;;;;;;AAIA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAnRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;;;;;;;;;;;;;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AAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;;;;;;;AASA;AAAA;AAAA;AADA;AACA;AADA;AACA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;AAAA;;;AAAA;;AAAA;;;;;;AAAA;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;AAAA;;AAAA;;;;;;;AACA;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA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AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAEA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;AAAA;;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AACA;AAAA;AAAA;;;;;AAAA;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AfuvCA;;;;;;AACA;;;;;;AAGA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAKA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;AAGA;AAAA;;AAEA;AAAA;AAAA;;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;;;;;AAEA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;AAEA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;;;;;AACA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AACA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AACA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAOA;;;;AADA;;;;;;;;;AAGA;;;;;;AAEA;;;;;;AAAA;;;;;;;;;;;;;AAGA;;;;AACA;;;;;;;;;;AAGA;;;;AACA;;;;;;;;AACA;;;;;;AADA;;;;;;AAEA;;;;;;;;;;;;;AAIA;;;;AACA;;;;;;;;;;;AACA;;;;AAEA;;;;;;;;;;AAAA;;;;AACA;;;;;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;;;;;;;;;;;;;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1BA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;AAAA;;AAAA;;;AAMA;AACA;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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AA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;;;;;;;AAAA;AAAA;;;;;AAeA;;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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AAAA;;;;;;AAAA;;;;;;;;AACA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;AAOA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;AAGA;AADA;;AAGA;AAAA;AAAA;;AADA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;;;;;;;;AACA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;;;;;AAEA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;;;;;;;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;;;;;AACA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AACA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AACA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAOA;;;;AACA;;;;;;;;;AACA;;;;;;AAGA;;;;;;AACA;;;;;;;;;;;;;AACA;;;;AACA;;;;;;;;;;AAGA;;;;AACA;;;;;;;;AACA;;;;;;AACA;;;;;;AADA;;;;;;;;;;;;;AAKA;;;;AACA;;;;;;;;;;;AAAA;;;;AAGA;;;;;;;;;;AAAA;;;;AACA;;;;;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAIA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAKA;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAZA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;A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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;;;;;;;AAAA;AAAA;;;;;AAeA;;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;;;;;;AAAA;AAAA;;;;;AAWA;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA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;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AAGA;AAAA;;;;AAGA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AAGA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AAGA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;;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;;;;;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;AAqNA;AAAA;AAGA;AAAA;;;AACA;;;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;AAjBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnNA;;;;AAAA;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;;;AAAA;;;;AAAA;;;;;;;;;;AAAA;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;AAAA;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAySA;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAUA;;;AAiCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AA5WA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;AA4XA;;;;;AC5OA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A1BnBA;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;AAAA;;;;;;;;;AAAA;;;;;;AAAA;;;;;AAAA;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;A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AA;AACA;AAAA;AACA;AAAA;AAmBA;AAAA;;AAGA;AAAA;AAAA;;;AAEA;AAAA;;;;;;AACA;AA9BA;;;;AAGA;AACA;AAAA;AACA;AAAA;;;;;AAwBA;AAAA;;;;;;;;;AAEA;;AA7QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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;AAWA;;;;;;;;;;;;;;;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AACA;;;AAIA;;;;;;;AAMA;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AASA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtLA;AAAA;AAAA;;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;AAAA;;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;;;;;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;AAMA;;;;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAHA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AA0BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5BA;;;;AA+BA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhCA;;;;AA2BA;AACA;;;;;AAKA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATA;;;;;;;;;;;AAMA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAEA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AMy5BA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;AAQA;;;;;;;;;;;;;;;;AC5tBA;AAAA;AD6tBA;;;;;;;;;;;;;;;;;;;;;AArBA;AAAA;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5tBA;AAAA;AAAA;AAAA;ADsuBA;;AAEA;;;;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAEA;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;;;;;ACxvBA;AAAA;AAAA;AAAA;ADyvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA;AAAA;;;;;AAOA;AAAA;;;;;;;;;;;;;AAMA;AAAA;AAAA;;AAQA;AAAA;;;AANA;AAAA;AAAA;AAAA;;;;;AAaA;AAAA;AACA;AAAA;AAAA;;;AAOA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;;;;;;;;;AAEA;;;;;ACvyBA;AAAA;AAAA;AAAA;AD6yBA;AACA;AAuBA;;AAEA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AADA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;;AAEA;AACA;;;;;;AAEA;AAAA;;;;;;;;;;AAMA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;AACA;AAAA;AADA;;AAGA;;AACA;;;;;;;;;;;;;;;;AAKA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;AAKA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;;;AAEA;AAAA;;;;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAOA;;;AALA;;;;;;;;;;;;AAoBA;;;AAJA;;;;;;;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AAAA;;AACA;AADA;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AAAA;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;;AA2BA;;;AAEA;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;AAQA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AP1HA;AAAA;;;;;AAGA;;;;;;AAqGA;;;AAEA;AAQA;;;AACA;;;AA7EA;AACA;AACA;AAEA;;;AAAA;;AAAA;;;;AACA;;;AAAA;;;;;;AAAA;AAAA;AACA;;;AAAA;;;AAAA;;AAAA;;;AACA;;;AAAA;;;;;;AAAA;AAAA;AACA;;;AAAA;;;AAAA;;AAAA;;;;AACA;;;AAAA;;;AAAA;;;AACA;;;;AAAA;;AAAA;;;AAAA;;;AACA;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;;;;;;;;;;;AACA;AAAA;;AACA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;AACA;AAAA;AAAA;;;;;AAqtKA;AAAA;;;;;AACA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAzpCA;AACA;AACA;AAi0CA;;AAz3CA;;;AA+6CA;;AA56CA;AAAA;;;AA46CA;;;AApWA;AACA;AAGA;AAAA;AAAA;;AAQA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAUA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;;;;AAAA;AAAA;AAEA;;;;;;;;;;AAEA;AAAA;AACA;;;;AAjhCA;AAAA;;;AACA;AAAA;AAAA;;AACA;AAAA;AAs2BA;;;;;;;AAKA;AACA;AA92BA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AA42BA;;;;;AAIA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;;;;;;;;;;;AAEA;AACA;AA92BA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AA42BA;;;;;;;;;AAEA;;;;;;AAAA;AADA;;;;;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAUA;;;;;;;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;AACA;AAAA;;;AAHA;;;;;;;;;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;AA9OA;AAAA;AAGA;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;AADA;AAAA;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAXA;AAAA;;;;;;;;AA75BA;AACA;AAAA;AACA;AAAA;AAqhCA;AAAA;AApCA;AAAA;AAAA;AAGA;;;AA5YA;;;;;AA4YA;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAHA;;;;;AAAA;;;;;;;;;;;;;AA/YA;AAGA;AAAA;AAAA;;AAmZA;AAlZA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;AAwaA;;AACA;AAAA;AAAA;;AACA;;AA7MA;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAKA;;;;;;;AAAA;;;;;;AAEA;AAAA;;;;AACA;AAAA;;;;;;AAEA;;;;;AAAA;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AAGA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAGA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;;;AAGA;AAAA;AAkLA;;;;;;;;;;AAEA;AAAA;;;;;;AAEA;;;;;;;AAAA;;;;;AACA;AAAA;AAxbA;AAGA;AAAA;;AAmZA;AAlZA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;AAgbA;;;;;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;AAAA;;;;;;AAEA;;;;;;;AAAA;;;;;AACA;AAAA;AA5CA;AAAA;AAAA;;;AAKA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAHA;;;;;AAAA;;;;;;;AA/YA;AAGA;AAAA;;AAmZA;AAlZA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AAGA;AAgbA;;;;;;AACA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3/BA;AACA;;;;AAikBA;AAGA;AAAA;AAAA;AAAA;;;;;;AAEA;;;;AAGA;AA8hBA;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;;AAEA;AAAA;;;;;AAlnCA;;;AAGA;AACA;AACA;;AA6mCA;AAAA;;;;;;;;;AAEA;;;;;;;;;;;AAjnCA;AACA;AAAA;AACA;;;;;;;;;AAu3CA;;;;;;AA/6CA;;;AAinDA;;;AA9mDA;;;;;;;;;;;;;;;AAwlDA;;;AACA;;;;;;AAEA;AAAA;;AAAA;AAHA;AAAA;;;AAsBA;;;;;;;;;;;;;;;;;;AA7CA;;;AApkDA;;;;;;;;;;;AAwjDA;;;;;;;;;;;;;;;;;;;AAtHA;AAMA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAMA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;AACA;AAAA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/jCA;AAAA;AAAA;AAAA;;;;;AAGA;AAAA;;AAAA;;;AAkBA;AAAA;AAAA;;;;;AAjBA;AAAA;;;;AAKA;;AAAA;;;;;;;;;;;;;;AAAA;;;AAYA;;;;AATA;AAAA;;;;AAAA;AAAA;;;;AACA;AAAA;;;;;;;;AAQA;;;AANA;AAAA;;;;;;AAEA;AAAA;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4OA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AAGA;AAAA;;;;AAGA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AAGA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;;;AAAA;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AT9UA;AAAA;AAAA;AAIA;AAAA;;;AAUA;;;;;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;AAAA;;;;AAUA;;AAVA;;;;AAgBA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;AAAA;AACA;AAAA;AAAA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwwBA;AAAA;;;;;;;;;;;;;;;;;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;AAOA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAAA;AAAA;;;;;AACA;AACA;AAAA;AASA;AAAA;AAAA;;;;;;;;;AAMA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAUA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AASA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAWA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;AAAA;;;;;;;;;;;;;;AAtKA;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAeA;AAcA;;;;AACA;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;AAGA;;;AASA;;;;;;;;;;;;;;;;;;;;AAuDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjmBA;AACA;AAAA;;;;;;;AAKA;;;;;;;;;AAMA;;;;;AAKA;;;;;AAIA;AAAA;;;;AAGA;;;;;;AAGA;;;;;;AAGA;;;;;;;;AAQA;AAAA;AAAA;AACA;;;;;;AAIA;;;;AAFA;;;;;AASA;AAAA;AAAA;AACA;;;;;;AAIA;;;;AAFA;;;;;AASA;AAAA;AAAA;AACA;;;;;;AAIA;;;;AAFA;;;;;AASA;AAAA;AAAA;AACA;;;;;;AAIA;;;;AAFA;;;;;AASA;AAAA;AAAA;AACA;;;;;;AAIA;;;;AAFA;;;;;;;;;AAUA;;;;;;;;;;;AApGA;;;;;;;;;;AA6GA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhrBA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;AAQA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;AAWA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;AAWA;AAAA;;;;;;;;;;;;;;;;;;;;;AAoBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;AAmBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AAAA;;;;;AAOA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;;;AAGA;;;;;;;;;;AAmCA;AAAA;;;;;AA/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;AAWA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;AAOA;AAEA;AAAA;;;;AAKA;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8NA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsUA;AAEA;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;AAqPA;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/PA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2OA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnOA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4PA;;;;;;;;;;;;AAKA;;;;;;;;;;;;AA9BA;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;AAvLA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;AAMA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAQA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;AAGA;AAEA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAUA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;;;;AAEA;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AA/lBA;AAGA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;AA4LA;AAEA;AAAA;;;;;;;;;;;;;;;AA59BA;;;;;;;;;;;;;;;;;;;AAzCA;;;;;AAAA;;;;AA6CA;AAAA;;;;;;;;AAYA;AAAA;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtEA;;;;AAsFA;AAAA;;;;;;;;AA0BA;AAAA;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApHA;;;;AAyHA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;AAMA;AAAA;;;;;;;;AAiBA;AAAA;;;;;;;;AAQA;AAAA;;;;;;;;AAUA;AAAA;;;;;;;;AAiBA;AAAA;;;;;;;;AAQA;AAAA;;;;;;;;AAcA;AAAA;;;;;;;;AAsBA;AAAA;;;;;;;;AAUA;AAAA;;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApRA;;;;AA0RA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1RA;;;;AAiSA;AAAA;;;;;;;;AAYA;AAAA;;;;;;;;AAyBA;AAAA;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3UA;;;;AAoVA;AAAA;;;;;;;;AAoCA;AAAA;;;;;;;;AAQA;AAAA;;;;;;;;AAmBA;AAAA;;;;;;;;AAiBA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5bA;;;;AAqcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArcA;;;;AA0cA;AAAA;;;;;;;;AAeA;AAAA;;;;;;;;AAMA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;AAOA;AAAA;;;;;;;;AAiBA;AAAA;;;;;;;;AAQA;AAAA;;;;;;;;AAUA;AAAA;;;;;;;;AAwBA;AAAA;;;;;;;;AAQA;AAAA;;;;;;;;AAWA;AAAA;;;;;;;;AAyBA;AAAA;;;;;;;;AA4IA;;;;;AAKA;AAAA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;;;;;;;;AA6CA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAt1BA;;;;AA41BA;AAAA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;;;;;;;;AAkCA;;;;;AAUA;AAAA;AACA;;;;;;;;AAUA;AAAA;AACA;;;;;;;;AA0GA;AAAA;;;;;;;;AAUA;AAAA;;;;;;;;AAuCA;AAAA;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArlCA;;;;AA4lCA;AAAA;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjmCA;;;;AAymCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;;AA5oCA;;;;AAipCA;;AAjpCA;;;;;;;;;;;;;;;;;;;;;;;;;;AA65CA;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;AArQA;;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AApqCA;;;AAqqCA;;AArqCA;;;;AA0qCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhCA;AAAA;;;;;;;;AAgDA;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlvCA;;;;AAqvCA;;AArvCA;;;;AA2vCA;;;;;AACA;;;;;AAIA;AAAA;;;;;;;;AAaA;;;;;;;;;;;;;;AAmCA;;;;;AAWA;;;;;AACA;AAAA;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAt0CA;;;;AA+0CA;;;;;AACA;;;;;AAkBA;;;;;AACA;;;;;AACA;AAAA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAt2CA;;;;AA02CA;;;;;AACA;AAAA;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA92CA;;;;AAk3CA;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAMA;;;AAAA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;;AAx4CA;;;;;;;;AAy4CA;;;AAAA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;;AAz4CA;;;;;;;;AA04CA;;;AAAA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;;AA14CA;;;;;;;;AA24CA;;;AAAA;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;;AA34CA;;;;;;;;AA44CA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;AA54CA;;;;;;AA84CA;;AA94CA;;;;AAk5CA;;AAGA;;AAr5CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AUhcyCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAIA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5FA;;;;;AAEA;;;;;AAEA;;;;;AAEA;;;;;AAEA;;;;;AA8BA;;;;;AAEA;;;;;AAEA;;;;;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AAEA;;;;;AAEA;;;;;AA6CA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlDA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlDA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlDA;;;;AAEA;;;;AAEA;;;;AAKA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AV4tDA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAIA;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAx4CA;;AAy4CA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAz4CA;;;AA04CA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;AACA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;AAAA;AAAA;;;AA54CA;;;AA84CA;AAAA;AAAA;;;;AAGA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AA7iDA;AAAA;;;;AAOA;AAAA;;;;;;AAWA;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;AAAA;AAAA;AAAA;AAIA;;;;;AAJA;;;;AAgBA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;AAJA;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAIA;AAAA;AAAA;AAAA;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAwEA;;;;;;AAo+CA;;AAAA;AAAA;;;;;AAAA;;;;;;;AAOA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;AAsMA;AAAA;AAAA;AACA;AAGA;AAAA;;;AAHA;;;;AAIA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;AACA;AAAA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;AAtDA;AAAA;;;;;;;;;AAyCA;AAAA;;;AAmBA;AAAA;;;AA6BA;;AAxBA;AAAA;;;;;AAhKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAEA;AAAA;;;;;AAAA;;;;;;;;AACA;;;AA3FA;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AA2HA;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;AAxHA;;;;AAIA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAsFA;AAAA;AAAA;AAAA;;;;;;;AA/EA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;AAeA;AAAA;;;;;;AAqDA;AAGA;;;;;AAFA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;AAjFA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;AAIA;AAAA;AAAA;;;;;;;;;;;;;AA8DA;;;;;AACA;AAAA;AAAA;AAAA;;;;;;;AAlDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAAA;;;;;;;;;AAgLA;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AAjBA;;;AAiBA;;;AAbA;AAAA;;;AAaA;;;AAXA;AAAA;AAAA;AAAA;AAAA;AAGA;;;AAQA;;AAJA;AAAA;;AAIA;;;;;;;;;;;;;;;ACv7DA;AACA;;;;;;AAIA;;AAIA;;;;AAnaA;AAAA;AAAA;AAAA;;;;;;;AAmaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;;;;AA5EA;AAAA;AAAA;AAOA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;;;;;;;;;;;;;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAHA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAVA;AAAA;;;;;;;;AA4DA;;;;;;;AA1CA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;;;AACA;AAJA;AAMA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AAAA;;;;;;;;AA4CA;;;;;;;AAxBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAHA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAHA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AApBA;AAAA;;;;;;;;AA0BA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AA1HA;AAmJA;AAAA;AAAA;AAGA;AAAA;;AAGA;AAAA;AAWA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;;;;;;;;;;;;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAAA;AAFA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAAA;AAFA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAAA;AAFA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;;AAJA;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAnlBA;AAAA;AAAA;AAAA;;;;;;;AAwlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAMA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;;;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;AAsBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA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A;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAMA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAA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AAAA;AAAA;;;;;;;;;AACA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAA;AAAA;;;;;AAAA;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;AAAA;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AAGA;AAAA;;;;AAGA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAAA;;AACA;;AAAA;;;;;AAAA;;;;;;;;;;;;;;ACpsBA;;;AA8CA;AAAA;;;;;;;;;;;;;;;;;;;;;AAlDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;AAAA;;;AACA;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;AACA;;;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;;AAAA;AACA;AAAA;;;;;;AAAA;AAAA;;;;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;AAAA;;;;;;;AAAA;;;;;AAAA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAoDA;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChzgCA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACA;;;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AACA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAXA;AAAA;;;;;;AAAA;AAAA;;;;;AAeA;;AAAA;AAAA;AAAA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA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AA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;AA2DA;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;AAAA;AAFA;;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AADA;AAAA;AAAA;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AH8qCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AAAA;;;;;AACA;AAAA;;;;;;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;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AAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAAA;AAAA;;AACA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;;AACA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAAA;;;;AAAA;AAAA;;AACA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;;;AACA;;;AAAA;;AAAA;;;;;AAAA;;;;AAAA;;;AACA;AAAA;;AAAA;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;AADA;AACA;AADA;;;AAMA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;;;AAAA;;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+sFA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ANxgg5BA;AAAA;;;;AC5tBA;AAAA;AD6tBA;;;AAPA;;;;;;;;;;AAdA;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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AA;AAAA;AAAA;;;;;AAAA;AAAA;;;AAFA;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;AAAA;;;AAAA;AACA;AAAA;;AAAA;;;AAAA;AAAA;;;;;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AADA;AAAA;AAAA;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAEA;;AAAA;;AACA;AAKA;AAAA;AAAA;AAAA;;AAAA;;;;AAAA;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;;AACA;;;AAAA;;;;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAAA;;;AAAA;AAAA;;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AACA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;;;;AAAA;;;AAAA;;;;AAAA;;AAAA;;;;;AAAA;;;;AAAA;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ArBmasFA;;;AAAA;;AAAA;;;;;;;;;;AAEA;;;;AAgCA;;;;;AAAA;;;;;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;;AAsFA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;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A;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ArBiLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AT2UA;AAEA;AAAA;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AA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AADA;;;;;AAAA;;;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AS8xBA;AAAA;;AAAA;AAAA;;A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;;;;;;;;;;AczXA;AAAA;AAAA;;;;;;;;;;;;AHgIA;AAAA;AAAA;;;;;;;;AOqkCA;;;;;;;;;;;;Ad5qCA;;AAGA;;AAEA;;;;;;;AAkCA;;;;;;;;;;;;;;AuB7DA;AAAA;;;;;;;;AAAA;AAAA;;;;;;;;AAAA;AAAA;;;;;;;;AAAA;AAAA;;;;;;;;AAAA;AAAA;;;;;;;;AAAA;AAAA;;;;AvByCA;;AAGA;;AAEA;;;;;;;;;AIysBA;;;;;;;;;;AmBvvBA;AAAA;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AnBy1CA;;;;;;;;;;;;;;;AgBvgBA;;;;;;;;;;AzB6LA;;;;;;;;;;AOsoDA;;;;;;;;;;;;;Aet8EA;;;;;;A/BkvDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AS5wDA;;;;AS6WA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ATsrBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArsCA;;;;;AsByTA;;;;;AFCA;;;;;;;;;;;;;;;;;;;;;;;;;Abi0EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AMrtEA;;;;;;AAjGA;;;;;;;;;;;;;;AJ2lFA;;;;;AT5tDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AY57BA;;;;;AhBqyBA;;;;;;;;;;AJpUA;;;;;AeghBA;;;;;;;;;;;;;;;ATpnCA;;;;;;;;;;;;;;;;;;A8BxJA;AAAA;;;;;;;AAAA;AAAA;;;;;;;AAAA;AAAA;;;;;;;AAAA;AAAA;;;;A5BmBA;;;;;;;AKmFA;;;;;;AANA;;;;;;;;;;;AuBhGA;AAAA;;;;;;;;;;;;;;;;;;;ArBqqFA;;;;;;;;;;;;;;;;;;;;;;;;;;AcjgFA;;;;;;;;;;;ArBmKA;;;;;;;;;;;;;;;;;;;AmBioCA;;;;;;;;;;;;;;;;;;;;AG5vCA;;;;;AAuIA;;;;;AAAA;;;;;AAAA;;;;;AAzIA;;;;;AAAA;;;;;;;;;;;;;;;AbhMA;;;;;;;;;;;;;;;AmB2hBA;;;;;A5BlYA;;;;;;;;;;;;;;;;;;;AS0tEA;;;;;;;;;;;;;;;AAjRA;;;;;AARA;;;;;AAVA;;;;;AAhBA;;;;;ADtiDA;;;;;;;;;;;;;;;;;;;;;;;;;AcxVA;;;;;ADtCA;;;;;;;;;;;;;;;;;;;;;;;;;;AP0LA;;;;;Ad5FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AawPA;;;;;;AAtDA;;;;;;AA3CA;;;;;;AAtDA;;;;;;;;;;;;;;;;;;;AtBs/CA;;;;;AALA;;;;;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AgC1DA;;;;;;;;;;;;;;;;;;AFzxDA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ARoeA;;;;;AAjGA;;;;AbuTA;;;;;;;;;;;;;;AsB3bA;;;;;;;;;AbuiBA;AAAA;;;;;AmBnyBA;;;;;;;;;;AnBwlFA;;;;;ATrkFA;;;;;;;;;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","file":"/Users/janjon01/repos/mbed-simulator/out/https.js","sourcesContent":["#include <stdio.h>\n#include \"EthernetInterface.h\"\n#include \"emscripten.h\"\n#include \"mbed_wait_api.h\"\n\n// NOTE: The wait_ms() calls are to make sure the main thread yields, instead of constantly blocks.\n// This way there's time to flush printf() calls in between network calls.\n\nEthernetInterface::EthernetInterface() {\n    memset(_cbs, 0, sizeof(_cbs));\n}\n\nnsapi_error_t EthernetInterface::set_network(const char *ip_address, const char *netmask, const char *gateway) {\n    printf(\"EthernetInterface::set_network is not supported\\n\");\n\n    return NSAPI_ERROR_OK;\n}\nnsapi_error_t EthernetInterface::set_dhcp(bool dhcp) {\n    printf(\"EthernetInterface::set_dhcp is not supported\\n\");\n\n    return NSAPI_ERROR_OK;\n}\n\nnsapi_error_t EthernetInterface::connect() {\n    // immediately return OK\n    return NSAPI_ERROR_OK;\n}\n\nnsapi_error_t EthernetInterface::disconnect() {\n    return NSAPI_ERROR_OK;\n}\n\nconst char * EthernetInterface::get_mac_address() {\n    const char *ret = (const char*)EM_ASM_INT({\n        return window.MbedJSHal.network.get_mac_address();\n    }, 0);\n    wait_ms(1);\n    return ret;\n}\nconst char * EthernetInterface::get_ip_address() {\n    const char *ret = (const char*)EM_ASM_INT({\n        return window.MbedJSHal.network.get_ip_address();\n    }, 0);\n    wait_ms(1);\n    return ret;\n}\nconst char * EthernetInterface::get_netmask() {\n    const char *ret = (const char*)EM_ASM_INT({\n        return window.MbedJSHal.network.get_netmask();\n    }, 0);\n    wait_ms(1);\n    return ret;\n}\nconst char * EthernetInterface::get_gateway() {\n    return 0;\n}\n\nint EthernetInterface::socket_open(void **handle, nsapi_protocol_t proto) {\n    struct simulated_socket *socket = new struct simulated_socket();\n\n    int socket_id = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_open($0);\n    }, proto);\n\n    if (socket_id == -1) {\n        return -3001;\n    }\n\n    socket->id = socket_id;\n    socket->connected = false;\n    socket->proto = proto;\n\n    *handle = socket;\n\n    wait_ms(1);\n\n    return NSAPI_ERROR_OK;\n}\n\nvoid EthernetInterface::socket_attach(void *handle, void (*callback)(void *), void *data)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n    _cbs[socket->id].callback = callback;\n    _cbs[socket->id].data = data;\n}\n\nint EthernetInterface::socket_close(void *handle)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    int ret = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_close($0);\n    }, socket->id);\n\n    wait_ms(1);\n\n    socket->connected = false;\n    delete socket;\n    return ret;\n}\n\nint EthernetInterface::socket_sendto(void *handle, const SocketAddress &addr, const void *data, unsigned size)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    if (socket->connected && socket->addr != addr) {\n        printf(\"EthernetInterface::socket_sendto trying to send to different address than where connected to\\n\");\n        return NSAPI_ERROR_DEVICE_ERROR;\n    }\n\n    if (!socket->connected) {\n        int err = socket_connect(socket, addr);\n        if (err < 0) {\n            return err;\n        }\n        socket->addr = addr;\n    }\n\n    wait_ms(1);\n\n    return socket_send(socket, data, size);\n}\n\nint EthernetInterface::socket_send(void *handle, const void *data, unsigned size)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    int ret = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_send($0, $1, $2);\n    }, socket->id, (uint32_t)data, size);\n\n    wait_ms(1);\n\n    return ret;\n}\n\nint EthernetInterface::socket_connect(void *handle, const SocketAddress &addr)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    int ret = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_connect($0, $1, $2);\n    }, socket->id, (uint32_t)addr.get_ip_address(), addr.get_port());\n\n    if (ret != 0) {\n        return NSAPI_ERROR_DEVICE_ERROR;\n    }\n\n    wait_ms(1);\n\n    socket->connected = true;\n    return 0;\n}\n\nint EthernetInterface::socket_recvfrom(void *handle, SocketAddress *addr, void *data, unsigned size)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n    int ret = socket_recv(socket, data, size);\n    if (ret >= 0 && addr) {\n        *addr = socket->addr;\n    }\n\n    wait_ms(1);\n\n    return ret;\n}\n\nint EthernetInterface::socket_recv(void *handle, void *data, unsigned size)\n{\n    struct simulated_socket *socket = (struct simulated_socket *)handle;\n\n    int recv = EM_ASM_INT({\n        return window.MbedJSHal.network.socket_recv($0, $1, $2);\n    }, socket->id, (uint32_t)data, size);\n\n    if (recv < 0) {\n        return NSAPI_ERROR_WOULD_BLOCK;\n    }\n\n    wait_ms(1);\n\n    return recv;\n}\n\nint EthernetInterface::socket_bind(void *handle, const SocketAddress &address)\n{\n    return NSAPI_ERROR_UNSUPPORTED;\n}\n\nint EthernetInterface::socket_listen(void *handle, int backlog)\n{\n    return NSAPI_ERROR_UNSUPPORTED;\n}\n\nint EthernetInterface::socket_accept(void *handle, void **socket, SocketAddress *address)\n{\n    return NSAPI_ERROR_UNSUPPORTED;\n}\n\n","/* LWIP implementation of NetworkInterfaceAPI\n * Copyright (c) 2015 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef ETHERNET_INTERFACE_H\n#define ETHERNET_INTERFACE_H\n\n#define IPADDR_STRLEN_MAX   16\n#define MAX_SOCKET_COUNT    100\n\n#include \"nsapi.h\"\n\n// Forward declaration\nclass NetworkStack;\n\nstruct simulated_socket {\n    int id;\n    nsapi_protocol_t proto;\n    bool connected;\n    SocketAddress addr;\n};\n\n/** EthernetInterface class\n *  Implementation of the NetworkStack for LWIP\n */\nclass EthernetInterface : public NetworkInterface, public NetworkStack\n{\npublic:\n    /** EthernetInterface lifetime\n     */\n    EthernetInterface();\n\n    /** Set a static IP address\n     *\n     *  Configures this network interface to use a static IP address.\n     *  Implicitly disables DHCP, which can be enabled in set_dhcp.\n     *  Requires that the network is disconnected.\n     *\n     *  @param address  Null-terminated representation of the local IP address\n     *  @param netmask  Null-terminated representation of the local network mask\n     *  @param gateway  Null-terminated representation of the local gateway\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t set_network(\n            const char *ip_address, const char *netmask, const char *gateway);\n\n    /** Enable or disable DHCP on the network\n     *\n     *  Requires that the network is disconnected\n     *\n     *  @param dhcp     False to disable dhcp (defaults to enabled)\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t set_dhcp(bool dhcp);\n\n    /** Start the interface\n     *  @return             0 on success, negative on failure\n     */\n    virtual nsapi_error_t connect();\n\n    /** Stop the interface\n     *  @return             0 on success, negative on failure\n     */\n    virtual nsapi_error_t disconnect();\n\n    /** Get the local MAC address\n     *\n     *  Provided MAC address is intended for info or debug purposes and\n     *  may not be provided if the underlying network interface does not\n     *  provide a MAC address\n     *\n     *  @return         Null-terminated representation of the local MAC address\n     *                  or null if no MAC address is available\n     */\n    virtual const char *get_mac_address();\n\n    /** Get the local IP address\n     *\n     *  @return         Null-terminated representation of the local IP address\n     *                  or null if no IP address has been recieved\n     */\n    virtual const char *get_ip_address();\n\n    /** Get the local network mask\n     *\n     *  @return         Null-terminated representation of the local network mask\n     *                  or null if no network mask has been recieved\n     */\n    virtual const char *get_netmask();\n\n    /** Get the local gateways\n     *\n     *  @return         Null-terminated representation of the local gateway\n     *                  or null if no network mask has been recieved\n     */\n    virtual const char *get_gateway();\n\n    /** Translates a hostname to an IP address with specific version\n     *\n     *  The hostname may be either a domain name or an IP address. If the\n     *  hostname is an IP address, no network transactions will be performed.\n     *\n     *  If no stack-specific DNS resolution is provided, the hostname\n     *  will be resolve using a UDP socket on the stack.\n     *\n     *  @param address  Destination for the host SocketAddress\n     *  @param host     Hostname to resolve\n     *  @param version  IP version of address to resolve, NSAPI_UNSPEC indicates\n     *                  version is chosen by the stack (defaults to NSAPI_UNSPEC)\n     *  @return         0 on success, negative error code on failure\n     */\n    using NetworkInterface::gethostbyname;\n\nprotected:\n    /** Open a socket\n     *  @param handle       Handle in which to store new socket\n     *  @param proto        Type of socket to open, NSAPI_TCP or NSAPI_UDP\n     *  @return             0 on success, negative on failure\n     */\n    virtual int socket_open(void **handle, nsapi_protocol_t proto);\n\n    /** Close the socket\n     *  @param handle       Socket handle\n     *  @return             0 on success, negative on failure\n     *  @note On failure, any memory associated with the socket must still\n     *        be cleaned up\n     */\n    virtual int socket_close(void *handle);\n\n    /** Bind a server socket to a specific port\n     *  @param handle       Socket handle\n     *  @param address      Local address to listen for incoming connections on\n     *  @return             0 on success, negative on failure.\n     */\n    virtual int socket_bind(void *handle, const SocketAddress &address);\n\n    /** Start listening for incoming connections\n     *  @param handle       Socket handle\n     *  @param backlog      Number of pending connections that can be queued up at any\n     *                      one time [Default: 1]\n     *  @return             0 on success, negative on failure\n     */\n    virtual int socket_listen(void *handle, int backlog);\n\n    /** Connects this TCP socket to the server\n     *  @param handle       Socket handle\n     *  @param address      SocketAddress to connect to\n     *  @return             0 on success, negative on failure\n     */\n    virtual int socket_connect(void *handle, const SocketAddress &address);\n\n    /** Accept a new connection.\n     *  @param handle       Handle in which to store new socket\n     *  @param server       Socket handle to server to accept from\n     *  @return             0 on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_accept(void *handle, void **socket, SocketAddress *address);\n\n    /** Send data to the remote host\n     *  @param handle       Socket handle\n     *  @param data         The buffer to send to the host\n     *  @param size         The length of the buffer to send\n     *  @return             Number of written bytes on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_send(void *handle, const void *data, unsigned size);\n\n    /** Receive data from the remote host\n     *  @param handle       Socket handle\n     *  @param data         The buffer in which to store the data received from the host\n     *  @param size         The maximum length of the buffer\n     *  @return             Number of received bytes on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_recv(void *handle, void *data, unsigned size);\n\n    /** Send a packet to a remote endpoint\n     *  @param handle       Socket handle\n     *  @param address      The remote SocketAddress\n     *  @param data         The packet to be sent\n     *  @param size         The length of the packet to be sent\n     *  @return             The number of written bytes on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_sendto(void *handle, const SocketAddress &address, const void *data, unsigned size);\n\n    /** Receive a packet from a remote endpoint\n     *  @param handle       Socket handle\n     *  @param address      Destination for the remote SocketAddress or null\n     *  @param buffer       The buffer for storing the incoming packet data\n     *                      If a packet is too long to fit in the supplied buffer,\n     *                      excess bytes are discarded\n     *  @param size         The length of the buffer\n     *  @return             The number of received bytes on success, negative on failure\n     *  @note This call is not-blocking, if this call would block, must\n     *        immediately return NSAPI_ERROR_WOULD_WAIT\n     */\n    virtual int socket_recvfrom(void *handle, SocketAddress *address, void *buffer, unsigned size);\n\n    /** Register a callback on state change of the socket\n     *  @param handle       Socket handle\n     *  @param callback     Function to call on state change\n     *  @param data         Argument to pass to callback\n     *  @note Callback may be called in an interrupt context.\n     */\n    virtual void socket_attach(void *handle, void (*callback)(void *), void *data);\n\nprotected:\n    /** Provide access to the underlying stack\n     *\n     *  @return The underlying network stack\n     */\n    virtual NetworkStack *get_stack() {\n        return this;\n    }\n\n    bool _dhcp;\n    char _ip_address[IPADDR_STRLEN_MAX];\n    char _netmask[NSAPI_IPv4_SIZE];\n    char _gateway[NSAPI_IPv4_SIZE];\n\n    struct {\n        void (*callback)(void *);\n        void *data;\n    } _cbs[MAX_SOCKET_COUNT];\n};\n\n\n#endif\n","\n/* NetworkStack\n * Copyright (c) 2015 ARM Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef NETWORK_STACK_H\n#define NETWORK_STACK_H\n\n#include \"nsapi_types.h\"\n#include \"netsocket/SocketAddress.h\"\n#include \"netsocket/NetworkInterface.h\"\n\n\n/** NetworkStack class\n *\n *  Common interface that is shared between hardware that\n *  can connect to a network over IP. By implementing the\n *  NetworkStack, a network stack can be used as a target\n *  for instantiating network sockets.\n *  @addtogroup netsocket\n */\nclass NetworkStack\n{\npublic:\n    virtual ~NetworkStack() {};\n\n    /** Get the local IP address\n     *\n     *  @return         Null-terminated representation of the local IP address\n     *                  or null if not yet connected\n     */\n    virtual const char *get_ip_address() = 0;\n\n    /** Translates a hostname to an IP address with specific version\n     *\n     *  The hostname may be either a domain name or an IP address. If the\n     *  hostname is an IP address, no network transactions will be performed.\n     *\n     *  If no stack-specific DNS resolution is provided, the hostname\n     *  will be resolve using a UDP socket on the stack.\n     *\n     *  @param host     Hostname to resolve\n     *  @param address  Destination for the host SocketAddress\n     *  @param version  IP version of address to resolve, NSAPI_UNSPEC indicates\n     *                  version is chosen by the stack (defaults to NSAPI_UNSPEC)\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t gethostbyname(const char *host,\n            SocketAddress *address, nsapi_version_t version = NSAPI_UNSPEC);\n\n    /** Add a domain name server to list of servers to query\n     *\n     *  @param address  Destination for the host address\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t add_dns_server(const SocketAddress &address);\n\n    /*  Set stack options\n     *\n     *  setstackopt allows an application to pass stack-specific options\n     *  to the underlying stack using stack-specific level and option names,\n     *  or to request generic options using levels from nsapi_stack_level_t.\n     *\n     *  For unsupported options, NSAPI_ERROR_UNSUPPORTED is returned\n     *  and the stack is unmodified.\n     *\n     *  @param level    Stack-specific protocol level or nsapi_stack_level_t\n     *  @param optname  Level-specific option name\n     *  @param optval   Option value\n     *  @param optlen   Length of the option value\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t setstackopt(int level, int optname, const void *optval, unsigned optlen);\n\n    /*  Get stack options\n     *\n     *  getstackopt allows an application to retrieve stack-specific options\n     *  to the underlying stack using stack-specific level and option names,\n     *  or to request generic options using levels from nsapi_stack_level_t.\n     *\n     *  @param level    Stack-specific protocol level or nsapi_stack_level_t\n     *  @param optname  Level-specific option name\n     *  @param optval   Destination for option value\n     *  @param optlen   Length of the option value\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t getstackopt(int level, int optname, void *optval, unsigned *optlen);\n\nprotected:\n    friend class Socket;\n    friend class UDPSocket;\n    friend class TCPSocket;\n    friend class TCPServer;\n\n    /** Opens a socket\n     *\n     *  Creates a network socket and stores it in the specified handle.\n     *  The handle must be passed to following calls on the socket.\n     *\n     *  A stack may have a finite number of sockets, in this case\n     *  NSAPI_ERROR_NO_SOCKET is returned if no socket is available.\n     *\n     *  @param handle   Destination for the handle to a newly created socket\n     *  @param proto    Protocol of socket to open, NSAPI_TCP or NSAPI_UDP\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_open(nsapi_socket_t *handle, nsapi_protocol_t proto) = 0;\n\n    /** Close the socket\n     *\n     *  Closes any open connection and deallocates any memory associated\n     *  with the socket.\n     *\n     *  @param handle   Socket handle\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_close(nsapi_socket_t handle) = 0;\n\n    /** Bind a specific address to a socket\n     *\n     *  Binding a socket specifies the address and port on which to receive\n     *  data. If the IP address is zeroed, only the port is bound.\n     *\n     *  @param handle   Socket handle\n     *  @param address  Local address to bind\n     *  @return         0 on success, negative error code on failure.\n     */\n    virtual nsapi_error_t socket_bind(nsapi_socket_t handle, const SocketAddress &address) = 0;\n\n    /** Listen for connections on a TCP socket\n     *\n     *  Marks the socket as a passive socket that can be used to accept\n     *  incoming connections.\n     *\n     *  @param handle   Socket handle\n     *  @param backlog  Number of pending connections that can be queued\n     *                  simultaneously\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_listen(nsapi_socket_t handle, int backlog) = 0;\n\n    /** Connects TCP socket to a remote host\n     *\n     *  Initiates a connection to a remote server specified by the\n     *  indicated address.\n     *\n     *  @param handle   Socket handle\n     *  @param address  The SocketAddress of the remote host\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_connect(nsapi_socket_t handle, const SocketAddress &address) = 0;\n\n    /** Accepts a connection on a TCP socket\n     *\n     *  The server socket must be bound and set to listen for connections.\n     *  On a new connection, creates a network socket and stores it in the\n     *  specified handle. The handle must be passed to following calls on\n     *  the socket.\n     *\n     *  A stack may have a finite number of sockets, in this case\n     *  NSAPI_ERROR_NO_SOCKET is returned if no socket is available.\n     *\n     *  This call is non-blocking. If accept would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param server   Socket handle to server to accept from\n     *  @param handle   Destination for a handle to the newly created socket\n     *  @param address  Destination for the remote address or NULL\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t socket_accept(nsapi_socket_t server,\n            nsapi_socket_t *handle, SocketAddress *address=0) = 0;\n\n    /** Send data over a TCP socket\n     *\n     *  The socket must be connected to a remote host. Returns the number of\n     *  bytes sent from the buffer.\n     *\n     *  This call is non-blocking. If send would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param handle   Socket handle\n     *  @param data     Buffer of data to send to the host\n     *  @param size     Size of the buffer in bytes\n     *  @return         Number of sent bytes on success, negative error\n     *                  code on failure\n     */\n    virtual nsapi_size_or_error_t socket_send(nsapi_socket_t handle,\n            const void *data, nsapi_size_t size) = 0;\n\n    /** Receive data over a TCP socket\n     *\n     *  The socket must be connected to a remote host. Returns the number of\n     *  bytes received into the buffer.\n     *\n     *  This call is non-blocking. If recv would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param handle   Socket handle\n     *  @param data     Destination buffer for data received from the host\n     *  @param size     Size of the buffer in bytes\n     *  @return         Number of received bytes on success, negative error\n     *                  code on failure\n     */\n    virtual nsapi_size_or_error_t socket_recv(nsapi_socket_t handle,\n            void *data, nsapi_size_t size) = 0;\n\n    /** Send a packet over a UDP socket\n     *\n     *  Sends data to the specified address. Returns the number of bytes\n     *  sent from the buffer.\n     *\n     *  This call is non-blocking. If sendto would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param handle   Socket handle\n     *  @param address  The SocketAddress of the remote host\n     *  @param data     Buffer of data to send to the host\n     *  @param size     Size of the buffer in bytes\n     *  @return         Number of sent bytes on success, negative error\n     *                  code on failure\n     */\n    virtual nsapi_size_or_error_t socket_sendto(nsapi_socket_t handle, const SocketAddress &address,\n            const void *data, nsapi_size_t size) = 0;\n\n    /** Receive a packet over a UDP socket\n     *\n     *  Receives data and stores the source address in address if address\n     *  is not NULL. Returns the number of bytes received into the buffer.\n     *\n     *  This call is non-blocking. If recvfrom would block,\n     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.\n     *\n     *  @param handle   Socket handle\n     *  @param address  Destination for the source address or NULL\n     *  @param buffer   Destination buffer for data received from the host\n     *  @param size     Size of the buffer in bytes\n     *  @return         Number of received bytes on success, negative error\n     *                  code on failure\n     */\n    virtual nsapi_size_or_error_t socket_recvfrom(nsapi_socket_t handle, SocketAddress *address,\n            void *buffer, nsapi_size_t size) = 0;\n\n    /** Register a callback on state change of the socket\n     *\n     *  The specified callback will be called on state changes such as when\n     *  the socket can recv/send/accept successfully and on when an error\n     *  occurs. The callback may also be called spuriously without reason.\n     *\n     *  The callback may be called in an interrupt context and should not\n     *  perform expensive operations such as recv/send calls.\n     *\n     *  @param handle   Socket handle\n     *  @param callback Function to call on state change\n     *  @param data     Argument to pass to callback\n     */\n    virtual void socket_attach(nsapi_socket_t handle, void (*callback)(void *), void *data) = 0;\n\n    /*  Set stack-specific socket options\n     *\n     *  The setsockopt allow an application to pass stack-specific hints\n     *  to the underlying stack. For unsupported options,\n     *  NSAPI_ERROR_UNSUPPORTED is returned and the socket is unmodified.\n     *\n     *  @param handle   Socket handle\n     *  @param level    Stack-specific protocol level\n     *  @param optname  Stack-specific option identifier\n     *  @param optval   Option value\n     *  @param optlen   Length of the option value\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t setsockopt(nsapi_socket_t handle, int level,\n            int optname, const void *optval, unsigned optlen);\n\n    /*  Get stack-specific socket options\n     *\n     *  The getstackopt allow an application to retrieve stack-specific hints\n     *  from the underlying stack. For unsupported options,\n     *  NSAPI_ERROR_UNSUPPORTED is returned and optval is unmodified.\n     *\n     *  @param handle   Socket handle\n     *  @param level    Stack-specific protocol level\n     *  @param optname  Stack-specific option identifier\n     *  @param optval   Destination for option value\n     *  @param optlen   Length of the option value\n     *  @return         0 on success, negative error code on failure\n     */\n    virtual nsapi_error_t getsockopt(nsapi_socket_t handle, int level,\n            int optname, void *optval, unsigned *optlen);\n};\n\n\n/** Convert a raw nsapi_stack_t object into a C++ NetworkStack object\n *\n *  @param stack    Reference to an object that can be converted to a stack\n *                  - A raw nsapi_stack_t object\n *                  - A reference to a network stack\n *                  - A reference to a network interface\n *  @return         Reference to the underlying network stack\n */\nNetworkStack *nsapi_create_stack(nsapi_stack_t *stack);\nNetworkStack *nsapi_create_stack(NetworkStack *stack);\n\ntemplate <typename IF>\nNetworkStack *nsapi_create_stack(IF *iface)\n{\n    return nsapi_create_stack(static_cast<NetworkInterface *>(iface)->get_stack());\n}\n\n\n#endif\n","/* Based on src/http/ngx_http_parse.c from NGINX copyright Igor Sysoev\n *\n * Additional changes are licensed under the same terms as NGINX and\n * copyright Joyent, Inc. and other Node contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n#include \"http_parser.h\"\n#include <assert.h>\n#include <stddef.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#ifndef ULLONG_MAX\n# define ULLONG_MAX ((uint64_t) -1) /* 2^64-1 */\n#endif\n\n#ifndef MIN\n# define MIN(a,b) ((a) < (b) ? (a) : (b))\n#endif\n\n#ifndef ARRAY_SIZE\n# define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))\n#endif\n\n#ifndef BIT_AT\n# define BIT_AT(a, i)                                                \\\n  (!!((unsigned int) (a)[(unsigned int) (i) >> 3] &                  \\\n   (1 << ((unsigned int) (i) & 7))))\n#endif\n\n#ifndef ELEM_AT\n# define ELEM_AT(a, i, v) ((unsigned int) (i) < ARRAY_SIZE(a) ? (a)[(i)] : (v))\n#endif\n\n#define SET_ERRNO(e)                                                 \\\ndo {                                                                 \\\n  parser->http_errno = (e);                                          \\\n} while(0)\n\n#define CURRENT_STATE() p_state\n#define UPDATE_STATE(V) p_state = (enum state) (V);\n#define RETURN(V)                                                    \\\ndo {                                                                 \\\n  parser->state = CURRENT_STATE();                                   \\\n  return (V);                                                        \\\n} while (0);\n#define REEXECUTE()                                                  \\\n  goto reexecute;                                                    \\\n\n\n#ifdef __GNUC__\n# define LIKELY(X) __builtin_expect(!!(X), 1)\n# define UNLIKELY(X) __builtin_expect(!!(X), 0)\n#else\n# define LIKELY(X) (X)\n# define UNLIKELY(X) (X)\n#endif\n\n\n/* Run the notify callback FOR, returning ER if it fails */\n#define CALLBACK_NOTIFY_(FOR, ER)                                    \\\ndo {                                                                 \\\n  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \\\n                                                                     \\\n  if (LIKELY(settings->on_##FOR)) {                                  \\\n    parser->state = CURRENT_STATE();                                 \\\n    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \\\n      SET_ERRNO(HPE_CB_##FOR);                                       \\\n    }                                                                \\\n    UPDATE_STATE(parser->state);                                     \\\n                                                                     \\\n    /* We either errored above or got paused; get out */             \\\n    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \\\n      return (ER);                                                   \\\n    }                                                                \\\n  }                                                                  \\\n} while (0)\n\n/* Run the notify callback FOR and consume the current byte */\n#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)\n\n/* Run the notify callback FOR and don't consume the current byte */\n#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)\n\n/* Run data callback FOR with LEN bytes, returning ER if it fails */\n#define CALLBACK_DATA_(FOR, LEN, ER)                                 \\\ndo {                                                                 \\\n  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \\\n                                                                     \\\n  if (FOR##_mark) {                                                  \\\n    if (LIKELY(settings->on_##FOR)) {                                \\\n      parser->state = CURRENT_STATE();                               \\\n      if (UNLIKELY(0 !=                                              \\\n                   settings->on_##FOR(parser, FOR##_mark, (LEN)))) { \\\n        SET_ERRNO(HPE_CB_##FOR);                                     \\\n      }                                                              \\\n      UPDATE_STATE(parser->state);                                   \\\n                                                                     \\\n      /* We either errored above or got paused; get out */           \\\n      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \\\n        return (ER);                                                 \\\n      }                                                              \\\n    }                                                                \\\n    FOR##_mark = NULL;                                               \\\n  }                                                                  \\\n} while (0)\n\n/* Run the data callback FOR and consume the current byte */\n#define CALLBACK_DATA(FOR)                                           \\\n    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)\n\n/* Run the data callback FOR and don't consume the current byte */\n#define CALLBACK_DATA_NOADVANCE(FOR)                                 \\\n    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)\n\n/* Set the mark FOR; non-destructive if mark is already set */\n#define MARK(FOR)                                                    \\\ndo {                                                                 \\\n  if (!FOR##_mark) {                                                 \\\n    FOR##_mark = p;                                                  \\\n  }                                                                  \\\n} while (0)\n\n/* Don't allow the total size of the HTTP headers (including the status\n * line) to exceed HTTP_MAX_HEADER_SIZE.  This check is here to protect\n * embedders against denial-of-service attacks where the attacker feeds\n * us a never-ending header that the embedder keeps buffering.\n *\n * This check is arguably the responsibility of embedders but we're doing\n * it on the embedder's behalf because most won't bother and this way we\n * make the web a little safer.  HTTP_MAX_HEADER_SIZE is still far bigger\n * than any reasonable request or response so this should never affect\n * day-to-day operation.\n */\n#define COUNT_HEADER_SIZE(V)                                         \\\ndo {                                                                 \\\n  parser->nread += (V);                                              \\\n  if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {            \\\n    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \\\n    goto error;                                                      \\\n  }                                                                  \\\n} while (0)\n\n\n#define PROXY_CONNECTION \"proxy-connection\"\n#define CONNECTION \"connection\"\n#define CONTENT_LENGTH \"content-length\"\n#define TRANSFER_ENCODING \"transfer-encoding\"\n#define UPGRADE \"upgrade\"\n#define CHUNKED \"chunked\"\n#define KEEP_ALIVE \"keep-alive\"\n#define CLOSE \"close\"\n\n\nstatic const char *method_strings[] =\n  {\n#define XX(num, name, string) #string,\n  HTTP_METHOD_MAP(XX)\n#undef XX\n  };\n\n\n/* Tokens as defined by rfc 2616. Also lowercases them.\n *        token       = 1*<any CHAR except CTLs or separators>\n *     separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *                    | \",\" | \";\" | \":\" | \"\\\" | <\">\n *                    | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *                    | \"{\" | \"}\" | SP | HT\n */\nstatic const char tokens[256] = {\n/*   0 nul    1 soh    2 stx    3 etx    4 eot    5 enq    6 ack    7 bel  */\n        0,       0,       0,       0,       0,       0,       0,       0,\n/*   8 bs     9 ht    10 nl    11 vt    12 np    13 cr    14 so    15 si   */\n        0,       0,       0,       0,       0,       0,       0,       0,\n/*  16 dle   17 dc1   18 dc2   19 dc3   20 dc4   21 nak   22 syn   23 etb */\n        0,       0,       0,       0,       0,       0,       0,       0,\n/*  24 can   25 em    26 sub   27 esc   28 fs    29 gs    30 rs    31 us  */\n        0,       0,       0,       0,       0,       0,       0,       0,\n/*  32 sp    33  !    34  \"    35  #    36  $    37  %    38  &    39  '  */\n        0,      '!',      0,      '#',     '$',     '%',     '&',    '\\'',\n/*  40  (    41  )    42  *    43  +    44  ,    45  -    46  .    47  /  */\n        0,       0,      '*',     '+',      0,      '-',     '.',      0,\n/*  48  0    49  1    50  2    51  3    52  4    53  5    54  6    55  7  */\n       '0',     '1',     '2',     '3',     '4',     '5',     '6',     '7',\n/*  56  8    57  9    58  :    59  ;    60  <    61  =    62  >    63  ?  */\n       '8',     '9',      0,       0,       0,       0,       0,       0,\n/*  64  @    65  A    66  B    67  C    68  D    69  E    70  F    71  G  */\n        0,      'a',     'b',     'c',     'd',     'e',     'f',     'g',\n/*  72  H    73  I    74  J    75  K    76  L    77  M    78  N    79  O  */\n       'h',     'i',     'j',     'k',     'l',     'm',     'n',     'o',\n/*  80  P    81  Q    82  R    83  S    84  T    85  U    86  V    87  W  */\n       'p',     'q',     'r',     's',     't',     'u',     'v',     'w',\n/*  88  X    89  Y    90  Z    91  [    92  \\    93  ]    94  ^    95  _  */\n       'x',     'y',     'z',      0,       0,       0,      '^',     '_',\n/*  96  `    97  a    98  b    99  c   100  d   101  e   102  f   103  g  */\n       '`',     'a',     'b',     'c',     'd',     'e',     'f',     'g',\n/* 104  h   105  i   106  j   107  k   108  l   109  m   110  n   111  o  */\n       'h',     'i',     'j',     'k',     'l',     'm',     'n',     'o',\n/* 112  p   113  q   114  r   115  s   116  t   117  u   118  v   119  w  */\n       'p',     'q',     'r',     's',     't',     'u',     'v',     'w',\n/* 120  x   121  y   122  z   123  {   124  |   125  }   126  ~   127 del */\n       'x',     'y',     'z',      0,      '|',      0,      '~',       0 };\n\n\nstatic const int8_t unhex[256] =\n  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  , 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,-1,-1,-1,-1,-1,-1\n  ,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n  };\n\n\n#if HTTP_PARSER_STRICT\n# define T(v) 0\n#else\n# define T(v) v\n#endif\n\n\nstatic const uint8_t normal_url_char[32] = {\n/*   0 nul    1 soh    2 stx    3 etx    4 eot    5 enq    6 ack    7 bel  */\n        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,\n/*   8 bs     9 ht    10 nl    11 vt    12 np    13 cr    14 so    15 si   */\n        0    | T(2)   |   0    |   0    | T(16)  |   0    |   0    |   0,\n/*  16 dle   17 dc1   18 dc2   19 dc3   20 dc4   21 nak   22 syn   23 etb */\n        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,\n/*  24 can   25 em    26 sub   27 esc   28 fs    29 gs    30 rs    31 us  */\n        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,\n/*  32 sp    33  !    34  \"    35  #    36  $    37  %    38  &    39  '  */\n        0    |   2    |   4    |   0    |   16   |   32   |   64   |  128,\n/*  40  (    41  )    42  *    43  +    44  ,    45  -    46  .    47  /  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  48  0    49  1    50  2    51  3    52  4    53  5    54  6    55  7  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  56  8    57  9    58  :    59  ;    60  <    61  =    62  >    63  ?  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |   0,\n/*  64  @    65  A    66  B    67  C    68  D    69  E    70  F    71  G  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  72  H    73  I    74  J    75  K    76  L    77  M    78  N    79  O  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  80  P    81  Q    82  R    83  S    84  T    85  U    86  V    87  W  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  88  X    89  Y    90  Z    91  [    92  \\    93  ]    94  ^    95  _  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/*  96  `    97  a    98  b    99  c   100  d   101  e   102  f   103  g  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/* 104  h   105  i   106  j   107  k   108  l   109  m   110  n   111  o  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/* 112  p   113  q   114  r   115  s   116  t   117  u   118  v   119  w  */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,\n/* 120  x   121  y   122  z   123  {   124  |   125  }   126  ~   127 del */\n        1    |   2    |   4    |   8    |   16   |   32   |   64   |   0, };\n\n#undef T\n\nenum state\n  { s_dead = 1 /* important that this is > 0 */\n\n  , s_start_req_or_res\n  , s_res_or_resp_H\n  , s_start_res\n  , s_res_H\n  , s_res_HT\n  , s_res_HTT\n  , s_res_HTTP\n  , s_res_first_http_major\n  , s_res_http_major\n  , s_res_first_http_minor\n  , s_res_http_minor\n  , s_res_first_status_code\n  , s_res_status_code\n  , s_res_status_start\n  , s_res_status\n  , s_res_line_almost_done\n\n  , s_start_req\n\n  , s_req_method\n  , s_req_spaces_before_url\n  , s_req_schema\n  , s_req_schema_slash\n  , s_req_schema_slash_slash\n  , s_req_server_start\n  , s_req_server\n  , s_req_server_with_at\n  , s_req_path\n  , s_req_query_string_start\n  , s_req_query_string\n  , s_req_fragment_start\n  , s_req_fragment\n  , s_req_http_start\n  , s_req_http_H\n  , s_req_http_HT\n  , s_req_http_HTT\n  , s_req_http_HTTP\n  , s_req_first_http_major\n  , s_req_http_major\n  , s_req_first_http_minor\n  , s_req_http_minor\n  , s_req_line_almost_done\n\n  , s_header_field_start\n  , s_header_field\n  , s_header_value_discard_ws\n  , s_header_value_discard_ws_almost_done\n  , s_header_value_discard_lws\n  , s_header_value_start\n  , s_header_value\n  , s_header_value_lws\n\n  , s_header_almost_done\n\n  , s_chunk_size_start\n  , s_chunk_size\n  , s_chunk_parameters\n  , s_chunk_size_almost_done\n\n  , s_headers_almost_done\n  , s_headers_done\n\n  /* Important: 's_headers_done' must be the last 'header' state. All\n   * states beyond this must be 'body' states. It is used for overflow\n   * checking. See the PARSING_HEADER() macro.\n   */\n\n  , s_chunk_data\n  , s_chunk_data_almost_done\n  , s_chunk_data_done\n\n  , s_body_identity\n  , s_body_identity_eof\n\n  , s_message_done\n  };\n\n\n#define PARSING_HEADER(state) (state <= s_headers_done)\n\n\nenum header_states\n  { h_general = 0\n  , h_C\n  , h_CO\n  , h_CON\n\n  , h_matching_connection\n  , h_matching_proxy_connection\n  , h_matching_content_length\n  , h_matching_transfer_encoding\n  , h_matching_upgrade\n\n  , h_connection\n  , h_content_length\n  , h_transfer_encoding\n  , h_upgrade\n\n  , h_matching_transfer_encoding_chunked\n  , h_matching_connection_token_start\n  , h_matching_connection_keep_alive\n  , h_matching_connection_close\n  , h_matching_connection_upgrade\n  , h_matching_connection_token\n\n  , h_transfer_encoding_chunked\n  , h_connection_keep_alive\n  , h_connection_close\n  , h_connection_upgrade\n  };\n\nenum http_host_state\n  {\n    s_http_host_dead = 1\n  , s_http_userinfo_start\n  , s_http_userinfo\n  , s_http_host_start\n  , s_http_host_v6_start\n  , s_http_host\n  , s_http_host_v6\n  , s_http_host_v6_end\n  , s_http_host_v6_zone_start\n  , s_http_host_v6_zone\n  , s_http_host_port_start\n  , s_http_host_port\n};\n\n/* Macros for character classes; depends on strict-mode  */\n#define CR                  '\\r'\n#define LF                  '\\n'\n#define LOWER(c)            (unsigned char)(c | 0x20)\n#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')\n#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')\n#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))\n#define IS_HEX(c)           (IS_NUM(c) || (LOWER(c) >= 'a' && LOWER(c) <= 'f'))\n#define IS_MARK(c)          ((c) == '-' || (c) == '_' || (c) == '.' || \\\n  (c) == '!' || (c) == '~' || (c) == '*' || (c) == '\\'' || (c) == '(' || \\\n  (c) == ')')\n#define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \\\n  (c) == ';' || (c) == ':' || (c) == '&' || (c) == '=' || (c) == '+' || \\\n  (c) == '$' || (c) == ',')\n\n#define STRICT_TOKEN(c)     (tokens[(unsigned char)c])\n\n#if HTTP_PARSER_STRICT\n#define TOKEN(c)            (tokens[(unsigned char)c])\n#define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))\n#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')\n#else\n#define TOKEN(c)            ((c == ' ') ? ' ' : tokens[(unsigned char)c])\n#define IS_URL_CHAR(c)                                                         \\\n  (BIT_AT(normal_url_char, (unsigned char)c) || ((c) & 0x80))\n#define IS_HOST_CHAR(c)                                                        \\\n  (IS_ALPHANUM(c) || (c) == '.' || (c) == '-' || (c) == '_')\n#endif\n\n/**\n * Verify that a char is a valid visible (printable) US-ASCII\n * character or %x80-FF\n **/\n#define IS_HEADER_CHAR(ch)                                                     \\\n  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))\n\n#define start_state (parser->type == HTTP_REQUEST ? s_start_req : s_start_res)\n\n\n#if HTTP_PARSER_STRICT\n# define STRICT_CHECK(cond)                                          \\\ndo {                                                                 \\\n  if (cond) {                                                        \\\n    SET_ERRNO(HPE_STRICT);                                           \\\n    goto error;                                                      \\\n  }                                                                  \\\n} while (0)\n# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)\n#else\n# define STRICT_CHECK(cond)\n# define NEW_MESSAGE() start_state\n#endif\n\n\n/* Map errno values to strings for human-readable output */\n#define HTTP_STRERROR_GEN(n, s) { \"HPE_\" #n, s },\nstatic struct {\n  const char *name;\n  const char *description;\n} http_strerror_tab[] = {\n  HTTP_ERRNO_MAP(HTTP_STRERROR_GEN)\n};\n#undef HTTP_STRERROR_GEN\n\nint http_message_needs_eof(const http_parser *parser);\n\n/* Our URL parser.\n *\n * This is designed to be shared by http_parser_execute() for URL validation,\n * hence it has a state transition + byte-for-byte interface. In addition, it\n * is meant to be embedded in http_parser_parse_url(), which does the dirty\n * work of turning state transitions URL components for its API.\n *\n * This function should only be invoked with non-space characters. It is\n * assumed that the caller cares about (and can detect) the transition between\n * URL and non-URL states by looking for these.\n */\nstatic enum state\nparse_url_char(enum state s, const char ch)\n{\n  if (ch == ' ' || ch == '\\r' || ch == '\\n') {\n    return s_dead;\n  }\n\n#if HTTP_PARSER_STRICT\n  if (ch == '\\t' || ch == '\\f') {\n    return s_dead;\n  }\n#endif\n\n  switch (s) {\n    case s_req_spaces_before_url:\n      /* Proxied requests are followed by scheme of an absolute URI (alpha).\n       * All methods except CONNECT are followed by '/' or '*'.\n       */\n\n      if (ch == '/' || ch == '*') {\n        return s_req_path;\n      }\n\n      if (IS_ALPHA(ch)) {\n        return s_req_schema;\n      }\n\n      break;\n\n    case s_req_schema:\n      if (IS_ALPHA(ch)) {\n        return s;\n      }\n\n      if (ch == ':') {\n        return s_req_schema_slash;\n      }\n\n      break;\n\n    case s_req_schema_slash:\n      if (ch == '/') {\n        return s_req_schema_slash_slash;\n      }\n\n      break;\n\n    case s_req_schema_slash_slash:\n      if (ch == '/') {\n        return s_req_server_start;\n      }\n\n      break;\n\n    case s_req_server_with_at:\n      if (ch == '@') {\n        return s_dead;\n      }\n\n    /* FALLTHROUGH */\n    case s_req_server_start:\n    case s_req_server:\n      if (ch == '/') {\n        return s_req_path;\n      }\n\n      if (ch == '?') {\n        return s_req_query_string_start;\n      }\n\n      if (ch == '@') {\n        return s_req_server_with_at;\n      }\n\n      if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {\n        return s_req_server;\n      }\n\n      break;\n\n    case s_req_path:\n      if (IS_URL_CHAR(ch)) {\n        return s;\n      }\n\n      switch (ch) {\n        case '?':\n          return s_req_query_string_start;\n\n        case '#':\n          return s_req_fragment_start;\n      }\n\n      break;\n\n    case s_req_query_string_start:\n    case s_req_query_string:\n      if (IS_URL_CHAR(ch)) {\n        return s_req_query_string;\n      }\n\n      switch (ch) {\n        case '?':\n          /* allow extra '?' in query string */\n          return s_req_query_string;\n\n        case '#':\n          return s_req_fragment_start;\n      }\n\n      break;\n\n    case s_req_fragment_start:\n      if (IS_URL_CHAR(ch)) {\n        return s_req_fragment;\n      }\n\n      switch (ch) {\n        case '?':\n          return s_req_fragment;\n\n        case '#':\n          return s;\n      }\n\n      break;\n\n    case s_req_fragment:\n      if (IS_URL_CHAR(ch)) {\n        return s;\n      }\n\n      switch (ch) {\n        case '?':\n        case '#':\n          return s;\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  /* We should never fall out of the switch above unless there's an error */\n  return s_dead;\n}\n\nsize_t http_parser_execute (http_parser *parser,\n                            const http_parser_settings *settings,\n                            const char *data,\n                            size_t len)\n{\n  char c, ch;\n  int8_t unhex_val;\n  const char *p = data;\n  const char *header_field_mark = 0;\n  const char *header_value_mark = 0;\n  const char *url_mark = 0;\n  const char *body_mark = 0;\n  const char *status_mark = 0;\n  enum state p_state = (enum state) parser->state;\n  const unsigned int lenient = parser->lenient_http_headers;\n\n  /* We're in an error state. Don't bother doing anything. */\n  if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {\n    return 0;\n  }\n\n  if (len == 0) {\n    switch (CURRENT_STATE()) {\n      case s_body_identity_eof:\n        /* Use of CALLBACK_NOTIFY() here would erroneously return 1 byte read if\n         * we got paused.\n         */\n        CALLBACK_NOTIFY_NOADVANCE(message_complete);\n        return 0;\n\n      case s_dead:\n      case s_start_req_or_res:\n      case s_start_res:\n      case s_start_req:\n        return 0;\n\n      default:\n        SET_ERRNO(HPE_INVALID_EOF_STATE);\n        return 1;\n    }\n  }\n\n\n  if (CURRENT_STATE() == s_header_field)\n    header_field_mark = data;\n  if (CURRENT_STATE() == s_header_value)\n    header_value_mark = data;\n  switch (CURRENT_STATE()) {\n  case s_req_path:\n  case s_req_schema:\n  case s_req_schema_slash:\n  case s_req_schema_slash_slash:\n  case s_req_server_start:\n  case s_req_server:\n  case s_req_server_with_at:\n  case s_req_query_string_start:\n  case s_req_query_string:\n  case s_req_fragment_start:\n  case s_req_fragment:\n    url_mark = data;\n    break;\n  case s_res_status:\n    status_mark = data;\n    break;\n  default:\n    break;\n  }\n\n  for (p=data; p != data + len; p++) {\n    ch = *p;\n\n    if (PARSING_HEADER(CURRENT_STATE()))\n      COUNT_HEADER_SIZE(1);\n\nreexecute:\n    switch (CURRENT_STATE()) {\n\n      case s_dead:\n        /* this state is used after a 'Connection: close' message\n         * the parser will error out if it reads another message\n         */\n        if (LIKELY(ch == CR || ch == LF))\n          break;\n\n        SET_ERRNO(HPE_CLOSED_CONNECTION);\n        goto error;\n\n      case s_start_req_or_res:\n      {\n        if (ch == CR || ch == LF)\n          break;\n        parser->flags = 0;\n        parser->content_length = ULLONG_MAX;\n\n        if (ch == 'H') {\n          UPDATE_STATE(s_res_or_resp_H);\n\n          CALLBACK_NOTIFY(message_begin);\n        } else {\n          parser->type = HTTP_REQUEST;\n          UPDATE_STATE(s_start_req);\n          REEXECUTE();\n        }\n\n        break;\n      }\n\n      case s_res_or_resp_H:\n        if (ch == 'T') {\n          parser->type = HTTP_RESPONSE;\n          UPDATE_STATE(s_res_HT);\n        } else {\n          if (UNLIKELY(ch != 'E')) {\n            SET_ERRNO(HPE_INVALID_CONSTANT);\n            goto error;\n          }\n\n          parser->type = HTTP_REQUEST;\n          parser->method = HTTP_HEAD;\n          parser->index = 2;\n          UPDATE_STATE(s_req_method);\n        }\n        break;\n\n      case s_start_res:\n      {\n        parser->flags = 0;\n        parser->content_length = ULLONG_MAX;\n\n        switch (ch) {\n          case 'H':\n            UPDATE_STATE(s_res_H);\n            break;\n\n          case CR:\n          case LF:\n            break;\n\n          default:\n            SET_ERRNO(HPE_INVALID_CONSTANT);\n            goto error;\n        }\n\n        CALLBACK_NOTIFY(message_begin);\n        break;\n      }\n\n      case s_res_H:\n        STRICT_CHECK(ch != 'T');\n        UPDATE_STATE(s_res_HT);\n        break;\n\n      case s_res_HT:\n        STRICT_CHECK(ch != 'T');\n        UPDATE_STATE(s_res_HTT);\n        break;\n\n      case s_res_HTT:\n        STRICT_CHECK(ch != 'P');\n        UPDATE_STATE(s_res_HTTP);\n        break;\n\n      case s_res_HTTP:\n        STRICT_CHECK(ch != '/');\n        UPDATE_STATE(s_res_first_http_major);\n        break;\n\n      case s_res_first_http_major:\n        if (UNLIKELY(ch < '0' || ch > '9')) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_major = ch - '0';\n        UPDATE_STATE(s_res_http_major);\n        break;\n\n      /* major HTTP version or dot */\n      case s_res_http_major:\n      {\n        if (ch == '.') {\n          UPDATE_STATE(s_res_first_http_minor);\n          break;\n        }\n\n        if (!IS_NUM(ch)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_major *= 10;\n        parser->http_major += ch - '0';\n\n        if (UNLIKELY(parser->http_major > 999)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        break;\n      }\n\n      /* first digit of minor HTTP version */\n      case s_res_first_http_minor:\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_minor = ch - '0';\n        UPDATE_STATE(s_res_http_minor);\n        break;\n\n      /* minor HTTP version or end of request line */\n      case s_res_http_minor:\n      {\n        if (ch == ' ') {\n          UPDATE_STATE(s_res_first_status_code);\n          break;\n        }\n\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_minor *= 10;\n        parser->http_minor += ch - '0';\n\n        if (UNLIKELY(parser->http_minor > 999)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        break;\n      }\n\n      case s_res_first_status_code:\n      {\n        if (!IS_NUM(ch)) {\n          if (ch == ' ') {\n            break;\n          }\n\n          SET_ERRNO(HPE_INVALID_STATUS);\n          goto error;\n        }\n        parser->status_code = ch - '0';\n        UPDATE_STATE(s_res_status_code);\n        break;\n      }\n\n      case s_res_status_code:\n      {\n        if (!IS_NUM(ch)) {\n          switch (ch) {\n            case ' ':\n              UPDATE_STATE(s_res_status_start);\n              break;\n            case CR:\n              UPDATE_STATE(s_res_line_almost_done);\n              break;\n            case LF:\n              UPDATE_STATE(s_header_field_start);\n              break;\n            default:\n              SET_ERRNO(HPE_INVALID_STATUS);\n              goto error;\n          }\n          break;\n        }\n\n        parser->status_code *= 10;\n        parser->status_code += ch - '0';\n\n        if (UNLIKELY(parser->status_code > 999)) {\n          SET_ERRNO(HPE_INVALID_STATUS);\n          goto error;\n        }\n\n        break;\n      }\n\n      case s_res_status_start:\n      {\n        if (ch == CR) {\n          UPDATE_STATE(s_res_line_almost_done);\n          break;\n        }\n\n        if (ch == LF) {\n          UPDATE_STATE(s_header_field_start);\n          break;\n        }\n\n        MARK(status);\n        UPDATE_STATE(s_res_status);\n        parser->index = 0;\n        break;\n      }\n\n      case s_res_status:\n        if (ch == CR) {\n          UPDATE_STATE(s_res_line_almost_done);\n          CALLBACK_DATA(status);\n          break;\n        }\n\n        if (ch == LF) {\n          UPDATE_STATE(s_header_field_start);\n          CALLBACK_DATA(status);\n          break;\n        }\n\n        break;\n\n      case s_res_line_almost_done:\n        STRICT_CHECK(ch != LF);\n        UPDATE_STATE(s_header_field_start);\n        break;\n\n      case s_start_req:\n      {\n        if (ch == CR || ch == LF)\n          break;\n        parser->flags = 0;\n        parser->content_length = ULLONG_MAX;\n\n        if (UNLIKELY(!IS_ALPHA(ch))) {\n          SET_ERRNO(HPE_INVALID_METHOD);\n          goto error;\n        }\n\n        parser->method = (enum http_method) 0;\n        parser->index = 1;\n        switch (ch) {\n          case 'A': parser->method = HTTP_ACL; break;\n          case 'B': parser->method = HTTP_BIND; break;\n          case 'C': parser->method = HTTP_CONNECT; /* or COPY, CHECKOUT */ break;\n          case 'D': parser->method = HTTP_DELETE; break;\n          case 'G': parser->method = HTTP_GET; break;\n          case 'H': parser->method = HTTP_HEAD; break;\n          case 'L': parser->method = HTTP_LOCK; /* or LINK */ break;\n          case 'M': parser->method = HTTP_MKCOL; /* or MOVE, MKACTIVITY, MERGE, M-SEARCH, MKCALENDAR */ break;\n          case 'N': parser->method = HTTP_NOTIFY; break;\n          case 'O': parser->method = HTTP_OPTIONS; break;\n          case 'P': parser->method = HTTP_POST;\n            /* or PROPFIND|PROPPATCH|PUT|PATCH|PURGE */\n            break;\n          case 'R': parser->method = HTTP_REPORT; /* or REBIND */ break;\n          case 'S': parser->method = HTTP_SUBSCRIBE; /* or SEARCH */ break;\n          case 'T': parser->method = HTTP_TRACE; break;\n          case 'U': parser->method = HTTP_UNLOCK; /* or UNSUBSCRIBE, UNBIND, UNLINK */ break;\n          default:\n            SET_ERRNO(HPE_INVALID_METHOD);\n            goto error;\n        }\n        UPDATE_STATE(s_req_method);\n\n        CALLBACK_NOTIFY(message_begin);\n\n        break;\n      }\n\n      case s_req_method:\n      {\n        const char *matcher;\n        if (UNLIKELY(ch == '\\0')) {\n          SET_ERRNO(HPE_INVALID_METHOD);\n          goto error;\n        }\n\n        matcher = method_strings[parser->method];\n        if (ch == ' ' && matcher[parser->index] == '\\0') {\n          UPDATE_STATE(s_req_spaces_before_url);\n        } else if (ch == matcher[parser->index]) {\n          ; /* nada */\n        } else if (IS_ALPHA(ch)) {\n\n          switch (parser->method << 16 | parser->index << 8 | ch) {\n#define XX(meth, pos, ch, new_meth) \\\n            case (HTTP_##meth << 16 | pos << 8 | ch): \\\n              parser->method = HTTP_##new_meth; break;\n\n            XX(POST,      1, 'U', PUT)\n            XX(POST,      1, 'A', PATCH)\n            XX(CONNECT,   1, 'H', CHECKOUT)\n            XX(CONNECT,   2, 'P', COPY)\n            XX(MKCOL,     1, 'O', MOVE)\n            XX(MKCOL,     1, 'E', MERGE)\n            XX(MKCOL,     2, 'A', MKACTIVITY)\n            XX(MKCOL,     3, 'A', MKCALENDAR)\n            XX(SUBSCRIBE, 1, 'E', SEARCH)\n            XX(REPORT,    2, 'B', REBIND)\n            XX(POST,      1, 'R', PROPFIND)\n            XX(PROPFIND,  4, 'P', PROPPATCH)\n            XX(PUT,       2, 'R', PURGE)\n            XX(LOCK,      1, 'I', LINK)\n            XX(UNLOCK,    2, 'S', UNSUBSCRIBE)\n            XX(UNLOCK,    2, 'B', UNBIND)\n            XX(UNLOCK,    3, 'I', UNLINK)\n#undef XX\n\n            default:\n              SET_ERRNO(HPE_INVALID_METHOD);\n              goto error;\n          }\n        } else if (ch == '-' &&\n                   parser->index == 1 &&\n                   parser->method == HTTP_MKCOL) {\n          parser->method = HTTP_MSEARCH;\n        } else {\n          SET_ERRNO(HPE_INVALID_METHOD);\n          goto error;\n        }\n\n        ++parser->index;\n        break;\n      }\n\n      case s_req_spaces_before_url:\n      {\n        if (ch == ' ') break;\n\n        MARK(url);\n        if (parser->method == HTTP_CONNECT) {\n          UPDATE_STATE(s_req_server_start);\n        }\n\n        UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));\n        if (UNLIKELY(CURRENT_STATE() == s_dead)) {\n          SET_ERRNO(HPE_INVALID_URL);\n          goto error;\n        }\n\n        break;\n      }\n\n      case s_req_schema:\n      case s_req_schema_slash:\n      case s_req_schema_slash_slash:\n      case s_req_server_start:\n      {\n        switch (ch) {\n          /* No whitespace allowed here */\n          case ' ':\n          case CR:\n          case LF:\n            SET_ERRNO(HPE_INVALID_URL);\n            goto error;\n          default:\n            UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));\n            if (UNLIKELY(CURRENT_STATE() == s_dead)) {\n              SET_ERRNO(HPE_INVALID_URL);\n              goto error;\n            }\n        }\n\n        break;\n      }\n\n      case s_req_server:\n      case s_req_server_with_at:\n      case s_req_path:\n      case s_req_query_string_start:\n      case s_req_query_string:\n      case s_req_fragment_start:\n      case s_req_fragment:\n      {\n        switch (ch) {\n          case ' ':\n            UPDATE_STATE(s_req_http_start);\n            CALLBACK_DATA(url);\n            break;\n          case CR:\n          case LF:\n            parser->http_major = 0;\n            parser->http_minor = 9;\n            UPDATE_STATE((ch == CR) ?\n              s_req_line_almost_done :\n              s_header_field_start);\n            CALLBACK_DATA(url);\n            break;\n          default:\n            UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));\n            if (UNLIKELY(CURRENT_STATE() == s_dead)) {\n              SET_ERRNO(HPE_INVALID_URL);\n              goto error;\n            }\n        }\n        break;\n      }\n\n      case s_req_http_start:\n        switch (ch) {\n          case 'H':\n            UPDATE_STATE(s_req_http_H);\n            break;\n          case ' ':\n            break;\n          default:\n            SET_ERRNO(HPE_INVALID_CONSTANT);\n            goto error;\n        }\n        break;\n\n      case s_req_http_H:\n        STRICT_CHECK(ch != 'T');\n        UPDATE_STATE(s_req_http_HT);\n        break;\n\n      case s_req_http_HT:\n        STRICT_CHECK(ch != 'T');\n        UPDATE_STATE(s_req_http_HTT);\n        break;\n\n      case s_req_http_HTT:\n        STRICT_CHECK(ch != 'P');\n        UPDATE_STATE(s_req_http_HTTP);\n        break;\n\n      case s_req_http_HTTP:\n        STRICT_CHECK(ch != '/');\n        UPDATE_STATE(s_req_first_http_major);\n        break;\n\n      /* first digit of major HTTP version */\n      case s_req_first_http_major:\n        if (UNLIKELY(ch < '1' || ch > '9')) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_major = ch - '0';\n        UPDATE_STATE(s_req_http_major);\n        break;\n\n      /* major HTTP version or dot */\n      case s_req_http_major:\n      {\n        if (ch == '.') {\n          UPDATE_STATE(s_req_first_http_minor);\n          break;\n        }\n\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_major *= 10;\n        parser->http_major += ch - '0';\n\n        if (UNLIKELY(parser->http_major > 999)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        break;\n      }\n\n      /* first digit of minor HTTP version */\n      case s_req_first_http_minor:\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_minor = ch - '0';\n        UPDATE_STATE(s_req_http_minor);\n        break;\n\n      /* minor HTTP version or end of request line */\n      case s_req_http_minor:\n      {\n        if (ch == CR) {\n          UPDATE_STATE(s_req_line_almost_done);\n          break;\n        }\n\n        if (ch == LF) {\n          UPDATE_STATE(s_header_field_start);\n          break;\n        }\n\n        /* XXX allow spaces after digit? */\n\n        if (UNLIKELY(!IS_NUM(ch))) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        parser->http_minor *= 10;\n        parser->http_minor += ch - '0';\n\n        if (UNLIKELY(parser->http_minor > 999)) {\n          SET_ERRNO(HPE_INVALID_VERSION);\n          goto error;\n        }\n\n        break;\n      }\n\n      /* end of request line */\n      case s_req_line_almost_done:\n      {\n        if (UNLIKELY(ch != LF)) {\n          SET_ERRNO(HPE_LF_EXPECTED);\n          goto error;\n        }\n\n        UPDATE_STATE(s_header_field_start);\n        break;\n      }\n\n      case s_header_field_start:\n      {\n        if (ch == CR) {\n          UPDATE_STATE(s_headers_almost_done);\n          break;\n        }\n\n        if (ch == LF) {\n          /* they might be just sending \\n instead of \\r\\n so this would be\n           * the second \\n to denote the end of headers*/\n          UPDATE_STATE(s_headers_almost_done);\n          REEXECUTE();\n        }\n\n        c = TOKEN(ch);\n\n        if (UNLIKELY(!c)) {\n          SET_ERRNO(HPE_INVALID_HEADER_TOKEN);\n          goto error;\n        }\n\n        MARK(header_field);\n\n        parser->index = 0;\n        UPDATE_STATE(s_header_field);\n\n        switch (c) {\n          case 'c':\n            parser->header_state = h_C;\n            break;\n\n          case 'p':\n            parser->header_state = h_matching_proxy_connection;\n            break;\n\n          case 't':\n            parser->header_state = h_matching_transfer_encoding;\n            break;\n\n          case 'u':\n            parser->header_state = h_matching_upgrade;\n            break;\n\n          default:\n            parser->header_state = h_general;\n            break;\n        }\n        break;\n      }\n\n      case s_header_field:\n      {\n        const char* start = p;\n        for (; p != data + len; p++) {\n          ch = *p;\n          c = TOKEN(ch);\n\n          if (!c)\n            break;\n\n          switch (parser->header_state) {\n            case h_general:\n              break;\n\n            case h_C:\n              parser->index++;\n              parser->header_state = (c == 'o' ? h_CO : h_general);\n              break;\n\n            case h_CO:\n              parser->index++;\n              parser->header_state = (c == 'n' ? h_CON : h_general);\n              break;\n\n            case h_CON:\n              parser->index++;\n              switch (c) {\n                case 'n':\n                  parser->header_state = h_matching_connection;\n                  break;\n                case 't':\n                  parser->header_state = h_matching_content_length;\n                  break;\n                default:\n                  parser->header_state = h_general;\n                  break;\n              }\n              break;\n\n            /* connection */\n\n            case h_matching_connection:\n              parser->index++;\n              if (parser->index > sizeof(CONNECTION)-1\n                  || c != CONNECTION[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(CONNECTION)-2) {\n                parser->header_state = h_connection;\n              }\n              break;\n\n            /* proxy-connection */\n\n            case h_matching_proxy_connection:\n              parser->index++;\n              if (parser->index > sizeof(PROXY_CONNECTION)-1\n                  || c != PROXY_CONNECTION[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(PROXY_CONNECTION)-2) {\n                parser->header_state = h_connection;\n              }\n              break;\n\n            /* content-length */\n\n            case h_matching_content_length:\n              parser->index++;\n              if (parser->index > sizeof(CONTENT_LENGTH)-1\n                  || c != CONTENT_LENGTH[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(CONTENT_LENGTH)-2) {\n                parser->header_state = h_content_length;\n              }\n              break;\n\n            /* transfer-encoding */\n\n            case h_matching_transfer_encoding:\n              parser->index++;\n              if (parser->index > sizeof(TRANSFER_ENCODING)-1\n                  || c != TRANSFER_ENCODING[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(TRANSFER_ENCODING)-2) {\n                parser->header_state = h_transfer_encoding;\n              }\n              break;\n\n            /* upgrade */\n\n            case h_matching_upgrade:\n              parser->index++;\n              if (parser->index > sizeof(UPGRADE)-1\n                  || c != UPGRADE[parser->index]) {\n                parser->header_state = h_general;\n              } else if (parser->index == sizeof(UPGRADE)-2) {\n                parser->header_state = h_upgrade;\n              }\n              break;\n\n            case h_connection:\n            case h_content_length:\n            case h_transfer_encoding:\n            case h_upgrade:\n              if (ch != ' ') parser->header_state = h_general;\n              break;\n\n            default:\n              assert(0 && \"Unknown header_state\");\n              break;\n          }\n        }\n\n        COUNT_HEADER_SIZE(p - start);\n\n        if (p == data + len) {\n          --p;\n          break;\n        }\n\n        if (ch == ':') {\n          UPDATE_STATE(s_header_value_discard_ws);\n          CALLBACK_DATA(header_field);\n          break;\n        }\n\n        SET_ERRNO(HPE_INVALID_HEADER_TOKEN);\n        goto error;\n      }\n\n      case s_header_value_discard_ws:\n        if (ch == ' ' || ch == '\\t') break;\n\n        if (ch == CR) {\n          UPDATE_STATE(s_header_value_discard_ws_almost_done);\n          break;\n        }\n\n        if (ch == LF) {\n          UPDATE_STATE(s_header_value_discard_lws);\n          break;\n        }\n\n        /* FALLTHROUGH */\n\n      case s_header_value_start:\n      {\n        MARK(header_value);\n\n        UPDATE_STATE(s_header_value);\n        parser->index = 0;\n\n        c = LOWER(ch);\n\n        switch (parser->header_state) {\n          case h_upgrade:\n            parser->flags |= F_UPGRADE;\n            parser->header_state = h_general;\n            break;\n\n          case h_transfer_encoding:\n            /* looking for 'Transfer-Encoding: chunked' */\n            if ('c' == c) {\n              parser->header_state = h_matching_transfer_encoding_chunked;\n            } else {\n              parser->header_state = h_general;\n            }\n            break;\n\n          case h_content_length:\n            if (UNLIKELY(!IS_NUM(ch))) {\n              SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);\n              goto error;\n            }\n\n            if (parser->flags & F_CONTENTLENGTH) {\n              SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);\n              goto error;\n            }\n\n            parser->flags |= F_CONTENTLENGTH;\n            parser->content_length = ch - '0';\n            break;\n\n          case h_connection:\n            /* looking for 'Connection: keep-alive' */\n            if (c == 'k') {\n              parser->header_state = h_matching_connection_keep_alive;\n            /* looking for 'Connection: close' */\n            } else if (c == 'c') {\n              parser->header_state = h_matching_connection_close;\n            } else if (c == 'u') {\n              parser->header_state = h_matching_connection_upgrade;\n            } else {\n              parser->header_state = h_matching_connection_token;\n            }\n            break;\n\n          /* Multi-value `Connection` header */\n          case h_matching_connection_token_start:\n            break;\n\n          default:\n            parser->header_state = h_general;\n            break;\n        }\n        break;\n      }\n\n      case s_header_value:\n      {\n        const char* start = p;\n        enum header_states h_state = (enum header_states) parser->header_state;\n        for (; p != data + len; p++) {\n          ch = *p;\n          if (ch == CR) {\n            UPDATE_STATE(s_header_almost_done);\n            parser->header_state = h_state;\n            CALLBACK_DATA(header_value);\n            break;\n          }\n\n          if (ch == LF) {\n            UPDATE_STATE(s_header_almost_done);\n            COUNT_HEADER_SIZE(p - start);\n            parser->header_state = h_state;\n            CALLBACK_DATA_NOADVANCE(header_value);\n            REEXECUTE();\n          }\n\n          if (!lenient && !IS_HEADER_CHAR(ch)) {\n            SET_ERRNO(HPE_INVALID_HEADER_TOKEN);\n            goto error;\n          }\n\n          c = LOWER(ch);\n\n          switch (h_state) {\n            case h_general:\n            {\n              const char* p_cr;\n              const char* p_lf;\n              size_t limit = data + len - p;\n\n              limit = MIN(limit, HTTP_MAX_HEADER_SIZE);\n\n              p_cr = (const char*) memchr(p, CR, limit);\n              p_lf = (const char*) memchr(p, LF, limit);\n              if (p_cr != NULL) {\n                if (p_lf != NULL && p_cr >= p_lf)\n                  p = p_lf;\n                else\n                  p = p_cr;\n              } else if (UNLIKELY(p_lf != NULL)) {\n                p = p_lf;\n              } else {\n                p = data + len;\n              }\n              --p;\n\n              break;\n            }\n\n            case h_connection:\n            case h_transfer_encoding:\n              assert(0 && \"Shouldn't get here.\");\n              break;\n\n            case h_content_length:\n            {\n              uint64_t t;\n\n              if (ch == ' ') break;\n\n              if (UNLIKELY(!IS_NUM(ch))) {\n                SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);\n                parser->header_state = h_state;\n                goto error;\n              }\n\n              t = parser->content_length;\n              t *= 10;\n              t += ch - '0';\n\n              /* Overflow? Test against a conservative limit for simplicity. */\n              if (UNLIKELY((ULLONG_MAX - 10) / 10 < parser->content_length)) {\n                SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);\n                parser->header_state = h_state;\n                goto error;\n              }\n\n              parser->content_length = t;\n              break;\n            }\n\n            /* Transfer-Encoding: chunked */\n            case h_matching_transfer_encoding_chunked:\n              parser->index++;\n              if (parser->index > sizeof(CHUNKED)-1\n                  || c != CHUNKED[parser->index]) {\n                h_state = h_general;\n              } else if (parser->index == sizeof(CHUNKED)-2) {\n                h_state = h_transfer_encoding_chunked;\n              }\n              break;\n\n            case h_matching_connection_token_start:\n              /* looking for 'Connection: keep-alive' */\n              if (c == 'k') {\n                h_state = h_matching_connection_keep_alive;\n              /* looking for 'Connection: close' */\n              } else if (c == 'c') {\n                h_state = h_matching_connection_close;\n              } else if (c == 'u') {\n                h_state = h_matching_connection_upgrade;\n              } else if (STRICT_TOKEN(c)) {\n                h_state = h_matching_connection_token;\n              } else if (c == ' ' || c == '\\t') {\n                /* Skip lws */\n              } else {\n                h_state = h_general;\n              }\n              break;\n\n            /* looking for 'Connection: keep-alive' */\n            case h_matching_connection_keep_alive:\n              parser->index++;\n              if (parser->index > sizeof(KEEP_ALIVE)-1\n                  || c != KEEP_ALIVE[parser->index]) {\n                h_state = h_matching_connection_token;\n              } else if (parser->index == sizeof(KEEP_ALIVE)-2) {\n                h_state = h_connection_keep_alive;\n              }\n              break;\n\n            /* looking for 'Connection: close' */\n            case h_matching_connection_close:\n              parser->index++;\n              if (parser->index > sizeof(CLOSE)-1 || c != CLOSE[parser->index]) {\n                h_state = h_matching_connection_token;\n              } else if (parser->index == sizeof(CLOSE)-2) {\n                h_state = h_connection_close;\n              }\n              break;\n\n            /* looking for 'Connection: upgrade' */\n            case h_matching_connection_upgrade:\n              parser->index++;\n              if (parser->index > sizeof(UPGRADE) - 1 ||\n                  c != UPGRADE[parser->index]) {\n                h_state = h_matching_connection_token;\n              } else if (parser->index == sizeof(UPGRADE)-2) {\n                h_state = h_connection_upgrade;\n              }\n              break;\n\n            case h_matching_connection_token:\n              if (ch == ',') {\n                h_state = h_matching_connection_token_start;\n                parser->index = 0;\n              }\n              break;\n\n            case h_transfer_encoding_chunked:\n              if (ch != ' ') h_state = h_general;\n              break;\n\n            case h_connection_keep_alive:\n            case h_connection_close:\n            case h_connection_upgrade:\n              if (ch == ',') {\n                if (h_state == h_connection_keep_alive) {\n                  parser->flags |= F_CONNECTION_KEEP_ALIVE;\n                } else if (h_state == h_connection_close) {\n                  parser->flags |= F_CONNECTION_CLOSE;\n                } else if (h_state == h_connection_upgrade) {\n                  parser->flags |= F_CONNECTION_UPGRADE;\n                }\n                h_state = h_matching_connection_token_start;\n                parser->index = 0;\n              } else if (ch != ' ') {\n                h_state = h_matching_connection_token;\n              }\n              break;\n\n            default:\n              UPDATE_STATE(s_header_value);\n              h_state = h_general;\n              break;\n          }\n        }\n        parser->header_state = h_state;\n\n        COUNT_HEADER_SIZE(p - start);\n\n        if (p == data + len)\n          --p;\n        break;\n      }\n\n      case s_header_almost_done:\n      {\n        if (UNLIKELY(ch != LF)) {\n          SET_ERRNO(HPE_LF_EXPECTED);\n          goto error;\n        }\n\n        UPDATE_STATE(s_header_value_lws);\n        break;\n      }\n\n      case s_header_value_lws:\n      {\n        if (ch == ' ' || ch == '\\t') {\n          UPDATE_STATE(s_header_value_start);\n          REEXECUTE();\n        }\n\n        /* finished the header */\n        switch (parser->header_state) {\n          case h_connection_keep_alive:\n            parser->flags |= F_CONNECTION_KEEP_ALIVE;\n            break;\n          case h_connection_close:\n            parser->flags |= F_CONNECTION_CLOSE;\n            break;\n          case h_transfer_encoding_chunked:\n            parser->flags |= F_CHUNKED;\n            break;\n          case h_connection_upgrade:\n            parser->flags |= F_CONNECTION_UPGRADE;\n            break;\n          default:\n            break;\n        }\n\n        UPDATE_STATE(s_header_field_start);\n        REEXECUTE();\n      }\n\n      case s_header_value_discard_ws_almost_done:\n      {\n        STRICT_CHECK(ch != LF);\n        UPDATE_STATE(s_header_value_discard_lws);\n        break;\n      }\n\n      case s_header_value_discard_lws:\n      {\n        if (ch == ' ' || ch == '\\t') {\n          UPDATE_STATE(s_header_value_discard_ws);\n          break;\n        } else {\n          switch (parser->header_state) {\n            case h_connection_keep_alive:\n              parser->flags |= F_CONNECTION_KEEP_ALIVE;\n              break;\n            case h_connection_close:\n              parser->flags |= F_CONNECTION_CLOSE;\n              break;\n            case h_connection_upgrade:\n              parser->flags |= F_CONNECTION_UPGRADE;\n              break;\n            case h_transfer_encoding_chunked:\n              parser->flags |= F_CHUNKED;\n              break;\n            default:\n              break;\n          }\n\n          /* header value was empty */\n          MARK(header_value);\n          UPDATE_STATE(s_header_field_start);\n          CALLBACK_DATA_NOADVANCE(header_value);\n          REEXECUTE();\n        }\n      }\n\n      case s_headers_almost_done:\n      {\n        STRICT_CHECK(ch != LF);\n\n        if (parser->flags & F_TRAILING) {\n          /* End of a chunked request */\n          UPDATE_STATE(s_message_done);\n          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);\n          REEXECUTE();\n        }\n\n        /* Cannot use chunked encoding and a content-length header together\n           per the HTTP specification. */\n        if ((parser->flags & F_CHUNKED) &&\n            (parser->flags & F_CONTENTLENGTH)) {\n          SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);\n          goto error;\n        }\n\n        UPDATE_STATE(s_headers_done);\n\n        /* Set this here so that on_headers_complete() callbacks can see it */\n        parser->upgrade =\n          ((parser->flags & (F_UPGRADE | F_CONNECTION_UPGRADE)) ==\n           (F_UPGRADE | F_CONNECTION_UPGRADE) ||\n           parser->method == HTTP_CONNECT);\n\n        /* Here we call the headers_complete callback. This is somewhat\n         * different than other callbacks because if the user returns 1, we\n         * will interpret that as saying that this message has no body. This\n         * is needed for the annoying case of recieving a response to a HEAD\n         * request.\n         *\n         * We'd like to use CALLBACK_NOTIFY_NOADVANCE() here but we cannot, so\n         * we have to simulate it by handling a change in errno below.\n         */\n        if (settings->on_headers_complete) {\n          switch (settings->on_headers_complete(parser)) {\n            case 0:\n              break;\n\n            case 2:\n              parser->upgrade = 1;\n\n            case 1:\n              parser->flags |= F_SKIPBODY;\n              break;\n\n            default:\n              SET_ERRNO(HPE_CB_headers_complete);\n              RETURN(p - data); /* Error */\n          }\n        }\n\n        if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {\n          RETURN(p - data);\n        }\n\n        REEXECUTE();\n      }\n\n      case s_headers_done:\n      {\n        int hasBody;\n        STRICT_CHECK(ch != LF);\n\n        parser->nread = 0;\n\n        hasBody = parser->flags & F_CHUNKED ||\n          (parser->content_length > 0 && parser->content_length != ULLONG_MAX);\n        if (parser->upgrade && (parser->method == HTTP_CONNECT ||\n                                (parser->flags & F_SKIPBODY) || !hasBody)) {\n          /* Exit, the rest of the message is in a different protocol. */\n          UPDATE_STATE(NEW_MESSAGE());\n          CALLBACK_NOTIFY(message_complete);\n          RETURN((p - data) + 1);\n        }\n\n        if (parser->flags & F_SKIPBODY) {\n          UPDATE_STATE(NEW_MESSAGE());\n          CALLBACK_NOTIFY(message_complete);\n        } else if (parser->flags & F_CHUNKED) {\n          /* chunked encoding - ignore Content-Length header */\n          UPDATE_STATE(s_chunk_size_start);\n        } else {\n          if (parser->content_length == 0) {\n            /* Content-Length header given but zero: Content-Length: 0\\r\\n */\n            UPDATE_STATE(NEW_MESSAGE());\n            CALLBACK_NOTIFY(message_complete);\n          } else if (parser->content_length != ULLONG_MAX) {\n            /* Content-Length header given and non-zero */\n            UPDATE_STATE(s_body_identity);\n          } else {\n            if (!http_message_needs_eof(parser)) {\n              /* Assume content-length 0 - read the next */\n              UPDATE_STATE(NEW_MESSAGE());\n              CALLBACK_NOTIFY(message_complete);\n            } else {\n              /* Read body until EOF */\n              UPDATE_STATE(s_body_identity_eof);\n            }\n          }\n        }\n\n        break;\n      }\n\n      case s_body_identity:\n      {\n        uint64_t to_read = MIN(parser->content_length,\n                               (uint64_t) ((data + len) - p));\n\n        assert(parser->content_length != 0\n            && parser->content_length != ULLONG_MAX);\n\n        /* The difference between advancing content_length and p is because\n         * the latter will automaticaly advance on the next loop iteration.\n         * Further, if content_length ends up at 0, we want to see the last\n         * byte again for our message complete callback.\n         */\n        MARK(body);\n        parser->content_length -= to_read;\n        p += to_read - 1;\n\n        if (parser->content_length == 0) {\n          UPDATE_STATE(s_message_done);\n\n          /* Mimic CALLBACK_DATA_NOADVANCE() but with one extra byte.\n           *\n           * The alternative to doing this is to wait for the next byte to\n           * trigger the data callback, just as in every other case. The\n           * problem with this is that this makes it difficult for the test\n           * harness to distinguish between complete-on-EOF and\n           * complete-on-length. It's not clear that this distinction is\n           * important for applications, but let's keep it for now.\n           */\n          CALLBACK_DATA_(body, p - body_mark + 1, p - data);\n          REEXECUTE();\n        }\n\n        break;\n      }\n\n      /* read until EOF */\n      case s_body_identity_eof:\n        MARK(body);\n        p = data + len - 1;\n\n        break;\n\n      case s_message_done:\n        UPDATE_STATE(NEW_MESSAGE());\n        CALLBACK_NOTIFY(message_complete);\n        if (parser->upgrade) {\n          /* Exit, the rest of the message is in a different protocol. */\n          RETURN((p - data) + 1);\n        }\n        break;\n\n      case s_chunk_size_start:\n      {\n        assert(parser->nread == 1);\n        assert(parser->flags & F_CHUNKED);\n\n        unhex_val = unhex[(unsigned char)ch];\n        if (UNLIKELY(unhex_val == -1)) {\n          SET_ERRNO(HPE_INVALID_CHUNK_SIZE);\n          goto error;\n        }\n\n        parser->content_length = unhex_val;\n        UPDATE_STATE(s_chunk_size);\n        break;\n      }\n\n      case s_chunk_size:\n      {\n        uint64_t t;\n\n        assert(parser->flags & F_CHUNKED);\n\n        if (ch == CR) {\n          UPDATE_STATE(s_chunk_size_almost_done);\n          break;\n        }\n\n        unhex_val = unhex[(unsigned char)ch];\n\n        if (unhex_val == -1) {\n          if (ch == ';' || ch == ' ') {\n            UPDATE_STATE(s_chunk_parameters);\n            break;\n          }\n\n          SET_ERRNO(HPE_INVALID_CHUNK_SIZE);\n          goto error;\n        }\n\n        t = parser->content_length;\n        t *= 16;\n        t += unhex_val;\n\n        /* Overflow? Test against a conservative limit for simplicity. */\n        if (UNLIKELY((ULLONG_MAX - 16) / 16 < parser->content_length)) {\n          SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);\n          goto error;\n        }\n\n        parser->content_length = t;\n        break;\n      }\n\n      case s_chunk_parameters:\n      {\n        assert(parser->flags & F_CHUNKED);\n        /* just ignore this shit. TODO check for overflow */\n        if (ch == CR) {\n          UPDATE_STATE(s_chunk_size_almost_done);\n          break;\n        }\n        break;\n      }\n\n      case s_chunk_size_almost_done:\n      {\n        assert(parser->flags & F_CHUNKED);\n        STRICT_CHECK(ch != LF);\n\n        parser->nread = 0;\n\n        if (parser->content_length == 0) {\n          parser->flags |= F_TRAILING;\n          UPDATE_STATE(s_header_field_start);\n        } else {\n          UPDATE_STATE(s_chunk_data);\n        }\n        CALLBACK_NOTIFY(chunk_header);\n        break;\n      }\n\n      case s_chunk_data:\n      {\n        uint64_t to_read = MIN(parser->content_length,\n                               (uint64_t) ((data + len) - p));\n\n        assert(parser->flags & F_CHUNKED);\n        assert(parser->content_length != 0\n            && parser->content_length != ULLONG_MAX);\n\n        /* See the explanation in s_body_identity for why the content\n         * length and data pointers are managed this way.\n         */\n        MARK(body);\n        parser->content_length -= to_read;\n        p += to_read - 1;\n\n        if (parser->content_length == 0) {\n          UPDATE_STATE(s_chunk_data_almost_done);\n        }\n\n        break;\n      }\n\n      case s_chunk_data_almost_done:\n        assert(parser->flags & F_CHUNKED);\n        assert(parser->content_length == 0);\n        STRICT_CHECK(ch != CR);\n        UPDATE_STATE(s_chunk_data_done);\n        CALLBACK_DATA(body);\n        break;\n\n      case s_chunk_data_done:\n        assert(parser->flags & F_CHUNKED);\n        STRICT_CHECK(ch != LF);\n        parser->nread = 0;\n        UPDATE_STATE(s_chunk_size_start);\n        CALLBACK_NOTIFY(chunk_complete);\n        break;\n\n      default:\n        assert(0 && \"unhandled state\");\n        SET_ERRNO(HPE_INVALID_INTERNAL_STATE);\n        goto error;\n    }\n  }\n\n  /* Run callbacks for any marks that we have leftover after we ran our of\n   * bytes. There should be at most one of these set, so it's OK to invoke\n   * them in series (unset marks will not result in callbacks).\n   *\n   * We use the NOADVANCE() variety of callbacks here because 'p' has already\n   * overflowed 'data' and this allows us to correct for the off-by-one that\n   * we'd otherwise have (since CALLBACK_DATA() is meant to be run with a 'p'\n   * value that's in-bounds).\n   */\n\n  assert(((header_field_mark ? 1 : 0) +\n          (header_value_mark ? 1 : 0) +\n          (url_mark ? 1 : 0)  +\n          (body_mark ? 1 : 0) +\n          (status_mark ? 1 : 0)) <= 1);\n\n  CALLBACK_DATA_NOADVANCE(header_field);\n  CALLBACK_DATA_NOADVANCE(header_value);\n  CALLBACK_DATA_NOADVANCE(url);\n  CALLBACK_DATA_NOADVANCE(body);\n  CALLBACK_DATA_NOADVANCE(status);\n\n  RETURN(len);\n\nerror:\n  if (HTTP_PARSER_ERRNO(parser) == HPE_OK) {\n    SET_ERRNO(HPE_UNKNOWN);\n  }\n\n  RETURN(p - data);\n}\n\n\n/* Does the parser need to see an EOF to find the end of the message? */\nint\nhttp_message_needs_eof (const http_parser *parser)\n{\n  if (parser->type == HTTP_REQUEST) {\n    return 0;\n  }\n\n  /* See RFC 2616 section 4.4 */\n  if (parser->status_code / 100 == 1 || /* 1xx e.g. Continue */\n      parser->status_code == 204 ||     /* No Content */\n      parser->status_code == 304 ||     /* Not Modified */\n      parser->flags & F_SKIPBODY) {     /* response to a HEAD request */\n    return 0;\n  }\n\n  if ((parser->flags & F_CHUNKED) || parser->content_length != ULLONG_MAX) {\n    return 0;\n  }\n\n  return 1;\n}\n\n\nint\nhttp_should_keep_alive (const http_parser *parser)\n{\n  if (parser->http_major > 0 && parser->http_minor > 0) {\n    /* HTTP/1.1 */\n    if (parser->flags & F_CONNECTION_CLOSE) {\n      return 0;\n    }\n  } else {\n    /* HTTP/1.0 or earlier */\n    if (!(parser->flags & F_CONNECTION_KEEP_ALIVE)) {\n      return 0;\n    }\n  }\n\n  return !http_message_needs_eof(parser);\n}\n\n\nconst char *\nhttp_method_str (enum http_method m)\n{\n  return ELEM_AT(method_strings, m, \"<unknown>\");\n}\n\n\nvoid\nhttp_parser_init (http_parser *parser, enum http_parser_type t)\n{\n  void *data = parser->data; /* preserve application data */\n  memset(parser, 0, sizeof(*parser));\n  parser->data = data;\n  parser->type = t;\n  parser->state = (t == HTTP_REQUEST ? s_start_req : (t == HTTP_RESPONSE ? s_start_res : s_start_req_or_res));\n  parser->http_errno = HPE_OK;\n}\n\nvoid\nhttp_parser_settings_init(http_parser_settings *settings)\n{\n  memset(settings, 0, sizeof(*settings));\n}\n\nconst char *\nhttp_errno_name(enum http_errno err) {\n  assert(((size_t) err) < ARRAY_SIZE(http_strerror_tab));\n  return http_strerror_tab[err].name;\n}\n\nconst char *\nhttp_errno_description(enum http_errno err) {\n  assert(((size_t) err) < ARRAY_SIZE(http_strerror_tab));\n  return http_strerror_tab[err].description;\n}\n\nstatic enum http_host_state\nhttp_parse_host_char(enum http_host_state s, const char ch) {\n  switch(s) {\n    case s_http_userinfo:\n    case s_http_userinfo_start:\n      if (ch == '@') {\n        return s_http_host_start;\n      }\n\n      if (IS_USERINFO_CHAR(ch)) {\n        return s_http_userinfo;\n      }\n      break;\n\n    case s_http_host_start:\n      if (ch == '[') {\n        return s_http_host_v6_start;\n      }\n\n      if (IS_HOST_CHAR(ch)) {\n        return s_http_host;\n      }\n\n      break;\n\n    case s_http_host:\n      if (IS_HOST_CHAR(ch)) {\n        return s_http_host;\n      }\n\n    /* FALLTHROUGH */\n    case s_http_host_v6_end:\n      if (ch == ':') {\n        return s_http_host_port_start;\n      }\n\n      break;\n\n    case s_http_host_v6:\n      if (ch == ']') {\n        return s_http_host_v6_end;\n      }\n\n    /* FALLTHROUGH */\n    case s_http_host_v6_start:\n      if (IS_HEX(ch) || ch == ':' || ch == '.') {\n        return s_http_host_v6;\n      }\n\n      if (s == s_http_host_v6 && ch == '%') {\n        return s_http_host_v6_zone_start;\n      }\n      break;\n\n    case s_http_host_v6_zone:\n      if (ch == ']') {\n        return s_http_host_v6_end;\n      }\n\n    /* FALLTHROUGH */\n    case s_http_host_v6_zone_start:\n      /* RFC 6874 Zone ID consists of 1*( unreserved / pct-encoded) */\n      if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' || ch == '_' ||\n          ch == '~') {\n        return s_http_host_v6_zone;\n      }\n      break;\n\n    case s_http_host_port:\n    case s_http_host_port_start:\n      if (IS_NUM(ch)) {\n        return s_http_host_port;\n      }\n\n      break;\n\n    default:\n      break;\n  }\n  return s_http_host_dead;\n}\n\nstatic int\nhttp_parse_host(const char * buf, struct http_parser_url *u, int found_at) {\n  enum http_host_state s;\n\n  const char *p;\n  size_t buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;\n\n  assert(u->field_set & (1 << UF_HOST));\n\n  u->field_data[UF_HOST].len = 0;\n\n  s = found_at ? s_http_userinfo_start : s_http_host_start;\n\n  for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {\n    enum http_host_state new_s = http_parse_host_char(s, *p);\n\n    if (new_s == s_http_host_dead) {\n      return 1;\n    }\n\n    switch(new_s) {\n      case s_http_host:\n        if (s != s_http_host) {\n          u->field_data[UF_HOST].off = p - buf;\n        }\n        u->field_data[UF_HOST].len++;\n        break;\n\n      case s_http_host_v6:\n        if (s != s_http_host_v6) {\n          u->field_data[UF_HOST].off = p - buf;\n        }\n        u->field_data[UF_HOST].len++;\n        break;\n\n      case s_http_host_v6_zone_start:\n      case s_http_host_v6_zone:\n        u->field_data[UF_HOST].len++;\n        break;\n\n      case s_http_host_port:\n        if (s != s_http_host_port) {\n          u->field_data[UF_PORT].off = p - buf;\n          u->field_data[UF_PORT].len = 0;\n          u->field_set |= (1 << UF_PORT);\n        }\n        u->field_data[UF_PORT].len++;\n        break;\n\n      case s_http_userinfo:\n        if (s != s_http_userinfo) {\n          u->field_data[UF_USERINFO].off = p - buf ;\n          u->field_data[UF_USERINFO].len = 0;\n          u->field_set |= (1 << UF_USERINFO);\n        }\n        u->field_data[UF_USERINFO].len++;\n        break;\n\n      default:\n        break;\n    }\n    s = new_s;\n  }\n\n  /* Make sure we don't end somewhere unexpected */\n  switch (s) {\n    case s_http_host_start:\n    case s_http_host_v6_start:\n    case s_http_host_v6:\n    case s_http_host_v6_zone_start:\n    case s_http_host_v6_zone:\n    case s_http_host_port_start:\n    case s_http_userinfo:\n    case s_http_userinfo_start:\n      return 1;\n    default:\n      break;\n  }\n\n  return 0;\n}\n\nvoid\nhttp_parser_url_init(struct http_parser_url *u) {\n  memset(u, 0, sizeof(*u));\n}\n\nint\nhttp_parser_parse_url(const char *buf, size_t buflen, int is_connect,\n                      struct http_parser_url *u)\n{\n  enum state s;\n  const char *p;\n  enum http_parser_url_fields uf, old_uf;\n  int found_at = 0;\n\n  u->port = u->field_set = 0;\n  s = is_connect ? s_req_server_start : s_req_spaces_before_url;\n  old_uf = UF_MAX;\n\n  for (p = buf; p < buf + buflen; p++) {\n    s = parse_url_char(s, *p);\n\n    /* Figure out the next field that we're operating on */\n    switch (s) {\n      case s_dead:\n        return 1;\n\n      /* Skip delimeters */\n      case s_req_schema_slash:\n      case s_req_schema_slash_slash:\n      case s_req_server_start:\n      case s_req_query_string_start:\n      case s_req_fragment_start:\n        continue;\n\n      case s_req_schema:\n        uf = UF_SCHEMA;\n        break;\n\n      case s_req_server_with_at:\n        found_at = 1;\n\n      /* FALLTROUGH */\n      case s_req_server:\n        uf = UF_HOST;\n        break;\n\n      case s_req_path:\n        uf = UF_PATH;\n        break;\n\n      case s_req_query_string:\n        uf = UF_QUERY;\n        break;\n\n      case s_req_fragment:\n        uf = UF_FRAGMENT;\n        break;\n\n      default:\n        assert(!\"Unexpected state\");\n        return 1;\n    }\n\n    /* Nothing's changed; soldier on */\n    if (uf == old_uf) {\n      u->field_data[uf].len++;\n      continue;\n    }\n\n    u->field_data[uf].off = p - buf;\n    u->field_data[uf].len = 1;\n\n    u->field_set |= (1 << uf);\n    old_uf = uf;\n  }\n\n  /* host must be present if there is a schema */\n  /* parsing http:///toto will fail */\n  if ((u->field_set & (1 << UF_SCHEMA)) &&\n      (u->field_set & (1 << UF_HOST)) == 0) {\n    return 1;\n  }\n\n  if (u->field_set & (1 << UF_HOST)) {\n    if (http_parse_host(buf, u, found_at) != 0) {\n      return 1;\n    }\n  }\n\n  /* CONNECT requests can only contain \"hostname:port\" */\n  if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {\n    return 1;\n  }\n\n  if (u->field_set & (1 << UF_PORT)) {\n    /* Don't bother with endp; we've already validated the string */\n    unsigned long v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);\n\n    /* Ports have a max value of 2^16 */\n    if (v > 0xffff) {\n      return 1;\n    }\n\n    u->port = (uint16_t) v;\n  }\n\n  return 0;\n}\n\nvoid\nhttp_parser_pause(http_parser *parser, int paused) {\n  /* Users should only be pausing/unpausing a parser that is not in an error\n   * state. In non-debug builds, there's not much that we can do about this\n   * other than ignore it.\n   */\n  if (HTTP_PARSER_ERRNO(parser) == HPE_OK ||\n      HTTP_PARSER_ERRNO(parser) == HPE_PAUSED) {\n    SET_ERRNO((paused) ? HPE_PAUSED : HPE_OK);\n  } else {\n    assert(0 && \"Attempting to pause parser in error state\");\n  }\n}\n\nint\nhttp_body_is_final(const struct http_parser *parser) {\n    return parser->state == s_message_done;\n}\n\nunsigned long\nhttp_parser_version(void) {\n  return HTTP_PARSER_VERSION_MAJOR * 0x10000 |\n         HTTP_PARSER_VERSION_MINOR * 0x00100 |\n         HTTP_PARSER_VERSION_PATCH * 0x00001;\n}\n","/*\n *  FIPS-197 compliant AES implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The AES block cipher was designed by Vincent Rijmen and Joan Daemen.\n *\n *  http://csrc.nist.gov/encryption/aes/rijndael/Rijndael.pdf\n *  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_AES_C)\n\n#include <string.h>\n\n#include \"mbedtls/aes.h\"\n#if defined(MBEDTLS_PADLOCK_C)\n#include \"mbedtls/padlock.h\"\n#endif\n#if defined(MBEDTLS_AESNI_C)\n#include \"mbedtls/aesni.h\"\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#if !defined(MBEDTLS_AES_ALT)\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;\n}\n\n/*\n * 32-bit integer manipulation macros (little endian)\n */\n#ifndef GET_UINT32_LE\n#define GET_UINT32_LE(n,b,i)                            \\\n{                                                       \\\n    (n) = ( (uint32_t) (b)[(i)    ]       )             \\\n        | ( (uint32_t) (b)[(i) + 1] <<  8 )             \\\n        | ( (uint32_t) (b)[(i) + 2] << 16 )             \\\n        | ( (uint32_t) (b)[(i) + 3] << 24 );            \\\n}\n#endif\n\n#ifndef PUT_UINT32_LE\n#define PUT_UINT32_LE(n,b,i)                                    \\\n{                                                               \\\n    (b)[(i)    ] = (unsigned char) ( ( (n)       ) & 0xFF );    \\\n    (b)[(i) + 1] = (unsigned char) ( ( (n) >>  8 ) & 0xFF );    \\\n    (b)[(i) + 2] = (unsigned char) ( ( (n) >> 16 ) & 0xFF );    \\\n    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \\\n}\n#endif\n\n#if defined(MBEDTLS_PADLOCK_C) &&                      \\\n    ( defined(MBEDTLS_HAVE_X86) || defined(MBEDTLS_PADLOCK_ALIGN16) )\nstatic int aes_padlock_ace = -1;\n#endif\n\n#if defined(MBEDTLS_AES_ROM_TABLES)\n/*\n * Forward S-box\n */\nstatic const unsigned char FSb[256] =\n{\n    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,\n    0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,\n    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,\n    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,\n    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,\n    0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,\n    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,\n    0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,\n    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,\n    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,\n    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,\n    0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,\n    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,\n    0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,\n    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,\n    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,\n    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,\n    0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,\n    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,\n    0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,\n    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,\n    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,\n    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,\n    0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,\n    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,\n    0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,\n    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,\n    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,\n    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,\n    0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,\n    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,\n    0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16\n};\n\n/*\n * Forward tables\n */\n#define FT \\\n\\\n    V(A5,63,63,C6), V(84,7C,7C,F8), V(99,77,77,EE), V(8D,7B,7B,F6), \\\n    V(0D,F2,F2,FF), V(BD,6B,6B,D6), V(B1,6F,6F,DE), V(54,C5,C5,91), \\\n    V(50,30,30,60), V(03,01,01,02), V(A9,67,67,CE), V(7D,2B,2B,56), \\\n    V(19,FE,FE,E7), V(62,D7,D7,B5), V(E6,AB,AB,4D), V(9A,76,76,EC), \\\n    V(45,CA,CA,8F), V(9D,82,82,1F), V(40,C9,C9,89), V(87,7D,7D,FA), \\\n    V(15,FA,FA,EF), V(EB,59,59,B2), V(C9,47,47,8E), V(0B,F0,F0,FB), \\\n    V(EC,AD,AD,41), V(67,D4,D4,B3), V(FD,A2,A2,5F), V(EA,AF,AF,45), \\\n    V(BF,9C,9C,23), V(F7,A4,A4,53), V(96,72,72,E4), V(5B,C0,C0,9B), \\\n    V(C2,B7,B7,75), V(1C,FD,FD,E1), V(AE,93,93,3D), V(6A,26,26,4C), \\\n    V(5A,36,36,6C), V(41,3F,3F,7E), V(02,F7,F7,F5), V(4F,CC,CC,83), \\\n    V(5C,34,34,68), V(F4,A5,A5,51), V(34,E5,E5,D1), V(08,F1,F1,F9), \\\n    V(93,71,71,E2), V(73,D8,D8,AB), V(53,31,31,62), V(3F,15,15,2A), \\\n    V(0C,04,04,08), V(52,C7,C7,95), V(65,23,23,46), V(5E,C3,C3,9D), \\\n    V(28,18,18,30), V(A1,96,96,37), V(0F,05,05,0A), V(B5,9A,9A,2F), \\\n    V(09,07,07,0E), V(36,12,12,24), V(9B,80,80,1B), V(3D,E2,E2,DF), \\\n    V(26,EB,EB,CD), V(69,27,27,4E), V(CD,B2,B2,7F), V(9F,75,75,EA), \\\n    V(1B,09,09,12), V(9E,83,83,1D), V(74,2C,2C,58), V(2E,1A,1A,34), \\\n    V(2D,1B,1B,36), V(B2,6E,6E,DC), V(EE,5A,5A,B4), V(FB,A0,A0,5B), \\\n    V(F6,52,52,A4), V(4D,3B,3B,76), V(61,D6,D6,B7), V(CE,B3,B3,7D), \\\n    V(7B,29,29,52), V(3E,E3,E3,DD), V(71,2F,2F,5E), V(97,84,84,13), \\\n    V(F5,53,53,A6), V(68,D1,D1,B9), V(00,00,00,00), V(2C,ED,ED,C1), \\\n    V(60,20,20,40), V(1F,FC,FC,E3), V(C8,B1,B1,79), V(ED,5B,5B,B6), \\\n    V(BE,6A,6A,D4), V(46,CB,CB,8D), V(D9,BE,BE,67), V(4B,39,39,72), \\\n    V(DE,4A,4A,94), V(D4,4C,4C,98), V(E8,58,58,B0), V(4A,CF,CF,85), \\\n    V(6B,D0,D0,BB), V(2A,EF,EF,C5), V(E5,AA,AA,4F), V(16,FB,FB,ED), \\\n    V(C5,43,43,86), V(D7,4D,4D,9A), V(55,33,33,66), V(94,85,85,11), \\\n    V(CF,45,45,8A), V(10,F9,F9,E9), V(06,02,02,04), V(81,7F,7F,FE), \\\n    V(F0,50,50,A0), V(44,3C,3C,78), V(BA,9F,9F,25), V(E3,A8,A8,4B), \\\n    V(F3,51,51,A2), V(FE,A3,A3,5D), V(C0,40,40,80), V(8A,8F,8F,05), \\\n    V(AD,92,92,3F), V(BC,9D,9D,21), V(48,38,38,70), V(04,F5,F5,F1), \\\n    V(DF,BC,BC,63), V(C1,B6,B6,77), V(75,DA,DA,AF), V(63,21,21,42), \\\n    V(30,10,10,20), V(1A,FF,FF,E5), V(0E,F3,F3,FD), V(6D,D2,D2,BF), \\\n    V(4C,CD,CD,81), V(14,0C,0C,18), V(35,13,13,26), V(2F,EC,EC,C3), \\\n    V(E1,5F,5F,BE), V(A2,97,97,35), V(CC,44,44,88), V(39,17,17,2E), \\\n    V(57,C4,C4,93), V(F2,A7,A7,55), V(82,7E,7E,FC), V(47,3D,3D,7A), \\\n    V(AC,64,64,C8), V(E7,5D,5D,BA), V(2B,19,19,32), V(95,73,73,E6), \\\n    V(A0,60,60,C0), V(98,81,81,19), V(D1,4F,4F,9E), V(7F,DC,DC,A3), \\\n    V(66,22,22,44), V(7E,2A,2A,54), V(AB,90,90,3B), V(83,88,88,0B), \\\n    V(CA,46,46,8C), V(29,EE,EE,C7), V(D3,B8,B8,6B), V(3C,14,14,28), \\\n    V(79,DE,DE,A7), V(E2,5E,5E,BC), V(1D,0B,0B,16), V(76,DB,DB,AD), \\\n    V(3B,E0,E0,DB), V(56,32,32,64), V(4E,3A,3A,74), V(1E,0A,0A,14), \\\n    V(DB,49,49,92), V(0A,06,06,0C), V(6C,24,24,48), V(E4,5C,5C,B8), \\\n    V(5D,C2,C2,9F), V(6E,D3,D3,BD), V(EF,AC,AC,43), V(A6,62,62,C4), \\\n    V(A8,91,91,39), V(A4,95,95,31), V(37,E4,E4,D3), V(8B,79,79,F2), \\\n    V(32,E7,E7,D5), V(43,C8,C8,8B), V(59,37,37,6E), V(B7,6D,6D,DA), \\\n    V(8C,8D,8D,01), V(64,D5,D5,B1), V(D2,4E,4E,9C), V(E0,A9,A9,49), \\\n    V(B4,6C,6C,D8), V(FA,56,56,AC), V(07,F4,F4,F3), V(25,EA,EA,CF), \\\n    V(AF,65,65,CA), V(8E,7A,7A,F4), V(E9,AE,AE,47), V(18,08,08,10), \\\n    V(D5,BA,BA,6F), V(88,78,78,F0), V(6F,25,25,4A), V(72,2E,2E,5C), \\\n    V(24,1C,1C,38), V(F1,A6,A6,57), V(C7,B4,B4,73), V(51,C6,C6,97), \\\n    V(23,E8,E8,CB), V(7C,DD,DD,A1), V(9C,74,74,E8), V(21,1F,1F,3E), \\\n    V(DD,4B,4B,96), V(DC,BD,BD,61), V(86,8B,8B,0D), V(85,8A,8A,0F), \\\n    V(90,70,70,E0), V(42,3E,3E,7C), V(C4,B5,B5,71), V(AA,66,66,CC), \\\n    V(D8,48,48,90), V(05,03,03,06), V(01,F6,F6,F7), V(12,0E,0E,1C), \\\n    V(A3,61,61,C2), V(5F,35,35,6A), V(F9,57,57,AE), V(D0,B9,B9,69), \\\n    V(91,86,86,17), V(58,C1,C1,99), V(27,1D,1D,3A), V(B9,9E,9E,27), \\\n    V(38,E1,E1,D9), V(13,F8,F8,EB), V(B3,98,98,2B), V(33,11,11,22), \\\n    V(BB,69,69,D2), V(70,D9,D9,A9), V(89,8E,8E,07), V(A7,94,94,33), \\\n    V(B6,9B,9B,2D), V(22,1E,1E,3C), V(92,87,87,15), V(20,E9,E9,C9), \\\n    V(49,CE,CE,87), V(FF,55,55,AA), V(78,28,28,50), V(7A,DF,DF,A5), \\\n    V(8F,8C,8C,03), V(F8,A1,A1,59), V(80,89,89,09), V(17,0D,0D,1A), \\\n    V(DA,BF,BF,65), V(31,E6,E6,D7), V(C6,42,42,84), V(B8,68,68,D0), \\\n    V(C3,41,41,82), V(B0,99,99,29), V(77,2D,2D,5A), V(11,0F,0F,1E), \\\n    V(CB,B0,B0,7B), V(FC,54,54,A8), V(D6,BB,BB,6D), V(3A,16,16,2C)\n\n#define V(a,b,c,d) 0x##a##b##c##d\nstatic const uint32_t FT0[256] = { FT };\n#undef V\n\n#define V(a,b,c,d) 0x##b##c##d##a\nstatic const uint32_t FT1[256] = { FT };\n#undef V\n\n#define V(a,b,c,d) 0x##c##d##a##b\nstatic const uint32_t FT2[256] = { FT };\n#undef V\n\n#define V(a,b,c,d) 0x##d##a##b##c\nstatic const uint32_t FT3[256] = { FT };\n#undef V\n\n#undef FT\n\n/*\n * Reverse S-box\n */\nstatic const unsigned char RSb[256] =\n{\n    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,\n    0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,\n    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,\n    0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,\n    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,\n    0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,\n    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,\n    0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,\n    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,\n    0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,\n    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,\n    0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,\n    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,\n    0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,\n    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,\n    0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,\n    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,\n    0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,\n    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,\n    0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,\n    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,\n    0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,\n    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,\n    0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,\n    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,\n    0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,\n    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,\n    0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,\n    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,\n    0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,\n    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,\n    0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D\n};\n\n/*\n * Reverse tables\n */\n#define RT \\\n\\\n    V(50,A7,F4,51), V(53,65,41,7E), V(C3,A4,17,1A), V(96,5E,27,3A), \\\n    V(CB,6B,AB,3B), V(F1,45,9D,1F), V(AB,58,FA,AC), V(93,03,E3,4B), \\\n    V(55,FA,30,20), V(F6,6D,76,AD), V(91,76,CC,88), V(25,4C,02,F5), \\\n    V(FC,D7,E5,4F), V(D7,CB,2A,C5), V(80,44,35,26), V(8F,A3,62,B5), \\\n    V(49,5A,B1,DE), V(67,1B,BA,25), V(98,0E,EA,45), V(E1,C0,FE,5D), \\\n    V(02,75,2F,C3), V(12,F0,4C,81), V(A3,97,46,8D), V(C6,F9,D3,6B), \\\n    V(E7,5F,8F,03), V(95,9C,92,15), V(EB,7A,6D,BF), V(DA,59,52,95), \\\n    V(2D,83,BE,D4), V(D3,21,74,58), V(29,69,E0,49), V(44,C8,C9,8E), \\\n    V(6A,89,C2,75), V(78,79,8E,F4), V(6B,3E,58,99), V(DD,71,B9,27), \\\n    V(B6,4F,E1,BE), V(17,AD,88,F0), V(66,AC,20,C9), V(B4,3A,CE,7D), \\\n    V(18,4A,DF,63), V(82,31,1A,E5), V(60,33,51,97), V(45,7F,53,62), \\\n    V(E0,77,64,B1), V(84,AE,6B,BB), V(1C,A0,81,FE), V(94,2B,08,F9), \\\n    V(58,68,48,70), V(19,FD,45,8F), V(87,6C,DE,94), V(B7,F8,7B,52), \\\n    V(23,D3,73,AB), V(E2,02,4B,72), V(57,8F,1F,E3), V(2A,AB,55,66), \\\n    V(07,28,EB,B2), V(03,C2,B5,2F), V(9A,7B,C5,86), V(A5,08,37,D3), \\\n    V(F2,87,28,30), V(B2,A5,BF,23), V(BA,6A,03,02), V(5C,82,16,ED), \\\n    V(2B,1C,CF,8A), V(92,B4,79,A7), V(F0,F2,07,F3), V(A1,E2,69,4E), \\\n    V(CD,F4,DA,65), V(D5,BE,05,06), V(1F,62,34,D1), V(8A,FE,A6,C4), \\\n    V(9D,53,2E,34), V(A0,55,F3,A2), V(32,E1,8A,05), V(75,EB,F6,A4), \\\n    V(39,EC,83,0B), V(AA,EF,60,40), V(06,9F,71,5E), V(51,10,6E,BD), \\\n    V(F9,8A,21,3E), V(3D,06,DD,96), V(AE,05,3E,DD), V(46,BD,E6,4D), \\\n    V(B5,8D,54,91), V(05,5D,C4,71), V(6F,D4,06,04), V(FF,15,50,60), \\\n    V(24,FB,98,19), V(97,E9,BD,D6), V(CC,43,40,89), V(77,9E,D9,67), \\\n    V(BD,42,E8,B0), V(88,8B,89,07), V(38,5B,19,E7), V(DB,EE,C8,79), \\\n    V(47,0A,7C,A1), V(E9,0F,42,7C), V(C9,1E,84,F8), V(00,00,00,00), \\\n    V(83,86,80,09), V(48,ED,2B,32), V(AC,70,11,1E), V(4E,72,5A,6C), \\\n    V(FB,FF,0E,FD), V(56,38,85,0F), V(1E,D5,AE,3D), V(27,39,2D,36), \\\n    V(64,D9,0F,0A), V(21,A6,5C,68), V(D1,54,5B,9B), V(3A,2E,36,24), \\\n    V(B1,67,0A,0C), V(0F,E7,57,93), V(D2,96,EE,B4), V(9E,91,9B,1B), \\\n    V(4F,C5,C0,80), V(A2,20,DC,61), V(69,4B,77,5A), V(16,1A,12,1C), \\\n    V(0A,BA,93,E2), V(E5,2A,A0,C0), V(43,E0,22,3C), V(1D,17,1B,12), \\\n    V(0B,0D,09,0E), V(AD,C7,8B,F2), V(B9,A8,B6,2D), V(C8,A9,1E,14), \\\n    V(85,19,F1,57), V(4C,07,75,AF), V(BB,DD,99,EE), V(FD,60,7F,A3), \\\n    V(9F,26,01,F7), V(BC,F5,72,5C), V(C5,3B,66,44), V(34,7E,FB,5B), \\\n    V(76,29,43,8B), V(DC,C6,23,CB), V(68,FC,ED,B6), V(63,F1,E4,B8), \\\n    V(CA,DC,31,D7), V(10,85,63,42), V(40,22,97,13), V(20,11,C6,84), \\\n    V(7D,24,4A,85), V(F8,3D,BB,D2), V(11,32,F9,AE), V(6D,A1,29,C7), \\\n    V(4B,2F,9E,1D), V(F3,30,B2,DC), V(EC,52,86,0D), V(D0,E3,C1,77), \\\n    V(6C,16,B3,2B), V(99,B9,70,A9), V(FA,48,94,11), V(22,64,E9,47), \\\n    V(C4,8C,FC,A8), V(1A,3F,F0,A0), V(D8,2C,7D,56), V(EF,90,33,22), \\\n    V(C7,4E,49,87), V(C1,D1,38,D9), V(FE,A2,CA,8C), V(36,0B,D4,98), \\\n    V(CF,81,F5,A6), V(28,DE,7A,A5), V(26,8E,B7,DA), V(A4,BF,AD,3F), \\\n    V(E4,9D,3A,2C), V(0D,92,78,50), V(9B,CC,5F,6A), V(62,46,7E,54), \\\n    V(C2,13,8D,F6), V(E8,B8,D8,90), V(5E,F7,39,2E), V(F5,AF,C3,82), \\\n    V(BE,80,5D,9F), V(7C,93,D0,69), V(A9,2D,D5,6F), V(B3,12,25,CF), \\\n    V(3B,99,AC,C8), V(A7,7D,18,10), V(6E,63,9C,E8), V(7B,BB,3B,DB), \\\n    V(09,78,26,CD), V(F4,18,59,6E), V(01,B7,9A,EC), V(A8,9A,4F,83), \\\n    V(65,6E,95,E6), V(7E,E6,FF,AA), V(08,CF,BC,21), V(E6,E8,15,EF), \\\n    V(D9,9B,E7,BA), V(CE,36,6F,4A), V(D4,09,9F,EA), V(D6,7C,B0,29), \\\n    V(AF,B2,A4,31), V(31,23,3F,2A), V(30,94,A5,C6), V(C0,66,A2,35), \\\n    V(37,BC,4E,74), V(A6,CA,82,FC), V(B0,D0,90,E0), V(15,D8,A7,33), \\\n    V(4A,98,04,F1), V(F7,DA,EC,41), V(0E,50,CD,7F), V(2F,F6,91,17), \\\n    V(8D,D6,4D,76), V(4D,B0,EF,43), V(54,4D,AA,CC), V(DF,04,96,E4), \\\n    V(E3,B5,D1,9E), V(1B,88,6A,4C), V(B8,1F,2C,C1), V(7F,51,65,46), \\\n    V(04,EA,5E,9D), V(5D,35,8C,01), V(73,74,87,FA), V(2E,41,0B,FB), \\\n    V(5A,1D,67,B3), V(52,D2,DB,92), V(33,56,10,E9), V(13,47,D6,6D), \\\n    V(8C,61,D7,9A), V(7A,0C,A1,37), V(8E,14,F8,59), V(89,3C,13,EB), \\\n    V(EE,27,A9,CE), V(35,C9,61,B7), V(ED,E5,1C,E1), V(3C,B1,47,7A), \\\n    V(59,DF,D2,9C), V(3F,73,F2,55), V(79,CE,14,18), V(BF,37,C7,73), \\\n    V(EA,CD,F7,53), V(5B,AA,FD,5F), V(14,6F,3D,DF), V(86,DB,44,78), \\\n    V(81,F3,AF,CA), V(3E,C4,68,B9), V(2C,34,24,38), V(5F,40,A3,C2), \\\n    V(72,C3,1D,16), V(0C,25,E2,BC), V(8B,49,3C,28), V(41,95,0D,FF), \\\n    V(71,01,A8,39), V(DE,B3,0C,08), V(9C,E4,B4,D8), V(90,C1,56,64), \\\n    V(61,84,CB,7B), V(70,B6,32,D5), V(74,5C,6C,48), V(42,57,B8,D0)\n\n#define V(a,b,c,d) 0x##a##b##c##d\nstatic const uint32_t RT0[256] = { RT };\n#undef V\n\n#define V(a,b,c,d) 0x##b##c##d##a\nstatic const uint32_t RT1[256] = { RT };\n#undef V\n\n#define V(a,b,c,d) 0x##c##d##a##b\nstatic const uint32_t RT2[256] = { RT };\n#undef V\n\n#define V(a,b,c,d) 0x##d##a##b##c\nstatic const uint32_t RT3[256] = { RT };\n#undef V\n\n#undef RT\n\n/*\n * Round constants\n */\nstatic const uint32_t RCON[10] =\n{\n    0x00000001, 0x00000002, 0x00000004, 0x00000008,\n    0x00000010, 0x00000020, 0x00000040, 0x00000080,\n    0x0000001B, 0x00000036\n};\n\n#else /* MBEDTLS_AES_ROM_TABLES */\n\n/*\n * Forward S-box & tables\n */\nstatic unsigned char FSb[256];\nstatic uint32_t FT0[256];\nstatic uint32_t FT1[256];\nstatic uint32_t FT2[256];\nstatic uint32_t FT3[256];\n\n/*\n * Reverse S-box & tables\n */\nstatic unsigned char RSb[256];\nstatic uint32_t RT0[256];\nstatic uint32_t RT1[256];\nstatic uint32_t RT2[256];\nstatic uint32_t RT3[256];\n\n/*\n * Round constants\n */\nstatic uint32_t RCON[10];\n\n/*\n * Tables generation code\n */\n#define ROTL8(x) ( ( x << 8 ) & 0xFFFFFFFF ) | ( x >> 24 )\n#define XTIME(x) ( ( x << 1 ) ^ ( ( x & 0x80 ) ? 0x1B : 0x00 ) )\n#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )\n\nstatic int aes_init_done = 0;\n\nstatic void aes_gen_tables( void )\n{\n    int i, x, y, z;\n    int pow[256];\n    int log[256];\n\n    /*\n     * compute pow and log tables over GF(2^8)\n     */\n    for( i = 0, x = 1; i < 256; i++ )\n    {\n        pow[i] = x;\n        log[x] = i;\n        x = ( x ^ XTIME( x ) ) & 0xFF;\n    }\n\n    /*\n     * calculate the round constants\n     */\n    for( i = 0, x = 1; i < 10; i++ )\n    {\n        RCON[i] = (uint32_t) x;\n        x = XTIME( x ) & 0xFF;\n    }\n\n    /*\n     * generate the forward and reverse S-boxes\n     */\n    FSb[0x00] = 0x63;\n    RSb[0x63] = 0x00;\n\n    for( i = 1; i < 256; i++ )\n    {\n        x = pow[255 - log[i]];\n\n        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;\n        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;\n        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;\n        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;\n        x ^= y ^ 0x63;\n\n        FSb[i] = (unsigned char) x;\n        RSb[x] = (unsigned char) i;\n    }\n\n    /*\n     * generate the forward and reverse tables\n     */\n    for( i = 0; i < 256; i++ )\n    {\n        x = FSb[i];\n        y = XTIME( x ) & 0xFF;\n        z =  ( y ^ x ) & 0xFF;\n\n        FT0[i] = ( (uint32_t) y       ) ^\n                 ( (uint32_t) x <<  8 ) ^\n                 ( (uint32_t) x << 16 ) ^\n                 ( (uint32_t) z << 24 );\n\n        FT1[i] = ROTL8( FT0[i] );\n        FT2[i] = ROTL8( FT1[i] );\n        FT3[i] = ROTL8( FT2[i] );\n\n        x = RSb[i];\n\n        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^\n                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^\n                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^\n                 ( (uint32_t) MUL( 0x0B, x ) << 24 );\n\n        RT1[i] = ROTL8( RT0[i] );\n        RT2[i] = ROTL8( RT1[i] );\n        RT3[i] = ROTL8( RT2[i] );\n    }\n}\n\n#endif /* MBEDTLS_AES_ROM_TABLES */\n\nvoid mbedtls_aes_init( mbedtls_aes_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_aes_context ) );\n}\n\nvoid mbedtls_aes_free( mbedtls_aes_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );\n}\n\n/*\n * AES key schedule (encryption)\n */\n#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)\nint mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,\n                    unsigned int keybits )\n{\n    unsigned int i;\n    uint32_t *RK;\n\n#if !defined(MBEDTLS_AES_ROM_TABLES)\n    if( aes_init_done == 0 )\n    {\n        aes_gen_tables();\n        aes_init_done = 1;\n\n    }\n#endif\n\n    switch( keybits )\n    {\n        case 128: ctx->nr = 10; break;\n        case 192: ctx->nr = 12; break;\n        case 256: ctx->nr = 14; break;\n        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );\n    }\n\n#if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_PADLOCK_ALIGN16)\n    if( aes_padlock_ace == -1 )\n        aes_padlock_ace = mbedtls_padlock_has_support( MBEDTLS_PADLOCK_ACE );\n\n    if( aes_padlock_ace )\n        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );\n    else\n#endif\n    ctx->rk = RK = ctx->buf;\n\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )\n        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );\n#endif\n\n    for( i = 0; i < ( keybits >> 5 ); i++ )\n    {\n        GET_UINT32_LE( RK[i], key, i << 2 );\n    }\n\n    switch( ctx->nr )\n    {\n        case 10:\n\n            for( i = 0; i < 10; i++, RK += 4 )\n            {\n                RK[4]  = RK[0] ^ RCON[i] ^\n                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^\n                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^\n                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^\n                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );\n\n                RK[5]  = RK[1] ^ RK[4];\n                RK[6]  = RK[2] ^ RK[5];\n                RK[7]  = RK[3] ^ RK[6];\n            }\n            break;\n\n        case 12:\n\n            for( i = 0; i < 8; i++, RK += 6 )\n            {\n                RK[6]  = RK[0] ^ RCON[i] ^\n                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^\n                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^\n                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^\n                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );\n\n                RK[7]  = RK[1] ^ RK[6];\n                RK[8]  = RK[2] ^ RK[7];\n                RK[9]  = RK[3] ^ RK[8];\n                RK[10] = RK[4] ^ RK[9];\n                RK[11] = RK[5] ^ RK[10];\n            }\n            break;\n\n        case 14:\n\n            for( i = 0; i < 7; i++, RK += 8 )\n            {\n                RK[8]  = RK[0] ^ RCON[i] ^\n                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^\n                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^\n                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^\n                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );\n\n                RK[9]  = RK[1] ^ RK[8];\n                RK[10] = RK[2] ^ RK[9];\n                RK[11] = RK[3] ^ RK[10];\n\n                RK[12] = RK[4] ^\n                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^\n                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^\n                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^\n                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );\n\n                RK[13] = RK[5] ^ RK[12];\n                RK[14] = RK[6] ^ RK[13];\n                RK[15] = RK[7] ^ RK[14];\n            }\n            break;\n    }\n\n    return( 0 );\n}\n#endif /* !MBEDTLS_AES_SETKEY_ENC_ALT */\n\n/*\n * AES key schedule (decryption)\n */\n#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)\nint mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,\n                    unsigned int keybits )\n{\n    int i, j, ret;\n    mbedtls_aes_context cty;\n    uint32_t *RK;\n    uint32_t *SK;\n\n    mbedtls_aes_init( &cty );\n\n#if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_PADLOCK_ALIGN16)\n    if( aes_padlock_ace == -1 )\n        aes_padlock_ace = mbedtls_padlock_has_support( MBEDTLS_PADLOCK_ACE );\n\n    if( aes_padlock_ace )\n        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );\n    else\n#endif\n    ctx->rk = RK = ctx->buf;\n\n    /* Also checks keybits */\n    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )\n        goto exit;\n\n    ctx->nr = cty.nr;\n\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )\n    {\n        mbedtls_aesni_inverse_key( (unsigned char *) ctx->rk,\n                           (const unsigned char *) cty.rk, ctx->nr );\n        goto exit;\n    }\n#endif\n\n    SK = cty.rk + cty.nr * 4;\n\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n\n    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )\n    {\n        for( j = 0; j < 4; j++, SK++ )\n        {\n            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^\n                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^\n                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^\n                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];\n        }\n    }\n\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n    *RK++ = *SK++;\n\nexit:\n    mbedtls_aes_free( &cty );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_AES_SETKEY_DEC_ALT */\n\n#define AES_FROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)     \\\n{                                               \\\n    X0 = *RK++ ^ FT0[ ( Y0       ) & 0xFF ] ^   \\\n                 FT1[ ( Y1 >>  8 ) & 0xFF ] ^   \\\n                 FT2[ ( Y2 >> 16 ) & 0xFF ] ^   \\\n                 FT3[ ( Y3 >> 24 ) & 0xFF ];    \\\n                                                \\\n    X1 = *RK++ ^ FT0[ ( Y1       ) & 0xFF ] ^   \\\n                 FT1[ ( Y2 >>  8 ) & 0xFF ] ^   \\\n                 FT2[ ( Y3 >> 16 ) & 0xFF ] ^   \\\n                 FT3[ ( Y0 >> 24 ) & 0xFF ];    \\\n                                                \\\n    X2 = *RK++ ^ FT0[ ( Y2       ) & 0xFF ] ^   \\\n                 FT1[ ( Y3 >>  8 ) & 0xFF ] ^   \\\n                 FT2[ ( Y0 >> 16 ) & 0xFF ] ^   \\\n                 FT3[ ( Y1 >> 24 ) & 0xFF ];    \\\n                                                \\\n    X3 = *RK++ ^ FT0[ ( Y3       ) & 0xFF ] ^   \\\n                 FT1[ ( Y0 >>  8 ) & 0xFF ] ^   \\\n                 FT2[ ( Y1 >> 16 ) & 0xFF ] ^   \\\n                 FT3[ ( Y2 >> 24 ) & 0xFF ];    \\\n}\n\n#define AES_RROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)     \\\n{                                               \\\n    X0 = *RK++ ^ RT0[ ( Y0       ) & 0xFF ] ^   \\\n                 RT1[ ( Y3 >>  8 ) & 0xFF ] ^   \\\n                 RT2[ ( Y2 >> 16 ) & 0xFF ] ^   \\\n                 RT3[ ( Y1 >> 24 ) & 0xFF ];    \\\n                                                \\\n    X1 = *RK++ ^ RT0[ ( Y1       ) & 0xFF ] ^   \\\n                 RT1[ ( Y0 >>  8 ) & 0xFF ] ^   \\\n                 RT2[ ( Y3 >> 16 ) & 0xFF ] ^   \\\n                 RT3[ ( Y2 >> 24 ) & 0xFF ];    \\\n                                                \\\n    X2 = *RK++ ^ RT0[ ( Y2       ) & 0xFF ] ^   \\\n                 RT1[ ( Y1 >>  8 ) & 0xFF ] ^   \\\n                 RT2[ ( Y0 >> 16 ) & 0xFF ] ^   \\\n                 RT3[ ( Y3 >> 24 ) & 0xFF ];    \\\n                                                \\\n    X3 = *RK++ ^ RT0[ ( Y3       ) & 0xFF ] ^   \\\n                 RT1[ ( Y2 >>  8 ) & 0xFF ] ^   \\\n                 RT2[ ( Y1 >> 16 ) & 0xFF ] ^   \\\n                 RT3[ ( Y0 >> 24 ) & 0xFF ];    \\\n}\n\n/*\n * AES-ECB block encryption\n */\n#if !defined(MBEDTLS_AES_ENCRYPT_ALT)\nint mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,\n                                  const unsigned char input[16],\n                                  unsigned char output[16] )\n{\n    int i;\n    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;\n\n    RK = ctx->rk;\n\n    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;\n    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;\n    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;\n    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;\n\n    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )\n    {\n        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );\n        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );\n    }\n\n    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );\n\n    X0 = *RK++ ^ \\\n            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^\n            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );\n\n    X1 = *RK++ ^ \\\n            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^\n            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );\n\n    X2 = *RK++ ^ \\\n            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^\n            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );\n\n    X3 = *RK++ ^ \\\n            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^\n            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );\n\n    PUT_UINT32_LE( X0, output,  0 );\n    PUT_UINT32_LE( X1, output,  4 );\n    PUT_UINT32_LE( X2, output,  8 );\n    PUT_UINT32_LE( X3, output, 12 );\n\n    return( 0 );\n}\n#endif /* !MBEDTLS_AES_ENCRYPT_ALT */\n\nvoid mbedtls_aes_encrypt( mbedtls_aes_context *ctx,\n                          const unsigned char input[16],\n                          unsigned char output[16] )\n{\n    mbedtls_internal_aes_encrypt( ctx, input, output );\n}\n\n/*\n * AES-ECB block decryption\n */\n#if !defined(MBEDTLS_AES_DECRYPT_ALT)\nint mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,\n                                  const unsigned char input[16],\n                                  unsigned char output[16] )\n{\n    int i;\n    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;\n\n    RK = ctx->rk;\n\n    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;\n    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;\n    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;\n    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;\n\n    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )\n    {\n        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );\n        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );\n    }\n\n    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );\n\n    X0 = *RK++ ^ \\\n            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^\n            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );\n\n    X1 = *RK++ ^ \\\n            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^\n            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );\n\n    X2 = *RK++ ^ \\\n            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^\n            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );\n\n    X3 = *RK++ ^ \\\n            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^\n            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^\n            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^\n            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );\n\n    PUT_UINT32_LE( X0, output,  0 );\n    PUT_UINT32_LE( X1, output,  4 );\n    PUT_UINT32_LE( X2, output,  8 );\n    PUT_UINT32_LE( X3, output, 12 );\n\n    return( 0 );\n}\n#endif /* !MBEDTLS_AES_DECRYPT_ALT */\n\nvoid mbedtls_aes_decrypt( mbedtls_aes_context *ctx,\n                          const unsigned char input[16],\n                          unsigned char output[16] )\n{\n    mbedtls_internal_aes_decrypt( ctx, input, output );\n}\n\n/*\n * AES-ECB block encryption/decryption\n */\nint mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,\n                    int mode,\n                    const unsigned char input[16],\n                    unsigned char output[16] )\n{\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )\n        return( mbedtls_aesni_crypt_ecb( ctx, mode, input, output ) );\n#endif\n\n#if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)\n    if( aes_padlock_ace )\n    {\n        if( mbedtls_padlock_xcryptecb( ctx, mode, input, output ) == 0 )\n            return( 0 );\n\n        // If padlock data misaligned, we just fall back to\n        // unaccelerated mode\n        //\n    }\n#endif\n\n    if( mode == MBEDTLS_AES_ENCRYPT )\n        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );\n    else\n        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n/*\n * AES-CBC buffer encryption/decryption\n */\nint mbedtls_aes_crypt_cbc( mbedtls_aes_context *ctx,\n                    int mode,\n                    size_t length,\n                    unsigned char iv[16],\n                    const unsigned char *input,\n                    unsigned char *output )\n{\n    int i;\n    unsigned char temp[16];\n\n    if( length % 16 )\n        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );\n\n#if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)\n    if( aes_padlock_ace )\n    {\n        if( mbedtls_padlock_xcryptcbc( ctx, mode, length, iv, input, output ) == 0 )\n            return( 0 );\n\n        // If padlock data misaligned, we just fall back to\n        // unaccelerated mode\n        //\n    }\n#endif\n\n    if( mode == MBEDTLS_AES_DECRYPT )\n    {\n        while( length > 0 )\n        {\n            memcpy( temp, input, 16 );\n            mbedtls_aes_crypt_ecb( ctx, mode, input, output );\n\n            for( i = 0; i < 16; i++ )\n                output[i] = (unsigned char)( output[i] ^ iv[i] );\n\n            memcpy( iv, temp, 16 );\n\n            input  += 16;\n            output += 16;\n            length -= 16;\n        }\n    }\n    else\n    {\n        while( length > 0 )\n        {\n            for( i = 0; i < 16; i++ )\n                output[i] = (unsigned char)( input[i] ^ iv[i] );\n\n            mbedtls_aes_crypt_ecb( ctx, mode, output, output );\n            memcpy( iv, output, 16 );\n\n            input  += 16;\n            output += 16;\n            length -= 16;\n        }\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n/*\n * AES-CFB128 buffer encryption/decryption\n */\nint mbedtls_aes_crypt_cfb128( mbedtls_aes_context *ctx,\n                       int mode,\n                       size_t length,\n                       size_t *iv_off,\n                       unsigned char iv[16],\n                       const unsigned char *input,\n                       unsigned char *output )\n{\n    int c;\n    size_t n = *iv_off;\n\n    if( mode == MBEDTLS_AES_DECRYPT )\n    {\n        while( length-- )\n        {\n            if( n == 0 )\n                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );\n\n            c = *input++;\n            *output++ = (unsigned char)( c ^ iv[n] );\n            iv[n] = (unsigned char) c;\n\n            n = ( n + 1 ) & 0x0F;\n        }\n    }\n    else\n    {\n        while( length-- )\n        {\n            if( n == 0 )\n                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );\n\n            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );\n\n            n = ( n + 1 ) & 0x0F;\n        }\n    }\n\n    *iv_off = n;\n\n    return( 0 );\n}\n\n/*\n * AES-CFB8 buffer encryption/decryption\n */\nint mbedtls_aes_crypt_cfb8( mbedtls_aes_context *ctx,\n                       int mode,\n                       size_t length,\n                       unsigned char iv[16],\n                       const unsigned char *input,\n                       unsigned char *output )\n{\n    unsigned char c;\n    unsigned char ov[17];\n\n    while( length-- )\n    {\n        memcpy( ov, iv, 16 );\n        mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n            ov[16] = *input;\n\n        c = *output++ = (unsigned char)( iv[0] ^ *input++ );\n\n        if( mode == MBEDTLS_AES_ENCRYPT )\n            ov[16] = c;\n\n        memcpy( iv, ov + 1, 16 );\n    }\n\n    return( 0 );\n}\n#endif /*MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n/*\n * AES-CTR buffer encryption/decryption\n */\nint mbedtls_aes_crypt_ctr( mbedtls_aes_context *ctx,\n                       size_t length,\n                       size_t *nc_off,\n                       unsigned char nonce_counter[16],\n                       unsigned char stream_block[16],\n                       const unsigned char *input,\n                       unsigned char *output )\n{\n    int c, i;\n    size_t n = *nc_off;\n\n    while( length-- )\n    {\n        if( n == 0 ) {\n            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );\n\n            for( i = 16; i > 0; i-- )\n                if( ++nonce_counter[i - 1] != 0 )\n                    break;\n        }\n        c = *input++;\n        *output++ = (unsigned char)( c ^ stream_block[n] );\n\n        n = ( n + 1 ) & 0x0F;\n    }\n\n    *nc_off = n;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#endif /* !MBEDTLS_AES_ALT */\n\n#if defined(MBEDTLS_SELF_TEST)\n/*\n * AES test vectors from:\n *\n * http://csrc.nist.gov/archive/aes/rijndael/rijndael-vals.zip\n */\nstatic const unsigned char aes_test_ecb_dec[3][16] =\n{\n    { 0x44, 0x41, 0x6A, 0xC2, 0xD1, 0xF5, 0x3C, 0x58,\n      0x33, 0x03, 0x91, 0x7E, 0x6B, 0xE9, 0xEB, 0xE0 },\n    { 0x48, 0xE3, 0x1E, 0x9E, 0x25, 0x67, 0x18, 0xF2,\n      0x92, 0x29, 0x31, 0x9C, 0x19, 0xF1, 0x5B, 0xA4 },\n    { 0x05, 0x8C, 0xCF, 0xFD, 0xBB, 0xCB, 0x38, 0x2D,\n      0x1F, 0x6F, 0x56, 0x58, 0x5D, 0x8A, 0x4A, 0xDE }\n};\n\nstatic const unsigned char aes_test_ecb_enc[3][16] =\n{\n    { 0xC3, 0x4C, 0x05, 0x2C, 0xC0, 0xDA, 0x8D, 0x73,\n      0x45, 0x1A, 0xFE, 0x5F, 0x03, 0xBE, 0x29, 0x7F },\n    { 0xF3, 0xF6, 0x75, 0x2A, 0xE8, 0xD7, 0x83, 0x11,\n      0x38, 0xF0, 0x41, 0x56, 0x06, 0x31, 0xB1, 0x14 },\n    { 0x8B, 0x79, 0xEE, 0xCC, 0x93, 0xA0, 0xEE, 0x5D,\n      0xFF, 0x30, 0xB4, 0xEA, 0x21, 0x63, 0x6D, 0xA4 }\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const unsigned char aes_test_cbc_dec[3][16] =\n{\n    { 0xFA, 0xCA, 0x37, 0xE0, 0xB0, 0xC8, 0x53, 0x73,\n      0xDF, 0x70, 0x6E, 0x73, 0xF7, 0xC9, 0xAF, 0x86 },\n    { 0x5D, 0xF6, 0x78, 0xDD, 0x17, 0xBA, 0x4E, 0x75,\n      0xB6, 0x17, 0x68, 0xC6, 0xAD, 0xEF, 0x7C, 0x7B },\n    { 0x48, 0x04, 0xE1, 0x81, 0x8F, 0xE6, 0x29, 0x75,\n      0x19, 0xA3, 0xE8, 0x8C, 0x57, 0x31, 0x04, 0x13 }\n};\n\nstatic const unsigned char aes_test_cbc_enc[3][16] =\n{\n    { 0x8A, 0x05, 0xFC, 0x5E, 0x09, 0x5A, 0xF4, 0x84,\n      0x8A, 0x08, 0xD3, 0x28, 0xD3, 0x68, 0x8E, 0x3D },\n    { 0x7B, 0xD9, 0x66, 0xD5, 0x3A, 0xD8, 0xC1, 0xBB,\n      0x85, 0xD2, 0xAD, 0xFA, 0xE8, 0x7B, 0xB1, 0x04 },\n    { 0xFE, 0x3C, 0x53, 0x65, 0x3E, 0x2F, 0x45, 0xB5,\n      0x6F, 0xCD, 0x88, 0xB2, 0xCC, 0x89, 0x8F, 0xF0 }\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n/*\n * AES-CFB128 test vectors from:\n *\n * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\n */\nstatic const unsigned char aes_test_cfb128_key[3][32] =\n{\n    { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,\n      0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C },\n    { 0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52,\n      0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,\n      0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B },\n    { 0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,\n      0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,\n      0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,\n      0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4 }\n};\n\nstatic const unsigned char aes_test_cfb128_iv[16] =\n{\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F\n};\n\nstatic const unsigned char aes_test_cfb128_pt[64] =\n{\n    0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,\n    0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,\n    0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,\n    0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,\n    0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,\n    0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,\n    0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,\n    0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10\n};\n\nstatic const unsigned char aes_test_cfb128_ct[3][64] =\n{\n    { 0x3B, 0x3F, 0xD9, 0x2E, 0xB7, 0x2D, 0xAD, 0x20,\n      0x33, 0x34, 0x49, 0xF8, 0xE8, 0x3C, 0xFB, 0x4A,\n      0xC8, 0xA6, 0x45, 0x37, 0xA0, 0xB3, 0xA9, 0x3F,\n      0xCD, 0xE3, 0xCD, 0xAD, 0x9F, 0x1C, 0xE5, 0x8B,\n      0x26, 0x75, 0x1F, 0x67, 0xA3, 0xCB, 0xB1, 0x40,\n      0xB1, 0x80, 0x8C, 0xF1, 0x87, 0xA4, 0xF4, 0xDF,\n      0xC0, 0x4B, 0x05, 0x35, 0x7C, 0x5D, 0x1C, 0x0E,\n      0xEA, 0xC4, 0xC6, 0x6F, 0x9F, 0xF7, 0xF2, 0xE6 },\n    { 0xCD, 0xC8, 0x0D, 0x6F, 0xDD, 0xF1, 0x8C, 0xAB,\n      0x34, 0xC2, 0x59, 0x09, 0xC9, 0x9A, 0x41, 0x74,\n      0x67, 0xCE, 0x7F, 0x7F, 0x81, 0x17, 0x36, 0x21,\n      0x96, 0x1A, 0x2B, 0x70, 0x17, 0x1D, 0x3D, 0x7A,\n      0x2E, 0x1E, 0x8A, 0x1D, 0xD5, 0x9B, 0x88, 0xB1,\n      0xC8, 0xE6, 0x0F, 0xED, 0x1E, 0xFA, 0xC4, 0xC9,\n      0xC0, 0x5F, 0x9F, 0x9C, 0xA9, 0x83, 0x4F, 0xA0,\n      0x42, 0xAE, 0x8F, 0xBA, 0x58, 0x4B, 0x09, 0xFF },\n    { 0xDC, 0x7E, 0x84, 0xBF, 0xDA, 0x79, 0x16, 0x4B,\n      0x7E, 0xCD, 0x84, 0x86, 0x98, 0x5D, 0x38, 0x60,\n      0x39, 0xFF, 0xED, 0x14, 0x3B, 0x28, 0xB1, 0xC8,\n      0x32, 0x11, 0x3C, 0x63, 0x31, 0xE5, 0x40, 0x7B,\n      0xDF, 0x10, 0x13, 0x24, 0x15, 0xE5, 0x4B, 0x92,\n      0xA1, 0x3E, 0xD0, 0xA8, 0x26, 0x7A, 0xE2, 0xF9,\n      0x75, 0xA3, 0x85, 0x74, 0x1A, 0xB9, 0xCE, 0xF8,\n      0x20, 0x31, 0x62, 0x3D, 0x55, 0xB1, 0xE4, 0x71 }\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n/*\n * AES-CTR test vectors from:\n *\n * http://www.faqs.org/rfcs/rfc3686.html\n */\n\nstatic const unsigned char aes_test_ctr_key[3][16] =\n{\n    { 0xAE, 0x68, 0x52, 0xF8, 0x12, 0x10, 0x67, 0xCC,\n      0x4B, 0xF7, 0xA5, 0x76, 0x55, 0x77, 0xF3, 0x9E },\n    { 0x7E, 0x24, 0x06, 0x78, 0x17, 0xFA, 0xE0, 0xD7,\n      0x43, 0xD6, 0xCE, 0x1F, 0x32, 0x53, 0x91, 0x63 },\n    { 0x76, 0x91, 0xBE, 0x03, 0x5E, 0x50, 0x20, 0xA8,\n      0xAC, 0x6E, 0x61, 0x85, 0x29, 0xF9, 0xA0, 0xDC }\n};\n\nstatic const unsigned char aes_test_ctr_nonce_counter[3][16] =\n{\n    { 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },\n    { 0x00, 0x6C, 0xB6, 0xDB, 0xC0, 0x54, 0x3B, 0x59,\n      0xDA, 0x48, 0xD9, 0x0B, 0x00, 0x00, 0x00, 0x01 },\n    { 0x00, 0xE0, 0x01, 0x7B, 0x27, 0x77, 0x7F, 0x3F,\n      0x4A, 0x17, 0x86, 0xF0, 0x00, 0x00, 0x00, 0x01 }\n};\n\nstatic const unsigned char aes_test_ctr_pt[3][48] =\n{\n    { 0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62,\n      0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67 },\n\n    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,\n      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n      0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F },\n\n    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,\n      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n      0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,\n      0x20, 0x21, 0x22, 0x23 }\n};\n\nstatic const unsigned char aes_test_ctr_ct[3][48] =\n{\n    { 0xE4, 0x09, 0x5D, 0x4F, 0xB7, 0xA7, 0xB3, 0x79,\n      0x2D, 0x61, 0x75, 0xA3, 0x26, 0x13, 0x11, 0xB8 },\n    { 0x51, 0x04, 0xA1, 0x06, 0x16, 0x8A, 0x72, 0xD9,\n      0x79, 0x0D, 0x41, 0xEE, 0x8E, 0xDA, 0xD3, 0x88,\n      0xEB, 0x2E, 0x1E, 0xFC, 0x46, 0xDA, 0x57, 0xC8,\n      0xFC, 0xE6, 0x30, 0xDF, 0x91, 0x41, 0xBE, 0x28 },\n    { 0xC1, 0xCF, 0x48, 0xA8, 0x9F, 0x2F, 0xFD, 0xD9,\n      0xCF, 0x46, 0x52, 0xE9, 0xEF, 0xDB, 0x72, 0xD7,\n      0x45, 0x40, 0xA4, 0x2B, 0xDE, 0x6D, 0x78, 0x36,\n      0xD5, 0x9A, 0x5C, 0xEA, 0xAE, 0xF3, 0x10, 0x53,\n      0x25, 0xB2, 0x07, 0x2F }\n};\n\nstatic const int aes_test_ctr_len[3] =\n    { 16, 32, 36 };\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n/*\n * Checkup routine\n */\nint mbedtls_aes_self_test( int verbose )\n{\n    int ret = 0, i, j, u, mode;\n    unsigned int keybits;\n    unsigned char key[32];\n    unsigned char buf[64];\n    const unsigned char *aes_tests;\n#if defined(MBEDTLS_CIPHER_MODE_CBC) || defined(MBEDTLS_CIPHER_MODE_CFB)\n    unsigned char iv[16];\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    unsigned char prv[16];\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR) || defined(MBEDTLS_CIPHER_MODE_CFB)\n    size_t offset;\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    int len;\n    unsigned char nonce_counter[16];\n    unsigned char stream_block[16];\n#endif\n    mbedtls_aes_context ctx;\n\n    memset( key, 0, 32 );\n    mbedtls_aes_init( &ctx );\n\n    /*\n     * ECB mode\n     */\n    for( i = 0; i < 6; i++ )\n    {\n        u = i >> 1;\n        keybits = 128 + u * 64;\n        mode = i & 1;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  AES-ECB-%3d (%s): \", keybits,\n                            ( mode == MBEDTLS_AES_DECRYPT ) ? \"dec\" : \"enc\" );\n\n        memset( buf, 0, 16 );\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n        {\n            ret = mbedtls_aes_setkey_dec( &ctx, key, keybits );\n            aes_tests = aes_test_ecb_dec[u];\n        }\n        else\n        {\n            ret = mbedtls_aes_setkey_enc( &ctx, key, keybits );\n            aes_tests = aes_test_ecb_enc[u];\n        }\n\n        /*\n         * AES-192 is an optional feature that may be unavailable when\n         * there is an alternative underlying implementation i.e. when\n         * MBEDTLS_AES_ALT is defined.\n         */\n        if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && keybits == 192 )\n        {\n            mbedtls_printf( \"skipped\\n\" );\n            continue;\n        }\n        else if( ret != 0 )\n        {\n            goto exit;\n        }\n\n        for( j = 0; j < 10000; j++ )\n        {\n            ret = mbedtls_aes_crypt_ecb( &ctx, mode, buf, buf );\n            if( ret != 0 )\n                goto exit;\n        }\n\n        if( memcmp( buf, aes_tests, 16 ) != 0 )\n        {\n            ret = 1;\n            goto exit;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    /*\n     * CBC mode\n     */\n    for( i = 0; i < 6; i++ )\n    {\n        u = i >> 1;\n        keybits = 128 + u * 64;\n        mode = i & 1;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  AES-CBC-%3d (%s): \", keybits,\n                            ( mode == MBEDTLS_AES_DECRYPT ) ? \"dec\" : \"enc\" );\n\n        memset( iv , 0, 16 );\n        memset( prv, 0, 16 );\n        memset( buf, 0, 16 );\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n        {\n            ret = mbedtls_aes_setkey_dec( &ctx, key, keybits );\n            aes_tests = aes_test_cbc_dec[u];\n        }\n        else\n        {\n            ret = mbedtls_aes_setkey_enc( &ctx, key, keybits );\n            aes_tests = aes_test_cbc_enc[u];\n        }\n\n        /*\n         * AES-192 is an optional feature that may be unavailable when\n         * there is an alternative underlying implementation i.e. when\n         * MBEDTLS_AES_ALT is defined.\n         */\n        if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && keybits == 192 )\n        {\n            mbedtls_printf( \"skipped\\n\" );\n            continue;\n        }\n        else if( ret != 0 )\n        {\n            goto exit;\n        }\n\n        for( j = 0; j < 10000; j++ )\n        {\n            if( mode == MBEDTLS_AES_ENCRYPT )\n            {\n                unsigned char tmp[16];\n\n                memcpy( tmp, prv, 16 );\n                memcpy( prv, buf, 16 );\n                memcpy( buf, tmp, 16 );\n            }\n\n            ret = mbedtls_aes_crypt_cbc( &ctx, mode, 16, iv, buf, buf );\n            if( ret != 0 )\n                goto exit;\n\n        }\n\n        if( memcmp( buf, aes_tests, 16 ) != 0 )\n        {\n            ret = 1;\n            goto exit;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    /*\n     * CFB128 mode\n     */\n    for( i = 0; i < 6; i++ )\n    {\n        u = i >> 1;\n        keybits = 128 + u * 64;\n        mode = i & 1;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  AES-CFB128-%3d (%s): \", keybits,\n                            ( mode == MBEDTLS_AES_DECRYPT ) ? \"dec\" : \"enc\" );\n\n        memcpy( iv,  aes_test_cfb128_iv, 16 );\n        memcpy( key, aes_test_cfb128_key[u], keybits / 8 );\n\n        offset = 0;\n        ret = mbedtls_aes_setkey_enc( &ctx, key, keybits );\n        /*\n         * AES-192 is an optional feature that may be unavailable when\n         * there is an alternative underlying implementation i.e. when\n         * MBEDTLS_AES_ALT is defined.\n         */\n        if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && keybits == 192 )\n        {\n            mbedtls_printf( \"skipped\\n\" );\n            continue;\n        }\n        else if( ret != 0 )\n        {\n            goto exit;\n        }\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n        {\n            memcpy( buf, aes_test_cfb128_ct[u], 64 );\n            aes_tests = aes_test_cfb128_pt;\n        }\n        else\n        {\n            memcpy( buf, aes_test_cfb128_pt, 64 );\n            aes_tests = aes_test_cfb128_ct[u];\n        }\n\n        ret = mbedtls_aes_crypt_cfb128( &ctx, mode, 64, &offset, iv, buf, buf );\n        if( ret != 0 )\n            goto exit;\n\n        if( memcmp( buf, aes_tests, 64 ) != 0 )\n        {\n            ret = 1;\n            goto exit;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    /*\n     * CTR mode\n     */\n    for( i = 0; i < 6; i++ )\n    {\n        u = i >> 1;\n        mode = i & 1;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  AES-CTR-128 (%s): \",\n                            ( mode == MBEDTLS_AES_DECRYPT ) ? \"dec\" : \"enc\" );\n\n        memcpy( nonce_counter, aes_test_ctr_nonce_counter[u], 16 );\n        memcpy( key, aes_test_ctr_key[u], 16 );\n\n        offset = 0;\n        if( ( ret = mbedtls_aes_setkey_enc( &ctx, key, 128 ) ) != 0 )\n            goto exit;\n\n        len = aes_test_ctr_len[u];\n\n        if( mode == MBEDTLS_AES_DECRYPT )\n        {\n            memcpy( buf, aes_test_ctr_ct[u], len );\n            aes_tests = aes_test_ctr_pt[u];\n        }\n        else\n        {\n            memcpy( buf, aes_test_ctr_pt[u], len );\n            aes_tests = aes_test_ctr_ct[u];\n        }\n\n        ret = mbedtls_aes_crypt_ctr( &ctx, len, &offset, nonce_counter,\n                                     stream_block, buf, buf );\n        if( ret != 0 )\n            goto exit;\n\n        if( memcmp( buf, aes_tests, len ) != 0 )\n        {\n            ret = 1;\n            goto exit;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n    ret = 0;\n\nexit:\n    if( ret != 0 && verbose != 0 )\n        mbedtls_printf( \"failed\\n\" );\n\n    mbedtls_aes_free( &ctx );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_AES_C */\n","/*\n *  Generic ASN.1 parsing\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ASN1_PARSE_C)\n\n#include \"mbedtls/asn1.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_BIGNUM_C)\n#include \"mbedtls/bignum.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;\n}\n\n/*\n * ASN.1 DER decoding routines\n */\nint mbedtls_asn1_get_len( unsigned char **p,\n                  const unsigned char *end,\n                  size_t *len )\n{\n    if( ( end - *p ) < 1 )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    if( ( **p & 0x80 ) == 0 )\n        *len = *(*p)++;\n    else\n    {\n        switch( **p & 0x7F )\n        {\n        case 1:\n            if( ( end - *p ) < 2 )\n                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n            *len = (*p)[1];\n            (*p) += 2;\n            break;\n\n        case 2:\n            if( ( end - *p ) < 3 )\n                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];\n            (*p) += 3;\n            break;\n\n        case 3:\n            if( ( end - *p ) < 4 )\n                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n            *len = ( (size_t)(*p)[1] << 16 ) |\n                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];\n            (*p) += 4;\n            break;\n\n        case 4:\n            if( ( end - *p ) < 5 )\n                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |\n                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];\n            (*p) += 5;\n            break;\n\n        default:\n            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n        }\n    }\n\n    if( *len > (size_t) ( end - *p ) )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    return( 0 );\n}\n\nint mbedtls_asn1_get_tag( unsigned char **p,\n                  const unsigned char *end,\n                  size_t *len, int tag )\n{\n    if( ( end - *p ) < 1 )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    if( **p != tag )\n        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );\n\n    (*p)++;\n\n    return( mbedtls_asn1_get_len( p, end, len ) );\n}\n\nint mbedtls_asn1_get_bool( unsigned char **p,\n                   const unsigned char *end,\n                   int *val )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )\n        return( ret );\n\n    if( len != 1 )\n        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n\n    *val = ( **p != 0 ) ? 1 : 0;\n    (*p)++;\n\n    return( 0 );\n}\n\nint mbedtls_asn1_get_int( unsigned char **p,\n                  const unsigned char *end,\n                  int *val )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )\n        return( ret );\n\n    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )\n        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n\n    *val = 0;\n\n    while( len-- > 0 )\n    {\n        *val = ( *val << 8 ) | **p;\n        (*p)++;\n    }\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_BIGNUM_C)\nint mbedtls_asn1_get_mpi( unsigned char **p,\n                  const unsigned char *end,\n                  mbedtls_mpi *X )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )\n        return( ret );\n\n    ret = mbedtls_mpi_read_binary( X, *p, len );\n\n    *p += len;\n\n    return( ret );\n}\n#endif /* MBEDTLS_BIGNUM_C */\n\nint mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,\n                        mbedtls_asn1_bitstring *bs)\n{\n    int ret;\n\n    /* Certificate type is a single byte bitstring */\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )\n        return( ret );\n\n    /* Check length, subtract one for actual bit string length */\n    if( bs->len < 1 )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n    bs->len -= 1;\n\n    /* Get number of unused bits, ensure unused bits <= 7 */\n    bs->unused_bits = **p;\n    if( bs->unused_bits > 7 )\n        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n    (*p)++;\n\n    /* Get actual bitstring */\n    bs->p = *p;\n    *p += bs->len;\n\n    if( *p != end )\n        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n\n/*\n * Get a bit string without unused bits\n */\nint mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,\n                             size_t *len )\n{\n    int ret;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )\n        return( ret );\n\n    if( (*len)-- < 2 || *(*p)++ != 0 )\n        return( MBEDTLS_ERR_ASN1_INVALID_DATA );\n\n    return( 0 );\n}\n\n\n\n/*\n *  Parses and splits an ASN.1 \"SEQUENCE OF <tag>\"\n */\nint mbedtls_asn1_get_sequence_of( unsigned char **p,\n                          const unsigned char *end,\n                          mbedtls_asn1_sequence *cur,\n                          int tag)\n{\n    int ret;\n    size_t len;\n    mbedtls_asn1_buf *buf;\n\n    /* Get main sequence tag */\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( ret );\n\n    if( *p + len != end )\n        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    while( *p < end )\n    {\n        buf = &(cur->buf);\n        buf->tag = **p;\n\n        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )\n            return( ret );\n\n        buf->p = *p;\n        *p += buf->len;\n\n        /* Allocate and assign next pointer */\n        if( *p < end )\n        {\n            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,\n                                            sizeof( mbedtls_asn1_sequence ) );\n\n            if( cur->next == NULL )\n                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );\n\n            cur = cur->next;\n        }\n    }\n\n    /* Set final sequence entry's next pointer to NULL */\n    cur->next = NULL;\n\n    if( *p != end )\n        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n\nint mbedtls_asn1_get_alg( unsigned char **p,\n                  const unsigned char *end,\n                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( ret );\n\n    if( ( end - *p ) < 1 )\n        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    alg->tag = **p;\n    end = *p + len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )\n        return( ret );\n\n    alg->p = *p;\n    *p += alg->len;\n\n    if( *p == end )\n    {\n        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );\n        return( 0 );\n    }\n\n    params->tag = **p;\n    (*p)++;\n\n    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )\n        return( ret );\n\n    params->p = *p;\n    *p += params->len;\n\n    if( *p != end )\n        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n\nint mbedtls_asn1_get_alg_null( unsigned char **p,\n                       const unsigned char *end,\n                       mbedtls_asn1_buf *alg )\n{\n    int ret;\n    mbedtls_asn1_buf params;\n\n    memset( &params, 0, sizeof(mbedtls_asn1_buf) );\n\n    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )\n        return( ret );\n\n    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )\n        return( MBEDTLS_ERR_ASN1_INVALID_DATA );\n\n    return( 0 );\n}\n\nvoid mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )\n{\n    if( cur == NULL )\n        return;\n\n    mbedtls_free( cur->oid.p );\n    mbedtls_free( cur->val.p );\n\n    mbedtls_zeroize( cur, sizeof( mbedtls_asn1_named_data ) );\n}\n\nvoid mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )\n{\n    mbedtls_asn1_named_data *cur;\n\n    while( ( cur = *head ) != NULL )\n    {\n        *head = cur->next;\n        mbedtls_asn1_free_named_data( cur );\n        mbedtls_free( cur );\n    }\n}\n\nmbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *list,\n                                       const char *oid, size_t len )\n{\n    while( list != NULL )\n    {\n        if( list->oid.len == len &&\n            memcmp( list->oid.p, oid, len ) == 0 )\n        {\n            break;\n        }\n\n        list = list->next;\n    }\n\n    return( list );\n}\n\n#endif /* MBEDTLS_ASN1_PARSE_C */\n","/*\n * ASN.1 buffer writing functionality\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ASN1_WRITE_C)\n\n#include \"mbedtls/asn1write.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\nint mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )\n{\n    if( len < 0x80 )\n    {\n        if( *p - start < 1 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = (unsigned char) len;\n        return( 1 );\n    }\n\n    if( len <= 0xFF )\n    {\n        if( *p - start < 2 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = (unsigned char) len;\n        *--(*p) = 0x81;\n        return( 2 );\n    }\n\n    if( len <= 0xFFFF )\n    {\n        if( *p - start < 3 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = ( len       ) & 0xFF;\n        *--(*p) = ( len >>  8 ) & 0xFF;\n        *--(*p) = 0x82;\n        return( 3 );\n    }\n\n    if( len <= 0xFFFFFF )\n    {\n        if( *p - start < 4 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = ( len       ) & 0xFF;\n        *--(*p) = ( len >>  8 ) & 0xFF;\n        *--(*p) = ( len >> 16 ) & 0xFF;\n        *--(*p) = 0x83;\n        return( 4 );\n    }\n\n    if( len <= 0xFFFFFFFF )\n    {\n        if( *p - start < 5 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = ( len       ) & 0xFF;\n        *--(*p) = ( len >>  8 ) & 0xFF;\n        *--(*p) = ( len >> 16 ) & 0xFF;\n        *--(*p) = ( len >> 24 ) & 0xFF;\n        *--(*p) = 0x84;\n        return( 5 );\n    }\n\n    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );\n}\n\nint mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )\n{\n    if( *p - start < 1 )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    *--(*p) = tag;\n\n    return( 1 );\n}\n\nint mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,\n                           const unsigned char *buf, size_t size )\n{\n    size_t len = 0;\n\n    if( *p < start || (size_t)( *p - start ) < size )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    len = size;\n    (*p) -= len;\n    memcpy( *p, buf, len );\n\n    return( (int) len );\n}\n\n#if defined(MBEDTLS_BIGNUM_C)\nint mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )\n{\n    int ret;\n    size_t len = 0;\n\n    // Write the MPI\n    //\n    len = mbedtls_mpi_size( X );\n\n    if( *p < start || (size_t)( *p - start ) < len )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    (*p) -= len;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );\n\n    // DER format assumes 2s complement for numbers, so the leftmost bit\n    // should be 0 for positive numbers and 1 for negative numbers.\n    //\n    if( X->s ==1 && **p & 0x80 )\n    {\n        if( *p - start < 1 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = 0x00;\n        len += 1;\n    }\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );\n\n    ret = (int) len;\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_BIGNUM_C */\n\nint mbedtls_asn1_write_null( unsigned char **p, unsigned char *start )\n{\n    int ret;\n    size_t len = 0;\n\n    // Write NULL\n    //\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, 0) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_NULL ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,\n                    const char *oid, size_t oid_len )\n{\n    int ret;\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,\n                                  (const unsigned char *) oid, oid_len ) );\n    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_algorithm_identifier( unsigned char **p, unsigned char *start,\n                                     const char *oid, size_t oid_len,\n                                     size_t par_len )\n{\n    int ret;\n    size_t len = 0;\n\n    if( par_len == 0 )\n        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_null( p, start ) );\n    else\n        len += par_len;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start,\n                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_bool( unsigned char **p, unsigned char *start, int boolean )\n{\n    int ret;\n    size_t len = 0;\n\n    if( *p - start < 1 )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    *--(*p) = (boolean) ? 255 : 0;\n    len++;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BOOLEAN ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )\n{\n    int ret;\n    size_t len = 0;\n\n    // TODO negative values and values larger than 128\n    // DER format assumes 2s complement for numbers, so the leftmost bit\n    // should be 0 for positive numbers and 1 for negative numbers.\n    //\n    if( *p - start < 1 )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    len += 1;\n    *--(*p) = val;\n\n    if( val > 0 && **p & 0x80 )\n    {\n        if( *p - start < 1 )\n            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n        *--(*p) = 0x00;\n        len += 1;\n    }\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_printable_string( unsigned char **p, unsigned char *start,\n                                 const char *text, size_t text_len )\n{\n    int ret;\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,\n                  (const unsigned char *) text, text_len ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_PRINTABLE_STRING ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_ia5_string( unsigned char **p, unsigned char *start,\n                           const char *text, size_t text_len )\n{\n    int ret;\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,\n                  (const unsigned char *) text, text_len ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_IA5_STRING ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_bitstring( unsigned char **p, unsigned char *start,\n                          const unsigned char *buf, size_t bits )\n{\n    int ret;\n    size_t len = 0, size;\n\n    size = ( bits / 8 ) + ( ( bits % 8 ) ? 1 : 0 );\n\n    // Calculate byte length\n    //\n    if( *p < start || (size_t)( *p - start ) < size + 1 )\n        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );\n\n    len = size + 1;\n    (*p) -= size;\n    memcpy( *p, buf, size );\n\n    // Write unused bits\n    //\n    *--(*p) = (unsigned char) (size * 8 - bits);\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BIT_STRING ) );\n\n    return( (int) len );\n}\n\nint mbedtls_asn1_write_octet_string( unsigned char **p, unsigned char *start,\n                             const unsigned char *buf, size_t size )\n{\n    int ret;\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start, buf, size ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OCTET_STRING ) );\n\n    return( (int) len );\n}\n\nmbedtls_asn1_named_data *mbedtls_asn1_store_named_data( mbedtls_asn1_named_data **head,\n                                        const char *oid, size_t oid_len,\n                                        const unsigned char *val,\n                                        size_t val_len )\n{\n    mbedtls_asn1_named_data *cur;\n\n    if( ( cur = mbedtls_asn1_find_named_data( *head, oid, oid_len ) ) == NULL )\n    {\n        // Add new entry if not present yet based on OID\n        //\n        cur = (mbedtls_asn1_named_data*)mbedtls_calloc( 1,\n                                            sizeof(mbedtls_asn1_named_data) );\n        if( cur == NULL )\n            return( NULL );\n\n        cur->oid.len = oid_len;\n        cur->oid.p = mbedtls_calloc( 1, oid_len );\n        if( cur->oid.p == NULL )\n        {\n            mbedtls_free( cur );\n            return( NULL );\n        }\n\n        memcpy( cur->oid.p, oid, oid_len );\n\n        cur->val.len = val_len;\n        cur->val.p = mbedtls_calloc( 1, val_len );\n        if( cur->val.p == NULL )\n        {\n            mbedtls_free( cur->oid.p );\n            mbedtls_free( cur );\n            return( NULL );\n        }\n\n        cur->next = *head;\n        *head = cur;\n    }\n    else if( cur->val.len < val_len )\n    {\n        /*\n         * Enlarge existing value buffer if needed\n         * Preserve old data until the allocation succeeded, to leave list in\n         * a consistent state in case allocation fails.\n         */\n        void *p = mbedtls_calloc( 1, val_len );\n        if( p == NULL )\n            return( NULL );\n\n        mbedtls_free( cur->val.p );\n        cur->val.p = p;\n        cur->val.len = val_len;\n    }\n\n    if( val != NULL )\n        memcpy( cur->val.p, val, val_len );\n\n    return( cur );\n}\n#endif /* MBEDTLS_ASN1_WRITE_C */\n","/*\n *  RFC 1521 base64 encoding/decoding\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_BASE64_C)\n\n#include \"mbedtls/base64.h\"\n\n#include <stdint.h>\n\n#if defined(MBEDTLS_SELF_TEST)\n#include <string.h>\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\nstatic const unsigned char base64_enc_map[64] =\n{\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n    'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n    'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',\n    'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\n    'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',\n    '8', '9', '+', '/'\n};\n\nstatic const unsigned char base64_dec_map[128] =\n{\n    127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n    127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n    127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n    127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n    127, 127, 127,  62, 127, 127, 127,  63,  52,  53,\n     54,  55,  56,  57,  58,  59,  60,  61, 127, 127,\n    127,  64, 127, 127, 127,   0,   1,   2,   3,   4,\n      5,   6,   7,   8,   9,  10,  11,  12,  13,  14,\n     15,  16,  17,  18,  19,  20,  21,  22,  23,  24,\n     25, 127, 127, 127, 127, 127, 127,  26,  27,  28,\n     29,  30,  31,  32,  33,  34,  35,  36,  37,  38,\n     39,  40,  41,  42,  43,  44,  45,  46,  47,  48,\n     49,  50,  51, 127, 127, 127, 127, 127\n};\n\n#define BASE64_SIZE_T_MAX   ( (size_t) -1 ) /* SIZE_T_MAX is not standard */\n\n/*\n * Encode a buffer into base64 format\n */\nint mbedtls_base64_encode( unsigned char *dst, size_t dlen, size_t *olen,\n                   const unsigned char *src, size_t slen )\n{\n    size_t i, n;\n    int C1, C2, C3;\n    unsigned char *p;\n\n    if( slen == 0 )\n    {\n        *olen = 0;\n        return( 0 );\n    }\n\n    n = slen / 3 + ( slen % 3 != 0 );\n\n    if( n > ( BASE64_SIZE_T_MAX - 1 ) / 4 )\n    {\n        *olen = BASE64_SIZE_T_MAX;\n        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );\n    }\n\n    n *= 4;\n\n    if( ( dlen < n + 1 ) || ( NULL == dst ) )\n    {\n        *olen = n + 1;\n        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );\n    }\n\n    n = ( slen / 3 ) * 3;\n\n    for( i = 0, p = dst; i < n; i += 3 )\n    {\n        C1 = *src++;\n        C2 = *src++;\n        C3 = *src++;\n\n        *p++ = base64_enc_map[(C1 >> 2) & 0x3F];\n        *p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];\n        *p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];\n        *p++ = base64_enc_map[C3 & 0x3F];\n    }\n\n    if( i < slen )\n    {\n        C1 = *src++;\n        C2 = ( ( i + 1 ) < slen ) ? *src++ : 0;\n\n        *p++ = base64_enc_map[(C1 >> 2) & 0x3F];\n        *p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];\n\n        if( ( i + 1 ) < slen )\n             *p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];\n        else *p++ = '=';\n\n        *p++ = '=';\n    }\n\n    *olen = p - dst;\n    *p = 0;\n\n    return( 0 );\n}\n\n/*\n * Decode a base64-formatted buffer\n */\nint mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,\n                   const unsigned char *src, size_t slen )\n{\n    size_t i, n;\n    uint32_t j, x;\n    unsigned char *p;\n\n    /* First pass: check for validity and get output length */\n    for( i = n = j = 0; i < slen; i++ )\n    {\n        /* Skip spaces before checking for EOL */\n        x = 0;\n        while( i < slen && src[i] == ' ' )\n        {\n            ++i;\n            ++x;\n        }\n\n        /* Spaces at end of buffer are OK */\n        if( i == slen )\n            break;\n\n        if( ( slen - i ) >= 2 &&\n            src[i] == '\\r' && src[i + 1] == '\\n' )\n            continue;\n\n        if( src[i] == '\\n' )\n            continue;\n\n        /* Space inside a line is an error */\n        if( x != 0 )\n            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );\n\n        if( src[i] == '=' && ++j > 2 )\n            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );\n\n        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )\n            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );\n\n        if( base64_dec_map[src[i]] < 64 && j != 0 )\n            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );\n\n        n++;\n    }\n\n    if( n == 0 )\n    {\n        *olen = 0;\n        return( 0 );\n    }\n\n    /* The following expression is to calculate the following formula without\n     * risk of integer overflow in n:\n     *     n = ( ( n * 6 ) + 7 ) >> 3;\n     */\n    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );\n    n -= j;\n\n    if( dst == NULL || dlen < n )\n    {\n        *olen = n;\n        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );\n    }\n\n   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )\n   {\n        if( *src == '\\r' || *src == '\\n' || *src == ' ' )\n            continue;\n\n        j -= ( base64_dec_map[*src] == 64 );\n        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );\n\n        if( ++n == 4 )\n        {\n            n = 0;\n            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );\n            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );\n            if( j > 2 ) *p++ = (unsigned char)( x       );\n        }\n    }\n\n    *olen = p - dst;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n\nstatic const unsigned char base64_test_dec[64] =\n{\n    0x24, 0x48, 0x6E, 0x56, 0x87, 0x62, 0x5A, 0xBD,\n    0xBF, 0x17, 0xD9, 0xA2, 0xC4, 0x17, 0x1A, 0x01,\n    0x94, 0xED, 0x8F, 0x1E, 0x11, 0xB3, 0xD7, 0x09,\n    0x0C, 0xB6, 0xE9, 0x10, 0x6F, 0x22, 0xEE, 0x13,\n    0xCA, 0xB3, 0x07, 0x05, 0x76, 0xC9, 0xFA, 0x31,\n    0x6C, 0x08, 0x34, 0xFF, 0x8D, 0xC2, 0x6C, 0x38,\n    0x00, 0x43, 0xE9, 0x54, 0x97, 0xAF, 0x50, 0x4B,\n    0xD1, 0x41, 0xBA, 0x95, 0x31, 0x5A, 0x0B, 0x97\n};\n\nstatic const unsigned char base64_test_enc[] =\n    \"JEhuVodiWr2/F9mixBcaAZTtjx4Rs9cJDLbpEG8i7hPK\"\n    \"swcFdsn6MWwINP+Nwmw4AEPpVJevUEvRQbqVMVoLlw==\";\n\n/*\n * Checkup routine\n */\nint mbedtls_base64_self_test( int verbose )\n{\n    size_t len;\n    const unsigned char *src;\n    unsigned char buffer[128];\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  Base64 encoding test: \" );\n\n    src = base64_test_dec;\n\n    if( mbedtls_base64_encode( buffer, sizeof( buffer ), &len, src, 64 ) != 0 ||\n         memcmp( base64_test_enc, buffer, 88 ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n  Base64 decoding test: \" );\n\n    src = base64_test_enc;\n\n    if( mbedtls_base64_decode( buffer, sizeof( buffer ), &len, src, 88 ) != 0 ||\n         memcmp( base64_test_dec, buffer, 64 ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\\n\" );\n\n    return( 0 );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_BASE64_C */\n","/*\n *  Multi-precision integer library\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n *  The following sources were referenced in the design of this Multi-precision\n *  Integer library:\n *\n *  [1] Handbook of Applied Cryptography - 1997\n *      Menezes, van Oorschot and Vanstone\n *\n *  [2] Multi-Precision Math\n *      Tom St Denis\n *      https://github.com/libtom/libtommath/blob/develop/tommath.pdf\n *\n *  [3] GNU Multi-Precision Arithmetic Library\n *      https://gmplib.org/manual/index.html\n *\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_BIGNUM_C)\n\n#include \"mbedtls/bignum.h\"\n#include \"mbedtls/bn_mul.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#include <stdlib.h>\n#define mbedtls_printf     printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {\n    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;\n}\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n#define ciL    (sizeof(mbedtls_mpi_uint))         /* chars in limb  */\n#define biL    (ciL << 3)               /* bits  in limb  */\n#define biH    (ciL << 2)               /* half limb size */\n\n#define MPI_SIZE_T_MAX  ( (size_t) -1 ) /* SIZE_T_MAX is not standard */\n\n/*\n * Convert between bits/chars and number of limbs\n * Divide first in order to avoid potential overflows\n */\n#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )\n#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )\n\n/*\n * Initialize one MPI\n */\nvoid mbedtls_mpi_init( mbedtls_mpi *X )\n{\n    if( X == NULL )\n        return;\n\n    X->s = 1;\n    X->n = 0;\n    X->p = NULL;\n}\n\n/*\n * Unallocate one MPI\n */\nvoid mbedtls_mpi_free( mbedtls_mpi *X )\n{\n    if( X == NULL )\n        return;\n\n    if( X->p != NULL )\n    {\n        mbedtls_mpi_zeroize( X->p, X->n );\n        mbedtls_free( X->p );\n    }\n\n    X->s = 1;\n    X->n = 0;\n    X->p = NULL;\n}\n\n/*\n * Enlarge to the specified number of limbs\n */\nint mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )\n{\n    mbedtls_mpi_uint *p;\n\n    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )\n        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n\n    if( X->n < nblimbs )\n    {\n        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )\n            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n\n        if( X->p != NULL )\n        {\n            memcpy( p, X->p, X->n * ciL );\n            mbedtls_mpi_zeroize( X->p, X->n );\n            mbedtls_free( X->p );\n        }\n\n        X->n = nblimbs;\n        X->p = p;\n    }\n\n    return( 0 );\n}\n\n/*\n * Resize down as much as possible,\n * while keeping at least the specified number of limbs\n */\nint mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )\n{\n    mbedtls_mpi_uint *p;\n    size_t i;\n\n    /* Actually resize up in this case */\n    if( X->n <= nblimbs )\n        return( mbedtls_mpi_grow( X, nblimbs ) );\n\n    for( i = X->n - 1; i > 0; i-- )\n        if( X->p[i] != 0 )\n            break;\n    i++;\n\n    if( i < nblimbs )\n        i = nblimbs;\n\n    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )\n        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n\n    if( X->p != NULL )\n    {\n        memcpy( p, X->p, i * ciL );\n        mbedtls_mpi_zeroize( X->p, X->n );\n        mbedtls_free( X->p );\n    }\n\n    X->n = i;\n    X->p = p;\n\n    return( 0 );\n}\n\n/*\n * Copy the contents of Y into X\n */\nint mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )\n{\n    int ret;\n    size_t i;\n\n    if( X == Y )\n        return( 0 );\n\n    if( Y->p == NULL )\n    {\n        mbedtls_mpi_free( X );\n        return( 0 );\n    }\n\n    for( i = Y->n - 1; i > 0; i-- )\n        if( Y->p[i] != 0 )\n            break;\n    i++;\n\n    X->s = Y->s;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );\n\n    memset( X->p, 0, X->n * ciL );\n    memcpy( X->p, Y->p, i * ciL );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Swap the contents of X and Y\n */\nvoid mbedtls_mpi_swap( mbedtls_mpi *X, mbedtls_mpi *Y )\n{\n    mbedtls_mpi T;\n\n    memcpy( &T,  X, sizeof( mbedtls_mpi ) );\n    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );\n    memcpy(  Y, &T, sizeof( mbedtls_mpi ) );\n}\n\n/*\n * Conditionally assign X = Y, without leaking information\n * about whether the assignment was made or not.\n * (Leaking information about the respective sizes of X and Y is ok however.)\n */\nint mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )\n{\n    int ret = 0;\n    size_t i;\n\n    /* make sure assign is 0 or 1 in a time-constant manner */\n    assign = (assign | (unsigned char)-assign) >> 7;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );\n\n    X->s = X->s * ( 1 - assign ) + Y->s * assign;\n\n    for( i = 0; i < Y->n; i++ )\n        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;\n\n    for( ; i < X->n; i++ )\n        X->p[i] *= ( 1 - assign );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Conditionally swap X and Y, without leaking information\n * about whether the swap was made or not.\n * Here it is not ok to simply swap the pointers, which whould lead to\n * different memory access patterns when X and Y are used afterwards.\n */\nint mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )\n{\n    int ret, s;\n    size_t i;\n    mbedtls_mpi_uint tmp;\n\n    if( X == Y )\n        return( 0 );\n\n    /* make sure swap is 0 or 1 in a time-constant manner */\n    swap = (swap | (unsigned char)-swap) >> 7;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );\n\n    s = X->s;\n    X->s = X->s * ( 1 - swap ) + Y->s * swap;\n    Y->s = Y->s * ( 1 - swap ) +    s * swap;\n\n\n    for( i = 0; i < X->n; i++ )\n    {\n        tmp = X->p[i];\n        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;\n        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Set value from integer\n */\nint mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );\n    memset( X->p, 0, X->n * ciL );\n\n    X->p[0] = ( z < 0 ) ? -z : z;\n    X->s    = ( z < 0 ) ? -1 : 1;\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Get a specific bit\n */\nint mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )\n{\n    if( X->n * biL <= pos )\n        return( 0 );\n\n    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );\n}\n\n/*\n * Set a bit to a specific value of 0 or 1\n */\nint mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )\n{\n    int ret = 0;\n    size_t off = pos / biL;\n    size_t idx = pos % biL;\n\n    if( val != 0 && val != 1 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    if( X->n * biL <= pos )\n    {\n        if( val == 0 )\n            return( 0 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );\n    }\n\n    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );\n    X->p[off] |= (mbedtls_mpi_uint) val << idx;\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Return the number of less significant zero-bits\n */\nsize_t mbedtls_mpi_lsb( const mbedtls_mpi *X )\n{\n    size_t i, j, count = 0;\n\n    for( i = 0; i < X->n; i++ )\n        for( j = 0; j < biL; j++, count++ )\n            if( ( ( X->p[i] >> j ) & 1 ) != 0 )\n                return( count );\n\n    return( 0 );\n}\n\n/*\n * Count leading zero bits in a given integer\n */\nstatic size_t mbedtls_clz( const mbedtls_mpi_uint x )\n{\n    size_t j;\n    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);\n\n    for( j = 0; j < biL; j++ )\n    {\n        if( x & mask ) break;\n\n        mask >>= 1;\n    }\n\n    return j;\n}\n\n/*\n * Return the number of bits\n */\nsize_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )\n{\n    size_t i, j;\n\n    if( X->n == 0 )\n        return( 0 );\n\n    for( i = X->n - 1; i > 0; i-- )\n        if( X->p[i] != 0 )\n            break;\n\n    j = biL - mbedtls_clz( X->p[i] );\n\n    return( ( i * biL ) + j );\n}\n\n/*\n * Return the total size in bytes\n */\nsize_t mbedtls_mpi_size( const mbedtls_mpi *X )\n{\n    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );\n}\n\n/*\n * Convert an ASCII character to digit value\n */\nstatic int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )\n{\n    *d = 255;\n\n    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;\n    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;\n    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;\n\n    if( *d >= (mbedtls_mpi_uint) radix )\n        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );\n\n    return( 0 );\n}\n\n/*\n * Import from an ASCII string\n */\nint mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )\n{\n    int ret;\n    size_t i, j, slen, n;\n    mbedtls_mpi_uint d;\n    mbedtls_mpi T;\n\n    if( radix < 2 || radix > 16 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &T );\n\n    slen = strlen( s );\n\n    if( radix == 16 )\n    {\n        if( slen > MPI_SIZE_T_MAX >> 2 )\n            return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n        n = BITS_TO_LIMBS( slen << 2 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );\n\n        for( i = slen, j = 0; i > 0; i--, j++ )\n        {\n            if( i == 1 && s[i - 1] == '-' )\n            {\n                X->s = -1;\n                break;\n            }\n\n            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );\n            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );\n        }\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );\n\n        for( i = 0; i < slen; i++ )\n        {\n            if( i == 0 && s[i] == '-' )\n            {\n                X->s = -1;\n                continue;\n            }\n\n            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );\n\n            if( X->s == 1 )\n            {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );\n            }\n            else\n            {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );\n            }\n        }\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &T );\n\n    return( ret );\n}\n\n/*\n * Helper to write the digits high-order first\n */\nstatic int mpi_write_hlp( mbedtls_mpi *X, int radix, char **p )\n{\n    int ret;\n    mbedtls_mpi_uint r;\n\n    if( radix < 2 || radix > 16 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, radix ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_div_int( X, NULL, X, radix ) );\n\n    if( mbedtls_mpi_cmp_int( X, 0 ) != 0 )\n        MBEDTLS_MPI_CHK( mpi_write_hlp( X, radix, p ) );\n\n    if( r < 10 )\n        *(*p)++ = (char)( r + 0x30 );\n    else\n        *(*p)++ = (char)( r + 0x37 );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Export into an ASCII string\n */\nint mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,\n                              char *buf, size_t buflen, size_t *olen )\n{\n    int ret = 0;\n    size_t n;\n    char *p;\n    mbedtls_mpi T;\n\n    if( radix < 2 || radix > 16 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    n = mbedtls_mpi_bitlen( X );\n    if( radix >=  4 ) n >>= 1;\n    if( radix >= 16 ) n >>= 1;\n    /*\n     * Round up the buffer length to an even value to ensure that there is\n     * enough room for hexadecimal values that can be represented in an odd\n     * number of digits.\n     */\n    n += 3 + ( ( n + 1 ) & 1 );\n\n    if( buflen < n )\n    {\n        *olen = n;\n        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );\n    }\n\n    p = buf;\n    mbedtls_mpi_init( &T );\n\n    if( X->s == -1 )\n        *p++ = '-';\n\n    if( radix == 16 )\n    {\n        int c;\n        size_t i, j, k;\n\n        for( i = X->n, k = 0; i > 0; i-- )\n        {\n            for( j = ciL; j > 0; j-- )\n            {\n                c = ( X->p[i - 1] >> ( ( j - 1 ) << 3) ) & 0xFF;\n\n                if( c == 0 && k == 0 && ( i + j ) != 2 )\n                    continue;\n\n                *(p++) = \"0123456789ABCDEF\" [c / 16];\n                *(p++) = \"0123456789ABCDEF\" [c % 16];\n                k = 1;\n            }\n        }\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T, X ) );\n\n        if( T.s == -1 )\n            T.s = 1;\n\n        MBEDTLS_MPI_CHK( mpi_write_hlp( &T, radix, &p ) );\n    }\n\n    *p++ = '\\0';\n    *olen = p - buf;\n\ncleanup:\n\n    mbedtls_mpi_free( &T );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_FS_IO)\n/*\n * Read X from an opened file\n */\nint mbedtls_mpi_read_file( mbedtls_mpi *X, int radix, FILE *fin )\n{\n    mbedtls_mpi_uint d;\n    size_t slen;\n    char *p;\n    /*\n     * Buffer should have space for (short) label and decimal formatted MPI,\n     * newline characters and '\\0'\n     */\n    char s[ MBEDTLS_MPI_RW_BUFFER_SIZE ];\n\n    memset( s, 0, sizeof( s ) );\n    if( fgets( s, sizeof( s ) - 1, fin ) == NULL )\n        return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );\n\n    slen = strlen( s );\n    if( slen == sizeof( s ) - 2 )\n        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );\n\n    if( slen > 0 && s[slen - 1] == '\\n' ) { slen--; s[slen] = '\\0'; }\n    if( slen > 0 && s[slen - 1] == '\\r' ) { slen--; s[slen] = '\\0'; }\n\n    p = s + slen;\n    while( p-- > s )\n        if( mpi_get_digit( &d, radix, *p ) != 0 )\n            break;\n\n    return( mbedtls_mpi_read_string( X, radix, p + 1 ) );\n}\n\n/*\n * Write X into an opened file (or stdout if fout == NULL)\n */\nint mbedtls_mpi_write_file( const char *p, const mbedtls_mpi *X, int radix, FILE *fout )\n{\n    int ret;\n    size_t n, slen, plen;\n    /*\n     * Buffer should have space for (short) label and decimal formatted MPI,\n     * newline characters and '\\0'\n     */\n    char s[ MBEDTLS_MPI_RW_BUFFER_SIZE ];\n\n    memset( s, 0, sizeof( s ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_string( X, radix, s, sizeof( s ) - 2, &n ) );\n\n    if( p == NULL ) p = \"\";\n\n    plen = strlen( p );\n    slen = strlen( s );\n    s[slen++] = '\\r';\n    s[slen++] = '\\n';\n\n    if( fout != NULL )\n    {\n        if( fwrite( p, 1, plen, fout ) != plen ||\n            fwrite( s, 1, slen, fout ) != slen )\n            return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );\n    }\n    else\n        mbedtls_printf( \"%s%s\", p, s );\n\ncleanup:\n\n    return( ret );\n}\n#endif /* MBEDTLS_FS_IO */\n\n/*\n * Import X from unsigned binary data, big endian\n */\nint mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )\n{\n    int ret;\n    size_t i, j;\n    size_t const limbs = CHARS_TO_LIMBS( buflen );\n\n    /* Ensure that target MPI has exactly the necessary number of limbs */\n    if( X->n != limbs )\n    {\n        mbedtls_mpi_free( X );\n        mbedtls_mpi_init( X );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );\n\n    for( i = buflen, j = 0; i > 0; i--, j++ )\n        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Export X into unsigned binary data, big endian\n */\nint mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )\n{\n    size_t i, j, n;\n\n    n = mbedtls_mpi_size( X );\n\n    if( buflen < n )\n        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );\n\n    memset( buf, 0, buflen );\n\n    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )\n        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );\n\n    return( 0 );\n}\n\n/*\n * Left-shift: X <<= count\n */\nint mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )\n{\n    int ret;\n    size_t i, v0, t1;\n    mbedtls_mpi_uint r0 = 0, r1;\n\n    v0 = count / (biL    );\n    t1 = count & (biL - 1);\n\n    i = mbedtls_mpi_bitlen( X ) + count;\n\n    if( X->n * biL < i )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );\n\n    ret = 0;\n\n    /*\n     * shift by count / limb_size\n     */\n    if( v0 > 0 )\n    {\n        for( i = X->n; i > v0; i-- )\n            X->p[i - 1] = X->p[i - v0 - 1];\n\n        for( ; i > 0; i-- )\n            X->p[i - 1] = 0;\n    }\n\n    /*\n     * shift by count % limb_size\n     */\n    if( t1 > 0 )\n    {\n        for( i = v0; i < X->n; i++ )\n        {\n            r1 = X->p[i] >> (biL - t1);\n            X->p[i] <<= t1;\n            X->p[i] |= r0;\n            r0 = r1;\n        }\n    }\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Right-shift: X >>= count\n */\nint mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )\n{\n    size_t i, v0, v1;\n    mbedtls_mpi_uint r0 = 0, r1;\n\n    v0 = count /  biL;\n    v1 = count & (biL - 1);\n\n    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )\n        return mbedtls_mpi_lset( X, 0 );\n\n    /*\n     * shift by count / limb_size\n     */\n    if( v0 > 0 )\n    {\n        for( i = 0; i < X->n - v0; i++ )\n            X->p[i] = X->p[i + v0];\n\n        for( ; i < X->n; i++ )\n            X->p[i] = 0;\n    }\n\n    /*\n     * shift by count % limb_size\n     */\n    if( v1 > 0 )\n    {\n        for( i = X->n; i > 0; i-- )\n        {\n            r1 = X->p[i - 1] << (biL - v1);\n            X->p[i - 1] >>= v1;\n            X->p[i - 1] |= r0;\n            r0 = r1;\n        }\n    }\n\n    return( 0 );\n}\n\n/*\n * Compare unsigned values\n */\nint mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )\n{\n    size_t i, j;\n\n    for( i = X->n; i > 0; i-- )\n        if( X->p[i - 1] != 0 )\n            break;\n\n    for( j = Y->n; j > 0; j-- )\n        if( Y->p[j - 1] != 0 )\n            break;\n\n    if( i == 0 && j == 0 )\n        return( 0 );\n\n    if( i > j ) return(  1 );\n    if( j > i ) return( -1 );\n\n    for( ; i > 0; i-- )\n    {\n        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );\n        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );\n    }\n\n    return( 0 );\n}\n\n/*\n * Compare signed values\n */\nint mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )\n{\n    size_t i, j;\n\n    for( i = X->n; i > 0; i-- )\n        if( X->p[i - 1] != 0 )\n            break;\n\n    for( j = Y->n; j > 0; j-- )\n        if( Y->p[j - 1] != 0 )\n            break;\n\n    if( i == 0 && j == 0 )\n        return( 0 );\n\n    if( i > j ) return(  X->s );\n    if( j > i ) return( -Y->s );\n\n    if( X->s > 0 && Y->s < 0 ) return(  1 );\n    if( Y->s > 0 && X->s < 0 ) return( -1 );\n\n    for( ; i > 0; i-- )\n    {\n        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );\n        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );\n    }\n\n    return( 0 );\n}\n\n/*\n * Compare signed values\n */\nint mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )\n{\n    mbedtls_mpi Y;\n    mbedtls_mpi_uint p[1];\n\n    *p  = ( z < 0 ) ? -z : z;\n    Y.s = ( z < 0 ) ? -1 : 1;\n    Y.n = 1;\n    Y.p = p;\n\n    return( mbedtls_mpi_cmp_mpi( X, &Y ) );\n}\n\n/*\n * Unsigned addition: X = |A| + |B|  (HAC 14.7)\n */\nint mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n    size_t i, j;\n    mbedtls_mpi_uint *o, *p, c, tmp;\n\n    if( X == B )\n    {\n        const mbedtls_mpi *T = A; A = X; B = T;\n    }\n\n    if( X != A )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );\n\n    /*\n     * X should always be positive as a result of unsigned additions.\n     */\n    X->s = 1;\n\n    for( j = B->n; j > 0; j-- )\n        if( B->p[j - 1] != 0 )\n            break;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );\n\n    o = B->p; p = X->p; c = 0;\n\n    /*\n     * tmp is used because it might happen that p == o\n     */\n    for( i = 0; i < j; i++, o++, p++ )\n    {\n        tmp= *o;\n        *p +=  c; c  = ( *p <  c );\n        *p += tmp; c += ( *p < tmp );\n    }\n\n    while( c != 0 )\n    {\n        if( i >= X->n )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );\n            p = X->p + i;\n        }\n\n        *p += c; c = ( *p < c ); i++; p++;\n    }\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Helper for mbedtls_mpi subtraction\n */\nstatic void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )\n{\n    size_t i;\n    mbedtls_mpi_uint c, z;\n\n    for( i = c = 0; i < n; i++, s++, d++ )\n    {\n        z = ( *d <  c );     *d -=  c;\n        c = ( *d < *s ) + z; *d -= *s;\n    }\n\n    while( c != 0 )\n    {\n        z = ( *d < c ); *d -= c;\n        c = z; i++; d++;\n    }\n}\n\n/*\n * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)\n */\nint mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    mbedtls_mpi TB;\n    int ret;\n    size_t n;\n\n    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )\n        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );\n\n    mbedtls_mpi_init( &TB );\n\n    if( X == B )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );\n        B = &TB;\n    }\n\n    if( X != A )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );\n\n    /*\n     * X should always be positive as a result of unsigned subtractions.\n     */\n    X->s = 1;\n\n    ret = 0;\n\n    for( n = B->n; n > 0; n-- )\n        if( B->p[n - 1] != 0 )\n            break;\n\n    mpi_sub_hlp( n, B->p, X->p );\n\ncleanup:\n\n    mbedtls_mpi_free( &TB );\n\n    return( ret );\n}\n\n/*\n * Signed addition: X = A + B\n */\nint mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret, s = A->s;\n\n    if( A->s * B->s < 0 )\n    {\n        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );\n            X->s =  s;\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );\n            X->s = -s;\n        }\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );\n        X->s = s;\n    }\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Signed subtraction: X = A - B\n */\nint mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret, s = A->s;\n\n    if( A->s * B->s > 0 )\n    {\n        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );\n            X->s =  s;\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );\n            X->s = -s;\n        }\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );\n        X->s = s;\n    }\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Signed addition: X = A + b\n */\nint mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )\n{\n    mbedtls_mpi _B;\n    mbedtls_mpi_uint p[1];\n\n    p[0] = ( b < 0 ) ? -b : b;\n    _B.s = ( b < 0 ) ? -1 : 1;\n    _B.n = 1;\n    _B.p = p;\n\n    return( mbedtls_mpi_add_mpi( X, A, &_B ) );\n}\n\n/*\n * Signed subtraction: X = A - b\n */\nint mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )\n{\n    mbedtls_mpi _B;\n    mbedtls_mpi_uint p[1];\n\n    p[0] = ( b < 0 ) ? -b : b;\n    _B.s = ( b < 0 ) ? -1 : 1;\n    _B.n = 1;\n    _B.p = p;\n\n    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );\n}\n\n/*\n * Helper for mbedtls_mpi multiplication\n */\nstatic\n#if defined(__APPLE__) && defined(__arm__)\n/*\n * Apple LLVM version 4.2 (clang-425.0.24) (based on LLVM 3.2svn)\n * appears to need this to prevent bad ARM code generation at -O3.\n */\n__attribute__ ((noinline))\n#endif\nvoid mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )\n{\n    mbedtls_mpi_uint c = 0, t = 0;\n\n#if defined(MULADDC_HUIT)\n    for( ; i >= 8; i -= 8 )\n    {\n        MULADDC_INIT\n        MULADDC_HUIT\n        MULADDC_STOP\n    }\n\n    for( ; i > 0; i-- )\n    {\n        MULADDC_INIT\n        MULADDC_CORE\n        MULADDC_STOP\n    }\n#else /* MULADDC_HUIT */\n    for( ; i >= 16; i -= 16 )\n    {\n        MULADDC_INIT\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_STOP\n    }\n\n    for( ; i >= 8; i -= 8 )\n    {\n        MULADDC_INIT\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_CORE   MULADDC_CORE\n        MULADDC_STOP\n    }\n\n    for( ; i > 0; i-- )\n    {\n        MULADDC_INIT\n        MULADDC_CORE\n        MULADDC_STOP\n    }\n#endif /* MULADDC_HUIT */\n\n    t++;\n\n    do {\n        *d += c; c = ( *d < c ); d++;\n    }\n    while( c != 0 );\n}\n\n/*\n * Baseline multiplication: X = A * B  (HAC 14.12)\n */\nint mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n    size_t i, j;\n    mbedtls_mpi TA, TB;\n\n    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );\n\n    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }\n    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }\n\n    for( i = A->n; i > 0; i-- )\n        if( A->p[i - 1] != 0 )\n            break;\n\n    for( j = B->n; j > 0; j-- )\n        if( B->p[j - 1] != 0 )\n            break;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );\n\n    for( i++; j > 0; j-- )\n        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );\n\n    X->s = A->s * B->s;\n\ncleanup:\n\n    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );\n\n    return( ret );\n}\n\n/*\n * Baseline multiplication: X = A * b\n */\nint mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )\n{\n    mbedtls_mpi _B;\n    mbedtls_mpi_uint p[1];\n\n    _B.s = 1;\n    _B.n = 1;\n    _B.p = p;\n    p[0] = b;\n\n    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );\n}\n\n/*\n * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and\n * mbedtls_mpi_uint divisor, d\n */\nstatic mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,\n            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )\n{\n#if defined(MBEDTLS_HAVE_UDBL)\n    mbedtls_t_udbl dividend, quotient;\n#else\n    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;\n    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;\n    mbedtls_mpi_uint d0, d1, q0, q1, rAX, r0, quotient;\n    mbedtls_mpi_uint u0_msw, u0_lsw;\n    size_t s;\n#endif\n\n    /*\n     * Check for overflow\n     */\n    if( 0 == d || u1 >= d )\n    {\n        if (r != NULL) *r = ~0;\n\n        return ( ~0 );\n    }\n\n#if defined(MBEDTLS_HAVE_UDBL)\n    dividend  = (mbedtls_t_udbl) u1 << biL;\n    dividend |= (mbedtls_t_udbl) u0;\n    quotient = dividend / d;\n    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )\n        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;\n\n    if( r != NULL )\n        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );\n\n    return (mbedtls_mpi_uint) quotient;\n#else\n\n    /*\n     * Algorithm D, Section 4.3.1 - The Art of Computer Programming\n     *   Vol. 2 - Seminumerical Algorithms, Knuth\n     */\n\n    /*\n     * Normalize the divisor, d, and dividend, u0, u1\n     */\n    s = mbedtls_clz( d );\n    d = d << s;\n\n    u1 = u1 << s;\n    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );\n    u0 =  u0 << s;\n\n    d1 = d >> biH;\n    d0 = d & uint_halfword_mask;\n\n    u0_msw = u0 >> biH;\n    u0_lsw = u0 & uint_halfword_mask;\n\n    /*\n     * Find the first quotient and remainder\n     */\n    q1 = u1 / d1;\n    r0 = u1 - d1 * q1;\n\n    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )\n    {\n        q1 -= 1;\n        r0 += d1;\n\n        if ( r0 >= radix ) break;\n    }\n\n    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );\n    q0 = rAX / d1;\n    r0 = rAX - q0 * d1;\n\n    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )\n    {\n        q0 -= 1;\n        r0 += d1;\n\n        if ( r0 >= radix ) break;\n    }\n\n    if (r != NULL)\n        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;\n\n    quotient = q1 * radix + q0;\n\n    return quotient;\n#endif\n}\n\n/*\n * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)\n */\nint mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n    size_t i, n, t, k;\n    mbedtls_mpi X, Y, Z, T1, T2;\n\n    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )\n        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );\n\n    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );\n    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );\n\n    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )\n    {\n        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );\n        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );\n        return( 0 );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );\n    X.s = Y.s = 1;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );\n\n    k = mbedtls_mpi_bitlen( &Y ) % biL;\n    if( k < biL - 1 )\n    {\n        k = biL - 1 - k;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );\n    }\n    else k = 0;\n\n    n = X.n - 1;\n    t = Y.n - 1;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );\n\n    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )\n    {\n        Z.p[n - t]++;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );\n    }\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );\n\n    for( i = n; i > t ; i-- )\n    {\n        if( X.p[i] >= Y.p[t] )\n            Z.p[i - t - 1] = ~0;\n        else\n        {\n            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],\n                                                            Y.p[t], NULL);\n        }\n\n        Z.p[i - t - 1]++;\n        do\n        {\n            Z.p[i - t - 1]--;\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );\n            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];\n            T1.p[1] = Y.p[t];\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );\n            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];\n            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];\n            T2.p[2] = X.p[i];\n        }\n        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );\n\n        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );\n            Z.p[i - t - 1]--;\n        }\n    }\n\n    if( Q != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );\n        Q->s = A->s * B->s;\n    }\n\n    if( R != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );\n        X.s = A->s;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );\n\n        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )\n            R->s = 1;\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );\n    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );\n\n    return( ret );\n}\n\n/*\n * Division by int: A = Q * b + R\n */\nint mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b )\n{\n    mbedtls_mpi _B;\n    mbedtls_mpi_uint p[1];\n\n    p[0] = ( b < 0 ) ? -b : b;\n    _B.s = ( b < 0 ) ? -1 : 1;\n    _B.n = 1;\n    _B.p = p;\n\n    return( mbedtls_mpi_div_mpi( Q, R, A, &_B ) );\n}\n\n/*\n * Modulo: R = A mod B\n */\nint mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n\n    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )\n        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );\n\n    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )\n      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );\n\n    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )\n      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Modulo: r = A mod b\n */\nint mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )\n{\n    size_t i;\n    mbedtls_mpi_uint x, y, z;\n\n    if( b == 0 )\n        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );\n\n    if( b < 0 )\n        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );\n\n    /*\n     * handle trivial cases\n     */\n    if( b == 1 )\n    {\n        *r = 0;\n        return( 0 );\n    }\n\n    if( b == 2 )\n    {\n        *r = A->p[0] & 1;\n        return( 0 );\n    }\n\n    /*\n     * general case\n     */\n    for( i = A->n, y = 0; i > 0; i-- )\n    {\n        x  = A->p[i - 1];\n        y  = ( y << biH ) | ( x >> biH );\n        z  = y / b;\n        y -= z * b;\n\n        x <<= biH;\n        y  = ( y << biH ) | ( x >> biH );\n        z  = y / b;\n        y -= z * b;\n    }\n\n    /*\n     * If A is negative, then the current y represents a negative value.\n     * Flipping it to the positive side.\n     */\n    if( A->s < 0 && y != 0 )\n        y = b - y;\n\n    *r = y;\n\n    return( 0 );\n}\n\n/*\n * Fast Montgomery initialization (thanks to Tom St Denis)\n */\nstatic void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )\n{\n    mbedtls_mpi_uint x, m0 = N->p[0];\n    unsigned int i;\n\n    x  = m0;\n    x += ( ( m0 + 2 ) & 4 ) << 1;\n\n    for( i = biL; i >= 8; i /= 2 )\n        x *= ( 2 - ( m0 * x ) );\n\n    *mm = ~x + 1;\n}\n\n/*\n * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)\n */\nstatic int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,\n                         const mbedtls_mpi *T )\n{\n    size_t i, n, m;\n    mbedtls_mpi_uint u0, u1, *d;\n\n    if( T->n < N->n + 1 || T->p == NULL )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    memset( T->p, 0, T->n * ciL );\n\n    d = T->p;\n    n = N->n;\n    m = ( B->n < n ) ? B->n : n;\n\n    for( i = 0; i < n; i++ )\n    {\n        /*\n         * T = (T + u0*B + u1*N) / 2^biL\n         */\n        u0 = A->p[i];\n        u1 = ( d[0] + u0 * B->p[0] ) * mm;\n\n        mpi_mul_hlp( m, B->p, d, u0 );\n        mpi_mul_hlp( n, N->p, d, u1 );\n\n        *d++ = u0; d[n + 1] = 0;\n    }\n\n    memcpy( A->p, d, ( n + 1 ) * ciL );\n\n    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )\n        mpi_sub_hlp( n, N->p, A->p );\n    else\n        /* prevent timing attacks */\n        mpi_sub_hlp( n, A->p, T->p );\n\n    return( 0 );\n}\n\n/*\n * Montgomery reduction: A = A * R^-1 mod N\n */\nstatic int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )\n{\n    mbedtls_mpi_uint z = 1;\n    mbedtls_mpi U;\n\n    U.n = U.s = (int) z;\n    U.p = &z;\n\n    return( mpi_montmul( A, &U, N, mm, T ) );\n}\n\n/*\n * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)\n */\nint mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )\n{\n    int ret;\n    size_t wbits, wsize, one = 1;\n    size_t i, j, nblimbs;\n    size_t bufsize, nbits;\n    mbedtls_mpi_uint ei, mm, state;\n    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;\n    int neg;\n\n    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    /*\n     * Init temps and window size\n     */\n    mpi_montg_init( &mm, N );\n    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );\n    mbedtls_mpi_init( &Apos );\n    memset( W, 0, sizeof( W ) );\n\n    i = mbedtls_mpi_bitlen( E );\n\n    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :\n            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;\n\n    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )\n        wsize = MBEDTLS_MPI_WINDOW_SIZE;\n\n    j = N->n + 1;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );\n\n    /*\n     * Compensate for negative A (and correct at the end)\n     */\n    neg = ( A->s == -1 );\n    if( neg )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );\n        Apos.s = 1;\n        A = &Apos;\n    }\n\n    /*\n     * If 1st call, pre-compute R^2 mod N\n     */\n    if( _RR == NULL || _RR->p == NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );\n\n        if( _RR != NULL )\n            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );\n    }\n    else\n        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );\n\n    /*\n     * W[1] = A * R^2 * R^-1 mod N = A * R mod N\n     */\n    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );\n    else\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );\n\n    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );\n\n    /*\n     * X = R^2 * R^-1 mod N = R mod N\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );\n    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );\n\n    if( wsize > 1 )\n    {\n        /*\n         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)\n         */\n        j =  one << ( wsize - 1 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );\n\n        for( i = 0; i < wsize - 1; i++ )\n            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );\n\n        /*\n         * W[i] = W[i - 1] * W[1]\n         */\n        for( i = j + 1; i < ( one << wsize ); i++ )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );\n\n            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );\n        }\n    }\n\n    nblimbs = E->n;\n    bufsize = 0;\n    nbits   = 0;\n    wbits   = 0;\n    state   = 0;\n\n    while( 1 )\n    {\n        if( bufsize == 0 )\n        {\n            if( nblimbs == 0 )\n                break;\n\n            nblimbs--;\n\n            bufsize = sizeof( mbedtls_mpi_uint ) << 3;\n        }\n\n        bufsize--;\n\n        ei = (E->p[nblimbs] >> bufsize) & 1;\n\n        /*\n         * skip leading 0s\n         */\n        if( ei == 0 && state == 0 )\n            continue;\n\n        if( ei == 0 && state == 1 )\n        {\n            /*\n             * out of window, square X\n             */\n            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );\n            continue;\n        }\n\n        /*\n         * add ei to current window\n         */\n        state = 2;\n\n        nbits++;\n        wbits |= ( ei << ( wsize - nbits ) );\n\n        if( nbits == wsize )\n        {\n            /*\n             * X = X^wsize R^-1 mod N\n             */\n            for( i = 0; i < wsize; i++ )\n                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );\n\n            /*\n             * X = X * W[wbits] R^-1 mod N\n             */\n            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );\n\n            state--;\n            nbits = 0;\n            wbits = 0;\n        }\n    }\n\n    /*\n     * process the remaining bits\n     */\n    for( i = 0; i < nbits; i++ )\n    {\n        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );\n\n        wbits <<= 1;\n\n        if( ( wbits & ( one << wsize ) ) != 0 )\n            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );\n    }\n\n    /*\n     * X = A^E * R * R^-1 mod N = A^E mod N\n     */\n    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );\n\n    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )\n    {\n        X->s = -1;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );\n    }\n\ncleanup:\n\n    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )\n        mbedtls_mpi_free( &W[i] );\n\n    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );\n\n    if( _RR == NULL || _RR->p == NULL )\n        mbedtls_mpi_free( &RR );\n\n    return( ret );\n}\n\n/*\n * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)\n */\nint mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )\n{\n    int ret;\n    size_t lz, lzt;\n    mbedtls_mpi TG, TA, TB;\n\n    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );\n\n    lz = mbedtls_mpi_lsb( &TA );\n    lzt = mbedtls_mpi_lsb( &TB );\n\n    if( lzt < lz )\n        lz = lzt;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );\n\n    TA.s = TB.s = 1;\n\n    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );\n\n        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );\n        }\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );\n\n    return( ret );\n}\n\n/*\n * Fill X with size bytes of random.\n *\n * Use a temporary bytes representation to make sure the result is the same\n * regardless of the platform endianness (useful when f_rng is actually\n * deterministic, eg for tests).\n */\nint mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    int ret;\n    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];\n\n    if( size > MBEDTLS_MPI_MAX_SIZE )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );\n\ncleanup:\n    mbedtls_zeroize( buf, sizeof( buf ) );\n    return( ret );\n}\n\n/*\n * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)\n */\nint mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )\n{\n    int ret;\n    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;\n\n    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );\n    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );\n    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );\n\n    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )\n    {\n        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;\n        goto cleanup;\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );\n\n    do\n    {\n        while( ( TU.p[0] & 1 ) == 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );\n\n            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )\n            {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );\n                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );\n            }\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );\n        }\n\n        while( ( TV.p[0] & 1 ) == 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );\n\n            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )\n            {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );\n                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );\n            }\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );\n        }\n\n        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );\n        }\n    }\n    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );\n\n    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );\n\n    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );\n    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );\n    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_GENPRIME)\n\nstatic const int small_prime[] =\n{\n        3,    5,    7,   11,   13,   17,   19,   23,\n       29,   31,   37,   41,   43,   47,   53,   59,\n       61,   67,   71,   73,   79,   83,   89,   97,\n      101,  103,  107,  109,  113,  127,  131,  137,\n      139,  149,  151,  157,  163,  167,  173,  179,\n      181,  191,  193,  197,  199,  211,  223,  227,\n      229,  233,  239,  241,  251,  257,  263,  269,\n      271,  277,  281,  283,  293,  307,  311,  313,\n      317,  331,  337,  347,  349,  353,  359,  367,\n      373,  379,  383,  389,  397,  401,  409,  419,\n      421,  431,  433,  439,  443,  449,  457,  461,\n      463,  467,  479,  487,  491,  499,  503,  509,\n      521,  523,  541,  547,  557,  563,  569,  571,\n      577,  587,  593,  599,  601,  607,  613,  617,\n      619,  631,  641,  643,  647,  653,  659,  661,\n      673,  677,  683,  691,  701,  709,  719,  727,\n      733,  739,  743,  751,  757,  761,  769,  773,\n      787,  797,  809,  811,  821,  823,  827,  829,\n      839,  853,  857,  859,  863,  877,  881,  883,\n      887,  907,  911,  919,  929,  937,  941,  947,\n      953,  967,  971,  977,  983,  991,  997, -103\n};\n\n/*\n * Small divisors test (X must be positive)\n *\n * Return values:\n * 0: no small factor (possible prime, more tests needed)\n * 1: certain prime\n * MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: certain non-prime\n * other negative: error\n */\nstatic int mpi_check_small_factors( const mbedtls_mpi *X )\n{\n    int ret = 0;\n    size_t i;\n    mbedtls_mpi_uint r;\n\n    if( ( X->p[0] & 1 ) == 0 )\n        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );\n\n    for( i = 0; small_prime[i] > 0; i++ )\n    {\n        if( mbedtls_mpi_cmp_int( X, small_prime[i] ) <= 0 )\n            return( 1 );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, small_prime[i] ) );\n\n        if( r == 0 )\n            return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Miller-Rabin pseudo-primality test  (HAC 4.24)\n */\nstatic int mpi_miller_rabin( const mbedtls_mpi *X,\n                             int (*f_rng)(void *, unsigned char *, size_t),\n                             void *p_rng )\n{\n    int ret, count;\n    size_t i, j, k, n, s;\n    mbedtls_mpi W, R, T, A, RR;\n\n    mbedtls_mpi_init( &W ); mbedtls_mpi_init( &R ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &A );\n    mbedtls_mpi_init( &RR );\n\n    /*\n     * W = |X| - 1\n     * R = W >> lsb( W )\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );\n    s = mbedtls_mpi_lsb( &W );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &R, s ) );\n\n    i = mbedtls_mpi_bitlen( X );\n    /*\n     * HAC, table 4.4\n     */\n    n = ( ( i >= 1300 ) ?  2 : ( i >=  850 ) ?  3 :\n          ( i >=  650 ) ?  4 : ( i >=  350 ) ?  8 :\n          ( i >=  250 ) ? 12 : ( i >=  150 ) ? 18 : 27 );\n\n    for( i = 0; i < n; i++ )\n    {\n        /*\n         * pick a random A, 1 < A < |X| - 1\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );\n\n        if( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 )\n        {\n            j = mbedtls_mpi_bitlen( &A ) - mbedtls_mpi_bitlen( &W );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &A, j + 1 ) );\n        }\n        A.p[0] |= 3;\n\n        count = 0;\n        do {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );\n\n            j = mbedtls_mpi_bitlen( &A );\n            k = mbedtls_mpi_bitlen( &W );\n            if (j > k) {\n                MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &A, j - k ) );\n            }\n\n            if (count++ > 30) {\n                return MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;\n            }\n\n        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||\n                  mbedtls_mpi_cmp_int( &A, 1 )  <= 0    );\n\n        /*\n         * A = A^R mod |X|\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &A, &A, &R, X, &RR ) );\n\n        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||\n            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )\n            continue;\n\n        j = 1;\n        while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )\n        {\n            /*\n             * A = A * A mod |X|\n             */\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &A, &A ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &A, &T, X  ) );\n\n            if( mbedtls_mpi_cmp_int( &A, 1 ) == 0 )\n                break;\n\n            j++;\n        }\n\n        /*\n         * not prime if A != |X| - 1 or A == 1\n         */\n        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||\n            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )\n        {\n            ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;\n            break;\n        }\n    }\n\ncleanup:\n    mbedtls_mpi_free( &W ); mbedtls_mpi_free( &R ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &A );\n    mbedtls_mpi_free( &RR );\n\n    return( ret );\n}\n\n/*\n * Pseudo-primality test: small factors, then Miller-Rabin\n */\nint mbedtls_mpi_is_prime( const mbedtls_mpi *X,\n                  int (*f_rng)(void *, unsigned char *, size_t),\n                  void *p_rng )\n{\n    int ret;\n    mbedtls_mpi XX;\n\n    XX.s = 1;\n    XX.n = X->n;\n    XX.p = X->p;\n\n    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||\n        mbedtls_mpi_cmp_int( &XX, 1 ) == 0 )\n        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );\n\n    if( mbedtls_mpi_cmp_int( &XX, 2 ) == 0 )\n        return( 0 );\n\n    if( ( ret = mpi_check_small_factors( &XX ) ) != 0 )\n    {\n        if( ret == 1 )\n            return( 0 );\n\n        return( ret );\n    }\n\n    return( mpi_miller_rabin( &XX, f_rng, p_rng ) );\n}\n\n/*\n * Prime number generation\n */\nint mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int dh_flag,\n                   int (*f_rng)(void *, unsigned char *, size_t),\n                   void *p_rng )\n{\n    int ret;\n    size_t k, n;\n    mbedtls_mpi_uint r;\n    mbedtls_mpi Y;\n\n    if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &Y );\n\n    n = BITS_TO_LIMBS( nbits );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( X, n * ciL, f_rng, p_rng ) );\n\n    k = mbedtls_mpi_bitlen( X );\n    if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits + 1 ) );\n\n    mbedtls_mpi_set_bit( X, nbits-1, 1 );\n\n    X->p[0] |= 1;\n\n    if( dh_flag == 0 )\n    {\n        while( ( ret = mbedtls_mpi_is_prime( X, f_rng, p_rng ) ) != 0 )\n        {\n            if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )\n                goto cleanup;\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 2 ) );\n        }\n    }\n    else\n    {\n        /*\n         * An necessary condition for Y and X = 2Y + 1 to be prime\n         * is X = 2 mod 3 (which is equivalent to Y = 2 mod 3).\n         * Make sure it is satisfied, while keeping X = 3 mod 4\n         */\n\n        X->p[0] |= 2;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, 3 ) );\n        if( r == 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 8 ) );\n        else if( r == 1 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 4 ) );\n\n        /* Set Y = (X-1) / 2, which is X / 2 because X is odd */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, X ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, 1 ) );\n\n        while( 1 )\n        {\n            /*\n             * First, check small factors for X and Y\n             * before doing Miller-Rabin on any of them\n             */\n            if( ( ret = mpi_check_small_factors(  X         ) ) == 0 &&\n                ( ret = mpi_check_small_factors( &Y         ) ) == 0 &&\n                ( ret = mpi_miller_rabin(  X, f_rng, p_rng  ) ) == 0 &&\n                ( ret = mpi_miller_rabin( &Y, f_rng, p_rng  ) ) == 0 )\n            {\n                break;\n            }\n\n            if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )\n                goto cleanup;\n\n            /*\n             * Next candidates. We want to preserve Y = (X-1) / 2 and\n             * Y = 1 mod 2 and Y = 2 mod 3 (eq X = 3 mod 4 and X = 2 mod 3)\n             * so up Y by 6 and X by 12.\n             */\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int(  X,  X, 12 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &Y, &Y, 6  ) );\n        }\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &Y );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_GENPRIME */\n\n#if defined(MBEDTLS_SELF_TEST)\n\n#define GCD_PAIR_COUNT  3\n\nstatic const int gcd_pairs[GCD_PAIR_COUNT][3] =\n{\n    { 693, 609, 21 },\n    { 1764, 868, 28 },\n    { 768454923, 542167814, 1 }\n};\n\n/*\n * Checkup routine\n */\nint mbedtls_mpi_self_test( int verbose )\n{\n    int ret, i;\n    mbedtls_mpi A, E, N, X, Y, U, V;\n\n    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &N ); mbedtls_mpi_init( &X );\n    mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &U ); mbedtls_mpi_init( &V );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &A, 16,\n        \"EFE021C2645FD1DC586E69184AF4A31E\" \\\n        \"D5F53E93B5F123FA41680867BA110131\" \\\n        \"944FE7952E2517337780CB0DB80E61AA\" \\\n        \"E7C8DDC6C5C6AADEB34EB38A2F40D5E6\" ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &E, 16,\n        \"B2E7EFD37075B9F03FF989C7C5051C20\" \\\n        \"34D2A323810251127E7BF8625A4F49A5\" \\\n        \"F3E27F4DA8BD59C47D6DAABA4C8127BD\" \\\n        \"5B5C25763222FEFCCFC38B832366C29E\" ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &N, 16,\n        \"0066A198186C18C10B2F5ED9B522752A\" \\\n        \"9830B69916E535C8F047518A889A43A5\" \\\n        \"94B6BED27A168D31D4A52F88925AA8F5\" ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X, &A, &N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,\n        \"602AB7ECA597A3D6B56FF9829A5E8B85\" \\\n        \"9E857EA95A03512E2BAE7391688D264A\" \\\n        \"A5663B0341DB9CCFD2C4C5F421FEC814\" \\\n        \"8001B72E848A38CAE1C65F78E56ABDEF\" \\\n        \"E12D3C039B8A02D6BE593F0BBBDA56F1\" \\\n        \"ECF677152EF804370C1A305CAF3B5BF1\" \\\n        \"30879B56C61DE584A0F53A2447A51E\" ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #1 (mul_mpi): \" );\n\n    if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &X, &Y, &A, &N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,\n        \"256567336059E52CAE22925474705F39A94\" ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &V, 16,\n        \"6613F26162223DF488E9CD48CC132C7A\" \\\n        \"0AC93C701B001B092E4E5B9F73BCD27B\" \\\n        \"9EE50D0657C77F374E903CDFA4C642\" ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #2 (div_mpi): \" );\n\n    if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 ||\n        mbedtls_mpi_cmp_mpi( &Y, &V ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &X, &A, &E, &N, NULL ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,\n        \"36E139AEA55215609D2816998ED020BB\" \\\n        \"BD96C37890F65171D948E9BC7CBAA4D9\" \\\n        \"325D24D6A3C12710F10A09FA08AB87\" ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #3 (exp_mod): \" );\n\n    if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &X, &A, &N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,\n        \"003A0AAEDD7E784FC07D8F9EC6E3BFD5\" \\\n        \"C3DBA76456363A10869622EAC2DD84EC\" \\\n        \"C5B8A74DAC4D09E03B5E0BE779F2DF61\" ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #4 (inv_mod): \" );\n\n    if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        ret = 1;\n        goto cleanup;\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  MPI test #5 (simple gcd): \" );\n\n    for( i = 0; i < GCD_PAIR_COUNT; i++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &X, gcd_pairs[i][0] ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Y, gcd_pairs[i][1] ) );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &A, &X, &Y ) );\n\n        if( mbedtls_mpi_cmp_int( &A, gcd_pairs[i][2] ) != 0 )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed at %d\\n\", i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\ncleanup:\n\n    if( ret != 0 && verbose != 0 )\n        mbedtls_printf( \"Unexpected error, return code = %08X\\n\", ret );\n\n    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &N ); mbedtls_mpi_free( &X );\n    mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &U ); mbedtls_mpi_free( &V );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_BIGNUM_C */\n","/*\n *  Debugging routines\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_DEBUG_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc      calloc\n#define mbedtls_free        free\n#define mbedtls_time_t      time_t\n#define mbedtls_snprintf    snprintf\n#endif\n\n#include \"mbedtls/debug.h\"\n\n#include <stdarg.h>\n#include <stdio.h>\n#include <string.h>\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n#define DEBUG_BUF_SIZE      512\n\nstatic int debug_threshold = 0;\n\nvoid mbedtls_debug_set_threshold( int threshold )\n{\n    debug_threshold = threshold;\n}\n\n/*\n * All calls to f_dbg must be made via this function\n */\nstatic inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,\n                                    const char *file, int line,\n                                    const char *str )\n{\n    /*\n     * If in a threaded environment, we need a thread identifier.\n     * Since there is no portable way to get one, use the address of the ssl\n     * context instead, as it shouldn't be shared between threads.\n     */\n#if defined(MBEDTLS_THREADING_C)\n    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */\n    mbedtls_snprintf( idstr, sizeof( idstr ), \"%p: %s\", (void*)ssl, str );\n    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );\n#else\n    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );\n#endif\n}\n\nvoid mbedtls_debug_print_msg( const mbedtls_ssl_context *ssl, int level,\n                              const char *file, int line,\n                              const char *format, ... )\n{\n    va_list argp;\n    char str[DEBUG_BUF_SIZE];\n    int ret;\n\n    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )\n        return;\n\n    va_start( argp, format );\n#if defined(_WIN32)\n#if defined(_TRUNCATE)\n    ret = _vsnprintf_s( str, DEBUG_BUF_SIZE, _TRUNCATE, format, argp );\n#else\n    ret = _vsnprintf( str, DEBUG_BUF_SIZE, format, argp );\n    if( ret < 0 || (size_t) ret == DEBUG_BUF_SIZE )\n    {\n        str[DEBUG_BUF_SIZE-1] = '\\0';\n        ret = -1;\n    }\n#endif\n#else\n    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );\n#endif\n    va_end( argp );\n\n    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )\n    {\n        str[ret]     = '\\n';\n        str[ret + 1] = '\\0';\n    }\n\n    debug_send_line( ssl, level, file, line, str );\n}\n\nvoid mbedtls_debug_print_ret( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line,\n                      const char *text, int ret )\n{\n    char str[DEBUG_BUF_SIZE];\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )\n        return;\n\n    /*\n     * With non-blocking I/O and examples that just retry immediately,\n     * the logs would be quickly flooded with WANT_READ, so ignore that.\n     * Don't ignore WANT_WRITE however, since is is usually rare.\n     */\n    if( ret == MBEDTLS_ERR_SSL_WANT_READ )\n        return;\n\n    mbedtls_snprintf( str, sizeof( str ), \"%s() returned %d (-0x%04x)\\n\",\n              text, ret, -ret );\n\n    debug_send_line( ssl, level, file, line, str );\n}\n\nvoid mbedtls_debug_print_buf( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line, const char *text,\n                      const unsigned char *buf, size_t len )\n{\n    char str[DEBUG_BUF_SIZE];\n    char txt[17];\n    size_t i, idx = 0;\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )\n        return;\n\n    mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"dumping '%s' (%u bytes)\\n\",\n              text, (unsigned int) len );\n\n    debug_send_line( ssl, level, file, line, str );\n\n    idx = 0;\n    memset( txt, 0, sizeof( txt ) );\n    for( i = 0; i < len; i++ )\n    {\n        if( i >= 4096 )\n            break;\n\n        if( i % 16 == 0 )\n        {\n            if( i > 0 )\n            {\n                mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"  %s\\n\", txt );\n                debug_send_line( ssl, level, file, line, str );\n\n                idx = 0;\n                memset( txt, 0, sizeof( txt ) );\n            }\n\n            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"%04x: \",\n                             (unsigned int) i );\n\n        }\n\n        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \" %02x\",\n                         (unsigned int) buf[i] );\n        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;\n    }\n\n    if( len > 0 )\n    {\n        for( /* i = i */; i % 16 != 0; i++ )\n            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"   \" );\n\n        mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"  %s\\n\", txt );\n        debug_send_line( ssl, level, file, line, str );\n    }\n}\n\n#if defined(MBEDTLS_ECP_C)\nvoid mbedtls_debug_print_ecp( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line,\n                      const char *text, const mbedtls_ecp_point *X )\n{\n    char str[DEBUG_BUF_SIZE];\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )\n        return;\n\n    mbedtls_snprintf( str, sizeof( str ), \"%s(X)\", text );\n    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->X );\n\n    mbedtls_snprintf( str, sizeof( str ), \"%s(Y)\", text );\n    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );\n}\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_BIGNUM_C)\nvoid mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line,\n                      const char *text, const mbedtls_mpi *X )\n{\n    char str[DEBUG_BUF_SIZE];\n    int j, k, zeros = 1;\n    size_t i, n, idx = 0;\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )\n        return;\n\n    for( n = X->n - 1; n > 0; n-- )\n        if( X->p[n] != 0 )\n            break;\n\n    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )\n        if( ( ( X->p[n] >> j ) & 1 ) != 0 )\n            break;\n\n    mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"value of '%s' (%d bits) is:\\n\",\n              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );\n\n    debug_send_line( ssl, level, file, line, str );\n\n    idx = 0;\n    for( i = n + 1, j = 0; i > 0; i-- )\n    {\n        if( zeros && X->p[i - 1] == 0 )\n            continue;\n\n        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )\n        {\n            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )\n                continue;\n            else\n                zeros = 0;\n\n            if( j % 16 == 0 )\n            {\n                if( j > 0 )\n                {\n                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"\\n\" );\n                    debug_send_line( ssl, level, file, line, str );\n                    idx = 0;\n                }\n            }\n\n            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \" %02x\", (unsigned int)\n                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );\n\n            j++;\n        }\n\n    }\n\n    if( zeros == 1 )\n        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, \" 00\" );\n\n    mbedtls_snprintf( str + idx, sizeof( str ) - idx, \"\\n\" );\n    debug_send_line( ssl, level, file, line, str );\n}\n#endif /* MBEDTLS_BIGNUM_C */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nstatic void debug_print_pk( const mbedtls_ssl_context *ssl, int level,\n                            const char *file, int line,\n                            const char *text, const mbedtls_pk_context *pk )\n{\n    size_t i;\n    mbedtls_pk_debug_item items[MBEDTLS_PK_DEBUG_MAX_ITEMS];\n    char name[16];\n\n    memset( items, 0, sizeof( items ) );\n\n    if( mbedtls_pk_debug( pk, items ) != 0 )\n    {\n        debug_send_line( ssl, level, file, line,\n                          \"invalid PK context\\n\" );\n        return;\n    }\n\n    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )\n    {\n        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )\n            return;\n\n        mbedtls_snprintf( name, sizeof( name ), \"%s%s\", text, items[i].name );\n        name[sizeof( name ) - 1] = '\\0';\n\n        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )\n            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );\n        else\n#if defined(MBEDTLS_ECP_C)\n        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )\n            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );\n        else\n#endif\n            debug_send_line( ssl, level, file, line,\n                              \"should not happen\\n\" );\n    }\n}\n\nstatic void debug_print_line_by_line( const mbedtls_ssl_context *ssl, int level,\n                                      const char *file, int line, const char *text )\n{\n    char str[DEBUG_BUF_SIZE];\n    const char *start, *cur;\n\n    start = text;\n    for( cur = text; *cur != '\\0'; cur++ )\n    {\n        if( *cur == '\\n' )\n        {\n            size_t len = cur - start + 1;\n            if( len > DEBUG_BUF_SIZE - 1 )\n                len = DEBUG_BUF_SIZE - 1;\n\n            memcpy( str, start, len );\n            str[len] = '\\0';\n\n            debug_send_line( ssl, level, file, line, str );\n\n            start = cur + 1;\n        }\n    }\n}\n\nvoid mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,\n                      const char *file, int line,\n                      const char *text, const mbedtls_x509_crt *crt )\n{\n    char str[DEBUG_BUF_SIZE];\n    int i = 0;\n\n    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )\n        return;\n\n    while( crt != NULL )\n    {\n        char buf[1024];\n\n        mbedtls_snprintf( str, sizeof( str ), \"%s #%d:\\n\", text, ++i );\n        debug_send_line( ssl, level, file, line, str );\n\n        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, \"\", crt );\n        debug_print_line_by_line( ssl, level, file, line, buf );\n\n        debug_print_pk( ssl, level, file, line, \"crt->\", &crt->pk );\n\n        crt = crt->next;\n    }\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n#endif /* MBEDTLS_DEBUG_C */\n","/*\n *  Elliptic curve Diffie-Hellman\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n * RFC 4492\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECDH_C)\n\n#include \"mbedtls/ecdh.h\"\n\n#include <string.h>\n\n#if !defined(MBEDTLS_ECDH_GEN_PUBLIC_ALT)\n/*\n * Generate public key: simple wrapper around mbedtls_ecp_gen_keypair\n */\nint mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    return mbedtls_ecp_gen_keypair( grp, d, Q, f_rng, p_rng );\n}\n#endif /* MBEDTLS_ECDH_GEN_PUBLIC_ALT */\n\n#if !defined(MBEDTLS_ECDH_COMPUTE_SHARED_ALT)\n/*\n * Compute shared secret (SEC1 3.3.1)\n */\nint mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,\n                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,\n                         int (*f_rng)(void *, unsigned char *, size_t),\n                         void *p_rng )\n{\n    int ret;\n    mbedtls_ecp_point P;\n\n    mbedtls_ecp_point_init( &P );\n\n    /*\n     * Make sure Q is a valid pubkey before using it\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &P, d, Q, f_rng, p_rng ) );\n\n    if( mbedtls_ecp_is_zero( &P ) )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );\n\ncleanup:\n    mbedtls_ecp_point_free( &P );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDH_COMPUTE_SHARED_ALT */\n\n/*\n * Initialize context\n */\nvoid mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );\n}\n\n/*\n * Free context\n */\nvoid mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    mbedtls_ecp_group_free( &ctx->grp );\n    mbedtls_ecp_point_free( &ctx->Q   );\n    mbedtls_ecp_point_free( &ctx->Qp  );\n    mbedtls_ecp_point_free( &ctx->Vi  );\n    mbedtls_ecp_point_free( &ctx->Vf  );\n    mbedtls_mpi_free( &ctx->d  );\n    mbedtls_mpi_free( &ctx->z  );\n    mbedtls_mpi_free( &ctx->_d );\n}\n\n/*\n * Setup and write the ServerKeyExhange parameters (RFC 4492)\n *      struct {\n *          ECParameters    curve_params;\n *          ECPoint         public;\n *      } ServerECDHParams;\n */\nint mbedtls_ecdh_make_params( mbedtls_ecdh_context *ctx, size_t *olen,\n                      unsigned char *buf, size_t blen,\n                      int (*f_rng)(void *, unsigned char *, size_t),\n                      void *p_rng )\n{\n    int ret;\n    size_t grp_len, pt_len;\n\n    if( ctx == NULL || ctx->grp.pbits == 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )\n                != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_ecp_tls_write_group( &ctx->grp, &grp_len, buf, blen ) )\n                != 0 )\n        return( ret );\n\n    buf += grp_len;\n    blen -= grp_len;\n\n    if( ( ret = mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,\n                                     &pt_len, buf, blen ) ) != 0 )\n        return( ret );\n\n    *olen = grp_len + pt_len;\n    return( 0 );\n}\n\n/*\n * Read the ServerKeyExhange parameters (RFC 4492)\n *      struct {\n *          ECParameters    curve_params;\n *          ECPoint         public;\n *      } ServerECDHParams;\n */\nint mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,\n                      const unsigned char **buf, const unsigned char *end )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )\n                != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * Get parameters from a keypair\n */\nint mbedtls_ecdh_get_params( mbedtls_ecdh_context *ctx, const mbedtls_ecp_keypair *key,\n                     mbedtls_ecdh_side side )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 )\n        return( ret );\n\n    /* If it's not our key, just import the public part as Qp */\n    if( side == MBEDTLS_ECDH_THEIRS )\n        return( mbedtls_ecp_copy( &ctx->Qp, &key->Q ) );\n\n    /* Our key: import public (as Q) and private parts */\n    if( side != MBEDTLS_ECDH_OURS )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 ||\n        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * Setup and export the client public value\n */\nint mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,\n                      unsigned char *buf, size_t blen,\n                      int (*f_rng)(void *, unsigned char *, size_t),\n                      void *p_rng )\n{\n    int ret;\n\n    if( ctx == NULL || ctx->grp.pbits == 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )\n                != 0 )\n        return( ret );\n\n    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,\n                                olen, buf, blen );\n}\n\n/*\n * Parse and import the client's public value\n */\nint mbedtls_ecdh_read_public( mbedtls_ecdh_context *ctx,\n                      const unsigned char *buf, size_t blen )\n{\n    int ret;\n    const unsigned char *p = buf;\n\n    if( ctx == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, &p, blen ) ) != 0 )\n        return( ret );\n\n    if( (size_t)( p - buf ) != blen )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    return( 0 );\n}\n\n/*\n * Derive and export the shared secret\n */\nint mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,\n                      unsigned char *buf, size_t blen,\n                      int (*f_rng)(void *, unsigned char *, size_t),\n                      void *p_rng )\n{\n    int ret;\n\n    if( ctx == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp, &ctx->d,\n                                     f_rng, p_rng ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    if( mbedtls_mpi_size( &ctx->z ) > blen )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );\n    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );\n}\n\n#endif /* MBEDTLS_ECDH_C */\n","/*\n *  Elliptic curve DSA\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECDSA_C)\n\n#include \"mbedtls/ecdsa.h\"\n#include \"mbedtls/asn1write.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n#include \"mbedtls/hmac_drbg.h\"\n#endif\n\n/*\n * Derive a suitable integer for group grp from a buffer of length len\n * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3\n */\nstatic int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,\n                       const unsigned char *buf, size_t blen )\n{\n    int ret;\n    size_t n_size = ( grp->nbits + 7 ) / 8;\n    size_t use_size = blen > n_size ? n_size : blen;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );\n    if( use_size * 8 > grp->nbits )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );\n\n    /* While at it, reduce modulo N */\n    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );\n\ncleanup:\n    return( ret );\n}\n\n#if !defined(MBEDTLS_ECDSA_SIGN_ALT)\n/*\n * Compute ECDSA signature of a hashed message (SEC1 4.1.3)\n * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)\n */\nint mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret, key_tries, sign_tries, blind_tries;\n    mbedtls_ecp_point R;\n    mbedtls_mpi k, e, t;\n\n    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */\n    if( grp->N.p == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /* Make sure d is in range 1..n-1 */\n    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    mbedtls_ecp_point_init( &R );\n    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );\n\n    sign_tries = 0;\n    do\n    {\n        /*\n         * Steps 1-3: generate a suitable ephemeral keypair\n         * and set r = xR mod n\n         */\n        key_tries = 0;\n        do\n        {\n            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );\n\n            if( key_tries++ > 10 )\n            {\n                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;\n                goto cleanup;\n            }\n        }\n        while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );\n\n        /*\n         * Step 5: derive MPI from hashed message\n         */\n        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );\n\n        /*\n         * Generate a random value to blind inv_mod in next step,\n         * avoiding a potential timing leak.\n         */\n        blind_tries = 0;\n        do\n        {\n            size_t n_size = ( grp->nbits + 7 ) / 8;\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );\n\n            /* See mbedtls_ecp_gen_keypair() */\n            if( ++blind_tries > 30 )\n                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n        }\n        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||\n               mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );\n\n        /*\n         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );\n\n        if( sign_tries++ > 10 )\n        {\n            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;\n            goto cleanup;\n        }\n    }\n    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );\n\ncleanup:\n    mbedtls_ecp_point_free( &R );\n    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_SIGN_ALT */\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n/*\n * Deterministic signature wrapper\n */\nint mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,\n                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,\n                    mbedtls_md_type_t md_alg )\n{\n    int ret;\n    mbedtls_hmac_drbg_context rng_ctx;\n    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];\n    size_t grp_len = ( grp->nbits + 7 ) / 8;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_mpi h;\n\n    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &h );\n    mbedtls_hmac_drbg_init( &rng_ctx );\n\n    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );\n    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );\n    mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );\n\n    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,\n                      mbedtls_hmac_drbg_random, &rng_ctx );\n\ncleanup:\n    mbedtls_hmac_drbg_free( &rng_ctx );\n    mbedtls_mpi_free( &h );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_DETERMINISTIC */\n\n#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)\n/*\n * Verify ECDSA signature of hashed message (SEC1 4.1.4)\n * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)\n */\nint mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,\n                  const unsigned char *buf, size_t blen,\n                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)\n{\n    int ret;\n    mbedtls_mpi e, s_inv, u1, u2;\n    mbedtls_ecp_point R;\n\n    mbedtls_ecp_point_init( &R );\n    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );\n\n    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */\n    if( grp->N.p == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Step 1: make sure r and s are in range 1..n-1\n     */\n    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||\n        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    /*\n     * Additional precaution: make sure Q is valid\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );\n\n    /*\n     * Step 3: derive MPI from hashed message\n     */\n    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );\n\n    /*\n     * Step 4: u1 = e / s mod n, u2 = r / s mod n\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );\n\n    /*\n     * Step 5: R = u1 G + u2 Q\n     *\n     * Since we're not using any secret data, no need to pass a RNG to\n     * mbedtls_ecp_mul() for countermesures.\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );\n\n    if( mbedtls_ecp_is_zero( &R ) )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\n    /*\n     * Step 6: convert xR to an integer (no-op)\n     * Step 7: reduce xR mod n (gives v)\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );\n\n    /*\n     * Step 8: check if v (that is, R.X) is equal to r\n     */\n    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )\n    {\n        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;\n        goto cleanup;\n    }\n\ncleanup:\n    mbedtls_ecp_point_free( &R );\n    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECDSA_VERIFY_ALT */\n\n/*\n * Convert a signature (given by context) to ASN.1\n */\nstatic int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,\n                                    unsigned char *sig, size_t *slen )\n{\n    int ret;\n    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];\n    unsigned char *p = buf + sizeof( buf );\n    size_t len = 0;\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );\n\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );\n    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,\n                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );\n\n    memcpy( sig, p, len );\n    *slen = len;\n\n    return( 0 );\n}\n\n/*\n * Compute and write signature\n */\nint mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,\n                           const unsigned char *hash, size_t hlen,\n                           unsigned char *sig, size_t *slen,\n                           int (*f_rng)(void *, unsigned char *, size_t),\n                           void *p_rng )\n{\n    int ret;\n    mbedtls_mpi r, s;\n\n    mbedtls_mpi_init( &r );\n    mbedtls_mpi_init( &s );\n\n#if defined(MBEDTLS_ECDSA_DETERMINISTIC)\n    (void) f_rng;\n    (void) p_rng;\n\n    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,\n                             hash, hlen, md_alg ) );\n#else\n    (void) md_alg;\n\n    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,\n                         hash, hlen, f_rng, p_rng ) );\n#endif\n\n    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );\n\ncleanup:\n    mbedtls_mpi_free( &r );\n    mbedtls_mpi_free( &s );\n\n    return( ret );\n}\n\n#if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \\\n    defined(MBEDTLS_ECDSA_DETERMINISTIC)\nint mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,\n                               const unsigned char *hash, size_t hlen,\n                               unsigned char *sig, size_t *slen,\n                               mbedtls_md_type_t md_alg )\n{\n    return( mbedtls_ecdsa_write_signature( ctx, md_alg, hash, hlen, sig, slen,\n                                   NULL, NULL ) );\n}\n#endif\n\n/*\n * Read and check signature\n */\nint mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,\n                          const unsigned char *hash, size_t hlen,\n                          const unsigned char *sig, size_t slen )\n{\n    int ret;\n    unsigned char *p = (unsigned char *) sig;\n    const unsigned char *end = sig + slen;\n    size_t len;\n    mbedtls_mpi r, s;\n\n    mbedtls_mpi_init( &r );\n    mbedtls_mpi_init( &s );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( p + len != end )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +\n              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;\n        goto cleanup;\n    }\n\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||\n        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )\n    {\n        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,\n                              &ctx->Q, &r, &s ) ) != 0 )\n        goto cleanup;\n\n    if( p != end )\n        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;\n\ncleanup:\n    mbedtls_mpi_free( &r );\n    mbedtls_mpi_free( &s );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_ECDSA_GENKEY_ALT)\n/*\n * Generate key pair\n */\nint mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,\n                  int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    return( mbedtls_ecp_group_load( &ctx->grp, gid ) ||\n            mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) );\n}\n#endif /* MBEDTLS_ECDSA_GENKEY_ALT */\n\n/*\n * Set context from an mbedtls_ecp_keypair\n */\nint mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||\n        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||\n        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )\n    {\n        mbedtls_ecdsa_free( ctx );\n    }\n\n    return( ret );\n}\n\n/*\n * Initialize context\n */\nvoid mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )\n{\n    mbedtls_ecp_keypair_init( ctx );\n}\n\n/*\n * Free context\n */\nvoid mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )\n{\n    mbedtls_ecp_keypair_free( ctx );\n}\n\n#endif /* MBEDTLS_ECDSA_C */\n","/*\n *  Elliptic curves over GF(p): generic functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * References:\n *\n * SEC1 http://www.secg.org/index.php?action=secg,docs_secg\n * GECC = Guide to Elliptic Curve Cryptography - Hankerson, Menezes, Vanstone\n * FIPS 186-3 http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf\n * RFC 4492 for the related TLS structures and constants\n *\n * [Curve25519] http://cr.yp.to/ecdh/curve25519-20060209.pdf\n *\n * [2] CORON, Jean-S'ebastien. Resistance against differential power analysis\n *     for elliptic curve cryptosystems. In : Cryptographic Hardware and\n *     Embedded Systems. Springer Berlin Heidelberg, 1999. p. 292-302.\n *     <http://link.springer.com/chapter/10.1007/3-540-48059-5_25>\n *\n * [3] HEDABOU, Mustapha, PINEL, Pierre, et B'EN'ETEAU, Lucien. A comb method to\n *     render ECC resistant against Side Channel Attacks. IACR Cryptology\n *     ePrint Archive, 2004, vol. 2004, p. 342.\n *     <http://eprint.iacr.org/2004/342.pdf>\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n\n#include \"mbedtls/ecp.h\"\n#include \"mbedtls/threading.h\"\n\n#include <string.h>\n\n#if !defined(MBEDTLS_ECP_ALT)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#include <stdio.h>\n#define mbedtls_printf     printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#include \"mbedtls/ecp_internal.h\"\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n/*\n * Counts of point addition and doubling, and field multiplications.\n * Used to test resistance of point multiplication to simple timing attacks.\n */\nstatic unsigned long add_count, dbl_count, mul_count;\n#endif\n\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)   ||   \\\n    defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n#define ECP_SHORTWEIERSTRASS\n#endif\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n#define ECP_MONTGOMERY\n#endif\n\n/*\n * Curve types: internal for now, might be exposed later\n */\ntypedef enum\n{\n    ECP_TYPE_NONE = 0,\n    ECP_TYPE_SHORT_WEIERSTRASS,    /* y^2 = x^3 + a x + b      */\n    ECP_TYPE_MONTGOMERY,           /* y^2 = x^3 + a x^2 + x    */\n} ecp_curve_type;\n\n/*\n * List of supported curves:\n *  - internal ID\n *  - TLS NamedCurve ID (RFC 4492 sec. 5.1.1, RFC 7071 sec. 2)\n *  - size in bits\n *  - readable name\n *\n * Curves are listed in order: largest curves first, and for a given size,\n * fastest curves first. This provides the default order for the SSL module.\n *\n * Reminder: update profiles in x509_crt.c when adding a new curves!\n */\nstatic const mbedtls_ecp_curve_info ecp_supported_curves[] =\n{\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP521R1,    25,     521,    \"secp521r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP512R1,      28,     512,    \"brainpoolP512r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP384R1,    24,     384,    \"secp384r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP384R1,      27,     384,    \"brainpoolP384r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP256R1,    23,     256,    \"secp256r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP256K1,    22,     256,    \"secp256k1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\n    { MBEDTLS_ECP_DP_BP256R1,      26,     256,    \"brainpoolP256r1\"   },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP224R1,    21,     224,    \"secp224r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP224K1,    20,     224,    \"secp224k1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP192R1,    19,     192,    \"secp192r1\"         },\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n    { MBEDTLS_ECP_DP_SECP192K1,    18,     192,    \"secp192k1\"         },\n#endif\n    { MBEDTLS_ECP_DP_NONE,          0,     0,      NULL                },\n};\n\n#define ECP_NB_CURVES   sizeof( ecp_supported_curves ) /    \\\n                        sizeof( ecp_supported_curves[0] )\n\nstatic mbedtls_ecp_group_id ecp_supported_grp_id[ECP_NB_CURVES];\n\n/*\n * List of supported curves and associated info\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void )\n{\n    return( ecp_supported_curves );\n}\n\n/*\n * List of supported curves, group ID only\n */\nconst mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )\n{\n    static int init_done = 0;\n\n    if( ! init_done )\n    {\n        size_t i = 0;\n        const mbedtls_ecp_curve_info *curve_info;\n\n        for( curve_info = mbedtls_ecp_curve_list();\n             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n             curve_info++ )\n        {\n            ecp_supported_grp_id[i++] = curve_info->grp_id;\n        }\n        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;\n\n        init_done = 1;\n    }\n\n    return( ecp_supported_grp_id );\n}\n\n/*\n * Get the curve info for the internal identifier\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( curve_info->grp_id == grp_id )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the curve info from the TLS identifier\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( curve_info->tls_id == tls_id )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the curve info from the name\n */\nconst mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    for( curve_info = mbedtls_ecp_curve_list();\n         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;\n         curve_info++ )\n    {\n        if( strcmp( curve_info->name, name ) == 0 )\n            return( curve_info );\n    }\n\n    return( NULL );\n}\n\n/*\n * Get the type of a curve\n */\nstatic inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )\n{\n    if( grp->G.X.p == NULL )\n        return( ECP_TYPE_NONE );\n\n    if( grp->G.Y.p == NULL )\n        return( ECP_TYPE_MONTGOMERY );\n    else\n        return( ECP_TYPE_SHORT_WEIERSTRASS );\n}\n\n/*\n * Initialize (the components of) a point\n */\nvoid mbedtls_ecp_point_init( mbedtls_ecp_point *pt )\n{\n    if( pt == NULL )\n        return;\n\n    mbedtls_mpi_init( &pt->X );\n    mbedtls_mpi_init( &pt->Y );\n    mbedtls_mpi_init( &pt->Z );\n}\n\n/*\n * Initialize (the components of) a group\n */\nvoid mbedtls_ecp_group_init( mbedtls_ecp_group *grp )\n{\n    if( grp == NULL )\n        return;\n\n    memset( grp, 0, sizeof( mbedtls_ecp_group ) );\n}\n\n/*\n * Initialize (the components of) a key pair\n */\nvoid mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )\n{\n    if( key == NULL )\n        return;\n\n    mbedtls_ecp_group_init( &key->grp );\n    mbedtls_mpi_init( &key->d );\n    mbedtls_ecp_point_init( &key->Q );\n}\n\n/*\n * Unallocate (the components of) a point\n */\nvoid mbedtls_ecp_point_free( mbedtls_ecp_point *pt )\n{\n    if( pt == NULL )\n        return;\n\n    mbedtls_mpi_free( &( pt->X ) );\n    mbedtls_mpi_free( &( pt->Y ) );\n    mbedtls_mpi_free( &( pt->Z ) );\n}\n\n/*\n * Unallocate (the components of) a group\n */\nvoid mbedtls_ecp_group_free( mbedtls_ecp_group *grp )\n{\n    size_t i;\n\n    if( grp == NULL )\n        return;\n\n    if( grp->h != 1 )\n    {\n        mbedtls_mpi_free( &grp->P );\n        mbedtls_mpi_free( &grp->A );\n        mbedtls_mpi_free( &grp->B );\n        mbedtls_ecp_point_free( &grp->G );\n        mbedtls_mpi_free( &grp->N );\n    }\n\n    if( grp->T != NULL )\n    {\n        for( i = 0; i < grp->T_size; i++ )\n            mbedtls_ecp_point_free( &grp->T[i] );\n        mbedtls_free( grp->T );\n    }\n\n    mbedtls_zeroize( grp, sizeof( mbedtls_ecp_group ) );\n}\n\n/*\n * Unallocate (the components of) a key pair\n */\nvoid mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )\n{\n    if( key == NULL )\n        return;\n\n    mbedtls_ecp_group_free( &key->grp );\n    mbedtls_mpi_free( &key->d );\n    mbedtls_ecp_point_free( &key->Q );\n}\n\n/*\n * Copy the contents of a point\n */\nint mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Copy the contents of a group object\n */\nint mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )\n{\n    return mbedtls_ecp_group_load( dst, src->id );\n}\n\n/*\n * Set point to zero\n */\nint mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Tell if a point is zero\n */\nint mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )\n{\n    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );\n}\n\n/*\n * Compare two points lazyly\n */\nint mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,\n                           const mbedtls_ecp_point *Q )\n{\n    if( mbedtls_mpi_cmp_mpi( &P->X, &Q->X ) == 0 &&\n        mbedtls_mpi_cmp_mpi( &P->Y, &Q->Y ) == 0 &&\n        mbedtls_mpi_cmp_mpi( &P->Z, &Q->Z ) == 0 )\n    {\n        return( 0 );\n    }\n\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Import a non-zero point from ASCII strings\n */\nint mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,\n                           const char *x, const char *y )\n{\n    int ret;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->X, radix, x ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->Y, radix, y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Export a point into unsigned binary data (SEC1 2.3.3)\n */\nint mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,\n                            int format, size_t *olen,\n                            unsigned char *buf, size_t buflen )\n{\n    int ret = 0;\n    size_t plen;\n\n    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&\n        format != MBEDTLS_ECP_PF_COMPRESSED )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Common case: P == 0\n     */\n    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )\n    {\n        if( buflen < 1 )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x00;\n        *olen = 1;\n\n        return( 0 );\n    }\n\n    plen = mbedtls_mpi_size( &grp->P );\n\n    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )\n    {\n        *olen = 2 * plen + 1;\n\n        if( buflen < *olen )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x04;\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );\n    }\n    else if( format == MBEDTLS_ECP_PF_COMPRESSED )\n    {\n        *olen = plen + 1;\n\n        if( buflen < *olen )\n            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Import a point from unsigned binary data (SEC1 2.3.4)\n */\nint mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                           const unsigned char *buf, size_t ilen )\n{\n    int ret;\n    size_t plen;\n\n    if( ilen < 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( buf[0] == 0x00 )\n    {\n        if( ilen == 1 )\n            return( mbedtls_ecp_set_zero( pt ) );\n        else\n            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    plen = mbedtls_mpi_size( &grp->P );\n\n    if( buf[0] != 0x04 )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    if( ilen != 2 * plen + 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Import a point from a TLS ECPoint record (RFC 4492)\n *      struct {\n *          opaque point <1..2^8-1>;\n *      } ECPoint;\n */\nint mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                        const unsigned char **buf, size_t buf_len )\n{\n    unsigned char data_len;\n    const unsigned char *buf_start;\n\n    /*\n     * We must have at least two bytes (1 for length, at least one for data)\n     */\n    if( buf_len < 2 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    data_len = *(*buf)++;\n    if( data_len < 1 || data_len > buf_len - 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Save buffer start for read_binary and update buf\n     */\n    buf_start = *buf;\n    *buf += data_len;\n\n    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );\n}\n\n/*\n * Export a point as a TLS ECPoint record (RFC 4492)\n *      struct {\n *          opaque point <1..2^8-1>;\n *      } ECPoint;\n */\nint mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,\n                         int format, size_t *olen,\n                         unsigned char *buf, size_t blen )\n{\n    int ret;\n\n    /*\n     * buffer length must be at least one, for our length byte\n     */\n    if( blen < 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,\n                    olen, buf + 1, blen - 1) ) != 0 )\n        return( ret );\n\n    /*\n     * write length to the first byte and update total length\n     */\n    buf[0] = (unsigned char) *olen;\n    ++*olen;\n\n    return( 0 );\n}\n\n/*\n * Set a group from an ECParameters record (RFC 4492)\n */\nint mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len )\n{\n    uint16_t tls_id;\n    const mbedtls_ecp_curve_info *curve_info;\n\n    /*\n     * We expect at least three bytes (see below)\n     */\n    if( len < 3 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * First byte is curve_type; only named_curve is handled\n     */\n    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Next two bytes are the namedcurve value\n     */\n    tls_id = *(*buf)++;\n    tls_id <<= 8;\n    tls_id |= *(*buf)++;\n\n    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    return mbedtls_ecp_group_load( grp, curve_info->grp_id );\n}\n\n/*\n * Write the ECParameters record corresponding to a group (RFC 4492)\n */\nint mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,\n                         unsigned char *buf, size_t blen )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    if( ( curve_info = mbedtls_ecp_curve_info_from_grp_id( grp->id ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * We are going to write 3 bytes (see below)\n     */\n    *olen = 3;\n    if( blen < *olen )\n        return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );\n\n    /*\n     * First byte is curve_type, always named_curve\n     */\n    *buf++ = MBEDTLS_ECP_TLS_NAMED_CURVE;\n\n    /*\n     * Next two bytes are the namedcurve value\n     */\n    buf[0] = curve_info->tls_id >> 8;\n    buf[1] = curve_info->tls_id & 0xFF;\n\n    return( 0 );\n}\n\n/*\n * Wrapper around fast quasi-modp functions, with fall-back to mbedtls_mpi_mod_mpi.\n * See the documentation of struct mbedtls_ecp_group.\n *\n * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.\n */\nstatic int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )\n{\n    int ret;\n\n    if( grp->modp == NULL )\n        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );\n\n    /* N->s < 0 is a much faster test, which fails only if N is 0 */\n    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||\n        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )\n    {\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    MBEDTLS_MPI_CHK( grp->modp( N ) );\n\n    /* N->s < 0 is a much faster test, which fails only if N is 0 */\n    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );\n\n    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )\n        /* we known P, N and the result are positive */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Fast mod-p functions expect their argument to be in the 0..p^2 range.\n *\n * In order to guarantee that, we need to ensure that operands of\n * mbedtls_mpi_mul_mpi are in the 0..p range. So, after each operation we will\n * bring the result back to this range.\n *\n * The following macros are shortcuts for doing that.\n */\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, general case, to use after mbedtls_mpi_mul_mpi\n */\n#if defined(MBEDTLS_SELF_TEST)\n#define INC_MUL_COUNT   mul_count++;\n#else\n#define INC_MUL_COUNT\n#endif\n\n#define MOD_MUL( N )    do { MBEDTLS_MPI_CHK( ecp_modp( &N, grp ) ); INC_MUL_COUNT } \\\n                        while( 0 )\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_sub_mpi\n * N->s < 0 is a very fast test, which fails only if N is 0\n */\n#define MOD_SUB( N )                                \\\n    while( N.s < 0 && mbedtls_mpi_cmp_int( &N, 0 ) != 0 )   \\\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &N, &N, &grp->P ) )\n\n/*\n * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_add_mpi and mbedtls_mpi_mul_int.\n * We known P, N and the result are positive, so sub_abs is correct, and\n * a bit faster.\n */\n#define MOD_ADD( N )                                \\\n    while( mbedtls_mpi_cmp_mpi( &N, &grp->P ) >= 0 )        \\\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &N, &N, &grp->P ) )\n\n#if defined(ECP_SHORTWEIERSTRASS)\n/*\n * For curves in short Weierstrass form, we do all the internal operations in\n * Jacobian coordinates.\n *\n * For multiplication, we'll use a comb method with coutermeasueres against\n * SPA, hence timing attacks.\n */\n\n/*\n * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)\n * Cost: 1N := 1I + 3M + 1S\n */\nstatic int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )\n{\n    int ret;\n    mbedtls_mpi Zi, ZZi;\n\n    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )\n        return( 0 );\n\n#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_jac( grp, pt );\n    }\n#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */\n    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );\n\n    /*\n     * X = X / Z^2  mod p\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );\n\n    /*\n     * Y = Y / Z^3  mod p\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );\n\n    /*\n     * Z = 1\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );\n\n    return( ret );\n}\n\n/*\n * Normalize jacobian coordinates of an array of (pointers to) points,\n * using Montgomery's trick to perform only one inversion mod P.\n * (See for example Cohen's \"A Course in Computational Algebraic Number\n * Theory\", Algorithm 10.3.4.)\n *\n * Warning: fails (returning an error) if one of the points is zero!\n * This should never happen, see choice of w in ecp_mul_comb().\n *\n * Cost: 1N(t) := 1I + (6t - 3)M + 1S\n */\nstatic int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,\n                                   mbedtls_ecp_point *T[], size_t t_len )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi *c, u, Zi, ZZi;\n\n    if( t_len < 2 )\n        return( ecp_normalize_jac( grp, *T ) );\n\n#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_jac_many(grp, T, t_len);\n    }\n#endif\n\n    if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )\n        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );\n\n    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );\n\n    /*\n     * c[i] = Z_0 * ... * Z_i\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );\n    for( i = 1; i < t_len; i++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );\n        MOD_MUL( c[i] );\n    }\n\n    /*\n     * u = 1 / (Z_0 * ... * Z_n) mod P\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );\n\n    for( i = t_len - 1; ; i-- )\n    {\n        /*\n         * Zi = 1 / Z_i mod p\n         * u = 1 / (Z_0 * ... * Z_i) mod P\n         */\n        if( i == 0 ) {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );\n        }\n        else\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );\n        }\n\n        /*\n         * proceed as in normalize()\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );\n\n        /*\n         * Post-precessing: reclaim some memory by shrinking coordinates\n         * - not storing Z (always 1)\n         * - shrinking other coordinates, but still keeping the same number of\n         *   limbs as P, as otherwise it will too likely be regrown too fast.\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );\n        mbedtls_mpi_free( &T[i]->Z );\n\n        if( i == 0 )\n            break;\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );\n    for( i = 0; i < t_len; i++ )\n        mbedtls_mpi_free( &c[i] );\n    mbedtls_free( c );\n\n    return( ret );\n}\n\n/*\n * Conditional point inversion: Q -> -Q = (Q.X, -Q.Y, Q.Z) without leak.\n * \"inv\" must be 0 (don't invert) or 1 (invert) or the result will be invalid\n */\nstatic int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,\n                            mbedtls_ecp_point *Q,\n                            unsigned char inv )\n{\n    int ret;\n    unsigned char nonzero;\n    mbedtls_mpi mQY;\n\n    mbedtls_mpi_init( &mQY );\n\n    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );\n    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );\n\ncleanup:\n    mbedtls_mpi_free( &mQY );\n\n    return( ret );\n}\n\n/*\n * Point doubling R = 2 P, Jacobian coordinates\n *\n * Based on http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2 .\n *\n * We follow the variable naming fairly closely. The formula variations that trade a MUL for a SQR\n * (plus a few ADDs) aren't useful as our bignum implementation doesn't distinguish squaring.\n *\n * Standard optimizations are applied when curve parameter A is one of { 0, -3 }.\n *\n * Cost: 1D := 3M + 4S          (A ==  0)\n *             4M + 4S          (A == -3)\n *             3M + 6S + 1a     otherwise\n */\nstatic int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                           const mbedtls_ecp_point *P )\n{\n    int ret;\n    mbedtls_mpi M, S, T, U;\n\n#if defined(MBEDTLS_SELF_TEST)\n    dbl_count++;\n#endif\n\n#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_double_jac( grp, R, P );\n    }\n#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */\n\n    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );\n\n    /* Special case for A = -3 */\n    if( grp->A.p == NULL )\n    {\n        /* M = 3(X + Z^2)(X - Z^2) */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );\n    }\n    else\n    {\n        /* M = 3.X^2 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );\n\n        /* Optimize away for \"koblitz\" curves with A = 0 */\n        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )\n        {\n            /* M += A.Z^4 */\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );\n        }\n    }\n\n    /* S = 4.X.Y^2 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );\n\n    /* U = 8.Y^4 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );\n\n    /* T = M^2 - 2.S */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );\n\n    /* S = M(S - T) - U */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );\n\n    /* U = 2.Y.Z */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );\n\ncleanup:\n    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );\n\n    return( ret );\n}\n\n/*\n * Addition: R = P + Q, mixed affine-Jacobian coordinates (GECC 3.22)\n *\n * The coordinates of Q must be normalized (= affine),\n * but those of P don't need to. R is not normalized.\n *\n * Special cases: (1) P or Q is zero, (2) R is zero, (3) P == Q.\n * None of these cases can happen as intermediate step in ecp_mul_comb():\n * - at each step, P, Q and R are multiples of the base point, the factor\n *   being less than its order, so none of them is zero;\n * - Q is an odd multiple of the base point, P an even multiple,\n *   due to the choice of precomputed points in the modified comb method.\n * So branches for these cases do not leak secret information.\n *\n * We accept Q->Z being unset (saving memory in tables) as meaning 1.\n *\n * Cost: 1A := 8M + 3S\n */\nstatic int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )\n{\n    int ret;\n    mbedtls_mpi T1, T2, T3, T4, X, Y, Z;\n\n#if defined(MBEDTLS_SELF_TEST)\n    add_count++;\n#endif\n\n#if defined(MBEDTLS_ECP_ADD_MIXED_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_add_mixed( grp, R, P, Q );\n    }\n#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */\n\n    /*\n     * Trivial cases: P == 0 or Q == 0 (case 1)\n     */\n    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )\n        return( mbedtls_ecp_copy( R, Q ) );\n\n    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )\n        return( mbedtls_ecp_copy( R, P ) );\n\n    /*\n     * Make sure Q coordinates are normalized\n     */\n    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );\n    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );\n\n    /* Special cases (2) and (3) */\n    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )\n    {\n        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )\n        {\n            ret = ecp_double_jac( grp, R, P );\n            goto cleanup;\n        }\n        else\n        {\n            ret = mbedtls_ecp_set_zero( R );\n            goto cleanup;\n        }\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );\n    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );\n\n    return( ret );\n}\n\n/*\n * Randomize jacobian coordinates:\n * (X, Y, Z) -> (l^2 X, l^3 Y, l Z) for random l\n * This is sort of the reverse operation of ecp_normalize_jac().\n *\n * This countermeasure was first suggested in [2].\n */\nstatic int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_mpi l, ll;\n    size_t p_size;\n    int count = 0;\n\n#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng );\n    }\n#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */\n\n    p_size = ( grp->pbits + 7 ) / 8;\n    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );\n\n    /* Generate l such that 1 < l < p */\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );\n\n        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );\n\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n    }\n    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );\n\n    /* Z = l * Z */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );\n\n    /* X = l^2 * X */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );\n\n    /* Y = l^3 * Y */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );\n\ncleanup:\n    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );\n\n    return( ret );\n}\n\n/*\n * Check and define parameters used by the comb method (see below for details)\n */\n#if MBEDTLS_ECP_WINDOW_SIZE < 2 || MBEDTLS_ECP_WINDOW_SIZE > 7\n#error \"MBEDTLS_ECP_WINDOW_SIZE out of bounds\"\n#endif\n\n/* d = ceil( n / w ) */\n#define COMB_MAX_D      ( MBEDTLS_ECP_MAX_BITS + 1 ) / 2\n\n/* number of precomputed points */\n#define COMB_MAX_PRE    ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )\n\n/*\n * Compute the representation of m that will be used with our comb method.\n *\n * The basic comb method is described in GECC 3.44 for example. We use a\n * modified version that provides resistance to SPA by avoiding zero\n * digits in the representation as in [3]. We modify the method further by\n * requiring that all K_i be odd, which has the small cost that our\n * representation uses one more K_i, due to carries.\n *\n * Also, for the sake of compactness, only the seven low-order bits of x[i]\n * are used to represent K_i, and the msb of x[i] encodes the the sign (s_i in\n * the paper): it is set if and only if if s_i == -1;\n *\n * Calling conventions:\n * - x is an array of size d + 1\n * - w is the size, ie number of teeth, of the comb, and must be between\n *   2 and 7 (in practice, between 2 and MBEDTLS_ECP_WINDOW_SIZE)\n * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d\n *   (the result will be incorrect if these assumptions are not satisfied)\n */\nstatic void ecp_comb_fixed( unsigned char x[], size_t d,\n                            unsigned char w, const mbedtls_mpi *m )\n{\n    size_t i, j;\n    unsigned char c, cc, adjust;\n\n    memset( x, 0, d+1 );\n\n    /* First get the classical comb values (except for x_d = 0) */\n    for( i = 0; i < d; i++ )\n        for( j = 0; j < w; j++ )\n            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;\n\n    /* Now make sure x_1 .. x_d are odd */\n    c = 0;\n    for( i = 1; i <= d; i++ )\n    {\n        /* Add carry and update it */\n        cc   = x[i] & c;\n        x[i] = x[i] ^ c;\n        c = cc;\n\n        /* Adjust if needed, avoiding branches */\n        adjust = 1 - ( x[i] & 0x01 );\n        c   |= x[i] & ( x[i-1] * adjust );\n        x[i] = x[i] ^ ( x[i-1] * adjust );\n        x[i-1] |= adjust << 7;\n    }\n}\n\n/*\n * Precompute points for the comb method\n *\n * If i = i_{w-1} ... i_1 is the binary representation of i, then\n * T[i] = i_{w-1} 2^{(w-1)d} P + ... + i_1 2^d P + P\n *\n * T must be able to hold 2^{w - 1} elements\n *\n * Cost: d(w-1) D + (2^{w-1} - 1) A + 1 N(w-1) + 1 N(2^{w-1} - 1)\n */\nstatic int ecp_precompute_comb( const mbedtls_ecp_group *grp,\n                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,\n                                unsigned char w, size_t d )\n{\n    int ret;\n    unsigned char i, k;\n    size_t j;\n    mbedtls_ecp_point *cur, *TT[COMB_MAX_PRE - 1];\n\n    /*\n     * Set T[0] = P and\n     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)\n     */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );\n\n    k = 0;\n    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )\n    {\n        cur = T + i;\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );\n        for( j = 0; j < d; j++ )\n            MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );\n\n        TT[k++] = cur;\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );\n\n    /*\n     * Compute the remaining ones using the minimal number of additions\n     * Be careful to update T[2^l] only after using it!\n     */\n    k = 0;\n    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )\n    {\n        j = i;\n        while( j-- )\n        {\n            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );\n            TT[k++] = &T[i + j];\n        }\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );\n\ncleanup:\n\n    return( ret );\n}\n\n/*\n * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]\n */\nstatic int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                            const mbedtls_ecp_point T[], unsigned char t_len,\n                            unsigned char i )\n{\n    int ret;\n    unsigned char ii, j;\n\n    /* Ignore the \"sign\" bit and scale down */\n    ii =  ( i & 0x7Fu ) >> 1;\n\n    /* Read the whole table to thwart cache-based timing attacks */\n    for( j = 0; j < t_len; j++ )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );\n    }\n\n    /* Safely invert result if i is \"negative\" */\n    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Core multiplication algorithm for the (modified) comb method.\n * This part is actually common with the basic comb method (GECC 3.44)\n *\n * Cost: d A + d D + 1 R\n */\nstatic int ecp_mul_comb_core( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                              const mbedtls_ecp_point T[], unsigned char t_len,\n                              const unsigned char x[], size_t d,\n                              int (*f_rng)(void *, unsigned char *, size_t),\n                              void *p_rng )\n{\n    int ret;\n    mbedtls_ecp_point Txi;\n    size_t i;\n\n    mbedtls_ecp_point_init( &Txi );\n\n    /* Start with a non-zero point and randomize its coordinates */\n    i = d;\n    MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );\n    if( f_rng != 0 )\n        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );\n\n    while( i-- != 0 )\n    {\n        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );\n        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );\n        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );\n    }\n\ncleanup:\n\n    mbedtls_ecp_point_free( &Txi );\n\n    return( ret );\n}\n\n/*\n * Multiplication using the comb method,\n * for curves in short Weierstrass form\n */\nstatic int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n                         int (*f_rng)(void *, unsigned char *, size_t),\n                         void *p_rng )\n{\n    int ret;\n    unsigned char w, m_is_odd, p_eq_g, pre_len, i;\n    size_t d;\n    unsigned char k[COMB_MAX_D + 1];\n    mbedtls_ecp_point *T;\n    mbedtls_mpi M, mm;\n\n    mbedtls_mpi_init( &M );\n    mbedtls_mpi_init( &mm );\n\n    /* we need N to be odd to trnaform m in an odd number, check now */\n    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    /*\n     * Minimize the number of multiplications, that is minimize\n     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )\n     * (see costs of the various parts, with 1S = 1M)\n     */\n    w = grp->nbits >= 384 ? 5 : 4;\n\n    /*\n     * If P == G, pre-compute a bit more, since this may be re-used later.\n     * Just adding one avoids upping the cost of the first mul too much,\n     * and the memory cost too.\n     */\n#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1\n    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&\n               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );\n    if( p_eq_g )\n        w++;\n#else\n    p_eq_g = 0;\n#endif\n\n    /*\n     * Make sure w is within bounds.\n     * (The last test is useful only for very small curves in the test suite.)\n     */\n    if( w > MBEDTLS_ECP_WINDOW_SIZE )\n        w = MBEDTLS_ECP_WINDOW_SIZE;\n    if( w >= grp->nbits )\n        w = 2;\n\n    /* Other sizes that depend on w */\n    pre_len = 1U << ( w - 1 );\n    d = ( grp->nbits + w - 1 ) / w;\n\n    /*\n     * Prepare precomputed points: if P == G we want to\n     * use grp->T if already initialized, or initialize it.\n     */\n    T = p_eq_g ? grp->T : NULL;\n\n    if( T == NULL )\n    {\n        T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );\n        if( T == NULL )\n        {\n            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );\n\n        if( p_eq_g )\n        {\n            grp->T = T;\n            grp->T_size = pre_len;\n        }\n    }\n\n    /*\n     * Make sure M is odd (M = m or M = N - m, since N is odd)\n     * using the fact that m * P = - (N - m) * P\n     */\n    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );\n\n    /*\n     * Go for comb multiplication, R = M * P\n     */\n    ecp_comb_fixed( k, d, w, &M );\n    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );\n\n    /*\n     * Now get m * P from M * P and normalize it\n     */\n    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );\n    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );\n\ncleanup:\n\n    if( T != NULL && ! p_eq_g )\n    {\n        for( i = 0; i < pre_len; i++ )\n            mbedtls_ecp_point_free( &T[i] );\n        mbedtls_free( T );\n    }\n\n    mbedtls_mpi_free( &M );\n    mbedtls_mpi_free( &mm );\n\n    if( ret != 0 )\n        mbedtls_ecp_point_free( R );\n\n    return( ret );\n}\n\n#endif /* ECP_SHORTWEIERSTRASS */\n\n#if defined(ECP_MONTGOMERY)\n/*\n * For Montgomery curves, we do all the internal arithmetic in projective\n * coordinates. Import/export of points uses only the x coordinates, which is\n * internaly represented as X / Z.\n *\n * For scalar multiplication, we'll use a Montgomery ladder.\n */\n\n/*\n * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1\n * Cost: 1M + 1I\n */\nstatic int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )\n{\n    int ret;\n\n#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_normalize_mxz( grp, P );\n    }\n#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Randomize projective x/z coordinates:\n * (X, Z) -> (l X, l Z) for random l\n * This is sort of the reverse operation of ecp_normalize_mxz().\n *\n * This countermeasure was first suggested in [2].\n * Cost: 2M\n */\nstatic int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_mpi l;\n    size_t p_size;\n    int count = 0;\n\n#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );\n    }\n#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */\n\n    p_size = ( grp->pbits + 7 ) / 8;\n    mbedtls_mpi_init( &l );\n\n    /* Generate l such that 1 < l < p */\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );\n\n        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );\n\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n    }\n    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );\n\ncleanup:\n    mbedtls_mpi_free( &l );\n\n    return( ret );\n}\n\n/*\n * Double-and-add: R = 2P, S = P + Q, with d = X(P - Q),\n * for Montgomery curves in x/z coordinates.\n *\n * http://www.hyperelliptic.org/EFD/g1p/auto-code/montgom/xz/ladder/mladd-1987-m.op3\n * with\n * d =  X1\n * P = (X2, Z2)\n * Q = (X3, Z3)\n * R = (X4, Z4)\n * S = (X5, Z5)\n * and eliminating temporary variables tO, ..., t4.\n *\n * Cost: 5M + 4S\n */\nstatic int ecp_double_add_mxz( const mbedtls_ecp_group *grp,\n                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,\n                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,\n                               const mbedtls_mpi *d )\n{\n    int ret;\n    mbedtls_mpi A, AA, B, BB, E, C, D, DA, CB;\n\n#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)\n    if ( mbedtls_internal_ecp_grp_capable( grp ) )\n    {\n        return mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d );\n    }\n#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */\n\n    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );\n    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );\n    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );\n\ncleanup:\n    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );\n    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );\n    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );\n\n    return( ret );\n}\n\n/*\n * Multiplication with Montgomery ladder in x/z coordinates,\n * for curves in Montgomery form\n */\nstatic int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n                        int (*f_rng)(void *, unsigned char *, size_t),\n                        void *p_rng )\n{\n    int ret;\n    size_t i;\n    unsigned char b;\n    mbedtls_ecp_point RP;\n    mbedtls_mpi PX;\n\n    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );\n\n    /* Save PX and read from P before writing to R, in case P == R */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );\n\n    /* Set R to zero in modified x/z coordinates */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );\n    mbedtls_mpi_free( &R->Y );\n\n    /* RP.X might be sligtly larger than P, so reduce it */\n    MOD_ADD( RP.X );\n\n    /* Randomize coordinates of the starting point */\n    if( f_rng != NULL )\n        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );\n\n    /* Loop invariant: R = result so far, RP = R + P */\n    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */\n    while( i-- > 0 )\n    {\n        b = mbedtls_mpi_get_bit( m, i );\n        /*\n         *  if (b) R = 2R + P else R = 2R,\n         * which is:\n         *  if (b) double_add( RP, R, RP, R )\n         *  else   double_add( R, RP, R, RP )\n         * but using safe conditional swaps to avoid leaks\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );\n        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );\n    }\n\n    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );\n\ncleanup:\n    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );\n\n    return( ret );\n}\n\n#endif /* ECP_MONTGOMERY */\n\n/*\n * Multiplication R = m * P\n */\nint mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    char is_grp_capable = 0;\n#endif\n\n    /* Common sanity checks */\n    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\n    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||\n        ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if ( is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n        ret = ecp_mul_mxz( grp, R, m, P, f_rng, p_rng );\n\n#endif\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );\n\n#endif\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\ncleanup:\n\n    if ( is_grp_capable )\n    {\n        mbedtls_internal_ecp_free( grp );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    return( ret );\n}\n\n#if defined(ECP_SHORTWEIERSTRASS)\n/*\n * Check that an affine point is valid as a public key,\n * short weierstrass curves (SEC1 3.2.3.1)\n */\nstatic int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    int ret;\n    mbedtls_mpi YY, RHS;\n\n    /* pt coordinates must be normalized for our checks */\n    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||\n        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||\n        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||\n        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );\n\n    /*\n     * YY = Y^2\n     * RHS = X (X^2 + A) + B = X^3 + A X + B\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );\n\n    /* Special case for A = -3 */\n    if( grp->A.p == NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );\n\n    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )\n        ret = MBEDTLS_ERR_ECP_INVALID_KEY;\n\ncleanup:\n\n    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );\n\n    return( ret );\n}\n#endif /* ECP_SHORTWEIERSTRASS */\n\n/*\n * R = m * P with shortcuts for m == 1 and m == -1\n * NOT constant-time - ONLY for short Weierstrass!\n */\nstatic int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,\n                                      mbedtls_ecp_point *R,\n                                      const mbedtls_mpi *m,\n                                      const mbedtls_ecp_point *P )\n{\n    int ret;\n\n    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );\n    }\n    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );\n        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );\n    }\n    else\n    {\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );\n    }\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Linear combination\n * NOT constant-time\n */\nint mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,\n             const mbedtls_mpi *m, const mbedtls_ecp_point *P,\n             const mbedtls_mpi *n, const mbedtls_ecp_point *Q )\n{\n    int ret;\n    mbedtls_ecp_point mP;\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    char is_grp_capable = 0;\n#endif\n\n    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )\n        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n\n    mbedtls_ecp_point_init( &mP );\n\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if (  is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );\n    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );\n\ncleanup:\n\n#if defined(MBEDTLS_ECP_INTERNAL_ALT)\n    if ( is_grp_capable )\n    {\n        mbedtls_internal_ecp_free( grp );\n    }\n\n#endif /* MBEDTLS_ECP_INTERNAL_ALT */\n    mbedtls_ecp_point_free( &mP );\n\n    return( ret );\n}\n\n\n#if defined(ECP_MONTGOMERY)\n/*\n * Check validity of a public key for Montgomery curves with x-only schemes\n */\nstatic int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    /* [Curve25519 p. 5] Just check X is the correct number of bytes */\n    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n    return( 0 );\n}\n#endif /* ECP_MONTGOMERY */\n\n/*\n * Check that a point is valid as a public key\n */\nint mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )\n{\n    /* Must use affine coordinates */\n    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )\n        return( MBEDTLS_ERR_ECP_INVALID_KEY );\n\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n        return( ecp_check_pubkey_mx( grp, pt ) );\n#endif\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n        return( ecp_check_pubkey_sw( grp, pt ) );\n#endif\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Check that an mbedtls_mpi is valid as a private key\n */\nint mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )\n{\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n    {\n        /* see [Curve25519] page 5 */\n        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||\n            mbedtls_mpi_get_bit( d, 1 ) != 0 ||\n            mbedtls_mpi_get_bit( d, 2 ) != 0 ||\n            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n        else\n            return( 0 );\n    }\n#endif /* ECP_MONTGOMERY */\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n    {\n        /* see SEC1 3.2 */\n        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||\n            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )\n            return( MBEDTLS_ERR_ECP_INVALID_KEY );\n        else\n            return( 0 );\n    }\n#endif /* ECP_SHORTWEIERSTRASS */\n\n    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n}\n\n/*\n * Generate a keypair with configurable base point\n */\nint mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,\n                     const mbedtls_ecp_point *G,\n                     mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                     int (*f_rng)(void *, unsigned char *, size_t),\n                     void *p_rng )\n{\n    int ret;\n    size_t n_size = ( grp->nbits + 7 ) / 8;\n\n#if defined(ECP_MONTGOMERY)\n    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )\n    {\n        /* [M225] page 5 */\n        size_t b;\n\n        do {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );\n        } while( mbedtls_mpi_bitlen( d ) == 0);\n\n        /* Make sure the most significant bit is nbits */\n        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */\n        if( b > grp->nbits )\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );\n        else\n            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );\n\n        /* Make sure the last three bits are unset */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );\n    }\n    else\n#endif /* ECP_MONTGOMERY */\n#if defined(ECP_SHORTWEIERSTRASS)\n    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )\n    {\n        /* SEC1 3.2.1: Generate d such that 1 <= n < N */\n        int count = 0;\n\n        /*\n         * Match the procedure given in RFC 6979 (deterministic ECDSA):\n         * - use the same byte ordering;\n         * - keep the leftmost nbits bits of the generated octet string;\n         * - try until result is in the desired range.\n         * This also avoids any biais, which is especially important for ECDSA.\n         */\n        do\n        {\n            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );\n\n            /*\n             * Each try has at worst a probability 1/2 of failing (the msb has\n             * a probability 1/2 of being 0, and then the result will be < N),\n             * so after 30 tries failure probability is a most 2**(-30).\n             *\n             * For most curves, 1 try is enough with overwhelming probability,\n             * since N starts with a lot of 1s in binary, but some curves\n             * such as secp224k1 are actually very close to the worst case.\n             */\n            if( ++count > 30 )\n                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );\n        }\n        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||\n               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );\n    }\n    else\n#endif /* ECP_SHORTWEIERSTRASS */\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n\ncleanup:\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );\n}\n\n/*\n * Generate key pair, wrapper for conventional base point\n */\nint mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,\n                             mbedtls_mpi *d, mbedtls_ecp_point *Q,\n                             int (*f_rng)(void *, unsigned char *, size_t),\n                             void *p_rng )\n{\n    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );\n}\n\n/*\n * Generate a keypair, prettier wrapper\n */\nint mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )\n        return( ret );\n\n    return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );\n}\n\n/*\n * Check a public-private key pair\n */\nint mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )\n{\n    int ret;\n    mbedtls_ecp_point Q;\n    mbedtls_ecp_group grp;\n\n    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||\n        pub->grp.id != prv->grp.id ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||\n        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )\n    {\n        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );\n    }\n\n    mbedtls_ecp_point_init( &Q );\n    mbedtls_ecp_group_init( &grp );\n\n    /* mbedtls_ecp_mul() needs a non-const group... */\n    mbedtls_ecp_group_copy( &grp, &prv->grp );\n\n    /* Also checks d is valid */\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );\n\n    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||\n        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||\n        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )\n    {\n        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\ncleanup:\n    mbedtls_ecp_point_free( &Q );\n    mbedtls_ecp_group_free( &grp );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_SELF_TEST)\n\n/*\n * Checkup routine\n */\nint mbedtls_ecp_self_test( int verbose )\n{\n    int ret;\n    size_t i;\n    mbedtls_ecp_group grp;\n    mbedtls_ecp_point R, P;\n    mbedtls_mpi m;\n    unsigned long add_c_prev, dbl_c_prev, mul_c_prev;\n    /* exponents especially adapted for secp192r1 */\n    const char *exponents[] =\n    {\n        \"000000000000000000000000000000000000000000000001\", /* one */\n        \"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22830\", /* N - 1 */\n        \"5EA6F389A38B8BC81E767753B15AA5569E1782E30ABE7D25\", /* random */\n        \"400000000000000000000000000000000000000000000000\", /* one and zeros */\n        \"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", /* all ones */\n        \"555555555555555555555555555555555555555555555555\", /* 101010... */\n    };\n\n    mbedtls_ecp_group_init( &grp );\n    mbedtls_ecp_point_init( &R );\n    mbedtls_ecp_point_init( &P );\n    mbedtls_mpi_init( &m );\n\n    /* Use secp192r1 if available, or any available curve */\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, MBEDTLS_ECP_DP_SECP192R1 ) );\n#else\n    MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, mbedtls_ecp_curve_list()->grp_id ) );\n#endif\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ECP test #1 (constant op_count, base point G): \" );\n\n    /* Do a dummy multiplication first to trigger precomputation */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &m, 2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &P, &m, &grp.G, NULL, NULL ) );\n\n    add_count = 0;\n    dbl_count = 0;\n    mul_count = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );\n\n    for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )\n    {\n        add_c_prev = add_count;\n        dbl_c_prev = dbl_count;\n        mul_c_prev = mul_count;\n        add_count = 0;\n        dbl_count = 0;\n        mul_count = 0;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );\n\n        if( add_count != add_c_prev ||\n            dbl_count != dbl_c_prev ||\n            mul_count != mul_c_prev )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed (%u)\\n\", (unsigned int) i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ECP test #2 (constant op_count, other point): \" );\n    /* We computed P = 2G last time, use it */\n\n    add_count = 0;\n    dbl_count = 0;\n    mul_count = 0;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );\n    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );\n\n    for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )\n    {\n        add_c_prev = add_count;\n        dbl_c_prev = dbl_count;\n        mul_c_prev = mul_count;\n        add_count = 0;\n        dbl_count = 0;\n        mul_count = 0;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );\n\n        if( add_count != add_c_prev ||\n            dbl_count != dbl_c_prev ||\n            mul_count != mul_c_prev )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed (%u)\\n\", (unsigned int) i );\n\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\ncleanup:\n\n    if( ret < 0 && verbose != 0 )\n        mbedtls_printf( \"Unexpected error, return code = %08X\\n\", ret );\n\n    mbedtls_ecp_group_free( &grp );\n    mbedtls_ecp_point_free( &R );\n    mbedtls_ecp_point_free( &P );\n    mbedtls_mpi_free( &m );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* !MBEDTLS_ECP_ALT */\n\n#endif /* MBEDTLS_ECP_C */\n","/*\n *  Error message information\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ERROR_C) || defined(MBEDTLS_ERROR_STRERROR_DUMMY)\n#include \"mbedtls/error.h\"\n#include <string.h>\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#define mbedtls_snprintf snprintf\n#define mbedtls_time_t   time_t\n#endif\n\n#if defined(MBEDTLS_ERROR_C)\n\n#include <stdio.h>\n\n#if defined(MBEDTLS_AES_C)\n#include \"mbedtls/aes.h\"\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n#include \"mbedtls/arc4.h\"\n#endif\n\n#if defined(MBEDTLS_BASE64_C)\n#include \"mbedtls/base64.h\"\n#endif\n\n#if defined(MBEDTLS_BIGNUM_C)\n#include \"mbedtls/bignum.h\"\n#endif\n\n#if defined(MBEDTLS_BLOWFISH_C)\n#include \"mbedtls/blowfish.h\"\n#endif\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#include \"mbedtls/camellia.h\"\n#endif\n\n#if defined(MBEDTLS_CCM_C)\n#include \"mbedtls/ccm.h\"\n#endif\n\n#if defined(MBEDTLS_CIPHER_C)\n#include \"mbedtls/cipher.h\"\n#endif\n\n#if defined(MBEDTLS_CMAC_C)\n#include \"mbedtls/cmac.h\"\n#endif\n\n#if defined(MBEDTLS_CTR_DRBG_C)\n#include \"mbedtls/ctr_drbg.h\"\n#endif\n\n#if defined(MBEDTLS_DES_C)\n#include \"mbedtls/des.h\"\n#endif\n\n#if defined(MBEDTLS_DHM_C)\n#include \"mbedtls/dhm.h\"\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n\n#if defined(MBEDTLS_ENTROPY_C)\n#include \"mbedtls/entropy.h\"\n#endif\n\n#if defined(MBEDTLS_GCM_C)\n#include \"mbedtls/gcm.h\"\n#endif\n\n#if defined(MBEDTLS_HMAC_DRBG_C)\n#include \"mbedtls/hmac_drbg.h\"\n#endif\n\n#if defined(MBEDTLS_MD_C)\n#include \"mbedtls/md.h\"\n#endif\n\n#if defined(MBEDTLS_MD2_C)\n#include \"mbedtls/md2.h\"\n#endif\n\n#if defined(MBEDTLS_MD4_C)\n#include \"mbedtls/md4.h\"\n#endif\n\n#if defined(MBEDTLS_MD5_C)\n#include \"mbedtls/md5.h\"\n#endif\n\n#if defined(MBEDTLS_NET_C)\n#include \"mbedtls/net_sockets.h\"\n#endif\n\n#if defined(MBEDTLS_OID_C)\n#include \"mbedtls/oid.h\"\n#endif\n\n#if defined(MBEDTLS_PADLOCK_C)\n#include \"mbedtls/padlock.h\"\n#endif\n\n#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)\n#include \"mbedtls/pem.h\"\n#endif\n\n#if defined(MBEDTLS_PK_C)\n#include \"mbedtls/pk.h\"\n#endif\n\n#if defined(MBEDTLS_PKCS12_C)\n#include \"mbedtls/pkcs12.h\"\n#endif\n\n#if defined(MBEDTLS_PKCS5_C)\n#include \"mbedtls/pkcs5.h\"\n#endif\n\n#if defined(MBEDTLS_RIPEMD160_C)\n#include \"mbedtls/ripemd160.h\"\n#endif\n\n#if defined(MBEDTLS_RSA_C)\n#include \"mbedtls/rsa.h\"\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n#include \"mbedtls/sha1.h\"\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n#include \"mbedtls/sha256.h\"\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n#include \"mbedtls/sha512.h\"\n#endif\n\n#if defined(MBEDTLS_SSL_TLS_C)\n#include \"mbedtls/ssl.h\"\n#endif\n\n#if defined(MBEDTLS_THREADING_C)\n#include \"mbedtls/threading.h\"\n#endif\n\n#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)\n#include \"mbedtls/x509.h\"\n#endif\n\n#if defined(MBEDTLS_XTEA_C)\n#include \"mbedtls/xtea.h\"\n#endif\n\n\nvoid mbedtls_strerror( int ret, char *buf, size_t buflen )\n{\n    size_t len;\n    int use_ret;\n\n    if( buflen == 0 )\n        return;\n\n    memset( buf, 0x00, buflen );\n\n    if( ret < 0 )\n        ret = -ret;\n\n    if( ret & 0xFF80 )\n    {\n        use_ret = ret & 0xFF80;\n\n        // High level error codes\n        //\n        // BEGIN generated code\n#if defined(MBEDTLS_CIPHER_C)\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - The selected feature is not available\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Bad input parameters\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Failed to allocate memory\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_PADDING) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Input data contains invalid padding and is rejected\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Decryption of block requires a full block\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_AUTH_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Authentication failed (for AEAD modes)\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - The context is invalid. For example, because it was freed\" );\n        if( use_ret == -(MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"CIPHER - Cipher hardware accelerator failed\" );\n#endif /* MBEDTLS_CIPHER_C */\n\n#if defined(MBEDTLS_DHM_C)\n        if( use_ret == -(MBEDTLS_ERR_DHM_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Bad input parameters\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_READ_PARAMS_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Reading of the DHM parameters failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Making of the DHM parameters failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Reading of the public values failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Making of the public value failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_CALC_SECRET_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Calculation of the DHM secret failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"DHM - The ASN.1 data is not formatted correctly\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Allocation of memory failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_FILE_IO_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Read or write of file failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - DHM hardware accelerator failed\" );\n        if( use_ret == -(MBEDTLS_ERR_DHM_SET_GROUP_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"DHM - Setting the modulus and generator failed\" );\n#endif /* MBEDTLS_DHM_C */\n\n#if defined(MBEDTLS_ECP_C)\n        if( use_ret == -(MBEDTLS_ERR_ECP_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL) )\n            mbedtls_snprintf( buf, buflen, \"ECP - The buffer is too small to write to\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Requested curve not available\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_VERIFY_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"ECP - The signature is not valid\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Memory allocation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_RANDOM_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Generation of random value, such as (ephemeral) key, failed\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_INVALID_KEY) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Invalid private or public key\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"ECP - Signature is valid but shorter than the user-supplied length\" );\n        if( use_ret == -(MBEDTLS_ERR_ECP_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"ECP - ECP hardware accelerator failed\" );\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_MD_C)\n        if( use_ret == -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"MD - The selected feature is not available\" );\n        if( use_ret == -(MBEDTLS_ERR_MD_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"MD - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_MD_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"MD - Failed to allocate memory\" );\n        if( use_ret == -(MBEDTLS_ERR_MD_FILE_IO_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"MD - Opening or reading of file failed\" );\n        if( use_ret == -(MBEDTLS_ERR_MD_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"MD - MD hardware accelerator failed\" );\n#endif /* MBEDTLS_MD_C */\n\n#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)\n        if( use_ret == -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT) )\n            mbedtls_snprintf( buf, buflen, \"PEM - No PEM header or footer found\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PEM - PEM string is not as expected\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Failed to allocate memory\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_INVALID_ENC_IV) )\n            mbedtls_snprintf( buf, buflen, \"PEM - RSA IV is not in hex-format\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Unsupported key encryption algorithm\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Private key password can't be empty\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Given private key password does not allow for correct decryption\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Unavailable feature, e.g. hashing/encryption combination\" );\n        if( use_ret == -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PEM - Bad input parameters to function\" );\n#endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */\n\n#if defined(MBEDTLS_PK_C)\n        if( use_ret == -(MBEDTLS_ERR_PK_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"PK - Memory allocation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_TYPE_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PK - Type mismatch, eg attempt to encrypt with an ECDSA key\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PK - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_FILE_IO_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"PK - Read/write of file failed\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION) )\n            mbedtls_snprintf( buf, buflen, \"PK - Unsupported key version\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"PK - Invalid key tag or value\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG) )\n            mbedtls_snprintf( buf, buflen, \"PK - Key algorithm is unsupported (only RSA and EC are supported)\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"PK - Private key password can't be empty\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PK - Given private key password does not allow for correct decryption\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_PUBKEY) )\n            mbedtls_snprintf( buf, buflen, \"PK - The pubkey tag or value is invalid (only RSA and EC are supported)\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_INVALID_ALG) )\n            mbedtls_snprintf( buf, buflen, \"PK - The algorithm tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE) )\n            mbedtls_snprintf( buf, buflen, \"PK - Elliptic curve is unsupported (only NIST curves are supported)\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"PK - Unavailable feature, e.g. RSA disabled for RSA key\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PK - The signature is valid but its length is less than expected\" );\n        if( use_ret == -(MBEDTLS_ERR_PK_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"PK - PK hardware accelerator failed\" );\n#endif /* MBEDTLS_PK_C */\n\n#if defined(MBEDTLS_PKCS12_C)\n        if( use_ret == -(MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PKCS12 - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"PKCS12 - Feature not available, e.g. unsupported encryption scheme\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"PKCS12 - PBE ASN.1 data not as expected\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PKCS12 - Given private key password does not allow for correct decryption\" );\n#endif /* MBEDTLS_PKCS12_C */\n\n#if defined(MBEDTLS_PKCS5_C)\n        if( use_ret == -(MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"PKCS5 - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS5_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"PKCS5 - Unexpected ASN.1 data\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"PKCS5 - Requested encryption or digest alg not available\" );\n        if( use_ret == -(MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"PKCS5 - Given private key password does not allow for correct decryption\" );\n#endif /* MBEDTLS_PKCS5_C */\n\n#if defined(MBEDTLS_RSA_C)\n        if( use_ret == -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"RSA - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_INVALID_PADDING) )\n            mbedtls_snprintf( buf, buflen, \"RSA - Input data contains invalid padding and is rejected\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - Something failed during generation of a key\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - Key failed to pass the validity check of the library\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_PUBLIC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The public key operation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_PRIVATE_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The private key operation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_VERIFY_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The PKCS#1 verification failed\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The output buffer for decryption is not large enough\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_RNG_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The random generator failed to generate non-zeros\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION) )\n            mbedtls_snprintf( buf, buflen, \"RSA - The implementation does not offer the requested operation, for example, because of security violations or lack of functionality\" );\n        if( use_ret == -(MBEDTLS_ERR_RSA_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"RSA - RSA hardware accelerator failed\" );\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_SSL_TLS_C)\n        if( use_ret == -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The requested feature is not available\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Bad input parameters to function\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_MAC) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Verification of the message MAC failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_RECORD) )\n            mbedtls_snprintf( buf, buflen, \"SSL - An invalid SSL record was received\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CONN_EOF) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The connection indicated an EOF\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_CIPHER) )\n            mbedtls_snprintf( buf, buflen, \"SSL - An unknown cipher was received\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The server has no ciphersuites in common with the client\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NO_RNG) )\n            mbedtls_snprintf( buf, buflen, \"SSL - No RNG was provided to the SSL module\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - No client certification received from the client, but required by the authentication mode\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Our own certificate(s) is/are too large to send in an SSL message\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The own certificate is not set, but needed by the server\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The own private key or pre-shared key is not set, but needed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - No CA Chain is set, but required to operate\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - An unexpected message was received from our peer\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE) )\n        {\n            mbedtls_snprintf( buf, buflen, \"SSL - A fatal alert message was received from our peer\" );\n            return;\n        }\n        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Verification of our peer failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The peer notified us that the connection is going to be closed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ClientHello handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ServerHello handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the Certificate handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the CertificateRequest handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ServerKeyExchange handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ServerHelloDone handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ClientKeyExchange handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the CertificateVerify handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the ChangeCipherSpec handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_FINISHED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the Finished handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Memory allocation failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Hardware acceleration function returned with error\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Hardware acceleration function skipped / left alone data\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_COMPRESSION_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the compression / decompression failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Handshake protocol not within min/max boundaries\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Processing of the NewSessionTicket handshake message failed\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Session ticket has expired\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Unknown identity received (eg, PSK identity)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_INTERNAL_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Internal error (eg, unexpected failure in lower-level module)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING) )\n            mbedtls_snprintf( buf, buflen, \"SSL - A counter would wrap (eg, too many messages exchanged)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Unexpected message at ServerHello in renegotiation\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED) )\n            mbedtls_snprintf( buf, buflen, \"SSL - DTLS client must retry for hello verification\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL) )\n            mbedtls_snprintf( buf, buflen, \"SSL - A buffer is too small to receive or write a message\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_READ) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Connection requires a read call\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_WANT_WRITE) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Connection requires a write call\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_TIMEOUT) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The operation timed out\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The client initiated a reconnect from the same port\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Record header looks valid but is not expected\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_NON_FATAL) )\n            mbedtls_snprintf( buf, buflen, \"SSL - The alert message received indicates a non-fatal error\" );\n        if( use_ret == -(MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH) )\n            mbedtls_snprintf( buf, buflen, \"SSL - Couldn't set the hash for verifying CertificateVerify\" );\n#endif /* MBEDTLS_SSL_TLS_C */\n\n#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)\n        if( use_ret == -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Unavailable feature, e.g. RSA hashing/encryption combination\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_OID) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Requested OID is unknown\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_VERSION) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The CRT/CRL/CSR version element is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SERIAL) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The serial tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_ALG) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The algorithm tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_NAME) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The name tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_DATE) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The date tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_SIGNATURE) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The signature tag or value invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS) )\n            mbedtls_snprintf( buf, buflen, \"X509 - The extension tag or value is invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_VERSION) )\n            mbedtls_snprintf( buf, buflen, \"X509 - CRT/CRL/CSR has an unsupported version number\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Signature algorithm (oid) is unsupported\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_SIG_MISMATCH) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Signature algorithms do not match. (see \\\\c ::mbedtls_x509_crt sig_oid)\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Certificate verification failed, e.g. CRL, CA or signature check failed\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Format not recognized as DER or PEM\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_BAD_INPUT_DATA) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Input invalid\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_ALLOC_FAILED) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Allocation of memory failed\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_FILE_IO_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Read/write of file failed\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )\n            mbedtls_snprintf( buf, buflen, \"X509 - Destination buffer is too small\" );\n        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )\n            mbedtls_snprintf( buf, buflen, \"X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed\" );\n#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */\n        // END generated code\n\n        if( strlen( buf ) == 0 )\n            mbedtls_snprintf( buf, buflen, \"UNKNOWN ERROR CODE (%04X)\", use_ret );\n    }\n\n    use_ret = ret & ~0xFF80;\n\n    if( use_ret == 0 )\n        return;\n\n    // If high level code is present, make a concatenation between both\n    // error strings.\n    //\n    len = strlen( buf );\n\n    if( len > 0 )\n    {\n        if( buflen - len < 5 )\n            return;\n\n        mbedtls_snprintf( buf + len, buflen - len, \" : \" );\n\n        buf += len + 3;\n        buflen -= len + 3;\n    }\n\n    // Low level error codes\n    //\n    // BEGIN generated code\n#if defined(MBEDTLS_AES_C)\n    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"AES - Invalid key length\" );\n    if( use_ret == -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"AES - Invalid data input length\" );\n    if( use_ret == -(MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE) )\n        mbedtls_snprintf( buf, buflen, \"AES - Feature not available. For example, an unsupported AES key size\" );\n    if( use_ret == -(MBEDTLS_ERR_AES_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"AES - AES hardware accelerator failed\" );\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n    if( use_ret == -(MBEDTLS_ERR_ARC4_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"ARC4 - ARC4 hardware accelerator failed\" );\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_ASN1_PARSE_C)\n    if( use_ret == -(MBEDTLS_ERR_ASN1_OUT_OF_DATA) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Out of data when parsing an ASN1 data structure\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - ASN1 tag was of an unexpected value\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Error when trying to determine the length or invalid length\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Actual length differs from expected length\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_INVALID_DATA) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Data is invalid. (not used)\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_ALLOC_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Memory allocation failed\" );\n    if( use_ret == -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"ASN1 - Buffer too small when writing ASN.1 data structure\" );\n#endif /* MBEDTLS_ASN1_PARSE_C */\n\n#if defined(MBEDTLS_BASE64_C)\n    if( use_ret == -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"BASE64 - Output buffer too small\" );\n    if( use_ret == -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER) )\n        mbedtls_snprintf( buf, buflen, \"BASE64 - Invalid character in input\" );\n#endif /* MBEDTLS_BASE64_C */\n\n#if defined(MBEDTLS_BIGNUM_C)\n    if( use_ret == -(MBEDTLS_ERR_MPI_FILE_IO_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - An error occurred while reading from or writing to a file\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - Bad input parameters to function\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_INVALID_CHARACTER) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - There is an invalid character in the digit string\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - The buffer is too small to write to\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - The input arguments are negative or result in illegal output\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - The input argument for division is zero, which is not allowed\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - The input arguments are not acceptable\" );\n    if( use_ret == -(MBEDTLS_ERR_MPI_ALLOC_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"BIGNUM - Memory allocation failed\" );\n#endif /* MBEDTLS_BIGNUM_C */\n\n#if defined(MBEDTLS_BLOWFISH_C)\n    if( use_ret == -(MBEDTLS_ERR_BLOWFISH_INVALID_KEY_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"BLOWFISH - Invalid key length\" );\n    if( use_ret == -(MBEDTLS_ERR_BLOWFISH_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"BLOWFISH - Blowfish hardware accelerator failed\" );\n    if( use_ret == -(MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"BLOWFISH - Invalid data input length\" );\n#endif /* MBEDTLS_BLOWFISH_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_INVALID_KEY_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"CAMELLIA - Invalid key length\" );\n    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"CAMELLIA - Invalid data input length\" );\n    if( use_ret == -(MBEDTLS_ERR_CAMELLIA_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CAMELLIA - Camellia hardware accelerator failed\" );\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_CCM_C)\n    if( use_ret == -(MBEDTLS_ERR_CCM_BAD_INPUT) )\n        mbedtls_snprintf( buf, buflen, \"CCM - Bad input parameters to the function\" );\n    if( use_ret == -(MBEDTLS_ERR_CCM_AUTH_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CCM - Authenticated decryption failed\" );\n    if( use_ret == -(MBEDTLS_ERR_CCM_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CCM - CCM hardware accelerator failed\" );\n#endif /* MBEDTLS_CCM_C */\n\n#if defined(MBEDTLS_CMAC_C)\n    if( use_ret == -(MBEDTLS_ERR_CMAC_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CMAC - CMAC hardware accelerator failed\" );\n#endif /* MBEDTLS_CMAC_C */\n\n#if defined(MBEDTLS_CTR_DRBG_C)\n    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"CTR_DRBG - The entropy source failed\" );\n    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG) )\n        mbedtls_snprintf( buf, buflen, \"CTR_DRBG - The requested random buffer length is too big\" );\n    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG) )\n        mbedtls_snprintf( buf, buflen, \"CTR_DRBG - The input (entropy + additional data) is too large\" );\n    if( use_ret == -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"CTR_DRBG - Read or write error in file\" );\n#endif /* MBEDTLS_CTR_DRBG_C */\n\n#if defined(MBEDTLS_DES_C)\n    if( use_ret == -(MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"DES - The data input has an invalid length\" );\n    if( use_ret == -(MBEDTLS_ERR_DES_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"DES - DES hardware accelerator failed\" );\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ENTROPY_C)\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_SOURCE_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - Critical entropy source failure\" );\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_MAX_SOURCES) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - No more sources can be added\" );\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - No sources have been added to poll\" );\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - No strong sources have been added to poll\" );\n    if( use_ret == -(MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"ENTROPY - Read/write error in file\" );\n#endif /* MBEDTLS_ENTROPY_C */\n\n#if defined(MBEDTLS_GCM_C)\n    if( use_ret == -(MBEDTLS_ERR_GCM_AUTH_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"GCM - Authenticated decryption failed\" );\n    if( use_ret == -(MBEDTLS_ERR_GCM_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"GCM - GCM hardware accelerator failed\" );\n    if( use_ret == -(MBEDTLS_ERR_GCM_BAD_INPUT) )\n        mbedtls_snprintf( buf, buflen, \"GCM - Bad input parameters to function\" );\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_HMAC_DRBG_C)\n    if( use_ret == -(MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG) )\n        mbedtls_snprintf( buf, buflen, \"HMAC_DRBG - Too many random requested in single call\" );\n    if( use_ret == -(MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG) )\n        mbedtls_snprintf( buf, buflen, \"HMAC_DRBG - Input too large (Entropy + additional)\" );\n    if( use_ret == -(MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"HMAC_DRBG - Read/write error in file\" );\n    if( use_ret == -(MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"HMAC_DRBG - The entropy source failed\" );\n#endif /* MBEDTLS_HMAC_DRBG_C */\n\n#if defined(MBEDTLS_MD2_C)\n    if( use_ret == -(MBEDTLS_ERR_MD2_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"MD2 - MD2 hardware accelerator failed\" );\n#endif /* MBEDTLS_MD2_C */\n\n#if defined(MBEDTLS_MD4_C)\n    if( use_ret == -(MBEDTLS_ERR_MD4_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"MD4 - MD4 hardware accelerator failed\" );\n#endif /* MBEDTLS_MD4_C */\n\n#if defined(MBEDTLS_MD5_C)\n    if( use_ret == -(MBEDTLS_ERR_MD5_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"MD5 - MD5 hardware accelerator failed\" );\n#endif /* MBEDTLS_MD5_C */\n\n#if defined(MBEDTLS_NET_C)\n    if( use_ret == -(MBEDTLS_ERR_NET_SOCKET_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Failed to open a socket\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_CONNECT_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - The connection to the given server / port failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_BIND_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Binding of the socket failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_LISTEN_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Could not listen on the socket\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_ACCEPT_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Could not accept the incoming connection\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_RECV_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Reading information from the socket failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_SEND_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"NET - Sending information through the socket failed\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_CONN_RESET) )\n        mbedtls_snprintf( buf, buflen, \"NET - Connection was reset by peer\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_UNKNOWN_HOST) )\n        mbedtls_snprintf( buf, buflen, \"NET - Failed to get an IP address for the given hostname\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_BUFFER_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"NET - Buffer is too small to hold the data\" );\n    if( use_ret == -(MBEDTLS_ERR_NET_INVALID_CONTEXT) )\n        mbedtls_snprintf( buf, buflen, \"NET - The context is invalid, eg because it was free()ed\" );\n#endif /* MBEDTLS_NET_C */\n\n#if defined(MBEDTLS_OID_C)\n    if( use_ret == -(MBEDTLS_ERR_OID_NOT_FOUND) )\n        mbedtls_snprintf( buf, buflen, \"OID - OID is not found\" );\n    if( use_ret == -(MBEDTLS_ERR_OID_BUF_TOO_SMALL) )\n        mbedtls_snprintf( buf, buflen, \"OID - output buffer is too small\" );\n#endif /* MBEDTLS_OID_C */\n\n#if defined(MBEDTLS_PADLOCK_C)\n    if( use_ret == -(MBEDTLS_ERR_PADLOCK_DATA_MISALIGNED) )\n        mbedtls_snprintf( buf, buflen, \"PADLOCK - Input data should be aligned\" );\n#endif /* MBEDTLS_PADLOCK_C */\n\n#if defined(MBEDTLS_RIPEMD160_C)\n    if( use_ret == -(MBEDTLS_ERR_RIPEMD160_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"RIPEMD160 - RIPEMD160 hardware accelerator failed\" );\n#endif /* MBEDTLS_RIPEMD160_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    if( use_ret == -(MBEDTLS_ERR_SHA1_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"SHA1 - SHA-1 hardware accelerator failed\" );\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    if( use_ret == -(MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"SHA256 - SHA-256 hardware accelerator failed\" );\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    if( use_ret == -(MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"SHA512 - SHA-512 hardware accelerator failed\" );\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_THREADING_C)\n    if( use_ret == -(MBEDTLS_ERR_THREADING_FEATURE_UNAVAILABLE) )\n        mbedtls_snprintf( buf, buflen, \"THREADING - The selected feature is not available\" );\n    if( use_ret == -(MBEDTLS_ERR_THREADING_BAD_INPUT_DATA) )\n        mbedtls_snprintf( buf, buflen, \"THREADING - Bad input parameters to function\" );\n    if( use_ret == -(MBEDTLS_ERR_THREADING_MUTEX_ERROR) )\n        mbedtls_snprintf( buf, buflen, \"THREADING - Locking / unlocking / free failed with error code\" );\n#endif /* MBEDTLS_THREADING_C */\n\n#if defined(MBEDTLS_XTEA_C)\n    if( use_ret == -(MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH) )\n        mbedtls_snprintf( buf, buflen, \"XTEA - The data input has an invalid length\" );\n    if( use_ret == -(MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED) )\n        mbedtls_snprintf( buf, buflen, \"XTEA - XTEA hardware accelerator failed\" );\n#endif /* MBEDTLS_XTEA_C */\n    // END generated code\n\n    if( strlen( buf ) != 0 )\n        return;\n\n    mbedtls_snprintf( buf, buflen, \"UNKNOWN ERROR CODE (%04X)\", use_ret );\n}\n\n#else /* MBEDTLS_ERROR_C */\n\n#if defined(MBEDTLS_ERROR_STRERROR_DUMMY)\n\n/*\n * Provide an non-function in case MBEDTLS_ERROR_C is not defined\n */\nvoid mbedtls_strerror( int ret, char *buf, size_t buflen )\n{\n    ((void) ret);\n\n    if( buflen > 0 )\n        buf[0] = '\\0';\n}\n\n#endif /* MBEDTLS_ERROR_STRERROR_DUMMY */\n\n#endif /* MBEDTLS_ERROR_C */\n","/*\n *  NIST SP800-38C compliant CCM implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * Definition of CCM:\n * http://csrc.nist.gov/publications/nistpubs/800-38C/SP800-38C_updated-July20_2007.pdf\n * RFC 3610 \"Counter with CBC-MAC (CCM)\"\n *\n * Related:\n * RFC 5116 \"An Interface and Algorithms for Authenticated Encryption\"\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_CCM_C)\n\n#include \"mbedtls/ccm.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */\n\n#if !defined(MBEDTLS_CCM_ALT)\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;\n}\n\n#define CCM_ENCRYPT 0\n#define CCM_DECRYPT 1\n\n/*\n * Initialize context\n */\nvoid mbedtls_ccm_init( mbedtls_ccm_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );\n}\n\nint mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,\n                        mbedtls_cipher_id_t cipher,\n                        const unsigned char *key,\n                        unsigned int keybits )\n{\n    int ret;\n    const mbedtls_cipher_info_t *cipher_info;\n\n    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );\n    if( cipher_info == NULL )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    if( cipher_info->block_size != 16 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    mbedtls_cipher_free( &ctx->cipher_ctx );\n\n    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,\n                               MBEDTLS_ENCRYPT ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    return( 0 );\n}\n\n/*\n * Free context\n */\nvoid mbedtls_ccm_free( mbedtls_ccm_context *ctx )\n{\n    mbedtls_cipher_free( &ctx->cipher_ctx );\n    mbedtls_zeroize( ctx, sizeof( mbedtls_ccm_context ) );\n}\n\n/*\n * Macros for common operations.\n * Results in smaller compiled code than static inline functions.\n */\n\n/*\n * Update the CBC-MAC state in y using a block in b\n * (Always using b as the source helps the compiler optimise a bit better.)\n */\n#define UPDATE_CBC_MAC                                                      \\\n    for( i = 0; i < 16; i++ )                                               \\\n        y[i] ^= b[i];                                                       \\\n                                                                            \\\n    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, y, 16, y, &olen ) ) != 0 ) \\\n        return( ret );\n\n/*\n * Encrypt or decrypt a partial block with CTR\n * Warning: using b for temporary storage! src and dst must not be b!\n * This avoids allocating one more 16 bytes buffer while allowing src == dst.\n */\n#define CTR_CRYPT( dst, src, len  )                                            \\\n    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctr, 16, b, &olen ) ) != 0 )  \\\n        return( ret );                                                         \\\n                                                                               \\\n    for( i = 0; i < len; i++ )                                                 \\\n        dst[i] = src[i] ^ b[i];\n\n/*\n * Authenticated encryption or decryption\n */\nstatic int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,\n                           const unsigned char *iv, size_t iv_len,\n                           const unsigned char *add, size_t add_len,\n                           const unsigned char *input, unsigned char *output,\n                           unsigned char *tag, size_t tag_len )\n{\n    int ret;\n    unsigned char i;\n    unsigned char q;\n    size_t len_left, olen;\n    unsigned char b[16];\n    unsigned char y[16];\n    unsigned char ctr[16];\n    const unsigned char *src;\n    unsigned char *dst;\n\n    /*\n     * Check length requirements: SP800-38C A.1\n     * Additional requirement: a < 2^16 - 2^8 to simplify the code.\n     * 'length' checked later (when writing it to the first block)\n     */\n    if( tag_len < 4 || tag_len > 16 || tag_len % 2 != 0 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    /* Also implies q is within bounds */\n    if( iv_len < 7 || iv_len > 13 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    if( add_len > 0xFF00 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n    q = 16 - 1 - (unsigned char) iv_len;\n\n    /*\n     * First block B_0:\n     * 0        .. 0        flags\n     * 1        .. iv_len   nonce (aka iv)\n     * iv_len+1 .. 15       length\n     *\n     * With flags as (bits):\n     * 7        0\n     * 6        add present?\n     * 5 .. 3   (t - 2) / 2\n     * 2 .. 0   q - 1\n     */\n    b[0] = 0;\n    b[0] |= ( add_len > 0 ) << 6;\n    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;\n    b[0] |= q - 1;\n\n    memcpy( b + 1, iv, iv_len );\n\n    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )\n        b[15-i] = (unsigned char)( len_left & 0xFF );\n\n    if( len_left > 0 )\n        return( MBEDTLS_ERR_CCM_BAD_INPUT );\n\n\n    /* Start CBC-MAC with first block */\n    memset( y, 0, 16 );\n    UPDATE_CBC_MAC;\n\n    /*\n     * If there is additional data, update CBC-MAC with\n     * add_len, add, 0 (padding to a block boundary)\n     */\n    if( add_len > 0 )\n    {\n        size_t use_len;\n        len_left = add_len;\n        src = add;\n\n        memset( b, 0, 16 );\n        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );\n        b[1] = (unsigned char)( ( add_len      ) & 0xFF );\n\n        use_len = len_left < 16 - 2 ? len_left : 16 - 2;\n        memcpy( b + 2, src, use_len );\n        len_left -= use_len;\n        src += use_len;\n\n        UPDATE_CBC_MAC;\n\n        while( len_left > 0 )\n        {\n            use_len = len_left > 16 ? 16 : len_left;\n\n            memset( b, 0, 16 );\n            memcpy( b, src, use_len );\n            UPDATE_CBC_MAC;\n\n            len_left -= use_len;\n            src += use_len;\n        }\n    }\n\n    /*\n     * Prepare counter block for encryption:\n     * 0        .. 0        flags\n     * 1        .. iv_len   nonce (aka iv)\n     * iv_len+1 .. 15       counter (initially 1)\n     *\n     * With flags as (bits):\n     * 7 .. 3   0\n     * 2 .. 0   q - 1\n     */\n    ctr[0] = q - 1;\n    memcpy( ctr + 1, iv, iv_len );\n    memset( ctr + 1 + iv_len, 0, q );\n    ctr[15] = 1;\n\n    /*\n     * Authenticate and {en,de}crypt the message.\n     *\n     * The only difference between encryption and decryption is\n     * the respective order of authentication and {en,de}cryption.\n     */\n    len_left = length;\n    src = input;\n    dst = output;\n\n    while( len_left > 0 )\n    {\n        size_t use_len = len_left > 16 ? 16 : len_left;\n\n        if( mode == CCM_ENCRYPT )\n        {\n            memset( b, 0, 16 );\n            memcpy( b, src, use_len );\n            UPDATE_CBC_MAC;\n        }\n\n        CTR_CRYPT( dst, src, use_len );\n\n        if( mode == CCM_DECRYPT )\n        {\n            memset( b, 0, 16 );\n            memcpy( b, dst, use_len );\n            UPDATE_CBC_MAC;\n        }\n\n        dst += use_len;\n        src += use_len;\n        len_left -= use_len;\n\n        /*\n         * Increment counter.\n         * No need to check for overflow thanks to the length check above.\n         */\n        for( i = 0; i < q; i++ )\n            if( ++ctr[15-i] != 0 )\n                break;\n    }\n\n    /*\n     * Authentication: reset counter and crypt/mask internal tag\n     */\n    for( i = 0; i < q; i++ )\n        ctr[15-i] = 0;\n\n    CTR_CRYPT( y, y, 16 );\n    memcpy( tag, y, tag_len );\n\n    return( 0 );\n}\n\n/*\n * Authenticated encryption\n */\nint mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *add, size_t add_len,\n                         const unsigned char *input, unsigned char *output,\n                         unsigned char *tag, size_t tag_len )\n{\n    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,\n                            add, add_len, input, output, tag, tag_len ) );\n}\n\n/*\n * Authenticated decryption\n */\nint mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,\n                      const unsigned char *iv, size_t iv_len,\n                      const unsigned char *add, size_t add_len,\n                      const unsigned char *input, unsigned char *output,\n                      const unsigned char *tag, size_t tag_len )\n{\n    int ret;\n    unsigned char check_tag[16];\n    unsigned char i;\n    int diff;\n\n    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,\n                                iv, iv_len, add, add_len,\n                                input, output, check_tag, tag_len ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    /* Check tag in \"constant-time\" */\n    for( diff = 0, i = 0; i < tag_len; i++ )\n        diff |= tag[i] ^ check_tag[i];\n\n    if( diff != 0 )\n    {\n        mbedtls_zeroize( output, length );\n        return( MBEDTLS_ERR_CCM_AUTH_FAILED );\n    }\n\n    return( 0 );\n}\n\n#endif /* !MBEDTLS_CCM_ALT */\n\n#if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)\n/*\n * Examples 1 to 3 from SP800-38C Appendix C\n */\n\n#define NB_TESTS 3\n\n/*\n * The data is the same for all tests, only the used length changes\n */\nstatic const unsigned char key[] = {\n    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f\n};\n\nstatic const unsigned char iv[] = {\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b\n};\n\nstatic const unsigned char ad[] = {\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13\n};\n\nstatic const unsigned char msg[] = {\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n};\n\nstatic const size_t iv_len [NB_TESTS] = { 7, 8,  12 };\nstatic const size_t add_len[NB_TESTS] = { 8, 16, 20 };\nstatic const size_t msg_len[NB_TESTS] = { 4, 16, 24 };\nstatic const size_t tag_len[NB_TESTS] = { 4, 6,  8  };\n\nstatic const unsigned char res[NB_TESTS][32] = {\n    {   0x71, 0x62, 0x01, 0x5b, 0x4d, 0xac, 0x25, 0x5d },\n    {   0xd2, 0xa1, 0xf0, 0xe0, 0x51, 0xea, 0x5f, 0x62,\n        0x08, 0x1a, 0x77, 0x92, 0x07, 0x3d, 0x59, 0x3d,\n        0x1f, 0xc6, 0x4f, 0xbf, 0xac, 0xcd },\n    {   0xe3, 0xb2, 0x01, 0xa9, 0xf5, 0xb7, 0x1a, 0x7a,\n        0x9b, 0x1c, 0xea, 0xec, 0xcd, 0x97, 0xe7, 0x0b,\n        0x61, 0x76, 0xaa, 0xd9, 0xa4, 0x42, 0x8a, 0xa5,\n        0x48, 0x43, 0x92, 0xfb, 0xc1, 0xb0, 0x99, 0x51 }\n};\n\nint mbedtls_ccm_self_test( int verbose )\n{\n    mbedtls_ccm_context ctx;\n    unsigned char out[32];\n    size_t i;\n    int ret;\n\n    mbedtls_ccm_init( &ctx );\n\n    if( mbedtls_ccm_setkey( &ctx, MBEDTLS_CIPHER_ID_AES, key, 8 * sizeof key ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"  CCM: setup failed\" );\n\n        return( 1 );\n    }\n\n    for( i = 0; i < NB_TESTS; i++ )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"  CCM-AES #%u: \", (unsigned int) i + 1 );\n\n        ret = mbedtls_ccm_encrypt_and_tag( &ctx, msg_len[i],\n                                   iv, iv_len[i], ad, add_len[i],\n                                   msg, out,\n                                   out + msg_len[i], tag_len[i] );\n\n        if( ret != 0 ||\n            memcmp( out, res[i], msg_len[i] + tag_len[i] ) != 0 )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed\\n\" );\n\n            return( 1 );\n        }\n\n        ret = mbedtls_ccm_auth_decrypt( &ctx, msg_len[i],\n                                iv, iv_len[i], ad, add_len[i],\n                                res[i], out,\n                                res[i] + msg_len[i], tag_len[i] );\n\n        if( ret != 0 ||\n            memcmp( out, msg, msg_len[i] ) != 0 )\n        {\n            if( verbose != 0 )\n                mbedtls_printf( \"failed\\n\" );\n\n            return( 1 );\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    mbedtls_ccm_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( 0 );\n}\n\n#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */\n\n#endif /* MBEDTLS_CCM_C */\n","/**\n * \\file cipher.c\n *\n * \\brief Generic cipher wrapper for mbed TLS\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_CIPHER_C)\n\n#include \"mbedtls/cipher.h\"\n#include \"mbedtls/cipher_internal.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n#if defined(MBEDTLS_GCM_C)\n#include \"mbedtls/gcm.h\"\n#endif\n\n#if defined(MBEDTLS_CCM_C)\n#include \"mbedtls/ccm.h\"\n#endif\n\n#if defined(MBEDTLS_CMAC_C)\n#include \"mbedtls/cmac.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#define mbedtls_calloc calloc\n#define mbedtls_free   free\n#endif\n\n#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#define MBEDTLS_CIPHER_MODE_STREAM\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;\n}\n\nstatic int supported_init = 0;\n\nconst int *mbedtls_cipher_list( void )\n{\n    const mbedtls_cipher_definition_t *def;\n    int *type;\n\n    if( ! supported_init )\n    {\n        def = mbedtls_cipher_definitions;\n        type = mbedtls_cipher_supported;\n\n        while( def->type != 0 )\n            *type++ = (*def++).type;\n\n        *type = 0;\n\n        supported_init = 1;\n    }\n\n    return( mbedtls_cipher_supported );\n}\n\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )\n{\n    const mbedtls_cipher_definition_t *def;\n\n    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )\n        if( def->type == cipher_type )\n            return( def->info );\n\n    return( NULL );\n}\n\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_string( const char *cipher_name )\n{\n    const mbedtls_cipher_definition_t *def;\n\n    if( NULL == cipher_name )\n        return( NULL );\n\n    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )\n        if( !  strcmp( def->info->name, cipher_name ) )\n            return( def->info );\n\n    return( NULL );\n}\n\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,\n                                              int key_bitlen,\n                                              const mbedtls_cipher_mode_t mode )\n{\n    const mbedtls_cipher_definition_t *def;\n\n    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )\n        if( def->info->base->cipher == cipher_id &&\n            def->info->key_bitlen == (unsigned) key_bitlen &&\n            def->info->mode == mode )\n            return( def->info );\n\n    return( NULL );\n}\n\nvoid mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );\n}\n\nvoid mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n#if defined(MBEDTLS_CMAC_C)\n    if( ctx->cmac_ctx )\n    {\n       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );\n       mbedtls_free( ctx->cmac_ctx );\n    }\n#endif\n\n    if( ctx->cipher_ctx )\n        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );\n\n    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );\n}\n\nint mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )\n{\n    if( NULL == cipher_info || NULL == ctx )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );\n\n    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )\n        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );\n\n    ctx->cipher_info = cipher_info;\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\n    /*\n     * Ignore possible errors caused by a cipher mode that doesn't use padding\n     */\n#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)\n    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );\n#else\n    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );\n#endif\n#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */\n\n    return( 0 );\n}\n\nint mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,\n        int key_bitlen, const mbedtls_operation_t operation )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&\n        (int) ctx->cipher_info->key_bitlen != key_bitlen )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    ctx->key_bitlen = key_bitlen;\n    ctx->operation = operation;\n\n    /*\n     * For CFB and CTR mode always use the encryption key schedule\n     */\n    if( MBEDTLS_ENCRYPT == operation ||\n        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||\n        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )\n    {\n        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,\n                ctx->key_bitlen );\n    }\n\n    if( MBEDTLS_DECRYPT == operation )\n        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,\n                ctx->key_bitlen );\n\n    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n}\n\nint mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,\n                   const unsigned char *iv, size_t iv_len )\n{\n    size_t actual_iv_size;\n\n    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    /* avoid buffer overflow in ctx->iv */\n    if( iv_len > MBEDTLS_MAX_IV_LENGTH )\n        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n\n    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )\n        actual_iv_size = iv_len;\n    else\n    {\n        actual_iv_size = ctx->cipher_info->iv_size;\n\n        /* avoid reading past the end of input buffer */\n        if( actual_iv_size > iv_len )\n            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    memcpy( ctx->iv, iv, actual_iv_size );\n    ctx->iv_size = actual_iv_size;\n\n    return( 0 );\n}\n\nint mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    ctx->unprocessed_len = 0;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_GCM_C)\nint mbedtls_cipher_update_ad( mbedtls_cipher_context_t *ctx,\n                      const unsigned char *ad, size_t ad_len )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n    {\n        return mbedtls_gcm_starts( (mbedtls_gcm_context *) ctx->cipher_ctx, ctx->operation,\n                           ctx->iv, ctx->iv_size, ad, ad_len );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_GCM_C */\n\nint mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,\n                   size_t ilen, unsigned char *output, size_t *olen )\n{\n    int ret;\n    size_t block_size = 0;\n\n    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    *olen = 0;\n    block_size = mbedtls_cipher_get_block_size( ctx );\n\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )\n    {\n        if( ilen != block_size )\n            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );\n\n        *olen = ilen;\n\n        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,\n                    ctx->operation, input, output ) ) )\n        {\n            return( ret );\n        }\n\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_GCM_C)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )\n    {\n        *olen = ilen;\n        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,\n                           output );\n    }\n#endif\n\n    if ( 0 == block_size )\n    {\n        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;\n    }\n\n    if( input == output &&\n       ( ctx->unprocessed_len != 0 || ilen % block_size ) )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )\n    {\n        size_t copy_len = 0;\n\n        /*\n         * If there is not enough data for a full block, cache it.\n         */\n        if( ( ctx->operation == MBEDTLS_DECRYPT &&\n                ilen <= block_size - ctx->unprocessed_len ) ||\n             ( ctx->operation == MBEDTLS_ENCRYPT &&\n                ilen < block_size - ctx->unprocessed_len ) )\n        {\n            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,\n                    ilen );\n\n            ctx->unprocessed_len += ilen;\n            return( 0 );\n        }\n\n        /*\n         * Process cached data first\n         */\n        if( 0 != ctx->unprocessed_len )\n        {\n            copy_len = block_size - ctx->unprocessed_len;\n\n            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,\n                    copy_len );\n\n            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,\n                    ctx->operation, block_size, ctx->iv,\n                    ctx->unprocessed_data, output ) ) )\n            {\n                return( ret );\n            }\n\n            *olen += block_size;\n            output += block_size;\n            ctx->unprocessed_len = 0;\n\n            input += copy_len;\n            ilen -= copy_len;\n        }\n\n        /*\n         * Cache final, incomplete block\n         */\n        if( 0 != ilen )\n        {\n            if( 0 == block_size )\n            {\n                return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;\n            }\n\n            copy_len = ilen % block_size;\n            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )\n                copy_len = block_size;\n\n            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),\n                    copy_len );\n\n            ctx->unprocessed_len += copy_len;\n            ilen -= copy_len;\n        }\n\n        /*\n         * Process remaining full blocks\n         */\n        if( ilen )\n        {\n            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,\n                    ctx->operation, ilen, ctx->iv, input, output ) ) )\n            {\n                return( ret );\n            }\n\n            *olen += ilen;\n        }\n\n        return( 0 );\n    }\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_CFB )\n    {\n        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,\n                ctx->operation, ilen, &ctx->unprocessed_len, ctx->iv,\n                input, output ) ) )\n        {\n            return( ret );\n        }\n\n        *olen = ilen;\n\n        return( 0 );\n    }\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_CTR )\n    {\n        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,\n                ilen, &ctx->unprocessed_len, ctx->iv,\n                ctx->unprocessed_data, input, output ) ) )\n        {\n            return( ret );\n        }\n\n        *olen = ilen;\n\n        return( 0 );\n    }\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    if( ctx->cipher_info->mode == MBEDTLS_MODE_STREAM )\n    {\n        if( 0 != ( ret = ctx->cipher_info->base->stream_func( ctx->cipher_ctx,\n                                                    ilen, input, output ) ) )\n        {\n            return( ret );\n        }\n\n        *olen = ilen;\n\n        return( 0 );\n    }\n#endif /* MBEDTLS_CIPHER_MODE_STREAM */\n\n    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\n#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)\n/*\n * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len\n */\nstatic void add_pkcs_padding( unsigned char *output, size_t output_len,\n        size_t data_len )\n{\n    size_t padding_len = output_len - data_len;\n    unsigned char i;\n\n    for( i = 0; i < padding_len; i++ )\n        output[data_len + i] = (unsigned char) padding_len;\n}\n\nstatic int get_pkcs_padding( unsigned char *input, size_t input_len,\n        size_t *data_len )\n{\n    size_t i, pad_idx;\n    unsigned char padding_len, bad = 0;\n\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    padding_len = input[input_len - 1];\n    *data_len = input_len - padding_len;\n\n    /* Avoid logical || since it results in a branch */\n    bad |= padding_len > input_len;\n    bad |= padding_len == 0;\n\n    /* The number of bytes checked must be independent of padding_len,\n     * so pick input_len, which is usually 8 or 16 (one block) */\n    pad_idx = input_len - padding_len;\n    for( i = 0; i < input_len; i++ )\n        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );\n\n    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );\n}\n#endif /* MBEDTLS_CIPHER_PADDING_PKCS7 */\n\n#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)\n/*\n * One and zeros padding: fill with 80 00 ... 00\n */\nstatic void add_one_and_zeros_padding( unsigned char *output,\n                                       size_t output_len, size_t data_len )\n{\n    size_t padding_len = output_len - data_len;\n    unsigned char i = 0;\n\n    output[data_len] = 0x80;\n    for( i = 1; i < padding_len; i++ )\n        output[data_len + i] = 0x00;\n}\n\nstatic int get_one_and_zeros_padding( unsigned char *input, size_t input_len,\n                                      size_t *data_len )\n{\n    size_t i;\n    unsigned char done = 0, prev_done, bad;\n\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    bad = 0x80;\n    *data_len = 0;\n    for( i = input_len; i > 0; i-- )\n    {\n        prev_done = done;\n        done |= ( input[i - 1] != 0 );\n        *data_len |= ( i - 1 ) * ( done != prev_done );\n        bad ^= input[i - 1] * ( done != prev_done );\n    }\n\n    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );\n\n}\n#endif /* MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS */\n\n#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)\n/*\n * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length\n */\nstatic void add_zeros_and_len_padding( unsigned char *output,\n                                       size_t output_len, size_t data_len )\n{\n    size_t padding_len = output_len - data_len;\n    unsigned char i = 0;\n\n    for( i = 1; i < padding_len; i++ )\n        output[data_len + i - 1] = 0x00;\n    output[output_len - 1] = (unsigned char) padding_len;\n}\n\nstatic int get_zeros_and_len_padding( unsigned char *input, size_t input_len,\n                                      size_t *data_len )\n{\n    size_t i, pad_idx;\n    unsigned char padding_len, bad = 0;\n\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    padding_len = input[input_len - 1];\n    *data_len = input_len - padding_len;\n\n    /* Avoid logical || since it results in a branch */\n    bad |= padding_len > input_len;\n    bad |= padding_len == 0;\n\n    /* The number of bytes checked must be independent of padding_len */\n    pad_idx = input_len - padding_len;\n    for( i = 0; i < input_len - 1; i++ )\n        bad |= input[i] * ( i >= pad_idx );\n\n    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );\n}\n#endif /* MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN */\n\n#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)\n/*\n * Zero padding: fill with 00 ... 00\n */\nstatic void add_zeros_padding( unsigned char *output,\n                               size_t output_len, size_t data_len )\n{\n    size_t i;\n\n    for( i = data_len; i < output_len; i++ )\n        output[i] = 0x00;\n}\n\nstatic int get_zeros_padding( unsigned char *input, size_t input_len,\n                              size_t *data_len )\n{\n    size_t i;\n    unsigned char done = 0, prev_done;\n\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    *data_len = 0;\n    for( i = input_len; i > 0; i-- )\n    {\n        prev_done = done;\n        done |= ( input[i-1] != 0 );\n        *data_len |= i * ( done != prev_done );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_PADDING_ZEROS */\n\n/*\n * No padding: don't pad :)\n *\n * There is no add_padding function (check for NULL in mbedtls_cipher_finish)\n * but a trivial get_padding function\n */\nstatic int get_no_padding( unsigned char *input, size_t input_len,\n                              size_t *data_len )\n{\n    if( NULL == input || NULL == data_len )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    *data_len = input_len;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */\n\nint mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,\n                   unsigned char *output, size_t *olen )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    *olen = 0;\n\n    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||\n        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||\n        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||\n        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )\n    {\n        return( 0 );\n    }\n\n    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )\n    {\n        if( ctx->unprocessed_len != 0 )\n            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );\n\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )\n    {\n        int ret = 0;\n\n        if( MBEDTLS_ENCRYPT == ctx->operation )\n        {\n            /* check for 'no padding' mode */\n            if( NULL == ctx->add_padding )\n            {\n                if( 0 != ctx->unprocessed_len )\n                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );\n\n                return( 0 );\n            }\n\n            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),\n                    ctx->unprocessed_len );\n        }\n        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )\n        {\n            /*\n             * For decrypt operations, expect a full block,\n             * or an empty block if no padding\n             */\n            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )\n                return( 0 );\n\n            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );\n        }\n\n        /* cipher block */\n        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,\n                ctx->operation, mbedtls_cipher_get_block_size( ctx ), ctx->iv,\n                ctx->unprocessed_data, output ) ) )\n        {\n            return( ret );\n        }\n\n        /* Set output size for decryption */\n        if( MBEDTLS_DECRYPT == ctx->operation )\n            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),\n                                     olen );\n\n        /* Set output size for encryption */\n        *olen = mbedtls_cipher_get_block_size( ctx );\n        return( 0 );\n    }\n#else\n    ((void) output);\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\nint mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )\n{\n    if( NULL == ctx ||\n        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    switch( mode )\n    {\n#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)\n    case MBEDTLS_PADDING_PKCS7:\n        ctx->add_padding = add_pkcs_padding;\n        ctx->get_padding = get_pkcs_padding;\n        break;\n#endif\n#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)\n    case MBEDTLS_PADDING_ONE_AND_ZEROS:\n        ctx->add_padding = add_one_and_zeros_padding;\n        ctx->get_padding = get_one_and_zeros_padding;\n        break;\n#endif\n#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)\n    case MBEDTLS_PADDING_ZEROS_AND_LEN:\n        ctx->add_padding = add_zeros_and_len_padding;\n        ctx->get_padding = get_zeros_and_len_padding;\n        break;\n#endif\n#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)\n    case MBEDTLS_PADDING_ZEROS:\n        ctx->add_padding = add_zeros_padding;\n        ctx->get_padding = get_zeros_padding;\n        break;\n#endif\n    case MBEDTLS_PADDING_NONE:\n        ctx->add_padding = NULL;\n        ctx->get_padding = get_no_padding;\n        break;\n\n    default:\n        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */\n\n#if defined(MBEDTLS_GCM_C)\nint mbedtls_cipher_write_tag( mbedtls_cipher_context_t *ctx,\n                      unsigned char *tag, size_t tag_len )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info || NULL == tag )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    if( MBEDTLS_ENCRYPT != ctx->operation )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n        return mbedtls_gcm_finish( (mbedtls_gcm_context *) ctx->cipher_ctx, tag, tag_len );\n\n    return( 0 );\n}\n\nint mbedtls_cipher_check_tag( mbedtls_cipher_context_t *ctx,\n                      const unsigned char *tag, size_t tag_len )\n{\n    int ret;\n\n    if( NULL == ctx || NULL == ctx->cipher_info ||\n        MBEDTLS_DECRYPT != ctx->operation )\n    {\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n    }\n\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n    {\n        unsigned char check_tag[16];\n        size_t i;\n        int diff;\n\n        if( tag_len > sizeof( check_tag ) )\n            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n        if( 0 != ( ret = mbedtls_gcm_finish( (mbedtls_gcm_context *) ctx->cipher_ctx,\n                                     check_tag, tag_len ) ) )\n        {\n            return( ret );\n        }\n\n        /* Check the tag in \"constant-time\" */\n        for( diff = 0, i = 0; i < tag_len; i++ )\n            diff |= tag[i] ^ check_tag[i];\n\n        if( diff != 0 )\n            return( MBEDTLS_ERR_CIPHER_AUTH_FAILED );\n\n        return( 0 );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_GCM_C */\n\n/*\n * Packet-oriented wrapper for non-AEAD modes\n */\nint mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,\n                  const unsigned char *iv, size_t iv_len,\n                  const unsigned char *input, size_t ilen,\n                  unsigned char *output, size_t *olen )\n{\n    int ret;\n    size_t finish_olen;\n\n    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )\n        return( ret );\n\n    *olen += finish_olen;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_AEAD)\n/*\n * Packet-oriented encryption for AEAD modes\n */\nint mbedtls_cipher_auth_encrypt( mbedtls_cipher_context_t *ctx,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *ad, size_t ad_len,\n                         const unsigned char *input, size_t ilen,\n                         unsigned char *output, size_t *olen,\n                         unsigned char *tag, size_t tag_len )\n{\n#if defined(MBEDTLS_GCM_C)\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n    {\n        *olen = ilen;\n        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,\n                                   iv, iv_len, ad, ad_len, input, output,\n                                   tag_len, tag ) );\n    }\n#endif /* MBEDTLS_GCM_C */\n#if defined(MBEDTLS_CCM_C)\n    if( MBEDTLS_MODE_CCM == ctx->cipher_info->mode )\n    {\n        *olen = ilen;\n        return( mbedtls_ccm_encrypt_and_tag( ctx->cipher_ctx, ilen,\n                                     iv, iv_len, ad, ad_len, input, output,\n                                     tag, tag_len ) );\n    }\n#endif /* MBEDTLS_CCM_C */\n\n    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n}\n\n/*\n * Packet-oriented decryption for AEAD modes\n */\nint mbedtls_cipher_auth_decrypt( mbedtls_cipher_context_t *ctx,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *ad, size_t ad_len,\n                         const unsigned char *input, size_t ilen,\n                         unsigned char *output, size_t *olen,\n                         const unsigned char *tag, size_t tag_len )\n{\n#if defined(MBEDTLS_GCM_C)\n    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )\n    {\n        int ret;\n\n        *olen = ilen;\n        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,\n                                iv, iv_len, ad, ad_len,\n                                tag, tag_len, input, output );\n\n        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )\n            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;\n\n        return( ret );\n    }\n#endif /* MBEDTLS_GCM_C */\n#if defined(MBEDTLS_CCM_C)\n    if( MBEDTLS_MODE_CCM == ctx->cipher_info->mode )\n    {\n        int ret;\n\n        *olen = ilen;\n        ret = mbedtls_ccm_auth_decrypt( ctx->cipher_ctx, ilen,\n                                iv, iv_len, ad, ad_len,\n                                input, output, tag, tag_len );\n\n        if( ret == MBEDTLS_ERR_CCM_AUTH_FAILED )\n            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;\n\n        return( ret );\n    }\n#endif /* MBEDTLS_CCM_C */\n\n    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );\n}\n#endif /* MBEDTLS_CIPHER_MODE_AEAD */\n\n#endif /* MBEDTLS_CIPHER_C */\n","/**\n * \\file cipher.h\n *\n * \\brief The generic cipher wrapper.\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n */\n/*\n *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of Mbed TLS (https://tls.mbed.org)\n */\n\n#ifndef MBEDTLS_CIPHER_H\n#define MBEDTLS_CIPHER_H\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#include <stddef.h>\n\n#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)\n#define MBEDTLS_CIPHER_MODE_AEAD\n#endif\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#define MBEDTLS_CIPHER_MODE_WITH_PADDING\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n#define MBEDTLS_CIPHER_MODE_STREAM\n#endif\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n#define MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE  -0x6080  /**< The selected feature is not available. */\n#define MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA       -0x6100  /**< Bad input parameters. */\n#define MBEDTLS_ERR_CIPHER_ALLOC_FAILED         -0x6180  /**< Failed to allocate memory. */\n#define MBEDTLS_ERR_CIPHER_INVALID_PADDING      -0x6200  /**< Input data contains invalid padding and is rejected. */\n#define MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED  -0x6280  /**< Decryption of block requires a full block. */\n#define MBEDTLS_ERR_CIPHER_AUTH_FAILED          -0x6300  /**< Authentication failed (for AEAD modes). */\n#define MBEDTLS_ERR_CIPHER_INVALID_CONTEXT      -0x6380  /**< The context is invalid. For example, because it was freed. */\n#define MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED      -0x6400  /**< Cipher hardware accelerator failed. */\n\n#define MBEDTLS_CIPHER_VARIABLE_IV_LEN     0x01    /**< Cipher accepts IVs of variable length. */\n#define MBEDTLS_CIPHER_VARIABLE_KEY_LEN    0x02    /**< Cipher accepts keys of variable length. */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * \\brief     An enumeration of supported ciphers.\n *\n * \\warning   ARC4 and DES are considered weak ciphers and their use\n *            constitutes a security risk. We recommend considering stronger\n *            ciphers instead.\n */\ntypedef enum {\n    MBEDTLS_CIPHER_ID_NONE = 0,\n    MBEDTLS_CIPHER_ID_NULL,\n    MBEDTLS_CIPHER_ID_AES,\n    MBEDTLS_CIPHER_ID_DES,\n    MBEDTLS_CIPHER_ID_3DES,\n    MBEDTLS_CIPHER_ID_CAMELLIA,\n    MBEDTLS_CIPHER_ID_BLOWFISH,\n    MBEDTLS_CIPHER_ID_ARC4,\n} mbedtls_cipher_id_t;\n\n/**\n * \\brief     An enumeration of supported (cipher, mode) pairs.\n *\n * \\warning   ARC4 and DES are considered weak ciphers and their use\n *            constitutes a security risk. We recommend considering stronger\n *            ciphers instead.\n */\ntypedef enum {\n    MBEDTLS_CIPHER_NONE = 0,\n    MBEDTLS_CIPHER_NULL,\n    MBEDTLS_CIPHER_AES_128_ECB,\n    MBEDTLS_CIPHER_AES_192_ECB,\n    MBEDTLS_CIPHER_AES_256_ECB,\n    MBEDTLS_CIPHER_AES_128_CBC,\n    MBEDTLS_CIPHER_AES_192_CBC,\n    MBEDTLS_CIPHER_AES_256_CBC,\n    MBEDTLS_CIPHER_AES_128_CFB128,\n    MBEDTLS_CIPHER_AES_192_CFB128,\n    MBEDTLS_CIPHER_AES_256_CFB128,\n    MBEDTLS_CIPHER_AES_128_CTR,\n    MBEDTLS_CIPHER_AES_192_CTR,\n    MBEDTLS_CIPHER_AES_256_CTR,\n    MBEDTLS_CIPHER_AES_128_GCM,\n    MBEDTLS_CIPHER_AES_192_GCM,\n    MBEDTLS_CIPHER_AES_256_GCM,\n    MBEDTLS_CIPHER_CAMELLIA_128_ECB,\n    MBEDTLS_CIPHER_CAMELLIA_192_ECB,\n    MBEDTLS_CIPHER_CAMELLIA_256_ECB,\n    MBEDTLS_CIPHER_CAMELLIA_128_CBC,\n    MBEDTLS_CIPHER_CAMELLIA_192_CBC,\n    MBEDTLS_CIPHER_CAMELLIA_256_CBC,\n    MBEDTLS_CIPHER_CAMELLIA_128_CFB128,\n    MBEDTLS_CIPHER_CAMELLIA_192_CFB128,\n    MBEDTLS_CIPHER_CAMELLIA_256_CFB128,\n    MBEDTLS_CIPHER_CAMELLIA_128_CTR,\n    MBEDTLS_CIPHER_CAMELLIA_192_CTR,\n    MBEDTLS_CIPHER_CAMELLIA_256_CTR,\n    MBEDTLS_CIPHER_CAMELLIA_128_GCM,\n    MBEDTLS_CIPHER_CAMELLIA_192_GCM,\n    MBEDTLS_CIPHER_CAMELLIA_256_GCM,\n    MBEDTLS_CIPHER_DES_ECB,\n    MBEDTLS_CIPHER_DES_CBC,\n    MBEDTLS_CIPHER_DES_EDE_ECB,\n    MBEDTLS_CIPHER_DES_EDE_CBC,\n    MBEDTLS_CIPHER_DES_EDE3_ECB,\n    MBEDTLS_CIPHER_DES_EDE3_CBC,\n    MBEDTLS_CIPHER_BLOWFISH_ECB,\n    MBEDTLS_CIPHER_BLOWFISH_CBC,\n    MBEDTLS_CIPHER_BLOWFISH_CFB64,\n    MBEDTLS_CIPHER_BLOWFISH_CTR,\n    MBEDTLS_CIPHER_ARC4_128,\n    MBEDTLS_CIPHER_AES_128_CCM,\n    MBEDTLS_CIPHER_AES_192_CCM,\n    MBEDTLS_CIPHER_AES_256_CCM,\n    MBEDTLS_CIPHER_CAMELLIA_128_CCM,\n    MBEDTLS_CIPHER_CAMELLIA_192_CCM,\n    MBEDTLS_CIPHER_CAMELLIA_256_CCM,\n} mbedtls_cipher_type_t;\n\n/** Supported cipher modes. */\ntypedef enum {\n    MBEDTLS_MODE_NONE = 0,\n    MBEDTLS_MODE_ECB,\n    MBEDTLS_MODE_CBC,\n    MBEDTLS_MODE_CFB,\n    MBEDTLS_MODE_OFB, /* Unused! */\n    MBEDTLS_MODE_CTR,\n    MBEDTLS_MODE_GCM,\n    MBEDTLS_MODE_STREAM,\n    MBEDTLS_MODE_CCM,\n} mbedtls_cipher_mode_t;\n\n/** Supported cipher padding types. */\ntypedef enum {\n    MBEDTLS_PADDING_PKCS7 = 0,     /**< PKCS7 padding (default).        */\n    MBEDTLS_PADDING_ONE_AND_ZEROS, /**< ISO/IEC 7816-4 padding.         */\n    MBEDTLS_PADDING_ZEROS_AND_LEN, /**< ANSI X.923 padding.             */\n    MBEDTLS_PADDING_ZEROS,         /**< zero padding (not reversible). */\n    MBEDTLS_PADDING_NONE,          /**< never pad (full blocks only).   */\n} mbedtls_cipher_padding_t;\n\n/** Type of operation. */\ntypedef enum {\n    MBEDTLS_OPERATION_NONE = -1,\n    MBEDTLS_DECRYPT = 0,\n    MBEDTLS_ENCRYPT,\n} mbedtls_operation_t;\n\nenum {\n    /** Undefined key length. */\n    MBEDTLS_KEY_LENGTH_NONE = 0,\n    /** Key length, in bits (including parity), for DES keys. */\n    MBEDTLS_KEY_LENGTH_DES  = 64,\n    /** Key length in bits, including parity, for DES in two-key EDE. */\n    MBEDTLS_KEY_LENGTH_DES_EDE = 128,\n    /** Key length in bits, including parity, for DES in three-key EDE. */\n    MBEDTLS_KEY_LENGTH_DES_EDE3 = 192,\n};\n\n/** Maximum length of any IV, in Bytes. */\n#define MBEDTLS_MAX_IV_LENGTH      16\n/** Maximum block size of any cipher, in Bytes. */\n#define MBEDTLS_MAX_BLOCK_LENGTH   16\n\n/**\n * Base cipher information (opaque struct).\n */\ntypedef struct mbedtls_cipher_base_t mbedtls_cipher_base_t;\n\n/**\n * CMAC context (opaque struct).\n */\ntypedef struct mbedtls_cmac_context_t mbedtls_cmac_context_t;\n\n/**\n * Cipher information. Allows calling cipher functions\n * in a generic way.\n */\ntypedef struct {\n    /** Full cipher identifier. For example,\n     * MBEDTLS_CIPHER_AES_256_CBC.\n     */\n    mbedtls_cipher_type_t type;\n\n    /** The cipher mode. For example, MBEDTLS_MODE_CBC. */\n    mbedtls_cipher_mode_t mode;\n\n    /** The cipher key length, in bits. This is the\n     * default length for variable sized ciphers.\n     * Includes parity bits for ciphers like DES.\n     */\n    unsigned int key_bitlen;\n\n    /** Name of the cipher. */\n    const char * name;\n\n    /** IV or nonce size, in Bytes.\n     * For ciphers that accept variable IV sizes,\n     * this is the recommended size.\n     */\n    unsigned int iv_size;\n\n    /** Flags to set. For example, if the cipher supports variable IV sizes or variable key sizes. */\n    int flags;\n\n    /** The block size, in Bytes. */\n    unsigned int block_size;\n\n    /** Struct for base cipher information and functions. */\n    const mbedtls_cipher_base_t *base;\n\n} mbedtls_cipher_info_t;\n\n/**\n * Generic cipher context.\n */\ntypedef struct {\n    /** Information about the associated cipher. */\n    const mbedtls_cipher_info_t *cipher_info;\n\n    /** Key length to use. */\n    int key_bitlen;\n\n    /** Operation that the key of the context has been\n     * initialized for.\n     */\n    mbedtls_operation_t operation;\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\n    /** Padding functions to use, if relevant for\n     * the specific cipher mode.\n     */\n    void (*add_padding)( unsigned char *output, size_t olen, size_t data_len );\n    int (*get_padding)( unsigned char *input, size_t ilen, size_t *data_len );\n#endif\n\n    /** Buffer for input that has not been processed yet. */\n    unsigned char unprocessed_data[MBEDTLS_MAX_BLOCK_LENGTH];\n\n    /** Number of Bytes that have not been processed yet. */\n    size_t unprocessed_len;\n\n    /** Current IV or NONCE_COUNTER for CTR-mode. */\n    unsigned char iv[MBEDTLS_MAX_IV_LENGTH];\n\n    /** IV size in Bytes, for ciphers with variable-length IVs. */\n    size_t iv_size;\n\n    /** The cipher-specific context. */\n    void *cipher_ctx;\n\n#if defined(MBEDTLS_CMAC_C)\n    /** CMAC-specific context. */\n    mbedtls_cmac_context_t *cmac_ctx;\n#endif\n} mbedtls_cipher_context_t;\n\n/**\n * \\brief This function retrieves the list of ciphers supported by the generic\n * cipher module.\n *\n * \\return      A statically-allocated array of ciphers. The last entry\n *              is zero.\n */\nconst int *mbedtls_cipher_list( void );\n\n/**\n * \\brief               This function retrieves the cipher-information\n *                      structure associated with the given cipher name.\n *\n * \\param cipher_name   Name of the cipher to search for.\n *\n * \\return              The cipher information structure associated with the\n *                      given \\p cipher_name, or NULL if not found.\n */\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_string( const char *cipher_name );\n\n/**\n * \\brief               This function retrieves the cipher-information\n *                      structure associated with the given cipher type.\n *\n * \\param cipher_type   Type of the cipher to search for.\n *\n * \\return              The cipher information structure associated with the\n *                      given \\p cipher_type, or NULL if not found.\n */\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type );\n\n/**\n * \\brief               This function retrieves the cipher-information\n *                      structure associated with the given cipher ID,\n *                      key size and mode.\n *\n * \\param cipher_id     The ID of the cipher to search for. For example,\n *                      #MBEDTLS_CIPHER_ID_AES.\n * \\param key_bitlen    The length of the key in bits.\n * \\param mode          The cipher mode. For example, #MBEDTLS_MODE_CBC.\n *\n * \\return              The cipher information structure associated with the\n *                      given \\p cipher_id, or NULL if not found.\n */\nconst mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,\n                                              int key_bitlen,\n                                              const mbedtls_cipher_mode_t mode );\n\n/**\n * \\brief               This function initializes a \\p cipher_context as NONE.\n */\nvoid mbedtls_cipher_init( mbedtls_cipher_context_t *ctx );\n\n/**\n * \\brief               This function frees and clears the cipher-specific\n *                      context of \\p ctx. Freeing \\p ctx itself remains the\n *                      responsibility of the caller.\n */\nvoid mbedtls_cipher_free( mbedtls_cipher_context_t *ctx );\n\n\n/**\n * \\brief               This function initializes and fills the cipher-context\n *                      structure with the appropriate values. It also clears\n *                      the structure.\n *\n * \\param ctx           The context to initialize. May not be NULL.\n * \\param cipher_info   The cipher to use.\n *\n * \\return              \\c 0 on success,\n *                      #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on parameter failure,\n *                      #MBEDTLS_ERR_CIPHER_ALLOC_FAILED if allocation of the\n *                      cipher-specific context failed.\n *\n * \\internal Currently, the function also clears the structure.\n * In future versions, the caller will be required to call\n * mbedtls_cipher_init() on the structure first.\n */\nint mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info );\n\n/**\n * \\brief        This function returns the block size of the given cipher.\n *\n * \\param ctx    The context of the cipher. Must be initialized.\n *\n * \\return       The size of the blocks of the cipher, or zero if \\p ctx\n *               has not been initialized.\n */\nstatic inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return 0;\n\n    return ctx->cipher_info->block_size;\n}\n\n/**\n * \\brief        This function returns the mode of operation for\n *               the cipher. For example, MBEDTLS_MODE_CBC.\n *\n * \\param ctx    The context of the cipher. Must be initialized.\n *\n * \\return       The mode of operation, or #MBEDTLS_MODE_NONE if\n *               \\p ctx has not been initialized.\n */\nstatic inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return MBEDTLS_MODE_NONE;\n\n    return ctx->cipher_info->mode;\n}\n\n/**\n * \\brief       This function returns the size of the IV or nonce\n *              of the cipher, in Bytes.\n *\n * \\param ctx   The context of the cipher. Must be initialized.\n *\n * \\return      <ul><li>If no IV has been set: the recommended IV size.\n *              0 for ciphers not using IV or nonce.</li>\n *              <li>If IV has already been set: the actual size.</li></ul>\n */\nstatic inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return 0;\n\n    if( ctx->iv_size != 0 )\n        return (int) ctx->iv_size;\n\n    return (int) ctx->cipher_info->iv_size;\n}\n\n/**\n * \\brief               This function returns the type of the given cipher.\n *\n * \\param ctx           The context of the cipher. Must be initialized.\n *\n * \\return              The type of the cipher, or #MBEDTLS_CIPHER_NONE if\n *                      \\p ctx has not been initialized.\n */\nstatic inline mbedtls_cipher_type_t mbedtls_cipher_get_type( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return MBEDTLS_CIPHER_NONE;\n\n    return ctx->cipher_info->type;\n}\n\n/**\n * \\brief               This function returns the name of the given cipher\n *                      as a string.\n *\n * \\param ctx           The context of the cipher. Must be initialized.\n *\n * \\return              The name of the cipher, or NULL if \\p ctx has not\n *                      been not initialized.\n */\nstatic inline const char *mbedtls_cipher_get_name( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return 0;\n\n    return ctx->cipher_info->name;\n}\n\n/**\n * \\brief               This function returns the key length of the cipher.\n *\n * \\param ctx           The context of the cipher. Must be initialized.\n *\n * \\return              The key length of the cipher in bits, or\n *                      #MBEDTLS_KEY_LENGTH_NONE if ctx \\p has not been\n *                      initialized.\n */\nstatic inline int mbedtls_cipher_get_key_bitlen( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return MBEDTLS_KEY_LENGTH_NONE;\n\n    return (int) ctx->cipher_info->key_bitlen;\n}\n\n/**\n * \\brief          This function returns the operation of the given cipher.\n *\n * \\param ctx      The context of the cipher. Must be initialized.\n *\n * \\return         The type of operation: #MBEDTLS_ENCRYPT or\n *                 #MBEDTLS_DECRYPT, or #MBEDTLS_OPERATION_NONE if \\p ctx\n *                 has not been initialized.\n */\nstatic inline mbedtls_operation_t mbedtls_cipher_get_operation( const mbedtls_cipher_context_t *ctx )\n{\n    if( NULL == ctx || NULL == ctx->cipher_info )\n        return MBEDTLS_OPERATION_NONE;\n\n    return ctx->operation;\n}\n\n/**\n * \\brief               This function sets the key to use with the given context.\n *\n * \\param ctx           The generic cipher context. May not be NULL. Must have\n *                      been initialized using mbedtls_cipher_info_from_type()\n *                      or mbedtls_cipher_info_from_string().\n * \\param key           The key to use.\n * \\param key_bitlen    The key length to use, in bits.\n * \\param operation     The operation that the key will be used for:\n *                      #MBEDTLS_ENCRYPT or #MBEDTLS_DECRYPT.\n *\n * \\returns             \\c 0 on success, #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA if\n *                      parameter verification fails, or a cipher-specific\n *                      error code.\n */\nint mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,\n                   int key_bitlen, const mbedtls_operation_t operation );\n\n#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)\n/**\n * \\brief               This function sets the padding mode, for cipher modes\n *                      that use padding.\n *\n *                      The default passing mode is PKCS7 padding.\n *\n * \\param ctx           The generic cipher context.\n * \\param mode          The padding mode.\n *\n * \\returns             \\c 0 on success, #MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE\n *                      if the selected padding mode is not supported, or\n *                      #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA if the cipher mode\n *                      does not support padding.\n */\nint mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode );\n#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */\n\n/**\n * \\brief           This function sets the initialization vector (IV)\n *                  or nonce.\n *\n * \\param ctx       The generic cipher context.\n * \\param iv        The IV to use, or NONCE_COUNTER for CTR-mode ciphers.\n * \\param iv_len    The IV length for ciphers with variable-size IV.\n *                  This parameter is discarded by ciphers with fixed-size IV.\n *\n * \\returns         \\c 0 on success, or #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA\n *\n * \\note            Some ciphers do not use IVs nor nonce. For these\n *                  ciphers, this function has no effect.\n */\nint mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,\n                   const unsigned char *iv, size_t iv_len );\n\n/**\n * \\brief         This function resets the cipher state.\n *\n * \\param ctx     The generic cipher context.\n *\n * \\returns       \\c 0 on success, #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA\n *                if parameter verification fails.\n */\nint mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx );\n\n#if defined(MBEDTLS_GCM_C)\n/**\n * \\brief               This function adds additional data for AEAD ciphers.\n *                      Only supported with GCM. Must be called\n *                      exactly once, after mbedtls_cipher_reset().\n *\n * \\param ctx           The generic cipher context.\n * \\param ad            The additional data to use.\n * \\param ad_len        the Length of \\p ad.\n *\n * \\return              \\c 0 on success, or a specific error code on failure.\n */\nint mbedtls_cipher_update_ad( mbedtls_cipher_context_t *ctx,\n                      const unsigned char *ad, size_t ad_len );\n#endif /* MBEDTLS_GCM_C */\n\n/**\n * \\brief               The generic cipher update function. It encrypts or\n *                      decrypts using the given cipher context. Writes as\n *                      many block-sized blocks of data as possible to output.\n *                      Any data that cannot be written immediately is either\n *                      added to the next block, or flushed when\n *                      mbedtls_cipher_finish() is called.\n *                      Exception: For MBEDTLS_MODE_ECB, expects a single block\n *                      in size. For example, 16 Bytes for AES.\n *\n * \\param ctx           The generic cipher context.\n * \\param input         The buffer holding the input data.\n * \\param ilen          The length of the input data.\n * \\param output        The buffer for the output data. Must be able to hold at\n *                      least \\p ilen + block_size. Must not be the same buffer\n *                      as input.\n * \\param olen          The length of the output data, to be updated with the\n *                      actual number of Bytes written.\n *\n * \\returns             \\c 0 on success, #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA if\n *                      parameter verification fails,\n *                      #MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE on an\n *                      unsupported mode for a cipher, or a cipher-specific\n *                      error code.\n *\n * \\note                If the underlying cipher is GCM, all calls to this\n *                      function, except the last one before\n *                      mbedtls_cipher_finish(). Must have \\p ilen as a\n *                      multiple of the block_size.\n */\nint mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,\n                   size_t ilen, unsigned char *output, size_t *olen );\n\n/**\n * \\brief               The generic cipher finalization function. If data still\n *                      needs to be flushed from an incomplete block, the data\n *                      contained in it is padded to the size of\n *                      the last block, and written to the \\p output buffer.\n *\n * \\param ctx           The generic cipher context.\n * \\param output        The buffer to write data to. Needs block_size available.\n * \\param olen          The length of the data written to the \\p output buffer.\n *\n * \\returns             \\c 0 on success, #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA if\n *                      parameter verification fails,\n *                      #MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED if decryption\n *                      expected a full block but was not provided one,\n *                      #MBEDTLS_ERR_CIPHER_INVALID_PADDING on invalid padding\n *                      while decrypting, or a cipher-specific error code\n *                      on failure for any other reason.\n */\nint mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,\n                   unsigned char *output, size_t *olen );\n\n#if defined(MBEDTLS_GCM_C)\n/**\n * \\brief               This function writes a tag for AEAD ciphers.\n *                      Only supported with GCM.\n *                      Must be called after mbedtls_cipher_finish().\n *\n * \\param ctx           The generic cipher context.\n * \\param tag           The buffer to write the tag to.\n * \\param tag_len       The length of the tag to write.\n *\n * \\return              \\c 0 on success, or a specific error code on failure.\n */\nint mbedtls_cipher_write_tag( mbedtls_cipher_context_t *ctx,\n                      unsigned char *tag, size_t tag_len );\n\n/**\n * \\brief               This function checks the tag for AEAD ciphers.\n *                      Only supported with GCM.\n *                      Must be called after mbedtls_cipher_finish().\n *\n * \\param ctx           The generic cipher context.\n * \\param tag           The buffer holding the tag.\n * \\param tag_len       The length of the tag to check.\n *\n * \\return              \\c 0 on success, or a specific error code on failure.\n */\nint mbedtls_cipher_check_tag( mbedtls_cipher_context_t *ctx,\n                      const unsigned char *tag, size_t tag_len );\n#endif /* MBEDTLS_GCM_C */\n\n/**\n * \\brief               The generic all-in-one encryption/decryption function,\n *                      for all ciphers except AEAD constructs.\n *\n * \\param ctx           The generic cipher context.\n * \\param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.\n * \\param iv_len        The IV length for ciphers with variable-size IV.\n *                      This parameter is discarded by ciphers with fixed-size\n *                      IV.\n * \\param input         The buffer holding the input data.\n * \\param ilen          The length of the input data.\n * \\param output        The buffer for the output data. Must be able to hold at\n *                      least \\p ilen + block_size. Must not be the same buffer\n *                      as input.\n * \\param olen          The length of the output data, to be updated with the\n *                      actual number of Bytes written.\n *\n * \\note                Some ciphers do not use IVs nor nonce. For these\n *                      ciphers, use \\p iv = NULL and \\p iv_len = 0.\n *\n * \\returns             \\c 0 on success, or\n *                      #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA, or\n *                      #MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED if decryption\n *                      expected a full block but was not provided one, or\n *                      #MBEDTLS_ERR_CIPHER_INVALID_PADDING on invalid padding\n *                      while decrypting, or a cipher-specific error code on\n *                      failure for any other reason.\n */\nint mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,\n                  const unsigned char *iv, size_t iv_len,\n                  const unsigned char *input, size_t ilen,\n                  unsigned char *output, size_t *olen );\n\n#if defined(MBEDTLS_CIPHER_MODE_AEAD)\n/**\n * \\brief               The generic autenticated encryption (AEAD) function.\n *\n * \\param ctx           The generic cipher context.\n * \\param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.\n * \\param iv_len        The IV length for ciphers with variable-size IV.\n *                      This parameter is discarded by ciphers with fixed-size IV.\n * \\param ad            The additional data to authenticate.\n * \\param ad_len        The length of \\p ad.\n * \\param input         The buffer holding the input data.\n * \\param ilen          The length of the input data.\n * \\param output        The buffer for the output data.\n *                      Must be able to hold at least \\p ilen.\n * \\param olen          The length of the output data, to be updated with the\n *                      actual number of Bytes written.\n * \\param tag           The buffer for the authentication tag.\n * \\param tag_len       The desired length of the authentication tag.\n *\n * \\returns             \\c 0 on success, or\n *                      #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA, or\n *                      a cipher-specific error code.\n */\nint mbedtls_cipher_auth_encrypt( mbedtls_cipher_context_t *ctx,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *ad, size_t ad_len,\n                         const unsigned char *input, size_t ilen,\n                         unsigned char *output, size_t *olen,\n                         unsigned char *tag, size_t tag_len );\n\n/**\n * \\brief               The generic autenticated decryption (AEAD) function.\n *\n * \\param ctx           The generic cipher context.\n * \\param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.\n * \\param iv_len        The IV length for ciphers with variable-size IV.\n *                      This parameter is discarded by ciphers with fixed-size IV.\n * \\param ad            The additional data to be authenticated.\n * \\param ad_len        The length of \\p ad.\n * \\param input         The buffer holding the input data.\n * \\param ilen          The length of the input data.\n * \\param output        The buffer for the output data.\n *                      Must be able to hold at least \\p ilen.\n * \\param olen          The length of the output data, to be updated with the\n *                      actual number of Bytes written.\n * \\param tag           The buffer holding the authentication tag.\n * \\param tag_len       The length of the authentication tag.\n *\n * \\returns             \\c 0 on success, or\n *                      #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA, or\n *                      #MBEDTLS_ERR_CIPHER_AUTH_FAILED if data is not authentic,\n *                      or a cipher-specific error code on failure for any other reason.\n *\n * \\note                If the data is not authentic, then the output buffer\n *                      is zeroed out to prevent the unauthentic plaintext being\n *                      used, making this interface safer.\n */\nint mbedtls_cipher_auth_decrypt( mbedtls_cipher_context_t *ctx,\n                         const unsigned char *iv, size_t iv_len,\n                         const unsigned char *ad, size_t ad_len,\n                         const unsigned char *input, size_t ilen,\n                         unsigned char *output, size_t *olen,\n                         const unsigned char *tag, size_t tag_len );\n#endif /* MBEDTLS_CIPHER_MODE_AEAD */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* MBEDTLS_CIPHER_H */\n","/**\n * \\file cipher_wrap.c\n *\n * \\brief Generic cipher wrapper for mbed TLS\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_CIPHER_C)\n\n#include \"mbedtls/cipher_internal.h\"\n\n#if defined(MBEDTLS_AES_C)\n#include \"mbedtls/aes.h\"\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n#include \"mbedtls/arc4.h\"\n#endif\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#include \"mbedtls/camellia.h\"\n#endif\n\n#if defined(MBEDTLS_DES_C)\n#include \"mbedtls/des.h\"\n#endif\n\n#if defined(MBEDTLS_BLOWFISH_C)\n#include \"mbedtls/blowfish.h\"\n#endif\n\n#if defined(MBEDTLS_GCM_C)\n#include \"mbedtls/gcm.h\"\n#endif\n\n#if defined(MBEDTLS_CCM_C)\n#include \"mbedtls/ccm.h\"\n#endif\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#include <string.h>\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#if defined(MBEDTLS_GCM_C)\n/* shared by all GCM ciphers */\nstatic void *gcm_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );\n\n    if( ctx != NULL )\n        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void gcm_ctx_free( void *ctx )\n{\n    mbedtls_gcm_free( ctx );\n    mbedtls_free( ctx );\n}\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CCM_C)\n/* shared by all CCM ciphers */\nstatic void *ccm_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );\n\n    if( ctx != NULL )\n        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void ccm_ctx_free( void *ctx )\n{\n    mbedtls_ccm_free( ctx );\n    mbedtls_free( ctx );\n}\n#endif /* MBEDTLS_CCM_C */\n\n#if defined(MBEDTLS_AES_C)\n\nstatic int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,\n        unsigned char *iv, const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,\n                          output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic int aes_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, size_t *iv_off, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aes_crypt_cfb128( (mbedtls_aes_context *) ctx, operation, length, iv_off, iv,\n                             input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic int aes_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,\n        unsigned char *nonce_counter, unsigned char *stream_block,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_aes_crypt_ctr( (mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,\n                          stream_block, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\nstatic int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );\n}\n\nstatic int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );\n}\n\nstatic void * aes_ctx_alloc( void )\n{\n    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );\n\n    if( aes == NULL )\n        return( NULL );\n\n    mbedtls_aes_init( aes );\n\n    return( aes );\n}\n\nstatic void aes_ctx_free( void *ctx )\n{\n    mbedtls_aes_free( (mbedtls_aes_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t aes_info = {\n    MBEDTLS_CIPHER_ID_AES,\n    aes_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    aes_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    aes_crypt_cfb128_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    aes_crypt_ctr_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    aes_setkey_enc_wrap,\n    aes_setkey_dec_wrap,\n    aes_ctx_alloc,\n    aes_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t aes_128_ecb_info = {\n    MBEDTLS_CIPHER_AES_128_ECB,\n    MBEDTLS_MODE_ECB,\n    128,\n    \"AES-128-ECB\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_ecb_info = {\n    MBEDTLS_CIPHER_AES_192_ECB,\n    MBEDTLS_MODE_ECB,\n    192,\n    \"AES-192-ECB\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_ecb_info = {\n    MBEDTLS_CIPHER_AES_256_ECB,\n    MBEDTLS_MODE_ECB,\n    256,\n    \"AES-256-ECB\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t aes_128_cbc_info = {\n    MBEDTLS_CIPHER_AES_128_CBC,\n    MBEDTLS_MODE_CBC,\n    128,\n    \"AES-128-CBC\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_cbc_info = {\n    MBEDTLS_CIPHER_AES_192_CBC,\n    MBEDTLS_MODE_CBC,\n    192,\n    \"AES-192-CBC\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_cbc_info = {\n    MBEDTLS_CIPHER_AES_256_CBC,\n    MBEDTLS_MODE_CBC,\n    256,\n    \"AES-256-CBC\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic const mbedtls_cipher_info_t aes_128_cfb128_info = {\n    MBEDTLS_CIPHER_AES_128_CFB128,\n    MBEDTLS_MODE_CFB,\n    128,\n    \"AES-128-CFB128\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_cfb128_info = {\n    MBEDTLS_CIPHER_AES_192_CFB128,\n    MBEDTLS_MODE_CFB,\n    192,\n    \"AES-192-CFB128\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_cfb128_info = {\n    MBEDTLS_CIPHER_AES_256_CFB128,\n    MBEDTLS_MODE_CFB,\n    256,\n    \"AES-256-CFB128\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic const mbedtls_cipher_info_t aes_128_ctr_info = {\n    MBEDTLS_CIPHER_AES_128_CTR,\n    MBEDTLS_MODE_CTR,\n    128,\n    \"AES-128-CTR\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_ctr_info = {\n    MBEDTLS_CIPHER_AES_192_CTR,\n    MBEDTLS_MODE_CTR,\n    192,\n    \"AES-192-CTR\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_ctr_info = {\n    MBEDTLS_CIPHER_AES_256_CTR,\n    MBEDTLS_MODE_CTR,\n    256,\n    \"AES-256-CTR\",\n    16,\n    0,\n    16,\n    &aes_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#if defined(MBEDTLS_GCM_C)\nstatic int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t gcm_aes_info = {\n    MBEDTLS_CIPHER_ID_AES,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    gcm_aes_setkey_wrap,\n    gcm_aes_setkey_wrap,\n    gcm_ctx_alloc,\n    gcm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t aes_128_gcm_info = {\n    MBEDTLS_CIPHER_AES_128_GCM,\n    MBEDTLS_MODE_GCM,\n    128,\n    \"AES-128-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_gcm_info = {\n    MBEDTLS_CIPHER_AES_192_GCM,\n    MBEDTLS_MODE_GCM,\n    192,\n    \"AES-192-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_gcm_info = {\n    MBEDTLS_CIPHER_AES_256_GCM,\n    MBEDTLS_MODE_GCM,\n    256,\n    \"AES-256-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_aes_info\n};\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CCM_C)\nstatic int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t ccm_aes_info = {\n    MBEDTLS_CIPHER_ID_AES,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    ccm_aes_setkey_wrap,\n    ccm_aes_setkey_wrap,\n    ccm_ctx_alloc,\n    ccm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t aes_128_ccm_info = {\n    MBEDTLS_CIPHER_AES_128_CCM,\n    MBEDTLS_MODE_CCM,\n    128,\n    \"AES-128-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_192_ccm_info = {\n    MBEDTLS_CIPHER_AES_192_CCM,\n    MBEDTLS_MODE_CCM,\n    192,\n    \"AES-192-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aes_info\n};\n\nstatic const mbedtls_cipher_info_t aes_256_ccm_info = {\n    MBEDTLS_CIPHER_AES_256_CCM,\n    MBEDTLS_MODE_CCM,\n    256,\n    \"AES-256-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_aes_info\n};\n#endif /* MBEDTLS_CCM_C */\n\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n\nstatic int camellia_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,\n                               output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int camellia_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,\n                               input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic int camellia_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, size_t *iv_off, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_camellia_crypt_cfb128( (mbedtls_camellia_context *) ctx, operation, length,\n                                  iv_off, iv, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic int camellia_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,\n        unsigned char *nonce_counter, unsigned char *stream_block,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_camellia_crypt_ctr( (mbedtls_camellia_context *) ctx, length, nc_off,\n                               nonce_counter, stream_block, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\nstatic int camellia_setkey_dec_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );\n}\n\nstatic int camellia_setkey_enc_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );\n}\n\nstatic void * camellia_ctx_alloc( void )\n{\n    mbedtls_camellia_context *ctx;\n    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );\n\n    if( ctx == NULL )\n        return( NULL );\n\n    mbedtls_camellia_init( ctx );\n\n    return( ctx );\n}\n\nstatic void camellia_ctx_free( void *ctx )\n{\n    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t camellia_info = {\n    MBEDTLS_CIPHER_ID_CAMELLIA,\n    camellia_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    camellia_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    camellia_crypt_cfb128_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    camellia_crypt_ctr_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    camellia_setkey_enc_wrap,\n    camellia_setkey_dec_wrap,\n    camellia_ctx_alloc,\n    camellia_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t camellia_128_ecb_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_ECB,\n    MBEDTLS_MODE_ECB,\n    128,\n    \"CAMELLIA-128-ECB\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_ecb_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_ECB,\n    MBEDTLS_MODE_ECB,\n    192,\n    \"CAMELLIA-192-ECB\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_ecb_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_ECB,\n    MBEDTLS_MODE_ECB,\n    256,\n    \"CAMELLIA-256-ECB\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t camellia_128_cbc_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_CBC,\n    MBEDTLS_MODE_CBC,\n    128,\n    \"CAMELLIA-128-CBC\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_cbc_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_CBC,\n    MBEDTLS_MODE_CBC,\n    192,\n    \"CAMELLIA-192-CBC\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_cbc_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_CBC,\n    MBEDTLS_MODE_CBC,\n    256,\n    \"CAMELLIA-256-CBC\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic const mbedtls_cipher_info_t camellia_128_cfb128_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_CFB128,\n    MBEDTLS_MODE_CFB,\n    128,\n    \"CAMELLIA-128-CFB128\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_cfb128_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_CFB128,\n    MBEDTLS_MODE_CFB,\n    192,\n    \"CAMELLIA-192-CFB128\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_cfb128_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_CFB128,\n    MBEDTLS_MODE_CFB,\n    256,\n    \"CAMELLIA-256-CFB128\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic const mbedtls_cipher_info_t camellia_128_ctr_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_CTR,\n    MBEDTLS_MODE_CTR,\n    128,\n    \"CAMELLIA-128-CTR\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_ctr_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_CTR,\n    MBEDTLS_MODE_CTR,\n    192,\n    \"CAMELLIA-192-CTR\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_ctr_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_CTR,\n    MBEDTLS_MODE_CTR,\n    256,\n    \"CAMELLIA-256-CTR\",\n    16,\n    0,\n    16,\n    &camellia_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\n#if defined(MBEDTLS_GCM_C)\nstatic int gcm_camellia_setkey_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t gcm_camellia_info = {\n    MBEDTLS_CIPHER_ID_CAMELLIA,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    gcm_camellia_setkey_wrap,\n    gcm_camellia_setkey_wrap,\n    gcm_ctx_alloc,\n    gcm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t camellia_128_gcm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_GCM,\n    MBEDTLS_MODE_GCM,\n    128,\n    \"CAMELLIA-128-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_gcm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_GCM,\n    MBEDTLS_MODE_GCM,\n    192,\n    \"CAMELLIA-192-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_gcm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_GCM,\n    MBEDTLS_MODE_GCM,\n    256,\n    \"CAMELLIA-256-GCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &gcm_camellia_info\n};\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CCM_C)\nstatic int ccm_camellia_setkey_wrap( void *ctx, const unsigned char *key,\n                                     unsigned int key_bitlen )\n{\n    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,\n                     key, key_bitlen );\n}\n\nstatic const mbedtls_cipher_base_t ccm_camellia_info = {\n    MBEDTLS_CIPHER_ID_CAMELLIA,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    ccm_camellia_setkey_wrap,\n    ccm_camellia_setkey_wrap,\n    ccm_ctx_alloc,\n    ccm_ctx_free,\n};\n\nstatic const mbedtls_cipher_info_t camellia_128_ccm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_128_CCM,\n    MBEDTLS_MODE_CCM,\n    128,\n    \"CAMELLIA-128-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_192_ccm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_192_CCM,\n    MBEDTLS_MODE_CCM,\n    192,\n    \"CAMELLIA-192-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_camellia_info\n};\n\nstatic const mbedtls_cipher_info_t camellia_256_ccm_info = {\n    MBEDTLS_CIPHER_CAMELLIA_256_CCM,\n    MBEDTLS_MODE_CCM,\n    256,\n    \"CAMELLIA-256-CCM\",\n    12,\n    MBEDTLS_CIPHER_VARIABLE_IV_LEN,\n    16,\n    &ccm_camellia_info\n};\n#endif /* MBEDTLS_CCM_C */\n\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n\nstatic int des_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    ((void) operation);\n    return mbedtls_des_crypt_ecb( (mbedtls_des_context *) ctx, input, output );\n}\n\nstatic int des3_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    ((void) operation);\n    return mbedtls_des3_crypt_ecb( (mbedtls_des3_context *) ctx, input, output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int des_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,\n        unsigned char *iv, const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_des_crypt_cbc( (mbedtls_des_context *) ctx, operation, length, iv, input,\n                          output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int des3_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,\n        unsigned char *iv, const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_des3_crypt_cbc( (mbedtls_des3_context *) ctx, operation, length, iv, input,\n                           output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\nstatic int des_setkey_dec_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des_setkey_dec( (mbedtls_des_context *) ctx, key );\n}\n\nstatic int des_setkey_enc_wrap( void *ctx, const unsigned char *key,\n                                unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des_setkey_enc( (mbedtls_des_context *) ctx, key );\n}\n\nstatic int des3_set2key_dec_wrap( void *ctx, const unsigned char *key,\n                                  unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des3_set2key_dec( (mbedtls_des3_context *) ctx, key );\n}\n\nstatic int des3_set2key_enc_wrap( void *ctx, const unsigned char *key,\n                                  unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des3_set2key_enc( (mbedtls_des3_context *) ctx, key );\n}\n\nstatic int des3_set3key_dec_wrap( void *ctx, const unsigned char *key,\n                                  unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des3_set3key_dec( (mbedtls_des3_context *) ctx, key );\n}\n\nstatic int des3_set3key_enc_wrap( void *ctx, const unsigned char *key,\n                                  unsigned int key_bitlen )\n{\n    ((void) key_bitlen);\n\n    return mbedtls_des3_set3key_enc( (mbedtls_des3_context *) ctx, key );\n}\n\nstatic void * des_ctx_alloc( void )\n{\n    mbedtls_des_context *des = mbedtls_calloc( 1, sizeof( mbedtls_des_context ) );\n\n    if( des == NULL )\n        return( NULL );\n\n    mbedtls_des_init( des );\n\n    return( des );\n}\n\nstatic void des_ctx_free( void *ctx )\n{\n    mbedtls_des_free( (mbedtls_des_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void * des3_ctx_alloc( void )\n{\n    mbedtls_des3_context *des3;\n    des3 = mbedtls_calloc( 1, sizeof( mbedtls_des3_context ) );\n\n    if( des3 == NULL )\n        return( NULL );\n\n    mbedtls_des3_init( des3 );\n\n    return( des3 );\n}\n\nstatic void des3_ctx_free( void *ctx )\n{\n    mbedtls_des3_free( (mbedtls_des3_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t des_info = {\n    MBEDTLS_CIPHER_ID_DES,\n    des_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    des_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    des_setkey_enc_wrap,\n    des_setkey_dec_wrap,\n    des_ctx_alloc,\n    des_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t des_ecb_info = {\n    MBEDTLS_CIPHER_DES_ECB,\n    MBEDTLS_MODE_ECB,\n    MBEDTLS_KEY_LENGTH_DES,\n    \"DES-ECB\",\n    8,\n    0,\n    8,\n    &des_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t des_cbc_info = {\n    MBEDTLS_CIPHER_DES_CBC,\n    MBEDTLS_MODE_CBC,\n    MBEDTLS_KEY_LENGTH_DES,\n    \"DES-CBC\",\n    8,\n    0,\n    8,\n    &des_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\nstatic const mbedtls_cipher_base_t des_ede_info = {\n    MBEDTLS_CIPHER_ID_DES,\n    des3_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    des3_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    des3_set2key_enc_wrap,\n    des3_set2key_dec_wrap,\n    des3_ctx_alloc,\n    des3_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t des_ede_ecb_info = {\n    MBEDTLS_CIPHER_DES_EDE_ECB,\n    MBEDTLS_MODE_ECB,\n    MBEDTLS_KEY_LENGTH_DES_EDE,\n    \"DES-EDE-ECB\",\n    8,\n    0,\n    8,\n    &des_ede_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t des_ede_cbc_info = {\n    MBEDTLS_CIPHER_DES_EDE_CBC,\n    MBEDTLS_MODE_CBC,\n    MBEDTLS_KEY_LENGTH_DES_EDE,\n    \"DES-EDE-CBC\",\n    8,\n    0,\n    8,\n    &des_ede_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\nstatic const mbedtls_cipher_base_t des_ede3_info = {\n    MBEDTLS_CIPHER_ID_3DES,\n    des3_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    des3_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    des3_set3key_enc_wrap,\n    des3_set3key_dec_wrap,\n    des3_ctx_alloc,\n    des3_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t des_ede3_ecb_info = {\n    MBEDTLS_CIPHER_DES_EDE3_ECB,\n    MBEDTLS_MODE_ECB,\n    MBEDTLS_KEY_LENGTH_DES_EDE3,\n    \"DES-EDE3-ECB\",\n    8,\n    0,\n    8,\n    &des_ede3_info\n};\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t des_ede3_cbc_info = {\n    MBEDTLS_CIPHER_DES_EDE3_CBC,\n    MBEDTLS_MODE_CBC,\n    MBEDTLS_KEY_LENGTH_DES_EDE3,\n    \"DES-EDE3-CBC\",\n    8,\n    0,\n    8,\n    &des_ede3_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_BLOWFISH_C)\n\nstatic int blowfish_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_blowfish_crypt_ecb( (mbedtls_blowfish_context *) ctx, operation, input,\n                               output );\n}\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic int blowfish_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, unsigned char *iv, const unsigned char *input,\n        unsigned char *output )\n{\n    return mbedtls_blowfish_crypt_cbc( (mbedtls_blowfish_context *) ctx, operation, length, iv,\n                               input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic int blowfish_crypt_cfb64_wrap( void *ctx, mbedtls_operation_t operation,\n        size_t length, size_t *iv_off, unsigned char *iv,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_blowfish_crypt_cfb64( (mbedtls_blowfish_context *) ctx, operation, length,\n                                 iv_off, iv, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic int blowfish_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,\n        unsigned char *nonce_counter, unsigned char *stream_block,\n        const unsigned char *input, unsigned char *output )\n{\n    return mbedtls_blowfish_crypt_ctr( (mbedtls_blowfish_context *) ctx, length, nc_off,\n                               nonce_counter, stream_block, input, output );\n}\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n\nstatic int blowfish_setkey_wrap( void *ctx, const unsigned char *key,\n                                 unsigned int key_bitlen )\n{\n    return mbedtls_blowfish_setkey( (mbedtls_blowfish_context *) ctx, key, key_bitlen );\n}\n\nstatic void * blowfish_ctx_alloc( void )\n{\n    mbedtls_blowfish_context *ctx;\n    ctx = mbedtls_calloc( 1, sizeof( mbedtls_blowfish_context ) );\n\n    if( ctx == NULL )\n        return( NULL );\n\n    mbedtls_blowfish_init( ctx );\n\n    return( ctx );\n}\n\nstatic void blowfish_ctx_free( void *ctx )\n{\n    mbedtls_blowfish_free( (mbedtls_blowfish_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t blowfish_info = {\n    MBEDTLS_CIPHER_ID_BLOWFISH,\n    blowfish_crypt_ecb_wrap,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    blowfish_crypt_cbc_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    blowfish_crypt_cfb64_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    blowfish_crypt_ctr_wrap,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    NULL,\n#endif\n    blowfish_setkey_wrap,\n    blowfish_setkey_wrap,\n    blowfish_ctx_alloc,\n    blowfish_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t blowfish_ecb_info = {\n    MBEDTLS_CIPHER_BLOWFISH_ECB,\n    MBEDTLS_MODE_ECB,\n    128,\n    \"BLOWFISH-ECB\",\n    8,\n    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,\n    8,\n    &blowfish_info\n};\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\nstatic const mbedtls_cipher_info_t blowfish_cbc_info = {\n    MBEDTLS_CIPHER_BLOWFISH_CBC,\n    MBEDTLS_MODE_CBC,\n    128,\n    \"BLOWFISH-CBC\",\n    8,\n    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,\n    8,\n    &blowfish_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\nstatic const mbedtls_cipher_info_t blowfish_cfb64_info = {\n    MBEDTLS_CIPHER_BLOWFISH_CFB64,\n    MBEDTLS_MODE_CFB,\n    128,\n    \"BLOWFISH-CFB64\",\n    8,\n    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,\n    8,\n    &blowfish_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CFB */\n\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\nstatic const mbedtls_cipher_info_t blowfish_ctr_info = {\n    MBEDTLS_CIPHER_BLOWFISH_CTR,\n    MBEDTLS_MODE_CTR,\n    128,\n    \"BLOWFISH-CTR\",\n    8,\n    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,\n    8,\n    &blowfish_info\n};\n#endif /* MBEDTLS_CIPHER_MODE_CTR */\n#endif /* MBEDTLS_BLOWFISH_C */\n\n#if defined(MBEDTLS_ARC4_C)\nstatic int arc4_crypt_stream_wrap( void *ctx, size_t length,\n                                   const unsigned char *input,\n                                   unsigned char *output )\n{\n    return( mbedtls_arc4_crypt( (mbedtls_arc4_context *) ctx, length, input, output ) );\n}\n\nstatic int arc4_setkey_wrap( void *ctx, const unsigned char *key,\n                             unsigned int key_bitlen )\n{\n    /* we get key_bitlen in bits, arc4 expects it in bytes */\n    if( key_bitlen % 8 != 0 )\n        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );\n\n    mbedtls_arc4_setup( (mbedtls_arc4_context *) ctx, key, key_bitlen / 8 );\n    return( 0 );\n}\n\nstatic void * arc4_ctx_alloc( void )\n{\n    mbedtls_arc4_context *ctx;\n    ctx = mbedtls_calloc( 1, sizeof( mbedtls_arc4_context ) );\n\n    if( ctx == NULL )\n        return( NULL );\n\n    mbedtls_arc4_init( ctx );\n\n    return( ctx );\n}\n\nstatic void arc4_ctx_free( void *ctx )\n{\n    mbedtls_arc4_free( (mbedtls_arc4_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic const mbedtls_cipher_base_t arc4_base_info = {\n    MBEDTLS_CIPHER_ID_ARC4,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    arc4_crypt_stream_wrap,\n#endif\n    arc4_setkey_wrap,\n    arc4_setkey_wrap,\n    arc4_ctx_alloc,\n    arc4_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t arc4_128_info = {\n    MBEDTLS_CIPHER_ARC4_128,\n    MBEDTLS_MODE_STREAM,\n    128,\n    \"ARC4-128\",\n    0,\n    0,\n    1,\n    &arc4_base_info\n};\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\nstatic int null_crypt_stream( void *ctx, size_t length,\n                              const unsigned char *input,\n                              unsigned char *output )\n{\n    ((void) ctx);\n    memmove( output, input, length );\n    return( 0 );\n}\n\nstatic int null_setkey( void *ctx, const unsigned char *key,\n                        unsigned int key_bitlen )\n{\n    ((void) ctx);\n    ((void) key);\n    ((void) key_bitlen);\n\n    return( 0 );\n}\n\nstatic void * null_ctx_alloc( void )\n{\n    return( (void *) 1 );\n}\n\nstatic void null_ctx_free( void *ctx )\n{\n    ((void) ctx);\n}\n\nstatic const mbedtls_cipher_base_t null_base_info = {\n    MBEDTLS_CIPHER_ID_NULL,\n    NULL,\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    NULL,\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_STREAM)\n    null_crypt_stream,\n#endif\n    null_setkey,\n    null_setkey,\n    null_ctx_alloc,\n    null_ctx_free\n};\n\nstatic const mbedtls_cipher_info_t null_cipher_info = {\n    MBEDTLS_CIPHER_NULL,\n    MBEDTLS_MODE_STREAM,\n    0,\n    \"NULL\",\n    0,\n    0,\n    1,\n    &null_base_info\n};\n#endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */\n\nconst mbedtls_cipher_definition_t mbedtls_cipher_definitions[] =\n{\n#if defined(MBEDTLS_AES_C)\n    { MBEDTLS_CIPHER_AES_128_ECB,          &aes_128_ecb_info },\n    { MBEDTLS_CIPHER_AES_192_ECB,          &aes_192_ecb_info },\n    { MBEDTLS_CIPHER_AES_256_ECB,          &aes_256_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_AES_128_CBC,          &aes_128_cbc_info },\n    { MBEDTLS_CIPHER_AES_192_CBC,          &aes_192_cbc_info },\n    { MBEDTLS_CIPHER_AES_256_CBC,          &aes_256_cbc_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    { MBEDTLS_CIPHER_AES_128_CFB128,       &aes_128_cfb128_info },\n    { MBEDTLS_CIPHER_AES_192_CFB128,       &aes_192_cfb128_info },\n    { MBEDTLS_CIPHER_AES_256_CFB128,       &aes_256_cfb128_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    { MBEDTLS_CIPHER_AES_128_CTR,          &aes_128_ctr_info },\n    { MBEDTLS_CIPHER_AES_192_CTR,          &aes_192_ctr_info },\n    { MBEDTLS_CIPHER_AES_256_CTR,          &aes_256_ctr_info },\n#endif\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_CIPHER_AES_128_GCM,          &aes_128_gcm_info },\n    { MBEDTLS_CIPHER_AES_192_GCM,          &aes_192_gcm_info },\n    { MBEDTLS_CIPHER_AES_256_GCM,          &aes_256_gcm_info },\n#endif\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_CIPHER_AES_128_CCM,          &aes_128_ccm_info },\n    { MBEDTLS_CIPHER_AES_192_CCM,          &aes_192_ccm_info },\n    { MBEDTLS_CIPHER_AES_256_CCM,          &aes_256_ccm_info },\n#endif\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n    { MBEDTLS_CIPHER_ARC4_128,             &arc4_128_info },\n#endif\n\n#if defined(MBEDTLS_BLOWFISH_C)\n    { MBEDTLS_CIPHER_BLOWFISH_ECB,         &blowfish_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_BLOWFISH_CBC,         &blowfish_cbc_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    { MBEDTLS_CIPHER_BLOWFISH_CFB64,       &blowfish_cfb64_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    { MBEDTLS_CIPHER_BLOWFISH_CTR,         &blowfish_ctr_info },\n#endif\n#endif /* MBEDTLS_BLOWFISH_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n    { MBEDTLS_CIPHER_CAMELLIA_128_ECB,     &camellia_128_ecb_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_ECB,     &camellia_192_ecb_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_ECB,     &camellia_256_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_CAMELLIA_128_CBC,     &camellia_128_cbc_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_CBC,     &camellia_192_cbc_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_CBC,     &camellia_256_cbc_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CFB)\n    { MBEDTLS_CIPHER_CAMELLIA_128_CFB128,  &camellia_128_cfb128_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_CFB128,  &camellia_192_cfb128_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_CFB128,  &camellia_256_cfb128_info },\n#endif\n#if defined(MBEDTLS_CIPHER_MODE_CTR)\n    { MBEDTLS_CIPHER_CAMELLIA_128_CTR,     &camellia_128_ctr_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_CTR,     &camellia_192_ctr_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_CTR,     &camellia_256_ctr_info },\n#endif\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_CIPHER_CAMELLIA_128_GCM,     &camellia_128_gcm_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_GCM,     &camellia_192_gcm_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_GCM,     &camellia_256_gcm_info },\n#endif\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_CIPHER_CAMELLIA_128_CCM,     &camellia_128_ccm_info },\n    { MBEDTLS_CIPHER_CAMELLIA_192_CCM,     &camellia_192_ccm_info },\n    { MBEDTLS_CIPHER_CAMELLIA_256_CCM,     &camellia_256_ccm_info },\n#endif\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n    { MBEDTLS_CIPHER_DES_ECB,              &des_ecb_info },\n    { MBEDTLS_CIPHER_DES_EDE_ECB,          &des_ede_ecb_info },\n    { MBEDTLS_CIPHER_DES_EDE3_ECB,         &des_ede3_ecb_info },\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_CIPHER_DES_CBC,              &des_cbc_info },\n    { MBEDTLS_CIPHER_DES_EDE_CBC,          &des_ede_cbc_info },\n    { MBEDTLS_CIPHER_DES_EDE3_CBC,         &des_ede3_cbc_info },\n#endif\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n    { MBEDTLS_CIPHER_NULL,                 &null_cipher_info },\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n\n    { MBEDTLS_CIPHER_NONE, NULL }\n};\n\n#define NUM_CIPHERS sizeof mbedtls_cipher_definitions / sizeof mbedtls_cipher_definitions[0]\nint mbedtls_cipher_supported[NUM_CIPHERS];\n\n#endif /* MBEDTLS_CIPHER_C */\n","/*\n *  CTR_DRBG implementation based on AES-256 (NIST SP 800-90)\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The NIST SP 800-90 DRBGs are described in the following publication.\n *\n *  http://csrc.nist.gov/publications/nistpubs/800-90/SP800-90revised_March2007.pdf\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_CTR_DRBG_C)\n\n#include \"mbedtls/ctr_drbg.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_FS_IO)\n#include <stdio.h>\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n/*\n * CTR_DRBG context initialization\n */\nvoid mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_init( &ctx->mutex );\n#endif\n}\n\n/*\n * Non-public function wrapped by mbedtls_ctr_drbg_seed(). Necessary to allow\n * NIST tests to succeed (which require known length fixed entropy)\n */\nint mbedtls_ctr_drbg_seed_entropy_len(\n                   mbedtls_ctr_drbg_context *ctx,\n                   int (*f_entropy)(void *, unsigned char *, size_t),\n                   void *p_entropy,\n                   const unsigned char *custom,\n                   size_t len,\n                   size_t entropy_len )\n{\n    int ret;\n    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];\n\n    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );\n\n    mbedtls_aes_init( &ctx->aes_ctx );\n\n    ctx->f_entropy = f_entropy;\n    ctx->p_entropy = p_entropy;\n\n    ctx->entropy_len = entropy_len;\n    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;\n\n    /*\n     * Initialize with an empty key\n     */\n    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )\n    {\n        return( ret );\n    }\n    return( 0 );\n}\n\nint mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,\n                   int (*f_entropy)(void *, unsigned char *, size_t),\n                   void *p_entropy,\n                   const unsigned char *custom,\n                   size_t len )\n{\n    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,\n                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );\n}\n\nvoid mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_free( &ctx->mutex );\n#endif\n    mbedtls_aes_free( &ctx->aes_ctx );\n    mbedtls_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );\n}\n\nvoid mbedtls_ctr_drbg_set_prediction_resistance( mbedtls_ctr_drbg_context *ctx, int resistance )\n{\n    ctx->prediction_resistance = resistance;\n}\n\nvoid mbedtls_ctr_drbg_set_entropy_len( mbedtls_ctr_drbg_context *ctx, size_t len )\n{\n    ctx->entropy_len = len;\n}\n\nvoid mbedtls_ctr_drbg_set_reseed_interval( mbedtls_ctr_drbg_context *ctx, int interval )\n{\n    ctx->reseed_interval = interval;\n}\n\nstatic int block_cipher_df( unsigned char *output,\n                            const unsigned char *data, size_t data_len )\n{\n    unsigned char buf[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16];\n    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];\n    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];\n    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];\n    unsigned char *p, *iv;\n    mbedtls_aes_context aes_ctx;\n    int ret = 0;\n\n    int i, j;\n    size_t buf_len, use_len;\n\n    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )\n        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );\n\n    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );\n    mbedtls_aes_init( &aes_ctx );\n\n    /*\n     * Construct IV (16 bytes) and S in buffer\n     * IV = Counter (in 32-bits) padded to 16 with zeroes\n     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||\n     *     data || 0x80\n     *     (Total is padded to a multiple of 16-bytes with zeroes)\n     */\n    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;\n    *p++ = ( data_len >> 24 ) & 0xff;\n    *p++ = ( data_len >> 16 ) & 0xff;\n    *p++ = ( data_len >> 8  ) & 0xff;\n    *p++ = ( data_len       ) & 0xff;\n    p += 3;\n    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;\n    memcpy( p, data, data_len );\n    p[data_len] = 0x80;\n\n    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;\n\n    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )\n        key[i] = i;\n\n    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )\n    {\n        goto exit;\n    }\n\n    /*\n     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data\n     */\n    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )\n    {\n        p = buf;\n        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );\n        use_len = buf_len;\n\n        while( use_len > 0 )\n        {\n            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )\n                chain[i] ^= p[i];\n            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;\n            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?\n                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;\n\n            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )\n            {\n                goto exit;\n            }\n        }\n\n        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );\n\n        /*\n         * Update IV\n         */\n        buf[3]++;\n    }\n\n    /*\n     * Do final encryption with reduced data\n     */\n    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )\n    {\n        goto exit;\n    }\n    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;\n    p = output;\n\n    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )\n    {\n        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )\n        {\n            goto exit;\n        }\n        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );\n        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;\n    }\nexit:\n    mbedtls_aes_free( &aes_ctx );\n    /*\n    * tidy up the stack\n    */\n    mbedtls_zeroize( buf, sizeof( buf ) );\n    mbedtls_zeroize( tmp, sizeof( tmp ) );\n    mbedtls_zeroize( key, sizeof( key ) );\n    mbedtls_zeroize( chain, sizeof( chain ) );\n    if( 0 != ret )\n    {\n        /*\n        * wipe partial seed from memory\n        */\n        mbedtls_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );\n    }\n\n    return( ret );\n}\n\nstatic int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,\n                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )\n{\n    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];\n    unsigned char *p = tmp;\n    int i, j;\n    int ret = 0;\n\n    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );\n\n    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )\n    {\n        /*\n         * Increase counter\n         */\n        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )\n            if( ++ctx->counter[i - 1] != 0 )\n                break;\n\n        /*\n         * Crypt counter block\n         */\n        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )\n        {\n            return( ret );\n        }\n\n        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;\n    }\n\n    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )\n        tmp[i] ^= data[i];\n\n    /*\n     * Update key and counter\n     */\n    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )\n    {\n        return( ret );\n    }\n    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );\n\n    return( 0 );\n}\n\nvoid mbedtls_ctr_drbg_update( mbedtls_ctr_drbg_context *ctx,\n                      const unsigned char *additional, size_t add_len )\n{\n    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];\n\n    if( add_len > 0 )\n    {\n        /* MAX_INPUT would be more logical here, but we have to match\n         * block_cipher_df()'s limits since we can't propagate errors */\n        if( add_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )\n            add_len = MBEDTLS_CTR_DRBG_MAX_SEED_INPUT;\n\n        block_cipher_df( add_input, additional, add_len );\n        ctr_drbg_update_internal( ctx, add_input );\n    }\n}\n\nint mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,\n                     const unsigned char *additional, size_t len )\n{\n    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];\n    size_t seedlen = 0;\n    int ret;\n\n    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||\n        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )\n        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );\n\n    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );\n\n    /*\n     * Gather entropy_len bytes of entropy to seed state\n     */\n    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,\n                             ctx->entropy_len ) )\n    {\n        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );\n    }\n\n    seedlen += ctx->entropy_len;\n\n    /*\n     * Add additional data\n     */\n    if( additional && len )\n    {\n        memcpy( seed + seedlen, additional, len );\n        seedlen += len;\n    }\n\n    /*\n     * Reduce to 384 bits\n     */\n    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    /*\n     * Update state\n     */\n    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )\n    {\n        return( ret );\n    }\n    ctx->reseed_counter = 1;\n\n    return( 0 );\n}\n\nint mbedtls_ctr_drbg_random_with_add( void *p_rng,\n                              unsigned char *output, size_t output_len,\n                              const unsigned char *additional, size_t add_len )\n{\n    int ret = 0;\n    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;\n    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];\n    unsigned char *p = output;\n    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];\n    int i;\n    size_t use_len;\n\n    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )\n        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );\n\n    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )\n        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );\n\n    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );\n\n    if( ctx->reseed_counter > ctx->reseed_interval ||\n        ctx->prediction_resistance )\n    {\n        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )\n        {\n            return( ret );\n        }\n        add_len = 0;\n    }\n\n    if( add_len > 0 )\n    {\n        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )\n        {\n            return( ret );\n        }\n        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )\n        {\n            return( ret );\n        }\n    }\n\n    while( output_len > 0 )\n    {\n        /*\n         * Increase counter\n         */\n        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )\n            if( ++ctx->counter[i - 1] != 0 )\n                break;\n\n        /*\n         * Crypt counter block\n         */\n        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )\n        {\n            return( ret );\n        }\n\n        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :\n                                                       output_len;\n        /*\n         * Copy random block to destination\n         */\n        memcpy( p, tmp, use_len );\n        p += use_len;\n        output_len -= use_len;\n    }\n\n    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    ctx->reseed_counter++;\n\n    return( 0 );\n}\n\nint mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )\n{\n    int ret;\n    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_FS_IO)\nint mbedtls_ctr_drbg_write_seed_file( mbedtls_ctr_drbg_context *ctx, const char *path )\n{\n    int ret = MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR;\n    FILE *f;\n    unsigned char buf[ MBEDTLS_CTR_DRBG_MAX_INPUT ];\n\n    if( ( f = fopen( path, \"wb\" ) ) == NULL )\n        return( MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR );\n\n    if( ( ret = mbedtls_ctr_drbg_random( ctx, buf, MBEDTLS_CTR_DRBG_MAX_INPUT ) ) != 0 )\n        goto exit;\n\n    if( fwrite( buf, 1, MBEDTLS_CTR_DRBG_MAX_INPUT, f ) != MBEDTLS_CTR_DRBG_MAX_INPUT )\n        ret = MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR;\n    else\n        ret = 0;\n\nexit:\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n    fclose( f );\n    return( ret );\n}\n\nint mbedtls_ctr_drbg_update_seed_file( mbedtls_ctr_drbg_context *ctx, const char *path )\n{\n    int ret = 0;\n    FILE *f;\n    size_t n;\n    unsigned char buf[ MBEDTLS_CTR_DRBG_MAX_INPUT ];\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR );\n\n    fseek( f, 0, SEEK_END );\n    n = (size_t) ftell( f );\n    fseek( f, 0, SEEK_SET );\n\n    if( n > MBEDTLS_CTR_DRBG_MAX_INPUT )\n    {\n        fclose( f );\n        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );\n    }\n\n    if( fread( buf, 1, n, f ) != n )\n        ret = MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR;\n    else\n        mbedtls_ctr_drbg_update( ctx, buf, n );\n\n    fclose( f );\n\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_ctr_drbg_write_seed_file( ctx, path ) );\n}\n#endif /* MBEDTLS_FS_IO */\n\n#if defined(MBEDTLS_SELF_TEST)\n\nstatic const unsigned char entropy_source_pr[96] =\n    { 0xc1, 0x80, 0x81, 0xa6, 0x5d, 0x44, 0x02, 0x16,\n      0x19, 0xb3, 0xf1, 0x80, 0xb1, 0xc9, 0x20, 0x02,\n      0x6a, 0x54, 0x6f, 0x0c, 0x70, 0x81, 0x49, 0x8b,\n      0x6e, 0xa6, 0x62, 0x52, 0x6d, 0x51, 0xb1, 0xcb,\n      0x58, 0x3b, 0xfa, 0xd5, 0x37, 0x5f, 0xfb, 0xc9,\n      0xff, 0x46, 0xd2, 0x19, 0xc7, 0x22, 0x3e, 0x95,\n      0x45, 0x9d, 0x82, 0xe1, 0xe7, 0x22, 0x9f, 0x63,\n      0x31, 0x69, 0xd2, 0x6b, 0x57, 0x47, 0x4f, 0xa3,\n      0x37, 0xc9, 0x98, 0x1c, 0x0b, 0xfb, 0x91, 0x31,\n      0x4d, 0x55, 0xb9, 0xe9, 0x1c, 0x5a, 0x5e, 0xe4,\n      0x93, 0x92, 0xcf, 0xc5, 0x23, 0x12, 0xd5, 0x56,\n      0x2c, 0x4a, 0x6e, 0xff, 0xdc, 0x10, 0xd0, 0x68 };\n\nstatic const unsigned char entropy_source_nopr[64] =\n    { 0x5a, 0x19, 0x4d, 0x5e, 0x2b, 0x31, 0x58, 0x14,\n      0x54, 0xde, 0xf6, 0x75, 0xfb, 0x79, 0x58, 0xfe,\n      0xc7, 0xdb, 0x87, 0x3e, 0x56, 0x89, 0xfc, 0x9d,\n      0x03, 0x21, 0x7c, 0x68, 0xd8, 0x03, 0x38, 0x20,\n      0xf9, 0xe6, 0x5e, 0x04, 0xd8, 0x56, 0xf3, 0xa9,\n      0xc4, 0x4a, 0x4c, 0xbd, 0xc1, 0xd0, 0x08, 0x46,\n      0xf5, 0x98, 0x3d, 0x77, 0x1c, 0x1b, 0x13, 0x7e,\n      0x4e, 0x0f, 0x9d, 0x8e, 0xf4, 0x09, 0xf9, 0x2e };\n\nstatic const unsigned char nonce_pers_pr[16] =\n    { 0xd2, 0x54, 0xfc, 0xff, 0x02, 0x1e, 0x69, 0xd2,\n      0x29, 0xc9, 0xcf, 0xad, 0x85, 0xfa, 0x48, 0x6c };\n\nstatic const unsigned char nonce_pers_nopr[16] =\n    { 0x1b, 0x54, 0xb8, 0xff, 0x06, 0x42, 0xbf, 0xf5,\n      0x21, 0xf1, 0x5c, 0x1c, 0x0b, 0x66, 0x5f, 0x3f };\n\nstatic const unsigned char result_pr[16] =\n    { 0x34, 0x01, 0x16, 0x56, 0xb4, 0x29, 0x00, 0x8f,\n      0x35, 0x63, 0xec, 0xb5, 0xf2, 0x59, 0x07, 0x23 };\n\nstatic const unsigned char result_nopr[16] =\n    { 0xa0, 0x54, 0x30, 0x3d, 0x8a, 0x7e, 0xa9, 0x88,\n      0x9d, 0x90, 0x3e, 0x07, 0x7c, 0x6f, 0x21, 0x8f };\n\nstatic size_t test_offset;\nstatic int ctr_drbg_self_test_entropy( void *data, unsigned char *buf,\n                                       size_t len )\n{\n    const unsigned char *p = data;\n    memcpy( buf, p + test_offset, len );\n    test_offset += len;\n    return( 0 );\n}\n\n#define CHK( c )    if( (c) != 0 )                          \\\n                    {                                       \\\n                        if( verbose != 0 )                  \\\n                            mbedtls_printf( \"failed\\n\" );  \\\n                        return( 1 );                        \\\n                    }\n\n/*\n * Checkup routine\n */\nint mbedtls_ctr_drbg_self_test( int verbose )\n{\n    mbedtls_ctr_drbg_context ctx;\n    unsigned char buf[16];\n\n    mbedtls_ctr_drbg_init( &ctx );\n\n    /*\n     * Based on a NIST CTR_DRBG test vector (PR = True)\n     */\n    if( verbose != 0 )\n        mbedtls_printf( \"  CTR_DRBG (PR = TRUE) : \" );\n\n    test_offset = 0;\n    CHK( mbedtls_ctr_drbg_seed_entropy_len( &ctx, ctr_drbg_self_test_entropy,\n                                (void *) entropy_source_pr, nonce_pers_pr, 16, 32 ) );\n    mbedtls_ctr_drbg_set_prediction_resistance( &ctx, MBEDTLS_CTR_DRBG_PR_ON );\n    CHK( mbedtls_ctr_drbg_random( &ctx, buf, MBEDTLS_CTR_DRBG_BLOCKSIZE ) );\n    CHK( mbedtls_ctr_drbg_random( &ctx, buf, MBEDTLS_CTR_DRBG_BLOCKSIZE ) );\n    CHK( memcmp( buf, result_pr, MBEDTLS_CTR_DRBG_BLOCKSIZE ) );\n\n    mbedtls_ctr_drbg_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    /*\n     * Based on a NIST CTR_DRBG test vector (PR = FALSE)\n     */\n    if( verbose != 0 )\n        mbedtls_printf( \"  CTR_DRBG (PR = FALSE): \" );\n\n    mbedtls_ctr_drbg_init( &ctx );\n\n    test_offset = 0;\n    CHK( mbedtls_ctr_drbg_seed_entropy_len( &ctx, ctr_drbg_self_test_entropy,\n                            (void *) entropy_source_nopr, nonce_pers_nopr, 16, 32 ) );\n    CHK( mbedtls_ctr_drbg_random( &ctx, buf, 16 ) );\n    CHK( mbedtls_ctr_drbg_reseed( &ctx, NULL, 0 ) );\n    CHK( mbedtls_ctr_drbg_random( &ctx, buf, 16 ) );\n    CHK( memcmp( buf, result_nopr, 16 ) );\n\n    mbedtls_ctr_drbg_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n            mbedtls_printf( \"\\n\" );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_CTR_DRBG_C */\n","/*\n *  SSLv3/TLSv1 server-side functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SSL_SRV_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free      free\n#endif\n\n#include \"mbedtls/debug.h\"\n#include \"mbedtls/ssl.h\"\n#include \"mbedtls/ssl_internal.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n\n#if defined(MBEDTLS_HAVE_TIME)\n#include \"mbedtls/platform_time.h\"\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)\nint mbedtls_ssl_set_client_transport_id( mbedtls_ssl_context *ssl,\n                                 const unsigned char *info,\n                                 size_t ilen )\n{\n    if( ssl->conf->endpoint != MBEDTLS_SSL_IS_SERVER )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    mbedtls_free( ssl->cli_id );\n\n    if( ( ssl->cli_id = mbedtls_calloc( 1, ilen ) ) == NULL )\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n\n    memcpy( ssl->cli_id, info, ilen );\n    ssl->cli_id_len = ilen;\n\n    return( 0 );\n}\n\nvoid mbedtls_ssl_conf_dtls_cookies( mbedtls_ssl_config *conf,\n                           mbedtls_ssl_cookie_write_t *f_cookie_write,\n                           mbedtls_ssl_cookie_check_t *f_cookie_check,\n                           void *p_cookie )\n{\n    conf->f_cookie_write = f_cookie_write;\n    conf->f_cookie_check = f_cookie_check;\n    conf->p_cookie       = p_cookie;\n}\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\nstatic int ssl_parse_servername_ext( mbedtls_ssl_context *ssl,\n                                     const unsigned char *buf,\n                                     size_t len )\n{\n    int ret;\n    size_t servername_list_size, hostname_len;\n    const unsigned char *p;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"parse ServerName extension\" ) );\n\n    servername_list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );\n    if( servername_list_size + 2 != len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    p = buf + 2;\n    while( servername_list_size > 0 )\n    {\n        hostname_len = ( ( p[1] << 8 ) | p[2] );\n        if( hostname_len + 3 > servername_list_size )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        if( p[0] == MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME )\n        {\n            ret = ssl->conf->f_sni( ssl->conf->p_sni,\n                                    ssl, p + 3, hostname_len );\n            if( ret != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_sni_wrapper\", ret );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                        MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n            return( 0 );\n        }\n\n        servername_list_size -= hostname_len + 3;\n        p += hostname_len + 3;\n    }\n\n    if( servername_list_size != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\nstatic int ssl_parse_renegotiation_info( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        /* Check verify-data in constant-time. The length OTOH is no secret */\n        if( len    != 1 + ssl->verify_data_len ||\n            buf[0] !=     ssl->verify_data_len ||\n            mbedtls_ssl_safer_memcmp( buf + 1, ssl->peer_verify_data,\n                          ssl->verify_data_len ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching renegotiation info\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n    {\n        if( len != 1 || buf[0] != 0x0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-zero length renegotiation info\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;\n    }\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n\n/*\n * Status of the implementation of signature-algorithms extension:\n *\n * Currently, we are only considering the signature-algorithm extension\n * to pick a ciphersuite which allows us to send the ServerKeyExchange\n * message with a signature-hash combination that the user allows.\n *\n * We do *not* check whether all certificates in our certificate\n * chain are signed with an allowed signature-hash pair.\n * This needs to be done at a later stage.\n *\n */\nstatic int ssl_parse_signature_algorithms_ext( mbedtls_ssl_context *ssl,\n                                               const unsigned char *buf,\n                                               size_t len )\n{\n    size_t sig_alg_list_size;\n\n    const unsigned char *p;\n    const unsigned char *end = buf + len;\n\n    mbedtls_md_type_t md_cur;\n    mbedtls_pk_type_t sig_cur;\n\n    sig_alg_list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );\n    if( sig_alg_list_size + 2 != len ||\n        sig_alg_list_size % 2 != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /* Currently we only guarantee signing the ServerKeyExchange message according\n     * to the constraints specified in this extension (see above), so it suffices\n     * to remember only one suitable hash for each possible signature algorithm.\n     *\n     * This will change when we also consider certificate signatures,\n     * in which case we will need to remember the whole signature-hash\n     * pair list from the extension.\n     */\n\n    for( p = buf + 2; p < end; p += 2 )\n    {\n        /* Silently ignore unknown signature or hash algorithms. */\n\n        if( ( sig_cur = mbedtls_ssl_pk_alg_from_sig( p[1] ) ) == MBEDTLS_PK_NONE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext\"\n                                        \" unknown sig alg encoding %d\", p[1] ) );\n            continue;\n        }\n\n        /* Check if we support the hash the user proposes */\n        md_cur = mbedtls_ssl_md_alg_from_hash( p[0] );\n        if( md_cur == MBEDTLS_MD_NONE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext:\"\n                                        \" unknown hash alg encoding %d\", p[0] ) );\n            continue;\n        }\n\n        if( mbedtls_ssl_check_sig_hash( ssl, md_cur ) == 0 )\n        {\n            mbedtls_ssl_sig_hash_set_add( &ssl->handshake->hash_algs, sig_cur, md_cur );\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext:\"\n                                        \" match sig %d and hash %d\",\n                                        sig_cur, md_cur ) );\n        }\n        else\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext: \"\n                                        \"hash alg %d not supported\", md_cur ) );\n        }\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic int ssl_parse_supported_elliptic_curves( mbedtls_ssl_context *ssl,\n                                                const unsigned char *buf,\n                                                size_t len )\n{\n    size_t list_size, our_size;\n    const unsigned char *p;\n    const mbedtls_ecp_curve_info *curve_info, **curves;\n\n    list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );\n    if( list_size + 2 != len ||\n        list_size % 2 != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /* Should never happen unless client duplicates the extension */\n    if( ssl->handshake->curves != NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /* Don't allow our peer to make us allocate too much memory,\n     * and leave room for a final 0 */\n    our_size = list_size / 2 + 1;\n    if( our_size > MBEDTLS_ECP_DP_MAX )\n        our_size = MBEDTLS_ECP_DP_MAX;\n\n    if( ( curves = mbedtls_calloc( our_size, sizeof( *curves ) ) ) == NULL )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    ssl->handshake->curves = curves;\n\n    p = buf + 2;\n    while( list_size > 0 && our_size > 1 )\n    {\n        curve_info = mbedtls_ecp_curve_info_from_tls_id( ( p[0] << 8 ) | p[1] );\n\n        if( curve_info != NULL )\n        {\n            *curves++ = curve_info;\n            our_size--;\n        }\n\n        list_size -= 2;\n        p += 2;\n    }\n\n    return( 0 );\n}\n\nstatic int ssl_parse_supported_point_formats( mbedtls_ssl_context *ssl,\n                                              const unsigned char *buf,\n                                              size_t len )\n{\n    size_t list_size;\n    const unsigned char *p;\n\n    list_size = buf[0];\n    if( list_size + 1 != len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    p = buf + 1;\n    while( list_size > 0 )\n    {\n        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||\n            p[0] == MBEDTLS_ECP_PF_COMPRESSED )\n        {\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)\n            ssl->handshake->ecdh_ctx.point_format = p[0];\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n            ssl->handshake->ecjpake_ctx.point_format = p[0];\n#endif\n            MBEDTLS_SSL_DEBUG_MSG( 4, ( \"point format selected: %d\", p[0] ) );\n            return( 0 );\n        }\n\n        list_size--;\n        p++;\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||\n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic int ssl_parse_ecjpake_kkpp( mbedtls_ssl_context *ssl,\n                                   const unsigned char *buf,\n                                   size_t len )\n{\n    int ret;\n\n    if( mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"skip ecjpake kkpp extension\" ) );\n        return( 0 );\n    }\n\n    if( ( ret = mbedtls_ecjpake_read_round_one( &ssl->handshake->ecjpake_ctx,\n                                                buf, len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_one\", ret );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( ret );\n    }\n\n    /* Only mark the extension as OK when we're sure it is */\n    ssl->handshake->cli_exts |= MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nstatic int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,\n                                              const unsigned char *buf,\n                                              size_t len )\n{\n    if( len != 1 || buf[0] >= MBEDTLS_SSL_MAX_FRAG_LEN_INVALID )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ssl->session_negotiate->mfl_code = buf[0];\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nstatic int ssl_parse_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ((void) buf);\n\n    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )\n        ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nstatic int ssl_parse_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,\n                                      const unsigned char *buf,\n                                      size_t len )\n{\n    if( len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ((void) buf);\n\n    if( ssl->conf->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED &&\n        ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        ssl->session_negotiate->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nstatic int ssl_parse_extended_ms_ext( mbedtls_ssl_context *ssl,\n                                      const unsigned char *buf,\n                                      size_t len )\n{\n    if( len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ((void) buf);\n\n    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED &&\n        ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,\n                                         unsigned char *buf,\n                                         size_t len )\n{\n    int ret;\n    mbedtls_ssl_session session;\n\n    mbedtls_ssl_session_init( &session );\n\n    if( ssl->conf->f_ticket_parse == NULL ||\n        ssl->conf->f_ticket_write == NULL )\n    {\n        return( 0 );\n    }\n\n    /* Remember the client asked us to send a new ticket */\n    ssl->handshake->new_session_ticket = 1;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket length: %d\", len ) );\n\n    if( len == 0 )\n        return( 0 );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket rejected: renegotiating\" ) );\n        return( 0 );\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n    /*\n     * Failures are ok: just ignore the ticket and proceed.\n     */\n    if( ( ret = ssl->conf->f_ticket_parse( ssl->conf->p_ticket, &session,\n                                           buf, len ) ) != 0 )\n    {\n        mbedtls_ssl_session_free( &session );\n\n        if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket is not authentic\" ) );\n        else if( ret == MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED )\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket is expired\" ) );\n        else\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_ticket_parse\", ret );\n\n        return( 0 );\n    }\n\n    /*\n     * Keep the session ID sent by the client, since we MUST send it back to\n     * inform them we're accepting the ticket  (RFC 5077 section 3.4)\n     */\n    session.id_len = ssl->session_negotiate->id_len;\n    memcpy( &session.id, ssl->session_negotiate->id, session.id_len );\n\n    mbedtls_ssl_session_free( ssl->session_negotiate );\n    memcpy( ssl->session_negotiate, &session, sizeof( mbedtls_ssl_session ) );\n\n    /* Zeroize instead of free as we copied the content */\n    mbedtls_zeroize( &session, sizeof( mbedtls_ssl_session ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"session successfully restored from ticket\" ) );\n\n    ssl->handshake->resume = 1;\n\n    /* Don't send a new ticket after all, this one is OK */\n    ssl->handshake->new_session_ticket = 0;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_SSL_ALPN)\nstatic int ssl_parse_alpn_ext( mbedtls_ssl_context *ssl,\n                               const unsigned char *buf, size_t len )\n{\n    size_t list_len, cur_len, ours_len;\n    const unsigned char *theirs, *start, *end;\n    const char **ours;\n\n    /* If ALPN not configured, just ignore the extension */\n    if( ssl->conf->alpn_list == NULL )\n        return( 0 );\n\n    /*\n     * opaque ProtocolName<1..2^8-1>;\n     *\n     * struct {\n     *     ProtocolName protocol_name_list<2..2^16-1>\n     * } ProtocolNameList;\n     */\n\n    /* Min length is 2 (list_len) + 1 (name_len) + 1 (name) */\n    if( len < 4 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    list_len = ( buf[0] << 8 ) | buf[1];\n    if( list_len != len - 2 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /*\n     * Validate peer's list (lengths)\n     */\n    start = buf + 2;\n    end = buf + len;\n    for( theirs = start; theirs != end; theirs += cur_len )\n    {\n        cur_len = *theirs++;\n\n        /* Current identifier must fit in list */\n        if( cur_len > (size_t)( end - theirs ) )\n        {\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        /* Empty strings MUST NOT be included */\n        if( cur_len == 0 )\n        {\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n    }\n\n    /*\n     * Use our order of preference\n     */\n    for( ours = ssl->conf->alpn_list; *ours != NULL; ours++ )\n    {\n        ours_len = strlen( *ours );\n        for( theirs = start; theirs != end; theirs += cur_len )\n        {\n            cur_len = *theirs++;\n\n            if( cur_len == ours_len &&\n                memcmp( theirs, *ours, cur_len ) == 0 )\n            {\n                ssl->alpn_chosen = *ours;\n                return( 0 );\n            }\n        }\n    }\n\n    /* If we get there, no match was found */\n    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                            MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL );\n    return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n}\n#endif /* MBEDTLS_SSL_ALPN */\n\n/*\n * Auxiliary functions for ServerHello parsing and related actions\n */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n/*\n * Return 0 if the given key uses one of the acceptable curves, -1 otherwise\n */\n#if defined(MBEDTLS_ECDSA_C)\nstatic int ssl_check_key_curve( mbedtls_pk_context *pk,\n                                const mbedtls_ecp_curve_info **curves )\n{\n    const mbedtls_ecp_curve_info **crv = curves;\n    mbedtls_ecp_group_id grp_id = mbedtls_pk_ec( *pk )->grp.id;\n\n    while( *crv != NULL )\n    {\n        if( (*crv)->grp_id == grp_id )\n            return( 0 );\n        crv++;\n    }\n\n    return( -1 );\n}\n#endif /* MBEDTLS_ECDSA_C */\n\n/*\n * Try picking a certificate for this ciphersuite,\n * return 0 on success and -1 on failure.\n */\nstatic int ssl_pick_cert( mbedtls_ssl_context *ssl,\n                          const mbedtls_ssl_ciphersuite_t * ciphersuite_info )\n{\n    mbedtls_ssl_key_cert *cur, *list, *fallback = NULL;\n    mbedtls_pk_type_t pk_alg =\n        mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );\n    uint32_t flags;\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    if( ssl->handshake->sni_key_cert != NULL )\n        list = ssl->handshake->sni_key_cert;\n    else\n#endif\n        list = ssl->conf->key_cert;\n\n    if( pk_alg == MBEDTLS_PK_NONE )\n        return( 0 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite requires certificate\" ) );\n\n    if( list == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server has no certificate\" ) );\n        return( -1 );\n    }\n\n    for( cur = list; cur != NULL; cur = cur->next )\n    {\n        MBEDTLS_SSL_DEBUG_CRT( 3, \"candidate certificate chain, certificate\",\n                          cur->cert );\n\n        if( ! mbedtls_pk_can_do( cur->key, pk_alg ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"certificate mismatch: key type\" ) );\n            continue;\n        }\n\n        /*\n         * This avoids sending the client a cert it'll reject based on\n         * keyUsage or other extensions.\n         *\n         * It also allows the user to provision different certificates for\n         * different uses based on keyUsage, eg if they want to avoid signing\n         * and decrypting with the same RSA key.\n         */\n        if( mbedtls_ssl_check_cert_usage( cur->cert, ciphersuite_info,\n                                  MBEDTLS_SSL_IS_SERVER, &flags ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"certificate mismatch: \"\n                                \"(extended) key usage extension\" ) );\n            continue;\n        }\n\n#if defined(MBEDTLS_ECDSA_C)\n        if( pk_alg == MBEDTLS_PK_ECDSA &&\n            ssl_check_key_curve( cur->key, ssl->handshake->curves ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"certificate mismatch: elliptic curve\" ) );\n            continue;\n        }\n#endif\n\n        /*\n         * Try to select a SHA-1 certificate for pre-1.2 clients, but still\n         * present them a SHA-higher cert rather than failing if it's the only\n         * one we got that satisfies the other conditions.\n         */\n        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 &&\n            cur->cert->sig_md != MBEDTLS_MD_SHA1 )\n        {\n            if( fallback == NULL )\n                fallback = cur;\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"certificate not preferred: \"\n                                    \"sha-2 with pre-TLS 1.2 client\" ) );\n            continue;\n            }\n        }\n\n        /* If we get there, we got a winner */\n        break;\n    }\n\n    if( cur == NULL )\n        cur = fallback;\n\n    /* Do not update ssl->handshake->key_cert unless there is a match */\n    if( cur != NULL )\n    {\n        ssl->handshake->key_cert = cur;\n        MBEDTLS_SSL_DEBUG_CRT( 3, \"selected certificate chain, certificate\",\n                          ssl->handshake->key_cert->cert );\n        return( 0 );\n    }\n\n    return( -1 );\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n/*\n * Check if a given ciphersuite is suitable for use with our config/keys/etc\n * Sets ciphersuite_info only if the suite matches.\n */\nstatic int ssl_ciphersuite_match( mbedtls_ssl_context *ssl, int suite_id,\n                                  const mbedtls_ssl_ciphersuite_t **ciphersuite_info )\n{\n    const mbedtls_ssl_ciphersuite_t *suite_info;\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)    \n    mbedtls_pk_type_t sig_type;\n#endif\n\n    suite_info = mbedtls_ssl_ciphersuite_from_id( suite_id );\n    if( suite_info == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"trying ciphersuite: %s\", suite_info->name ) );\n\n    if( suite_info->min_minor_ver > ssl->minor_ver ||\n        suite_info->max_minor_ver < ssl->minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: version\" ) );\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ( suite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS ) )\n        return( 0 );\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n    if( ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&\n            suite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: rc4\" ) );\n        return( 0 );\n    }\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( suite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&\n        ( ssl->handshake->cli_exts & MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK ) == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: ecjpake \"\n                                    \"not configured or ext missing\" ) );\n        return( 0 );\n    }\n#endif\n\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)\n    if( mbedtls_ssl_ciphersuite_uses_ec( suite_info ) &&\n        ( ssl->handshake->curves == NULL ||\n          ssl->handshake->curves[0] == NULL ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: \"\n                            \"no common elliptic curve\" ) );\n        return( 0 );\n    }\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    /* If the ciphersuite requires a pre-shared key and we don't\n     * have one, skip it now rather than failing later */\n    if( mbedtls_ssl_ciphersuite_uses_psk( suite_info ) &&\n        ssl->conf->f_psk == NULL &&\n        ( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL ||\n          ssl->conf->psk_identity_len == 0 || ssl->conf->psk_len == 0 ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: no pre-shared key\" ) );\n        return( 0 );\n    }\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    /* If the ciphersuite requires signing, check whether\n     * a suitable hash algorithm is present. */\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        sig_type = mbedtls_ssl_get_ciphersuite_sig_alg( suite_info );\n        if( sig_type != MBEDTLS_PK_NONE &&\n            mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs, sig_type ) == MBEDTLS_MD_NONE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: no suitable hash algorithm \"\n                                        \"for signature algorithm %d\", sig_type ) );\n            return( 0 );\n        }\n    }\n\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n    /*\n     * Final check: if ciphersuite requires us to have a\n     * certificate/key of a particular type:\n     * - select the appropriate certificate if we have one, or\n     * - try the next ciphersuite if we don't\n     * This must be done last since we modify the key_cert list.\n     */\n    if( ssl_pick_cert( ssl, suite_info ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite mismatch: \"\n                            \"no suitable certificate\" ) );\n        return( 0 );\n    }\n#endif\n\n    *ciphersuite_info = suite_info;\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO)\nstatic int ssl_parse_client_hello_v2( mbedtls_ssl_context *ssl )\n{\n    int ret, got_common_suite;\n    unsigned int i, j;\n    size_t n;\n    unsigned int ciph_len, sess_len, chal_len;\n    unsigned char *buf, *p;\n    const int *ciphersuites;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse client hello v2\" ) );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"client hello v2 illegal for renegotiation\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n    buf = ssl->in_hdr;\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"record header\", buf, 5 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v2, message type: %d\",\n                   buf[2] ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v2, message len.: %d\",\n                   ( ( buf[0] & 0x7F ) << 8 ) | buf[1] ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v2, max. version: [%d:%d]\",\n                   buf[3], buf[4] ) );\n\n    /*\n     * SSLv2 Client Hello\n     *\n     * Record layer:\n     *     0  .   1   message length\n     *\n     * SSL layer:\n     *     2  .   2   message type\n     *     3  .   4   protocol version\n     */\n    if( buf[2] != MBEDTLS_SSL_HS_CLIENT_HELLO ||\n        buf[3] != MBEDTLS_SSL_MAJOR_VERSION_3 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    n = ( ( buf[0] << 8 ) | buf[1] ) & 0x7FFF;\n\n    if( n < 17 || n > 512 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ssl->major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;\n    ssl->minor_ver = ( buf[4] <= ssl->conf->max_minor_ver )\n                     ? buf[4]  : ssl->conf->max_minor_ver;\n\n    if( ssl->minor_ver < ssl->conf->min_minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"client only supports ssl smaller than minimum\"\n                            \" [%d:%d] < [%d:%d]\",\n                            ssl->major_ver, ssl->minor_ver,\n                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver ) );\n\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );\n    }\n\n    ssl->handshake->max_major_ver = buf[3];\n    ssl->handshake->max_minor_ver = buf[4];\n\n    if( ( ret = mbedtls_ssl_fetch_input( ssl, 2 + n ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_fetch_input\", ret );\n        return( ret );\n    }\n\n    ssl->handshake->update_checksum( ssl, buf + 2, n );\n\n    buf = ssl->in_msg;\n    n = ssl->in_left - 5;\n\n    /*\n     *    0  .   1   ciphersuitelist length\n     *    2  .   3   session id length\n     *    4  .   5   challenge length\n     *    6  .  ..   ciphersuitelist\n     *   ..  .  ..   session id\n     *   ..  .  ..   challenge\n     */\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"record contents\", buf, n );\n\n    ciph_len = ( buf[0] << 8 ) | buf[1];\n    sess_len = ( buf[2] << 8 ) | buf[3];\n    chal_len = ( buf[4] << 8 ) | buf[5];\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciph_len: %d, sess_len: %d, chal_len: %d\",\n                   ciph_len, sess_len, chal_len ) );\n\n    /*\n     * Make sure each parameter length is valid\n     */\n    if( ciph_len < 3 || ( ciph_len % 3 ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    if( sess_len > 32 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    if( chal_len < 8 || chal_len > 32 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    if( n != 6 + ciph_len + sess_len + chal_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, ciphersuitelist\",\n                   buf + 6, ciph_len );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, session id\",\n                   buf + 6 + ciph_len, sess_len );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, challenge\",\n                   buf + 6 + ciph_len + sess_len, chal_len );\n\n    p = buf + 6 + ciph_len;\n    ssl->session_negotiate->id_len = sess_len;\n    memset( ssl->session_negotiate->id, 0,\n            sizeof( ssl->session_negotiate->id ) );\n    memcpy( ssl->session_negotiate->id, p, ssl->session_negotiate->id_len );\n\n    p += sess_len;\n    memset( ssl->handshake->randbytes, 0, 64 );\n    memcpy( ssl->handshake->randbytes + 32 - chal_len, p, chal_len );\n\n    /*\n     * Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV\n     */\n    for( i = 0, p = buf + 6; i < ciph_len; i += 3, p += 3 )\n    {\n        if( p[0] == 0 && p[1] == 0 && p[2] == MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"received TLS_EMPTY_RENEGOTIATION_INFO \" ) );\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"received RENEGOTIATION SCSV \"\n                                    \"during renegotiation\" ) );\n\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n            ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;\n            break;\n        }\n    }\n\n#if defined(MBEDTLS_SSL_FALLBACK_SCSV)\n    for( i = 0, p = buf + 6; i < ciph_len; i += 3, p += 3 )\n    {\n        if( p[0] == 0 &&\n            p[1] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE >> 8 ) & 0xff ) &&\n            p[2] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      ) & 0xff ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"received FALLBACK_SCSV\" ) );\n\n            if( ssl->minor_ver < ssl->conf->max_minor_ver )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"inapropriate fallback\" ) );\n\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK );\n\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            break;\n        }\n    }\n#endif /* MBEDTLS_SSL_FALLBACK_SCSV */\n\n    got_common_suite = 0;\n    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];\n    ciphersuite_info = NULL;\n#if defined(MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE)\n    for( j = 0, p = buf + 6; j < ciph_len; j += 3, p += 3 )\n        for( i = 0; ciphersuites[i] != 0; i++ )\n#else\n    for( i = 0; ciphersuites[i] != 0; i++ )\n        for( j = 0, p = buf + 6; j < ciph_len; j += 3, p += 3 )\n#endif\n        {\n            if( p[0] != 0 ||\n                p[1] != ( ( ciphersuites[i] >> 8 ) & 0xFF ) ||\n                p[2] != ( ( ciphersuites[i]      ) & 0xFF ) )\n                continue;\n\n            got_common_suite = 1;\n\n            if( ( ret = ssl_ciphersuite_match( ssl, ciphersuites[i],\n                                               &ciphersuite_info ) ) != 0 )\n                return( ret );\n\n            if( ciphersuite_info != NULL )\n                goto have_ciphersuite_v2;\n        }\n\n    if( got_common_suite )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got ciphersuites in common, \"\n                            \"but none of them usable\" ) );\n        return( MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE );\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no ciphersuites in common\" ) );\n        return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );\n    }\n\nhave_ciphersuite_v2:\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"selected ciphersuite: %s\", ciphersuite_info->name ) );\n\n    ssl->session_negotiate->ciphersuite = ciphersuites[i];\n    ssl->transform_negotiate->ciphersuite_info = ciphersuite_info;\n\n    /*\n     * SSLv2 Client Hello relevant renegotiation security checks\n     */\n    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation, breaking off handshake\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ssl->in_left = 0;\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse client hello v2\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO */\n\n/* This function doesn't alert on errors that happen early during\n   ClientHello parsing because they might indicate that the client is\n   not talking SSL/TLS at all and would not understand our alert. */\nstatic int ssl_parse_client_hello( mbedtls_ssl_context *ssl )\n{\n    int ret, got_common_suite;\n    size_t i, j;\n    size_t ciph_offset, comp_offset, ext_offset;\n    size_t msg_len, ciph_len, sess_len, comp_len, ext_len;\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    size_t cookie_offset, cookie_len;\n#endif\n    unsigned char *buf, *p, *ext;\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    int renegotiation_info_seen = 0;\n#endif\n    int handshake_failure = 0;\n    const int *ciphersuites;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n    int major, minor;\n\n    /* If there is no signature-algorithm extension present,\n     * we need to fall back to the default values for allowed\n     * signature-hash pairs. */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    int sig_hash_alg_ext_present = 0;\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse client hello\" ) );\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\nread_record_header:\n#endif\n    /*\n     * If renegotiating, then the input was read with mbedtls_ssl_read_record(),\n     * otherwise read it ourselves manually in order to support SSLv2\n     * ClientHello, which doesn't use the same record layer format.\n     */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )\n#endif\n    {\n        if( ( ret = mbedtls_ssl_fetch_input( ssl, 5 ) ) != 0 )\n        {\n            /* No alert on a read error. */\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_fetch_input\", ret );\n            return( ret );\n        }\n    }\n\n    buf = ssl->in_hdr;\n\n#if defined(MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO)\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_STREAM )\n#endif\n        if( ( buf[0] & 0x80 ) != 0 )\n            return( ssl_parse_client_hello_v2( ssl ) );\n#endif\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"record header\", buf, mbedtls_ssl_hdr_len( ssl ) );\n\n    /*\n     * SSLv3/TLS Client Hello\n     *\n     * Record layer:\n     *     0  .   0   message type\n     *     1  .   2   protocol version\n     *     3  .   11  DTLS: epoch + record sequence number\n     *     3  .   4   message length\n     */\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, message type: %d\",\n                   buf[0] ) );\n\n    if( buf[0] != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, message len.: %d\",\n                   ( ssl->in_len[0] << 8 ) | ssl->in_len[1] ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, protocol version: [%d:%d]\",\n                   buf[1], buf[2] ) );\n\n    mbedtls_ssl_read_version( &major, &minor, ssl->conf->transport, buf + 1 );\n\n    /* According to RFC 5246 Appendix E.1, the version here is typically\n     * \"{03,00}, the lowest version number supported by the client, [or] the\n     * value of ClientHello.client_version\", so the only meaningful check here\n     * is the major version shouldn't be less than 3 */\n    if( major < MBEDTLS_SSL_MAJOR_VERSION_3 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /* For DTLS if this is the initial handshake, remember the client sequence\n     * number to use it in our next message (RFC 6347 4.2.1) */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        && ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE\n#endif\n        )\n    {\n        /* Epoch should be 0 for initial handshakes */\n        if( ssl->in_ctr[0] != 0 || ssl->in_ctr[1] != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        memcpy( ssl->out_ctr + 2, ssl->in_ctr + 2, 6 );\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\n        if( mbedtls_ssl_dtls_replay_check( ssl ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"replayed record, discarding\" ) );\n            ssl->next_record_offset = 0;\n            ssl->in_left = 0;\n            goto read_record_header;\n        }\n\n        /* No MAC to check yet, so we can update right now */\n        mbedtls_ssl_dtls_replay_update( ssl );\n#endif\n    }\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    msg_len = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        /* Set by mbedtls_ssl_read_record() */\n        msg_len = ssl->in_hslen;\n    }\n    else\n#endif\n    {\n        if( msg_len > MBEDTLS_SSL_MAX_CONTENT_LEN )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        if( ( ret = mbedtls_ssl_fetch_input( ssl,\n                       mbedtls_ssl_hdr_len( ssl ) + msg_len ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_fetch_input\", ret );\n            return( ret );\n        }\n\n    /* Done reading this record, get ready for the next one */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n            ssl->next_record_offset = msg_len + mbedtls_ssl_hdr_len( ssl );\n        else\n#endif\n            ssl->in_left = 0;\n    }\n\n    buf = ssl->in_msg;\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"record contents\", buf, msg_len );\n\n    ssl->handshake->update_checksum( ssl, buf, msg_len );\n\n    /*\n     * Handshake layer:\n     *     0  .   0   handshake type\n     *     1  .   3   handshake length\n     *     4  .   5   DTLS only: message seqence number\n     *     6  .   8   DTLS only: fragment offset\n     *     9  .  11   DTLS only: fragment length\n     */\n    if( msg_len < mbedtls_ssl_hs_hdr_len( ssl ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, handshake type: %d\", buf[0] ) );\n\n    if( buf[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, handshake len.: %d\",\n                   ( buf[1] << 16 ) | ( buf[2] << 8 ) | buf[3] ) );\n\n    /* We don't support fragmentation of ClientHello (yet?) */\n    if( buf[1] != 0 ||\n        msg_len != mbedtls_ssl_hs_hdr_len( ssl ) + ( ( buf[2] << 8 ) | buf[3] ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        /*\n         * Copy the client's handshake message_seq on initial handshakes,\n         * check sequence number on renego.\n         */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n        {\n            /* This couldn't be done in ssl_prepare_handshake_record() */\n            unsigned int cli_msg_seq = ( ssl->in_msg[4] << 8 ) |\n                                         ssl->in_msg[5];\n\n            if( cli_msg_seq != ssl->handshake->in_msg_seq )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message_seq: \"\n                                    \"%d (expected %d)\", cli_msg_seq,\n                                    ssl->handshake->in_msg_seq ) );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            ssl->handshake->in_msg_seq++;\n        }\n        else\n#endif\n        {\n            unsigned int cli_msg_seq = ( ssl->in_msg[4] << 8 ) |\n                                         ssl->in_msg[5];\n            ssl->handshake->out_msg_seq = cli_msg_seq;\n            ssl->handshake->in_msg_seq  = cli_msg_seq + 1;\n        }\n\n        /*\n         * For now we don't support fragmentation, so make sure\n         * fragment_offset == 0 and fragment_length == length\n         */\n        if( ssl->in_msg[6] != 0 || ssl->in_msg[7] != 0 || ssl->in_msg[8] != 0 ||\n            memcmp( ssl->in_msg + 1, ssl->in_msg + 9, 3 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"ClientHello fragmentation not supported\" ) );\n            return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n        }\n    }\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    buf += mbedtls_ssl_hs_hdr_len( ssl );\n    msg_len -= mbedtls_ssl_hs_hdr_len( ssl );\n\n    /*\n     * ClientHello layer:\n     *     0  .   1   protocol version\n     *     2  .  33   random bytes (starting with 4 bytes of Unix time)\n     *    34  .  35   session id length (1 byte)\n     *    35  . 34+x  session id\n     *   35+x . 35+x  DTLS only: cookie length (1 byte)\n     *   36+x .  ..   DTLS only: cookie\n     *    ..  .  ..   ciphersuite list length (2 bytes)\n     *    ..  .  ..   ciphersuite list\n     *    ..  .  ..   compression alg. list length (1 byte)\n     *    ..  .  ..   compression alg. list\n     *    ..  .  ..   extensions length (2 bytes, optional)\n     *    ..  .  ..   extensions (optional)\n     */\n\n    /*\n     * Minimal length (with everything empty and extensions ommitted) is\n     * 2 + 32 + 1 + 2 + 1 = 38 bytes. Check that first, so that we can\n     * read at least up to session id length without worrying.\n     */\n    if( msg_len < 38 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /*\n     * Check and save the protocol version\n     */\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, version\", buf, 2 );\n\n    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,\n                      ssl->conf->transport, buf );\n\n    ssl->handshake->max_major_ver = ssl->major_ver;\n    ssl->handshake->max_minor_ver = ssl->minor_ver;\n\n    if( ssl->major_ver < ssl->conf->min_major_ver ||\n        ssl->minor_ver < ssl->conf->min_minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"client only supports ssl smaller than minimum\"\n                            \" [%d:%d] < [%d:%d]\",\n                            ssl->major_ver, ssl->minor_ver,\n                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );\n    }\n\n    if( ssl->major_ver > ssl->conf->max_major_ver )\n    {\n        ssl->major_ver = ssl->conf->max_major_ver;\n        ssl->minor_ver = ssl->conf->max_minor_ver;\n    }\n    else if( ssl->minor_ver > ssl->conf->max_minor_ver )\n        ssl->minor_ver = ssl->conf->max_minor_ver;\n\n    /*\n     * Save client random (inc. Unix time)\n     */\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, random bytes\", buf + 2, 32 );\n\n    memcpy( ssl->handshake->randbytes, buf + 2, 32 );\n\n    /*\n     * Check the session ID length and save session ID\n     */\n    sess_len = buf[34];\n\n    if( sess_len > sizeof( ssl->session_negotiate->id ) ||\n        sess_len + 34 + 2 > msg_len ) /* 2 for cipherlist length field */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, session id\", buf + 35, sess_len );\n\n    ssl->session_negotiate->id_len = sess_len;\n    memset( ssl->session_negotiate->id, 0,\n            sizeof( ssl->session_negotiate->id ) );\n    memcpy( ssl->session_negotiate->id, buf + 35,\n            ssl->session_negotiate->id_len );\n\n    /*\n     * Check the cookie length and content\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        cookie_offset = 35 + sess_len;\n        cookie_len = buf[cookie_offset];\n\n        if( cookie_offset + 1 + cookie_len + 2 > msg_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, cookie\",\n                       buf + cookie_offset + 1, cookie_len );\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)\n        if( ssl->conf->f_cookie_check != NULL\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            && ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE\n#endif\n            )\n        {\n            if( ssl->conf->f_cookie_check( ssl->conf->p_cookie,\n                                     buf + cookie_offset + 1, cookie_len,\n                                     ssl->cli_id, ssl->cli_id_len ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 2, ( \"cookie verification failed\" ) );\n                ssl->handshake->verify_cookie_len = 1;\n            }\n            else\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 2, ( \"cookie verification passed\" ) );\n                ssl->handshake->verify_cookie_len = 0;\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */\n        {\n            /* We know we didn't send a cookie, so it should be empty */\n            if( cookie_len != 0 )\n            {\n                /* This may be an attacker's probe, so don't send an alert */\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"cookie verification skipped\" ) );\n        }\n\n    /*\n     * Check the ciphersuitelist length (will be parsed later)\n     */\n        ciph_offset = cookie_offset + 1 + cookie_len;\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n        ciph_offset = 35 + sess_len;\n\n    ciph_len = ( buf[ciph_offset + 0] << 8 )\n             | ( buf[ciph_offset + 1]      );\n\n    if( ciph_len < 2 ||\n        ciph_len + 2 + ciph_offset + 1 > msg_len || /* 1 for comp. alg. len */\n        ( ciph_len % 2 ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, ciphersuitelist\",\n                   buf + ciph_offset + 2,  ciph_len );\n\n    /*\n     * Check the compression algorithms length and pick one\n     */\n    comp_offset = ciph_offset + 2 + ciph_len;\n\n    comp_len = buf[comp_offset];\n\n    if( comp_len < 1 ||\n        comp_len > 16 ||\n        comp_len + comp_offset + 1 > msg_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, compression\",\n                      buf + comp_offset + 1, comp_len );\n\n    ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_NULL;\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    for( i = 0; i < comp_len; ++i )\n    {\n        if( buf[comp_offset + 1 + i] == MBEDTLS_SSL_COMPRESS_DEFLATE )\n        {\n            ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_DEFLATE;\n            break;\n        }\n    }\n#endif\n\n    /* See comments in ssl_write_client_hello() */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_NULL;\n#endif\n\n    /* Do not parse the extensions if the protocol is SSLv3 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    if( ( ssl->major_ver != 3 ) || ( ssl->minor_ver != 0 ) )\n    {\n#endif\n        /*\n         * Check the extension length\n         */\n        ext_offset = comp_offset + 1 + comp_len;\n        if( msg_len > ext_offset )\n        {\n            if( msg_len < ext_offset + 2 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            ext_len = ( buf[ext_offset + 0] << 8 )\n                    | ( buf[ext_offset + 1]      );\n\n            if( ( ext_len > 0 && ext_len < 4 ) ||\n                msg_len != ext_offset + 2 + ext_len )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n        }\n        else\n            ext_len = 0;\n\n        ext = buf + ext_offset + 2;\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello extensions\", ext, ext_len );\n\n        while( ext_len != 0 )\n        {\n            unsigned int ext_id   = ( ( ext[0] <<  8 )\n                                    | ( ext[1]       ) );\n            unsigned int ext_size = ( ( ext[2] <<  8 )\n                                    | ( ext[3]       ) );\n\n            if( ext_size + 4 > ext_len )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n            switch( ext_id )\n            {\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n            case MBEDTLS_TLS_EXT_SERVERNAME:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found ServerName extension\" ) );\n                if( ssl->conf->f_sni == NULL )\n                    break;\n\n                ret = ssl_parse_servername_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\n            case MBEDTLS_TLS_EXT_RENEGOTIATION_INFO:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found renegotiation extension\" ) );\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n                renegotiation_info_seen = 1;\n#endif\n\n                ret = ssl_parse_renegotiation_info( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n            case MBEDTLS_TLS_EXT_SIG_ALG:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found signature_algorithms extension\" ) );\n\n                ret = ssl_parse_signature_algorithms_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n\n                sig_hash_alg_ext_present = 1;\n                break;\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n            case MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found supported elliptic curves extension\" ) );\n\n                ret = ssl_parse_supported_elliptic_curves( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n\n            case MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found supported point formats extension\" ) );\n                ssl->handshake->cli_exts |= MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT;\n\n                ret = ssl_parse_supported_point_formats( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||\n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n            case MBEDTLS_TLS_EXT_ECJPAKE_KKPP:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found ecjpake kkpp extension\" ) );\n\n                ret = ssl_parse_ecjpake_kkpp( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n            case MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found max fragment length extension\" ) );\n\n                ret = ssl_parse_max_fragment_length_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n            case MBEDTLS_TLS_EXT_TRUNCATED_HMAC:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found truncated hmac extension\" ) );\n\n                ret = ssl_parse_truncated_hmac_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n            case MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found encrypt then mac extension\" ) );\n\n                ret = ssl_parse_encrypt_then_mac_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n            case MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found extended master secret extension\" ) );\n\n                ret = ssl_parse_extended_ms_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n            case MBEDTLS_TLS_EXT_SESSION_TICKET:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found session ticket extension\" ) );\n\n                ret = ssl_parse_session_ticket_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_SSL_ALPN)\n            case MBEDTLS_TLS_EXT_ALPN:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found alpn extension\" ) );\n\n                ret = ssl_parse_alpn_ext( ssl, ext + 4, ext_size );\n                if( ret != 0 )\n                    return( ret );\n                break;\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n            default:\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"unknown extension found: %d (ignoring)\",\n                               ext_id ) );\n            }\n\n            ext_len -= 4 + ext_size;\n            ext += 4 + ext_size;\n\n            if( ext_len > 0 && ext_len < 4 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n        }\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    }\n#endif\n\n#if defined(MBEDTLS_SSL_FALLBACK_SCSV)\n    for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )\n    {\n        if( p[0] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE >> 8 ) & 0xff ) &&\n            p[1] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      ) & 0xff ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"received FALLBACK_SCSV\" ) );\n\n            if( ssl->minor_ver < ssl->conf->max_minor_ver )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"inapropriate fallback\" ) );\n\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK );\n\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n\n            break;\n        }\n    }\n#endif /* MBEDTLS_SSL_FALLBACK_SCSV */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n\n    /*\n     * Try to fall back to default hash SHA1 if the client\n     * hasn't provided any preferred signature-hash combinations.\n     */\n    if( sig_hash_alg_ext_present == 0 )\n    {\n        mbedtls_md_type_t md_default = MBEDTLS_MD_SHA1;\n\n        if( mbedtls_ssl_check_sig_hash( ssl, md_default ) != 0 )\n            md_default = MBEDTLS_MD_NONE;\n\n        mbedtls_ssl_sig_hash_set_const_hash( &ssl->handshake->hash_algs, md_default );\n    }\n\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n    /*\n     * Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV\n     */\n    for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )\n    {\n        if( p[0] == 0 && p[1] == MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"received TLS_EMPTY_RENEGOTIATION_INFO \" ) );\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"received RENEGOTIATION SCSV \"\n                                            \"during renegotiation\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n            }\n#endif\n            ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;\n            break;\n        }\n    }\n\n    /*\n     * Renegotiation security checks\n     */\n    if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION &&\n        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation, breaking off handshake\" ) );\n        handshake_failure = 1;\n    }\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&\n             renegotiation_info_seen == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension missing (secure)\" ) );\n        handshake_failure = 1;\n    }\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n             ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation not allowed\" ) );\n        handshake_failure = 1;\n    }\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n             renegotiation_info_seen == 1 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension present (legacy)\" ) );\n        handshake_failure = 1;\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n    if( handshake_failure == 1 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    /*\n     * Search for a matching ciphersuite\n     * (At the end because we need information from the EC-based extensions\n     * and certificate from the SNI callback triggered by the SNI extension.)\n     */\n    got_common_suite = 0;\n    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];\n    ciphersuite_info = NULL;\n#if defined(MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE)\n    for( j = 0, p = buf + ciph_offset + 2; j < ciph_len; j += 2, p += 2 )\n        for( i = 0; ciphersuites[i] != 0; i++ )\n#else\n    for( i = 0; ciphersuites[i] != 0; i++ )\n        for( j = 0, p = buf + ciph_offset + 2; j < ciph_len; j += 2, p += 2 )\n#endif\n        {\n            if( p[0] != ( ( ciphersuites[i] >> 8 ) & 0xFF ) ||\n                p[1] != ( ( ciphersuites[i]      ) & 0xFF ) )\n                continue;\n\n            got_common_suite = 1;\n\n            if( ( ret = ssl_ciphersuite_match( ssl, ciphersuites[i],\n                                               &ciphersuite_info ) ) != 0 )\n                return( ret );\n\n            if( ciphersuite_info != NULL )\n                goto have_ciphersuite;\n        }\n\n    if( got_common_suite )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got ciphersuites in common, \"\n                            \"but none of them usable\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE );\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no ciphersuites in common\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );\n    }\n\nhave_ciphersuite:\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"selected ciphersuite: %s\", ciphersuite_info->name ) );\n\n    ssl->session_negotiate->ciphersuite = ciphersuites[i];\n    ssl->transform_negotiate->ciphersuite_info = ciphersuite_info;\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_recv_flight_completed( ssl );\n#endif\n\n    /* Debugging-only output for testsuite */\n#if defined(MBEDTLS_DEBUG_C)                         && \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)                && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        mbedtls_pk_type_t sig_alg = mbedtls_ssl_get_ciphersuite_sig_alg( ciphersuite_info );\n        if( sig_alg != MBEDTLS_PK_NONE )\n        {\n            mbedtls_md_type_t md_alg = mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs,\n                                                                  sig_alg );\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello v3, signature_algorithm ext: %d\",\n                                        mbedtls_ssl_hash_from_md_alg( md_alg ) ) );\n        }\n        else\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"no hash algorithm for signature algorithm \"\n                                        \"%d - should not happen\", sig_alg ) );\n        }\n    }\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse client hello\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nstatic void ssl_write_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                          unsigned char *buf,\n                                          size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->session_negotiate->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding truncated hmac extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nstatic void ssl_write_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,\n                                            unsigned char *buf,\n                                            size_t *olen )\n{\n    unsigned char *p = buf;\n    const mbedtls_ssl_ciphersuite_t *suite = NULL;\n    const mbedtls_cipher_info_t *cipher = NULL;\n\n    if( ssl->session_negotiate->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED ||\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        *olen = 0;\n        return;\n    }\n\n    /*\n     * RFC 7366: \"If a server receives an encrypt-then-MAC request extension\n     * from a client and then selects a stream or Authenticated Encryption\n     * with Associated Data (AEAD) ciphersuite, it MUST NOT send an\n     * encrypt-then-MAC response extension back to the client.\"\n     */\n    if( ( suite = mbedtls_ssl_ciphersuite_from_id(\n                    ssl->session_negotiate->ciphersuite ) ) == NULL ||\n        ( cipher = mbedtls_cipher_info_from_type( suite->cipher ) ) == NULL ||\n        cipher->mode != MBEDTLS_MODE_CBC )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding encrypt then mac extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nstatic void ssl_write_extended_ms_ext( mbedtls_ssl_context *ssl,\n                                       unsigned char *buf,\n                                       size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding extended master secret \"\n                        \"extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,\n                                          unsigned char *buf,\n                                          size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->handshake->new_session_ticket == 0 )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding session ticket extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\nstatic void ssl_write_renegotiation_ext( mbedtls_ssl_context *ssl,\n                                         unsigned char *buf,\n                                         size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, secure renegotiation extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        *p++ = 0x00;\n        *p++ = ( ssl->verify_data_len * 2 + 1 ) & 0xFF;\n        *p++ = ssl->verify_data_len * 2 & 0xFF;\n\n        memcpy( p, ssl->peer_verify_data, ssl->verify_data_len );\n        p += ssl->verify_data_len;\n        memcpy( p, ssl->own_verify_data, ssl->verify_data_len );\n        p += ssl->verify_data_len;\n    }\n    else\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n    {\n        *p++ = 0x00;\n        *p++ = 0x01;\n        *p++ = 0x00;\n    }\n\n    *olen = p - buf;\n}\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nstatic void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,\n                                               unsigned char *buf,\n                                               size_t *olen )\n{\n    unsigned char *p = buf;\n\n    if( ssl->session_negotiate->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, max_fragment_length extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 1;\n\n    *p++ = ssl->session_negotiate->mfl_code;\n\n    *olen = 5;\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,\n                                                   unsigned char *buf,\n                                                   size_t *olen )\n{\n    unsigned char *p = buf;\n    ((void) ssl);\n\n    if( ( ssl->handshake->cli_exts &\n          MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT ) == 0 )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, supported_point_formats extension\" ) );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 2;\n\n    *p++ = 1;\n    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;\n\n    *olen = 6;\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic void ssl_write_ecjpake_kkpp_ext( mbedtls_ssl_context *ssl,\n                                        unsigned char *buf,\n                                        size_t *olen )\n{\n    int ret;\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t kkpp_len;\n\n    *olen = 0;\n\n    /* Skip costly computation if not needed */\n    if( ssl->transform_negotiate->ciphersuite_info->key_exchange !=\n        MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, ecjpake kkpp extension\" ) );\n\n    if( end - p < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP      ) & 0xFF );\n\n    ret = mbedtls_ecjpake_write_round_one( &ssl->handshake->ecjpake_ctx,\n                                        p + 2, end - p - 2, &kkpp_len,\n                                        ssl->conf->f_rng, ssl->conf->p_rng );\n    if( ret != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1 , \"mbedtls_ecjpake_write_round_one\", ret );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( kkpp_len >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( kkpp_len      ) & 0xFF );\n\n    *olen = kkpp_len + 4;\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_ALPN )\nstatic void ssl_write_alpn_ext( mbedtls_ssl_context *ssl,\n                                unsigned char *buf, size_t *olen )\n{\n    if( ssl->alpn_chosen == NULL )\n    {\n        *olen = 0;\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, adding alpn extension\" ) );\n\n    /*\n     * 0 . 1    ext identifier\n     * 2 . 3    ext length\n     * 4 . 5    protocol list length\n     * 6 . 6    protocol name length\n     * 7 . 7+n  protocol name\n     */\n    buf[0] = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );\n    buf[1] = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );\n\n    *olen = 7 + strlen( ssl->alpn_chosen );\n\n    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );\n    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );\n\n    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );\n    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );\n\n    buf[6] = (unsigned char)( ( ( *olen - 7 )      ) & 0xFF );\n\n    memcpy( buf + 7, ssl->alpn_chosen, *olen - 7 );\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C */\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)\nstatic int ssl_write_hello_verify_request( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *p = ssl->out_msg + 4;\n    unsigned char *cookie_len_byte;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write hello verify request\" ) );\n\n    /*\n     * struct {\n     *   ProtocolVersion server_version;\n     *   opaque cookie<0..2^8-1>;\n     * } HelloVerifyRequest;\n     */\n\n    /* The RFC is not clear on this point, but sending the actual negotiated\n     * version looks like the most interoperable thing to do. */\n    mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,\n                       ssl->conf->transport, p );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"server version\", p, 2 );\n    p += 2;\n\n    /* If we get here, f_cookie_check is not null */\n    if( ssl->conf->f_cookie_write == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"inconsistent cookie callbacks\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    /* Skip length byte until we know the length */\n    cookie_len_byte = p++;\n\n    if( ( ret = ssl->conf->f_cookie_write( ssl->conf->p_cookie,\n                                     &p, ssl->out_buf + MBEDTLS_SSL_BUFFER_LEN,\n                                     ssl->cli_id, ssl->cli_id_len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"f_cookie_write\", ret );\n        return( ret );\n    }\n\n    *cookie_len_byte = (unsigned char)( p - ( cookie_len_byte + 1 ) );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"cookie sent\", cookie_len_byte + 1, *cookie_len_byte );\n\n    ssl->out_msglen  = p - ssl->out_msg;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST;\n\n    ssl->state = MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write hello verify request\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */\n\nstatic int ssl_write_server_hello( mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_HAVE_TIME)\n    mbedtls_time_t t;\n#endif\n    int ret;\n    size_t olen, ext_len = 0, n;\n    unsigned char *buf, *p;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write server hello\" ) );\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->verify_cookie_len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"client hello was not authenticated\" ) );\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write server hello\" ) );\n\n        return( ssl_write_hello_verify_request( ssl ) );\n    }\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */\n\n    if( ssl->conf->f_rng == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no RNG provided\") );\n        return( MBEDTLS_ERR_SSL_NO_RNG );\n    }\n\n    /*\n     *     0  .   0   handshake type\n     *     1  .   3   handshake length\n     *     4  .   5   protocol version\n     *     6  .   9   UNIX time()\n     *    10  .  37   random bytes\n     */\n    buf = ssl->out_msg;\n    p = buf + 4;\n\n    mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,\n                       ssl->conf->transport, p );\n    p += 2;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, chosen version: [%d:%d]\",\n                        buf[4], buf[5] ) );\n\n#if defined(MBEDTLS_HAVE_TIME)\n    t = mbedtls_time( NULL );\n    *p++ = (unsigned char)( t >> 24 );\n    *p++ = (unsigned char)( t >> 16 );\n    *p++ = (unsigned char)( t >>  8 );\n    *p++ = (unsigned char)( t       );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, current time: %lu\", t ) );\n#else\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )\n        return( ret );\n\n    p += 4;\n#endif /* MBEDTLS_HAVE_TIME */\n\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )\n        return( ret );\n\n    p += 28;\n\n    memcpy( ssl->handshake->randbytes + 32, buf + 6, 32 );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"server hello, random bytes\", buf + 6, 32 );\n\n    /*\n     * Resume is 0  by default, see ssl_handshake_init().\n     * It may be already set to 1 by ssl_parse_session_ticket_ext().\n     * If not, try looking up session ID in our cache.\n     */\n    if( ssl->handshake->resume == 0 &&\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE &&\n#endif\n        ssl->session_negotiate->id_len != 0 &&\n        ssl->conf->f_get_cache != NULL &&\n        ssl->conf->f_get_cache( ssl->conf->p_cache, ssl->session_negotiate ) == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"session successfully restored from cache\" ) );\n        ssl->handshake->resume = 1;\n    }\n\n    if( ssl->handshake->resume == 0 )\n    {\n        /*\n         * New session, create a new session id,\n         * unless we're about to issue a session ticket\n         */\n        ssl->state++;\n\n#if defined(MBEDTLS_HAVE_TIME)\n        ssl->session_negotiate->start = mbedtls_time( NULL );\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n        if( ssl->handshake->new_session_ticket != 0 )\n        {\n            ssl->session_negotiate->id_len = n = 0;\n            memset( ssl->session_negotiate->id, 0, 32 );\n        }\n        else\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n        {\n            ssl->session_negotiate->id_len = n = 32;\n            if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id,\n                                    n ) ) != 0 )\n                return( ret );\n        }\n    }\n    else\n    {\n        /*\n         * Resuming a session\n         */\n        n = ssl->session_negotiate->id_len;\n        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;\n\n        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n            return( ret );\n        }\n    }\n\n    /*\n     *    38  .  38     session id length\n     *    39  . 38+n    session id\n     *   39+n . 40+n    chosen ciphersuite\n     *   41+n . 41+n    chosen compression alg.\n     *   42+n . 43+n    extensions length\n     *   44+n . 43+n+m  extensions\n     */\n    *p++ = (unsigned char) ssl->session_negotiate->id_len;\n    memcpy( p, ssl->session_negotiate->id, ssl->session_negotiate->id_len );\n    p += ssl->session_negotiate->id_len;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, session id len.: %d\", n ) );\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server hello, session id\", buf + 39, n );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"%s session has been resumed\",\n                   ssl->handshake->resume ? \"a\" : \"no\" ) );\n\n    *p++ = (unsigned char)( ssl->session_negotiate->ciphersuite >> 8 );\n    *p++ = (unsigned char)( ssl->session_negotiate->ciphersuite      );\n    *p++ = (unsigned char)( ssl->session_negotiate->compression      );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, chosen ciphersuite: %s\",\n           mbedtls_ssl_get_ciphersuite_name( ssl->session_negotiate->ciphersuite ) ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, compress alg.: 0x%02X\",\n                   ssl->session_negotiate->compression ) );\n\n    /* Do not write the extensions if the protocol is SSLv3 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    if( ( ssl->major_ver != 3 ) || ( ssl->minor_ver != 0 ) )\n    {\n#endif\n\n    /*\n     *  First write extensions, then the total length\n     */\n    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n    ssl_write_encrypt_then_mac_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_ALPN)\n    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, total extension length: %d\", ext_len ) );\n\n    if( ext_len > 0 )\n    {\n        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );\n        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );\n        p += ext_len;\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    }\n#endif\n\n    ssl->out_msglen  = p - buf;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_HELLO;\n\n    ret = mbedtls_ssl_write_record( ssl );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write server hello\" ) );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)       && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)   && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)  && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)&& \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\nstatic int ssl_write_certificate_request( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate request\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate request\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n#else\nstatic int ssl_write_certificate_request( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    size_t dn_size, total_dn_size; /* excluding length bytes */\n    size_t ct_len, sa_len; /* including length bytes */\n    unsigned char *buf, *p;\n    const unsigned char * const end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    const mbedtls_x509_crt *crt;\n    int authmode;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate request\" ) );\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    if( ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET )\n        authmode = ssl->handshake->sni_authmode;\n    else\n#endif\n        authmode = ssl->conf->authmode;\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||\n        authmode == MBEDTLS_SSL_VERIFY_NONE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate request\" ) );\n        return( 0 );\n    }\n\n    /*\n     *     0  .   0   handshake type\n     *     1  .   3   handshake length\n     *     4  .   4   cert type count\n     *     5  .. m-1  cert types\n     *     m  .. m+1  sig alg length (TLS 1.2 only)\n     *    m+1 .. n-1  SignatureAndHashAlgorithms (TLS 1.2 only)\n     *     n  .. n+1  length of all DNs\n     *    n+2 .. n+3  length of DN 1\n     *    n+4 .. ...  Distinguished Name #1\n     *    ... .. ...  length of DN 2, etc.\n     */\n    buf = ssl->out_msg;\n    p = buf + 4;\n\n    /*\n     * Supported certificate types\n     *\n     *     ClientCertificateType certificate_types<1..2^8-1>;\n     *     enum { (255) } ClientCertificateType;\n     */\n    ct_len = 0;\n\n#if defined(MBEDTLS_RSA_C)\n    p[1 + ct_len++] = MBEDTLS_SSL_CERT_TYPE_RSA_SIGN;\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n    p[1 + ct_len++] = MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN;\n#endif\n\n    p[0] = (unsigned char) ct_len++;\n    p += ct_len;\n\n    sa_len = 0;\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    /*\n     * Add signature_algorithms for verify (TLS 1.2)\n     *\n     *     SignatureAndHashAlgorithm supported_signature_algorithms<2..2^16-2>;\n     *\n     *     struct {\n     *           HashAlgorithm hash;\n     *           SignatureAlgorithm signature;\n     *     } SignatureAndHashAlgorithm;\n     *\n     *     enum { (255) } HashAlgorithm;\n     *     enum { (255) } SignatureAlgorithm;\n     */\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        const int *cur;\n\n        /*\n         * Supported signature algorithms\n         */\n        for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )\n        {\n            unsigned char hash = mbedtls_ssl_hash_from_md_alg( *cur );\n\n            if( MBEDTLS_SSL_HASH_NONE == hash || mbedtls_ssl_set_calc_verify_md( ssl, hash ) )\n                continue;\n\n#if defined(MBEDTLS_RSA_C)\n            p[2 + sa_len++] = hash;\n            p[2 + sa_len++] = MBEDTLS_SSL_SIG_RSA;\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n            p[2 + sa_len++] = hash;\n            p[2 + sa_len++] = MBEDTLS_SSL_SIG_ECDSA;\n#endif\n        }\n\n        p[0] = (unsigned char)( sa_len >> 8 );\n        p[1] = (unsigned char)( sa_len      );\n        sa_len += 2;\n        p += sa_len;\n    }\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n    /*\n     * DistinguishedName certificate_authorities<0..2^16-1>;\n     * opaque DistinguishedName<1..2^16-1>;\n     */\n    p += 2;\n\n    total_dn_size = 0;\n\n    if( ssl->conf->cert_req_ca_list ==  MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED )\n    {\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n        if( ssl->handshake->sni_ca_chain != NULL )\n            crt = ssl->handshake->sni_ca_chain;\n        else\n#endif\n            crt = ssl->conf->ca_chain;\n\n        while( crt != NULL && crt->version != 0 )\n        {\n            dn_size = crt->subject_raw.len;\n\n            if( end < p ||\n                (size_t)( end - p ) < dn_size ||\n                (size_t)( end - p ) < 2 + dn_size )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"skipping CAs: buffer too short\" ) );\n                break;\n            }\n\n            *p++ = (unsigned char)( dn_size >> 8 );\n            *p++ = (unsigned char)( dn_size      );\n            memcpy( p, crt->subject_raw.p, dn_size );\n            p += dn_size;\n\n            MBEDTLS_SSL_DEBUG_BUF( 3, \"requested DN\", p - dn_size, dn_size );\n\n            total_dn_size += 2 + dn_size;\n            crt = crt->next;\n        }\n    }\n\n    ssl->out_msglen  = p - buf;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_REQUEST;\n    ssl->out_msg[4 + ct_len + sa_len] = (unsigned char)( total_dn_size  >> 8 );\n    ssl->out_msg[5 + ct_len + sa_len] = (unsigned char)( total_dn_size       );\n\n    ret = mbedtls_ssl_write_record( ssl );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write certificate request\" ) );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\nstatic int ssl_get_ecdh_params_from_cert( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    if( ! mbedtls_pk_can_do( mbedtls_ssl_own_key( ssl ), MBEDTLS_PK_ECKEY ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key not ECDH capable\" ) );\n        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n    }\n\n    if( ( ret = mbedtls_ecdh_get_params( &ssl->handshake->ecdh_ctx,\n                                 mbedtls_pk_ec( *mbedtls_ssl_own_key( ssl ) ),\n                                 MBEDTLS_ECDH_OURS ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ecdh_get_params\" ), ret );\n        return( ret );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\nstatic int ssl_write_server_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t n = 0;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n                            ssl->transform_negotiate->ciphersuite_info;\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED)\n    unsigned char *p = ssl->out_msg + 4;\n    size_t len;\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n    unsigned char *dig_signed = p;\n    size_t dig_signed_len = 0;\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED */\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write server key exchange\" ) );\n\n    /*\n     *\n     * Part 1: Extract static ECDH parameters and abort\n     *         if ServerKeyExchange not needed.\n     *\n     */\n\n    /* For suites involving ECDH, extract DH parameters\n     * from certificate at this point. */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_ecdh( ciphersuite_info ) )\n    {\n        ssl_get_ecdh_params_from_cert( ssl );\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */\n\n    /* Key exchanges not involving ephemeral keys don't use\n     * ServerKeyExchange, so end here. */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)\n    if( mbedtls_ssl_ciphersuite_no_pfs( ciphersuite_info ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__NON_PFS__ENABLED */\n\n    /*\n     *\n     * Part 2: Provide key exchange parameters for chosen ciphersuite.\n     *\n     */\n\n    /*\n     * - ECJPAKE key exchanges\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n        ret = mbedtls_ecjpake_write_round_two( &ssl->handshake->ecjpake_ctx,\n                p, end - p, &len, ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_write_round_two\", ret );\n            return( ret );\n        }\n\n        p += len;\n        n += len;\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n    /*\n     * For (EC)DHE key exchanges with PSK, parameters are prefixed by support\n     * identity hint (RFC 4279, Sec. 3). Until someone needs this feature,\n     * we use empty support identity hints here.\n     **/\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)   || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        *(p++) = 0x00;\n        *(p++) = 0x00;\n\n        n += 2;\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n    /*\n     * - DHE key exchanges\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_dhe( ciphersuite_info ) )\n    {\n        if( ssl->conf->dhm_P.p == NULL || ssl->conf->dhm_G.p == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no DH parameters set\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n        }\n\n        /*\n         * Ephemeral DH parameters:\n         *\n         * struct {\n         *     opaque dh_p<1..2^16-1>;\n         *     opaque dh_g<1..2^16-1>;\n         *     opaque dh_Ys<1..2^16-1>;\n         * } ServerDHParams;\n         */\n        if( ( ret = mbedtls_dhm_set_group( &ssl->handshake->dhm_ctx,\n                                           &ssl->conf->dhm_P,\n                                           &ssl->conf->dhm_G ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_set_group\", ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_dhm_make_params( &ssl->handshake->dhm_ctx,\n                        (int) mbedtls_mpi_size( &ssl->handshake->dhm_ctx.P ),\n                        p, &len, ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_make_params\", ret );\n            return( ret );\n        }\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)        \n        dig_signed = p;\n        dig_signed_len = len;\n#endif\n\n        p += len;\n        n += len;\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: X \", &ssl->handshake->dhm_ctx.X  );\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: P \", &ssl->handshake->dhm_ctx.P  );\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: G \", &ssl->handshake->dhm_ctx.G  );\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: GX\", &ssl->handshake->dhm_ctx.GX );\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED */\n\n    /*\n     * - ECDHE key exchanges\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_ecdhe( ciphersuite_info ) )\n    {\n        /*\n         * Ephemeral ECDH parameters:\n         *\n         * struct {\n         *     ECParameters curve_params;\n         *     ECPoint      public;\n         * } ServerECDHParams;\n         */\n        const mbedtls_ecp_curve_info **curve = NULL;\n        const mbedtls_ecp_group_id *gid;\n\n        /* Match our preference list against the offered curves */\n        for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )\n            for( curve = ssl->handshake->curves; *curve != NULL; curve++ )\n                if( (*curve)->grp_id == *gid )\n                    goto curve_matching_done;\n\ncurve_matching_done:\n        if( curve == NULL || *curve == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no matching curve for ECDHE\" ) );\n            return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"ECDHE curve: %s\", (*curve)->name ) );\n\n        if( ( ret = mbedtls_ecp_group_load( &ssl->handshake->ecdh_ctx.grp,\n                                       (*curve)->grp_id ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecp_group_load\", ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_ecdh_make_params( &ssl->handshake->ecdh_ctx, &len,\n                                      p, MBEDTLS_SSL_MAX_CONTENT_LEN - n,\n                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_make_params\", ret );\n            return( ret );\n        }\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n        dig_signed     = p;\n        dig_signed_len = len;\n#endif\n\n        p += len;\n        n += len;\n\n        MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Q \", &ssl->handshake->ecdh_ctx.Q );\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED */\n\n    /*\n     *\n     * Part 3: For key exchanges involving the server signing the\n     *         exchange parameters, compute and add the signature here.\n     *\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_server_signature( ciphersuite_info ) )\n    {\n        size_t signature_len = 0;\n        unsigned int hashlen = 0;\n        unsigned char hash[64];\n\n        /*\n         * 3.1: Choose hash algorithm:\n         * A: For TLS 1.2, obey signature-hash-algorithm extension \n         *    to choose appropriate hash.\n         * B: For SSL3, TLS1.0, TLS1.1 and ECDHE_ECDSA, use SHA1\n         *    (RFC 4492, Sec. 5.4)\n         * C: Otherwise, use MD5 + SHA1 (RFC 4346, Sec. 7.4.3)\n         */\n\n        mbedtls_md_type_t md_alg;\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        mbedtls_pk_type_t sig_alg =\n            mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            /* A: For TLS 1.2, obey signature-hash-algorithm extension\n             *    (RFC 5246, Sec. 7.4.1.4.1). */\n            if( sig_alg == MBEDTLS_PK_NONE ||\n                ( md_alg = mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs,\n                                                          sig_alg ) ) == MBEDTLS_MD_NONE )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n                /* (... because we choose a cipher suite \n                 *      only if there is a matching hash.) */\n                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA )\n        {\n            /* B: Default hash SHA1 */\n            md_alg = MBEDTLS_MD_SHA1;\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n        {\n            /* C: MD5 + SHA1 */\n            md_alg = MBEDTLS_MD_NONE;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"pick hash algorithm %d for signing\", md_alg ) );\n\n        /*\n         * 3.2: Compute the hash to be signed\n         */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( md_alg == MBEDTLS_MD_NONE )\n        {\n            hashlen = 36;\n            ret = mbedtls_ssl_get_key_exchange_md_ssl_tls( ssl, hash,\n                                                           dig_signed,\n                                                           dig_signed_len );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( md_alg != MBEDTLS_MD_NONE )\n        {\n            /* Info from md_alg will be used instead */\n            hashlen = 0;\n            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash,\n                                                          dig_signed,\n                                                          dig_signed_len,\n                                                          md_alg );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"parameters hash\", hash, hashlen != 0 ? hashlen :\n            (unsigned int) ( mbedtls_md_get_size( mbedtls_md_info_from_type( md_alg ) ) ) );\n\n        /*\n         * 3.3: Compute and add the signature\n         */\n        if( mbedtls_ssl_own_key( ssl ) == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no private key\" ) );\n            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n        }\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            /*\n             * For TLS 1.2, we need to specify signature and hash algorithm\n             * explicitly through a prefix to the signature.\n             *\n             * struct {\n             *    HashAlgorithm hash;\n             *    SignatureAlgorithm signature;\n             * } SignatureAndHashAlgorithm;\n             *\n             * struct {\n             *    SignatureAndHashAlgorithm algorithm;\n             *    opaque signature<0..2^16-1>;\n             * } DigitallySigned;\n             *\n             */\n\n            *(p++) = mbedtls_ssl_hash_from_md_alg( md_alg );\n            *(p++) = mbedtls_ssl_sig_from_pk_alg( sig_alg );\n\n            n += 2;\n        }\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n        if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash, hashlen,\n                        p + 2 , &signature_len, ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_sign\", ret );\n            return( ret );\n        }\n\n        *(p++) = (unsigned char)( signature_len >> 8 );\n        *(p++) = (unsigned char)( signature_len      );\n        n += 2;\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"my signature\", p, signature_len );\n\n        n += signature_len;\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n\n    /* Done with actual work; add header and send. */\n\n    ssl->out_msglen  = 4 + n;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE;\n\n    ssl->state++;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write server key exchange\" ) );\n\n    return( 0 );\n}\n\nstatic int ssl_write_server_hello_done( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write server hello done\" ) );\n\n    ssl->out_msglen  = 4;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_HELLO_DONE;\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_send_flight_completed( ssl );\n#endif\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write server hello done\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\nstatic int ssl_parse_client_dh_public( mbedtls_ssl_context *ssl, unsigned char **p,\n                                       const unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t n;\n\n    /*\n     * Receive G^Y mod P, premaster = (G^Y)^X mod P\n     */\n    if( *p + 2 > end )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    n = ( (*p)[0] << 8 ) | (*p)[1];\n    *p += 2;\n\n    if( *p + n > end )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    if( ( ret = mbedtls_dhm_read_public( &ssl->handshake->dhm_ctx, *p, n ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_read_public\", ret );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );\n    }\n\n    *p += n;\n\n    MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: GY\", &ssl->handshake->dhm_ctx.GY );\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED) ||                           \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\nstatic int ssl_parse_encrypted_pms( mbedtls_ssl_context *ssl,\n                                    const unsigned char *p,\n                                    const unsigned char *end,\n                                    size_t pms_offset )\n{\n    int ret;\n    size_t len = mbedtls_pk_get_len( mbedtls_ssl_own_key( ssl ) );\n    unsigned char *pms = ssl->handshake->premaster + pms_offset;\n    unsigned char ver[2];\n    unsigned char fake_pms[48], peer_pms[48];\n    unsigned char mask;\n    size_t i, peer_pmslen;\n    unsigned int diff;\n\n    if( ! mbedtls_pk_can_do( mbedtls_ssl_own_key( ssl ), MBEDTLS_PK_RSA ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no RSA private key\" ) );\n        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n    }\n\n    /*\n     * Decrypt the premaster using own private RSA key\n     */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        if( *p++ != ( ( len >> 8 ) & 0xFF ) ||\n            *p++ != ( ( len      ) & 0xFF ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n        }\n    }\n#endif\n\n    if( p + len != end )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    mbedtls_ssl_write_version( ssl->handshake->max_major_ver,\n                       ssl->handshake->max_minor_ver,\n                       ssl->conf->transport, ver );\n\n    /*\n     * Protection against Bleichenbacher's attack: invalid PKCS#1 v1.5 padding\n     * must not cause the connection to end immediately; instead, send a\n     * bad_record_mac later in the handshake.\n     * Also, avoid data-dependant branches here to protect against\n     * timing-based variants.\n     */\n    ret = ssl->conf->f_rng( ssl->conf->p_rng, fake_pms, sizeof( fake_pms ) );\n    if( ret != 0 )\n        return( ret );\n\n    ret = mbedtls_pk_decrypt( mbedtls_ssl_own_key( ssl ), p, len,\n                      peer_pms, &peer_pmslen,\n                      sizeof( peer_pms ),\n                      ssl->conf->f_rng, ssl->conf->p_rng );\n\n    diff  = (unsigned int) ret;\n    diff |= peer_pmslen ^ 48;\n    diff |= peer_pms[0] ^ ver[0];\n    diff |= peer_pms[1] ^ ver[1];\n\n#if defined(MBEDTLS_SSL_DEBUG_ALL)\n    if( diff != 0 )\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n#endif\n\n    if( sizeof( ssl->handshake->premaster ) < pms_offset ||\n        sizeof( ssl->handshake->premaster ) - pms_offset < 48 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n    ssl->handshake->pmslen = 48;\n\n    /* mask = diff ? 0xff : 0x00 using bit operations to avoid branches */\n    /* MSVC has a warning about unary minus on unsigned, but this is\n     * well-defined and precisely what we want to do here */\n#if defined(_MSC_VER)\n#pragma warning( push )\n#pragma warning( disable : 4146 )\n#endif\n    mask = - ( ( diff | - diff ) >> ( sizeof( unsigned int ) * 8 - 1 ) );\n#if defined(_MSC_VER)\n#pragma warning( pop )\n#endif\n\n    for( i = 0; i < ssl->handshake->pmslen; i++ )\n        pms[i] = ( mask & fake_pms[i] ) | ( (~mask) & peer_pms[i] );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nstatic int ssl_parse_client_psk_identity( mbedtls_ssl_context *ssl, unsigned char **p,\n                                          const unsigned char *end )\n{\n    int ret = 0;\n    size_t n;\n\n    if( ssl->conf->f_psk == NULL &&\n        ( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL ||\n          ssl->conf->psk_identity_len == 0 || ssl->conf->psk_len == 0 ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no pre-shared key\" ) );\n        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n    }\n\n    /*\n     * Receive client pre-shared key identity name\n     */\n    if( end - *p < 2 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    n = ( (*p)[0] << 8 ) | (*p)[1];\n    *p += 2;\n\n    if( n < 1 || n > 65535 || n > (size_t) ( end - *p ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    if( ssl->conf->f_psk != NULL )\n    {\n        if( ssl->conf->f_psk( ssl->conf->p_psk, ssl, *p, n ) != 0 )\n            ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;\n    }\n    else\n    {\n        /* Identity is not a big secret since clients send it in the clear,\n         * but treat it carefully anyway, just in case */\n        if( n != ssl->conf->psk_identity_len ||\n            mbedtls_ssl_safer_memcmp( ssl->conf->psk_identity, *p, n ) != 0 )\n        {\n            ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;\n        }\n    }\n\n    if( ret == MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY )\n    {\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"Unknown PSK identity\", *p, n );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY );\n        return( MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY );\n    }\n\n    *p += n;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\nstatic int ssl_parse_client_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n    unsigned char *p, *end;\n\n    ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse client key exchange\" ) );\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    p = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n    end = ssl->in_msg + ssl->in_hslen;\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n    }\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA )\n    {\n        if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_dh_public\" ), ret );\n            return( ret );\n        }\n\n        if( p != end )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n        }\n\n        if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,\n                                      ssl->handshake->premaster,\n                                      MBEDTLS_PREMASTER_SIZE,\n                                     &ssl->handshake->pmslen,\n                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_calc_secret\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->handshake->dhm_ctx.K  );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )\n    {\n        if( ( ret = mbedtls_ecdh_read_public( &ssl->handshake->ecdh_ctx,\n                                      p, end - p) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_read_public\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );\n        }\n\n        MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Qp \", &ssl->handshake->ecdh_ctx.Qp );\n\n        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,\n                                      &ssl->handshake->pmslen,\n                                       ssl->handshake->premaster,\n                                       MBEDTLS_MPI_MAX_SIZE,\n                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_calc_secret\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"ECDH: z  \", &ssl->handshake->ecdh_ctx.z );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )\n    {\n        if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_psk_identity\" ), ret );\n            return( ret );\n        }\n\n        if( p != end )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n        }\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n    {\n        if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_psk_identity\" ), ret );\n            return( ret );\n        }\n\n        if( ( ret = ssl_parse_encrypted_pms( ssl, p, end, 2 ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_encrypted_pms\" ), ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n    {\n        if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_psk_identity\" ), ret );\n            return( ret );\n        }\n        if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_dh_public\" ), ret );\n            return( ret );\n        }\n\n        if( p != end )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client key exchange\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );\n        }\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_client_psk_identity\" ), ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_ecdh_read_public( &ssl->handshake->ecdh_ctx,\n                                       p, end - p ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_read_public\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );\n        }\n\n        MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Qp \", &ssl->handshake->ecdh_ctx.Qp );\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )\n    {\n        if( ( ret = ssl_parse_encrypted_pms( ssl, p, end, 0 ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"ssl_parse_parse_encrypted_pms_secret\" ), ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        ret = mbedtls_ecjpake_read_round_two( &ssl->handshake->ecjpake_ctx,\n                                              p, end - p );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_two\", ret );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n\n        ret = mbedtls_ecjpake_derive_secret( &ssl->handshake->ecjpake_ctx,\n                ssl->handshake->premaster, 32, &ssl->handshake->pmslen,\n                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_derive_secret\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n        return( ret );\n    }\n\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse client key exchange\" ) );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)       && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)   && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)  && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)&& \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\nstatic int ssl_parse_certificate_verify( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate verify\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n#else\nstatic int ssl_parse_certificate_verify( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t i, sig_len;\n    unsigned char hash[48];\n    unsigned char *hash_start = hash;\n    size_t hashlen;\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    mbedtls_pk_type_t pk_alg;\n#endif\n    mbedtls_md_type_t md_alg;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate verify\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||\n        ssl->session_negotiate->peer_cert == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    /* Read the message without adding it to the checksum */\n    do {\n\n        if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ssl_read_record_layer\" ), ret );\n            return( ret );\n        }\n\n        ret = mbedtls_ssl_handle_message_type( ssl );\n\n    } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );\n\n    if( 0 != ret )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ssl_handle_message_type\" ), ret );\n        return( ret );\n    }\n\n    ssl->state++;\n\n    /* Process the message contents */\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE ||\n        ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE_VERIFY )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate verify message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n    }\n\n    i = mbedtls_ssl_hs_hdr_len( ssl );\n\n    /*\n     *  struct {\n     *     SignatureAndHashAlgorithm algorithm; -- TLS 1.2 only\n     *     opaque signature<0..2^16-1>;\n     *  } DigitallySigned;\n     */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        md_alg = MBEDTLS_MD_NONE;\n        hashlen = 36;\n\n        /* For ECDSA, use SHA-1, not MD-5 + SHA-1 */\n        if( mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,\n                        MBEDTLS_PK_ECDSA ) )\n        {\n            hash_start += 16;\n            hashlen -= 16;\n            md_alg = MBEDTLS_MD_SHA1;\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 ||\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        if( i + 2 > ssl->in_hslen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate verify message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n        }\n\n        /*\n         * Hash\n         */\n        md_alg = mbedtls_ssl_md_alg_from_hash( ssl->in_msg[i] );\n\n        if( md_alg == MBEDTLS_MD_NONE || mbedtls_ssl_set_calc_verify_md( ssl, ssl->in_msg[i] ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"peer not adhering to requested sig_alg\"\n                                \" for verify message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n        }\n\n#if !defined(MBEDTLS_MD_SHA1)\n        if( MBEDTLS_MD_SHA1 == md_alg )\n            hash_start += 16;\n#endif\n\n        /* Info from md_alg will be used instead */\n        hashlen = 0;\n\n        i++;\n\n        /*\n         * Signature\n         */\n        if( ( pk_alg = mbedtls_ssl_pk_alg_from_sig( ssl->in_msg[i] ) )\n                        == MBEDTLS_PK_NONE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"peer not adhering to requested sig_alg\"\n                                \" for verify message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n        }\n\n        /*\n         * Check the certificate's key type matches the signature alg\n         */\n        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"sig_alg doesn't match cert key\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n        }\n\n        i++;\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    if( i + 2 > ssl->in_hslen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate verify message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n    }\n\n    sig_len = ( ssl->in_msg[i] << 8 ) | ssl->in_msg[i+1];\n    i += 2;\n\n    if( i + sig_len != ssl->in_hslen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate verify message\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );\n    }\n\n    /* Calculate hash and verify signature */\n    ssl->handshake->calc_verify( ssl, hash );\n\n    if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,\n                           md_alg, hash_start, hashlen,\n                           ssl->in_msg + i, sig_len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_verify\", ret );\n        return( ret );\n    }\n\n    mbedtls_ssl_update_handshake_status( ssl );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse certificate verify\" ) );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic int ssl_write_new_session_ticket( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t tlen;\n    uint32_t lifetime;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write new session ticket\" ) );\n\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_NEW_SESSION_TICKET;\n\n    /*\n     * struct {\n     *     uint32 ticket_lifetime_hint;\n     *     opaque ticket<0..2^16-1>;\n     * } NewSessionTicket;\n     *\n     * 4  .  7   ticket_lifetime_hint (0 = unspecified)\n     * 8  .  9   ticket_len (n)\n     * 10 .  9+n ticket content\n     */\n\n    if( ( ret = ssl->conf->f_ticket_write( ssl->conf->p_ticket,\n                                ssl->session_negotiate,\n                                ssl->out_msg + 10,\n                                ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN,\n                                &tlen, &lifetime ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_ticket_write\", ret );\n        tlen = 0;\n    }\n\n    ssl->out_msg[4] = ( lifetime >> 24 ) & 0xFF;\n    ssl->out_msg[5] = ( lifetime >> 16 ) & 0xFF;\n    ssl->out_msg[6] = ( lifetime >>  8 ) & 0xFF;\n    ssl->out_msg[7] = ( lifetime       ) & 0xFF;\n\n    ssl->out_msg[8] = (unsigned char)( ( tlen >> 8 ) & 0xFF );\n    ssl->out_msg[9] = (unsigned char)( ( tlen      ) & 0xFF );\n\n    ssl->out_msglen = 10 + tlen;\n\n    /*\n     * Morally equivalent to updating ssl->state, but NewSessionTicket and\n     * ChangeCipherSpec share the same state.\n     */\n    ssl->handshake->new_session_ticket = 0;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write new session ticket\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n/*\n * SSL handshake -- server side -- single step\n */\nint mbedtls_ssl_handshake_server_step( mbedtls_ssl_context *ssl )\n{\n    int ret = 0;\n\n    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"server state: %d\", ssl->state ) );\n\n    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )\n    {\n        if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )\n            return( ret );\n    }\n#endif\n\n    switch( ssl->state )\n    {\n        case MBEDTLS_SSL_HELLO_REQUEST:\n            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;\n            break;\n\n        /*\n         *  <==   ClientHello\n         */\n        case MBEDTLS_SSL_CLIENT_HELLO:\n            ret = ssl_parse_client_hello( ssl );\n            break;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        case MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT:\n            return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );\n#endif\n\n        /*\n         *  ==>   ServerHello\n         *        Certificate\n         *      ( ServerKeyExchange  )\n         *      ( CertificateRequest )\n         *        ServerHelloDone\n         */\n        case MBEDTLS_SSL_SERVER_HELLO:\n            ret = ssl_write_server_hello( ssl );\n            break;\n\n        case MBEDTLS_SSL_SERVER_CERTIFICATE:\n            ret = mbedtls_ssl_write_certificate( ssl );\n            break;\n\n        case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:\n            ret = ssl_write_server_key_exchange( ssl );\n            break;\n\n        case MBEDTLS_SSL_CERTIFICATE_REQUEST:\n            ret = ssl_write_certificate_request( ssl );\n            break;\n\n        case MBEDTLS_SSL_SERVER_HELLO_DONE:\n            ret = ssl_write_server_hello_done( ssl );\n            break;\n\n        /*\n         *  <== ( Certificate/Alert  )\n         *        ClientKeyExchange\n         *      ( CertificateVerify  )\n         *        ChangeCipherSpec\n         *        Finished\n         */\n        case MBEDTLS_SSL_CLIENT_CERTIFICATE:\n            ret = mbedtls_ssl_parse_certificate( ssl );\n            break;\n\n        case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:\n            ret = ssl_parse_client_key_exchange( ssl );\n            break;\n\n        case MBEDTLS_SSL_CERTIFICATE_VERIFY:\n            ret = ssl_parse_certificate_verify( ssl );\n            break;\n\n        case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:\n            ret = mbedtls_ssl_parse_change_cipher_spec( ssl );\n            break;\n\n        case MBEDTLS_SSL_CLIENT_FINISHED:\n            ret = mbedtls_ssl_parse_finished( ssl );\n            break;\n\n        /*\n         *  ==> ( NewSessionTicket )\n         *        ChangeCipherSpec\n         *        Finished\n         */\n        case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n            if( ssl->handshake->new_session_ticket != 0 )\n                ret = ssl_write_new_session_ticket( ssl );\n            else\n#endif\n                ret = mbedtls_ssl_write_change_cipher_spec( ssl );\n            break;\n\n        case MBEDTLS_SSL_SERVER_FINISHED:\n            ret = mbedtls_ssl_write_finished( ssl );\n            break;\n\n        case MBEDTLS_SSL_FLUSH_BUFFERS:\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"handshake: done\" ) );\n            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;\n            break;\n\n        case MBEDTLS_SSL_HANDSHAKE_WRAPUP:\n            mbedtls_ssl_handshake_wrapup( ssl );\n            break;\n\n        default:\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"invalid state %d\", ssl->state ) );\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_SSL_SRV_C */\n","/**\n * \\file ssl_internal.h\n *\n * \\brief Internal functions shared by the SSL modules\n */\n/*\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n#ifndef MBEDTLS_SSL_INTERNAL_H\n#define MBEDTLS_SSL_INTERNAL_H\n\n#include \"ssl.h\"\n#include \"cipher.h\"\n\n#if defined(MBEDTLS_MD5_C)\n#include \"md5.h\"\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n#include \"sha1.h\"\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n#include \"sha256.h\"\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n#include \"sha512.h\"\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n#include \"ecjpake.h\"\n#endif\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n/* Determine minimum supported version */\n#define MBEDTLS_SSL_MIN_MAJOR_VERSION           MBEDTLS_SSL_MAJOR_VERSION_3\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n#define MBEDTLS_SSL_MIN_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_0\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1)\n#define MBEDTLS_SSL_MIN_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_1\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1_1)\n#define MBEDTLS_SSL_MIN_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_2\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#define MBEDTLS_SSL_MIN_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_3\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_1 */\n#endif /* MBEDTLS_SSL_PROTO_TLS1   */\n#endif /* MBEDTLS_SSL_PROTO_SSL3   */\n\n/* Determine maximum supported version */\n#define MBEDTLS_SSL_MAX_MAJOR_VERSION           MBEDTLS_SSL_MAJOR_VERSION_3\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#define MBEDTLS_SSL_MAX_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_3\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1_1)\n#define MBEDTLS_SSL_MAX_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_2\n#else\n#if defined(MBEDTLS_SSL_PROTO_TLS1)\n#define MBEDTLS_SSL_MAX_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_1\n#else\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n#define MBEDTLS_SSL_MAX_MINOR_VERSION           MBEDTLS_SSL_MINOR_VERSION_0\n#endif /* MBEDTLS_SSL_PROTO_SSL3   */\n#endif /* MBEDTLS_SSL_PROTO_TLS1   */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_1 */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#define MBEDTLS_SSL_INITIAL_HANDSHAKE           0\n#define MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS   1   /* In progress */\n#define MBEDTLS_SSL_RENEGOTIATION_DONE          2   /* Done or aborted */\n#define MBEDTLS_SSL_RENEGOTIATION_PENDING       3   /* Requested (server only) */\n\n/*\n * DTLS retransmission states, see RFC 6347 4.2.4\n *\n * The SENDING state is merged in PREPARING for initial sends,\n * but is distinct for resends.\n *\n * Note: initial state is wrong for server, but is not used anyway.\n */\n#define MBEDTLS_SSL_RETRANS_PREPARING       0\n#define MBEDTLS_SSL_RETRANS_SENDING         1\n#define MBEDTLS_SSL_RETRANS_WAITING         2\n#define MBEDTLS_SSL_RETRANS_FINISHED        3\n\n/*\n * Allow extra bytes for record, authentication and encryption overhead:\n * counter (8) + header (5) + IV(16) + MAC (16-48) + padding (0-256)\n * and allow for a maximum of 1024 of compression expansion if\n * enabled.\n */\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n#define MBEDTLS_SSL_COMPRESSION_ADD          1024\n#else\n#define MBEDTLS_SSL_COMPRESSION_ADD             0\n#endif\n\n#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_MODE_CBC)\n/* Ciphersuites using HMAC */\n#if defined(MBEDTLS_SHA512_C)\n#define MBEDTLS_SSL_MAC_ADD                 48  /* SHA-384 used for HMAC */\n#elif defined(MBEDTLS_SHA256_C)\n#define MBEDTLS_SSL_MAC_ADD                 32  /* SHA-256 used for HMAC */\n#else\n#define MBEDTLS_SSL_MAC_ADD                 20  /* SHA-1   used for HMAC */\n#endif\n#else\n/* AEAD ciphersuites: GCM and CCM use a 128 bits tag */\n#define MBEDTLS_SSL_MAC_ADD                 16\n#endif\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#define MBEDTLS_SSL_PADDING_ADD            256\n#else\n#define MBEDTLS_SSL_PADDING_ADD              0\n#endif\n\n#define MBEDTLS_SSL_PAYLOAD_LEN ( MBEDTLS_SSL_MAX_CONTENT_LEN    \\\n                        + MBEDTLS_SSL_COMPRESSION_ADD            \\\n                        + MBEDTLS_MAX_IV_LENGTH                  \\\n                        + MBEDTLS_SSL_MAC_ADD                    \\\n                        + MBEDTLS_SSL_PADDING_ADD                \\\n                        )\n\n/*\n * Check that we obey the standard's message size bounds\n */\n\n#if MBEDTLS_SSL_MAX_CONTENT_LEN > 16384\n#error Bad configuration - record content too large.\n#endif\n\n#if MBEDTLS_SSL_PAYLOAD_LEN > 16384 + 2048\n#error Bad configuration - protected record payload too large.\n#endif\n\n/* Note: Even though the TLS record header is only 5 bytes\n   long, we're internally using 8 bytes to store the\n   implicit sequence number. */\n#define MBEDTLS_SSL_HEADER_LEN 13\n\n#define MBEDTLS_SSL_BUFFER_LEN  \\\n    ( ( MBEDTLS_SSL_HEADER_LEN ) + ( MBEDTLS_SSL_PAYLOAD_LEN ) )\n\n/*\n * TLS extension flags (for extensions with outgoing ServerHello content\n * that need it (e.g. for RENEGOTIATION_INFO the server already knows because\n * of state of the renegotiation flag, so no indicator is required)\n */\n#define MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT (1 << 0)\n#define MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK                 (1 << 1)\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n/*\n * Abstraction for a grid of allowed signature-hash-algorithm pairs.\n */\nstruct mbedtls_ssl_sig_hash_set_t\n{\n    /* At the moment, we only need to remember a single suitable\n     * hash algorithm per signature algorithm. As long as that's\n     * the case - and we don't need a general lookup function -\n     * we can implement the sig-hash-set as a map from signatures\n     * to hash algorithms. */\n    mbedtls_md_type_t rsa;\n    mbedtls_md_type_t ecdsa;\n};\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n/*\n * This structure contains the parameters only needed during handshake.\n */\nstruct mbedtls_ssl_handshake_params\n{\n    /*\n     * Handshake specific crypto variables\n     */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    mbedtls_ssl_sig_hash_set_t hash_algs;             /*!<  Set of suitable sig-hash pairs */\n#endif\n#if defined(MBEDTLS_DHM_C)\n    mbedtls_dhm_context dhm_ctx;                /*!<  DHM key exchange        */\n#endif\n#if defined(MBEDTLS_ECDH_C)\n    mbedtls_ecdh_context ecdh_ctx;              /*!<  ECDH key exchange       */\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    mbedtls_ecjpake_context ecjpake_ctx;        /*!< EC J-PAKE key exchange */\n#if defined(MBEDTLS_SSL_CLI_C)\n    unsigned char *ecjpake_cache;               /*!< Cache for ClientHello ext */\n    size_t ecjpake_cache_len;                   /*!< Length of cached data */\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    const mbedtls_ecp_curve_info **curves;      /*!<  Supported elliptic curves */\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    unsigned char *psk;                 /*!<  PSK from the callback         */\n    size_t psk_len;                     /*!<  Length of PSK from callback   */\n#endif\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n    mbedtls_ssl_key_cert *key_cert;     /*!< chosen key/cert pair (server)  */\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    int sni_authmode;                   /*!< authmode from SNI callback     */\n    mbedtls_ssl_key_cert *sni_key_cert; /*!< key/cert list from SNI         */\n    mbedtls_x509_crt *sni_ca_chain;     /*!< trusted CAs from SNI callback  */\n    mbedtls_x509_crl *sni_ca_crl;       /*!< trusted CAs CRLs from SNI      */\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    unsigned int out_msg_seq;           /*!<  Outgoing handshake sequence number */\n    unsigned int in_msg_seq;            /*!<  Incoming handshake sequence number */\n\n    unsigned char *verify_cookie;       /*!<  Cli: HelloVerifyRequest cookie\n                                              Srv: unused                    */\n    unsigned char verify_cookie_len;    /*!<  Cli: cookie length\n                                              Srv: flag for sending a cookie */\n\n    unsigned char *hs_msg;              /*!<  Reassembled handshake message  */\n\n    uint32_t retransmit_timeout;        /*!<  Current value of timeout       */\n    unsigned char retransmit_state;     /*!<  Retransmission state           */\n    mbedtls_ssl_flight_item *flight;            /*!<  Current outgoing flight        */\n    mbedtls_ssl_flight_item *cur_msg;           /*!<  Current message in flight      */\n    unsigned int in_flight_start_seq;   /*!<  Minimum message sequence in the\n                                              flight being received          */\n    mbedtls_ssl_transform *alt_transform_out;   /*!<  Alternative transform for\n                                              resending messages             */\n    unsigned char alt_out_ctr[8];       /*!<  Alternative record epoch/counter\n                                              for resending messages         */\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    /*\n     * Checksum contexts\n     */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n       mbedtls_md5_context fin_md5;\n      mbedtls_sha1_context fin_sha1;\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\n    mbedtls_sha256_context fin_sha256;\n#endif\n#if defined(MBEDTLS_SHA512_C)\n    mbedtls_sha512_context fin_sha512;\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n    void (*update_checksum)(mbedtls_ssl_context *, const unsigned char *, size_t);\n    void (*calc_verify)(mbedtls_ssl_context *, unsigned char *);\n    void (*calc_finished)(mbedtls_ssl_context *, unsigned char *, int);\n    int  (*tls_prf)(const unsigned char *, size_t, const char *,\n                    const unsigned char *, size_t,\n                    unsigned char *, size_t);\n\n    size_t pmslen;                      /*!<  premaster length        */\n\n    unsigned char randbytes[64];        /*!<  random bytes            */\n    unsigned char premaster[MBEDTLS_PREMASTER_SIZE];\n                                        /*!<  premaster secret        */\n\n    int resume;                         /*!<  session resume indicator*/\n    int max_major_ver;                  /*!< max. major version client*/\n    int max_minor_ver;                  /*!< max. minor version client*/\n    int cli_exts;                       /*!< client extension presence*/\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    int new_session_ticket;             /*!< use NewSessionTicket?    */\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n    int extended_ms;                    /*!< use Extended Master Secret? */\n#endif\n};\n\n/*\n * This structure contains a full set of runtime transform parameters\n * either in negotiation or active.\n */\nstruct mbedtls_ssl_transform\n{\n    /*\n     * Session specific crypto layer\n     */\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n                                        /*!<  Chosen cipersuite_info  */\n    unsigned int keylen;                /*!<  symmetric key length (bytes)  */\n    size_t minlen;                      /*!<  min. ciphertext length  */\n    size_t ivlen;                       /*!<  IV length               */\n    size_t fixed_ivlen;                 /*!<  Fixed part of IV (AEAD) */\n    size_t maclen;                      /*!<  MAC length              */\n\n    unsigned char iv_enc[16];           /*!<  IV (encryption)         */\n    unsigned char iv_dec[16];           /*!<  IV (decryption)         */\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    /* Needed only for SSL v3.0 secret */\n    unsigned char mac_enc[20];          /*!<  SSL v3.0 secret (enc)   */\n    unsigned char mac_dec[20];          /*!<  SSL v3.0 secret (dec)   */\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n\n    mbedtls_md_context_t md_ctx_enc;            /*!<  MAC (encryption)        */\n    mbedtls_md_context_t md_ctx_dec;            /*!<  MAC (decryption)        */\n\n    mbedtls_cipher_context_t cipher_ctx_enc;    /*!<  encryption context      */\n    mbedtls_cipher_context_t cipher_ctx_dec;    /*!<  decryption context      */\n\n    /*\n     * Session specific compression layer\n     */\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    z_stream ctx_deflate;               /*!<  compression context     */\n    z_stream ctx_inflate;               /*!<  decompression context   */\n#endif\n};\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n/*\n * List of certificate + private key pairs\n */\nstruct mbedtls_ssl_key_cert\n{\n    mbedtls_x509_crt *cert;                 /*!< cert                       */\n    mbedtls_pk_context *key;                /*!< private key                */\n    mbedtls_ssl_key_cert *next;             /*!< next key/cert pair         */\n};\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n/*\n * List of handshake messages kept around for resending\n */\nstruct mbedtls_ssl_flight_item\n{\n    unsigned char *p;       /*!< message, including handshake headers   */\n    size_t len;             /*!< length of p                            */\n    unsigned char type;     /*!< type of the message: handshake or CCS  */\n    mbedtls_ssl_flight_item *next;  /*!< next handshake message(s)              */\n};\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n\n/* Find an entry in a signature-hash set matching a given hash algorithm. */\nmbedtls_md_type_t mbedtls_ssl_sig_hash_set_find( mbedtls_ssl_sig_hash_set_t *set,\n                                                 mbedtls_pk_type_t sig_alg );\n/* Add a signature-hash-pair to a signature-hash set */\nvoid mbedtls_ssl_sig_hash_set_add( mbedtls_ssl_sig_hash_set_t *set,\n                                   mbedtls_pk_type_t sig_alg,\n                                   mbedtls_md_type_t md_alg );\n/* Allow exactly one hash algorithm for each signature. */\nvoid mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,\n                                          mbedtls_md_type_t md_alg );\n\n/* Setup an empty signature-hash set */\nstatic inline void mbedtls_ssl_sig_hash_set_init( mbedtls_ssl_sig_hash_set_t *set )\n{\n    mbedtls_ssl_sig_hash_set_const_hash( set, MBEDTLS_MD_NONE );\n}\n\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2) &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n/**\n * \\brief           Free referenced items in an SSL transform context and clear\n *                  memory\n *\n * \\param transform SSL transform context\n */\nvoid mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform );\n\n/**\n * \\brief           Free referenced items in an SSL handshake context and clear\n *                  memory\n *\n * \\param handshake SSL handshake context\n */\nvoid mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake );\n\nint mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_handshake_server_step( mbedtls_ssl_context *ssl );\nvoid mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_send_fatal_handshake_failure( mbedtls_ssl_context *ssl );\n\nvoid mbedtls_ssl_reset_checksum( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl );\nvoid mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl );\n\n/**\n * \\brief       Update record layer\n *\n *              This function roughly separates the implementation\n *              of the logic of (D)TLS from the implementation\n *              of the secure transport.\n *\n * \\param  ssl  SSL context to use\n *\n * \\return      0 or non-zero error code.\n *\n * \\note        A clarification on what is called 'record layer' here\n *              is in order, as many sensible definitions are possible:\n *\n *              The record layer takes as input an untrusted underlying\n *              transport (stream or datagram) and transforms it into\n *              a serially multiplexed, secure transport, which\n *              conceptually provides the following:\n *\n *              (1) Three datagram based, content-agnostic transports\n *                  for handshake, alert and CCS messages.\n *              (2) One stream- or datagram-based transport\n *                  for application data.\n *              (3) Functionality for changing the underlying transform\n *                  securing the contents.\n *\n *              The interface to this functionality is given as follows:\n *\n *              a Updating\n *                [Currently implemented by mbedtls_ssl_read_record]\n *\n *                Check if and on which of the four 'ports' data is pending:\n *                Nothing, a controlling datagram of type (1), or application\n *                data (2). In any case data is present, internal buffers\n *                provide access to the data for the user to process it.\n *                Consumption of type (1) datagrams is done automatically\n *                on the next update, invalidating that the internal buffers\n *                for previous datagrams, while consumption of application\n *                data (2) is user-controlled.\n *\n *              b Reading of application data\n *                [Currently manual adaption of ssl->in_offt pointer]\n *\n *                As mentioned in the last paragraph, consumption of data\n *                is different from the automatic consumption of control\n *                datagrams (1) because application data is treated as a stream.\n *\n *              c Tracking availability of application data\n *                [Currently manually through decreasing ssl->in_msglen]\n *\n *                For efficiency and to retain datagram semantics for\n *                application data in case of DTLS, the record layer\n *                provides functionality for checking how much application\n *                data is still available in the internal buffer.\n *\n *              d Changing the transformation securing the communication.\n *\n *              Given an opaque implementation of the record layer in the\n *              above sense, it should be possible to implement the logic\n *              of (D)TLS on top of it without the need to know anything\n *              about the record layer's internals. This is done e.g.\n *              in all the handshake handling functions, and in the\n *              application data reading function mbedtls_ssl_read.\n *\n * \\note        The above tries to give a conceptual picture of the\n *              record layer, but the current implementation deviates\n *              from it in some places. For example, our implementation of\n *              the update functionality through mbedtls_ssl_read_record\n *              discards datagrams depending on the current state, which\n *              wouldn't fall under the record layer's responsibility\n *              following the above definition.\n *\n */\nint mbedtls_ssl_read_record( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want );\n\nint mbedtls_ssl_write_record( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl );\n\nint mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl );\n\nvoid mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,\n                            const mbedtls_ssl_ciphersuite_t *ciphersuite_info );\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nint mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex );\n#endif\n\n#if defined(MBEDTLS_PK_C)\nunsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk );\nunsigned char mbedtls_ssl_sig_from_pk_alg( mbedtls_pk_type_t type );\nmbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig );\n#endif\n\nmbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash );\nunsigned char mbedtls_ssl_hash_from_md_alg( int md );\nint mbedtls_ssl_set_calc_verify_md( mbedtls_ssl_context *ssl, int md );\n\n#if defined(MBEDTLS_ECP_C)\nint mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id );\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\nint mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,\n                                mbedtls_md_type_t md );\n#endif\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nstatic inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )\n{\n    mbedtls_ssl_key_cert *key_cert;\n\n    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )\n        key_cert = ssl->handshake->key_cert;\n    else\n        key_cert = ssl->conf->key_cert;\n\n    return( key_cert == NULL ? NULL : key_cert->key );\n}\n\nstatic inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )\n{\n    mbedtls_ssl_key_cert *key_cert;\n\n    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )\n        key_cert = ssl->handshake->key_cert;\n    else\n        key_cert = ssl->conf->key_cert;\n\n    return( key_cert == NULL ? NULL : key_cert->cert );\n}\n\n/*\n * Check usage of a certificate wrt extensions:\n * keyUsage, extendedKeyUsage (later), and nSCertType (later).\n *\n * Warning: cert_endpoint is the endpoint of the cert (ie, of our peer when we\n * check a cert we received from them)!\n *\n * Return 0 if everything is OK, -1 if not.\n */\nint mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,\n                          const mbedtls_ssl_ciphersuite_t *ciphersuite,\n                          int cert_endpoint,\n                          uint32_t *flags );\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\nvoid mbedtls_ssl_write_version( int major, int minor, int transport,\n                        unsigned char ver[2] );\nvoid mbedtls_ssl_read_version( int *major, int *minor, int transport,\n                       const unsigned char ver[2] );\n\nstatic inline size_t mbedtls_ssl_hdr_len( const mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        return( 13 );\n#else\n    ((void) ssl);\n#endif\n    return( 5 );\n}\n\nstatic inline size_t mbedtls_ssl_hs_hdr_len( const mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        return( 12 );\n#else\n    ((void) ssl);\n#endif\n    return( 4 );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\nvoid mbedtls_ssl_send_flight_completed( mbedtls_ssl_context *ssl );\nvoid mbedtls_ssl_recv_flight_completed( mbedtls_ssl_context *ssl );\nint mbedtls_ssl_resend( mbedtls_ssl_context *ssl );\n#endif\n\n/* Visible for testing purposes only */\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\nint mbedtls_ssl_dtls_replay_check( mbedtls_ssl_context *ssl );\nvoid mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl );\n#endif\n\n/* constant-time buffer comparison */\nstatic inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )\n{\n    size_t i;\n    volatile const unsigned char *A = (volatile const unsigned char *) a;\n    volatile const unsigned char *B = (volatile const unsigned char *) b;\n    volatile unsigned char diff = 0;\n\n    for( i = 0; i < n; i++ )\n        diff |= A[i] ^ B[i];\n\n    return( diff );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\nint mbedtls_ssl_get_key_exchange_md_ssl_tls( mbedtls_ssl_context *ssl,\n                                        unsigned char *output,\n                                        unsigned char *data, size_t data_len );\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\nint mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,\n                                        unsigned char *output,\n                                        unsigned char *data, size_t data_len,\n                                        mbedtls_md_type_t md_alg );\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* ssl_internal.h */\n","/*\n *  SSLv3/TLSv1 client-side functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SSL_CLI_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free      free\n#endif\n\n#include \"mbedtls/debug.h\"\n#include \"mbedtls/ssl.h\"\n#include \"mbedtls/ssl_internal.h\"\n\n#include <string.h>\n\n#include <stdint.h>\n\n#if defined(MBEDTLS_HAVE_TIME)\n#include \"mbedtls/platform_time.h\"\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\nstatic void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,\n                                    unsigned char *buf,\n                                    size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t hostname_len;\n\n    *olen = 0;\n\n    if( ssl->hostname == NULL )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding server name extension: %s\",\n                   ssl->hostname ) );\n\n    hostname_len = strlen( ssl->hostname );\n\n    if( end < p || (size_t)( end - p ) < hostname_len + 9 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    /*\n     * Sect. 3, RFC 6066 (TLS Extensions Definitions)\n     *\n     * In order to provide any of the server names, clients MAY include an\n     * extension of type \"server_name\" in the (extended) client hello. The\n     * \"extension_data\" field of this extension SHALL contain\n     * \"ServerNameList\" where:\n     *\n     * struct {\n     *     NameType name_type;\n     *     select (name_type) {\n     *         case host_name: HostName;\n     *     } name;\n     * } ServerName;\n     *\n     * enum {\n     *     host_name(0), (255)\n     * } NameType;\n     *\n     * opaque HostName<1..2^16-1>;\n     *\n     * struct {\n     *     ServerName server_name_list<1..2^16-1>\n     * } ServerNameList;\n     *\n     */\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );\n    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );\n\n    memcpy( p, ssl->hostname, hostname_len );\n\n    *olen = hostname_len + 9;\n}\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\nstatic void ssl_write_renegotiation_ext( mbedtls_ssl_context *ssl,\n                                         unsigned char *buf,\n                                         size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    /* We're always including an TLS_EMPTY_RENEGOTIATION_INFO_SCSV in the\n     * initial ClientHello, in which case also adding the renegotiation\n     * info extension is NOT RECOMMENDED as per RFC 5746 Section 3.4. */\n    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding renegotiation extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 5 + ssl->verify_data_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    /*\n     * Secure renegotiation\n     */\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = ( ssl->verify_data_len + 1 ) & 0xFF;\n    *p++ = ssl->verify_data_len & 0xFF;\n\n    memcpy( p, ssl->own_verify_data, ssl->verify_data_len );\n\n    *olen = 5 + ssl->verify_data_len;\n}\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n/*\n * Only if we handle at least one key exchange that needs signatures.\n */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\nstatic void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,\n                                                unsigned char *buf,\n                                                size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t sig_alg_len = 0;\n    const int *md;\n#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)\n    unsigned char *sig_alg_list = buf + 6;\n#endif\n\n    *olen = 0;\n\n    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding signature_algorithms extension\" ) );\n\n    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )\n    {\n#if defined(MBEDTLS_ECDSA_C)\n        sig_alg_len += 2;\n#endif\n#if defined(MBEDTLS_RSA_C)\n        sig_alg_len += 2;\n#endif\n    }\n\n    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    /*\n     * Prepare signature_algorithms extension (TLS 1.2)\n     */\n    sig_alg_len = 0;\n\n    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )\n    {\n#if defined(MBEDTLS_ECDSA_C)\n        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );\n        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;\n#endif\n#if defined(MBEDTLS_RSA_C)\n        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );\n        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;\n#endif\n    }\n\n    /*\n     * enum {\n     *     none(0), md5(1), sha1(2), sha224(3), sha256(4), sha384(5),\n     *     sha512(6), (255)\n     * } HashAlgorithm;\n     *\n     * enum { anonymous(0), rsa(1), dsa(2), ecdsa(3), (255) }\n     *   SignatureAlgorithm;\n     *\n     * struct {\n     *     HashAlgorithm hash;\n     *     SignatureAlgorithm signature;\n     * } SignatureAndHashAlgorithm;\n     *\n     * SignatureAndHashAlgorithm\n     *   supported_signature_algorithms<2..2^16-2>;\n     */\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );\n\n    *olen = 6 + sig_alg_len;\n}\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,\n                                                     unsigned char *buf,\n                                                     size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    unsigned char *elliptic_curve_list = p + 6;\n    size_t elliptic_curve_len = 0;\n    const mbedtls_ecp_curve_info *info;\n#if defined(MBEDTLS_ECP_C)\n    const mbedtls_ecp_group_id *grp_id;\n#else\n    ((void) ssl);\n#endif\n\n    *olen = 0;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding supported_elliptic_curves extension\" ) );\n\n#if defined(MBEDTLS_ECP_C)\n    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )\n#else\n    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )\n#endif\n    {\n#if defined(MBEDTLS_ECP_C)\n        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );\n#endif\n        if( info == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"invalid curve in ssl configuration\" ) );\n            return;\n        }\n\n        elliptic_curve_len += 2;\n    }\n\n    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    elliptic_curve_len = 0;\n\n#if defined(MBEDTLS_ECP_C)\n    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )\n#else\n    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )\n#endif\n    {\n#if defined(MBEDTLS_ECP_C)\n        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );\n#endif\n        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;\n        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;\n    }\n\n    if( elliptic_curve_len == 0 )\n        return;\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );\n\n    *olen = 6 + elliptic_curve_len;\n}\n\nstatic void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,\n                                                   unsigned char *buf,\n                                                   size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding supported_point_formats extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 6 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 2;\n\n    *p++ = 1;\n    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;\n\n    *olen = 6;\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || \n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic void ssl_write_ecjpake_kkpp_ext( mbedtls_ssl_context *ssl,\n                                        unsigned char *buf,\n                                        size_t *olen )\n{\n    int ret;\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t kkpp_len;\n\n    *olen = 0;\n\n    /* Skip costly extension if we can't use EC J-PAKE anyway */\n    if( mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding ecjpake_kkpp extension\" ) );\n\n    if( end - p < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP      ) & 0xFF );\n\n    /*\n     * We may need to send ClientHello multiple times for Hello verification.\n     * We don't want to compute fresh values every time (both for performance\n     * and consistency reasons), so cache the extension content.\n     */\n    if( ssl->handshake->ecjpake_cache == NULL ||\n        ssl->handshake->ecjpake_cache_len == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"generating new ecjpake parameters\" ) );\n\n        ret = mbedtls_ecjpake_write_round_one( &ssl->handshake->ecjpake_ctx,\n                                        p + 2, end - p - 2, &kkpp_len,\n                                        ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1 , \"mbedtls_ecjpake_write_round_one\", ret );\n            return;\n        }\n\n        ssl->handshake->ecjpake_cache = mbedtls_calloc( 1, kkpp_len );\n        if( ssl->handshake->ecjpake_cache == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"allocation failed\" ) );\n            return;\n        }\n\n        memcpy( ssl->handshake->ecjpake_cache, p + 2, kkpp_len );\n        ssl->handshake->ecjpake_cache_len = kkpp_len;\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"re-using cached ecjpake parameters\" ) );\n\n        kkpp_len = ssl->handshake->ecjpake_cache_len;\n\n        if( (size_t)( end - p - 2 ) < kkpp_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n            return;\n        }\n\n        memcpy( p + 2, ssl->handshake->ecjpake_cache, kkpp_len );\n    }\n\n    *p++ = (unsigned char)( ( kkpp_len >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( kkpp_len      ) & 0xFF );\n\n    *olen = kkpp_len + 4;\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nstatic void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,\n                                               unsigned char *buf,\n                                               size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding max_fragment_length extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 5 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 1;\n\n    *p++ = ssl->conf->mfl_code;\n\n    *olen = 5;\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nstatic void ssl_write_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                          unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding truncated_hmac extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nstatic void ssl_write_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,\n                                       unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    if( ssl->conf->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED ||\n        ssl->conf->max_minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding encrypt_then_mac \"\n                        \"extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nstatic void ssl_write_extended_ms_ext( mbedtls_ssl_context *ssl,\n                                       unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    *olen = 0;\n\n    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||\n        ssl->conf->max_minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding extended_master_secret \"\n                        \"extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 4 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );\n\n    *p++ = 0x00;\n    *p++ = 0x00;\n\n    *olen = 4;\n}\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,\n                                          unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t tlen = ssl->session_negotiate->ticket_len;\n\n    *olen = 0;\n\n    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding session ticket extension\" ) );\n\n    if( end < p || (size_t)( end - p ) < 4 + tlen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );\n\n    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( tlen      ) & 0xFF );\n\n    *olen = 4;\n\n    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"sending session ticket of length %d\", tlen ) );\n\n    memcpy( p, ssl->session_negotiate->ticket, tlen );\n\n    *olen += tlen;\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_SSL_ALPN)\nstatic void ssl_write_alpn_ext( mbedtls_ssl_context *ssl,\n                                unsigned char *buf, size_t *olen )\n{\n    unsigned char *p = buf;\n    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;\n    size_t alpnlen = 0;\n    const char **cur;\n\n    *olen = 0;\n\n    if( ssl->conf->alpn_list == NULL )\n    {\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, adding alpn extension\" ) );\n\n    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )\n        alpnlen += (unsigned char)( strlen( *cur ) & 0xFF ) + 1;\n\n    if( end < p || (size_t)( end - p ) < 6 + alpnlen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small\" ) );\n        return;\n    }\n\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );\n    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );\n\n    /*\n     * opaque ProtocolName<1..2^8-1>;\n     *\n     * struct {\n     *     ProtocolName protocol_name_list<2..2^16-1>\n     * } ProtocolNameList;\n     */\n\n    /* Skip writing extension and list length for now */\n    p += 4;\n\n    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )\n    {\n        *p = (unsigned char)( strlen( *cur ) & 0xFF );\n        memcpy( p + 1, *cur, *p );\n        p += 1 + *p;\n    }\n\n    *olen = p - buf;\n\n    /* List length = olen - 2 (ext_type) - 2 (ext_len) - 2 (list_len) */\n    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );\n    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );\n\n    /* Extension length = olen - 2 (ext_type) - 2 (ext_len) */\n    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );\n    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );\n}\n#endif /* MBEDTLS_SSL_ALPN */\n\n/*\n * Generate random bytes for ClientHello\n */\nstatic int ssl_generate_random( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *p = ssl->handshake->randbytes;\n#if defined(MBEDTLS_HAVE_TIME)\n    mbedtls_time_t t;\n#endif\n\n    /*\n     * When responding to a verify request, MUST reuse random (RFC 6347 4.2.1)\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->verify_cookie != NULL )\n    {\n        return( 0 );\n    }\n#endif\n\n#if defined(MBEDTLS_HAVE_TIME)\n    t = mbedtls_time( NULL );\n    *p++ = (unsigned char)( t >> 24 );\n    *p++ = (unsigned char)( t >> 16 );\n    *p++ = (unsigned char)( t >>  8 );\n    *p++ = (unsigned char)( t       );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, current time: %lu\", t ) );\n#else\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )\n        return( ret );\n\n    p += 4;\n#endif /* MBEDTLS_HAVE_TIME */\n\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\nstatic int ssl_write_client_hello( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t i, n, olen, ext_len = 0;\n    unsigned char *buf;\n    unsigned char *p, *q;\n    unsigned char offer_compress;\n    const int *ciphersuites;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write client hello\" ) );\n\n    if( ssl->conf->f_rng == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no RNG provided\") );\n        return( MBEDTLS_ERR_SSL_NO_RNG );\n    }\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )\n#endif\n    {\n        ssl->major_ver = ssl->conf->min_major_ver;\n        ssl->minor_ver = ssl->conf->min_minor_ver;\n    }\n\n    if( ssl->conf->max_major_ver == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"configured max major version is invalid, \"\n                            \"consider using mbedtls_ssl_config_defaults()\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    /*\n     *     0  .   0   handshake type\n     *     1  .   3   handshake length\n     *     4  .   5   highest version supported\n     *     6  .   9   current UNIX time\n     *    10  .  37   random bytes\n     */\n    buf = ssl->out_msg;\n    p = buf + 4;\n\n    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,\n                       ssl->conf->transport, p );\n    p += 2;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, max version: [%d:%d]\",\n                   buf[4], buf[5] ) );\n\n    if( ( ret = ssl_generate_random( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_generate_random\", ret );\n        return( ret );\n    }\n\n    memcpy( p, ssl->handshake->randbytes, 32 );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, random bytes\", p, 32 );\n    p += 32;\n\n    /*\n     *    38  .  38   session id length\n     *    39  . 39+n  session id\n     *   39+n . 39+n  DTLS only: cookie length (1 byte)\n     *   40+n .  ..   DTSL only: cookie\n     *   ..   . ..    ciphersuitelist length (2 bytes)\n     *   ..   . ..    ciphersuitelist\n     *   ..   . ..    compression methods length (1 byte)\n     *   ..   . ..    compression methods\n     *   ..   . ..    extensions length (2 bytes)\n     *   ..   . ..    extensions\n     */\n    n = ssl->session_negotiate->id_len;\n\n    if( n < 16 || n > 32 ||\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||\n#endif\n        ssl->handshake->resume == 0 )\n    {\n        n = 0;\n    }\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    /*\n     * RFC 5077 section 3.4: \"When presenting a ticket, the client MAY\n     * generate and include a Session ID in the TLS ClientHello.\"\n     */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )\n#endif\n    {\n        if( ssl->session_negotiate->ticket != NULL &&\n                ssl->session_negotiate->ticket_len != 0 )\n        {\n            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );\n\n            if( ret != 0 )\n                return( ret );\n\n            ssl->session_negotiate->id_len = n = 32;\n        }\n    }\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n    *p++ = (unsigned char) n;\n\n    for( i = 0; i < n; i++ )\n        *p++ = ssl->session_negotiate->id[i];\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, session id len.: %d\", n ) );\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"client hello, session id\", buf + 39, n );\n\n    /*\n     * DTLS cookie\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        if( ssl->handshake->verify_cookie == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"no verify cookie to send\" ) );\n            *p++ = 0;\n        }\n        else\n        {\n            MBEDTLS_SSL_DEBUG_BUF( 3, \"client hello, cookie\",\n                              ssl->handshake->verify_cookie,\n                              ssl->handshake->verify_cookie_len );\n\n            *p++ = ssl->handshake->verify_cookie_len;\n            memcpy( p, ssl->handshake->verify_cookie,\n                       ssl->handshake->verify_cookie_len );\n            p += ssl->handshake->verify_cookie_len;\n        }\n    }\n#endif\n\n    /*\n     * Ciphersuite list\n     */\n    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];\n\n    /* Skip writing ciphersuite length for now */\n    n = 0;\n    q = p;\n    p += 2;\n\n    for( i = 0; ciphersuites[i] != 0; i++ )\n    {\n        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );\n\n        if( ciphersuite_info == NULL )\n            continue;\n\n        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||\n            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )\n            continue;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n            ( ciphersuite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS ) )\n            continue;\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n        if( ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&\n            ciphersuite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )\n            continue;\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&\n            mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )\n            continue;\n#endif\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, add ciphersuite: %04x\",\n                                    ciphersuites[i] ) );\n\n        n++;\n        *p++ = (unsigned char)( ciphersuites[i] >> 8 );\n        *p++ = (unsigned char)( ciphersuites[i]      );\n    }\n\n    /*\n     * Add TLS_EMPTY_RENEGOTIATION_INFO_SCSV\n     */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )\n#endif\n    {\n        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );\n        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );\n        n++;\n    }\n\n    /* Some versions of OpenSSL don't handle it correctly if not at end */\n#if defined(MBEDTLS_SSL_FALLBACK_SCSV)\n    if( ssl->conf->fallback == MBEDTLS_SSL_IS_FALLBACK )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"adding FALLBACK_SCSV\" ) );\n        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE >> 8 );\n        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );\n        n++;\n    }\n#endif\n\n    *q++ = (unsigned char)( n >> 7 );\n    *q++ = (unsigned char)( n << 1 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, got %d ciphersuites\", n ) );\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    offer_compress = 1;\n#else\n    offer_compress = 0;\n#endif\n\n    /*\n     * We don't support compression with DTLS right now: is many records come\n     * in the same datagram, uncompressing one could overwrite the next one.\n     * We don't want to add complexity for handling that case unless there is\n     * an actual need for it.\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        offer_compress = 0;\n#endif\n\n    if( offer_compress )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, compress len.: %d\", 2 ) );\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, compress alg.: %d %d\",\n                            MBEDTLS_SSL_COMPRESS_DEFLATE, MBEDTLS_SSL_COMPRESS_NULL ) );\n\n        *p++ = 2;\n        *p++ = MBEDTLS_SSL_COMPRESS_DEFLATE;\n        *p++ = MBEDTLS_SSL_COMPRESS_NULL;\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, compress len.: %d\", 1 ) );\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, compress alg.: %d\",\n                            MBEDTLS_SSL_COMPRESS_NULL ) );\n\n        *p++ = 1;\n        *p++ = MBEDTLS_SSL_COMPRESS_NULL;\n    }\n\n    // First write extensions, then the total length\n    //\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n    /* Note that TLS_EMPTY_RENEGOTIATION_INFO_SCSV is always added\n     * even if MBEDTLS_SSL_RENEGOTIATION is not defined. */\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n\n    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n    ssl_write_encrypt_then_mac_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_ALPN)\n    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );\n    ext_len += olen;\n#endif\n\n    /* olen unused if all extensions are disabled */\n    ((void) olen);\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"client hello, total extension length: %d\",\n                   ext_len ) );\n\n    if( ext_len > 0 )\n    {\n        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );\n        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );\n        p += ext_len;\n    }\n\n    ssl->out_msglen  = p - buf;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_send_flight_completed( ssl );\n#endif\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write client hello\" ) );\n\n    return( 0 );\n}\n\nstatic int ssl_parse_renegotiation_info( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )\n    {\n        /* Check verify-data in constant-time. The length OTOH is no secret */\n        if( len    != 1 + ssl->verify_data_len * 2 ||\n            buf[0] !=     ssl->verify_data_len * 2 ||\n            mbedtls_ssl_safer_memcmp( buf + 1,\n                          ssl->own_verify_data, ssl->verify_data_len ) != 0 ||\n            mbedtls_ssl_safer_memcmp( buf + 1 + ssl->verify_data_len,\n                          ssl->peer_verify_data, ssl->verify_data_len ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching renegotiation info\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n    {\n        if( len != 1 || buf[0] != 0x00 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-zero length renegotiation info\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n\n        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;\n    }\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nstatic int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,\n                                              const unsigned char *buf,\n                                              size_t len )\n{\n    /*\n     * server should use the extension only if we did,\n     * and if so the server's value should match ours (and len is always 1)\n     */\n    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||\n        len != 1 ||\n        buf[0] != ssl->conf->mfl_code )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching max fragment length extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nstatic int ssl_parse_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED ||\n        len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching truncated HMAC extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    ((void) buf);\n\n    ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nstatic int ssl_parse_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( ssl->conf->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED ||\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||\n        len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching encrypt-then-MAC extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    ((void) buf);\n\n    ssl->session_negotiate->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nstatic int ssl_parse_extended_ms_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||\n        len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching extended master secret extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    ((void) buf);\n\n    ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||\n        len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching session ticket extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    ((void) buf);\n\n    ssl->handshake->new_session_ticket = 1;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic int ssl_parse_supported_point_formats_ext( mbedtls_ssl_context *ssl,\n                                                  const unsigned char *buf,\n                                                  size_t len )\n{\n    size_t list_size;\n    const unsigned char *p;\n\n    list_size = buf[0];\n    if( list_size + 1 != len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    p = buf + 1;\n    while( list_size > 0 )\n    {\n        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||\n            p[0] == MBEDTLS_ECP_PF_COMPRESSED )\n        {\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)\n            ssl->handshake->ecdh_ctx.point_format = p[0];\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n            ssl->handshake->ecjpake_ctx.point_format = p[0];\n#endif\n            MBEDTLS_SSL_DEBUG_MSG( 4, ( \"point format selected: %d\", p[0] ) );\n            return( 0 );\n        }\n\n        list_size--;\n        p++;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"no point format in common\" ) );\n    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n    return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || \n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\nstatic int ssl_parse_ecjpake_kkpp( mbedtls_ssl_context *ssl,\n                                   const unsigned char *buf,\n                                   size_t len )\n{\n    int ret;\n\n    if( ssl->transform_negotiate->ciphersuite_info->key_exchange !=\n        MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"skip ecjpake kkpp extension\" ) );\n        return( 0 );\n    }\n\n    /* If we got here, we no longer need our cached extension */\n    mbedtls_free( ssl->handshake->ecjpake_cache );\n    ssl->handshake->ecjpake_cache = NULL;\n    ssl->handshake->ecjpake_cache_len = 0;\n\n    if( ( ret = mbedtls_ecjpake_read_round_one( &ssl->handshake->ecjpake_ctx,\n                                                buf, len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_one\", ret );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( ret );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_ALPN)\nstatic int ssl_parse_alpn_ext( mbedtls_ssl_context *ssl,\n                               const unsigned char *buf, size_t len )\n{\n    size_t list_len, name_len;\n    const char **p;\n\n    /* If we didn't send it, the server shouldn't send it */\n    if( ssl->conf->alpn_list == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-matching ALPN extension\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    /*\n     * opaque ProtocolName<1..2^8-1>;\n     *\n     * struct {\n     *     ProtocolName protocol_name_list<2..2^16-1>\n     * } ProtocolNameList;\n     *\n     * the \"ProtocolNameList\" MUST contain exactly one \"ProtocolName\"\n     */\n\n    /* Min length is 2 (list_len) + 1 (name_len) + 1 (name) */\n    if( len < 4 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    list_len = ( buf[0] << 8 ) | buf[1];\n    if( list_len != len - 2 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    name_len = buf[2];\n    if( name_len != list_len - 1 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    /* Check that the server chosen protocol was in our list and save it */\n    for( p = ssl->conf->alpn_list; *p != NULL; p++ )\n    {\n        if( name_len == strlen( *p ) &&\n            memcmp( buf + 3, *p, name_len ) == 0 )\n        {\n            ssl->alpn_chosen = *p;\n            return( 0 );\n        }\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"ALPN extension: no matching protocol\" ) );\n    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n    return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n}\n#endif /* MBEDTLS_SSL_ALPN */\n\n/*\n * Parse HelloVerifyRequest.  Only called after verifying the HS type.\n */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\nstatic int ssl_parse_hello_verify_request( mbedtls_ssl_context *ssl )\n{\n    const unsigned char *p = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n    int major_ver, minor_ver;\n    unsigned char cookie_len;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse hello verify request\" ) );\n\n    /*\n     * struct {\n     *   ProtocolVersion server_version;\n     *   opaque cookie<0..2^8-1>;\n     * } HelloVerifyRequest;\n     */\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"server version\", p, 2 );\n    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, p );\n    p += 2;\n\n    /*\n     * Since the RFC is not clear on this point, accept DTLS 1.0 (TLS 1.1)\n     * even is lower than our min version.\n     */\n    if( major_ver < MBEDTLS_SSL_MAJOR_VERSION_3 ||\n        minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 ||\n        major_ver > ssl->conf->max_major_ver  ||\n        minor_ver > ssl->conf->max_minor_ver  )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server version\" ) );\n\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n\n        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );\n    }\n\n    cookie_len = *p++;\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"cookie\", p, cookie_len );\n\n    if( ( ssl->in_msg + ssl->in_msglen ) - p < cookie_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1,\n            ( \"cookie length does not match incoming message size\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                    MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    mbedtls_free( ssl->handshake->verify_cookie );\n\n    ssl->handshake->verify_cookie = mbedtls_calloc( 1, cookie_len );\n    if( ssl->handshake->verify_cookie  == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc failed (%d bytes)\", cookie_len ) );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    memcpy( ssl->handshake->verify_cookie, p, cookie_len );\n    ssl->handshake->verify_cookie_len = cookie_len;\n\n    /* Start over at ClientHello */\n    ssl->state = MBEDTLS_SSL_CLIENT_HELLO;\n    mbedtls_ssl_reset_checksum( ssl );\n\n    mbedtls_ssl_recv_flight_completed( ssl );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse hello verify request\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\nstatic int ssl_parse_server_hello( mbedtls_ssl_context *ssl )\n{\n    int ret, i;\n    size_t n;\n    size_t ext_len;\n    unsigned char *buf, *ext;\n    unsigned char comp;\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    int accept_comp;\n#endif\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    int renegotiation_info_seen = 0;\n#endif\n    int handshake_failure = 0;\n    const mbedtls_ssl_ciphersuite_t *suite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server hello\" ) );\n\n    buf = ssl->in_msg;\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        /* No alert on a read error. */\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n        {\n            ssl->renego_records_seen++;\n\n            if( ssl->conf->renego_max_records >= 0 &&\n                ssl->renego_records_seen > ssl->conf->renego_max_records )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation requested, \"\n                                    \"but not honored by server\" ) );\n                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n            }\n\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"non-handshake message during renego\" ) );\n\n            ssl->keep_current_message = 1;\n            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );\n        }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        if( buf[0] == MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"received hello verify request\" ) );\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server hello\" ) );\n            return( ssl_parse_hello_verify_request( ssl ) );\n        }\n        else\n        {\n            /* We made it through the verification process */\n            mbedtls_free( ssl->handshake->verify_cookie );\n            ssl->handshake->verify_cookie = NULL;\n            ssl->handshake->verify_cookie_len = 0;\n        }\n    }\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||\n        buf[0] != MBEDTLS_SSL_HS_SERVER_HELLO )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    /*\n     *  0   .  1    server_version\n     *  2   . 33    random (maybe including 4 bytes of Unix time)\n     * 34   . 34    session_id length = n\n     * 35   . 34+n  session_id\n     * 35+n . 36+n  cipher_suite\n     * 37+n . 37+n  compression_method\n     *\n     * 38+n . 39+n  extensions length (optional)\n     * 40+n .  ..   extensions\n     */\n    buf += mbedtls_ssl_hs_hdr_len( ssl );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"server hello, version\", buf + 0, 2 );\n    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,\n                      ssl->conf->transport, buf + 0 );\n\n    if( ssl->major_ver < ssl->conf->min_major_ver ||\n        ssl->minor_ver < ssl->conf->min_minor_ver ||\n        ssl->major_ver > ssl->conf->max_major_ver ||\n        ssl->minor_ver > ssl->conf->max_minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server version out of bounds - \"\n                            \" min: [%d:%d], server: [%d:%d], max: [%d:%d]\",\n                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,\n                            ssl->major_ver, ssl->minor_ver,\n                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );\n\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );\n\n        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, current time: %lu\",\n                           ( (uint32_t) buf[2] << 24 ) |\n                           ( (uint32_t) buf[3] << 16 ) |\n                           ( (uint32_t) buf[4] <<  8 ) |\n                           ( (uint32_t) buf[5]       ) ) );\n\n    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );\n\n    n = buf[34];\n\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server hello, random bytes\", buf + 2, 32 );\n\n    if( n > 32 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )\n    {\n        ext_len = ( ( buf[38 + n] <<  8 )\n                  | ( buf[39 + n]       ) );\n\n        if( ( ext_len > 0 && ext_len < 4 ) ||\n            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n    }\n    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )\n    {\n        ext_len = 0;\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    /* ciphersuite (used later) */\n    i = ( buf[35 + n] << 8 ) | buf[36 + n];\n\n    /*\n     * Read and check compression\n     */\n    comp = buf[37 + n];\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    /* See comments in ssl_write_client_hello() */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        accept_comp = 0;\n    else\n#endif\n        accept_comp = 1;\n\n    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&\n        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )\n#else /* MBEDTLS_ZLIB_SUPPORT */\n    if( comp != MBEDTLS_SSL_COMPRESS_NULL )\n#endif/* MBEDTLS_ZLIB_SUPPORT */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server hello, bad compression: %d\", comp ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n    }\n\n    /*\n     * Initialize update checksum functions\n     */\n    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );\n\n    if( ssl->transform_negotiate->ciphersuite_info == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"ciphersuite info for %04x not found\", i ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, session id len.: %d\", n ) );\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server hello, session id\", buf + 35, n );\n\n    /*\n     * Check if the session can be resumed\n     */\n    if( ssl->handshake->resume == 0 || n == 0 ||\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||\n#endif\n        ssl->session_negotiate->ciphersuite != i ||\n        ssl->session_negotiate->compression != comp ||\n        ssl->session_negotiate->id_len != n ||\n        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )\n    {\n        ssl->state++;\n        ssl->handshake->resume = 0;\n#if defined(MBEDTLS_HAVE_TIME)\n        ssl->session_negotiate->start = mbedtls_time( NULL );\n#endif\n        ssl->session_negotiate->ciphersuite = i;\n        ssl->session_negotiate->compression = comp;\n        ssl->session_negotiate->id_len = n;\n        memcpy( ssl->session_negotiate->id, buf + 35, n );\n    }\n    else\n    {\n        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;\n\n        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n            return( ret );\n        }\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"%s session has been resumed\",\n                   ssl->handshake->resume ? \"a\" : \"no\" ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, chosen ciphersuite: %04x\", i ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, compress alg.: %d\", buf[37 + n] ) );\n\n    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );\n    if( suite_info == NULL\n#if defined(MBEDTLS_ARC4_C)\n            || ( ssl->conf->arc4_disabled &&\n                suite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )\n#endif\n        )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"server hello, chosen ciphersuite: %s\", suite_info->name ) );\n\n    i = 0;\n    while( 1 )\n    {\n        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n\n        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==\n            ssl->session_negotiate->ciphersuite )\n        {\n            break;\n        }\n    }\n\n    if( comp != MBEDTLS_SSL_COMPRESS_NULL\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n        && comp != MBEDTLS_SSL_COMPRESS_DEFLATE\n#endif\n      )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n    ssl->session_negotiate->compression = comp;\n\n    ext = buf + 40 + n;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"server hello, total extension length: %d\", ext_len ) );\n\n    while( ext_len )\n    {\n        unsigned int ext_id   = ( ( ext[0] <<  8 )\n                                | ( ext[1]       ) );\n        unsigned int ext_size = ( ( ext[2] <<  8 )\n                                | ( ext[3]       ) );\n\n        if( ext_size + 4 > ext_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n\n        switch( ext_id )\n        {\n        case MBEDTLS_TLS_EXT_RENEGOTIATION_INFO:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found renegotiation extension\" ) );\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            renegotiation_info_seen = 1;\n#endif\n\n            if( ( ret = ssl_parse_renegotiation_info( ssl, ext + 4,\n                                                      ext_size ) ) != 0 )\n                return( ret );\n\n            break;\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n        case MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found max_fragment_length extension\" ) );\n\n            if( ( ret = ssl_parse_max_fragment_length_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n        case MBEDTLS_TLS_EXT_TRUNCATED_HMAC:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found truncated_hmac extension\" ) );\n\n            if( ( ret = ssl_parse_truncated_hmac_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n        case MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found encrypt_then_mac extension\" ) );\n\n            if( ( ret = ssl_parse_encrypt_then_mac_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n        case MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found extended_master_secret extension\" ) );\n\n            if( ( ret = ssl_parse_extended_ms_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n        case MBEDTLS_TLS_EXT_SESSION_TICKET:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found session_ticket extension\" ) );\n\n            if( ( ret = ssl_parse_session_ticket_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n        case MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found supported_point_formats extension\" ) );\n\n            if( ( ret = ssl_parse_supported_point_formats_ext( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||\n          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n        case MBEDTLS_TLS_EXT_ECJPAKE_KKPP:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found ecjpake_kkpp extension\" ) );\n\n            if( ( ret = ssl_parse_ecjpake_kkpp( ssl,\n                            ext + 4, ext_size ) ) != 0 )\n            {\n                return( ret );\n            }\n\n            break;\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_SSL_ALPN)\n        case MBEDTLS_TLS_EXT_ALPN:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"found alpn extension\" ) );\n\n            if( ( ret = ssl_parse_alpn_ext( ssl, ext + 4, ext_size ) ) != 0 )\n                return( ret );\n\n            break;\n#endif /* MBEDTLS_SSL_ALPN */\n\n        default:\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"unknown extension found: %d (ignoring)\",\n                           ext_id ) );\n        }\n\n        ext_len -= 4 + ext_size;\n        ext += 4 + ext_size;\n\n        if( ext_len > 0 && ext_len < 4 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n        }\n    }\n\n    /*\n     * Renegotiation security checks\n     */\n    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation, breaking off handshake\" ) );\n        handshake_failure = 1;\n    }\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&\n             renegotiation_info_seen == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension missing (secure)\" ) );\n        handshake_failure = 1;\n    }\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n             ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"legacy renegotiation not allowed\" ) );\n        handshake_failure = 1;\n    }\n    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n             renegotiation_info_seen == 1 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension present (legacy)\" ) );\n        handshake_failure = 1;\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n    if( handshake_failure == 1 )\n    {\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server hello\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\nstatic int ssl_parse_server_dh_params( mbedtls_ssl_context *ssl, unsigned char **p,\n                                       unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n\n    /*\n     * Ephemeral DH parameters:\n     *\n     * struct {\n     *     opaque dh_p<1..2^16-1>;\n     *     opaque dh_g<1..2^16-1>;\n     *     opaque dh_Ys<1..2^16-1>;\n     * } ServerDHParams;\n     */\n    if( ( ret = mbedtls_dhm_read_params( &ssl->handshake->dhm_ctx, p, end ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 2, ( \"mbedtls_dhm_read_params\" ), ret );\n        return( ret );\n    }\n\n    if( ssl->handshake->dhm_ctx.len * 8 < ssl->conf->dhm_min_bitlen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"DHM prime too short: %d < %d\",\n                                    ssl->handshake->dhm_ctx.len * 8,\n                                    ssl->conf->dhm_min_bitlen ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: P \", &ssl->handshake->dhm_ctx.P  );\n    MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: G \", &ssl->handshake->dhm_ctx.G  );\n    MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: GY\", &ssl->handshake->dhm_ctx.GY );\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\nstatic int ssl_check_server_ecdh_params( const mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ecp_curve_info *curve_info;\n\n    curve_info = mbedtls_ecp_curve_info_from_grp_id( ssl->handshake->ecdh_ctx.grp.id );\n    if( curve_info == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"ECDH curve: %s\", curve_info->name ) );\n\n#if defined(MBEDTLS_ECP_C)\n    if( mbedtls_ssl_check_curve( ssl, ssl->handshake->ecdh_ctx.grp.id ) != 0 )\n#else\n    if( ssl->handshake->ecdh_ctx.grp.nbits < 163 ||\n        ssl->handshake->ecdh_ctx.grp.nbits > 521 )\n#endif\n        return( -1 );\n\n    MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Qp\", &ssl->handshake->ecdh_ctx.Qp );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\nstatic int ssl_parse_server_ecdh_params( mbedtls_ssl_context *ssl,\n                                         unsigned char **p,\n                                         unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n\n    /*\n     * Ephemeral ECDH parameters:\n     *\n     * struct {\n     *     ECParameters curve_params;\n     *     ECPoint      public;\n     * } ServerECDHParams;\n     */\n    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,\n                                  (const unsigned char **) p, end ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ecdh_read_params\" ), ret );\n        return( ret );\n    }\n\n    if( ssl_check_server_ecdh_params( ssl ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message (ECDHE curve)\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nstatic int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,\n                                      unsigned char **p,\n                                      unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t  len;\n    ((void) ssl);\n\n    /*\n     * PSK parameters:\n     *\n     * opaque psk_identity_hint<0..2^16-1>;\n     */\n    len = (*p)[0] << 8 | (*p)[1];\n    *p += 2;\n\n    if( (*p) + len > end )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message \"\n                                    \"(psk_identity_hint length)\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    /*\n     * Note: we currently ignore the PKS identity hint, as we only allow one\n     * PSK to be provisionned on the client. This could be changed later if\n     * someone needs that feature.\n     */\n    *p += len;\n    ret = 0;\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED) ||                           \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n/*\n * Generate a pre-master secret and encrypt it with the server's RSA key\n */\nstatic int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,\n                                    size_t offset, size_t *olen,\n                                    size_t pms_offset )\n{\n    int ret;\n    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;\n    unsigned char *p = ssl->handshake->premaster + pms_offset;\n\n    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"buffer too small for encrypted pms\" ) );\n        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );\n    }\n\n    /*\n     * Generate (part of) the pre-master as\n     *  struct {\n     *      ProtocolVersion client_version;\n     *      opaque random[46];\n     *  } PreMasterSecret;\n     */\n    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,\n                       ssl->conf->transport, p );\n\n    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"f_rng\", ret );\n        return( ret );\n    }\n\n    ssl->handshake->pmslen = 48;\n\n    if( ssl->session_negotiate->peer_cert == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /*\n     * Now write it out, encrypted\n     */\n    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,\n                MBEDTLS_PK_RSA ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"certificate key type mismatch\" ) );\n        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n    }\n\n    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,\n                            p, ssl->handshake->pmslen,\n                            ssl->out_msg + offset + len_bytes, olen,\n                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,\n                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_rsa_pkcs1_encrypt\", ret );\n        return( ret );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( len_bytes == 2 )\n    {\n        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );\n        ssl->out_msg[offset+1] = (unsigned char)( *olen      );\n        *olen += 2;\n    }\n#endif\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\nstatic int ssl_parse_signature_algorithm( mbedtls_ssl_context *ssl,\n                                          unsigned char **p,\n                                          unsigned char *end,\n                                          mbedtls_md_type_t *md_alg,\n                                          mbedtls_pk_type_t *pk_alg )\n{\n    ((void) ssl);\n    *md_alg = MBEDTLS_MD_NONE;\n    *pk_alg = MBEDTLS_PK_NONE;\n\n    /* Only in TLS 1.2 */\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        return( 0 );\n    }\n\n    if( (*p) + 2 > end )\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n\n    /*\n     * Get hash algorithm\n     */\n    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"Server used unsupported \"\n                            \"HashAlgorithm %d\", *(p)[0] ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    /*\n     * Get signature algorithm\n     */\n    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server used unsupported \"\n                            \"SignatureAlgorithm %d\", (*p)[1] ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    /*\n     * Check if the hash is acceptable\n     */\n    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server used HashAlgorithm %d that was not offered\",\n                                    *(p)[0] ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"Server used SignatureAlgorithm %d\", (*p)[1] ) );\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"Server used HashAlgorithm %d\", (*p)[0] ) );\n    *p += 2;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\nstatic int ssl_get_ecdh_params_from_cert( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    const mbedtls_ecp_keypair *peer_key;\n\n    if( ssl->session_negotiate->peer_cert == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,\n                     MBEDTLS_PK_ECKEY ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key not ECDH capable\" ) );\n        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n    }\n\n    peer_key = mbedtls_pk_ec( ssl->session_negotiate->peer_cert->pk );\n\n    if( ( ret = mbedtls_ecdh_get_params( &ssl->handshake->ecdh_ctx, peer_key,\n                                 MBEDTLS_ECDH_THEIRS ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ecdh_get_params\" ), ret );\n        return( ret );\n    }\n\n    if( ssl_check_server_ecdh_params( ssl ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server certificate (ECDH curve)\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\nstatic int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    unsigned char *p = NULL, *end = NULL;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server key exchange\" ) );\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n    ((void) p);\n    ((void) end);\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )\n    {\n        if( ( ret = ssl_get_ecdh_params_from_cert( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_get_ecdh_params_from_cert\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n    ((void) p);\n    ((void) end);\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /*\n     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server\n     * doesn't use a psk_identity_hint\n     */\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )\n    {\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        {\n            /* Current message is probably either\n             * CertificateRequest or ServerHelloDone */\n            ssl->keep_current_message = 1;\n            goto exit;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key exchange message must \"\n                                    \"not be skipped\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n    end = ssl->in_msg + ssl->in_hslen;\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server key exchange\", p, end - p );\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        if( ssl_parse_server_psk_hint( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    } /* FALLTROUGH */\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        ; /* nothing more to do */\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n    {\n        if( ssl_parse_server_dh_params( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA )\n    {\n        if( ssl_parse_server_ecdh_params( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        ret = mbedtls_ecjpake_read_round_two( &ssl->handshake->ecjpake_ctx,\n                                              p, end - p );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_two\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_server_signature( ciphersuite_info ) )\n    {\n        size_t sig_len, hashlen;\n        unsigned char hash[64];\n        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;\n        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;\n        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n        size_t params_len = p - params;\n\n        /*\n         * Handle the digitally-signed structure\n         */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            if( ssl_parse_signature_algorithm( ssl, &p, end,\n                                               &md_alg, &pk_alg ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n            }\n\n            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            pk_alg = mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );\n\n            /* Default hash for ECDSA is SHA-1 */\n            if( pk_alg == MBEDTLS_PK_ECDSA && md_alg == MBEDTLS_MD_NONE )\n                md_alg = MBEDTLS_MD_SHA1;\n        }\n        else\n#endif\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        /*\n         * Read signature\n         */\n        sig_len = ( p[0] << 8 ) | p[1];\n        p += 2;\n\n        if( end != p + sig_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"signature\", p, sig_len );\n\n        /*\n         * Compute the hash that has been signed\n         */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( md_alg == MBEDTLS_MD_NONE )\n        {\n            hashlen = 36;\n            ret = mbedtls_ssl_get_key_exchange_md_ssl_tls( ssl, hash, params,\n                                                           params_len );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( md_alg != MBEDTLS_MD_NONE )\n        {\n            /* Info from md_alg will be used instead */\n            hashlen = 0;\n            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, params,\n                                                          params_len, md_alg );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"parameters hash\", hash, hashlen != 0 ? hashlen :\n            (unsigned int) ( mbedtls_md_get_size( mbedtls_md_info_from_type( md_alg ) ) ) );\n\n        if( ssl->session_negotiate->peer_cert == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n        }\n\n        /*\n         * Verify signature\n         */\n        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n        }\n\n        if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,\n                               md_alg, hash, hashlen, p, sig_len ) ) != 0 )\n        {\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_verify\", ret );\n            return( ret );\n        }\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n\nexit:\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server key exchange\" ) );\n\n    return( 0 );\n}\n\n#if ! defined(MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED)\nstatic int ssl_parse_certificate_request( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate request\" ) );\n\n    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate request\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n#else /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */\nstatic int ssl_parse_certificate_request( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *buf;\n    size_t n = 0;\n    size_t cert_type_len = 0, dn_len = 0;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate request\" ) );\n\n    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate request\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    ssl->state++;\n    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"got %s certificate request\",\n                        ssl->client_auth ? \"a\" : \"no\" ) );\n\n    if( ssl->client_auth == 0 )\n    {\n        /* Current message is probably the ServerHelloDone */\n        ssl->keep_current_message = 1;\n        goto exit;\n    }\n\n    /*\n     *  struct {\n     *      ClientCertificateType certificate_types<1..2^8-1>;\n     *      SignatureAndHashAlgorithm\n     *        supported_signature_algorithms<2^16-1>; -- TLS 1.2 only\n     *      DistinguishedName certificate_authorities<0..2^16-1>;\n     *  } CertificateRequest;\n     *\n     *  Since we only support a single certificate on clients, let's just\n     *  ignore all the information that's supposed to help us pick a\n     *  certificate.\n     *\n     *  We could check that our certificate matches the request, and bail out\n     *  if it doesn't, but it's simpler to just send the certificate anyway,\n     *  and give the server the opportunity to decide if it should terminate\n     *  the connection when it doesn't like our certificate.\n     *\n     *  Same goes for the hash in TLS 1.2's signature_algorithms: at this\n     *  point we only have one hash available (see comments in\n     *  write_certificate_verify), so let's just use what we have.\n     *\n     *  However, we still minimally parse the message to check it is at least\n     *  superficially sane.\n     */\n    buf = ssl->in_msg;\n\n    /* certificate_types */\n    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];\n    n = cert_type_len;\n\n    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );\n    }\n\n    /* supported_signature_algorithms */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )\n                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );\n#if defined(MBEDTLS_DEBUG_C)\n        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;\n        size_t i;\n\n        for( i = 0; i < sig_alg_len; i += 2 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"Supported Signature Algorithm found: %d\"\n                                        \",%d\", sig_alg[i], sig_alg[i + 1]  ) );\n        }\n#endif\n\n        n += 2 + sig_alg_len;\n\n        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );\n        }\n    }\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n    /* certificate_authorities */\n    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )\n             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );\n\n    n += dn_len;\n    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate request message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );\n    }\n\nexit:\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse certificate request\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED */\n\nstatic int ssl_parse_server_hello_done( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server hello done\" ) );\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello done message\" ) );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||\n        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server hello done message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );\n    }\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_recv_flight_completed( ssl );\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server hello done\" ) );\n\n    return( 0 );\n}\n\nstatic int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t i, n;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write client key exchange\" ) );\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA )\n    {\n        /*\n         * DHM key exchange -- send G^X mod P\n         */\n        n = ssl->handshake->dhm_ctx.len;\n\n        ssl->out_msg[4] = (unsigned char)( n >> 8 );\n        ssl->out_msg[5] = (unsigned char)( n      );\n        i = 6;\n\n        ret = mbedtls_dhm_make_public( &ssl->handshake->dhm_ctx,\n                                (int) mbedtls_mpi_size( &ssl->handshake->dhm_ctx.P ),\n                               &ssl->out_msg[i], n,\n                                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_make_public\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: X \", &ssl->handshake->dhm_ctx.X  );\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: GX\", &ssl->handshake->dhm_ctx.GX );\n\n        if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,\n                                      ssl->handshake->premaster,\n                                      MBEDTLS_PREMASTER_SIZE,\n                                     &ssl->handshake->pmslen,\n                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_calc_secret\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->handshake->dhm_ctx.K  );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )\n    {\n        /*\n         * ECDH key exchange -- send client public value\n         */\n        i = 4;\n\n        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,\n                                &n,\n                                &ssl->out_msg[i], 1000,\n                                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_make_public\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Q\", &ssl->handshake->ecdh_ctx.Q );\n\n        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,\n                                      &ssl->handshake->pmslen,\n                                       ssl->handshake->premaster,\n                                       MBEDTLS_MPI_MAX_SIZE,\n                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_calc_secret\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"ECDH: z\", &ssl->handshake->ecdh_ctx.z );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_psk( ciphersuite_info ) )\n    {\n        /*\n         * opaque psk_identity<0..2^16-1>;\n         */\n        if( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no private key for PSK\" ) );\n            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n        }\n\n        i = 4;\n        n = ssl->conf->psk_identity_len;\n\n        if( i + 2 + n > MBEDTLS_SSL_MAX_CONTENT_LEN )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"psk identity too long or \"\n                                        \"SSL buffer too short\" ) );\n            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );\n        }\n\n        ssl->out_msg[i++] = (unsigned char)( n >> 8 );\n        ssl->out_msg[i++] = (unsigned char)( n      );\n\n        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );\n        i += ssl->conf->psk_identity_len;\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )\n        {\n            n = 0;\n        }\n        else\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        {\n            if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 2 ) ) != 0 )\n                return( ret );\n        }\n        else\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n        {\n            /*\n             * ClientDiffieHellmanPublic public (DHM send G^X mod P)\n             */\n            n = ssl->handshake->dhm_ctx.len;\n\n            if( i + 2 + n > MBEDTLS_SSL_MAX_CONTENT_LEN )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"psk identity or DHM size too long\"\n                                            \" or SSL buffer too short\" ) );\n                return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );\n            }\n\n            ssl->out_msg[i++] = (unsigned char)( n >> 8 );\n            ssl->out_msg[i++] = (unsigned char)( n      );\n\n            ret = mbedtls_dhm_make_public( &ssl->handshake->dhm_ctx,\n                    (int) mbedtls_mpi_size( &ssl->handshake->dhm_ctx.P ),\n                    &ssl->out_msg[i], n,\n                    ssl->conf->f_rng, ssl->conf->p_rng );\n            if( ret != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_make_public\", ret );\n                return( ret );\n            }\n        }\n        else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n        {\n            /*\n             * ClientECDiffieHellmanPublic public;\n             */\n            ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx, &n,\n                    &ssl->out_msg[i], MBEDTLS_SSL_MAX_CONTENT_LEN - i,\n                    ssl->conf->f_rng, ssl->conf->p_rng );\n            if( ret != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_make_public\", ret );\n                return( ret );\n            }\n\n            MBEDTLS_SSL_DEBUG_ECP( 3, \"ECDH: Q\", &ssl->handshake->ecdh_ctx.Q );\n        }\n        else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,\n                        ciphersuite_info->key_exchange ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_psk_derive_premaster\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )\n    {\n        i = 4;\n        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )\n            return( ret );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        i = 4;\n\n        ret = mbedtls_ecjpake_write_round_two( &ssl->handshake->ecjpake_ctx,\n                ssl->out_msg + i, MBEDTLS_SSL_MAX_CONTENT_LEN - i, &n,\n                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_write_round_two\", ret );\n            return( ret );\n        }\n\n        ret = mbedtls_ecjpake_derive_secret( &ssl->handshake->ecjpake_ctx,\n                ssl->handshake->premaster, 32, &ssl->handshake->pmslen,\n                ssl->conf->f_rng, ssl->conf->p_rng );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_derive_secret\", ret );\n            return( ret );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n    {\n        ((void) ciphersuite_info);\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    ssl->out_msglen  = i + n;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;\n\n    ssl->state++;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write client key exchange\" ) );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)       && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)   && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)  && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)&& \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\nstatic int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate verify\" ) );\n\n    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n        return( ret );\n    }\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n#else\nstatic int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    size_t n = 0, offset = 0;\n    unsigned char hash[48];\n    unsigned char *hash_start = hash;\n    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;\n    unsigned int hashlen;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate verify\" ) );\n\n    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_derive_keys\", ret );\n        return( ret );\n    }\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate verify\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    if( mbedtls_ssl_own_key( ssl ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no private key for certificate\" ) );\n        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );\n    }\n\n    /*\n     * Make an RSA signature of the handshake digests\n     */\n    ssl->handshake->calc_verify( ssl, hash );\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        /*\n         * digitally-signed struct {\n         *     opaque md5_hash[16];\n         *     opaque sha_hash[20];\n         * };\n         *\n         * md5_hash\n         *     MD5(handshake_messages);\n         *\n         * sha_hash\n         *     SHA(handshake_messages);\n         */\n        hashlen = 36;\n        md_alg = MBEDTLS_MD_NONE;\n\n        /*\n         * For ECDSA, default hash is SHA-1 only\n         */\n        if( mbedtls_pk_can_do( mbedtls_ssl_own_key( ssl ), MBEDTLS_PK_ECDSA ) )\n        {\n            hash_start += 16;\n            hashlen -= 16;\n            md_alg = MBEDTLS_MD_SHA1;\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        /*\n         * digitally-signed struct {\n         *     opaque handshake_messages[handshake_messages_length];\n         * };\n         *\n         * Taking shortcut here. We assume that the server always allows the\n         * PRF Hash function and has sent it in the allowed signature\n         * algorithms list received in the Certificate Request message.\n         *\n         * Until we encounter a server that does not, we will take this\n         * shortcut.\n         *\n         * Reason: Otherwise we should have running hashes for SHA512 and SHA224\n         *         in order to satisfy 'weird' needs from the server side.\n         */\n        if( ssl->transform_negotiate->ciphersuite_info->mac ==\n            MBEDTLS_MD_SHA384 )\n        {\n            md_alg = MBEDTLS_MD_SHA384;\n            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;\n        }\n        else\n        {\n            md_alg = MBEDTLS_MD_SHA256;\n            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;\n        }\n        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );\n\n        /* Info from md_alg will be used instead */\n        hashlen = 0;\n        offset = 2;\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,\n                         ssl->out_msg + 6 + offset, &n,\n                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_sign\", ret );\n        return( ret );\n    }\n\n    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );\n    ssl->out_msg[5 + offset] = (unsigned char)( n      );\n\n    ssl->out_msglen  = 6 + n + offset;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;\n\n    ssl->state++;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write certificate verify\" ) );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &&\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\nstatic int ssl_parse_new_session_ticket( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    uint32_t lifetime;\n    size_t ticket_len;\n    unsigned char *ticket;\n    const unsigned char *msg;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse new session ticket\" ) );\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad new session ticket message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /*\n     * struct {\n     *     uint32 ticket_lifetime_hint;\n     *     opaque ticket<0..2^16-1>;\n     * } NewSessionTicket;\n     *\n     * 0  .  3   ticket_lifetime_hint\n     * 4  .  5   ticket_len (n)\n     * 6  .  5+n ticket content\n     */\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||\n        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad new session ticket message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );\n    }\n\n    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n\n    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |\n               ( msg[2] <<  8 ) | ( msg[3]       );\n\n    ticket_len = ( msg[4] << 8 ) | ( msg[5] );\n\n    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad new session ticket message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket length: %d\", ticket_len ) );\n\n    /* We're not waiting for a NewSessionTicket message any more */\n    ssl->handshake->new_session_ticket = 0;\n    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;\n\n    /*\n     * Zero-length ticket means the server changed his mind and doesn't want\n     * to send a ticket after all, so just forget it\n     */\n    if( ticket_len == 0 )\n        return( 0 );\n\n    mbedtls_zeroize( ssl->session_negotiate->ticket,\n                      ssl->session_negotiate->ticket_len );\n    mbedtls_free( ssl->session_negotiate->ticket );\n    ssl->session_negotiate->ticket = NULL;\n    ssl->session_negotiate->ticket_len = 0;\n\n    if( ( ticket = mbedtls_calloc( 1, ticket_len ) ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"ticket alloc failed\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    memcpy( ticket, msg + 6, ticket_len );\n\n    ssl->session_negotiate->ticket = ticket;\n    ssl->session_negotiate->ticket_len = ticket_len;\n    ssl->session_negotiate->ticket_lifetime = lifetime;\n\n    /*\n     * RFC 5077 section 3.4:\n     * \"If the client receives a session ticket from the server, then it\n     * discards any Session ID that was sent in the ServerHello.\"\n     */\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ticket in use, discarding session id\" ) );\n    ssl->session_negotiate->id_len = 0;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse new session ticket\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n/*\n * SSL handshake -- client side -- single step\n */\nint mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )\n{\n    int ret = 0;\n\n    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"client state: %d\", ssl->state ) );\n\n    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )\n    {\n        if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )\n            return( ret );\n    }\n#endif\n\n    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used\n     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&\n        ssl->handshake->new_session_ticket != 0 )\n    {\n        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;\n    }\n#endif\n\n    switch( ssl->state )\n    {\n        case MBEDTLS_SSL_HELLO_REQUEST:\n            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;\n            break;\n\n       /*\n        *  ==>   ClientHello\n        */\n       case MBEDTLS_SSL_CLIENT_HELLO:\n           ret = ssl_write_client_hello( ssl );\n           break;\n\n       /*\n        *  <==   ServerHello\n        *        Certificate\n        *      ( ServerKeyExchange  )\n        *      ( CertificateRequest )\n        *        ServerHelloDone\n        */\n       case MBEDTLS_SSL_SERVER_HELLO:\n           ret = ssl_parse_server_hello( ssl );\n           break;\n\n       case MBEDTLS_SSL_SERVER_CERTIFICATE:\n           ret = mbedtls_ssl_parse_certificate( ssl );\n           break;\n\n       case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:\n           ret = ssl_parse_server_key_exchange( ssl );\n           break;\n\n       case MBEDTLS_SSL_CERTIFICATE_REQUEST:\n           ret = ssl_parse_certificate_request( ssl );\n           break;\n\n       case MBEDTLS_SSL_SERVER_HELLO_DONE:\n           ret = ssl_parse_server_hello_done( ssl );\n           break;\n\n       /*\n        *  ==> ( Certificate/Alert  )\n        *        ClientKeyExchange\n        *      ( CertificateVerify  )\n        *        ChangeCipherSpec\n        *        Finished\n        */\n       case MBEDTLS_SSL_CLIENT_CERTIFICATE:\n           ret = mbedtls_ssl_write_certificate( ssl );\n           break;\n\n       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:\n           ret = ssl_write_client_key_exchange( ssl );\n           break;\n\n       case MBEDTLS_SSL_CERTIFICATE_VERIFY:\n           ret = ssl_write_certificate_verify( ssl );\n           break;\n\n       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:\n           ret = mbedtls_ssl_write_change_cipher_spec( ssl );\n           break;\n\n       case MBEDTLS_SSL_CLIENT_FINISHED:\n           ret = mbedtls_ssl_write_finished( ssl );\n           break;\n\n       /*\n        *  <==   ( NewSessionTicket )\n        *        ChangeCipherSpec\n        *        Finished\n        */\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n       case MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET:\n           ret = ssl_parse_new_session_ticket( ssl );\n           break;\n#endif\n\n       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:\n           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );\n           break;\n\n       case MBEDTLS_SSL_SERVER_FINISHED:\n           ret = mbedtls_ssl_parse_finished( ssl );\n           break;\n\n       case MBEDTLS_SSL_FLUSH_BUFFERS:\n           MBEDTLS_SSL_DEBUG_MSG( 2, ( \"handshake: done\" ) );\n           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;\n           break;\n\n       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:\n           mbedtls_ssl_handshake_wrapup( ssl );\n           break;\n\n       default:\n           MBEDTLS_SSL_DEBUG_MSG( 1, ( \"invalid state %d\", ssl->state ) );\n           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n   }\n\n    return( ret );\n}\n#endif /* MBEDTLS_SSL_CLI_C */\n","/*\n *  NIST SP800-38D compliant GCM implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n * http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf\n *\n * See also:\n * [MGV] http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf\n *\n * We use the algorithm described as Shoup's method with 4-bit tables in\n * [MGV] 4.1, pp. 12-13, to enhance speed without using too much memory.\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_GCM_C)\n\n#include \"mbedtls/gcm.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_AESNI_C)\n#include \"mbedtls/aesni.h\"\n#endif\n\n#if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)\n#include \"mbedtls/aes.h\"\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */\n\n#if !defined(MBEDTLS_GCM_ALT)\n\n/*\n * 32-bit integer manipulation macros (big endian)\n */\n#ifndef GET_UINT32_BE\n#define GET_UINT32_BE(n,b,i)                            \\\n{                                                       \\\n    (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \\\n        | ( (uint32_t) (b)[(i) + 1] << 16 )             \\\n        | ( (uint32_t) (b)[(i) + 2] <<  8 )             \\\n        | ( (uint32_t) (b)[(i) + 3]       );            \\\n}\n#endif\n\n#ifndef PUT_UINT32_BE\n#define PUT_UINT32_BE(n,b,i)                            \\\n{                                                       \\\n    (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \\\n    (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \\\n    (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \\\n    (b)[(i) + 3] = (unsigned char) ( (n)       );       \\\n}\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n/*\n * Initialize a context\n */\nvoid mbedtls_gcm_init( mbedtls_gcm_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );\n}\n\n/*\n * Precompute small multiples of H, that is set\n *      HH[i] || HL[i] = H times i,\n * where i is seen as a field element as in [MGV], ie high-order bits\n * correspond to low powers of P. The result is stored in the same way, that\n * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL\n * corresponds to P^127.\n */\nstatic int gcm_gen_table( mbedtls_gcm_context *ctx )\n{\n    int ret, i, j;\n    uint64_t hi, lo;\n    uint64_t vl, vh;\n    unsigned char h[16];\n    size_t olen = 0;\n\n    memset( h, 0, 16 );\n    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )\n        return( ret );\n\n    /* pack h as two 64-bits ints, big-endian */\n    GET_UINT32_BE( hi, h,  0  );\n    GET_UINT32_BE( lo, h,  4  );\n    vh = (uint64_t) hi << 32 | lo;\n\n    GET_UINT32_BE( hi, h,  8  );\n    GET_UINT32_BE( lo, h,  12 );\n    vl = (uint64_t) hi << 32 | lo;\n\n    /* 8 = 1000 corresponds to 1 in GF(2^128) */\n    ctx->HL[8] = vl;\n    ctx->HH[8] = vh;\n\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    /* With CLMUL support, we need only h, not the rest of the table */\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )\n        return( 0 );\n#endif\n\n    /* 0 corresponds to 0 in GF(2^128) */\n    ctx->HH[0] = 0;\n    ctx->HL[0] = 0;\n\n    for( i = 4; i > 0; i >>= 1 )\n    {\n        uint32_t T = ( vl & 1 ) * 0xe1000000U;\n        vl  = ( vh << 63 ) | ( vl >> 1 );\n        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);\n\n        ctx->HL[i] = vl;\n        ctx->HH[i] = vh;\n    }\n\n    for( i = 2; i <= 8; i *= 2 )\n    {\n        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;\n        vh = *HiH;\n        vl = *HiL;\n        for( j = 1; j < i; j++ )\n        {\n            HiH[j] = vh ^ ctx->HH[j];\n            HiL[j] = vl ^ ctx->HL[j];\n        }\n    }\n\n    return( 0 );\n}\n\nint mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,\n                        mbedtls_cipher_id_t cipher,\n                        const unsigned char *key,\n                        unsigned int keybits )\n{\n    int ret;\n    const mbedtls_cipher_info_t *cipher_info;\n\n    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );\n    if( cipher_info == NULL )\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n\n    if( cipher_info->block_size != 16 )\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n\n    mbedtls_cipher_free( &ctx->cipher_ctx );\n\n    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,\n                               MBEDTLS_ENCRYPT ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    if( ( ret = gcm_gen_table( ctx ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * Shoup's method for multiplication use this table with\n *      last4[x] = x times P^128\n * where x and last4[x] are seen as elements of GF(2^128) as in [MGV]\n */\nstatic const uint64_t last4[16] =\n{\n    0x0000, 0x1c20, 0x3840, 0x2460,\n    0x7080, 0x6ca0, 0x48c0, 0x54e0,\n    0xe100, 0xfd20, 0xd940, 0xc560,\n    0x9180, 0x8da0, 0xa9c0, 0xb5e0\n};\n\n/*\n * Sets output to x times H using the precomputed tables.\n * x and output are seen as elements of GF(2^128) as in [MGV].\n */\nstatic void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],\n                      unsigned char output[16] )\n{\n    int i = 0;\n    unsigned char lo, hi, rem;\n    uint64_t zh, zl;\n\n#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)\n    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) ) {\n        unsigned char h[16];\n\n        PUT_UINT32_BE( ctx->HH[8] >> 32, h,  0 );\n        PUT_UINT32_BE( ctx->HH[8],       h,  4 );\n        PUT_UINT32_BE( ctx->HL[8] >> 32, h,  8 );\n        PUT_UINT32_BE( ctx->HL[8],       h, 12 );\n\n        mbedtls_aesni_gcm_mult( output, x, h );\n        return;\n    }\n#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */\n\n    lo = x[15] & 0xf;\n\n    zh = ctx->HH[lo];\n    zl = ctx->HL[lo];\n\n    for( i = 15; i >= 0; i-- )\n    {\n        lo = x[i] & 0xf;\n        hi = x[i] >> 4;\n\n        if( i != 15 )\n        {\n            rem = (unsigned char) zl & 0xf;\n            zl = ( zh << 60 ) | ( zl >> 4 );\n            zh = ( zh >> 4 );\n            zh ^= (uint64_t) last4[rem] << 48;\n            zh ^= ctx->HH[lo];\n            zl ^= ctx->HL[lo];\n\n        }\n\n        rem = (unsigned char) zl & 0xf;\n        zl = ( zh << 60 ) | ( zl >> 4 );\n        zh = ( zh >> 4 );\n        zh ^= (uint64_t) last4[rem] << 48;\n        zh ^= ctx->HH[hi];\n        zl ^= ctx->HL[hi];\n    }\n\n    PUT_UINT32_BE( zh >> 32, output, 0 );\n    PUT_UINT32_BE( zh, output, 4 );\n    PUT_UINT32_BE( zl >> 32, output, 8 );\n    PUT_UINT32_BE( zl, output, 12 );\n}\n\nint mbedtls_gcm_starts( mbedtls_gcm_context *ctx,\n                int mode,\n                const unsigned char *iv,\n                size_t iv_len,\n                const unsigned char *add,\n                size_t add_len )\n{\n    int ret;\n    unsigned char work_buf[16];\n    size_t i;\n    const unsigned char *p;\n    size_t use_len, olen = 0;\n\n    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */\n    /* IV is not allowed to be zero length */\n    if( iv_len == 0 ||\n      ( (uint64_t) iv_len  ) >> 61 != 0 ||\n      ( (uint64_t) add_len ) >> 61 != 0 )\n    {\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n    }\n\n    memset( ctx->y, 0x00, sizeof(ctx->y) );\n    memset( ctx->buf, 0x00, sizeof(ctx->buf) );\n\n    ctx->mode = mode;\n    ctx->len = 0;\n    ctx->add_len = 0;\n\n    if( iv_len == 12 )\n    {\n        memcpy( ctx->y, iv, iv_len );\n        ctx->y[15] = 1;\n    }\n    else\n    {\n        memset( work_buf, 0x00, 16 );\n        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );\n\n        p = iv;\n        while( iv_len > 0 )\n        {\n            use_len = ( iv_len < 16 ) ? iv_len : 16;\n\n            for( i = 0; i < use_len; i++ )\n                ctx->y[i] ^= p[i];\n\n            gcm_mult( ctx, ctx->y, ctx->y );\n\n            iv_len -= use_len;\n            p += use_len;\n        }\n\n        for( i = 0; i < 16; i++ )\n            ctx->y[i] ^= work_buf[i];\n\n        gcm_mult( ctx, ctx->y, ctx->y );\n    }\n\n    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,\n                             &olen ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    ctx->add_len = add_len;\n    p = add;\n    while( add_len > 0 )\n    {\n        use_len = ( add_len < 16 ) ? add_len : 16;\n\n        for( i = 0; i < use_len; i++ )\n            ctx->buf[i] ^= p[i];\n\n        gcm_mult( ctx, ctx->buf, ctx->buf );\n\n        add_len -= use_len;\n        p += use_len;\n    }\n\n    return( 0 );\n}\n\nint mbedtls_gcm_update( mbedtls_gcm_context *ctx,\n                size_t length,\n                const unsigned char *input,\n                unsigned char *output )\n{\n    int ret;\n    unsigned char ectr[16];\n    size_t i;\n    const unsigned char *p;\n    unsigned char *out_p = output;\n    size_t use_len, olen = 0;\n\n    if( output > input && (size_t) ( output - input ) < length )\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n\n    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes\n     * Also check for possible overflow */\n    if( ctx->len + length < ctx->len ||\n        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )\n    {\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n    }\n\n    ctx->len += length;\n\n    p = input;\n    while( length > 0 )\n    {\n        use_len = ( length < 16 ) ? length : 16;\n\n        for( i = 16; i > 12; i-- )\n            if( ++ctx->y[i - 1] != 0 )\n                break;\n\n        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,\n                                   &olen ) ) != 0 )\n        {\n            return( ret );\n        }\n\n        for( i = 0; i < use_len; i++ )\n        {\n            if( ctx->mode == MBEDTLS_GCM_DECRYPT )\n                ctx->buf[i] ^= p[i];\n            out_p[i] = ectr[i] ^ p[i];\n            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )\n                ctx->buf[i] ^= out_p[i];\n        }\n\n        gcm_mult( ctx, ctx->buf, ctx->buf );\n\n        length -= use_len;\n        p += use_len;\n        out_p += use_len;\n    }\n\n    return( 0 );\n}\n\nint mbedtls_gcm_finish( mbedtls_gcm_context *ctx,\n                unsigned char *tag,\n                size_t tag_len )\n{\n    unsigned char work_buf[16];\n    size_t i;\n    uint64_t orig_len = ctx->len * 8;\n    uint64_t orig_add_len = ctx->add_len * 8;\n\n    if( tag_len > 16 || tag_len < 4 )\n        return( MBEDTLS_ERR_GCM_BAD_INPUT );\n\n    memcpy( tag, ctx->base_ectr, tag_len );\n\n    if( orig_len || orig_add_len )\n    {\n        memset( work_buf, 0x00, 16 );\n\n        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );\n        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );\n        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );\n        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );\n\n        for( i = 0; i < 16; i++ )\n            ctx->buf[i] ^= work_buf[i];\n\n        gcm_mult( ctx, ctx->buf, ctx->buf );\n\n        for( i = 0; i < tag_len; i++ )\n            tag[i] ^= ctx->buf[i];\n    }\n\n    return( 0 );\n}\n\nint mbedtls_gcm_crypt_and_tag( mbedtls_gcm_context *ctx,\n                       int mode,\n                       size_t length,\n                       const unsigned char *iv,\n                       size_t iv_len,\n                       const unsigned char *add,\n                       size_t add_len,\n                       const unsigned char *input,\n                       unsigned char *output,\n                       size_t tag_len,\n                       unsigned char *tag )\n{\n    int ret;\n\n    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\nint mbedtls_gcm_auth_decrypt( mbedtls_gcm_context *ctx,\n                      size_t length,\n                      const unsigned char *iv,\n                      size_t iv_len,\n                      const unsigned char *add,\n                      size_t add_len,\n                      const unsigned char *tag,\n                      size_t tag_len,\n                      const unsigned char *input,\n                      unsigned char *output )\n{\n    int ret;\n    unsigned char check_tag[16];\n    size_t i;\n    int diff;\n\n    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,\n                                   iv, iv_len, add, add_len,\n                                   input, output, tag_len, check_tag ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    /* Check tag in \"constant-time\" */\n    for( diff = 0, i = 0; i < tag_len; i++ )\n        diff |= tag[i] ^ check_tag[i];\n\n    if( diff != 0 )\n    {\n        mbedtls_zeroize( output, length );\n        return( MBEDTLS_ERR_GCM_AUTH_FAILED );\n    }\n\n    return( 0 );\n}\n\nvoid mbedtls_gcm_free( mbedtls_gcm_context *ctx )\n{\n    mbedtls_cipher_free( &ctx->cipher_ctx );\n    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );\n}\n\n#endif /* !MBEDTLS_GCM_ALT */\n\n#if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)\n/*\n * AES-GCM test vectors from:\n *\n * http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmtestvectors.zip\n */\n#define MAX_TESTS   6\n\nstatic const int key_index[MAX_TESTS] =\n    { 0, 0, 1, 1, 1, 1 };\n\nstatic const unsigned char key[MAX_TESTS][32] =\n{\n    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n    { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,\n      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,\n      0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,\n      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 },\n};\n\nstatic const size_t iv_len[MAX_TESTS] =\n    { 12, 12, 12, 12, 8, 60 };\n\nstatic const int iv_index[MAX_TESTS] =\n    { 0, 0, 1, 1, 1, 2 };\n\nstatic const unsigned char iv[MAX_TESTS][64] =\n{\n    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00 },\n    { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,\n      0xde, 0xca, 0xf8, 0x88 },\n    { 0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,\n      0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,\n      0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,\n      0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,\n      0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,\n      0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,\n      0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,\n      0xa6, 0x37, 0xb3, 0x9b },\n};\n\nstatic const size_t add_len[MAX_TESTS] =\n    { 0, 0, 0, 20, 20, 20 };\n\nstatic const int add_index[MAX_TESTS] =\n    { 0, 0, 0, 1, 1, 1 };\n\nstatic const unsigned char additional[MAX_TESTS][64] =\n{\n    { 0x00 },\n    { 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,\n      0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,\n      0xab, 0xad, 0xda, 0xd2 },\n};\n\nstatic const size_t pt_len[MAX_TESTS] =\n    { 0, 16, 64, 60, 60, 60 };\n\nstatic const int pt_index[MAX_TESTS] =\n    { 0, 0, 1, 1, 1, 1 };\n\nstatic const unsigned char pt[MAX_TESTS][64] =\n{\n    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n    { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,\n      0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,\n      0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,\n      0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,\n      0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,\n      0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,\n      0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,\n      0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 },\n};\n\nstatic const unsigned char ct[MAX_TESTS * 3][64] =\n{\n    { 0x00 },\n    { 0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,\n      0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78 },\n    { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,\n      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,\n      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,\n      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,\n      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,\n      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,\n      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,\n      0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85 },\n    { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,\n      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,\n      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,\n      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,\n      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,\n      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,\n      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,\n      0x3d, 0x58, 0xe0, 0x91 },\n    { 0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,\n      0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,\n      0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,\n      0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,\n      0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,\n      0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,\n      0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,\n      0xc2, 0x3f, 0x45, 0x98 },\n    { 0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,\n      0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,\n      0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,\n      0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,\n      0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,\n      0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,\n      0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,\n      0x4c, 0x34, 0xae, 0xe5 },\n    { 0x00 },\n    { 0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,\n      0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00 },\n    { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,\n      0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,\n      0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,\n      0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,\n      0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,\n      0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,\n      0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,\n      0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 },\n    { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,\n      0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,\n      0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,\n      0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,\n      0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,\n      0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,\n      0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,\n      0xcc, 0xda, 0x27, 0x10 },\n    { 0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,\n      0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,\n      0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,\n      0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,\n      0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,\n      0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,\n      0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,\n      0xa0, 0xf0, 0x62, 0xf7 },\n    { 0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,\n      0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,\n      0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,\n      0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,\n      0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,\n      0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,\n      0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,\n      0xe9, 0xb7, 0x37, 0x3b },\n    { 0x00 },\n    { 0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,\n      0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18 },\n    { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,\n      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,\n      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,\n      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,\n      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,\n      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,\n      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,\n      0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad },\n    { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,\n      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,\n      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,\n      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,\n      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,\n      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,\n      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,\n      0xbc, 0xc9, 0xf6, 0x62 },\n    { 0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,\n      0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,\n      0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,\n      0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,\n      0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,\n      0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,\n      0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,\n      0xf4, 0x7c, 0x9b, 0x1f },\n    { 0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,\n      0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,\n      0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,\n      0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,\n      0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,\n      0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,\n      0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,\n      0x44, 0xae, 0x7e, 0x3f },\n};\n\nstatic const unsigned char tag[MAX_TESTS * 3][16] =\n{\n    { 0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,\n      0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a },\n    { 0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,\n      0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf },\n    { 0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,\n      0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4 },\n    { 0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,\n      0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47 },\n    { 0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,\n      0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb },\n    { 0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,\n      0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50 },\n    { 0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,\n      0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35 },\n    { 0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,\n      0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb },\n    { 0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,\n      0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14 },\n    { 0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,\n      0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c },\n    { 0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,\n      0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8 },\n    { 0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,\n      0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9 },\n    { 0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,\n      0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b },\n    { 0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,\n      0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19 },\n    { 0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,\n      0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c },\n    { 0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,\n      0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b },\n    { 0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,\n      0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2 },\n    { 0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,\n      0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a },\n};\n\nint mbedtls_gcm_self_test( int verbose )\n{\n    mbedtls_gcm_context ctx;\n    unsigned char buf[64];\n    unsigned char tag_buf[16];\n    int i, j, ret;\n    mbedtls_cipher_id_t cipher = MBEDTLS_CIPHER_ID_AES;\n\n    for( j = 0; j < 3; j++ )\n    {\n        int key_len = 128 + 64 * j;\n\n        for( i = 0; i < MAX_TESTS; i++ )\n        {\n            mbedtls_gcm_init( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"  AES-GCM-%3d #%d (%s): \",\n                                key_len, i, \"enc\" );\n\n            ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],\n                                      key_len );\n            /*\n             * AES-192 is an optional feature that may be unavailable when\n             * there is an alternative underlying implementation i.e. when\n             * MBEDTLS_AES_ALT is defined.\n             */\n            if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && key_len == 192 )\n            {\n                mbedtls_printf( \"skipped\\n\" );\n                break;\n            }\n            else if( ret != 0 )\n            {\n                goto exit;\n            }\n\n            ret = mbedtls_gcm_crypt_and_tag( &ctx, MBEDTLS_GCM_ENCRYPT,\n                                        pt_len[i],\n                                        iv[iv_index[i]], iv_len[i],\n                                        additional[add_index[i]], add_len[i],\n                                        pt[pt_index[i]], buf, 16, tag_buf );\n            if( ret != 0 )\n                goto exit;\n\n            if ( memcmp( buf, ct[j * 6 + i], pt_len[i] ) != 0 ||\n                 memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )\n            {\n                ret = 1;\n                goto exit;\n            }\n\n            mbedtls_gcm_free( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"passed\\n\" );\n\n            mbedtls_gcm_init( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"  AES-GCM-%3d #%d (%s): \",\n                                key_len, i, \"dec\" );\n\n            ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],\n                                      key_len );\n            if( ret != 0 )\n                goto exit;\n\n            ret = mbedtls_gcm_crypt_and_tag( &ctx, MBEDTLS_GCM_DECRYPT,\n                                        pt_len[i],\n                                        iv[iv_index[i]], iv_len[i],\n                                        additional[add_index[i]], add_len[i],\n                                        ct[j * 6 + i], buf, 16, tag_buf );\n\n            if( ret != 0 )\n                goto exit;\n\n            if( memcmp( buf, pt[pt_index[i]], pt_len[i] ) != 0 ||\n                memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )\n            {\n                ret = 1;\n                goto exit;\n            }\n\n            mbedtls_gcm_free( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"passed\\n\" );\n\n            mbedtls_gcm_init( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"  AES-GCM-%3d #%d split (%s): \",\n                                key_len, i, \"enc\" );\n\n            ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],\n                                      key_len );\n            if( ret != 0 )\n                goto exit;\n\n            ret = mbedtls_gcm_starts( &ctx, MBEDTLS_GCM_ENCRYPT,\n                                      iv[iv_index[i]], iv_len[i],\n                                      additional[add_index[i]], add_len[i] );\n            if( ret != 0 )\n                goto exit;\n\n            if( pt_len[i] > 32 )\n            {\n                size_t rest_len = pt_len[i] - 32;\n                ret = mbedtls_gcm_update( &ctx, 32, pt[pt_index[i]], buf );\n                if( ret != 0 )\n                    goto exit;\n\n                ret = mbedtls_gcm_update( &ctx, rest_len, pt[pt_index[i]] + 32,\n                                  buf + 32 );\n                if( ret != 0 )\n                    goto exit;\n            }\n            else\n            {\n                ret = mbedtls_gcm_update( &ctx, pt_len[i], pt[pt_index[i]], buf );\n                if( ret != 0 )\n                    goto exit;\n            }\n\n            ret = mbedtls_gcm_finish( &ctx, tag_buf, 16 );\n            if( ret != 0 )\n                goto exit;\n\n            if( memcmp( buf, ct[j * 6 + i], pt_len[i] ) != 0 ||\n                memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )\n            {\n                ret = 1;\n                goto exit;\n            }\n\n            mbedtls_gcm_free( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"passed\\n\" );\n\n            mbedtls_gcm_init( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"  AES-GCM-%3d #%d split (%s): \",\n                                key_len, i, \"dec\" );\n\n            ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],\n                                      key_len );\n            if( ret != 0 )\n                goto exit;\n\n            ret = mbedtls_gcm_starts( &ctx, MBEDTLS_GCM_DECRYPT,\n                              iv[iv_index[i]], iv_len[i],\n                              additional[add_index[i]], add_len[i] );\n            if( ret != 0 )\n                goto exit;\n\n            if( pt_len[i] > 32 )\n            {\n                size_t rest_len = pt_len[i] - 32;\n                ret = mbedtls_gcm_update( &ctx, 32, ct[j * 6 + i], buf );\n                if( ret != 0 )\n                    goto exit;\n\n                ret = mbedtls_gcm_update( &ctx, rest_len, ct[j * 6 + i] + 32,\n                                          buf + 32 );\n                if( ret != 0 )\n                    goto exit;\n            }\n            else\n            {\n                ret = mbedtls_gcm_update( &ctx, pt_len[i], ct[j * 6 + i],\n                                          buf );\n                if( ret != 0 )\n                    goto exit;\n            }\n\n            ret = mbedtls_gcm_finish( &ctx, tag_buf, 16 );\n            if( ret != 0 )\n                goto exit;\n\n            if( memcmp( buf, pt[pt_index[i]], pt_len[i] ) != 0 ||\n                memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )\n            {\n                ret = 1;\n                goto exit;\n            }\n\n            mbedtls_gcm_free( &ctx );\n\n            if( verbose != 0 )\n                mbedtls_printf( \"passed\\n\" );\n        }\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    ret = 0;\n\nexit:\n    if( ret != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n        mbedtls_gcm_free( &ctx );\n    }\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */\n\n#endif /* MBEDTLS_GCM_C */\n","/*\n *  HMAC_DRBG implementation (NIST SP 800-90)\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n *  The NIST SP 800-90A DRBGs are described in the following publication.\n *  http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf\n *  References below are based on rev. 1 (January 2012).\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_HMAC_DRBG_C)\n\n#include \"mbedtls/hmac_drbg.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_FS_IO)\n#include <stdio.h>\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#endif /* MBEDTLS_SELF_TEST */\n#endif /* MBEDTLS_PLATFORM_C */\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n/*\n * HMAC_DRBG context initialization\n */\nvoid mbedtls_hmac_drbg_init( mbedtls_hmac_drbg_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_init( &ctx->mutex );\n#endif\n}\n\n/*\n * HMAC_DRBG update, using optional additional data (10.1.2.2)\n */\nvoid mbedtls_hmac_drbg_update( mbedtls_hmac_drbg_context *ctx,\n                       const unsigned char *additional, size_t add_len )\n{\n    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );\n    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;\n    unsigned char sep[1];\n    unsigned char K[MBEDTLS_MD_MAX_SIZE];\n\n    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )\n    {\n        /* Step 1 or 4 */\n        mbedtls_md_hmac_reset( &ctx->md_ctx );\n        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );\n        mbedtls_md_hmac_update( &ctx->md_ctx, sep, 1 );\n        if( rounds == 2 )\n            mbedtls_md_hmac_update( &ctx->md_ctx, additional, add_len );\n        mbedtls_md_hmac_finish( &ctx->md_ctx, K );\n\n        /* Step 2 or 5 */\n        mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len );\n        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );\n        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );\n    }\n}\n\n/*\n * Simplified HMAC_DRBG initialisation (for use with deterministic ECDSA)\n */\nint mbedtls_hmac_drbg_seed_buf( mbedtls_hmac_drbg_context *ctx,\n                        const mbedtls_md_info_t * md_info,\n                        const unsigned char *data, size_t data_len )\n{\n    int ret;\n\n    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )\n        return( ret );\n\n    /*\n     * Set initial working state.\n     * Use the V memory location, which is currently all 0, to initialize the\n     * MD context with an all-zero key. Then set V to its initial value.\n     */\n    mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, mbedtls_md_get_size( md_info ) );\n    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );\n\n    mbedtls_hmac_drbg_update( ctx, data, data_len );\n\n    return( 0 );\n}\n\n/*\n * HMAC_DRBG reseeding: 10.1.2.4 (arabic) + 9.2 (Roman)\n */\nint mbedtls_hmac_drbg_reseed( mbedtls_hmac_drbg_context *ctx,\n                      const unsigned char *additional, size_t len )\n{\n    unsigned char seed[MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT];\n    size_t seedlen;\n\n    /* III. Check input length */\n    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||\n        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )\n    {\n        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );\n    }\n\n    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );\n\n    /* IV. Gather entropy_len bytes of entropy for the seed */\n    if( ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) != 0 )\n        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );\n\n    seedlen = ctx->entropy_len;\n\n    /* 1. Concatenate entropy and additional data if any */\n    if( additional != NULL && len != 0 )\n    {\n        memcpy( seed + seedlen, additional, len );\n        seedlen += len;\n    }\n\n    /* 2. Update state */\n    mbedtls_hmac_drbg_update( ctx, seed, seedlen );\n\n    /* 3. Reset reseed_counter */\n    ctx->reseed_counter = 1;\n\n    /* 4. Done */\n    return( 0 );\n}\n\n/*\n * HMAC_DRBG initialisation (10.1.2.3 + 9.1)\n */\nint mbedtls_hmac_drbg_seed( mbedtls_hmac_drbg_context *ctx,\n                    const mbedtls_md_info_t * md_info,\n                    int (*f_entropy)(void *, unsigned char *, size_t),\n                    void *p_entropy,\n                    const unsigned char *custom,\n                    size_t len )\n{\n    int ret;\n    size_t entropy_len, md_size;\n\n    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )\n        return( ret );\n\n    md_size = mbedtls_md_get_size( md_info );\n\n    /*\n     * Set initial working state.\n     * Use the V memory location, which is currently all 0, to initialize the\n     * MD context with an all-zero key. Then set V to its initial value.\n     */\n    mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, md_size );\n    memset( ctx->V, 0x01, md_size );\n\n    ctx->f_entropy = f_entropy;\n    ctx->p_entropy = p_entropy;\n\n    ctx->reseed_interval = MBEDTLS_HMAC_DRBG_RESEED_INTERVAL;\n\n    /*\n     * See SP800-57 5.6.1 (p. 65-66) for the security strength provided by\n     * each hash function, then according to SP800-90A rev1 10.1 table 2,\n     * min_entropy_len (in bits) is security_strength.\n     *\n     * (This also matches the sizes used in the NIST test vectors.)\n     */\n    entropy_len = md_size <= 20 ? 16 : /* 160-bits hash -> 128 bits */\n                  md_size <= 28 ? 24 : /* 224-bits hash -> 192 bits */\n                                  32;  /* better (256+) -> 256 bits */\n\n    /*\n     * For initialisation, use more entropy to emulate a nonce\n     * (Again, matches test vectors.)\n     */\n    ctx->entropy_len = entropy_len * 3 / 2;\n\n    if( ( ret = mbedtls_hmac_drbg_reseed( ctx, custom, len ) ) != 0 )\n        return( ret );\n\n    ctx->entropy_len = entropy_len;\n\n    return( 0 );\n}\n\n/*\n * Set prediction resistance\n */\nvoid mbedtls_hmac_drbg_set_prediction_resistance( mbedtls_hmac_drbg_context *ctx,\n                                          int resistance )\n{\n    ctx->prediction_resistance = resistance;\n}\n\n/*\n * Set entropy length grabbed for reseeds\n */\nvoid mbedtls_hmac_drbg_set_entropy_len( mbedtls_hmac_drbg_context *ctx, size_t len )\n{\n    ctx->entropy_len = len;\n}\n\n/*\n * Set reseed interval\n */\nvoid mbedtls_hmac_drbg_set_reseed_interval( mbedtls_hmac_drbg_context *ctx, int interval )\n{\n    ctx->reseed_interval = interval;\n}\n\n/*\n * HMAC_DRBG random function with optional additional data:\n * 10.1.2.5 (arabic) + 9.3 (Roman)\n */\nint mbedtls_hmac_drbg_random_with_add( void *p_rng,\n                               unsigned char *output, size_t out_len,\n                               const unsigned char *additional, size_t add_len )\n{\n    int ret;\n    mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;\n    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );\n    size_t left = out_len;\n    unsigned char *out = output;\n\n    /* II. Check request length */\n    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )\n        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );\n\n    /* III. Check input length */\n    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )\n        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );\n\n    /* 1. (aka VII and IX) Check reseed counter and PR */\n    if( ctx->f_entropy != NULL && /* For no-reseeding instances */\n        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||\n          ctx->reseed_counter > ctx->reseed_interval ) )\n    {\n        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )\n            return( ret );\n\n        add_len = 0; /* VII.4 */\n    }\n\n    /* 2. Use additional data if any */\n    if( additional != NULL && add_len != 0 )\n        mbedtls_hmac_drbg_update( ctx, additional, add_len );\n\n    /* 3, 4, 5. Generate bytes */\n    while( left != 0 )\n    {\n        size_t use_len = left > md_len ? md_len : left;\n\n        mbedtls_md_hmac_reset( &ctx->md_ctx );\n        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );\n        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );\n\n        memcpy( out, ctx->V, use_len );\n        out += use_len;\n        left -= use_len;\n    }\n\n    /* 6. Update */\n    mbedtls_hmac_drbg_update( ctx, additional, add_len );\n\n    /* 7. Update reseed counter */\n    ctx->reseed_counter++;\n\n    /* 8. Done */\n    return( 0 );\n}\n\n/*\n * HMAC_DRBG random function\n */\nint mbedtls_hmac_drbg_random( void *p_rng, unsigned char *output, size_t out_len )\n{\n    int ret;\n    mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n/*\n * Free an HMAC_DRBG context\n */\nvoid mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_free( &ctx->mutex );\n#endif\n    mbedtls_md_free( &ctx->md_ctx );\n    mbedtls_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );\n}\n\n#if defined(MBEDTLS_FS_IO)\nint mbedtls_hmac_drbg_write_seed_file( mbedtls_hmac_drbg_context *ctx, const char *path )\n{\n    int ret;\n    FILE *f;\n    unsigned char buf[ MBEDTLS_HMAC_DRBG_MAX_INPUT ];\n\n    if( ( f = fopen( path, \"wb\" ) ) == NULL )\n        return( MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR );\n\n    if( ( ret = mbedtls_hmac_drbg_random( ctx, buf, sizeof( buf ) ) ) != 0 )\n        goto exit;\n\n    if( fwrite( buf, 1, sizeof( buf ), f ) != sizeof( buf ) )\n    {\n        ret = MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR;\n        goto exit;\n    }\n\n    ret = 0;\n\nexit:\n    fclose( f );\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n    return( ret );\n}\n\nint mbedtls_hmac_drbg_update_seed_file( mbedtls_hmac_drbg_context *ctx, const char *path )\n{\n    int ret = 0;\n    FILE *f;\n    size_t n;\n    unsigned char buf[ MBEDTLS_HMAC_DRBG_MAX_INPUT ];\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR );\n\n    fseek( f, 0, SEEK_END );\n    n = (size_t) ftell( f );\n    fseek( f, 0, SEEK_SET );\n\n    if( n > MBEDTLS_HMAC_DRBG_MAX_INPUT )\n    {\n        fclose( f );\n        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );\n    }\n\n    if( fread( buf, 1, n, f ) != n )\n        ret = MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR;\n    else\n        mbedtls_hmac_drbg_update( ctx, buf, n );\n\n    fclose( f );\n\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_hmac_drbg_write_seed_file( ctx, path ) );\n}\n#endif /* MBEDTLS_FS_IO */\n\n\n#if defined(MBEDTLS_SELF_TEST)\n\n#if !defined(MBEDTLS_SHA1_C)\n/* Dummy checkup routine */\nint mbedtls_hmac_drbg_self_test( int verbose )\n{\n    (void) verbose;\n    return( 0 );\n}\n#else\n\n#define OUTPUT_LEN  80\n\n/* From a NIST PR=true test vector */\nstatic const unsigned char entropy_pr[] = {\n    0xa0, 0xc9, 0xab, 0x58, 0xf1, 0xe2, 0xe5, 0xa4, 0xde, 0x3e, 0xbd, 0x4f,\n    0xf7, 0x3e, 0x9c, 0x5b, 0x64, 0xef, 0xd8, 0xca, 0x02, 0x8c, 0xf8, 0x11,\n    0x48, 0xa5, 0x84, 0xfe, 0x69, 0xab, 0x5a, 0xee, 0x42, 0xaa, 0x4d, 0x42,\n    0x17, 0x60, 0x99, 0xd4, 0x5e, 0x13, 0x97, 0xdc, 0x40, 0x4d, 0x86, 0xa3,\n    0x7b, 0xf5, 0x59, 0x54, 0x75, 0x69, 0x51, 0xe4 };\nstatic const unsigned char result_pr[OUTPUT_LEN] = {\n    0x9a, 0x00, 0xa2, 0xd0, 0x0e, 0xd5, 0x9b, 0xfe, 0x31, 0xec, 0xb1, 0x39,\n    0x9b, 0x60, 0x81, 0x48, 0xd1, 0x96, 0x9d, 0x25, 0x0d, 0x3c, 0x1e, 0x94,\n    0x10, 0x10, 0x98, 0x12, 0x93, 0x25, 0xca, 0xb8, 0xfc, 0xcc, 0x2d, 0x54,\n    0x73, 0x19, 0x70, 0xc0, 0x10, 0x7a, 0xa4, 0x89, 0x25, 0x19, 0x95, 0x5e,\n    0x4b, 0xc6, 0x00, 0x1d, 0x7f, 0x4e, 0x6a, 0x2b, 0xf8, 0xa3, 0x01, 0xab,\n    0x46, 0x05, 0x5c, 0x09, 0xa6, 0x71, 0x88, 0xf1, 0xa7, 0x40, 0xee, 0xf3,\n    0xe1, 0x5c, 0x02, 0x9b, 0x44, 0xaf, 0x03, 0x44 };\n\n/* From a NIST PR=false test vector */\nstatic const unsigned char entropy_nopr[] = {\n    0x79, 0x34, 0x9b, 0xbf, 0x7c, 0xdd, 0xa5, 0x79, 0x95, 0x57, 0x86, 0x66,\n    0x21, 0xc9, 0x13, 0x83, 0x11, 0x46, 0x73, 0x3a, 0xbf, 0x8c, 0x35, 0xc8,\n    0xc7, 0x21, 0x5b, 0x5b, 0x96, 0xc4, 0x8e, 0x9b, 0x33, 0x8c, 0x74, 0xe3,\n    0xe9, 0x9d, 0xfe, 0xdf };\nstatic const unsigned char result_nopr[OUTPUT_LEN] = {\n    0xc6, 0xa1, 0x6a, 0xb8, 0xd4, 0x20, 0x70, 0x6f, 0x0f, 0x34, 0xab, 0x7f,\n    0xec, 0x5a, 0xdc, 0xa9, 0xd8, 0xca, 0x3a, 0x13, 0x3e, 0x15, 0x9c, 0xa6,\n    0xac, 0x43, 0xc6, 0xf8, 0xa2, 0xbe, 0x22, 0x83, 0x4a, 0x4c, 0x0a, 0x0a,\n    0xff, 0xb1, 0x0d, 0x71, 0x94, 0xf1, 0xc1, 0xa5, 0xcf, 0x73, 0x22, 0xec,\n    0x1a, 0xe0, 0x96, 0x4e, 0xd4, 0xbf, 0x12, 0x27, 0x46, 0xe0, 0x87, 0xfd,\n    0xb5, 0xb3, 0xe9, 0x1b, 0x34, 0x93, 0xd5, 0xbb, 0x98, 0xfa, 0xed, 0x49,\n    0xe8, 0x5f, 0x13, 0x0f, 0xc8, 0xa4, 0x59, 0xb7 };\n\n/* \"Entropy\" from buffer */\nstatic size_t test_offset;\nstatic int hmac_drbg_self_test_entropy( void *data,\n                                        unsigned char *buf, size_t len )\n{\n    const unsigned char *p = data;\n    memcpy( buf, p + test_offset, len );\n    test_offset += len;\n    return( 0 );\n}\n\n#define CHK( c )    if( (c) != 0 )                          \\\n                    {                                       \\\n                        if( verbose != 0 )                  \\\n                            mbedtls_printf( \"failed\\n\" );  \\\n                        return( 1 );                        \\\n                    }\n\n/*\n * Checkup routine for HMAC_DRBG with SHA-1\n */\nint mbedtls_hmac_drbg_self_test( int verbose )\n{\n    mbedtls_hmac_drbg_context ctx;\n    unsigned char buf[OUTPUT_LEN];\n    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );\n\n    mbedtls_hmac_drbg_init( &ctx );\n\n    /*\n     * PR = True\n     */\n    if( verbose != 0 )\n        mbedtls_printf( \"  HMAC_DRBG (PR = True) : \" );\n\n    test_offset = 0;\n    CHK( mbedtls_hmac_drbg_seed( &ctx, md_info,\n                         hmac_drbg_self_test_entropy, (void *) entropy_pr,\n                         NULL, 0 ) );\n    mbedtls_hmac_drbg_set_prediction_resistance( &ctx, MBEDTLS_HMAC_DRBG_PR_ON );\n    CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );\n    CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );\n    CHK( memcmp( buf, result_pr, OUTPUT_LEN ) );\n    mbedtls_hmac_drbg_free( &ctx );\n\n    mbedtls_hmac_drbg_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    /*\n     * PR = False\n     */\n    if( verbose != 0 )\n        mbedtls_printf( \"  HMAC_DRBG (PR = False) : \" );\n\n    mbedtls_hmac_drbg_init( &ctx );\n\n    test_offset = 0;\n    CHK( mbedtls_hmac_drbg_seed( &ctx, md_info,\n                         hmac_drbg_self_test_entropy, (void *) entropy_nopr,\n                         NULL, 0 ) );\n    CHK( mbedtls_hmac_drbg_reseed( &ctx, NULL, 0 ) );\n    CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );\n    CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );\n    CHK( memcmp( buf, result_nopr, OUTPUT_LEN ) );\n    mbedtls_hmac_drbg_free( &ctx );\n\n    mbedtls_hmac_drbg_free( &ctx );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_HMAC_DRBG_C */\n","/**\n * \\file mbedtls_md.c\n *\n * \\brief Generic message digest wrapper for mbed TLS\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_MD_C)\n\n#include \"mbedtls/md.h\"\n#include \"mbedtls/md_internal.h\"\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#include <string.h>\n\n#if defined(MBEDTLS_FS_IO)\n#include <stdio.h>\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n/*\n * Reminder: update profiles in x509_crt.c when adding a new hash!\n */\nstatic const int supported_digests[] = {\n\n#if defined(MBEDTLS_SHA512_C)\n        MBEDTLS_MD_SHA512,\n        MBEDTLS_MD_SHA384,\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n        MBEDTLS_MD_SHA256,\n        MBEDTLS_MD_SHA224,\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n        MBEDTLS_MD_SHA1,\n#endif\n\n#if defined(MBEDTLS_RIPEMD160_C)\n        MBEDTLS_MD_RIPEMD160,\n#endif\n\n#if defined(MBEDTLS_MD5_C)\n        MBEDTLS_MD_MD5,\n#endif\n\n#if defined(MBEDTLS_MD4_C)\n        MBEDTLS_MD_MD4,\n#endif\n\n#if defined(MBEDTLS_MD2_C)\n        MBEDTLS_MD_MD2,\n#endif\n\n        MBEDTLS_MD_NONE\n};\n\nconst int *mbedtls_md_list( void )\n{\n    return( supported_digests );\n}\n\nconst mbedtls_md_info_t *mbedtls_md_info_from_string( const char *md_name )\n{\n    if( NULL == md_name )\n        return( NULL );\n\n    /* Get the appropriate digest information */\n#if defined(MBEDTLS_MD2_C)\n    if( !strcmp( \"MD2\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_MD2 );\n#endif\n#if defined(MBEDTLS_MD4_C)\n    if( !strcmp( \"MD4\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_MD4 );\n#endif\n#if defined(MBEDTLS_MD5_C)\n    if( !strcmp( \"MD5\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_MD5 );\n#endif\n#if defined(MBEDTLS_RIPEMD160_C)\n    if( !strcmp( \"RIPEMD160\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_RIPEMD160 );\n#endif\n#if defined(MBEDTLS_SHA1_C)\n    if( !strcmp( \"SHA1\", md_name ) || !strcmp( \"SHA\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );\n#endif\n#if defined(MBEDTLS_SHA256_C)\n    if( !strcmp( \"SHA224\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA224 );\n    if( !strcmp( \"SHA256\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA256 );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n    if( !strcmp( \"SHA384\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA384 );\n    if( !strcmp( \"SHA512\", md_name ) )\n        return mbedtls_md_info_from_type( MBEDTLS_MD_SHA512 );\n#endif\n    return( NULL );\n}\n\nconst mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )\n{\n    switch( md_type )\n    {\n#if defined(MBEDTLS_MD2_C)\n        case MBEDTLS_MD_MD2:\n            return( &mbedtls_md2_info );\n#endif\n#if defined(MBEDTLS_MD4_C)\n        case MBEDTLS_MD_MD4:\n            return( &mbedtls_md4_info );\n#endif\n#if defined(MBEDTLS_MD5_C)\n        case MBEDTLS_MD_MD5:\n            return( &mbedtls_md5_info );\n#endif\n#if defined(MBEDTLS_RIPEMD160_C)\n        case MBEDTLS_MD_RIPEMD160:\n            return( &mbedtls_ripemd160_info );\n#endif\n#if defined(MBEDTLS_SHA1_C)\n        case MBEDTLS_MD_SHA1:\n            return( &mbedtls_sha1_info );\n#endif\n#if defined(MBEDTLS_SHA256_C)\n        case MBEDTLS_MD_SHA224:\n            return( &mbedtls_sha224_info );\n        case MBEDTLS_MD_SHA256:\n            return( &mbedtls_sha256_info );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n        case MBEDTLS_MD_SHA384:\n            return( &mbedtls_sha384_info );\n        case MBEDTLS_MD_SHA512:\n            return( &mbedtls_sha512_info );\n#endif\n        default:\n            return( NULL );\n    }\n}\n\nvoid mbedtls_md_init( mbedtls_md_context_t *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );\n}\n\nvoid mbedtls_md_free( mbedtls_md_context_t *ctx )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return;\n\n    if( ctx->md_ctx != NULL )\n        ctx->md_info->ctx_free_func( ctx->md_ctx );\n\n    if( ctx->hmac_ctx != NULL )\n    {\n        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );\n        mbedtls_free( ctx->hmac_ctx );\n    }\n\n    mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );\n}\n\nint mbedtls_md_clone( mbedtls_md_context_t *dst,\n                      const mbedtls_md_context_t *src )\n{\n    if( dst == NULL || dst->md_info == NULL ||\n        src == NULL || src->md_info == NULL ||\n        dst->md_info != src->md_info )\n    {\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n    }\n\n    dst->md_info->clone_func( dst->md_ctx, src->md_ctx );\n\n    return( 0 );\n}\n\n#if ! defined(MBEDTLS_DEPRECATED_REMOVED)\nint mbedtls_md_init_ctx( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info )\n{\n    return mbedtls_md_setup( ctx, md_info, 1 );\n}\n#endif\n\nint mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )\n{\n    if( md_info == NULL || ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )\n        return( MBEDTLS_ERR_MD_ALLOC_FAILED );\n\n    if( hmac != 0 )\n    {\n        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );\n        if( ctx->hmac_ctx == NULL )\n        {\n            md_info->ctx_free_func( ctx->md_ctx );\n            return( MBEDTLS_ERR_MD_ALLOC_FAILED );\n        }\n    }\n\n    ctx->md_info = md_info;\n\n    return( 0 );\n}\n\nint mbedtls_md_starts( mbedtls_md_context_t *ctx )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->starts_func( ctx->md_ctx ) );\n}\n\nint mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );\n}\n\nint mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );\n}\n\nint mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,\n            unsigned char *output )\n{\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( md_info->digest_func( input, ilen, output ) );\n}\n\n#if defined(MBEDTLS_FS_IO)\nint mbedtls_md_file( const mbedtls_md_info_t *md_info, const char *path, unsigned char *output )\n{\n    int ret;\n    FILE *f;\n    size_t n;\n    mbedtls_md_context_t ctx;\n    unsigned char buf[1024];\n\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_MD_FILE_IO_ERROR );\n\n    mbedtls_md_init( &ctx );\n\n    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )\n        goto cleanup;\n\n    if( ( ret = md_info->starts_func( ctx.md_ctx ) ) != 0 )\n        goto cleanup;\n\n    while( ( n = fread( buf, 1, sizeof( buf ), f ) ) > 0 )\n        if( ( ret = md_info->update_func( ctx.md_ctx, buf, n ) ) != 0 )\n            goto cleanup;\n\n    if( ferror( f ) != 0 )\n        ret = MBEDTLS_ERR_MD_FILE_IO_ERROR;\n    else\n        ret = md_info->finish_func( ctx.md_ctx, output );\n\ncleanup:\n    mbedtls_zeroize( buf, sizeof( buf ) );\n    fclose( f );\n    mbedtls_md_free( &ctx );\n\n    return( ret );\n}\n#endif /* MBEDTLS_FS_IO */\n\nint mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )\n{\n    int ret;\n    unsigned char sum[MBEDTLS_MD_MAX_SIZE];\n    unsigned char *ipad, *opad;\n    size_t i;\n\n    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    if( keylen > (size_t) ctx->md_info->block_size )\n    {\n        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )\n            goto cleanup;\n        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )\n            goto cleanup;\n        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )\n            goto cleanup;\n\n        keylen = ctx->md_info->size;\n        key = sum;\n    }\n\n    ipad = (unsigned char *) ctx->hmac_ctx;\n    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;\n\n    memset( ipad, 0x36, ctx->md_info->block_size );\n    memset( opad, 0x5C, ctx->md_info->block_size );\n\n    for( i = 0; i < keylen; i++ )\n    {\n        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );\n        opad[i] = (unsigned char)( opad[i] ^ key[i] );\n    }\n\n    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )\n        goto cleanup;\n    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,\n                                           ctx->md_info->block_size ) ) != 0 )\n        goto cleanup;\n\ncleanup:\n    mbedtls_zeroize( sum, sizeof( sum ) );\n\n    return( ret );\n}\n\nint mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )\n{\n    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );\n}\n\nint mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )\n{\n    int ret;\n    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];\n    unsigned char *opad;\n\n    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;\n\n    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )\n        return( ret );\n    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )\n        return( ret );\n    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,\n                                           ctx->md_info->block_size ) ) != 0 )\n        return( ret );\n    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,\n                                           ctx->md_info->size ) ) != 0 )\n        return( ret );\n    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );\n}\n\nint mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )\n{\n    int ret;\n    unsigned char *ipad;\n\n    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    ipad = (unsigned char *) ctx->hmac_ctx;\n\n    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )\n        return( ret );\n    return( ctx->md_info->update_func( ctx->md_ctx, ipad,\n                                       ctx->md_info->block_size ) );\n}\n\nint mbedtls_md_hmac( const mbedtls_md_info_t *md_info,\n                     const unsigned char *key, size_t keylen,\n                     const unsigned char *input, size_t ilen,\n                     unsigned char *output )\n{\n    mbedtls_md_context_t ctx;\n    int ret;\n\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    mbedtls_md_init( &ctx );\n\n    if( ( ret = mbedtls_md_setup( &ctx, md_info, 1 ) ) != 0 )\n        goto cleanup;\n\n    if( ( ret = mbedtls_md_hmac_starts( &ctx, key, keylen ) ) != 0 )\n        goto cleanup;\n    if( ( ret = mbedtls_md_hmac_update( &ctx, input, ilen ) ) != 0 )\n        goto cleanup;\n    if( ( ret = mbedtls_md_hmac_finish( &ctx, output ) ) != 0 )\n        goto cleanup;\n\ncleanup:\n    mbedtls_md_free( &ctx );\n\n    return( ret );\n}\n\nint mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )\n{\n    if( ctx == NULL || ctx->md_info == NULL )\n        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );\n\n    return( ctx->md_info->process_func( ctx->md_ctx, data ) );\n}\n\nunsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )\n{\n    if( md_info == NULL )\n        return( 0 );\n\n    return md_info->size;\n}\n\nmbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info )\n{\n    if( md_info == NULL )\n        return( MBEDTLS_MD_NONE );\n\n    return md_info->type;\n}\n\nconst char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )\n{\n    if( md_info == NULL )\n        return( NULL );\n\n    return md_info->name;\n}\n\n#endif /* MBEDTLS_MD_C */\n","/**\n * \\file md_wrap.c\n *\n * \\brief Generic message digest wrapper for mbed TLS\n *\n * \\author Adriaan de Jong <dejong@fox-it.com>\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_MD_C)\n\n#include \"mbedtls/md_internal.h\"\n\n#if defined(MBEDTLS_MD2_C)\n#include \"mbedtls/md2.h\"\n#endif\n\n#if defined(MBEDTLS_MD4_C)\n#include \"mbedtls/md4.h\"\n#endif\n\n#if defined(MBEDTLS_MD5_C)\n#include \"mbedtls/md5.h\"\n#endif\n\n#if defined(MBEDTLS_RIPEMD160_C)\n#include \"mbedtls/ripemd160.h\"\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n#include \"mbedtls/sha1.h\"\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n#include \"mbedtls/sha256.h\"\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n#include \"mbedtls/sha512.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#if defined(MBEDTLS_MD2_C)\n\nstatic int md2_starts_wrap( void *ctx )\n{\n    return( mbedtls_md2_starts_ret( (mbedtls_md2_context *) ctx ) );\n}\n\nstatic int md2_update_wrap( void *ctx, const unsigned char *input,\n                             size_t ilen )\n{\n    return( mbedtls_md2_update_ret( (mbedtls_md2_context *) ctx, input, ilen ) );\n}\n\nstatic int md2_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_md2_finish_ret( (mbedtls_md2_context *) ctx, output ) );\n}\n\nstatic void *md2_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md2_context ) );\n\n    if( ctx != NULL )\n        mbedtls_md2_init( (mbedtls_md2_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void md2_ctx_free( void *ctx )\n{\n    mbedtls_md2_free( (mbedtls_md2_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void md2_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_md2_clone( (mbedtls_md2_context *) dst,\n                 (const mbedtls_md2_context *) src );\n}\n\nstatic int md2_process_wrap( void *ctx, const unsigned char *data )\n{\n    ((void) data);\n\n    return( mbedtls_internal_md2_process( (mbedtls_md2_context *) ctx ) );\n}\n\nconst mbedtls_md_info_t mbedtls_md2_info = {\n    MBEDTLS_MD_MD2,\n    \"MD2\",\n    16,\n    16,\n    md2_starts_wrap,\n    md2_update_wrap,\n    md2_finish_wrap,\n    mbedtls_md2_ret,\n    md2_ctx_alloc,\n    md2_ctx_free,\n    md2_clone_wrap,\n    md2_process_wrap,\n};\n\n#endif /* MBEDTLS_MD2_C */\n\n#if defined(MBEDTLS_MD4_C)\n\nstatic int md4_starts_wrap( void *ctx )\n{\n    return( mbedtls_md4_starts_ret( (mbedtls_md4_context *) ctx ) );\n}\n\nstatic int md4_update_wrap( void *ctx, const unsigned char *input,\n                             size_t ilen )\n{\n    return( mbedtls_md4_update_ret( (mbedtls_md4_context *) ctx, input, ilen ) );\n}\n\nstatic int md4_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_md4_finish_ret( (mbedtls_md4_context *) ctx, output ) );\n}\n\nstatic void *md4_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md4_context ) );\n\n    if( ctx != NULL )\n        mbedtls_md4_init( (mbedtls_md4_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void md4_ctx_free( void *ctx )\n{\n    mbedtls_md4_free( (mbedtls_md4_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void md4_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_md4_clone( (mbedtls_md4_context *) dst,\n                       (const mbedtls_md4_context *) src );\n}\n\nstatic int md4_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_md4_process( (mbedtls_md4_context *) ctx, data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_md4_info = {\n    MBEDTLS_MD_MD4,\n    \"MD4\",\n    16,\n    64,\n    md4_starts_wrap,\n    md4_update_wrap,\n    md4_finish_wrap,\n    mbedtls_md4_ret,\n    md4_ctx_alloc,\n    md4_ctx_free,\n    md4_clone_wrap,\n    md4_process_wrap,\n};\n\n#endif /* MBEDTLS_MD4_C */\n\n#if defined(MBEDTLS_MD5_C)\n\nstatic int md5_starts_wrap( void *ctx )\n{\n    return( mbedtls_md5_starts_ret( (mbedtls_md5_context *) ctx ) );\n}\n\nstatic int md5_update_wrap( void *ctx, const unsigned char *input,\n                             size_t ilen )\n{\n    return( mbedtls_md5_update_ret( (mbedtls_md5_context *) ctx, input, ilen ) );\n}\n\nstatic int md5_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_md5_finish_ret( (mbedtls_md5_context *) ctx, output ) );\n}\n\nstatic void *md5_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );\n\n    if( ctx != NULL )\n        mbedtls_md5_init( (mbedtls_md5_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void md5_ctx_free( void *ctx )\n{\n    mbedtls_md5_free( (mbedtls_md5_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void md5_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_md5_clone( (mbedtls_md5_context *) dst,\n                       (const mbedtls_md5_context *) src );\n}\n\nstatic int md5_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_md5_process( (mbedtls_md5_context *) ctx, data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_md5_info = {\n    MBEDTLS_MD_MD5,\n    \"MD5\",\n    16,\n    64,\n    md5_starts_wrap,\n    md5_update_wrap,\n    md5_finish_wrap,\n    mbedtls_md5_ret,\n    md5_ctx_alloc,\n    md5_ctx_free,\n    md5_clone_wrap,\n    md5_process_wrap,\n};\n\n#endif /* MBEDTLS_MD5_C */\n\n#if defined(MBEDTLS_RIPEMD160_C)\n\nstatic int ripemd160_starts_wrap( void *ctx )\n{\n    return( mbedtls_ripemd160_starts_ret( (mbedtls_ripemd160_context *) ctx ) );\n}\n\nstatic int ripemd160_update_wrap( void *ctx, const unsigned char *input,\n                                   size_t ilen )\n{\n    return( mbedtls_ripemd160_update_ret( (mbedtls_ripemd160_context *) ctx,\n                                          input, ilen ) );\n}\n\nstatic int ripemd160_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_ripemd160_finish_ret( (mbedtls_ripemd160_context *) ctx,\n                                          output ) );\n}\n\nstatic void *ripemd160_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ripemd160_context ) );\n\n    if( ctx != NULL )\n        mbedtls_ripemd160_init( (mbedtls_ripemd160_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void ripemd160_ctx_free( void *ctx )\n{\n    mbedtls_ripemd160_free( (mbedtls_ripemd160_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void ripemd160_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_ripemd160_clone( (mbedtls_ripemd160_context *) dst,\n                       (const mbedtls_ripemd160_context *) src );\n}\n\nstatic int ripemd160_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_ripemd160_process(\n                                (mbedtls_ripemd160_context *) ctx, data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_ripemd160_info = {\n    MBEDTLS_MD_RIPEMD160,\n    \"RIPEMD160\",\n    20,\n    64,\n    ripemd160_starts_wrap,\n    ripemd160_update_wrap,\n    ripemd160_finish_wrap,\n    mbedtls_ripemd160_ret,\n    ripemd160_ctx_alloc,\n    ripemd160_ctx_free,\n    ripemd160_clone_wrap,\n    ripemd160_process_wrap,\n};\n\n#endif /* MBEDTLS_RIPEMD160_C */\n\n#if defined(MBEDTLS_SHA1_C)\n\nstatic int sha1_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );\n}\n\nstatic int sha1_update_wrap( void *ctx, const unsigned char *input,\n                              size_t ilen )\n{\n    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,\n                                     input, ilen ) );\n}\n\nstatic int sha1_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );\n}\n\nstatic void *sha1_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );\n\n    if( ctx != NULL )\n        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void sha1_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,\n                  (const mbedtls_sha1_context *) src );\n}\n\nstatic void sha1_ctx_free( void *ctx )\n{\n    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic int sha1_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,\n                                           data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha1_info = {\n    MBEDTLS_MD_SHA1,\n    \"SHA1\",\n    20,\n    64,\n    sha1_starts_wrap,\n    sha1_update_wrap,\n    sha1_finish_wrap,\n    mbedtls_sha1_ret,\n    sha1_ctx_alloc,\n    sha1_ctx_free,\n    sha1_clone_wrap,\n    sha1_process_wrap,\n};\n\n#endif /* MBEDTLS_SHA1_C */\n\n/*\n * Wrappers for generic message digests\n */\n#if defined(MBEDTLS_SHA256_C)\n\nstatic int sha224_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );\n}\n\nstatic int sha224_update_wrap( void *ctx, const unsigned char *input,\n                                size_t ilen )\n{\n    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,\n                                       input, ilen ) );\n}\n\nstatic int sha224_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,\n                                       output ) );\n}\n\nstatic int sha224_wrap( const unsigned char *input, size_t ilen,\n                        unsigned char *output )\n{\n    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );\n}\n\nstatic void *sha224_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );\n\n    if( ctx != NULL )\n        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void sha224_ctx_free( void *ctx )\n{\n    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void sha224_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,\n                    (const mbedtls_sha256_context *) src );\n}\n\nstatic int sha224_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,\n                                             data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha224_info = {\n    MBEDTLS_MD_SHA224,\n    \"SHA224\",\n    28,\n    64,\n    sha224_starts_wrap,\n    sha224_update_wrap,\n    sha224_finish_wrap,\n    sha224_wrap,\n    sha224_ctx_alloc,\n    sha224_ctx_free,\n    sha224_clone_wrap,\n    sha224_process_wrap,\n};\n\nstatic int sha256_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );\n}\n\nstatic int sha256_wrap( const unsigned char *input, size_t ilen,\n                        unsigned char *output )\n{\n    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha256_info = {\n    MBEDTLS_MD_SHA256,\n    \"SHA256\",\n    32,\n    64,\n    sha256_starts_wrap,\n    sha224_update_wrap,\n    sha224_finish_wrap,\n    sha256_wrap,\n    sha224_ctx_alloc,\n    sha224_ctx_free,\n    sha224_clone_wrap,\n    sha224_process_wrap,\n};\n\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n\nstatic int sha384_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );\n}\n\nstatic int sha384_update_wrap( void *ctx, const unsigned char *input,\n                               size_t ilen )\n{\n    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,\n                                       input, ilen ) );\n}\n\nstatic int sha384_finish_wrap( void *ctx, unsigned char *output )\n{\n    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,\n                                       output ) );\n}\n\nstatic int sha384_wrap( const unsigned char *input, size_t ilen,\n                        unsigned char *output )\n{\n    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );\n}\n\nstatic void *sha384_ctx_alloc( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );\n\n    if( ctx != NULL )\n        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void sha384_ctx_free( void *ctx )\n{\n    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void sha384_clone_wrap( void *dst, const void *src )\n{\n    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,\n                    (const mbedtls_sha512_context *) src );\n}\n\nstatic int sha384_process_wrap( void *ctx, const unsigned char *data )\n{\n    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,\n                                             data ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha384_info = {\n    MBEDTLS_MD_SHA384,\n    \"SHA384\",\n    48,\n    128,\n    sha384_starts_wrap,\n    sha384_update_wrap,\n    sha384_finish_wrap,\n    sha384_wrap,\n    sha384_ctx_alloc,\n    sha384_ctx_free,\n    sha384_clone_wrap,\n    sha384_process_wrap,\n};\n\nstatic int sha512_starts_wrap( void *ctx )\n{\n    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );\n}\n\nstatic int sha512_wrap( const unsigned char *input, size_t ilen,\n                        unsigned char *output )\n{\n    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );\n}\n\nconst mbedtls_md_info_t mbedtls_sha512_info = {\n    MBEDTLS_MD_SHA512,\n    \"SHA512\",\n    64,\n    128,\n    sha512_starts_wrap,\n    sha384_update_wrap,\n    sha384_finish_wrap,\n    sha512_wrap,\n    sha384_ctx_alloc,\n    sha384_ctx_free,\n    sha384_clone_wrap,\n    sha384_process_wrap,\n};\n\n#endif /* MBEDTLS_SHA512_C */\n\n#endif /* MBEDTLS_MD_C */\n","/**\n * \\file oid.c\n *\n * \\brief Object Identifier (OID) database\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_OID_C)\n\n#include \"mbedtls/oid.h\"\n#include \"mbedtls/rsa.h\"\n\n#include <stdio.h>\n#include <string.h>\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#define mbedtls_snprintf snprintf\n#endif\n\n#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)\n#include \"mbedtls/x509.h\"\n#endif\n\n/*\n * Macro to automatically add the size of #define'd OIDs\n */\n#define ADD_LEN(s)      s, MBEDTLS_OID_SIZE(s)\n\n/*\n * Macro to generate an internal function for oid_XXX_from_asn1() (used by\n * the other functions)\n */\n#define FN_OID_TYPED_FROM_ASN1( TYPE_T, NAME, LIST )                        \\\nstatic const TYPE_T * oid_ ## NAME ## _from_asn1( const mbedtls_asn1_buf *oid )     \\\n{                                                                           \\\n    const TYPE_T *p = LIST;                                                 \\\n    const mbedtls_oid_descriptor_t *cur = (const mbedtls_oid_descriptor_t *) p;             \\\n    if( p == NULL || oid == NULL ) return( NULL );                          \\\n    while( cur->asn1 != NULL ) {                                            \\\n        if( cur->asn1_len == oid->len &&                                    \\\n            memcmp( cur->asn1, oid->p, oid->len ) == 0 ) {                  \\\n            return( p );                                                    \\\n        }                                                                   \\\n        p++;                                                                \\\n        cur = (const mbedtls_oid_descriptor_t *) p;                                 \\\n    }                                                                       \\\n    return( NULL );                                                         \\\n}\n\n/*\n * Macro to generate a function for retrieving a single attribute from the\n * descriptor of an mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_DESCRIPTOR_ATTR1(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1) \\\nint FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1 )                  \\\n{                                                                       \\\n    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );        \\\n    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );            \\\n    *ATTR1 = data->descriptor.ATTR1;                                    \\\n    return( 0 );                                                        \\\n}\n\n/*\n * Macro to generate a function for retrieving a single attribute from an\n * mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_ATTR1(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1) \\\nint FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1 )                  \\\n{                                                                       \\\n    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );        \\\n    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );            \\\n    *ATTR1 = data->ATTR1;                                               \\\n    return( 0 );                                                        \\\n}\n\n/*\n * Macro to generate a function for retrieving two attributes from an\n * mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_ATTR2(FN_NAME, TYPE_T, TYPE_NAME, ATTR1_TYPE, ATTR1,     \\\n                         ATTR2_TYPE, ATTR2)                                 \\\nint FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1, ATTR2_TYPE * ATTR2 )  \\\n{                                                                           \\\n    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );            \\\n    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );                \\\n    *ATTR1 = data->ATTR1;                                                   \\\n    *ATTR2 = data->ATTR2;                                                   \\\n    return( 0 );                                                            \\\n}\n\n/*\n * Macro to generate a function for retrieving the OID based on a single\n * attribute from a mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_OID_BY_ATTR1(FN_NAME, TYPE_T, LIST, ATTR1_TYPE, ATTR1)   \\\nint FN_NAME( ATTR1_TYPE ATTR1, const char **oid, size_t *olen )             \\\n{                                                                           \\\n    const TYPE_T *cur = LIST;                                               \\\n    while( cur->descriptor.asn1 != NULL ) {                                 \\\n        if( cur->ATTR1 == ATTR1 ) {                                         \\\n            *oid = cur->descriptor.asn1;                                    \\\n            *olen = cur->descriptor.asn1_len;                               \\\n            return( 0 );                                                    \\\n        }                                                                   \\\n        cur++;                                                              \\\n    }                                                                       \\\n    return( MBEDTLS_ERR_OID_NOT_FOUND );                                   \\\n}\n\n/*\n * Macro to generate a function for retrieving the OID based on two\n * attributes from a mbedtls_oid_descriptor_t wrapper.\n */\n#define FN_OID_GET_OID_BY_ATTR2(FN_NAME, TYPE_T, LIST, ATTR1_TYPE, ATTR1,   \\\n                                ATTR2_TYPE, ATTR2)                          \\\nint FN_NAME( ATTR1_TYPE ATTR1, ATTR2_TYPE ATTR2, const char **oid ,         \\\n             size_t *olen )                                                 \\\n{                                                                           \\\n    const TYPE_T *cur = LIST;                                               \\\n    while( cur->descriptor.asn1 != NULL ) {                                 \\\n        if( cur->ATTR1 == ATTR1 && cur->ATTR2 == ATTR2 ) {                  \\\n            *oid = cur->descriptor.asn1;                                    \\\n            *olen = cur->descriptor.asn1_len;                               \\\n            return( 0 );                                                    \\\n        }                                                                   \\\n        cur++;                                                              \\\n    }                                                                       \\\n    return( MBEDTLS_ERR_OID_NOT_FOUND );                                   \\\n}\n\n#if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)\n/*\n * For X520 attribute types\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    const char          *short_name;\n} oid_x520_attr_t;\n\nstatic const oid_x520_attr_t oid_x520_attr_type[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_CN ),          \"id-at-commonName\",               \"Common Name\" },\n        \"CN\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_COUNTRY ),     \"id-at-countryName\",              \"Country\" },\n        \"C\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_LOCALITY ),    \"id-at-locality\",                 \"Locality\" },\n        \"L\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_STATE ),       \"id-at-state\",                    \"State\" },\n        \"ST\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_ORGANIZATION ),\"id-at-organizationName\",         \"Organization\" },\n        \"O\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_ORG_UNIT ),    \"id-at-organizationalUnitName\",   \"Org Unit\" },\n        \"OU\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS9_EMAIL ),    \"emailAddress\",                   \"E-mail address\" },\n        \"emailAddress\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_SERIAL_NUMBER ),\"id-at-serialNumber\",            \"Serial number\" },\n        \"serialNumber\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_POSTAL_ADDRESS ),\"id-at-postalAddress\",          \"Postal address\" },\n        \"postalAddress\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_POSTAL_CODE ), \"id-at-postalCode\",               \"Postal code\" },\n        \"postalCode\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_SUR_NAME ),    \"id-at-surName\",                  \"Surname\" },\n        \"SN\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_GIVEN_NAME ),  \"id-at-givenName\",                \"Given name\" },\n        \"GN\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_INITIALS ),    \"id-at-initials\",                 \"Initials\" },\n        \"initials\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_GENERATION_QUALIFIER ), \"id-at-generationQualifier\", \"Generation qualifier\" },\n        \"generationQualifier\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_TITLE ),       \"id-at-title\",                    \"Title\" },\n        \"title\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_DN_QUALIFIER ),\"id-at-dnQualifier\",              \"Distinguished Name qualifier\" },\n        \"dnQualifier\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_PSEUDONYM ),   \"id-at-pseudonym\",                \"Pseudonym\" },\n        \"pseudonym\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_DOMAIN_COMPONENT ), \"id-domainComponent\",           \"Domain component\" },\n        \"DC\",\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_AT_UNIQUE_IDENTIFIER ), \"id-at-uniqueIdentifier\",    \"Unique Identifier\" },\n        \"uniqueIdentifier\",\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        NULL,\n    }\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)\nFN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)\n\n/*\n * For X509 extensions\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    int                 ext_type;\n} oid_x509_ext_t;\n\nstatic const oid_x509_ext_t oid_x509_ext[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_BASIC_CONSTRAINTS ),    \"id-ce-basicConstraints\",   \"Basic Constraints\" },\n        MBEDTLS_X509_EXT_BASIC_CONSTRAINTS,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_KEY_USAGE ),            \"id-ce-keyUsage\",           \"Key Usage\" },\n        MBEDTLS_X509_EXT_KEY_USAGE,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_EXTENDED_KEY_USAGE ),   \"id-ce-extKeyUsage\",        \"Extended Key Usage\" },\n        MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_SUBJECT_ALT_NAME ),     \"id-ce-subjectAltName\",     \"Subject Alt Name\" },\n        MBEDTLS_X509_EXT_SUBJECT_ALT_NAME,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_NS_CERT_TYPE ),         \"id-netscape-certtype\",     \"Netscape Certificate Type\" },\n        MBEDTLS_X509_EXT_NS_CERT_TYPE,\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        0,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)\nFN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)\n\nstatic const mbedtls_oid_descriptor_t oid_ext_key_usage[] =\n{\n    { ADD_LEN( MBEDTLS_OID_SERVER_AUTH ),      \"id-kp-serverAuth\",      \"TLS Web Server Authentication\" },\n    { ADD_LEN( MBEDTLS_OID_CLIENT_AUTH ),      \"id-kp-clientAuth\",      \"TLS Web Client Authentication\" },\n    { ADD_LEN( MBEDTLS_OID_CODE_SIGNING ),     \"id-kp-codeSigning\",     \"Code Signing\" },\n    { ADD_LEN( MBEDTLS_OID_EMAIL_PROTECTION ), \"id-kp-emailProtection\", \"E-mail Protection\" },\n    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    \"id-kp-timeStamping\",    \"Time Stamping\" },\n    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     \"id-kp-OCSPSigning\",     \"OCSP Signing\" },\n    { NULL, 0, NULL, NULL },\n};\n\nFN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)\nFN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)\n#endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */\n\n#if defined(MBEDTLS_MD_C)\n/*\n * For SignatureAlgorithmIdentifier\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_md_type_t           md_alg;\n    mbedtls_pk_type_t           pk_alg;\n} oid_sig_alg_t;\n\nstatic const oid_sig_alg_t oid_sig_alg[] =\n{\n#if defined(MBEDTLS_RSA_C)\n#if defined(MBEDTLS_MD2_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_MD2 ),        \"md2WithRSAEncryption\",     \"RSA with MD2\" },\n        MBEDTLS_MD_MD2,      MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_MD2_C */\n#if defined(MBEDTLS_MD4_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_MD4 ),        \"md4WithRSAEncryption\",     \"RSA with MD4\" },\n        MBEDTLS_MD_MD4,      MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_MD4_C */\n#if defined(MBEDTLS_MD5_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_MD5 ),        \"md5WithRSAEncryption\",     \"RSA with MD5\" },\n        MBEDTLS_MD_MD5,      MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_MD5_C */\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA1 ),       \"sha-1WithRSAEncryption\",   \"RSA with SHA1\" },\n        MBEDTLS_MD_SHA1,     MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA224 ),     \"sha224WithRSAEncryption\",  \"RSA with SHA-224\" },\n        MBEDTLS_MD_SHA224,   MBEDTLS_PK_RSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA256 ),     \"sha256WithRSAEncryption\",  \"RSA with SHA-256\" },\n        MBEDTLS_MD_SHA256,   MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA384 ),     \"sha384WithRSAEncryption\",  \"RSA with SHA-384\" },\n        MBEDTLS_MD_SHA384,   MBEDTLS_PK_RSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_SHA512 ),     \"sha512WithRSAEncryption\",  \"RSA with SHA-512\" },\n        MBEDTLS_MD_SHA512,   MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_SHA512_C */\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_RSA_SHA_OBS ),      \"sha-1WithRSAEncryption\",   \"RSA with SHA1\" },\n        MBEDTLS_MD_SHA1,     MBEDTLS_PK_RSA,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_RSA_C */\n#if defined(MBEDTLS_ECDSA_C)\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA1 ),       \"ecdsa-with-SHA1\",      \"ECDSA with SHA1\" },\n        MBEDTLS_MD_SHA1,     MBEDTLS_PK_ECDSA,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA224 ),     \"ecdsa-with-SHA224\",    \"ECDSA with SHA224\" },\n        MBEDTLS_MD_SHA224,   MBEDTLS_PK_ECDSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA256 ),     \"ecdsa-with-SHA256\",    \"ECDSA with SHA256\" },\n        MBEDTLS_MD_SHA256,   MBEDTLS_PK_ECDSA,\n    },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA384 ),     \"ecdsa-with-SHA384\",    \"ECDSA with SHA384\" },\n        MBEDTLS_MD_SHA384,   MBEDTLS_PK_ECDSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_ECDSA_SHA512 ),     \"ecdsa-with-SHA512\",    \"ECDSA with SHA512\" },\n        MBEDTLS_MD_SHA512,   MBEDTLS_PK_ECDSA,\n    },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_ECDSA_C */\n#if defined(MBEDTLS_RSA_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_RSASSA_PSS ),        \"RSASSA-PSS\",           \"RSASSA-PSS\" },\n        MBEDTLS_MD_NONE,     MBEDTLS_PK_RSASSA_PSS,\n    },\n#endif /* MBEDTLS_RSA_C */\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)\nFN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)\nFN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)\nFN_OID_GET_OID_BY_ATTR2(mbedtls_oid_get_oid_by_sig_alg, oid_sig_alg_t, oid_sig_alg, mbedtls_pk_type_t, pk_alg, mbedtls_md_type_t, md_alg)\n#endif /* MBEDTLS_MD_C */\n\n/*\n * For PublicKeyInfo (PKCS1, RFC 5480)\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_pk_type_t           pk_alg;\n} oid_pk_alg_t;\n\nstatic const oid_pk_alg_t oid_pk_alg[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS1_RSA ),      \"rsaEncryption\",   \"RSA\" },\n        MBEDTLS_PK_RSA,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_ALG_UNRESTRICTED ),  \"id-ecPublicKey\",   \"Generic EC key\" },\n        MBEDTLS_PK_ECKEY,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_ALG_ECDH ),          \"id-ecDH\",          \"EC key for ECDH\" },\n        MBEDTLS_PK_ECKEY_DH,\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_PK_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)\nFN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)\nFN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_pk_alg, oid_pk_alg_t, oid_pk_alg, mbedtls_pk_type_t, pk_alg)\n\n#if defined(MBEDTLS_ECP_C)\n/*\n * For namedCurve (RFC 5480)\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_ecp_group_id        grp_id;\n} oid_ecp_grp_t;\n\nstatic const oid_ecp_grp_t oid_ecp_grp[] =\n{\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP192R1 ), \"secp192r1\",    \"secp192r1\" },\n        MBEDTLS_ECP_DP_SECP192R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP224R1 ), \"secp224r1\",    \"secp224r1\" },\n        MBEDTLS_ECP_DP_SECP224R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP256R1 ), \"secp256r1\",    \"secp256r1\" },\n        MBEDTLS_ECP_DP_SECP256R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP384R1 ), \"secp384r1\",    \"secp384r1\" },\n        MBEDTLS_ECP_DP_SECP384R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP521R1 ), \"secp521r1\",    \"secp521r1\" },\n        MBEDTLS_ECP_DP_SECP521R1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP192K1 ), \"secp192k1\",    \"secp192k1\" },\n        MBEDTLS_ECP_DP_SECP192K1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP224K1 ), \"secp224k1\",    \"secp224k1\" },\n        MBEDTLS_ECP_DP_SECP224K1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_SECP256K1 ), \"secp256k1\",    \"secp256k1\" },\n        MBEDTLS_ECP_DP_SECP256K1,\n    },\n#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_BP256R1 ),   \"brainpoolP256r1\",\"brainpool256r1\" },\n        MBEDTLS_ECP_DP_BP256R1,\n    },\n#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_BP384R1 ),   \"brainpoolP384r1\",\"brainpool384r1\" },\n        MBEDTLS_ECP_DP_BP384R1,\n    },\n#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\n    {\n        { ADD_LEN( MBEDTLS_OID_EC_GRP_BP512R1 ),   \"brainpoolP512r1\",\"brainpool512r1\" },\n        MBEDTLS_ECP_DP_BP512R1,\n    },\n#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_ECP_DP_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)\nFN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)\nFN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_ec_grp, oid_ecp_grp_t, oid_ecp_grp, mbedtls_ecp_group_id, grp_id)\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_CIPHER_C)\n/*\n * For PKCS#5 PBES2 encryption algorithm\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_cipher_type_t       cipher_alg;\n} oid_cipher_alg_t;\n\nstatic const oid_cipher_alg_t oid_cipher_alg[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_DES_CBC ),              \"desCBC\",       \"DES-CBC\" },\n        MBEDTLS_CIPHER_DES_CBC,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_DES_EDE3_CBC ),         \"des-ede3-cbc\", \"DES-EDE3-CBC\" },\n        MBEDTLS_CIPHER_DES_EDE3_CBC,\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_CIPHER_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)\nFN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)\n#endif /* MBEDTLS_CIPHER_C */\n\n#if defined(MBEDTLS_MD_C)\n/*\n * For digestAlgorithm\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_md_type_t           md_alg;\n} oid_md_alg_t;\n\nstatic const oid_md_alg_t oid_md_alg[] =\n{\n#if defined(MBEDTLS_MD2_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD2 ),       \"id-md2\",       \"MD2\" },\n        MBEDTLS_MD_MD2,\n    },\n#endif /* MBEDTLS_MD2_C */\n#if defined(MBEDTLS_MD4_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD4 ),       \"id-md4\",       \"MD4\" },\n        MBEDTLS_MD_MD4,\n    },\n#endif /* MBEDTLS_MD4_C */\n#if defined(MBEDTLS_MD5_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_MD5 ),       \"id-md5\",       \"MD5\" },\n        MBEDTLS_MD_MD5,\n    },\n#endif /* MBEDTLS_MD5_C */\n#if defined(MBEDTLS_SHA1_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA1 ),      \"id-sha1\",      \"SHA-1\" },\n        MBEDTLS_MD_SHA1,\n    },\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA224 ),    \"id-sha224\",    \"SHA-224\" },\n        MBEDTLS_MD_SHA224,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA256 ),    \"id-sha256\",    \"SHA-256\" },\n        MBEDTLS_MD_SHA256,\n    },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA384 ),    \"id-sha384\",    \"SHA-384\" },\n        MBEDTLS_MD_SHA384,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_DIGEST_ALG_SHA512 ),    \"id-sha512\",    \"SHA-512\" },\n        MBEDTLS_MD_SHA512,\n    },\n#endif /* MBEDTLS_SHA512_C */\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_MD_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)\nFN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)\nFN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)\n#endif /* MBEDTLS_MD_C */\n\n#if defined(MBEDTLS_PKCS12_C)\n/*\n * For PKCS#12 PBEs\n */\ntypedef struct {\n    mbedtls_oid_descriptor_t    descriptor;\n    mbedtls_md_type_t           md_alg;\n    mbedtls_cipher_type_t       cipher_alg;\n} oid_pkcs12_pbe_alg_t;\n\nstatic const oid_pkcs12_pbe_alg_t oid_pkcs12_pbe_alg[] =\n{\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS12_PBE_SHA1_DES3_EDE_CBC ), \"pbeWithSHAAnd3-KeyTripleDES-CBC\", \"PBE with SHA1 and 3-Key 3DES\" },\n        MBEDTLS_MD_SHA1,      MBEDTLS_CIPHER_DES_EDE3_CBC,\n    },\n    {\n        { ADD_LEN( MBEDTLS_OID_PKCS12_PBE_SHA1_DES2_EDE_CBC ), \"pbeWithSHAAnd2-KeyTripleDES-CBC\", \"PBE with SHA1 and 2-Key 3DES\" },\n        MBEDTLS_MD_SHA1,      MBEDTLS_CIPHER_DES_EDE_CBC,\n    },\n    {\n        { NULL, 0, NULL, NULL },\n        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,\n    },\n};\n\nFN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)\nFN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)\n#endif /* MBEDTLS_PKCS12_C */\n\n#define OID_SAFE_SNPRINTF                               \\\n    do {                                                \\\n        if( ret < 0 || (size_t) ret >= n )              \\\n            return( MBEDTLS_ERR_OID_BUF_TOO_SMALL );    \\\n                                                        \\\n        n -= (size_t) ret;                              \\\n        p += (size_t) ret;                              \\\n    } while( 0 )\n\n/* Return the x.y.z.... style numeric string for the given OID */\nint mbedtls_oid_get_numeric_string( char *buf, size_t size,\n                            const mbedtls_asn1_buf *oid )\n{\n    int ret;\n    size_t i, n;\n    unsigned int value;\n    char *p;\n\n    p = buf;\n    n = size;\n\n    /* First byte contains first two dots */\n    if( oid->len > 0 )\n    {\n        ret = mbedtls_snprintf( p, n, \"%d.%d\", oid->p[0] / 40, oid->p[0] % 40 );\n        OID_SAFE_SNPRINTF;\n    }\n\n    value = 0;\n    for( i = 1; i < oid->len; i++ )\n    {\n        /* Prevent overflow in value. */\n        if( ( ( value << 7 ) >> 7 ) != value )\n            return( MBEDTLS_ERR_OID_BUF_TOO_SMALL );\n\n        value <<= 7;\n        value += oid->p[i] & 0x7F;\n\n        if( !( oid->p[i] & 0x80 ) )\n        {\n            /* Last byte */\n            ret = mbedtls_snprintf( p, n, \".%d\", value );\n            OID_SAFE_SNPRINTF;\n            value = 0;\n        }\n    }\n\n    return( (int) ( size - n ) );\n}\n\n#endif /* MBEDTLS_OID_C */\n","/*\n *  Privacy Enhanced Mail (PEM) decoding\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)\n\n#include \"mbedtls/pem.h\"\n#include \"mbedtls/base64.h\"\n#include \"mbedtls/des.h\"\n#include \"mbedtls/aes.h\"\n#include \"mbedtls/md5.h\"\n#include \"mbedtls/cipher.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#if defined(MBEDTLS_PEM_PARSE_C)\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\nvoid mbedtls_pem_init( mbedtls_pem_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_pem_context ) );\n}\n\n#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \\\n    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )\n/*\n * Read a 16-byte hex string and convert it to binary\n */\nstatic int pem_get_iv( const unsigned char *s, unsigned char *iv,\n                       size_t iv_len )\n{\n    size_t i, j, k;\n\n    memset( iv, 0, iv_len );\n\n    for( i = 0; i < iv_len * 2; i++, s++ )\n    {\n        if( *s >= '0' && *s <= '9' ) j = *s - '0'; else\n        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else\n        if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else\n            return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );\n\n        k = ( ( i & 1 ) != 0 ) ? j : j << 4;\n\n        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );\n    }\n\n    return( 0 );\n}\n\nstatic int pem_pbkdf1( unsigned char *key, size_t keylen,\n                       unsigned char *iv,\n                       const unsigned char *pwd, size_t pwdlen )\n{\n    mbedtls_md5_context md5_ctx;\n    unsigned char md5sum[16];\n    size_t use_len;\n    int ret;\n\n    mbedtls_md5_init( &md5_ctx );\n\n    /*\n     * key[ 0..15] = MD5(pwd || IV)\n     */\n    if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv,  8 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )\n        goto exit;\n\n    if( keylen <= 16 )\n    {\n        memcpy( key, md5sum, keylen );\n        goto exit;\n    }\n\n    memcpy( key, md5sum, 16 );\n\n    /*\n     * key[16..23] = MD5(key[ 0..15] || pwd || IV])\n     */\n    if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, md5sum, 16 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv, 8 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )\n        goto exit;\n\n    use_len = 16;\n    if( keylen < 32 )\n        use_len = keylen - 16;\n\n    memcpy( key + 16, md5sum, use_len );\n\nexit:\n    mbedtls_md5_free( &md5_ctx );\n    mbedtls_zeroize( md5sum, 16 );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_DES_C)\n/*\n * Decrypt with DES-CBC, using PBKDF1 for key derivation\n */\nstatic int pem_des_decrypt( unsigned char des_iv[8],\n                            unsigned char *buf, size_t buflen,\n                            const unsigned char *pwd, size_t pwdlen )\n{\n    mbedtls_des_context des_ctx;\n    unsigned char des_key[8];\n    int ret;\n\n    mbedtls_des_init( &des_ctx );\n\n    if( ( ret = pem_pbkdf1( des_key, 8, des_iv, pwd, pwdlen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_des_setkey_dec( &des_ctx, des_key ) ) != 0 )\n        goto exit;\n    ret = mbedtls_des_crypt_cbc( &des_ctx, MBEDTLS_DES_DECRYPT, buflen,\n                     des_iv, buf, buf );\n\nexit:\n    mbedtls_des_free( &des_ctx );\n    mbedtls_zeroize( des_key, 8 );\n\n    return( ret );\n}\n\n/*\n * Decrypt with 3DES-CBC, using PBKDF1 for key derivation\n */\nstatic int pem_des3_decrypt( unsigned char des3_iv[8],\n                             unsigned char *buf, size_t buflen,\n                             const unsigned char *pwd, size_t pwdlen )\n{\n    mbedtls_des3_context des3_ctx;\n    unsigned char des3_key[24];\n    int ret;\n\n    mbedtls_des3_init( &des3_ctx );\n\n    if( ( ret = pem_pbkdf1( des3_key, 24, des3_iv, pwd, pwdlen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_des3_set3key_dec( &des3_ctx, des3_key ) ) != 0 )\n        goto exit;\n    ret = mbedtls_des3_crypt_cbc( &des3_ctx, MBEDTLS_DES_DECRYPT, buflen,\n                     des3_iv, buf, buf );\n\nexit:\n    mbedtls_des3_free( &des3_ctx );\n    mbedtls_zeroize( des3_key, 24 );\n\n    return( ret );\n}\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_AES_C)\n/*\n * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation\n */\nstatic int pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,\n                            unsigned char *buf, size_t buflen,\n                            const unsigned char *pwd, size_t pwdlen )\n{\n    mbedtls_aes_context aes_ctx;\n    unsigned char aes_key[32];\n    int ret;\n\n    mbedtls_aes_init( &aes_ctx );\n\n    if( ( ret = pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 ) ) != 0 )\n        goto exit;\n    ret = mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,\n                     aes_iv, buf, buf );\n\nexit:\n    mbedtls_aes_free( &aes_ctx );\n    mbedtls_zeroize( aes_key, keylen );\n\n    return( ret );\n}\n#endif /* MBEDTLS_AES_C */\n\n#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */\n\nint mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,\n                     const unsigned char *data, const unsigned char *pwd,\n                     size_t pwdlen, size_t *use_len )\n{\n    int ret, enc;\n    size_t len;\n    unsigned char *buf;\n    const unsigned char *s1, *s2, *end;\n#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \\\n    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )\n    unsigned char pem_iv[16];\n    mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;\n#else\n    ((void) pwd);\n    ((void) pwdlen);\n#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */\n\n    if( ctx == NULL )\n        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );\n\n    s1 = (unsigned char *) strstr( (const char *) data, header );\n\n    if( s1 == NULL )\n        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );\n\n    s2 = (unsigned char *) strstr( (const char *) data, footer );\n\n    if( s2 == NULL || s2 <= s1 )\n        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );\n\n    s1 += strlen( header );\n    if( *s1 == ' '  ) s1++;\n    if( *s1 == '\\r' ) s1++;\n    if( *s1 == '\\n' ) s1++;\n    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );\n\n    end = s2;\n    end += strlen( footer );\n    if( *end == ' '  ) end++;\n    if( *end == '\\r' ) end++;\n    if( *end == '\\n' ) end++;\n    *use_len = end - data;\n\n    enc = 0;\n\n    if( s2 - s1 >= 22 && memcmp( s1, \"Proc-Type: 4,ENCRYPTED\", 22 ) == 0 )\n    {\n#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \\\n    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )\n        enc++;\n\n        s1 += 22;\n        if( *s1 == '\\r' ) s1++;\n        if( *s1 == '\\n' ) s1++;\n        else return( MBEDTLS_ERR_PEM_INVALID_DATA );\n\n\n#if defined(MBEDTLS_DES_C)\n        if( s2 - s1 >= 23 && memcmp( s1, \"DEK-Info: DES-EDE3-CBC,\", 23 ) == 0 )\n        {\n            enc_alg = MBEDTLS_CIPHER_DES_EDE3_CBC;\n\n            s1 += 23;\n            if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8 ) != 0 )\n                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );\n\n            s1 += 16;\n        }\n        else if( s2 - s1 >= 18 && memcmp( s1, \"DEK-Info: DES-CBC,\", 18 ) == 0 )\n        {\n            enc_alg = MBEDTLS_CIPHER_DES_CBC;\n\n            s1 += 18;\n            if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8) != 0 )\n                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );\n\n            s1 += 16;\n        }\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_AES_C)\n        if( s2 - s1 >= 14 && memcmp( s1, \"DEK-Info: AES-\", 14 ) == 0 )\n        {\n            if( s2 - s1 < 22 )\n                return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );\n            else if( memcmp( s1, \"DEK-Info: AES-128-CBC,\", 22 ) == 0 )\n                enc_alg = MBEDTLS_CIPHER_AES_128_CBC;\n            else if( memcmp( s1, \"DEK-Info: AES-192-CBC,\", 22 ) == 0 )\n                enc_alg = MBEDTLS_CIPHER_AES_192_CBC;\n            else if( memcmp( s1, \"DEK-Info: AES-256-CBC,\", 22 ) == 0 )\n                enc_alg = MBEDTLS_CIPHER_AES_256_CBC;\n            else\n                return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );\n\n            s1 += 22;\n            if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )\n                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );\n\n            s1 += 32;\n        }\n#endif /* MBEDTLS_AES_C */\n\n        if( enc_alg == MBEDTLS_CIPHER_NONE )\n            return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );\n\n        if( *s1 == '\\r' ) s1++;\n        if( *s1 == '\\n' ) s1++;\n        else return( MBEDTLS_ERR_PEM_INVALID_DATA );\n#else\n        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );\n#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */\n    }\n\n    if( s1 >= s2 )\n        return( MBEDTLS_ERR_PEM_INVALID_DATA );\n\n    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );\n\n    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )\n        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );\n\n    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )\n        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );\n\n    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )\n    {\n        mbedtls_zeroize( buf, len );\n        mbedtls_free( buf );\n        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );\n    }\n\n    if( enc != 0 )\n    {\n#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \\\n    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )\n        if( pwd == NULL )\n        {\n            mbedtls_zeroize( buf, len );\n            mbedtls_free( buf );\n            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );\n        }\n\n        ret = 0;\n\n#if defined(MBEDTLS_DES_C)\n        if( enc_alg == MBEDTLS_CIPHER_DES_EDE3_CBC )\n            ret = pem_des3_decrypt( pem_iv, buf, len, pwd, pwdlen );\n        else if( enc_alg == MBEDTLS_CIPHER_DES_CBC )\n            ret = pem_des_decrypt( pem_iv, buf, len, pwd, pwdlen );\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_AES_C)\n        if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )\n            ret = pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );\n        else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )\n            ret = pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );\n        else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )\n            ret = pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );\n#endif /* MBEDTLS_AES_C */\n\n        if( ret != 0 )\n        {\n            mbedtls_free( buf );\n            return( ret );\n        }\n\n        /*\n         * The result will be ASN.1 starting with a SEQUENCE tag, with 1 to 3\n         * length bytes (allow 4 to be sure) in all known use cases.\n         *\n         * Use that as heurisitic to try detecting password mismatchs.\n         */\n        if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )\n        {\n            mbedtls_zeroize( buf, len );\n            mbedtls_free( buf );\n            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );\n        }\n#else\n        mbedtls_zeroize( buf, len );\n        mbedtls_free( buf );\n        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );\n#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */\n    }\n\n    ctx->buf = buf;\n    ctx->buflen = len;\n\n    return( 0 );\n}\n\nvoid mbedtls_pem_free( mbedtls_pem_context *ctx )\n{\n    if( ctx->buf != NULL )\n        mbedtls_zeroize( ctx->buf, ctx->buflen );\n    mbedtls_free( ctx->buf );\n    mbedtls_free( ctx->info );\n\n    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );\n}\n#endif /* MBEDTLS_PEM_PARSE_C */\n\n#if defined(MBEDTLS_PEM_WRITE_C)\nint mbedtls_pem_write_buffer( const char *header, const char *footer,\n                      const unsigned char *der_data, size_t der_len,\n                      unsigned char *buf, size_t buf_len, size_t *olen )\n{\n    int ret;\n    unsigned char *encode_buf, *c, *p = buf;\n    size_t len = 0, use_len, add_len = 0;\n\n    mbedtls_base64_encode( NULL, 0, &use_len, der_data, der_len );\n    add_len = strlen( header ) + strlen( footer ) + ( use_len / 64 ) + 1;\n\n    if( use_len + add_len > buf_len )\n    {\n        *olen = use_len + add_len;\n        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );\n    }\n\n    if( ( encode_buf = mbedtls_calloc( 1, use_len ) ) == NULL )\n        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );\n\n    if( ( ret = mbedtls_base64_encode( encode_buf, use_len, &use_len, der_data,\n                               der_len ) ) != 0 )\n    {\n        mbedtls_free( encode_buf );\n        return( ret );\n    }\n\n    memcpy( p, header, strlen( header ) );\n    p += strlen( header );\n    c = encode_buf;\n\n    while( use_len )\n    {\n        len = ( use_len > 64 ) ? 64 : use_len;\n        memcpy( p, c, len );\n        use_len -= len;\n        p += len;\n        c += len;\n        *p++ = '\\n';\n    }\n\n    memcpy( p, footer, strlen( footer ) );\n    p += strlen( footer );\n\n    *p++ = '\\0';\n    *olen = p - buf;\n\n    mbedtls_free( encode_buf );\n    return( 0 );\n}\n#endif /* MBEDTLS_PEM_WRITE_C */\n#endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */\n","/*\n *  Public Key abstraction layer\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_PK_C)\n#include \"mbedtls/pk.h\"\n#include \"mbedtls/pk_internal.h\"\n\n#if defined(MBEDTLS_RSA_C)\n#include \"mbedtls/rsa.h\"\n#endif\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n#include \"mbedtls/ecdsa.h\"\n#endif\n\n#include <limits.h>\n#include <stdint.h>\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n/*\n * Initialise a mbedtls_pk_context\n */\nvoid mbedtls_pk_init( mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    ctx->pk_info = NULL;\n    ctx->pk_ctx = NULL;\n}\n\n/*\n * Free (the components of) a mbedtls_pk_context\n */\nvoid mbedtls_pk_free( mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return;\n\n    ctx->pk_info->ctx_free_func( ctx->pk_ctx );\n\n    mbedtls_zeroize( ctx, sizeof( mbedtls_pk_context ) );\n}\n\n/*\n * Get pk_info structure from type\n */\nconst mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )\n{\n    switch( pk_type ) {\n#if defined(MBEDTLS_RSA_C)\n        case MBEDTLS_PK_RSA:\n            return( &mbedtls_rsa_info );\n#endif\n#if defined(MBEDTLS_ECP_C)\n        case MBEDTLS_PK_ECKEY:\n            return( &mbedtls_eckey_info );\n        case MBEDTLS_PK_ECKEY_DH:\n            return( &mbedtls_eckeydh_info );\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n        case MBEDTLS_PK_ECDSA:\n            return( &mbedtls_ecdsa_info );\n#endif\n        /* MBEDTLS_PK_RSA_ALT omitted on purpose */\n        default:\n            return( NULL );\n    }\n}\n\n/*\n * Initialise context\n */\nint mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )\n{\n    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )\n        return( MBEDTLS_ERR_PK_ALLOC_FAILED );\n\n    ctx->pk_info = info;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_PK_RSA_ALT_SUPPORT)\n/*\n * Initialize an RSA-alt context\n */\nint mbedtls_pk_setup_rsa_alt( mbedtls_pk_context *ctx, void * key,\n                         mbedtls_pk_rsa_alt_decrypt_func decrypt_func,\n                         mbedtls_pk_rsa_alt_sign_func sign_func,\n                         mbedtls_pk_rsa_alt_key_len_func key_len_func )\n{\n    mbedtls_rsa_alt_context *rsa_alt;\n    const mbedtls_pk_info_t *info = &mbedtls_rsa_alt_info;\n\n    if( ctx == NULL || ctx->pk_info != NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )\n        return( MBEDTLS_ERR_PK_ALLOC_FAILED );\n\n    ctx->pk_info = info;\n\n    rsa_alt = (mbedtls_rsa_alt_context *) ctx->pk_ctx;\n\n    rsa_alt->key = key;\n    rsa_alt->decrypt_func = decrypt_func;\n    rsa_alt->sign_func = sign_func;\n    rsa_alt->key_len_func = key_len_func;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_PK_RSA_ALT_SUPPORT */\n\n/*\n * Tell if a PK can do the operations of the given type\n */\nint mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )\n{\n    /* null or NONE context can't do anything */\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( 0 );\n\n    return( ctx->pk_info->can_do( type ) );\n}\n\n/*\n * Helper for mbedtls_pk_sign and mbedtls_pk_verify\n */\nstatic inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )\n{\n    const mbedtls_md_info_t *md_info;\n\n    if( *hash_len != 0 )\n        return( 0 );\n\n    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )\n        return( -1 );\n\n    *hash_len = mbedtls_md_get_size( md_info );\n    return( 0 );\n}\n\n/*\n * Verify a signature\n */\nint mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,\n               const unsigned char *hash, size_t hash_len,\n               const unsigned char *sig, size_t sig_len )\n{\n    if( ctx == NULL || ctx->pk_info == NULL ||\n        pk_hashlen_helper( md_alg, &hash_len ) != 0 )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->verify_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,\n                                       sig, sig_len ) );\n}\n\n/*\n * Verify a signature with options\n */\nint mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,\n                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   const unsigned char *sig, size_t sig_len )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ! mbedtls_pk_can_do( ctx, type ) )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    if( type == MBEDTLS_PK_RSASSA_PSS )\n    {\n#if defined(MBEDTLS_RSA_C) && defined(MBEDTLS_PKCS1_V21)\n        int ret;\n        const mbedtls_pk_rsassa_pss_options *pss_opts;\n\n#if SIZE_MAX > UINT_MAX\n        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )\n            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n#endif /* SIZE_MAX > UINT_MAX */\n\n        if( options == NULL )\n            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;\n\n        if( sig_len < mbedtls_pk_get_len( ctx ) )\n            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );\n\n        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),\n                NULL, NULL, MBEDTLS_RSA_PUBLIC,\n                md_alg, (unsigned int) hash_len, hash,\n                pss_opts->mgf1_hash_id,\n                pss_opts->expected_salt_len,\n                sig );\n        if( ret != 0 )\n            return( ret );\n\n        if( sig_len > mbedtls_pk_get_len( ctx ) )\n            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );\n\n        return( 0 );\n#else\n        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );\n#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */\n    }\n\n    /* General case: no options */\n    if( options != NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );\n}\n\n/*\n * Make a signature\n */\nint mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,\n             const unsigned char *hash, size_t hash_len,\n             unsigned char *sig, size_t *sig_len,\n             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    if( ctx == NULL || ctx->pk_info == NULL ||\n        pk_hashlen_helper( md_alg, &hash_len ) != 0 )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->sign_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,\n                                     sig, sig_len, f_rng, p_rng ) );\n}\n\n/*\n * Decrypt message\n */\nint mbedtls_pk_decrypt( mbedtls_pk_context *ctx,\n                const unsigned char *input, size_t ilen,\n                unsigned char *output, size_t *olen, size_t osize,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->decrypt_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    return( ctx->pk_info->decrypt_func( ctx->pk_ctx, input, ilen,\n                output, olen, osize, f_rng, p_rng ) );\n}\n\n/*\n * Encrypt message\n */\nint mbedtls_pk_encrypt( mbedtls_pk_context *ctx,\n                const unsigned char *input, size_t ilen,\n                unsigned char *output, size_t *olen, size_t osize,\n                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->encrypt_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,\n                output, olen, osize, f_rng, p_rng ) );\n}\n\n/*\n * Check public-private key pair\n */\nint mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_context *prv )\n{\n    if( pub == NULL || pub->pk_info == NULL ||\n        prv == NULL || prv->pk_info == NULL ||\n        prv->pk_info->check_pair_func == NULL )\n    {\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n    }\n\n    if( prv->pk_info->type == MBEDTLS_PK_RSA_ALT )\n    {\n        if( pub->pk_info->type != MBEDTLS_PK_RSA )\n            return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n    }\n    else\n    {\n        if( pub->pk_info != prv->pk_info )\n            return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n    }\n\n    return( prv->pk_info->check_pair_func( pub->pk_ctx, prv->pk_ctx ) );\n}\n\n/*\n * Get key size in bits\n */\nsize_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( 0 );\n\n    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );\n}\n\n/*\n * Export debug information\n */\nint mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n\n    if( ctx->pk_info->debug_func == NULL )\n        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );\n\n    ctx->pk_info->debug_func( ctx->pk_ctx, items );\n    return( 0 );\n}\n\n/*\n * Access the PK type name\n */\nconst char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( \"invalid PK\" );\n\n    return( ctx->pk_info->name );\n}\n\n/*\n * Access the PK type\n */\nmbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )\n{\n    if( ctx == NULL || ctx->pk_info == NULL )\n        return( MBEDTLS_PK_NONE );\n\n    return( ctx->pk_info->type );\n}\n\n#endif /* MBEDTLS_PK_C */\n","/*\n *  Public Key abstraction layer: wrapper functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_PK_C)\n#include \"mbedtls/pk_internal.h\"\n\n/* Even if RSA not activated, for the sake of RSA-alt */\n#include \"mbedtls/rsa.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n\n#if defined(MBEDTLS_ECDSA_C)\n#include \"mbedtls/ecdsa.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#include <limits.h>\n#include <stdint.h>\n\n#if defined(MBEDTLS_PK_RSA_ALT_SUPPORT)\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n#endif\n\n#if defined(MBEDTLS_RSA_C)\nstatic int rsa_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_RSA ||\n            type == MBEDTLS_PK_RSASSA_PSS );\n}\n\nstatic size_t rsa_get_bitlen( const void *ctx )\n{\n    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;\n    return( 8 * mbedtls_rsa_get_len( rsa ) );\n}\n\nstatic int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   const unsigned char *sig, size_t sig_len )\n{\n    int ret;\n    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;\n    size_t rsa_len = mbedtls_rsa_get_len( rsa );\n\n#if SIZE_MAX > UINT_MAX\n    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n#endif /* SIZE_MAX > UINT_MAX */\n\n    if( sig_len < rsa_len )\n        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );\n\n    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,\n                                  MBEDTLS_RSA_PUBLIC, md_alg,\n                                  (unsigned int) hash_len, hash, sig ) ) != 0 )\n        return( ret );\n\n    if( sig_len > rsa_len )\n        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );\n\n    return( 0 );\n}\n\nstatic int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;\n\n#if SIZE_MAX > UINT_MAX\n    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n#endif /* SIZE_MAX > UINT_MAX */\n\n    *sig_len = mbedtls_rsa_get_len( rsa );\n\n    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,\n                md_alg, (unsigned int) hash_len, hash, sig ) );\n}\n\nstatic int rsa_decrypt_wrap( void *ctx,\n                    const unsigned char *input, size_t ilen,\n                    unsigned char *output, size_t *olen, size_t osize,\n                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;\n\n    if( ilen != mbedtls_rsa_get_len( rsa ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,\n                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );\n}\n\nstatic int rsa_encrypt_wrap( void *ctx,\n                    const unsigned char *input, size_t ilen,\n                    unsigned char *output, size_t *olen, size_t osize,\n                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;\n    *olen = mbedtls_rsa_get_len( rsa );\n\n    if( *olen > osize )\n        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );\n\n    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,\n                                       ilen, input, output ) );\n}\n\nstatic int rsa_check_pair_wrap( const void *pub, const void *prv )\n{\n    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,\n                                (const mbedtls_rsa_context *) prv ) );\n}\n\nstatic void *rsa_alloc_wrap( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );\n\n    if( ctx != NULL )\n        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );\n\n    return( ctx );\n}\n\nstatic void rsa_free_wrap( void *ctx )\n{\n    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )\n{\n    items->type = MBEDTLS_PK_DEBUG_MPI;\n    items->name = \"rsa.N\";\n    items->value = &( ((mbedtls_rsa_context *) ctx)->N );\n\n    items++;\n\n    items->type = MBEDTLS_PK_DEBUG_MPI;\n    items->name = \"rsa.E\";\n    items->value = &( ((mbedtls_rsa_context *) ctx)->E );\n}\n\nconst mbedtls_pk_info_t mbedtls_rsa_info = {\n    MBEDTLS_PK_RSA,\n    \"RSA\",\n    rsa_get_bitlen,\n    rsa_can_do,\n    rsa_verify_wrap,\n    rsa_sign_wrap,\n    rsa_decrypt_wrap,\n    rsa_encrypt_wrap,\n    rsa_check_pair_wrap,\n    rsa_alloc_wrap,\n    rsa_free_wrap,\n    rsa_debug,\n};\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_ECP_C)\n/*\n * Generic EC key\n */\nstatic int eckey_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_ECKEY ||\n            type == MBEDTLS_PK_ECKEY_DH ||\n            type == MBEDTLS_PK_ECDSA );\n}\n\nstatic size_t eckey_get_bitlen( const void *ctx )\n{\n    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );\n}\n\n#if defined(MBEDTLS_ECDSA_C)\n/* Forward declarations */\nstatic int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                       const unsigned char *hash, size_t hash_len,\n                       const unsigned char *sig, size_t sig_len );\n\nstatic int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );\n\nstatic int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                       const unsigned char *hash, size_t hash_len,\n                       const unsigned char *sig, size_t sig_len )\n{\n    int ret;\n    mbedtls_ecdsa_context ecdsa;\n\n    mbedtls_ecdsa_init( &ecdsa );\n\n    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )\n        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );\n\n    mbedtls_ecdsa_free( &ecdsa );\n\n    return( ret );\n}\n\nstatic int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret;\n    mbedtls_ecdsa_context ecdsa;\n\n    mbedtls_ecdsa_init( &ecdsa );\n\n    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )\n        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,\n                               f_rng, p_rng );\n\n    mbedtls_ecdsa_free( &ecdsa );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_ECDSA_C */\n\nstatic int eckey_check_pair( const void *pub, const void *prv )\n{\n    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,\n                                (const mbedtls_ecp_keypair *) prv ) );\n}\n\nstatic void *eckey_alloc_wrap( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );\n\n    if( ctx != NULL )\n        mbedtls_ecp_keypair_init( ctx );\n\n    return( ctx );\n}\n\nstatic void eckey_free_wrap( void *ctx )\n{\n    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );\n    mbedtls_free( ctx );\n}\n\nstatic void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )\n{\n    items->type = MBEDTLS_PK_DEBUG_ECP;\n    items->name = \"eckey.Q\";\n    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );\n}\n\nconst mbedtls_pk_info_t mbedtls_eckey_info = {\n    MBEDTLS_PK_ECKEY,\n    \"EC\",\n    eckey_get_bitlen,\n    eckey_can_do,\n#if defined(MBEDTLS_ECDSA_C)\n    eckey_verify_wrap,\n    eckey_sign_wrap,\n#else\n    NULL,\n    NULL,\n#endif\n    NULL,\n    NULL,\n    eckey_check_pair,\n    eckey_alloc_wrap,\n    eckey_free_wrap,\n    eckey_debug,\n};\n\n/*\n * EC key restricted to ECDH\n */\nstatic int eckeydh_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_ECKEY ||\n            type == MBEDTLS_PK_ECKEY_DH );\n}\n\nconst mbedtls_pk_info_t mbedtls_eckeydh_info = {\n    MBEDTLS_PK_ECKEY_DH,\n    \"EC_DH\",\n    eckey_get_bitlen,         /* Same underlying key structure */\n    eckeydh_can_do,\n    NULL,\n    NULL,\n    NULL,\n    NULL,\n    eckey_check_pair,\n    eckey_alloc_wrap,       /* Same underlying key structure */\n    eckey_free_wrap,        /* Same underlying key structure */\n    eckey_debug,            /* Same underlying key structure */\n};\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_ECDSA_C)\nstatic int ecdsa_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_ECDSA );\n}\n\nstatic int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                       const unsigned char *hash, size_t hash_len,\n                       const unsigned char *sig, size_t sig_len )\n{\n    int ret;\n    ((void) md_alg);\n\n    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,\n                                hash, hash_len, sig, sig_len );\n\n    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )\n        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );\n\n    return( ret );\n}\n\nstatic int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,\n                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );\n}\n\nstatic void *ecdsa_alloc_wrap( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );\n\n    if( ctx != NULL )\n        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );\n\n    return( ctx );\n}\n\nstatic void ecdsa_free_wrap( void *ctx )\n{\n    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );\n    mbedtls_free( ctx );\n}\n\nconst mbedtls_pk_info_t mbedtls_ecdsa_info = {\n    MBEDTLS_PK_ECDSA,\n    \"ECDSA\",\n    eckey_get_bitlen,     /* Compatible key structures */\n    ecdsa_can_do,\n    ecdsa_verify_wrap,\n    ecdsa_sign_wrap,\n    NULL,\n    NULL,\n    eckey_check_pair,   /* Compatible key structures */\n    ecdsa_alloc_wrap,\n    ecdsa_free_wrap,\n    eckey_debug,        /* Compatible key structures */\n};\n#endif /* MBEDTLS_ECDSA_C */\n\n#if defined(MBEDTLS_PK_RSA_ALT_SUPPORT)\n/*\n * Support for alternative RSA-private implementations\n */\n\nstatic int rsa_alt_can_do( mbedtls_pk_type_t type )\n{\n    return( type == MBEDTLS_PK_RSA );\n}\n\nstatic size_t rsa_alt_get_bitlen( const void *ctx )\n{\n    const mbedtls_rsa_alt_context *rsa_alt = (const mbedtls_rsa_alt_context *) ctx;\n\n    return( 8 * rsa_alt->key_len_func( rsa_alt->key ) );\n}\n\nstatic int rsa_alt_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,\n                   const unsigned char *hash, size_t hash_len,\n                   unsigned char *sig, size_t *sig_len,\n                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_alt_context *rsa_alt = (mbedtls_rsa_alt_context *) ctx;\n\n#if SIZE_MAX > UINT_MAX\n    if( UINT_MAX < hash_len )\n        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );\n#endif /* SIZE_MAX > UINT_MAX */\n\n    *sig_len = rsa_alt->key_len_func( rsa_alt->key );\n\n    return( rsa_alt->sign_func( rsa_alt->key, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,\n                md_alg, (unsigned int) hash_len, hash, sig ) );\n}\n\nstatic int rsa_alt_decrypt_wrap( void *ctx,\n                    const unsigned char *input, size_t ilen,\n                    unsigned char *output, size_t *olen, size_t osize,\n                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    mbedtls_rsa_alt_context *rsa_alt = (mbedtls_rsa_alt_context *) ctx;\n\n    ((void) f_rng);\n    ((void) p_rng);\n\n    if( ilen != rsa_alt->key_len_func( rsa_alt->key ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    return( rsa_alt->decrypt_func( rsa_alt->key,\n                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );\n}\n\n#if defined(MBEDTLS_RSA_C)\nstatic int rsa_alt_check_pair( const void *pub, const void *prv )\n{\n    unsigned char sig[MBEDTLS_MPI_MAX_SIZE];\n    unsigned char hash[32];\n    size_t sig_len = 0;\n    int ret;\n\n    if( rsa_alt_get_bitlen( prv ) != rsa_get_bitlen( pub ) )\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n\n    memset( hash, 0x2a, sizeof( hash ) );\n\n    if( ( ret = rsa_alt_sign_wrap( (void *) prv, MBEDTLS_MD_NONE,\n                                   hash, sizeof( hash ),\n                                   sig, &sig_len, NULL, NULL ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    if( rsa_verify_wrap( (void *) pub, MBEDTLS_MD_NONE,\n                         hash, sizeof( hash ), sig, sig_len ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_RSA_C */\n\nstatic void *rsa_alt_alloc_wrap( void )\n{\n    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_alt_context ) );\n\n    if( ctx != NULL )\n        memset( ctx, 0, sizeof( mbedtls_rsa_alt_context ) );\n\n    return( ctx );\n}\n\nstatic void rsa_alt_free_wrap( void *ctx )\n{\n    mbedtls_zeroize( ctx, sizeof( mbedtls_rsa_alt_context ) );\n    mbedtls_free( ctx );\n}\n\nconst mbedtls_pk_info_t mbedtls_rsa_alt_info = {\n    MBEDTLS_PK_RSA_ALT,\n    \"RSA-alt\",\n    rsa_alt_get_bitlen,\n    rsa_alt_can_do,\n    NULL,\n    rsa_alt_sign_wrap,\n    rsa_alt_decrypt_wrap,\n    NULL,\n#if defined(MBEDTLS_RSA_C)\n    rsa_alt_check_pair,\n#else\n    NULL,\n#endif\n    rsa_alt_alloc_wrap,\n    rsa_alt_free_wrap,\n    NULL,\n};\n\n#endif /* MBEDTLS_PK_RSA_ALT_SUPPORT */\n\n#endif /* MBEDTLS_PK_C */\n","/*\n *  Public Key layer for parsing key files and structures\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_PK_PARSE_C)\n\n#include \"mbedtls/pk.h\"\n#include \"mbedtls/asn1.h\"\n#include \"mbedtls/oid.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_RSA_C)\n#include \"mbedtls/rsa.h\"\n#endif\n#if defined(MBEDTLS_ECP_C)\n#include \"mbedtls/ecp.h\"\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n#include \"mbedtls/ecdsa.h\"\n#endif\n#if defined(MBEDTLS_PEM_PARSE_C)\n#include \"mbedtls/pem.h\"\n#endif\n#if defined(MBEDTLS_PKCS5_C)\n#include \"mbedtls/pkcs5.h\"\n#endif\n#if defined(MBEDTLS_PKCS12_C)\n#include \"mbedtls/pkcs12.h\"\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif\n\n#if defined(MBEDTLS_FS_IO) || \\\n    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n#endif\n\n#if defined(MBEDTLS_FS_IO)\n/*\n * Load all data from a file into a given buffer.\n *\n * The file is expected to contain either PEM or DER encoded data.\n * A terminating null byte is always appended. It is included in the announced\n * length only if the data looks like it is PEM encoded.\n */\nint mbedtls_pk_load_file( const char *path, unsigned char **buf, size_t *n )\n{\n    FILE *f;\n    long size;\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_PK_FILE_IO_ERROR );\n\n    fseek( f, 0, SEEK_END );\n    if( ( size = ftell( f ) ) == -1 )\n    {\n        fclose( f );\n        return( MBEDTLS_ERR_PK_FILE_IO_ERROR );\n    }\n    fseek( f, 0, SEEK_SET );\n\n    *n = (size_t) size;\n\n    if( *n + 1 == 0 ||\n        ( *buf = mbedtls_calloc( 1, *n + 1 ) ) == NULL )\n    {\n        fclose( f );\n        return( MBEDTLS_ERR_PK_ALLOC_FAILED );\n    }\n\n    if( fread( *buf, 1, *n, f ) != *n )\n    {\n        fclose( f );\n\n        mbedtls_zeroize( *buf, *n );\n        mbedtls_free( *buf );\n\n        return( MBEDTLS_ERR_PK_FILE_IO_ERROR );\n    }\n\n    fclose( f );\n\n    (*buf)[*n] = '\\0';\n\n    if( strstr( (const char *) *buf, \"-----BEGIN \" ) != NULL )\n        ++*n;\n\n    return( 0 );\n}\n\n/*\n * Load and parse a private key\n */\nint mbedtls_pk_parse_keyfile( mbedtls_pk_context *ctx,\n                      const char *path, const char *pwd )\n{\n    int ret;\n    size_t n;\n    unsigned char *buf;\n\n    if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )\n        return( ret );\n\n    if( pwd == NULL )\n        ret = mbedtls_pk_parse_key( ctx, buf, n, NULL, 0 );\n    else\n        ret = mbedtls_pk_parse_key( ctx, buf, n,\n                (const unsigned char *) pwd, strlen( pwd ) );\n\n    mbedtls_zeroize( buf, n );\n    mbedtls_free( buf );\n\n    return( ret );\n}\n\n/*\n * Load and parse a public key\n */\nint mbedtls_pk_parse_public_keyfile( mbedtls_pk_context *ctx, const char *path )\n{\n    int ret;\n    size_t n;\n    unsigned char *buf;\n\n    if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )\n        return( ret );\n\n    ret = mbedtls_pk_parse_public_key( ctx, buf, n );\n\n    mbedtls_zeroize( buf, n );\n    mbedtls_free( buf );\n\n    return( ret );\n}\n#endif /* MBEDTLS_FS_IO */\n\n#if defined(MBEDTLS_ECP_C)\n/* Minimally parse an ECParameters buffer to and mbedtls_asn1_buf\n *\n * ECParameters ::= CHOICE {\n *   namedCurve         OBJECT IDENTIFIER\n *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }\n *   -- implicitCurve   NULL\n * }\n */\nstatic int pk_get_ecparams( unsigned char **p, const unsigned char *end,\n                            mbedtls_asn1_buf *params )\n{\n    int ret;\n\n    /* Tag may be either OID or SEQUENCE */\n    params->tag = **p;\n    if( params->tag != MBEDTLS_ASN1_OID\n#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)\n            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )\n#endif\n            )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );\n    }\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    params->p = *p;\n    *p += params->len;\n\n    if( *p != end )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)\n/*\n * Parse a SpecifiedECDomain (SEC 1 C.2) and (mostly) fill the group with it.\n * WARNING: the resulting group should only be used with\n * pk_group_id_from_specified(), since its base point may not be set correctly\n * if it was encoded compressed.\n *\n *  SpecifiedECDomain ::= SEQUENCE {\n *      version SpecifiedECDomainVersion(ecdpVer1 | ecdpVer2 | ecdpVer3, ...),\n *      fieldID FieldID {{FieldTypes}},\n *      curve Curve,\n *      base ECPoint,\n *      order INTEGER,\n *      cofactor INTEGER OPTIONAL,\n *      hash HashAlgorithm OPTIONAL,\n *      ...\n *  }\n *\n * We only support prime-field as field type, and ignore hash and cofactor.\n */\nstatic int pk_group_from_specified( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )\n{\n    int ret;\n    unsigned char *p = params->p;\n    const unsigned char * const end = params->p + params->len;\n    const unsigned char *end_field, *end_curve;\n    size_t len;\n    int ver;\n\n    /* SpecifiedECDomainVersion ::= INTEGER { 1, 2, 3 } */\n    if( ( ret = mbedtls_asn1_get_int( &p, end, &ver ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ver < 1 || ver > 3 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n\n    /*\n     * FieldID { FIELD-ID:IOSet } ::= SEQUENCE { -- Finite field\n     *       fieldType FIELD-ID.&id({IOSet}),\n     *       parameters FIELD-ID.&Type({IOSet}{@fieldType})\n     * }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( ret );\n\n    end_field = p + len;\n\n    /*\n     * FIELD-ID ::= TYPE-IDENTIFIER\n     * FieldTypes FIELD-ID ::= {\n     *       { Prime-p IDENTIFIED BY prime-field } |\n     *       { Characteristic-two IDENTIFIED BY characteristic-two-field }\n     * }\n     * prime-field OBJECT IDENTIFIER ::= { id-fieldType 1 }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end_field, &len, MBEDTLS_ASN1_OID ) ) != 0 )\n        return( ret );\n\n    if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||\n        memcmp( p, MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD, len ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );\n    }\n\n    p += len;\n\n    /* Prime-p ::= INTEGER -- Field of size p. */\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    grp->pbits = mbedtls_mpi_bitlen( &grp->P );\n\n    if( p != end_field )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    /*\n     * Curve ::= SEQUENCE {\n     *       a FieldElement,\n     *       b FieldElement,\n     *       seed BIT STRING OPTIONAL\n     *       -- Shall be present if used in SpecifiedECDomain\n     *       -- with version equal to ecdpVer2 or ecdpVer3\n     * }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( ret );\n\n    end_curve = p + len;\n\n    /*\n     * FieldElement ::= OCTET STRING\n     * containing an integer in the case of a prime field\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||\n        ( ret = mbedtls_mpi_read_binary( &grp->A, p, len ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    p += len;\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||\n        ( ret = mbedtls_mpi_read_binary( &grp->B, p, len ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    p += len;\n\n    /* Ignore seed BIT STRING OPTIONAL */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_BIT_STRING ) ) == 0 )\n        p += len;\n\n    if( p != end_curve )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    /*\n     * ECPoint ::= OCTET STRING\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ( ret = mbedtls_ecp_point_read_binary( grp, &grp->G,\n                                      ( const unsigned char *) p, len ) ) != 0 )\n    {\n        /*\n         * If we can't read the point because it's compressed, cheat by\n         * reading only the X coordinate and the parity bit of Y.\n         */\n        if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||\n            ( p[0] != 0x02 && p[0] != 0x03 ) ||\n            len != mbedtls_mpi_size( &grp->P ) + 1 ||\n            mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||\n            mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||\n            mbedtls_mpi_lset( &grp->G.Z, 1 ) != 0 )\n        {\n            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n        }\n    }\n\n    p += len;\n\n    /*\n     * order INTEGER\n     */\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    grp->nbits = mbedtls_mpi_bitlen( &grp->N );\n\n    /*\n     * Allow optional elements by purposefully not enforcing p == end here.\n     */\n\n    return( 0 );\n}\n\n/*\n * Find the group id associated with an (almost filled) group as generated by\n * pk_group_from_specified(), or return an error if unknown.\n */\nstatic int pk_group_id_from_group( const mbedtls_ecp_group *grp, mbedtls_ecp_group_id *grp_id )\n{\n    int ret = 0;\n    mbedtls_ecp_group ref;\n    const mbedtls_ecp_group_id *id;\n\n    mbedtls_ecp_group_init( &ref );\n\n    for( id = mbedtls_ecp_grp_id_list(); *id != MBEDTLS_ECP_DP_NONE; id++ )\n    {\n        /* Load the group associated to that id */\n        mbedtls_ecp_group_free( &ref );\n        MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );\n\n        /* Compare to the group we were given, starting with easy tests */\n        if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&\n            mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&\n            mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&\n            /* For Y we may only know the parity bit, so compare only that */\n            mbedtls_mpi_get_bit( &grp->G.Y, 0 ) == mbedtls_mpi_get_bit( &ref.G.Y, 0 ) )\n        {\n            break;\n        }\n\n    }\n\ncleanup:\n    mbedtls_ecp_group_free( &ref );\n\n    *grp_id = *id;\n\n    if( ret == 0 && *id == MBEDTLS_ECP_DP_NONE )\n        ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;\n\n    return( ret );\n}\n\n/*\n * Parse a SpecifiedECDomain (SEC 1 C.2) and find the associated group ID\n */\nstatic int pk_group_id_from_specified( const mbedtls_asn1_buf *params,\n                                       mbedtls_ecp_group_id *grp_id )\n{\n    int ret;\n    mbedtls_ecp_group grp;\n\n    mbedtls_ecp_group_init( &grp );\n\n    if( ( ret = pk_group_from_specified( params, &grp ) ) != 0 )\n        goto cleanup;\n\n    ret = pk_group_id_from_group( &grp, grp_id );\n\ncleanup:\n    mbedtls_ecp_group_free( &grp );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PK_PARSE_EC_EXTENDED */\n\n/*\n * Use EC parameters to initialise an EC group\n *\n * ECParameters ::= CHOICE {\n *   namedCurve         OBJECT IDENTIFIER\n *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }\n *   -- implicitCurve   NULL\n */\nstatic int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )\n{\n    int ret;\n    mbedtls_ecp_group_id grp_id;\n\n    if( params->tag == MBEDTLS_ASN1_OID )\n    {\n        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )\n            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );\n    }\n    else\n    {\n#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)\n        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )\n            return( ret );\n#else\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n#endif\n    }\n\n    /*\n     * grp may already be initilialized; if so, make sure IDs match\n     */\n    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n\n    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * EC public key is an EC point\n *\n * The caller is responsible for clearing the structure upon failure if\n * desired. Take care to pass along the possible ECP_FEATURE_UNAVAILABLE\n * return code of mbedtls_ecp_point_read_binary() and leave p in a usable state.\n */\nstatic int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,\n                            mbedtls_ecp_keypair *key )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,\n                    (const unsigned char *) *p, end - *p ) ) == 0 )\n    {\n        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );\n    }\n\n    /*\n     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed\n     */\n    *p = (unsigned char *) end;\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_RSA_C)\n/*\n *  RSAPublicKey ::= SEQUENCE {\n *      modulus           INTEGER,  -- n\n *      publicExponent    INTEGER   -- e\n *  }\n */\nstatic int pk_get_rsapubkey( unsigned char **p,\n                             const unsigned char *end,\n                             mbedtls_rsa_context *rsa )\n{\n    int ret;\n    size_t len;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );\n\n    if( *p + len != end )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    /* Import N */\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );\n\n    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,\n                                        NULL, 0, NULL, 0 ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );\n\n    *p += len;\n\n    /* Import E */\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );\n\n    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,\n                                        NULL, 0, *p, len ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );\n\n    *p += len;\n\n    if( mbedtls_rsa_complete( rsa ) != 0 ||\n        mbedtls_rsa_check_pubkey( rsa ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );\n    }\n\n    if( *p != end )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_RSA_C */\n\n/* Get a PK algorithm identifier\n *\n *  AlgorithmIdentifier  ::=  SEQUENCE  {\n *       algorithm               OBJECT IDENTIFIER,\n *       parameters              ANY DEFINED BY algorithm OPTIONAL  }\n */\nstatic int pk_get_pk_alg( unsigned char **p,\n                          const unsigned char *end,\n                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )\n{\n    int ret;\n    mbedtls_asn1_buf alg_oid;\n\n    memset( params, 0, sizeof(mbedtls_asn1_buf) );\n\n    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );\n\n    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    /*\n     * No parameters with RSA (only for EC)\n     */\n    if( *pk_alg == MBEDTLS_PK_RSA &&\n            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||\n                params->len != 0 ) )\n    {\n        return( MBEDTLS_ERR_PK_INVALID_ALG );\n    }\n\n    return( 0 );\n}\n\n/*\n *  SubjectPublicKeyInfo  ::=  SEQUENCE  {\n *       algorithm            AlgorithmIdentifier,\n *       subjectPublicKey     BIT STRING }\n */\nint mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,\n                        mbedtls_pk_context *pk )\n{\n    int ret;\n    size_t len;\n    mbedtls_asn1_buf alg_params;\n    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;\n    const mbedtls_pk_info_t *pk_info;\n\n    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,\n                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = *p + len;\n\n    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );\n\n    if( *p + len != end )\n        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +\n                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_RSA_C)\n    if( pk_alg == MBEDTLS_PK_RSA )\n    {\n        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );\n    } else\n#endif /* MBEDTLS_RSA_C */\n#if defined(MBEDTLS_ECP_C)\n    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )\n    {\n        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );\n        if( ret == 0 )\n            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );\n    } else\n#endif /* MBEDTLS_ECP_C */\n        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;\n\n    if( ret == 0 && *p != end )\n        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY\n              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;\n\n    if( ret != 0 )\n        mbedtls_pk_free( pk );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_RSA_C)\n/*\n * Parse a PKCS#1 encoded private RSA key\n */\nstatic int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,\n                                   const unsigned char *key,\n                                   size_t keylen )\n{\n    int ret, version;\n    size_t len;\n    unsigned char *p, *end;\n\n    mbedtls_mpi T;\n    mbedtls_mpi_init( &T );\n\n    p = (unsigned char *) key;\n    end = p + keylen;\n\n    /*\n     * This function parses the RSAPrivateKey (PKCS#1)\n     *\n     *  RSAPrivateKey ::= SEQUENCE {\n     *      version           Version,\n     *      modulus           INTEGER,  -- n\n     *      publicExponent    INTEGER,  -- e\n     *      privateExponent   INTEGER,  -- d\n     *      prime1            INTEGER,  -- p\n     *      prime2            INTEGER,  -- q\n     *      exponent1         INTEGER,  -- d mod (p-1)\n     *      exponent2         INTEGER,  -- d mod (q-1)\n     *      coefficient       INTEGER,  -- (inverse of q) mod p\n     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL\n     *  }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = p + len;\n\n    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    if( version != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );\n    }\n\n    /* Import N */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,\n                                        NULL, 0, NULL, 0 ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Import E */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,\n                                        NULL, 0, p, len ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Import D */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,\n                                        p, len, NULL, 0 ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Import P */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,\n                                        NULL, 0, NULL, 0 ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Import Q */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||\n        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,\n                                        NULL, 0, NULL, 0 ) ) != 0 )\n        goto cleanup;\n    p += len;\n\n    /* Complete the RSA private key */\n    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )\n        goto cleanup;\n\n    /* Check optional parameters */\n    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||\n        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||\n        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )\n        goto cleanup;\n\n    if( p != end )\n    {\n        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &T );\n\n    if( ret != 0 )\n    {\n        /* Wrap error code if it's coming from a lower level */\n        if( ( ret & 0xff80 ) == 0 )\n            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;\n        else\n            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;\n\n        mbedtls_rsa_free( rsa );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_ECP_C)\n/*\n * Parse a SEC1 encoded private EC key\n */\nstatic int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,\n                                  const unsigned char *key,\n                                  size_t keylen )\n{\n    int ret;\n    int version, pubkey_done;\n    size_t len;\n    mbedtls_asn1_buf params;\n    unsigned char *p = (unsigned char *) key;\n    unsigned char *end = p + keylen;\n    unsigned char *end2;\n\n    /*\n     * RFC 5915, or SEC1 Appendix C.4\n     *\n     * ECPrivateKey ::= SEQUENCE {\n     *      version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\n     *      privateKey     OCTET STRING,\n     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\n     *      publicKey  [1] BIT STRING OPTIONAL\n     *    }\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = p + len;\n\n    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( version != 1 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )\n    {\n        mbedtls_ecp_keypair_free( eck );\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    p += len;\n\n    pubkey_done = 0;\n    if( p != end )\n    {\n        /*\n         * Is 'parameters' present?\n         */\n        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )\n        {\n            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||\n                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )\n            {\n                mbedtls_ecp_keypair_free( eck );\n                return( ret );\n            }\n        }\n        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )\n        {\n            mbedtls_ecp_keypair_free( eck );\n            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n        }\n\n        /*\n         * Is 'publickey' present? If not, or if we can't read it (eg because it\n         * is compressed), create it from the private key.\n         */\n        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )\n        {\n            end2 = p + len;\n\n            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )\n                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n            if( p + len != end2 )\n                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );\n\n            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )\n                pubkey_done = 1;\n            else\n            {\n                /*\n                 * The only acceptable failure mode of pk_get_ecpubkey() above\n                 * is if the point format is not recognized.\n                 */\n                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )\n                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n            }\n        }\n        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )\n        {\n            mbedtls_ecp_keypair_free( eck );\n            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n        }\n    }\n\n    if( ! pubkey_done &&\n        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,\n                                                      NULL, NULL ) ) != 0 )\n    {\n        mbedtls_ecp_keypair_free( eck );\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )\n    {\n        mbedtls_ecp_keypair_free( eck );\n        return( ret );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_ECP_C */\n\n/*\n * Parse an unencrypted PKCS#8 encoded private key\n *\n * Notes:\n *\n * - This function does not own the key buffer. It is the\n *   responsibility of the caller to take care of zeroizing\n *   and freeing it after use.\n *\n * - The function is responsible for freeing the provided\n *   PK context on failure.\n *\n */\nstatic int pk_parse_key_pkcs8_unencrypted_der(\n                                    mbedtls_pk_context *pk,\n                                    const unsigned char* key,\n                                    size_t keylen )\n{\n    int ret, version;\n    size_t len;\n    mbedtls_asn1_buf params;\n    unsigned char *p = (unsigned char *) key;\n    unsigned char *end = p + keylen;\n    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;\n    const mbedtls_pk_info_t *pk_info;\n\n    /*\n     * This function parses the PrivateKeyInfo object (PKCS#8 v1.2 = RFC 5208)\n     *\n     *    PrivateKeyInfo ::= SEQUENCE {\n     *      version                   Version,\n     *      privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n     *      privateKey                PrivateKey,\n     *      attributes           [0]  IMPLICIT Attributes OPTIONAL }\n     *\n     *    Version ::= INTEGER\n     *    PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier\n     *    PrivateKey ::= OCTET STRING\n     *\n     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey\n     */\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = p + len;\n\n    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( version != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );\n\n    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( len < 1 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +\n                MBEDTLS_ERR_ASN1_OUT_OF_DATA );\n\n    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )\n        return( ret );\n\n#if defined(MBEDTLS_RSA_C)\n    if( pk_alg == MBEDTLS_PK_RSA )\n    {\n        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n            return( ret );\n        }\n    } else\n#endif /* MBEDTLS_RSA_C */\n#if defined(MBEDTLS_ECP_C)\n    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )\n    {\n        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||\n            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n            return( ret );\n        }\n    } else\n#endif /* MBEDTLS_ECP_C */\n        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );\n\n    return( 0 );\n}\n\n/*\n * Parse an encrypted PKCS#8 encoded private key\n *\n * To save space, the decryption happens in-place on the given key buffer.\n * Also, while this function may modify the keybuffer, it doesn't own it,\n * and instead it is the responsibility of the caller to zeroize and properly\n * free it after use.\n *\n */\n#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)\nstatic int pk_parse_key_pkcs8_encrypted_der(\n                                    mbedtls_pk_context *pk,\n                                    unsigned char *key, size_t keylen,\n                                    const unsigned char *pwd, size_t pwdlen )\n{\n    int ret, decrypted = 0;\n    size_t len;\n    unsigned char *buf;\n    unsigned char *p, *end;\n    mbedtls_asn1_buf pbe_alg_oid, pbe_params;\n#if defined(MBEDTLS_PKCS12_C)\n    mbedtls_cipher_type_t cipher_alg;\n    mbedtls_md_type_t md_alg;\n#endif\n\n    p = key;\n    end = p + keylen;\n\n    if( pwdlen == 0 )\n        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );\n\n    /*\n     * This function parses the EncryptedPrivateKeyInfo object (PKCS#8)\n     *\n     *  EncryptedPrivateKeyInfo ::= SEQUENCE {\n     *    encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n     *    encryptedData        EncryptedData\n     *  }\n     *\n     *  EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n     *\n     *  EncryptedData ::= OCTET STRING\n     *\n     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo\n     *\n     */\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,\n            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n    }\n\n    end = p + len;\n\n    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )\n        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );\n\n    buf = p;\n\n    /*\n     * Decrypt EncryptedData with appropriate PBE\n     */\n#if defined(MBEDTLS_PKCS12_C)\n    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )\n    {\n        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,\n                                cipher_alg, md_alg,\n                                pwd, pwdlen, p, len, buf ) ) != 0 )\n        {\n            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )\n                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n\n            return( ret );\n        }\n\n        decrypted = 1;\n    }\n    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )\n    {\n        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,\n                                             MBEDTLS_PKCS12_PBE_DECRYPT,\n                                             pwd, pwdlen,\n                                             p, len, buf ) ) != 0 )\n        {\n            return( ret );\n        }\n\n        // Best guess for password mismatch when using RC4. If first tag is\n        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE\n        //\n        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )\n            return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n\n        decrypted = 1;\n    }\n    else\n#endif /* MBEDTLS_PKCS12_C */\n#if defined(MBEDTLS_PKCS5_C)\n    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )\n    {\n        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,\n                                  p, len, buf ) ) != 0 )\n        {\n            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )\n                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n\n            return( ret );\n        }\n\n        decrypted = 1;\n    }\n    else\n#endif /* MBEDTLS_PKCS5_C */\n    {\n        ((void) pwd);\n    }\n\n    if( decrypted == 0 )\n        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );\n\n    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );\n}\n#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */\n\n/*\n * Parse a private key\n */\nint mbedtls_pk_parse_key( mbedtls_pk_context *pk,\n                  const unsigned char *key, size_t keylen,\n                  const unsigned char *pwd, size_t pwdlen )\n{\n    int ret;\n    const mbedtls_pk_info_t *pk_info;\n\n#if defined(MBEDTLS_PEM_PARSE_C)\n    size_t len;\n    mbedtls_pem_context pem;\n\n    mbedtls_pem_init( &pem );\n\n#if defined(MBEDTLS_RSA_C)\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN RSA PRIVATE KEY-----\",\n                               \"-----END RSA PRIVATE KEY-----\",\n                               key, pwd, pwdlen, &len );\n\n    if( ret == 0 )\n    {\n        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );\n        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||\n            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),\n                                            pem.buf, pem.buflen ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n        }\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )\n        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )\n        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n        return( ret );\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_ECP_C)\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN EC PRIVATE KEY-----\",\n                               \"-----END EC PRIVATE KEY-----\",\n                               key, pwd, pwdlen, &len );\n    if( ret == 0 )\n    {\n        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );\n\n        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||\n            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),\n                                           pem.buf, pem.buflen ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n        }\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )\n        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );\n    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )\n        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n        return( ret );\n#endif /* MBEDTLS_ECP_C */\n\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN PRIVATE KEY-----\",\n                               \"-----END PRIVATE KEY-----\",\n                               key, NULL, 0, &len );\n    if( ret == 0 )\n    {\n        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,\n                                                pem.buf, pem.buflen ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n        }\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n        return( ret );\n\n#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                               \"-----BEGIN ENCRYPTED PRIVATE KEY-----\",\n                               \"-----END ENCRYPTED PRIVATE KEY-----\",\n                               key, NULL, 0, &len );\n    if( ret == 0 )\n    {\n        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,\n                                                      pem.buf, pem.buflen,\n                                                      pwd, pwdlen ) ) != 0 )\n        {\n            mbedtls_pk_free( pk );\n        }\n\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n        return( ret );\n#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */\n#else\n    ((void) ret);\n    ((void) pwd);\n    ((void) pwdlen);\n#endif /* MBEDTLS_PEM_PARSE_C */\n\n    /*\n     * At this point we only know it's not a PEM formatted key. Could be any\n     * of the known DER encoded private key formats\n     *\n     * We try the different DER format parsers to see if one passes without\n     * error\n     */\n#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)\n    {\n        unsigned char *key_copy;\n\n        if( ( key_copy = mbedtls_calloc( 1, keylen ) ) == NULL )\n            return( MBEDTLS_ERR_PK_ALLOC_FAILED );\n\n        memcpy( key_copy, key, keylen );\n\n        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,\n                                                pwd, pwdlen );\n\n        mbedtls_zeroize( key_copy, keylen );\n        mbedtls_free( key_copy );\n    }\n\n    if( ret == 0 )\n        return( 0 );\n\n    mbedtls_pk_free( pk );\n\n    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )\n    {\n        return( ret );\n    }\n#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */\n\n    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )\n        return( 0 );\n\n    mbedtls_pk_free( pk );\n\n#if defined(MBEDTLS_RSA_C)\n\n    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );\n    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||\n        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),\n                                        key, keylen ) ) != 0 )\n    {\n        mbedtls_pk_free( pk );\n    }\n    else\n    {\n        return( 0 );\n    }\n\n#endif /* MBEDTLS_RSA_C */\n\n#if defined(MBEDTLS_ECP_C)\n\n    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );\n    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||\n        ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),\n                                       key, keylen ) ) != 0 )\n    {\n        mbedtls_pk_free( pk );\n    }\n    else\n    {\n        return( 0 );\n    }\n\n#endif /* MBEDTLS_ECP_C */\n\n    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );\n}\n\n/*\n * Parse a public key\n */\nint mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,\n                         const unsigned char *key, size_t keylen )\n{\n    int ret;\n    unsigned char *p;\n#if defined(MBEDTLS_PEM_PARSE_C)\n    size_t len;\n    mbedtls_pem_context pem;\n\n    mbedtls_pem_init( &pem );\n\n    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */\n    if( keylen == 0 || key[keylen - 1] != '\\0' )\n        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;\n    else\n        ret = mbedtls_pem_read_buffer( &pem,\n                \"-----BEGIN PUBLIC KEY-----\",\n                \"-----END PUBLIC KEY-----\",\n                key, NULL, 0, &len );\n\n    if( ret == 0 )\n    {\n        /*\n         * Was PEM encoded\n         */\n        key = pem.buf;\n        keylen = pem.buflen;\n    }\n    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )\n    {\n        mbedtls_pem_free( &pem );\n        return( ret );\n    }\n#endif /* MBEDTLS_PEM_PARSE_C */\n    p = (unsigned char *) key;\n\n    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );\n\n#if defined(MBEDTLS_PEM_PARSE_C)\n    mbedtls_pem_free( &pem );\n#endif\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_PK_PARSE_C */\n","/*\n *  The RSA public-key cryptosystem\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n/*\n *  The following sources were referenced in the design of this implementation\n *  of the RSA algorithm:\n *\n *  [1] A method for obtaining digital signatures and public-key cryptosystems\n *      R Rivest, A Shamir, and L Adleman\n *      http://people.csail.mit.edu/rivest/pubs.html#RSA78\n *\n *  [2] Handbook of Applied Cryptography - 1997, Chapter 8\n *      Menezes, van Oorschot and Vanstone\n *\n *  [3] Malware Guard Extension: Using SGX to Conceal Cache Attacks\n *      Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice and\n *      Stefan Mangard\n *      https://arxiv.org/abs/1702.08719v2\n *\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_RSA_C)\n\n#include \"mbedtls/rsa.h\"\n#include \"mbedtls/rsa_internal.h\"\n#include \"mbedtls/oid.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_PKCS1_V21)\n#include \"mbedtls/md.h\"\n#endif\n\n#if defined(MBEDTLS_PKCS1_V15) && !defined(__OpenBSD__)\n#include <stdlib.h>\n#endif\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf printf\n#define mbedtls_calloc calloc\n#define mbedtls_free   free\n#endif\n\n#if !defined(MBEDTLS_RSA_ALT)\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;\n}\n\n/* constant-time buffer comparison */\nstatic inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )\n{\n    size_t i;\n    const unsigned char *A = (const unsigned char *) a;\n    const unsigned char *B = (const unsigned char *) b;\n    unsigned char diff = 0;\n\n    for( i = 0; i < n; i++ )\n        diff |= A[i] ^ B[i];\n\n    return( diff );\n}\n\nint mbedtls_rsa_import( mbedtls_rsa_context *ctx,\n                        const mbedtls_mpi *N,\n                        const mbedtls_mpi *P, const mbedtls_mpi *Q,\n                        const mbedtls_mpi *D, const mbedtls_mpi *E )\n{\n    int ret;\n\n    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||\n        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||\n        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||\n        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||\n        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n    }\n\n    if( N != NULL )\n        ctx->len = mbedtls_mpi_size( &ctx->N );\n\n    return( 0 );\n}\n\nint mbedtls_rsa_import_raw( mbedtls_rsa_context *ctx,\n                            unsigned char const *N, size_t N_len,\n                            unsigned char const *P, size_t P_len,\n                            unsigned char const *Q, size_t Q_len,\n                            unsigned char const *D, size_t D_len,\n                            unsigned char const *E, size_t E_len )\n{\n    int ret = 0;\n\n    if( N != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );\n        ctx->len = mbedtls_mpi_size( &ctx->N );\n    }\n\n    if( P != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );\n\n    if( Q != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );\n\n    if( D != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );\n\n    if( E != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );\n\ncleanup:\n\n    if( ret != 0 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n\n    return( 0 );\n}\n\n/*\n * Checks whether the context fields are set in such a way\n * that the RSA primitives will be able to execute without error.\n * It does *not* make guarantees for consistency of the parameters.\n */\nstatic int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,\n                              int blinding_needed )\n{\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    /* blinding_needed is only used for NO_CRT to decide whether\n     * P,Q need to be present or not. */\n    ((void) blinding_needed);\n#endif\n\n    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||\n        ctx->len > MBEDTLS_MPI_MAX_SIZE )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n\n    /*\n     * 1. Modular exponentiation needs positive, odd moduli.\n     */\n\n    /* Modular exponentiation wrt. N is always used for\n     * RSA public key operations. */\n    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||\n        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    /* Modular exponentiation for P and Q is only\n     * used for private key operations and if CRT\n     * is used. */\n    if( is_priv &&\n        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||\n          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||\n          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||\n          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n#endif /* !MBEDTLS_RSA_NO_CRT */\n\n    /*\n     * 2. Exponents must be positive\n     */\n\n    /* Always need E for public key operations */\n    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n#if defined(MBEDTLS_RSA_NO_CRT)\n    /* For private key operations, use D or DP & DQ\n     * as (unblinded) exponents. */\n    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n#else\n    if( is_priv &&\n        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||\n          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    /* Blinding shouldn't make exponents negative either,\n     * so check that P, Q >= 1 if that hasn't yet been\n     * done as part of 1. */\n#if defined(MBEDTLS_RSA_NO_CRT)\n    if( is_priv && blinding_needed &&\n        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||\n          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n#endif\n\n    /* It wouldn't lead to an error if it wasn't satisfied,\n     * but check for QP >= 1 nonetheless. */\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    if( is_priv &&\n        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n#endif\n\n    return( 0 );\n}\n\nint mbedtls_rsa_complete( mbedtls_rsa_context *ctx )\n{\n    int ret = 0;\n\n    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );\n    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );\n    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );\n    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );\n    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );\n\n    /*\n     * Check whether provided parameters are enough\n     * to deduce all others. The following incomplete\n     * parameter sets for private keys are supported:\n     *\n     * (1) P, Q missing.\n     * (2) D and potentially N missing.\n     *\n     */\n\n    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;\n    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;\n    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;\n    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;\n\n    /* These three alternatives are mutually exclusive */\n    const int is_priv = n_missing || pq_missing || d_missing;\n\n    if( !is_priv && !is_pub )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /*\n     * Step 1: Deduce N if P, Q are provided.\n     */\n\n    if( !have_N && have_P && have_Q )\n    {\n        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,\n                                         &ctx->Q ) ) != 0 )\n        {\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n        }\n\n        ctx->len = mbedtls_mpi_size( &ctx->N );\n    }\n\n    /*\n     * Step 2: Deduce and verify all remaining core parameters.\n     */\n\n    if( pq_missing )\n    {\n        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,\n                                         &ctx->P, &ctx->Q );\n        if( ret != 0 )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n\n    }\n    else if( d_missing )\n    {\n        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,\n                                                         &ctx->Q,\n                                                         &ctx->E,\n                                                         &ctx->D ) ) != 0 )\n        {\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n        }\n    }\n\n    /*\n     * Step 3: Deduce all additional parameters specific\n     *         to our current RSA implementation.\n     */\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    if( is_priv )\n    {\n        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,\n                                      &ctx->DP, &ctx->DQ, &ctx->QP );\n        if( ret != 0 )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n    }\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    /*\n     * Step 3: Basic sanity checks\n     */\n\n    return( rsa_check_context( ctx, is_priv, 1 ) );\n}\n\nint mbedtls_rsa_export_raw( const mbedtls_rsa_context *ctx,\n                            unsigned char *N, size_t N_len,\n                            unsigned char *P, size_t P_len,\n                            unsigned char *Q, size_t Q_len,\n                            unsigned char *D, size_t D_len,\n                            unsigned char *E, size_t E_len )\n{\n    int ret = 0;\n\n    /* Check if key is private or public */\n    const int is_priv =\n        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;\n\n    if( !is_priv )\n    {\n        /* If we're trying to export private parameters for a public key,\n         * something must be wrong. */\n        if( P != NULL || Q != NULL || D != NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    }\n\n    if( N != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->N, N, N_len ) );\n\n    if( P != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->P, P, P_len ) );\n\n    if( Q != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->Q, Q, Q_len ) );\n\n    if( D != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->D, D, D_len ) );\n\n    if( E != NULL )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->E, E, E_len ) );\n\ncleanup:\n\n    return( ret );\n}\n\nint mbedtls_rsa_export( const mbedtls_rsa_context *ctx,\n                        mbedtls_mpi *N, mbedtls_mpi *P, mbedtls_mpi *Q,\n                        mbedtls_mpi *D, mbedtls_mpi *E )\n{\n    int ret;\n\n    /* Check if key is private or public */\n    int is_priv =\n        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;\n\n    if( !is_priv )\n    {\n        /* If we're trying to export private parameters for a public key,\n         * something must be wrong. */\n        if( P != NULL || Q != NULL || D != NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    }\n\n    /* Export all requested core parameters. */\n\n    if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||\n        ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||\n        ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||\n        ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||\n        ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )\n    {\n        return( ret );\n    }\n\n    return( 0 );\n}\n\n/*\n * Export CRT parameters\n * This must also be implemented if CRT is not used, for being able to\n * write DER encoded RSA keys. The helper function mbedtls_rsa_deduce_crt\n * can be used in this case.\n */\nint mbedtls_rsa_export_crt( const mbedtls_rsa_context *ctx,\n                            mbedtls_mpi *DP, mbedtls_mpi *DQ, mbedtls_mpi *QP )\n{\n    int ret;\n\n    /* Check if key is private or public */\n    int is_priv =\n        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&\n        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;\n\n    if( !is_priv )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    /* Export all requested blinding parameters. */\n    if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||\n        ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||\n        ( QP != NULL && ( ret = mbedtls_mpi_copy( QP, &ctx->QP ) ) != 0 ) )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n    }\n#else\n    if( ( ret = mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,\n                                        DP, DQ, QP ) ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );\n    }\n#endif\n\n    return( 0 );\n}\n\n/*\n * Initialize an RSA context\n */\nvoid mbedtls_rsa_init( mbedtls_rsa_context *ctx,\n               int padding,\n               int hash_id )\n{\n    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );\n\n    mbedtls_rsa_set_padding( ctx, padding, hash_id );\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_init( &ctx->mutex );\n#endif\n}\n\n/*\n * Set padding for an existing RSA context\n */\nvoid mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )\n{\n    ctx->padding = padding;\n    ctx->hash_id = hash_id;\n}\n\n/*\n * Get length in bytes of RSA modulus\n */\n\nsize_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )\n{\n    return( ctx->len );\n}\n\n\n#if defined(MBEDTLS_GENPRIME)\n\n/*\n * Generate an RSA keypair\n */\nint mbedtls_rsa_gen_key( mbedtls_rsa_context *ctx,\n                 int (*f_rng)(void *, unsigned char *, size_t),\n                 void *p_rng,\n                 unsigned int nbits, int exponent )\n{\n    int ret;\n    mbedtls_mpi H, G;\n\n    if( f_rng == NULL || nbits < 128 || exponent < 3 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    if( nbits % 2 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &H );\n    mbedtls_mpi_init( &G );\n\n    /*\n     * find primes P and Q with Q < P so that:\n     * GCD( E, (P-1)*(Q-1) ) == 1\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->E, exponent ) );\n\n    do\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1, 0,\n                                                f_rng, p_rng ) );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->Q, nbits >> 1, 0,\n                                                f_rng, p_rng ) );\n\n        if( mbedtls_mpi_cmp_mpi( &ctx->P, &ctx->Q ) == 0 )\n            continue;\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P, &ctx->Q ) );\n        if( mbedtls_mpi_bitlen( &ctx->N ) != nbits )\n            continue;\n\n        if( mbedtls_mpi_cmp_mpi( &ctx->P, &ctx->Q ) < 0 )\n            mbedtls_mpi_swap( &ctx->P, &ctx->Q );\n\n        /* Temporarily replace P,Q by P-1, Q-1 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->P, &ctx->P, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->Q, &ctx->Q, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &ctx->P, &ctx->Q ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );\n    }\n    while( mbedtls_mpi_cmp_int( &G, 1 ) != 0 );\n\n    /* Restore P,Q */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->P,  &ctx->P, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->Q,  &ctx->Q, 1 ) );\n\n    ctx->len = mbedtls_mpi_size( &ctx->N );\n\n    /*\n     * D  = E^-1 mod ((P-1)*(Q-1))\n     * DP = D mod (P - 1)\n     * DQ = D mod (Q - 1)\n     * QP = Q^-1 mod P\n     */\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->D, &ctx->E, &H  ) );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    MBEDTLS_MPI_CHK( mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,\n                                             &ctx->DP, &ctx->DQ, &ctx->QP ) );\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    /* Double-check */\n    MBEDTLS_MPI_CHK( mbedtls_rsa_check_privkey( ctx ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &H );\n    mbedtls_mpi_free( &G );\n\n    if( ret != 0 )\n    {\n        mbedtls_rsa_free( ctx );\n        return( MBEDTLS_ERR_RSA_KEY_GEN_FAILED + ret );\n    }\n\n    return( 0 );\n}\n\n#endif /* MBEDTLS_GENPRIME */\n\n/*\n * Check a public RSA key\n */\nint mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )\n{\n    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n\n    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||\n        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||\n        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    return( 0 );\n}\n\n/*\n * Check for the consistency of all fields in an RSA private key context\n */\nint mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )\n{\n    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||\n        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,\n                                     &ctx->D, &ctx->E, NULL, NULL ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,\n                                       &ctx->DP, &ctx->DQ, &ctx->QP ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n#endif\n\n    return( 0 );\n}\n\n/*\n * Check if contexts holding a public and private key match\n */\nint mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,\n                                const mbedtls_rsa_context *prv )\n{\n    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||\n        mbedtls_rsa_check_privkey( prv ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||\n        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );\n    }\n\n    return( 0 );\n}\n\n/*\n * Do an RSA public key operation\n */\nint mbedtls_rsa_public( mbedtls_rsa_context *ctx,\n                const unsigned char *input,\n                unsigned char *output )\n{\n    int ret;\n    size_t olen;\n    mbedtls_mpi T;\n\n    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    mbedtls_mpi_init( &T );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );\n\n    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )\n    {\n        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    olen = ctx->len;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );\n\ncleanup:\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    mbedtls_mpi_free( &T );\n\n    if( ret != 0 )\n        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );\n\n    return( 0 );\n}\n\n/*\n * Generate or update blinding values, see section 10 of:\n *  KOCHER, Paul C. Timing attacks on implementations of Diffie-Hellman, RSA,\n *  DSS, and other systems. In : Advances in Cryptology-CRYPTO'96. Springer\n *  Berlin Heidelberg, 1996. p. 104-113.\n */\nstatic int rsa_prepare_blinding( mbedtls_rsa_context *ctx,\n                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )\n{\n    int ret, count = 0;\n\n    if( ctx->Vf.p != NULL )\n    {\n        /* We already have blinding values, just update them by squaring */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );\n\n        goto cleanup;\n    }\n\n    /* Unblinding value: Vf = random number, invertible mod N */\n    do {\n        if( count++ > 10 )\n            return( MBEDTLS_ERR_RSA_RNG_FAILED );\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );\n    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );\n\n    /* Blinding value: Vi =  Vf^(-e) mod N */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );\n\n\ncleanup:\n    return( ret );\n}\n\n/*\n * Exponent blinding supposed to prevent side-channel attacks using multiple\n * traces of measurements to recover the RSA key. The more collisions are there,\n * the more bits of the key can be recovered. See [3].\n *\n * Collecting n collisions with m bit long blinding value requires 2^(m-m/n)\n * observations on avarage.\n *\n * For example with 28 byte blinding to achieve 2 collisions the adversary has\n * to make 2^112 observations on avarage.\n *\n * (With the currently (as of 2017 April) known best algorithms breaking 2048\n * bit RSA requires approximately as much time as trying out 2^112 random keys.\n * Thus in this sense with 28 byte blinding the security is not reduced by\n * side-channel attacks like the one in [3])\n *\n * This countermeasure does not help if the key recovery is possible with a\n * single trace.\n */\n#define RSA_EXPONENT_BLINDING 28\n\n/*\n * Do an RSA private key operation\n */\nint mbedtls_rsa_private( mbedtls_rsa_context *ctx,\n                 int (*f_rng)(void *, unsigned char *, size_t),\n                 void *p_rng,\n                 const unsigned char *input,\n                 unsigned char *output )\n{\n    int ret;\n    size_t olen;\n    mbedtls_mpi T, T1, T2;\n    mbedtls_mpi P1, Q1, R;\n#if defined(MBEDTLS_RSA_NO_CRT)\n    mbedtls_mpi D_blind;\n    mbedtls_mpi *D = &ctx->D;\n#else\n    mbedtls_mpi DP_blind, DQ_blind;\n    mbedtls_mpi *DP = &ctx->DP;\n    mbedtls_mpi *DQ = &ctx->DQ;\n#endif\n\n    if( rsa_check_context( ctx, 1             /* private key checks */,\n                                f_rng != NULL /* blinding y/n       */ ) != 0 )\n    {\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n\n    mbedtls_mpi_init( &T ); mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );\n    mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 ); mbedtls_mpi_init( &R );\n\n    if( f_rng != NULL )\n    {\n#if defined(MBEDTLS_RSA_NO_CRT)\n        mbedtls_mpi_init( &D_blind );\n#else\n        mbedtls_mpi_init( &DP_blind );\n        mbedtls_mpi_init( &DQ_blind );\n#endif\n    }\n\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );\n    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )\n    {\n        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    if( f_rng != NULL )\n    {\n        /*\n         * Blinding\n         * T = T * Vi mod N\n         */\n        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );\n\n        /*\n         * Exponent blinding\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );\n\n#if defined(MBEDTLS_RSA_NO_CRT)\n        /*\n         * D_blind = ( P - 1 ) * ( Q - 1 ) * R + D\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,\n                         f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &D_blind, &P1, &Q1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &D_blind, &D_blind, &R ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &D_blind, &D_blind, &ctx->D ) );\n\n        D = &D_blind;\n#else\n        /*\n         * DP_blind = ( P - 1 ) * R + DP\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,\n                         f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,\n                    &ctx->DP ) );\n\n        DP = &DP_blind;\n\n        /*\n         * DQ_blind = ( Q - 1 ) * R + DQ\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,\n                         f_rng, p_rng ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,\n                    &ctx->DQ ) );\n\n        DQ = &DQ_blind;\n#endif /* MBEDTLS_RSA_NO_CRT */\n    }\n\n#if defined(MBEDTLS_RSA_NO_CRT)\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, D, &ctx->N, &ctx->RN ) );\n#else\n    /*\n     * Faster decryption using the CRT\n     *\n     * T1 = input ^ dP mod P\n     * T2 = input ^ dQ mod Q\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T1, &T, DP, &ctx->P, &ctx->RP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T2, &T, DQ, &ctx->Q, &ctx->RQ ) );\n\n    /*\n     * T = (T1 - T2) * (Q^-1 mod P) mod P\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &T1, &T2 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->QP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T1, &ctx->P ) );\n\n    /*\n     * T = T2 + T * Q\n     */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->Q ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &T2, &T1 ) );\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n    if( f_rng != NULL )\n    {\n        /*\n         * Unblind\n         * T = T * Vf mod N\n         */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );\n    }\n\n    olen = ctx->len;\n    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );\n\ncleanup:\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );\n    mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 ); mbedtls_mpi_free( &R );\n\n    if( f_rng != NULL )\n    {\n#if defined(MBEDTLS_RSA_NO_CRT)\n        mbedtls_mpi_free( &D_blind );\n#else\n        mbedtls_mpi_free( &DP_blind );\n        mbedtls_mpi_free( &DQ_blind );\n#endif\n    }\n\n    if( ret != 0 )\n        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_PKCS1_V21)\n/**\n * Generate and apply the MGF1 operation (from PKCS#1 v2.1) to a buffer.\n *\n * \\param dst       buffer to mask\n * \\param dlen      length of destination buffer\n * \\param src       source of the mask generation\n * \\param slen      length of the source buffer\n * \\param md_ctx    message digest context to use\n */\nstatic int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,\n                      size_t slen, mbedtls_md_context_t *md_ctx )\n{\n    unsigned char mask[MBEDTLS_MD_MAX_SIZE];\n    unsigned char counter[4];\n    unsigned char *p;\n    unsigned int hlen;\n    size_t i, use_len;\n    int ret = 0;\n\n    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );\n    memset( counter, 0, 4 );\n\n    hlen = mbedtls_md_get_size( md_ctx->md_info );\n\n    /* Generate and apply dbMask */\n    p = dst;\n\n    while( dlen > 0 )\n    {\n        use_len = hlen;\n        if( dlen < hlen )\n            use_len = dlen;\n\n        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )\n            goto exit;\n\n        for( i = 0; i < use_len; ++i )\n            *p++ ^= mask[i];\n\n        counter[3]++;\n\n        dlen -= use_len;\n    }\n\nexit:\n    mbedtls_zeroize( mask, sizeof( mask ) );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V21)\n/*\n * Implementation of the PKCS#1 v2.1 RSAES-OAEP-ENCRYPT function\n */\nint mbedtls_rsa_rsaes_oaep_encrypt( mbedtls_rsa_context *ctx,\n                            int (*f_rng)(void *, unsigned char *, size_t),\n                            void *p_rng,\n                            int mode,\n                            const unsigned char *label, size_t label_len,\n                            size_t ilen,\n                            const unsigned char *input,\n                            unsigned char *output )\n{\n    size_t olen;\n    int ret;\n    unsigned char *p = output;\n    unsigned int hlen;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    if( f_rng == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    olen = ctx->len;\n    hlen = mbedtls_md_get_size( md_info );\n\n    /* first comparison checks for overflow */\n    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    memset( output, 0, olen );\n\n    *p++ = 0;\n\n    /* Generate a random octet string seed */\n    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )\n        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );\n\n    p += hlen;\n\n    /* Construct DB */\n    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )\n        return( ret );\n    p += hlen;\n    p += olen - 2 * hlen - 2 - ilen;\n    *p++ = 1;\n    memcpy( p, input, ilen );\n\n    mbedtls_md_init( &md_ctx );\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )\n        goto exit;\n\n    /* maskedDB: Apply dbMask to DB */\n    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,\n                          &md_ctx ) ) != 0 )\n        goto exit;\n\n    /* maskedSeed: Apply seedMask to seed */\n    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,\n                          &md_ctx ) ) != 0 )\n        goto exit;\n\nexit:\n    mbedtls_md_free( &md_ctx );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( ( mode == MBEDTLS_RSA_PUBLIC )\n            ? mbedtls_rsa_public(  ctx, output, output )\n            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V15)\n/*\n * Implementation of the PKCS#1 v2.1 RSAES-PKCS1-V1_5-ENCRYPT function\n */\nint mbedtls_rsa_rsaes_pkcs1_v15_encrypt( mbedtls_rsa_context *ctx,\n                                 int (*f_rng)(void *, unsigned char *, size_t),\n                                 void *p_rng,\n                                 int mode, size_t ilen,\n                                 const unsigned char *input,\n                                 unsigned char *output )\n{\n    size_t nb_pad, olen;\n    int ret;\n    unsigned char *p = output;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    // We don't check p_rng because it won't be dereferenced here\n    if( f_rng == NULL || input == NULL || output == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    olen = ctx->len;\n\n    /* first comparison checks for overflow */\n    if( ilen + 11 < ilen || olen < ilen + 11 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    nb_pad = olen - 3 - ilen;\n\n    *p++ = 0;\n    if( mode == MBEDTLS_RSA_PUBLIC )\n    {\n        *p++ = MBEDTLS_RSA_CRYPT;\n\n        while( nb_pad-- > 0 )\n        {\n            int rng_dl = 100;\n\n            do {\n                ret = f_rng( p_rng, p, 1 );\n            } while( *p == 0 && --rng_dl && ret == 0 );\n\n            /* Check if RNG failed to generate data */\n            if( rng_dl == 0 || ret != 0 )\n                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );\n\n            p++;\n        }\n    }\n    else\n    {\n        *p++ = MBEDTLS_RSA_SIGN;\n\n        while( nb_pad-- > 0 )\n            *p++ = 0xFF;\n    }\n\n    *p++ = 0;\n    memcpy( p, input, ilen );\n\n    return( ( mode == MBEDTLS_RSA_PUBLIC )\n            ? mbedtls_rsa_public(  ctx, output, output )\n            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Add the message padding, then do an RSA operation\n */\nint mbedtls_rsa_pkcs1_encrypt( mbedtls_rsa_context *ctx,\n                       int (*f_rng)(void *, unsigned char *, size_t),\n                       void *p_rng,\n                       int mode, size_t ilen,\n                       const unsigned char *input,\n                       unsigned char *output )\n{\n    switch( ctx->padding )\n    {\n#if defined(MBEDTLS_PKCS1_V15)\n        case MBEDTLS_RSA_PKCS_V15:\n            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,\n                                                input, output );\n#endif\n\n#if defined(MBEDTLS_PKCS1_V21)\n        case MBEDTLS_RSA_PKCS_V21:\n            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,\n                                           ilen, input, output );\n#endif\n\n        default:\n            return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n    }\n}\n\n#if defined(MBEDTLS_PKCS1_V21)\n/*\n * Implementation of the PKCS#1 v2.1 RSAES-OAEP-DECRYPT function\n */\nint mbedtls_rsa_rsaes_oaep_decrypt( mbedtls_rsa_context *ctx,\n                            int (*f_rng)(void *, unsigned char *, size_t),\n                            void *p_rng,\n                            int mode,\n                            const unsigned char *label, size_t label_len,\n                            size_t *olen,\n                            const unsigned char *input,\n                            unsigned char *output,\n                            size_t output_max_len )\n{\n    int ret;\n    size_t ilen, i, pad_len;\n    unsigned char *p, bad, pad_done;\n    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];\n    unsigned char lhash[MBEDTLS_MD_MAX_SIZE];\n    unsigned int hlen;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n\n    /*\n     * Parameters sanity checks\n     */\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    ilen = ctx->len;\n\n    if( ilen < 16 || ilen > sizeof( buf ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    hlen = mbedtls_md_get_size( md_info );\n\n    // checking for integer underflow\n    if( 2 * hlen + 2 > ilen )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /*\n     * RSA operation\n     */\n    ret = ( mode == MBEDTLS_RSA_PUBLIC )\n          ? mbedtls_rsa_public(  ctx, input, buf )\n          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );\n\n    if( ret != 0 )\n        goto cleanup;\n\n    /*\n     * Unmask data and generate lHash\n     */\n    mbedtls_md_init( &md_ctx );\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )\n    {\n        mbedtls_md_free( &md_ctx );\n        goto cleanup;\n    }\n\n    /* seed: Apply seedMask to maskedSeed */\n    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,\n                          &md_ctx ) ) != 0 ||\n    /* DB: Apply dbMask to maskedDB */\n        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,\n                          &md_ctx ) ) != 0 )\n    {\n        mbedtls_md_free( &md_ctx );\n        goto cleanup;\n    }\n\n    mbedtls_md_free( &md_ctx );\n\n    /* Generate lHash */\n    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )\n        goto cleanup;\n\n    /*\n     * Check contents, in \"constant-time\"\n     */\n    p = buf;\n    bad = 0;\n\n    bad |= *p++; /* First byte must be 0 */\n\n    p += hlen; /* Skip seed */\n\n    /* Check lHash */\n    for( i = 0; i < hlen; i++ )\n        bad |= lhash[i] ^ *p++;\n\n    /* Get zero-padding len, but always read till end of buffer\n     * (minus one, for the 01 byte) */\n    pad_len = 0;\n    pad_done = 0;\n    for( i = 0; i < ilen - 2 * hlen - 2; i++ )\n    {\n        pad_done |= p[i];\n        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;\n    }\n\n    p += pad_len;\n    bad |= *p++ ^ 0x01;\n\n    /*\n     * The only information \"leaked\" is whether the padding was correct or not\n     * (eg, no data is copied if it was not correct). This meets the\n     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between\n     * the different error conditions.\n     */\n    if( bad != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;\n        goto cleanup;\n    }\n\n    if( ilen - ( p - buf ) > output_max_len )\n    {\n        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;\n        goto cleanup;\n    }\n\n    *olen = ilen - (p - buf);\n    memcpy( output, p, *olen );\n    ret = 0;\n\ncleanup:\n    mbedtls_zeroize( buf, sizeof( buf ) );\n    mbedtls_zeroize( lhash, sizeof( lhash ) );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V15)\n/*\n * Implementation of the PKCS#1 v2.1 RSAES-PKCS1-V1_5-DECRYPT function\n */\nint mbedtls_rsa_rsaes_pkcs1_v15_decrypt( mbedtls_rsa_context *ctx,\n                                 int (*f_rng)(void *, unsigned char *, size_t),\n                                 void *p_rng,\n                                 int mode, size_t *olen,\n                                 const unsigned char *input,\n                                 unsigned char *output,\n                                 size_t output_max_len)\n{\n    int ret;\n    size_t ilen, pad_count = 0, i;\n    unsigned char *p, bad, pad_done = 0;\n    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    ilen = ctx->len;\n\n    if( ilen < 16 || ilen > sizeof( buf ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    ret = ( mode == MBEDTLS_RSA_PUBLIC )\n          ? mbedtls_rsa_public(  ctx, input, buf )\n          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );\n\n    if( ret != 0 )\n        goto cleanup;\n\n    p = buf;\n    bad = 0;\n\n    /*\n     * Check and get padding len in \"constant-time\"\n     */\n    bad |= *p++; /* First byte must be 0 */\n\n    /* This test does not depend on secret data */\n    if( mode == MBEDTLS_RSA_PRIVATE )\n    {\n        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;\n\n        /* Get padding len, but always read till end of buffer\n         * (minus one, for the 00 byte) */\n        for( i = 0; i < ilen - 3; i++ )\n        {\n            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;\n            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;\n        }\n\n        p += pad_count;\n        bad |= *p++; /* Must be zero */\n    }\n    else\n    {\n        bad |= *p++ ^ MBEDTLS_RSA_SIGN;\n\n        /* Get padding len, but always read till end of buffer\n         * (minus one, for the 00 byte) */\n        for( i = 0; i < ilen - 3; i++ )\n        {\n            pad_done |= ( p[i] != 0xFF );\n            pad_count += ( pad_done == 0 );\n        }\n\n        p += pad_count;\n        bad |= *p++; /* Must be zero */\n    }\n\n    bad |= ( pad_count < 8 );\n\n    if( bad )\n    {\n        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;\n        goto cleanup;\n    }\n\n    if( ilen - ( p - buf ) > output_max_len )\n    {\n        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;\n        goto cleanup;\n    }\n\n    *olen = ilen - (p - buf);\n    memcpy( output, p, *olen );\n    ret = 0;\n\ncleanup:\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Do an RSA operation, then remove the message padding\n */\nint mbedtls_rsa_pkcs1_decrypt( mbedtls_rsa_context *ctx,\n                       int (*f_rng)(void *, unsigned char *, size_t),\n                       void *p_rng,\n                       int mode, size_t *olen,\n                       const unsigned char *input,\n                       unsigned char *output,\n                       size_t output_max_len)\n{\n    switch( ctx->padding )\n    {\n#if defined(MBEDTLS_PKCS1_V15)\n        case MBEDTLS_RSA_PKCS_V15:\n            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,\n                                                input, output, output_max_len );\n#endif\n\n#if defined(MBEDTLS_PKCS1_V21)\n        case MBEDTLS_RSA_PKCS_V21:\n            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,\n                                           olen, input, output,\n                                           output_max_len );\n#endif\n\n        default:\n            return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n    }\n}\n\n#if defined(MBEDTLS_PKCS1_V21)\n/*\n * Implementation of the PKCS#1 v2.1 RSASSA-PSS-SIGN function\n */\nint mbedtls_rsa_rsassa_pss_sign( mbedtls_rsa_context *ctx,\n                         int (*f_rng)(void *, unsigned char *, size_t),\n                         void *p_rng,\n                         int mode,\n                         mbedtls_md_type_t md_alg,\n                         unsigned int hashlen,\n                         const unsigned char *hash,\n                         unsigned char *sig )\n{\n    size_t olen;\n    unsigned char *p = sig;\n    unsigned char salt[MBEDTLS_MD_MAX_SIZE];\n    unsigned int slen, hlen, offset = 0;\n    int ret;\n    size_t msb;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    if( f_rng == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    olen = ctx->len;\n\n    if( md_alg != MBEDTLS_MD_NONE )\n    {\n        /* Gather length of hash to sign */\n        md_info = mbedtls_md_info_from_type( md_alg );\n        if( md_info == NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        hashlen = mbedtls_md_get_size( md_info );\n    }\n\n    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    hlen = mbedtls_md_get_size( md_info );\n    slen = hlen;\n\n    if( olen < hlen + slen + 2 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    memset( sig, 0, olen );\n\n    /* Generate salt of length slen */\n    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )\n        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );\n\n    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */\n    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;\n    p += olen - hlen * 2 - 2;\n    *p++ = 0x01;\n    memcpy( p, salt, slen );\n    p += slen;\n\n    mbedtls_md_init( &md_ctx );\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )\n        goto exit;\n\n    /* Generate H = Hash( M' ) */\n    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )\n        goto exit;\n\n    /* Compensate for boundary condition when applying mask */\n    if( msb % 8 == 0 )\n        offset = 1;\n\n    /* maskedDB: Apply dbMask to DB */\n    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,\n                          &md_ctx ) ) != 0 )\n        goto exit;\n\n    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;\n    sig[0] &= 0xFF >> ( olen * 8 - msb );\n\n    p += hlen;\n    *p++ = 0xBC;\n\n    mbedtls_zeroize( salt, sizeof( salt ) );\n\nexit:\n    mbedtls_md_free( &md_ctx );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( ( mode == MBEDTLS_RSA_PUBLIC )\n            ? mbedtls_rsa_public(  ctx, sig, sig )\n            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V15)\n/*\n * Implementation of the PKCS#1 v2.1 RSASSA-PKCS1-V1_5-SIGN function\n */\n\n/* Construct a PKCS v1.5 encoding of a hashed message\n *\n * This is used both for signature generation and verification.\n *\n * Parameters:\n * - md_alg:  Identifies the hash algorithm used to generate the given hash;\n *            MBEDTLS_MD_NONE if raw data is signed.\n * - hashlen: Length of hash in case hashlen is MBEDTLS_MD_NONE.\n * - hash:    Buffer containing the hashed message or the raw data.\n * - dst_len: Length of the encoded message.\n * - dst:     Buffer to hold the encoded message.\n *\n * Assumptions:\n * - hash has size hashlen if md_alg == MBEDTLS_MD_NONE.\n * - hash has size corresponding to md_alg if md_alg != MBEDTLS_MD_NONE.\n * - dst points to a buffer of size at least dst_len.\n *\n */\nstatic int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,\n                                        unsigned int hashlen,\n                                        const unsigned char *hash,\n                                        size_t dst_len,\n                                        unsigned char *dst )\n{\n    size_t oid_size  = 0;\n    size_t nb_pad    = dst_len;\n    unsigned char *p = dst;\n    const char *oid  = NULL;\n\n    /* Are we signing hashed or raw data? */\n    if( md_alg != MBEDTLS_MD_NONE )\n    {\n        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );\n        if( md_info == NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        hashlen = mbedtls_md_get_size( md_info );\n\n        /* Double-check that 8 + hashlen + oid_size can be used as a\n         * 1-byte ASN.1 length encoding and that there's no overflow. */\n        if( 8 + hashlen + oid_size  >= 0x80         ||\n            10 + hashlen            <  hashlen      ||\n            10 + hashlen + oid_size <  10 + hashlen )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        /*\n         * Static bounds check:\n         * - Need 10 bytes for five tag-length pairs.\n         *   (Insist on 1-byte length encodings to protect against variants of\n         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)\n         * - Need hashlen bytes for hash\n         * - Need oid_size bytes for hash alg OID.\n         */\n        if( nb_pad < 10 + hashlen + oid_size )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n        nb_pad -= 10 + hashlen + oid_size;\n    }\n    else\n    {\n        if( nb_pad < hashlen )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        nb_pad -= hashlen;\n    }\n\n    /* Need space for signature header and padding delimiter (3 bytes),\n     * and 8 bytes for the minimal padding */\n    if( nb_pad < 3 + 8 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    nb_pad -= 3;\n\n    /* Now nb_pad is the amount of memory to be filled\n     * with padding, and at least 8 bytes long. */\n\n    /* Write signature header and padding */\n    *p++ = 0;\n    *p++ = MBEDTLS_RSA_SIGN;\n    memset( p, 0xFF, nb_pad );\n    p += nb_pad;\n    *p++ = 0;\n\n    /* Are we signing raw data? */\n    if( md_alg == MBEDTLS_MD_NONE )\n    {\n        memcpy( p, hash, hashlen );\n        return( 0 );\n    }\n\n    /* Signing hashed data, add corresponding ASN.1 structure\n     *\n     * DigestInfo ::= SEQUENCE {\n     *   digestAlgorithm DigestAlgorithmIdentifier,\n     *   digest Digest }\n     * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n     * Digest ::= OCTET STRING\n     *\n     * Schematic:\n     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]\n     *                                 TAG-NULL + LEN [ NULL ] ]\n     *                 TAG-OCTET + LEN [ HASH ] ]\n     */\n    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;\n    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );\n    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;\n    *p++ = (unsigned char)( 0x04 + oid_size );\n    *p++ = MBEDTLS_ASN1_OID;\n    *p++ = (unsigned char) oid_size;\n    memcpy( p, oid, oid_size );\n    p += oid_size;\n    *p++ = MBEDTLS_ASN1_NULL;\n    *p++ = 0x00;\n    *p++ = MBEDTLS_ASN1_OCTET_STRING;\n    *p++ = (unsigned char) hashlen;\n    memcpy( p, hash, hashlen );\n    p += hashlen;\n\n    /* Just a sanity-check, should be automatic\n     * after the initial bounds check. */\n    if( p != dst + dst_len )\n    {\n        mbedtls_zeroize( dst, dst_len );\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    }\n\n    return( 0 );\n}\n\n/*\n * Do an RSA operation to sign the message digest\n */\nint mbedtls_rsa_rsassa_pkcs1_v15_sign( mbedtls_rsa_context *ctx,\n                               int (*f_rng)(void *, unsigned char *, size_t),\n                               void *p_rng,\n                               int mode,\n                               mbedtls_md_type_t md_alg,\n                               unsigned int hashlen,\n                               const unsigned char *hash,\n                               unsigned char *sig )\n{\n    int ret;\n    unsigned char *sig_try = NULL, *verif = NULL;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /*\n     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)\n     */\n\n    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,\n                                             ctx->len, sig ) ) != 0 )\n        return( ret );\n\n    /*\n     * Call respective RSA primitive\n     */\n\n    if( mode == MBEDTLS_RSA_PUBLIC )\n    {\n        /* Skip verification on a public key operation */\n        return( mbedtls_rsa_public( ctx, sig, sig ) );\n    }\n\n    /* Private key operation\n     *\n     * In order to prevent Lenstra's attack, make the signature in a\n     * temporary buffer and check it before returning it.\n     */\n\n    sig_try = mbedtls_calloc( 1, ctx->len );\n    if( sig_try == NULL )\n        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n\n    verif = mbedtls_calloc( 1, ctx->len );\n    if( verif == NULL )\n    {\n        mbedtls_free( sig_try );\n        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );\n    }\n\n    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );\n\n    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;\n        goto cleanup;\n    }\n\n    memcpy( sig, sig_try, ctx->len );\n\ncleanup:\n    mbedtls_free( sig_try );\n    mbedtls_free( verif );\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Do an RSA operation to sign the message digest\n */\nint mbedtls_rsa_pkcs1_sign( mbedtls_rsa_context *ctx,\n                    int (*f_rng)(void *, unsigned char *, size_t),\n                    void *p_rng,\n                    int mode,\n                    mbedtls_md_type_t md_alg,\n                    unsigned int hashlen,\n                    const unsigned char *hash,\n                    unsigned char *sig )\n{\n    switch( ctx->padding )\n    {\n#if defined(MBEDTLS_PKCS1_V15)\n        case MBEDTLS_RSA_PKCS_V15:\n            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,\n                                              hashlen, hash, sig );\n#endif\n\n#if defined(MBEDTLS_PKCS1_V21)\n        case MBEDTLS_RSA_PKCS_V21:\n            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,\n                                        hashlen, hash, sig );\n#endif\n\n        default:\n            return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n    }\n}\n\n#if defined(MBEDTLS_PKCS1_V21)\n/*\n * Implementation of the PKCS#1 v2.1 RSASSA-PSS-VERIFY function\n */\nint mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_rsa_context *ctx,\n                               int (*f_rng)(void *, unsigned char *, size_t),\n                               void *p_rng,\n                               int mode,\n                               mbedtls_md_type_t md_alg,\n                               unsigned int hashlen,\n                               const unsigned char *hash,\n                               mbedtls_md_type_t mgf1_hash_id,\n                               int expected_salt_len,\n                               const unsigned char *sig )\n{\n    int ret;\n    size_t siglen;\n    unsigned char *p;\n    unsigned char *hash_start;\n    unsigned char result[MBEDTLS_MD_MAX_SIZE];\n    unsigned char zeros[8];\n    unsigned int hlen;\n    size_t observed_salt_len, msb;\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    siglen = ctx->len;\n\n    if( siglen < 16 || siglen > sizeof( buf ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    ret = ( mode == MBEDTLS_RSA_PUBLIC )\n          ? mbedtls_rsa_public(  ctx, sig, buf )\n          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );\n\n    if( ret != 0 )\n        return( ret );\n\n    p = buf;\n\n    if( buf[siglen - 1] != 0xBC )\n        return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n\n    if( md_alg != MBEDTLS_MD_NONE )\n    {\n        /* Gather length of hash to sign */\n        md_info = mbedtls_md_info_from_type( md_alg );\n        if( md_info == NULL )\n            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n        hashlen = mbedtls_md_get_size( md_info );\n    }\n\n    md_info = mbedtls_md_info_from_type( mgf1_hash_id );\n    if( md_info == NULL )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    hlen = mbedtls_md_get_size( md_info );\n\n    memset( zeros, 0, 8 );\n\n    /*\n     * Note: EMSA-PSS verification is over the length of N - 1 bits\n     */\n    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;\n\n    if( buf[0] >> ( 8 - siglen * 8 + msb ) )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /* Compensate for boundary condition when applying mask */\n    if( msb % 8 == 0 )\n    {\n        p++;\n        siglen -= 1;\n    }\n\n    if( siglen < hlen + 2 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n    hash_start = p + siglen - hlen - 1;\n\n    mbedtls_md_init( &md_ctx );\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )\n        goto exit;\n\n    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );\n    if( ret != 0 )\n        goto exit;\n\n    buf[0] &= 0xFF >> ( siglen * 8 - msb );\n\n    while( p < hash_start - 1 && *p == 0 )\n        p++;\n\n    if( *p++ != 0x01 )\n    {\n        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;\n        goto exit;\n    }\n\n    observed_salt_len = hash_start - p;\n\n    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&\n        observed_salt_len != (size_t) expected_salt_len )\n    {\n        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;\n        goto exit;\n    }\n\n    /*\n     * Generate H = Hash( M' )\n     */\n    ret = mbedtls_md_starts( &md_ctx );\n    if ( ret != 0 )\n        goto exit;\n    ret = mbedtls_md_update( &md_ctx, zeros, 8 );\n    if ( ret != 0 )\n        goto exit;\n    ret = mbedtls_md_update( &md_ctx, hash, hashlen );\n    if ( ret != 0 )\n        goto exit;\n    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );\n    if ( ret != 0 )\n        goto exit;\n    ret = mbedtls_md_finish( &md_ctx, result );\n    if ( ret != 0 )\n        goto exit;\n\n    if( memcmp( hash_start, result, hlen ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;\n        goto exit;\n    }\n\nexit:\n    mbedtls_md_free( &md_ctx );\n\n    return( ret );\n}\n\n/*\n * Simplified PKCS#1 v2.1 RSASSA-PSS-VERIFY function\n */\nint mbedtls_rsa_rsassa_pss_verify( mbedtls_rsa_context *ctx,\n                           int (*f_rng)(void *, unsigned char *, size_t),\n                           void *p_rng,\n                           int mode,\n                           mbedtls_md_type_t md_alg,\n                           unsigned int hashlen,\n                           const unsigned char *hash,\n                           const unsigned char *sig )\n{\n    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )\n                             ? (mbedtls_md_type_t) ctx->hash_id\n                             : md_alg;\n\n    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,\n                                       md_alg, hashlen, hash,\n                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,\n                                       sig ) );\n\n}\n#endif /* MBEDTLS_PKCS1_V21 */\n\n#if defined(MBEDTLS_PKCS1_V15)\n/*\n * Implementation of the PKCS#1 v2.1 RSASSA-PKCS1-v1_5-VERIFY function\n */\nint mbedtls_rsa_rsassa_pkcs1_v15_verify( mbedtls_rsa_context *ctx,\n                                 int (*f_rng)(void *, unsigned char *, size_t),\n                                 void *p_rng,\n                                 int mode,\n                                 mbedtls_md_type_t md_alg,\n                                 unsigned int hashlen,\n                                 const unsigned char *hash,\n                                 const unsigned char *sig )\n{\n    int ret = 0;\n    const size_t sig_len = ctx->len;\n    unsigned char *encoded = NULL, *encoded_expected = NULL;\n\n    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )\n        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );\n\n    /*\n     * Prepare expected PKCS1 v1.5 encoding of hash.\n     */\n\n    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||\n        ( encoded_expected = mbedtls_calloc( 1, sig_len ) ) == NULL )\n    {\n        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;\n        goto cleanup;\n    }\n\n    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,\n                                             encoded_expected ) ) != 0 )\n        goto cleanup;\n\n    /*\n     * Apply RSA primitive to get what should be PKCS1 encoded hash.\n     */\n\n    ret = ( mode == MBEDTLS_RSA_PUBLIC )\n          ? mbedtls_rsa_public(  ctx, sig, encoded )\n          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );\n    if( ret != 0 )\n        goto cleanup;\n\n    /*\n     * Compare\n     */\n\n    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,\n                                      sig_len ) ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;\n        goto cleanup;\n    }\n\ncleanup:\n\n    if( encoded != NULL )\n    {\n        mbedtls_zeroize( encoded, sig_len );\n        mbedtls_free( encoded );\n    }\n\n    if( encoded_expected != NULL )\n    {\n        mbedtls_zeroize( encoded_expected, sig_len );\n        mbedtls_free( encoded_expected );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Do an RSA operation and check the message digest\n */\nint mbedtls_rsa_pkcs1_verify( mbedtls_rsa_context *ctx,\n                      int (*f_rng)(void *, unsigned char *, size_t),\n                      void *p_rng,\n                      int mode,\n                      mbedtls_md_type_t md_alg,\n                      unsigned int hashlen,\n                      const unsigned char *hash,\n                      const unsigned char *sig )\n{\n    switch( ctx->padding )\n    {\n#if defined(MBEDTLS_PKCS1_V15)\n        case MBEDTLS_RSA_PKCS_V15:\n            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,\n                                                hashlen, hash, sig );\n#endif\n\n#if defined(MBEDTLS_PKCS1_V21)\n        case MBEDTLS_RSA_PKCS_V21:\n            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,\n                                          hashlen, hash, sig );\n#endif\n\n        default:\n            return( MBEDTLS_ERR_RSA_INVALID_PADDING );\n    }\n}\n\n/*\n * Copy the components of an RSA key\n */\nint mbedtls_rsa_copy( mbedtls_rsa_context *dst, const mbedtls_rsa_context *src )\n{\n    int ret;\n\n    dst->ver = src->ver;\n    dst->len = src->len;\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->N, &src->N ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->E, &src->E ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->D, &src->D ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->P, &src->P ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Q, &src->Q ) );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->DP, &src->DP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->DQ, &src->DQ ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->QP, &src->QP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RP, &src->RP ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RQ, &src->RQ ) );\n#endif\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RN, &src->RN ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Vi, &src->Vi ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Vf, &src->Vf ) );\n\n    dst->padding = src->padding;\n    dst->hash_id = src->hash_id;\n\ncleanup:\n    if( ret != 0 )\n        mbedtls_rsa_free( dst );\n\n    return( ret );\n}\n\n/*\n * Free the components of an RSA key\n */\nvoid mbedtls_rsa_free( mbedtls_rsa_context *ctx )\n{\n    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );\n    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );\n    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );\n    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );\n\n#if !defined(MBEDTLS_RSA_NO_CRT)\n    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );\n    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );\n    mbedtls_mpi_free( &ctx->DP );\n#endif /* MBEDTLS_RSA_NO_CRT */\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_free( &ctx->mutex );\n#endif\n}\n\n#endif /* !MBEDTLS_RSA_ALT */\n\n#if defined(MBEDTLS_SELF_TEST)\n\n#include \"mbedtls/sha1.h\"\n\n/*\n * Example RSA-1024 keypair, for test purposes\n */\n#define KEY_LEN 128\n\n#define RSA_N   \"9292758453063D803DD603D5E777D788\" \\\n                \"8ED1D5BF35786190FA2F23EBC0848AEA\" \\\n                \"DDA92CA6C3D80B32C4D109BE0F36D6AE\" \\\n                \"7130B9CED7ACDF54CFC7555AC14EEBAB\" \\\n                \"93A89813FBF3C4F8066D2D800F7C38A8\" \\\n                \"1AE31942917403FF4946B0A83D3D3E05\" \\\n                \"EE57C6F5F5606FB5D4BC6CD34EE0801A\" \\\n                \"5E94BB77B07507233A0BC7BAC8F90F79\"\n\n#define RSA_E   \"10001\"\n\n#define RSA_D   \"24BF6185468786FDD303083D25E64EFC\" \\\n                \"66CA472BC44D253102F8B4A9D3BFA750\" \\\n                \"91386C0077937FE33FA3252D28855837\" \\\n                \"AE1B484A8A9A45F7EE8C0C634F99E8CD\" \\\n                \"DF79C5CE07EE72C7F123142198164234\" \\\n                \"CABB724CF78B8173B9F880FC86322407\" \\\n                \"AF1FEDFDDE2BEB674CA15F3E81A1521E\" \\\n                \"071513A1E85B5DFA031F21ECAE91A34D\"\n\n#define RSA_P   \"C36D0EB7FCD285223CFB5AABA5BDA3D8\" \\\n                \"2C01CAD19EA484A87EA4377637E75500\" \\\n                \"FCB2005C5C7DD6EC4AC023CDA285D796\" \\\n                \"C3D9E75E1EFC42488BB4F1D13AC30A57\"\n\n#define RSA_Q   \"C000DF51A7C77AE8D7C7370C1FF55B69\" \\\n                \"E211C2B9E5DB1ED0BF61D0D9899620F4\" \\\n                \"910E4168387E3C30AA1E00C339A79508\" \\\n                \"8452DD96A9A5EA5D9DCA68DA636032AF\"\n\n#define PT_LEN  24\n#define RSA_PT  \"\\xAA\\xBB\\xCC\\x03\\x02\\x01\\x00\\xFF\\xFF\\xFF\\xFF\\xFF\" \\\n                \"\\x11\\x22\\x33\\x0A\\x0B\\x0C\\xCC\\xDD\\xDD\\xDD\\xDD\\xDD\"\n\n#if defined(MBEDTLS_PKCS1_V15)\nstatic int myrand( void *rng_state, unsigned char *output, size_t len )\n{\n#if !defined(__OpenBSD__)\n    size_t i;\n\n    if( rng_state != NULL )\n        rng_state  = NULL;\n\n    for( i = 0; i < len; ++i )\n        output[i] = rand();\n#else\n    if( rng_state != NULL )\n        rng_state = NULL;\n\n    arc4random_buf( output, len );\n#endif /* !OpenBSD */\n\n    return( 0 );\n}\n#endif /* MBEDTLS_PKCS1_V15 */\n\n/*\n * Checkup routine\n */\nint mbedtls_rsa_self_test( int verbose )\n{\n    int ret = 0;\n#if defined(MBEDTLS_PKCS1_V15)\n    size_t len;\n    mbedtls_rsa_context rsa;\n    unsigned char rsa_plaintext[PT_LEN];\n    unsigned char rsa_decrypted[PT_LEN];\n    unsigned char rsa_ciphertext[KEY_LEN];\n#if defined(MBEDTLS_SHA1_C)\n    unsigned char sha1sum[20];\n#endif\n\n    mbedtls_mpi K;\n\n    mbedtls_mpi_init( &K );\n    mbedtls_rsa_init( &rsa, MBEDTLS_RSA_PKCS_V15, 0 );\n\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_N  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, &K, NULL, NULL, NULL, NULL ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_P  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, NULL, &K, NULL, NULL, NULL ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_Q  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, NULL, NULL, &K, NULL, NULL ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_D  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, NULL, NULL, NULL, &K, NULL ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &K, 16, RSA_E  ) );\n    MBEDTLS_MPI_CHK( mbedtls_rsa_import( &rsa, NULL, NULL, NULL, NULL, &K ) );\n\n    MBEDTLS_MPI_CHK( mbedtls_rsa_complete( &rsa ) );\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  RSA key validation: \" );\n\n    if( mbedtls_rsa_check_pubkey(  &rsa ) != 0 ||\n        mbedtls_rsa_check_privkey( &rsa ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n  PKCS#1 encryption : \" );\n\n    memcpy( rsa_plaintext, RSA_PT, PT_LEN );\n\n    if( mbedtls_rsa_pkcs1_encrypt( &rsa, myrand, NULL, MBEDTLS_RSA_PUBLIC,\n                                   PT_LEN, rsa_plaintext,\n                                   rsa_ciphertext ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n  PKCS#1 decryption : \" );\n\n    if( mbedtls_rsa_pkcs1_decrypt( &rsa, myrand, NULL, MBEDTLS_RSA_PRIVATE,\n                                   &len, rsa_ciphertext, rsa_decrypted,\n                                   sizeof(rsa_decrypted) ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( memcmp( rsa_decrypted, rsa_plaintext, len ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n\n#if defined(MBEDTLS_SHA1_C)\n    if( verbose != 0 )\n        mbedtls_printf( \"  PKCS#1 data sign  : \" );\n\n    if( mbedtls_sha1_ret( rsa_plaintext, PT_LEN, sha1sum ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( mbedtls_rsa_pkcs1_sign( &rsa, myrand, NULL,\n                                MBEDTLS_RSA_PRIVATE, MBEDTLS_MD_SHA1, 0,\n                                sha1sum, rsa_ciphertext ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n  PKCS#1 sig. verify: \" );\n\n    if( mbedtls_rsa_pkcs1_verify( &rsa, NULL, NULL,\n                                  MBEDTLS_RSA_PUBLIC, MBEDTLS_MD_SHA1, 0,\n                                  sha1sum, rsa_ciphertext ) != 0 )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"failed\\n\" );\n\n        return( 1 );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"passed\\n\" );\n#endif /* MBEDTLS_SHA1_C */\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\ncleanup:\n    mbedtls_mpi_free( &K );\n    mbedtls_rsa_free( &rsa );\n#else /* MBEDTLS_PKCS1_V15 */\n    ((void) verbose);\n#endif /* MBEDTLS_PKCS1_V15 */\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_RSA_C */\n","/*\n *  Helper functions for the RSA module\n *\n *  Copyright (C) 2006-2017, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n *\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_RSA_C)\n\n#include \"mbedtls/rsa.h\"\n#include \"mbedtls/bignum.h\"\n#include \"mbedtls/rsa_internal.h\"\n\n/*\n * Compute RSA prime factors from public and private exponents\n *\n * Summary of algorithm:\n * Setting F := lcm(P-1,Q-1), the idea is as follows:\n *\n * (a) For any 1 <= X < N with gcd(X,N)=1, we have X^F = 1 modulo N, so X^(F/2)\n *     is a square root of 1 in Z/NZ. Since Z/NZ ~= Z/PZ x Z/QZ by CRT and the\n *     square roots of 1 in Z/PZ and Z/QZ are +1 and -1, this leaves the four\n *     possibilities X^(F/2) = (+-1, +-1). If it happens that X^(F/2) = (-1,+1)\n *     or (+1,-1), then gcd(X^(F/2) + 1, N) will be equal to one of the prime\n *     factors of N.\n *\n * (b) If we don't know F/2 but (F/2) * K for some odd (!) K, then the same\n *     construction still applies since (-)^K is the identity on the set of\n *     roots of 1 in Z/NZ.\n *\n * The public and private key primitives (-)^E and (-)^D are mutually inverse\n * bijections on Z/NZ if and only if (-)^(DE) is the identity on Z/NZ, i.e.\n * if and only if DE - 1 is a multiple of F, say DE - 1 = F * L.\n * Splitting L = 2^t * K with K odd, we have\n *\n *   DE - 1 = FL = (F/2) * (2^(t+1)) * K,\n *\n * so (F / 2) * K is among the numbers\n *\n *   (DE - 1) >> 1, (DE - 1) >> 2, ..., (DE - 1) >> ord\n *\n * where ord is the order of 2 in (DE - 1).\n * We can therefore iterate through these numbers apply the construction\n * of (a) and (b) above to attempt to factor N.\n *\n */\nint mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,\n                     mbedtls_mpi const *E, mbedtls_mpi const *D,\n                     mbedtls_mpi *P, mbedtls_mpi *Q )\n{\n    int ret = 0;\n\n    uint16_t attempt;  /* Number of current attempt  */\n    uint16_t iter;     /* Number of squares computed in the current attempt */\n\n    uint16_t order;    /* Order of 2 in DE - 1 */\n\n    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */\n    mbedtls_mpi K;  /* Temporary holding the current candidate */\n\n    const unsigned char primes[] = { 2,\n           3,    5,    7,   11,   13,   17,   19,   23,\n          29,   31,   37,   41,   43,   47,   53,   59,\n          61,   67,   71,   73,   79,   83,   89,   97,\n         101,  103,  107,  109,  113,  127,  131,  137,\n         139,  149,  151,  157,  163,  167,  173,  179,\n         181,  191,  193,  197,  199,  211,  223,  227,\n         229,  233,  239,  241,  251\n    };\n\n    const size_t num_primes = sizeof( primes ) / sizeof( *primes );\n\n    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||\n        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||\n        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||\n        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||\n        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )\n    {\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n    }\n\n    /*\n     * Initializations and temporary changes\n     */\n\n    mbedtls_mpi_init( &K );\n    mbedtls_mpi_init( &T );\n\n    /* T := DE - 1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );\n\n    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )\n    {\n        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;\n        goto cleanup;\n    }\n\n    /* After this operation, T holds the largest odd divisor of DE - 1. */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );\n\n    /*\n     * Actual work\n     */\n\n    /* Skip trying 2 if N == 1 mod 8 */\n    attempt = 0;\n    if( N->p[0] % 8 == 1 )\n        attempt = 1;\n\n    for( ; attempt < num_primes; ++attempt )\n    {\n        mbedtls_mpi_lset( &K, primes[attempt] );\n\n        /* Check if gcd(K,N) = 1 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );\n        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )\n            continue;\n\n        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...\n         * and check whether they have nontrivial GCD with N. */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,\n                             Q /* temporarily use Q for storing Montgomery\n                                * multiplication helper values */ ) );\n\n        for( iter = 1; iter <= order; ++iter )\n        {\n            /* If we reach 1 prematurely, there's no point\n             * in continuing to square K */\n            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )\n                break;\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );\n\n            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&\n                mbedtls_mpi_cmp_mpi( P, N ) == -1 )\n            {\n                /*\n                 * Have found a nontrivial divisor P of N.\n                 * Set Q := N / P.\n                 */\n\n                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );\n                goto cleanup;\n            }\n\n            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );\n            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );\n        }\n\n        /*\n         * If we get here, then either we prematurely aborted the loop because\n         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must\n         * be 1 if D,E,N were consistent.\n         * Check if that's the case and abort if not, to avoid very long,\n         * yet eventually failing, computations if N,D,E were not sane.\n         */\n        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )\n        {\n            break;\n        }\n    }\n\n    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;\n\ncleanup:\n\n    mbedtls_mpi_free( &K );\n    mbedtls_mpi_free( &T );\n    return( ret );\n}\n\n/*\n * Given P, Q and the public exponent E, deduce D.\n * This is essentially a modular inversion.\n */\nint mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,\n                                         mbedtls_mpi const *Q,\n                                         mbedtls_mpi const *E,\n                                         mbedtls_mpi *D )\n{\n    int ret = 0;\n    mbedtls_mpi K, L;\n\n    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n\n    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||\n        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||\n        mbedtls_mpi_cmp_int( E, 0 ) == 0 )\n    {\n        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );\n    }\n\n    mbedtls_mpi_init( &K );\n    mbedtls_mpi_init( &L );\n\n    /* Temporarily put K := P-1 and L := Q-1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );\n\n    /* Temporarily put D := gcd(P-1, Q-1) */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );\n\n    /* K := LCM(P-1, Q-1) */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );\n\n    /* Compute modular inverse of E in LCM(P-1, Q-1) */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );\n\ncleanup:\n\n    mbedtls_mpi_free( &K );\n    mbedtls_mpi_free( &L );\n\n    return( ret );\n}\n\n/*\n * Check that RSA CRT parameters are in accordance with core parameters.\n */\nint mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,\n                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,\n                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )\n{\n    int ret = 0;\n\n    mbedtls_mpi K, L;\n    mbedtls_mpi_init( &K );\n    mbedtls_mpi_init( &L );\n\n    /* Check that DP - D == 0 mod P - 1 */\n    if( DP != NULL )\n    {\n        if( P == NULL )\n        {\n            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );\n\n        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\n    /* Check that DQ - D == 0 mod Q - 1 */\n    if( DQ != NULL )\n    {\n        if( Q == NULL )\n        {\n            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );\n\n        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\n    /* Check that QP * Q - 1 == 0 mod P */\n    if( QP != NULL )\n    {\n        if( P == NULL || Q == NULL )\n        {\n            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;\n            goto cleanup;\n        }\n\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );\n        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\ncleanup:\n\n    /* Wrap MPI error codes by RSA check failure error code */\n    if( ret != 0 &&\n        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&\n        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )\n    {\n        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n    }\n\n    mbedtls_mpi_free( &K );\n    mbedtls_mpi_free( &L );\n\n    return( ret );\n}\n\n/*\n * Check that core RSA parameters are sane.\n */\nint mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,\n                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,\n                                 const mbedtls_mpi *E,\n                                 int (*f_rng)(void *, unsigned char *, size_t),\n                                 void *p_rng )\n{\n    int ret = 0;\n    mbedtls_mpi K, L;\n\n    mbedtls_mpi_init( &K );\n    mbedtls_mpi_init( &L );\n\n    /*\n     * Step 1: If PRNG provided, check that P and Q are prime\n     */\n\n#if defined(MBEDTLS_GENPRIME)\n    if( f_rng != NULL && P != NULL &&\n        ( ret = mbedtls_mpi_is_prime( P, f_rng, p_rng ) ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n        goto cleanup;\n    }\n\n    if( f_rng != NULL && Q != NULL &&\n        ( ret = mbedtls_mpi_is_prime( Q, f_rng, p_rng ) ) != 0 )\n    {\n        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n        goto cleanup;\n    }\n#else\n    ((void) f_rng);\n    ((void) p_rng);\n#endif /* MBEDTLS_GENPRIME */\n\n    /*\n     * Step 2: Check that 1 < N = P * Q\n     */\n\n    if( P != NULL && Q != NULL && N != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );\n        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||\n            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\n    /*\n     * Step 3: Check and 1 < D, E < N if present.\n     */\n\n    if( N != NULL && D != NULL && E != NULL )\n    {\n        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||\n             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||\n             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||\n             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\n    /*\n     * Step 4: Check that D, E are inverse modulo P-1 and Q-1\n     */\n\n    if( P != NULL && Q != NULL && D != NULL && E != NULL )\n    {\n        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||\n            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n\n        /* Compute DE-1 mod P-1 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );\n        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n\n        /* Compute DE-1 mod Q-1 */\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );\n        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )\n        {\n            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n            goto cleanup;\n        }\n    }\n\ncleanup:\n\n    mbedtls_mpi_free( &K );\n    mbedtls_mpi_free( &L );\n\n    /* Wrap MPI error codes by RSA check failure error code */\n    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )\n    {\n        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;\n    }\n\n    return( ret );\n}\n\nint mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,\n                            const mbedtls_mpi *D, mbedtls_mpi *DP,\n                            mbedtls_mpi *DQ, mbedtls_mpi *QP )\n{\n    int ret = 0;\n    mbedtls_mpi K;\n    mbedtls_mpi_init( &K );\n\n    /* DP = D mod P-1 */\n    if( DP != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );\n    }\n\n    /* DQ = D mod Q-1 */\n    if( DQ != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );\n        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );\n    }\n\n    /* QP = Q^{-1} mod P */\n    if( QP != NULL )\n    {\n        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );\n    }\n\ncleanup:\n    mbedtls_mpi_free( &K );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_RSA_C */\n","/*\n *  FIPS-180-2 compliant SHA-256 implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The SHA-256 Secure Hash Standard was published by NIST in 2002.\n *\n *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n\n#include \"mbedtls/sha256.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#include <stdlib.h>\n#define mbedtls_printf printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#if !defined(MBEDTLS_SHA256_ALT)\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n/*\n * 32-bit integer manipulation macros (big endian)\n */\n#ifndef GET_UINT32_BE\n#define GET_UINT32_BE(n,b,i)                            \\\ndo {                                                    \\\n    (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \\\n        | ( (uint32_t) (b)[(i) + 1] << 16 )             \\\n        | ( (uint32_t) (b)[(i) + 2] <<  8 )             \\\n        | ( (uint32_t) (b)[(i) + 3]       );            \\\n} while( 0 )\n#endif\n\n#ifndef PUT_UINT32_BE\n#define PUT_UINT32_BE(n,b,i)                            \\\ndo {                                                    \\\n    (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \\\n    (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \\\n    (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \\\n    (b)[(i) + 3] = (unsigned char) ( (n)       );       \\\n} while( 0 )\n#endif\n\nvoid mbedtls_sha256_init( mbedtls_sha256_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );\n}\n\nvoid mbedtls_sha256_free( mbedtls_sha256_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );\n}\n\nvoid mbedtls_sha256_clone( mbedtls_sha256_context *dst,\n                           const mbedtls_sha256_context *src )\n{\n    *dst = *src;\n}\n\n/*\n * SHA-256 context setup\n */\nint mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )\n{\n    ctx->total[0] = 0;\n    ctx->total[1] = 0;\n\n    if( is224 == 0 )\n    {\n        /* SHA-256 */\n        ctx->state[0] = 0x6A09E667;\n        ctx->state[1] = 0xBB67AE85;\n        ctx->state[2] = 0x3C6EF372;\n        ctx->state[3] = 0xA54FF53A;\n        ctx->state[4] = 0x510E527F;\n        ctx->state[5] = 0x9B05688C;\n        ctx->state[6] = 0x1F83D9AB;\n        ctx->state[7] = 0x5BE0CD19;\n    }\n    else\n    {\n        /* SHA-224 */\n        ctx->state[0] = 0xC1059ED8;\n        ctx->state[1] = 0x367CD507;\n        ctx->state[2] = 0x3070DD17;\n        ctx->state[3] = 0xF70E5939;\n        ctx->state[4] = 0xFFC00B31;\n        ctx->state[5] = 0x68581511;\n        ctx->state[6] = 0x64F98FA7;\n        ctx->state[7] = 0xBEFA4FA4;\n    }\n\n    ctx->is224 = is224;\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256_starts( mbedtls_sha256_context *ctx,\n                            int is224 )\n{\n    mbedtls_sha256_starts_ret( ctx, is224 );\n}\n#endif\n\n#if !defined(MBEDTLS_SHA256_PROCESS_ALT)\nstatic const uint32_t K[] =\n{\n    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2,\n};\n\n#define  SHR(x,n) ((x & 0xFFFFFFFF) >> n)\n#define ROTR(x,n) (SHR(x,n) | (x << (32 - n)))\n\n#define S0(x) (ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3))\n#define S1(x) (ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))\n\n#define S2(x) (ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22))\n#define S3(x) (ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25))\n\n#define F0(x,y,z) ((x & y) | (z & (x | y)))\n#define F1(x,y,z) (z ^ (x & (y ^ z)))\n\n#define R(t)                                    \\\n(                                               \\\n    W[t] = S1(W[t -  2]) + W[t -  7] +          \\\n           S0(W[t - 15]) + W[t - 16]            \\\n)\n\n#define P(a,b,c,d,e,f,g,h,x,K)                  \\\n{                                               \\\n    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \\\n    temp2 = S2(a) + F0(a,b,c);                  \\\n    d += temp1; h = temp1 + temp2;              \\\n}\n\nint mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,\n                                const unsigned char data[64] )\n{\n    uint32_t temp1, temp2, W[64];\n    uint32_t A[8];\n    unsigned int i;\n\n    for( i = 0; i < 8; i++ )\n        A[i] = ctx->state[i];\n\n#if defined(MBEDTLS_SHA256_SMALLER)\n    for( i = 0; i < 64; i++ )\n    {\n        if( i < 16 )\n            GET_UINT32_BE( W[i], data, 4 * i );\n        else\n            R( i );\n\n        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );\n\n        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];\n        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;\n    }\n#else /* MBEDTLS_SHA256_SMALLER */\n    for( i = 0; i < 16; i++ )\n        GET_UINT32_BE( W[i], data, 4 * i );\n\n    for( i = 0; i < 16; i += 8 )\n    {\n        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );\n        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );\n        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );\n        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );\n        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );\n        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );\n        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );\n        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );\n    }\n\n    for( i = 16; i < 64; i += 8 )\n    {\n        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );\n        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );\n        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );\n        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );\n        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );\n        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );\n        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );\n        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );\n    }\n#endif /* MBEDTLS_SHA256_SMALLER */\n\n    for( i = 0; i < 8; i++ )\n        ctx->state[i] += A[i];\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256_process( mbedtls_sha256_context *ctx,\n                             const unsigned char data[64] )\n{\n    mbedtls_internal_sha256_process( ctx, data );\n}\n#endif\n#endif /* !MBEDTLS_SHA256_PROCESS_ALT */\n\n/*\n * SHA-256 process buffer\n */\nint mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,\n                               const unsigned char *input,\n                               size_t ilen )\n{\n    int ret;\n    size_t fill;\n    uint32_t left;\n\n    if( ilen == 0 )\n        return( 0 );\n\n    left = ctx->total[0] & 0x3F;\n    fill = 64 - left;\n\n    ctx->total[0] += (uint32_t) ilen;\n    ctx->total[0] &= 0xFFFFFFFF;\n\n    if( ctx->total[0] < (uint32_t) ilen )\n        ctx->total[1]++;\n\n    if( left && ilen >= fill )\n    {\n        memcpy( (void *) (ctx->buffer + left), input, fill );\n\n        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )\n            return( ret );\n\n        input += fill;\n        ilen  -= fill;\n        left = 0;\n    }\n\n    while( ilen >= 64 )\n    {\n        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )\n            return( ret );\n\n        input += 64;\n        ilen  -= 64;\n    }\n\n    if( ilen > 0 )\n        memcpy( (void *) (ctx->buffer + left), input, ilen );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256_update( mbedtls_sha256_context *ctx,\n                            const unsigned char *input,\n                            size_t ilen )\n{\n    mbedtls_sha256_update_ret( ctx, input, ilen );\n}\n#endif\n\nstatic const unsigned char sha256_padding[64] =\n{\n 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n};\n\n/*\n * SHA-256 final digest\n */\nint mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,\n                               unsigned char output[32] )\n{\n    int ret;\n    uint32_t last, padn;\n    uint32_t high, low;\n    unsigned char msglen[8];\n\n    high = ( ctx->total[0] >> 29 )\n         | ( ctx->total[1] <<  3 );\n    low  = ( ctx->total[0] <<  3 );\n\n    PUT_UINT32_BE( high, msglen, 0 );\n    PUT_UINT32_BE( low,  msglen, 4 );\n\n    last = ctx->total[0] & 0x3F;\n    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );\n\n    if( ( ret = mbedtls_sha256_update_ret( ctx, sha256_padding, padn ) ) != 0 )\n        return( ret );\n\n    if( ( ret = mbedtls_sha256_update_ret( ctx, msglen, 8 ) ) != 0 )\n        return( ret );\n\n    PUT_UINT32_BE( ctx->state[0], output,  0 );\n    PUT_UINT32_BE( ctx->state[1], output,  4 );\n    PUT_UINT32_BE( ctx->state[2], output,  8 );\n    PUT_UINT32_BE( ctx->state[3], output, 12 );\n    PUT_UINT32_BE( ctx->state[4], output, 16 );\n    PUT_UINT32_BE( ctx->state[5], output, 20 );\n    PUT_UINT32_BE( ctx->state[6], output, 24 );\n\n    if( ctx->is224 == 0 )\n        PUT_UINT32_BE( ctx->state[7], output, 28 );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256_finish( mbedtls_sha256_context *ctx,\n                            unsigned char output[32] )\n{\n    mbedtls_sha256_finish_ret( ctx, output );\n}\n#endif\n\n#endif /* !MBEDTLS_SHA256_ALT */\n\n/*\n * output = SHA-256( input buffer )\n */\nint mbedtls_sha256_ret( const unsigned char *input,\n                        size_t ilen,\n                        unsigned char output[32],\n                        int is224 )\n{\n    int ret;\n    mbedtls_sha256_context ctx;\n\n    mbedtls_sha256_init( &ctx );\n\n    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )\n        goto exit;\n\nexit:\n    mbedtls_sha256_free( &ctx );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha256( const unsigned char *input,\n                     size_t ilen,\n                     unsigned char output[32],\n                     int is224 )\n{\n    mbedtls_sha256_ret( input, ilen, output, is224 );\n}\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n/*\n * FIPS-180-2 test vectors\n */\nstatic const unsigned char sha256_test_buf[3][57] =\n{\n    { \"abc\" },\n    { \"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\" },\n    { \"\" }\n};\n\nstatic const size_t sha256_test_buflen[3] =\n{\n    3, 56, 1000\n};\n\nstatic const unsigned char sha256_test_sum[6][32] =\n{\n    /*\n     * SHA-224 test vectors\n     */\n    { 0x23, 0x09, 0x7D, 0x22, 0x34, 0x05, 0xD8, 0x22,\n      0x86, 0x42, 0xA4, 0x77, 0xBD, 0xA2, 0x55, 0xB3,\n      0x2A, 0xAD, 0xBC, 0xE4, 0xBD, 0xA0, 0xB3, 0xF7,\n      0xE3, 0x6C, 0x9D, 0xA7 },\n    { 0x75, 0x38, 0x8B, 0x16, 0x51, 0x27, 0x76, 0xCC,\n      0x5D, 0xBA, 0x5D, 0xA1, 0xFD, 0x89, 0x01, 0x50,\n      0xB0, 0xC6, 0x45, 0x5C, 0xB4, 0xF5, 0x8B, 0x19,\n      0x52, 0x52, 0x25, 0x25 },\n    { 0x20, 0x79, 0x46, 0x55, 0x98, 0x0C, 0x91, 0xD8,\n      0xBB, 0xB4, 0xC1, 0xEA, 0x97, 0x61, 0x8A, 0x4B,\n      0xF0, 0x3F, 0x42, 0x58, 0x19, 0x48, 0xB2, 0xEE,\n      0x4E, 0xE7, 0xAD, 0x67 },\n\n    /*\n     * SHA-256 test vectors\n     */\n    { 0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,\n      0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,\n      0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,\n      0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD },\n    { 0x24, 0x8D, 0x6A, 0x61, 0xD2, 0x06, 0x38, 0xB8,\n      0xE5, 0xC0, 0x26, 0x93, 0x0C, 0x3E, 0x60, 0x39,\n      0xA3, 0x3C, 0xE4, 0x59, 0x64, 0xFF, 0x21, 0x67,\n      0xF6, 0xEC, 0xED, 0xD4, 0x19, 0xDB, 0x06, 0xC1 },\n    { 0xCD, 0xC7, 0x6E, 0x5C, 0x99, 0x14, 0xFB, 0x92,\n      0x81, 0xA1, 0xC7, 0xE2, 0x84, 0xD7, 0x3E, 0x67,\n      0xF1, 0x80, 0x9A, 0x48, 0xA4, 0x97, 0x20, 0x0E,\n      0x04, 0x6D, 0x39, 0xCC, 0xC7, 0x11, 0x2C, 0xD0 }\n};\n\n/*\n * Checkup routine\n */\nint mbedtls_sha256_self_test( int verbose )\n{\n    int i, j, k, buflen, ret = 0;\n    unsigned char *buf;\n    unsigned char sha256sum[32];\n    mbedtls_sha256_context ctx;\n\n    buf = mbedtls_calloc( 1024, sizeof(unsigned char) );\n    if( NULL == buf )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"Buffer allocation failed\\n\" );\n\n        return( 1 );\n    }\n\n    mbedtls_sha256_init( &ctx );\n\n    for( i = 0; i < 6; i++ )\n    {\n        j = i % 3;\n        k = i < 3;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  SHA-%d test #%d: \", 256 - k * 32, j + 1 );\n\n        if( ( ret = mbedtls_sha256_starts_ret( &ctx, k ) ) != 0 )\n            goto fail;\n\n        if( j == 2 )\n        {\n            memset( buf, 'a', buflen = 1000 );\n\n            for( j = 0; j < 1000; j++ )\n            {\n                ret = mbedtls_sha256_update_ret( &ctx, buf, buflen );\n                if( ret != 0 )\n                    goto fail;\n            }\n\n        }\n        else\n        {\n            ret = mbedtls_sha256_update_ret( &ctx, sha256_test_buf[j],\n                                             sha256_test_buflen[j] );\n            if( ret != 0 )\n                 goto fail;\n        }\n\n        if( ( ret = mbedtls_sha256_finish_ret( &ctx, sha256sum ) ) != 0 )\n            goto fail;\n\n\n        if( memcmp( sha256sum, sha256_test_sum[i], 32 - k * 4 ) != 0 )\n        {\n            ret = 1;\n            goto fail;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    goto exit;\n\nfail:\n    if( verbose != 0 )\n        mbedtls_printf( \"failed\\n\" );\n\nexit:\n    mbedtls_sha256_free( &ctx );\n    mbedtls_free( buf );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_SHA256_C */\n","/*\n *  FIPS-180-2 compliant SHA-384/512 implementation\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The SHA-512 Secure Hash Standard was published by NIST in 2002.\n *\n *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n\n#include \"mbedtls/sha512.h\"\n\n#if defined(_MSC_VER) || defined(__WATCOMC__)\n  #define UL64(x) x##ui64\n#else\n  #define UL64(x) x##ULL\n#endif\n\n#include <string.h>\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#include <stdlib.h>\n#define mbedtls_printf printf\n#define mbedtls_calloc    calloc\n#define mbedtls_free       free\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#if !defined(MBEDTLS_SHA512_ALT)\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n/*\n * 64-bit integer manipulation macros (big endian)\n */\n#ifndef GET_UINT64_BE\n#define GET_UINT64_BE(n,b,i)                            \\\n{                                                       \\\n    (n) = ( (uint64_t) (b)[(i)    ] << 56 )       \\\n        | ( (uint64_t) (b)[(i) + 1] << 48 )       \\\n        | ( (uint64_t) (b)[(i) + 2] << 40 )       \\\n        | ( (uint64_t) (b)[(i) + 3] << 32 )       \\\n        | ( (uint64_t) (b)[(i) + 4] << 24 )       \\\n        | ( (uint64_t) (b)[(i) + 5] << 16 )       \\\n        | ( (uint64_t) (b)[(i) + 6] <<  8 )       \\\n        | ( (uint64_t) (b)[(i) + 7]       );      \\\n}\n#endif /* GET_UINT64_BE */\n\n#ifndef PUT_UINT64_BE\n#define PUT_UINT64_BE(n,b,i)                            \\\n{                                                       \\\n    (b)[(i)    ] = (unsigned char) ( (n) >> 56 );       \\\n    (b)[(i) + 1] = (unsigned char) ( (n) >> 48 );       \\\n    (b)[(i) + 2] = (unsigned char) ( (n) >> 40 );       \\\n    (b)[(i) + 3] = (unsigned char) ( (n) >> 32 );       \\\n    (b)[(i) + 4] = (unsigned char) ( (n) >> 24 );       \\\n    (b)[(i) + 5] = (unsigned char) ( (n) >> 16 );       \\\n    (b)[(i) + 6] = (unsigned char) ( (n) >>  8 );       \\\n    (b)[(i) + 7] = (unsigned char) ( (n)       );       \\\n}\n#endif /* PUT_UINT64_BE */\n\nvoid mbedtls_sha512_init( mbedtls_sha512_context *ctx )\n{\n    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );\n}\n\nvoid mbedtls_sha512_free( mbedtls_sha512_context *ctx )\n{\n    if( ctx == NULL )\n        return;\n\n    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );\n}\n\nvoid mbedtls_sha512_clone( mbedtls_sha512_context *dst,\n                           const mbedtls_sha512_context *src )\n{\n    *dst = *src;\n}\n\n/*\n * SHA-512 context setup\n */\nint mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )\n{\n    ctx->total[0] = 0;\n    ctx->total[1] = 0;\n\n    if( is384 == 0 )\n    {\n        /* SHA-512 */\n        ctx->state[0] = UL64(0x6A09E667F3BCC908);\n        ctx->state[1] = UL64(0xBB67AE8584CAA73B);\n        ctx->state[2] = UL64(0x3C6EF372FE94F82B);\n        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);\n        ctx->state[4] = UL64(0x510E527FADE682D1);\n        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);\n        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);\n        ctx->state[7] = UL64(0x5BE0CD19137E2179);\n    }\n    else\n    {\n        /* SHA-384 */\n        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);\n        ctx->state[1] = UL64(0x629A292A367CD507);\n        ctx->state[2] = UL64(0x9159015A3070DD17);\n        ctx->state[3] = UL64(0x152FECD8F70E5939);\n        ctx->state[4] = UL64(0x67332667FFC00B31);\n        ctx->state[5] = UL64(0x8EB44A8768581511);\n        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);\n        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);\n    }\n\n    ctx->is384 = is384;\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512_starts( mbedtls_sha512_context *ctx,\n                            int is384 )\n{\n    mbedtls_sha512_starts_ret( ctx, is384 );\n}\n#endif\n\n#if !defined(MBEDTLS_SHA512_PROCESS_ALT)\n\n/*\n * Round constants\n */\nstatic const uint64_t K[80] =\n{\n    UL64(0x428A2F98D728AE22),  UL64(0x7137449123EF65CD),\n    UL64(0xB5C0FBCFEC4D3B2F),  UL64(0xE9B5DBA58189DBBC),\n    UL64(0x3956C25BF348B538),  UL64(0x59F111F1B605D019),\n    UL64(0x923F82A4AF194F9B),  UL64(0xAB1C5ED5DA6D8118),\n    UL64(0xD807AA98A3030242),  UL64(0x12835B0145706FBE),\n    UL64(0x243185BE4EE4B28C),  UL64(0x550C7DC3D5FFB4E2),\n    UL64(0x72BE5D74F27B896F),  UL64(0x80DEB1FE3B1696B1),\n    UL64(0x9BDC06A725C71235),  UL64(0xC19BF174CF692694),\n    UL64(0xE49B69C19EF14AD2),  UL64(0xEFBE4786384F25E3),\n    UL64(0x0FC19DC68B8CD5B5),  UL64(0x240CA1CC77AC9C65),\n    UL64(0x2DE92C6F592B0275),  UL64(0x4A7484AA6EA6E483),\n    UL64(0x5CB0A9DCBD41FBD4),  UL64(0x76F988DA831153B5),\n    UL64(0x983E5152EE66DFAB),  UL64(0xA831C66D2DB43210),\n    UL64(0xB00327C898FB213F),  UL64(0xBF597FC7BEEF0EE4),\n    UL64(0xC6E00BF33DA88FC2),  UL64(0xD5A79147930AA725),\n    UL64(0x06CA6351E003826F),  UL64(0x142929670A0E6E70),\n    UL64(0x27B70A8546D22FFC),  UL64(0x2E1B21385C26C926),\n    UL64(0x4D2C6DFC5AC42AED),  UL64(0x53380D139D95B3DF),\n    UL64(0x650A73548BAF63DE),  UL64(0x766A0ABB3C77B2A8),\n    UL64(0x81C2C92E47EDAEE6),  UL64(0x92722C851482353B),\n    UL64(0xA2BFE8A14CF10364),  UL64(0xA81A664BBC423001),\n    UL64(0xC24B8B70D0F89791),  UL64(0xC76C51A30654BE30),\n    UL64(0xD192E819D6EF5218),  UL64(0xD69906245565A910),\n    UL64(0xF40E35855771202A),  UL64(0x106AA07032BBD1B8),\n    UL64(0x19A4C116B8D2D0C8),  UL64(0x1E376C085141AB53),\n    UL64(0x2748774CDF8EEB99),  UL64(0x34B0BCB5E19B48A8),\n    UL64(0x391C0CB3C5C95A63),  UL64(0x4ED8AA4AE3418ACB),\n    UL64(0x5B9CCA4F7763E373),  UL64(0x682E6FF3D6B2B8A3),\n    UL64(0x748F82EE5DEFB2FC),  UL64(0x78A5636F43172F60),\n    UL64(0x84C87814A1F0AB72),  UL64(0x8CC702081A6439EC),\n    UL64(0x90BEFFFA23631E28),  UL64(0xA4506CEBDE82BDE9),\n    UL64(0xBEF9A3F7B2C67915),  UL64(0xC67178F2E372532B),\n    UL64(0xCA273ECEEA26619C),  UL64(0xD186B8C721C0C207),\n    UL64(0xEADA7DD6CDE0EB1E),  UL64(0xF57D4F7FEE6ED178),\n    UL64(0x06F067AA72176FBA),  UL64(0x0A637DC5A2C898A6),\n    UL64(0x113F9804BEF90DAE),  UL64(0x1B710B35131C471B),\n    UL64(0x28DB77F523047D84),  UL64(0x32CAAB7B40C72493),\n    UL64(0x3C9EBE0A15C9BEBC),  UL64(0x431D67C49C100D4C),\n    UL64(0x4CC5D4BECB3E42B6),  UL64(0x597F299CFC657E2A),\n    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)\n};\n\nint mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,\n                                     const unsigned char data[128] )\n{\n    int i;\n    uint64_t temp1, temp2, W[80];\n    uint64_t A, B, C, D, E, F, G, H;\n\n#define  SHR(x,n) (x >> n)\n#define ROTR(x,n) (SHR(x,n) | (x << (64 - n)))\n\n#define S0(x) (ROTR(x, 1) ^ ROTR(x, 8) ^  SHR(x, 7))\n#define S1(x) (ROTR(x,19) ^ ROTR(x,61) ^  SHR(x, 6))\n\n#define S2(x) (ROTR(x,28) ^ ROTR(x,34) ^ ROTR(x,39))\n#define S3(x) (ROTR(x,14) ^ ROTR(x,18) ^ ROTR(x,41))\n\n#define F0(x,y,z) ((x & y) | (z & (x | y)))\n#define F1(x,y,z) (z ^ (x & (y ^ z)))\n\n#define P(a,b,c,d,e,f,g,h,x,K)                  \\\n{                                               \\\n    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \\\n    temp2 = S2(a) + F0(a,b,c);                  \\\n    d += temp1; h = temp1 + temp2;              \\\n}\n\n    for( i = 0; i < 16; i++ )\n    {\n        GET_UINT64_BE( W[i], data, i << 3 );\n    }\n\n    for( ; i < 80; i++ )\n    {\n        W[i] = S1(W[i -  2]) + W[i -  7] +\n               S0(W[i - 15]) + W[i - 16];\n    }\n\n    A = ctx->state[0];\n    B = ctx->state[1];\n    C = ctx->state[2];\n    D = ctx->state[3];\n    E = ctx->state[4];\n    F = ctx->state[5];\n    G = ctx->state[6];\n    H = ctx->state[7];\n    i = 0;\n\n    do\n    {\n        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;\n        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;\n        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;\n        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;\n        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;\n        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;\n        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;\n        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;\n    }\n    while( i < 80 );\n\n    ctx->state[0] += A;\n    ctx->state[1] += B;\n    ctx->state[2] += C;\n    ctx->state[3] += D;\n    ctx->state[4] += E;\n    ctx->state[5] += F;\n    ctx->state[6] += G;\n    ctx->state[7] += H;\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512_process( mbedtls_sha512_context *ctx,\n                             const unsigned char data[128] )\n{\n    mbedtls_internal_sha512_process( ctx, data );\n}\n#endif\n#endif /* !MBEDTLS_SHA512_PROCESS_ALT */\n\n/*\n * SHA-512 process buffer\n */\nint mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,\n                               const unsigned char *input,\n                               size_t ilen )\n{\n    int ret;\n    size_t fill;\n    unsigned int left;\n\n    if( ilen == 0 )\n        return( 0 );\n\n    left = (unsigned int) (ctx->total[0] & 0x7F);\n    fill = 128 - left;\n\n    ctx->total[0] += (uint64_t) ilen;\n\n    if( ctx->total[0] < (uint64_t) ilen )\n        ctx->total[1]++;\n\n    if( left && ilen >= fill )\n    {\n        memcpy( (void *) (ctx->buffer + left), input, fill );\n\n        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )\n            return( ret );\n\n        input += fill;\n        ilen  -= fill;\n        left = 0;\n    }\n\n    while( ilen >= 128 )\n    {\n        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )\n            return( ret );\n\n        input += 128;\n        ilen  -= 128;\n    }\n\n    if( ilen > 0 )\n        memcpy( (void *) (ctx->buffer + left), input, ilen );\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512_update( mbedtls_sha512_context *ctx,\n                            const unsigned char *input,\n                            size_t ilen )\n{\n    mbedtls_sha512_update_ret( ctx, input, ilen );\n}\n#endif\n\nstatic const unsigned char sha512_padding[128] =\n{\n 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n};\n\n/*\n * SHA-512 final digest\n */\nint mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,\n                               unsigned char output[64] )\n{\n    int ret;\n    size_t last, padn;\n    uint64_t high, low;\n    unsigned char msglen[16];\n\n    high = ( ctx->total[0] >> 61 )\n         | ( ctx->total[1] <<  3 );\n    low  = ( ctx->total[0] <<  3 );\n\n    PUT_UINT64_BE( high, msglen, 0 );\n    PUT_UINT64_BE( low,  msglen, 8 );\n\n    last = (size_t)( ctx->total[0] & 0x7F );\n    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );\n\n    if( ( ret = mbedtls_sha512_update_ret( ctx, sha512_padding, padn ) ) != 0 )\n            return( ret );\n\n    if( ( ret = mbedtls_sha512_update_ret( ctx, msglen, 16 ) ) != 0 )\n            return( ret );\n\n    PUT_UINT64_BE( ctx->state[0], output,  0 );\n    PUT_UINT64_BE( ctx->state[1], output,  8 );\n    PUT_UINT64_BE( ctx->state[2], output, 16 );\n    PUT_UINT64_BE( ctx->state[3], output, 24 );\n    PUT_UINT64_BE( ctx->state[4], output, 32 );\n    PUT_UINT64_BE( ctx->state[5], output, 40 );\n\n    if( ctx->is384 == 0 )\n    {\n        PUT_UINT64_BE( ctx->state[6], output, 48 );\n        PUT_UINT64_BE( ctx->state[7], output, 56 );\n    }\n\n    return( 0 );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512_finish( mbedtls_sha512_context *ctx,\n                            unsigned char output[64] )\n{\n    mbedtls_sha512_finish_ret( ctx, output );\n}\n#endif\n\n#endif /* !MBEDTLS_SHA512_ALT */\n\n/*\n * output = SHA-512( input buffer )\n */\nint mbedtls_sha512_ret( const unsigned char *input,\n                    size_t ilen,\n                    unsigned char output[64],\n                    int is384 )\n{\n    int ret;\n    mbedtls_sha512_context ctx;\n\n    mbedtls_sha512_init( &ctx );\n\n    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )\n        goto exit;\n\n    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )\n        goto exit;\n\nexit:\n    mbedtls_sha512_free( &ctx );\n\n    return( ret );\n}\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nvoid mbedtls_sha512( const unsigned char *input,\n                     size_t ilen,\n                     unsigned char output[64],\n                     int is384 )\n{\n    mbedtls_sha512_ret( input, ilen, output, is384 );\n}\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n\n/*\n * FIPS-180-2 test vectors\n */\nstatic const unsigned char sha512_test_buf[3][113] =\n{\n    { \"abc\" },\n    { \"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\"\n      \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\" },\n    { \"\" }\n};\n\nstatic const size_t sha512_test_buflen[3] =\n{\n    3, 112, 1000\n};\n\nstatic const unsigned char sha512_test_sum[6][64] =\n{\n    /*\n     * SHA-384 test vectors\n     */\n    { 0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B,\n      0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50, 0x07,\n      0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63,\n      0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF, 0x5B, 0xED,\n      0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23,\n      0x58, 0xBA, 0xEC, 0xA1, 0x34, 0xC8, 0x25, 0xA7 },\n    { 0x09, 0x33, 0x0C, 0x33, 0xF7, 0x11, 0x47, 0xE8,\n      0x3D, 0x19, 0x2F, 0xC7, 0x82, 0xCD, 0x1B, 0x47,\n      0x53, 0x11, 0x1B, 0x17, 0x3B, 0x3B, 0x05, 0xD2,\n      0x2F, 0xA0, 0x80, 0x86, 0xE3, 0xB0, 0xF7, 0x12,\n      0xFC, 0xC7, 0xC7, 0x1A, 0x55, 0x7E, 0x2D, 0xB9,\n      0x66, 0xC3, 0xE9, 0xFA, 0x91, 0x74, 0x60, 0x39 },\n    { 0x9D, 0x0E, 0x18, 0x09, 0x71, 0x64, 0x74, 0xCB,\n      0x08, 0x6E, 0x83, 0x4E, 0x31, 0x0A, 0x4A, 0x1C,\n      0xED, 0x14, 0x9E, 0x9C, 0x00, 0xF2, 0x48, 0x52,\n      0x79, 0x72, 0xCE, 0xC5, 0x70, 0x4C, 0x2A, 0x5B,\n      0x07, 0xB8, 0xB3, 0xDC, 0x38, 0xEC, 0xC4, 0xEB,\n      0xAE, 0x97, 0xDD, 0xD8, 0x7F, 0x3D, 0x89, 0x85 },\n\n    /*\n     * SHA-512 test vectors\n     */\n    { 0xDD, 0xAF, 0x35, 0xA1, 0x93, 0x61, 0x7A, 0xBA,\n      0xCC, 0x41, 0x73, 0x49, 0xAE, 0x20, 0x41, 0x31,\n      0x12, 0xE6, 0xFA, 0x4E, 0x89, 0xA9, 0x7E, 0xA2,\n      0x0A, 0x9E, 0xEE, 0xE6, 0x4B, 0x55, 0xD3, 0x9A,\n      0x21, 0x92, 0x99, 0x2A, 0x27, 0x4F, 0xC1, 0xA8,\n      0x36, 0xBA, 0x3C, 0x23, 0xA3, 0xFE, 0xEB, 0xBD,\n      0x45, 0x4D, 0x44, 0x23, 0x64, 0x3C, 0xE8, 0x0E,\n      0x2A, 0x9A, 0xC9, 0x4F, 0xA5, 0x4C, 0xA4, 0x9F },\n    { 0x8E, 0x95, 0x9B, 0x75, 0xDA, 0xE3, 0x13, 0xDA,\n      0x8C, 0xF4, 0xF7, 0x28, 0x14, 0xFC, 0x14, 0x3F,\n      0x8F, 0x77, 0x79, 0xC6, 0xEB, 0x9F, 0x7F, 0xA1,\n      0x72, 0x99, 0xAE, 0xAD, 0xB6, 0x88, 0x90, 0x18,\n      0x50, 0x1D, 0x28, 0x9E, 0x49, 0x00, 0xF7, 0xE4,\n      0x33, 0x1B, 0x99, 0xDE, 0xC4, 0xB5, 0x43, 0x3A,\n      0xC7, 0xD3, 0x29, 0xEE, 0xB6, 0xDD, 0x26, 0x54,\n      0x5E, 0x96, 0xE5, 0x5B, 0x87, 0x4B, 0xE9, 0x09 },\n    { 0xE7, 0x18, 0x48, 0x3D, 0x0C, 0xE7, 0x69, 0x64,\n      0x4E, 0x2E, 0x42, 0xC7, 0xBC, 0x15, 0xB4, 0x63,\n      0x8E, 0x1F, 0x98, 0xB1, 0x3B, 0x20, 0x44, 0x28,\n      0x56, 0x32, 0xA8, 0x03, 0xAF, 0xA9, 0x73, 0xEB,\n      0xDE, 0x0F, 0xF2, 0x44, 0x87, 0x7E, 0xA6, 0x0A,\n      0x4C, 0xB0, 0x43, 0x2C, 0xE5, 0x77, 0xC3, 0x1B,\n      0xEB, 0x00, 0x9C, 0x5C, 0x2C, 0x49, 0xAA, 0x2E,\n      0x4E, 0xAD, 0xB2, 0x17, 0xAD, 0x8C, 0xC0, 0x9B }\n};\n\n/*\n * Checkup routine\n */\nint mbedtls_sha512_self_test( int verbose )\n{\n    int i, j, k, buflen, ret = 0;\n    unsigned char *buf;\n    unsigned char sha512sum[64];\n    mbedtls_sha512_context ctx;\n\n    buf = mbedtls_calloc( 1024, sizeof(unsigned char) );\n    if( NULL == buf )\n    {\n        if( verbose != 0 )\n            mbedtls_printf( \"Buffer allocation failed\\n\" );\n\n        return( 1 );\n    }\n\n    mbedtls_sha512_init( &ctx );\n\n    for( i = 0; i < 6; i++ )\n    {\n        j = i % 3;\n        k = i < 3;\n\n        if( verbose != 0 )\n            mbedtls_printf( \"  SHA-%d test #%d: \", 512 - k * 128, j + 1 );\n\n        if( ( ret = mbedtls_sha512_starts_ret( &ctx, k ) ) != 0 )\n            goto fail;\n\n        if( j == 2 )\n        {\n            memset( buf, 'a', buflen = 1000 );\n\n            for( j = 0; j < 1000; j++ )\n            {\n                ret = mbedtls_sha512_update_ret( &ctx, buf, buflen );\n                if( ret != 0 )\n                    goto fail;\n            }\n        }\n        else\n        {\n            ret = mbedtls_sha512_update_ret( &ctx, sha512_test_buf[j],\n                                             sha512_test_buflen[j] );\n            if( ret != 0 )\n                goto fail;\n        }\n\n        if( ( ret = mbedtls_sha512_finish_ret( &ctx, sha512sum ) ) != 0 )\n            goto fail;\n\n        if( memcmp( sha512sum, sha512_test_sum[i], 64 - k * 16 ) != 0 )\n        {\n            ret = 1;\n            goto fail;\n        }\n\n        if( verbose != 0 )\n            mbedtls_printf( \"passed\\n\" );\n    }\n\n    if( verbose != 0 )\n        mbedtls_printf( \"\\n\" );\n\n    goto exit;\n\nfail:\n    if( verbose != 0 )\n        mbedtls_printf( \"failed\\n\" );\n\nexit:\n    mbedtls_sha512_free( &ctx );\n    mbedtls_free( buf );\n\n    return( ret );\n}\n\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_SHA512_C */\n","/**\n * \\file ssl_ciphersuites.c\n *\n * \\brief SSL ciphersuites for mbed TLS\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SSL_TLS_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#endif\n\n#include \"mbedtls/ssl_ciphersuites.h\"\n#include \"mbedtls/ssl.h\"\n\n#include <string.h>\n\n/*\n * Ordered from most preferred to least preferred in terms of security.\n *\n * Current rule (except rc4, weak and null which come last):\n * 1. By key exchange:\n *    Forward-secure non-PSK > forward-secure PSK > ECJPAKE > other non-PSK > other PSK\n * 2. By key length and cipher:\n *    AES-256 > Camellia-256 > AES-128 > Camellia-128 > 3DES\n * 3. By cipher mode when relevant GCM > CCM > CBC > CCM_8\n * 4. By hash function used when relevant\n * 5. By key exchange/auth again: EC > non-EC\n */\nstatic const int ciphersuite_preference[] =\n{\n#if defined(MBEDTLS_SSL_CIPHERSUITES)\n    MBEDTLS_SSL_CIPHERSUITES,\n#else\n    /* All AES-256 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8,\n\n    /* All CAMELLIA-256 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,\n\n    /* All AES-128 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,\n    MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8,\n\n    /* All CAMELLIA-128 ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,\n\n    /* All remaining >= 128-bit ephemeral suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,\n\n    /* The PSK ephemeral suites */\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8,\n\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8,\n\n    MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA,\n\n    /* The ECJPAKE suite */\n    MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8,\n\n    /* All AES-256 suites */\n    MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_WITH_AES_256_CCM,\n    MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8,\n\n    /* All CAMELLIA-256 suites */\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,\n\n    /* All AES-128 suites */\n    MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_WITH_AES_128_CCM,\n    MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8,\n\n    /* All CAMELLIA-128 suites */\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,\n\n    /* All remaining >= 128-bit suites */\n    MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,\n\n    /* The RSA PSK suites */\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n\n    MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA,\n\n    /* The PSK suites */\n    MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384,\n    MBEDTLS_TLS_PSK_WITH_AES_256_CCM,\n    MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384,\n    MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA,\n    MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8,\n\n    MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_PSK_WITH_AES_128_CCM,\n    MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256,\n    MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA,\n    MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8,\n\n    MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA,\n\n    /* RC4 suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_RSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_RSA_WITH_RC4_128_MD5,\n    MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA,\n    MBEDTLS_TLS_PSK_WITH_RC4_128_SHA,\n\n    /* Weak suites */\n    MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA,\n    MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA,\n\n    /* NULL suites */\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256,\n    MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA,\n    MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384,\n    MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256,\n    MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA,\n\n    MBEDTLS_TLS_RSA_WITH_NULL_SHA256,\n    MBEDTLS_TLS_RSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_RSA_WITH_NULL_MD5,\n    MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA,\n    MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384,\n    MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256,\n    MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA,\n    MBEDTLS_TLS_PSK_WITH_NULL_SHA384,\n    MBEDTLS_TLS_PSK_WITH_NULL_SHA256,\n    MBEDTLS_TLS_PSK_WITH_NULL_SHA,\n\n#endif /* MBEDTLS_SSL_CIPHERSUITES */\n    0\n};\n\nstatic const mbedtls_ssl_ciphersuite_t ciphersuite_definitions[] =\n{\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, \"TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, \"TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, \"TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, \"TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, \"TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, \"TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA512_C */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM, \"TLS-ECDHE-ECDSA-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8, \"TLS-ECDHE-ECDSA-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM, \"TLS-ECDHE-ECDSA-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8, \"TLS-ECDHE-ECDSA-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDHE-ECDSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDHE-ECDSA-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-ECDHE-ECDSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-ECDHE-ECDSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDHE-ECDSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, \"TLS-ECDHE-ECDSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA, \"TLS-ECDHE-ECDSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, \"TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, \"TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, \"TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, \"TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, \"TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, \"TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDHE-RSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDHE-RSA-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-ECDHE-RSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-ECDHE-RSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA, \"TLS-ECDHE-RSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA, \"TLS-ECDHE-RSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA512_C) && defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, \"TLS-DHE-RSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C && MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, \"TLS-DHE-RSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, \"TLS-DHE-RSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, \"TLS-DHE-RSA-WITH-AES-256-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA, \"TLS-DHE-RSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA, \"TLS-DHE-RSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM, \"TLS-DHE-RSA-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8, \"TLS-DHE-RSA-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM, \"TLS-DHE-RSA-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8, \"TLS-DHE-RSA-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256, \"TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA, \"TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA, \"TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-DHE-RSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-DHE-RSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA, \"TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA512_C) && defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384, \"TLS-RSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C && MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256, \"TLS-RSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256, \"TLS-RSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256, \"TLS-RSA-WITH-AES-256-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA, \"TLS-RSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA, \"TLS-RSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_RSA_WITH_AES_256_CCM, \"TLS-RSA-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8, \"TLS-RSA-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_RSA_WITH_AES_128_CCM, \"TLS-RSA-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8, \"TLS-RSA-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256, \"TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA, \"TLS-RSA-WITH-CAMELLIA-128-CBC-SHA\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA, \"TLS-RSA-WITH-CAMELLIA-256-CBC-SHA\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-RSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-RSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA, \"TLS-RSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_MD5_C)\n    { MBEDTLS_TLS_RSA_WITH_RC4_128_MD5, \"TLS-RSA-WITH-RC4-128-MD5\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_MD5, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_RC4_128_SHA, \"TLS-RSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, \"TLS-ECDH-RSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, \"TLS-ECDH-RSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, \"TLS-ECDH-RSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, \"TLS-ECDH-RSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, \"TLS-ECDH-RSA-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, \"TLS-ECDH-RSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDH-RSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDH-RSA-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-ECDH-RSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-ECDH-RSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDH-RSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA, \"TLS-ECDH-RSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA, \"TLS-ECDH-RSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_SHA1_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, \"TLS-ECDH-ECDSA-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, \"TLS-ECDH-ECDSA-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_SHA1_C */\n#if defined(MBEDTLS_SHA256_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, \"TLS-ECDH-ECDSA-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, \"TLS-ECDH-ECDSA-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, \"TLS-ECDH-ECDSA-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_GCM_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, \"TLS-ECDH-ECDSA-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDH-ECDSA-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDH-ECDSA-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-ECDH-ECDSA-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-ECDH-ECDSA-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDH-ECDSA-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA, \"TLS-ECDH-ECDSA-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA, \"TLS-ECDH-ECDSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256, \"TLS-PSK-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384, \"TLS-PSK-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256, \"TLS-PSK-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384, \"TLS-PSK-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA, \"TLS-PSK-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA, \"TLS-PSK-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_PSK_WITH_AES_256_CCM, \"TLS-PSK-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8, \"TLS-PSK-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_PSK_WITH_AES_128_CCM, \"TLS-PSK-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8, \"TLS-PSK-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-PSK-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-PSK-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-PSK-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-PSK-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA, \"TLS-PSK-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_PSK_WITH_RC4_128_SHA, \"TLS-PSK-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256, \"TLS-DHE-PSK-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, \"TLS-DHE-PSK-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256, \"TLS-DHE-PSK-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384, \"TLS-DHE-PSK-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA, \"TLS-DHE-PSK-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA, \"TLS-DHE-PSK-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM, \"TLS-DHE-PSK-WITH-AES-256-CCM\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8, \"TLS-DHE-PSK-WITH-AES-256-CCM-8\",\n      MBEDTLS_CIPHER_AES_256_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM, \"TLS-DHE-PSK-WITH-AES-128-CCM\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n    { MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8, \"TLS-DHE-PSK-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-DHE-PSK-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-DHE-PSK-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-DHE-PSK-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-DHE-PSK-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA, \"TLS-DHE-PSK-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA, \"TLS-DHE-PSK-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n#if defined(MBEDTLS_AES_C)\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256, \"TLS-ECDHE-PSK-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384, \"TLS-ECDHE-PSK-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA, \"TLS-ECDHE-PSK-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA, \"TLS-ECDHE-PSK-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-ECDHE-PSK-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-ECDHE-PSK-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA, \"TLS-ECDHE-PSK-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA, \"TLS-ECDHE-PSK-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256, \"TLS-RSA-PSK-WITH-AES-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_AES_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, \"TLS-RSA-PSK-WITH-AES-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_AES_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256, \"TLS-RSA-PSK-WITH-AES-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384, \"TLS-RSA-PSK-WITH-AES-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA, \"TLS-RSA-PSK-WITH-AES-128-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n\n    { MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA, \"TLS-RSA-PSK-WITH-AES-256-CBC-SHA\",\n      MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_AES_C */\n\n#if defined(MBEDTLS_CAMELLIA_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256, \"TLS-RSA-PSK-WITH-CAMELLIA-128-CBC-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384, \"TLS-RSA-PSK-WITH-CAMELLIA-256-CBC-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_CBC, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n#if defined(MBEDTLS_GCM_C)\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256, \"TLS-RSA-PSK-WITH-CAMELLIA-128-GCM-SHA256\",\n      MBEDTLS_CIPHER_CAMELLIA_128_GCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384, \"TLS-RSA-PSK-WITH-CAMELLIA-256-GCM-SHA384\",\n      MBEDTLS_CIPHER_CAMELLIA_256_GCM, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_GCM_C */\n#endif /* MBEDTLS_CAMELLIA_C */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA, \"TLS-RSA-PSK-WITH-3DES-EDE-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_EDE3_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      0 },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n\n#if defined(MBEDTLS_ARC4_C)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA, \"TLS-RSA-PSK-WITH-RC4-128-SHA\",\n      MBEDTLS_CIPHER_ARC4_128, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_NODTLS },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_ARC4_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n#if defined(MBEDTLS_AES_C)\n#if defined(MBEDTLS_CCM_C)\n    { MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8, \"TLS-ECJPAKE-WITH-AES-128-CCM-8\",\n      MBEDTLS_CIPHER_AES_128_CCM, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECJPAKE,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_SHORT_TAG },\n#endif /* MBEDTLS_CCM_C */\n#endif /* MBEDTLS_AES_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_ENABLE_WEAK_CIPHERSUITES)\n#if defined(MBEDTLS_CIPHER_NULL_CIPHER)\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n#if defined(MBEDTLS_MD5_C)\n    { MBEDTLS_TLS_RSA_WITH_NULL_MD5, \"TLS-RSA-WITH-NULL-MD5\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_MD5, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_NULL_SHA, \"TLS-RSA-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_WITH_NULL_SHA256, \"TLS-RSA-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_PSK_WITH_NULL_SHA, \"TLS-PSK-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_PSK_WITH_NULL_SHA256, \"TLS-PSK-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_PSK_WITH_NULL_SHA384, \"TLS-PSK-WITH-NULL-SHA384\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA, \"TLS-DHE-PSK-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256, \"TLS-DHE-PSK-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384, \"TLS-DHE-PSK-WITH-NULL-SHA384\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA, \"TLS-ECDHE-PSK-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256, \"TLS-ECDHE-PSK-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384, \"TLS-ECDHE-PSK-WITH-NULL-SHA384\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA, \"TLS-RSA-PSK-WITH-NULL-SHA\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n\n#if defined(MBEDTLS_SHA256_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256, \"TLS-RSA-PSK-WITH-NULL-SHA256\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\n    { MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384, \"TLS-RSA-PSK-WITH-NULL-SHA384\",\n      MBEDTLS_CIPHER_NULL, MBEDTLS_MD_SHA384, MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_1,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#endif /* MBEDTLS_CIPHER_NULL_CIPHER */\n\n#if defined(MBEDTLS_DES_C)\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA, \"TLS-DHE-RSA-WITH-DES-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n#if defined(MBEDTLS_SHA1_C)\n    { MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA, \"TLS-RSA-WITH-DES-CBC-SHA\",\n      MBEDTLS_CIPHER_DES_CBC, MBEDTLS_MD_SHA1, MBEDTLS_KEY_EXCHANGE_RSA,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_0,\n      MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,\n      MBEDTLS_CIPHERSUITE_WEAK },\n#endif /* MBEDTLS_SHA1_C */\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n#endif /* MBEDTLS_DES_C */\n#endif /* MBEDTLS_ENABLE_WEAK_CIPHERSUITES */\n\n    { 0, \"\",\n      MBEDTLS_CIPHER_NONE, MBEDTLS_MD_NONE, MBEDTLS_KEY_EXCHANGE_NONE,\n      0, 0, 0, 0, 0 }\n};\n\n#if defined(MBEDTLS_SSL_CIPHERSUITES)\nconst int *mbedtls_ssl_list_ciphersuites( void )\n{\n    return( ciphersuite_preference );\n}\n#else\n#define MAX_CIPHERSUITES    sizeof( ciphersuite_definitions     ) /         \\\n                            sizeof( ciphersuite_definitions[0]  )\nstatic int supported_ciphersuites[MAX_CIPHERSUITES];\nstatic int supported_init = 0;\n\nconst int *mbedtls_ssl_list_ciphersuites( void )\n{\n    /*\n     * On initial call filter out all ciphersuites not supported by current\n     * build based on presence in the ciphersuite_definitions.\n     */\n    if( supported_init == 0 )\n    {\n        const int *p;\n        int *q;\n\n        for( p = ciphersuite_preference, q = supported_ciphersuites;\n             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;\n             p++ )\n        {\n#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)\n            const mbedtls_ssl_ciphersuite_t *cs_info;\n            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&\n                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )\n#else\n            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )\n#endif\n                *(q++) = *p;\n        }\n        *q = 0;\n\n        supported_init = 1;\n    }\n\n    return( supported_ciphersuites );\n}\n#endif /* MBEDTLS_SSL_CIPHERSUITES */\n\nconst mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_string(\n                                                const char *ciphersuite_name )\n{\n    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;\n\n    if( NULL == ciphersuite_name )\n        return( NULL );\n\n    while( cur->id != 0 )\n    {\n        if( 0 == strcmp( cur->name, ciphersuite_name ) )\n            return( cur );\n\n        cur++;\n    }\n\n    return( NULL );\n}\n\nconst mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )\n{\n    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;\n\n    while( cur->id != 0 )\n    {\n        if( cur->id == ciphersuite )\n            return( cur );\n\n        cur++;\n    }\n\n    return( NULL );\n}\n\nconst char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )\n{\n    const mbedtls_ssl_ciphersuite_t *cur;\n\n    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );\n\n    if( cur == NULL )\n        return( \"unknown\" );\n\n    return( cur->name );\n}\n\nint mbedtls_ssl_get_ciphersuite_id( const char *ciphersuite_name )\n{\n    const mbedtls_ssl_ciphersuite_t *cur;\n\n    cur = mbedtls_ssl_ciphersuite_from_string( ciphersuite_name );\n\n    if( cur == NULL )\n        return( 0 );\n\n    return( cur->id );\n}\n\n#if defined(MBEDTLS_PK_C)\nmbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:\n            return( MBEDTLS_PK_RSA );\n\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n            return( MBEDTLS_PK_ECDSA );\n\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n            return( MBEDTLS_PK_ECKEY );\n\n        default:\n            return( MBEDTLS_PK_NONE );\n    }\n}\n\nmbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_alg( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n            return( MBEDTLS_PK_RSA );\n\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n            return( MBEDTLS_PK_ECDSA );\n\n        default:\n            return( MBEDTLS_PK_NONE );\n    }\n}\n\n#endif /* MBEDTLS_PK_C */\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)\nint mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nint mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:\n        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#endif /* MBEDTLS_SSL_TLS_C */\n","/**\n * \\file ssl_ciphersuites.h\n *\n * \\brief SSL Ciphersuites for mbed TLS\n */\n/*\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n#ifndef MBEDTLS_SSL_CIPHERSUITES_H\n#define MBEDTLS_SSL_CIPHERSUITES_H\n\n#include \"pk.h\"\n#include \"cipher.h\"\n#include \"md.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * Supported ciphersuites (Official IANA names)\n */\n#define MBEDTLS_TLS_RSA_WITH_NULL_MD5                    0x01   /**< Weak! */\n#define MBEDTLS_TLS_RSA_WITH_NULL_SHA                    0x02   /**< Weak! */\n\n#define MBEDTLS_TLS_RSA_WITH_RC4_128_MD5                 0x04\n#define MBEDTLS_TLS_RSA_WITH_RC4_128_SHA                 0x05\n#define MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA                 0x09   /**< Weak! Not in TLS 1.2 */\n\n#define MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA            0x0A\n\n#define MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA             0x15   /**< Weak! Not in TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA        0x16\n\n#define MBEDTLS_TLS_PSK_WITH_NULL_SHA                    0x2C   /**< Weak! */\n#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA                0x2D   /**< Weak! */\n#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA                0x2E   /**< Weak! */\n#define MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA             0x2F\n\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA         0x33\n#define MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA             0x35\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA         0x39\n\n#define MBEDTLS_TLS_RSA_WITH_NULL_SHA256                 0x3B   /**< Weak! */\n#define MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256          0x3C   /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256          0x3D   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA        0x41\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA    0x45\n\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256      0x67   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256      0x6B   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA        0x84\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA    0x88\n\n#define MBEDTLS_TLS_PSK_WITH_RC4_128_SHA                 0x8A\n#define MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA            0x8B\n#define MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA             0x8C\n#define MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA             0x8D\n\n#define MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA             0x8E\n#define MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA        0x8F\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA         0x90\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA         0x91\n\n#define MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA             0x92\n#define MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA        0x93\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA         0x94\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA         0x95\n\n#define MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256          0x9C   /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384          0x9D   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256      0x9E   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384      0x9F   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256          0xA8   /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384          0xA9   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256      0xAA   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384      0xAB   /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256      0xAC   /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384      0xAD   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256          0xAE\n#define MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384          0xAF\n#define MBEDTLS_TLS_PSK_WITH_NULL_SHA256                 0xB0   /**< Weak! */\n#define MBEDTLS_TLS_PSK_WITH_NULL_SHA384                 0xB1   /**< Weak! */\n\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256      0xB2\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384      0xB3\n#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256             0xB4   /**< Weak! */\n#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384             0xB5   /**< Weak! */\n\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256      0xB6\n#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384      0xB7\n#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256             0xB8   /**< Weak! */\n#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384             0xB9   /**< Weak! */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256     0xBA   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 0xBE   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256     0xC0   /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 0xC4   /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA             0xC001 /**< Weak! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA          0xC002 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA     0xC003 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA      0xC004 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA      0xC005 /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA            0xC006 /**< Weak! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA         0xC007 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA    0xC008 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA     0xC009 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA     0xC00A /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA               0xC00B /**< Weak! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA            0xC00C /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA       0xC00D /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA        0xC00E /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA        0xC00F /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA              0xC010 /**< Weak! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA           0xC011 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA      0xC012 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA       0xC013 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA       0xC014 /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256  0xC023 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384  0xC024 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256   0xC025 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384   0xC026 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256    0xC027 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384    0xC028 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256     0xC029 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384     0xC02A /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256  0xC02B /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384  0xC02C /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256   0xC02D /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384   0xC02E /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256    0xC02F /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384    0xC030 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256     0xC031 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384     0xC032 /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA           0xC033 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA      0xC034 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA       0xC035 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA       0xC036 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256    0xC037 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384    0xC038 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA              0xC039 /**< Weak! No SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256           0xC03A /**< Weak! No SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384           0xC03B /**< Weak! No SSL3! */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 0xC072 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 0xC073 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256  0xC074 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384  0xC075 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256   0xC076 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384   0xC077 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256    0xC078 /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384    0xC079 /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256         0xC07A /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384         0xC07B /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256     0xC07C /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384     0xC07D /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 0xC086 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 0xC087 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256  0xC088 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384  0xC089 /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256   0xC08A /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384   0xC08B /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256    0xC08C /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384    0xC08D /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256       0xC08E /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384       0xC08F /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256   0xC090 /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384   0xC091 /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256   0xC092 /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384   0xC093 /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256       0xC094\n#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384       0xC095\n#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256   0xC096\n#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384   0xC097\n#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256   0xC098\n#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384   0xC099\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 0xC09A /**< Not in SSL3! */\n#define MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 0xC09B /**< Not in SSL3! */\n\n#define MBEDTLS_TLS_RSA_WITH_AES_128_CCM                0xC09C  /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_256_CCM                0xC09D  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM            0xC09E  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM            0xC09F  /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8              0xC0A0  /**< TLS 1.2 */\n#define MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8              0xC0A1  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8          0xC0A2  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8          0xC0A3  /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_128_CCM                0xC0A4  /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_256_CCM                0xC0A5  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM            0xC0A6  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM            0xC0A7  /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8              0xC0A8  /**< TLS 1.2 */\n#define MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8              0xC0A9  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8          0xC0AA  /**< TLS 1.2 */\n#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8          0xC0AB  /**< TLS 1.2 */\n/* The last two are named with PSK_DHE in the RFC, which looks like a typo */\n\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM        0xC0AC  /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM        0xC0AD  /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8      0xC0AE  /**< TLS 1.2 */\n#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8      0xC0AF  /**< TLS 1.2 */\n\n#define MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8          0xC0FF  /**< experimental */\n\n/* Reminder: update mbedtls_ssl_premaster_secret when adding a new key exchange.\n * Reminder: update MBEDTLS_KEY_EXCHANGE__xxx below\n */\ntypedef enum {\n    MBEDTLS_KEY_EXCHANGE_NONE = 0,\n    MBEDTLS_KEY_EXCHANGE_RSA,\n    MBEDTLS_KEY_EXCHANGE_DHE_RSA,\n    MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,\n    MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,\n    MBEDTLS_KEY_EXCHANGE_PSK,\n    MBEDTLS_KEY_EXCHANGE_DHE_PSK,\n    MBEDTLS_KEY_EXCHANGE_RSA_PSK,\n    MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,\n    MBEDTLS_KEY_EXCHANGE_ECDH_RSA,\n    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,\n    MBEDTLS_KEY_EXCHANGE_ECJPAKE,\n} mbedtls_key_exchange_type_t;\n\n/* Key exchanges using a certificate */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           || \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED\n#endif\n\n/* Key exchanges allowing client certificate requests */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)    ||       \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) \n#define MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED\n#endif\n\n/* Key exchanges involving server signature in ServerKeyExchange */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED\n#endif\n\n/* Key exchanges using ECDH */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED\n#endif\n\n/* Key exchanges that don't involve ephemeral keys */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           || \\\n    defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)           || \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED\n#endif\n\n/* Key exchanges that involve ephemeral keys */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED\n#endif\n\n/* Key exchanges using a PSK */\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)           || \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED\n#endif\n\n/* Key exchanges using DHE */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED\n#endif\n\n/* Key exchanges using ECDHE */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n#define MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED\n#endif\n\ntypedef struct mbedtls_ssl_ciphersuite_t mbedtls_ssl_ciphersuite_t;\n\n#define MBEDTLS_CIPHERSUITE_WEAK       0x01    /**< Weak ciphersuite flag  */\n#define MBEDTLS_CIPHERSUITE_SHORT_TAG  0x02    /**< Short authentication tag,\n                                                     eg for CCM_8 */\n#define MBEDTLS_CIPHERSUITE_NODTLS     0x04    /**< Can't be used with DTLS */\n\n/**\n * \\brief   This structure is used for storing ciphersuite information\n */\nstruct mbedtls_ssl_ciphersuite_t\n{\n    int id;\n    const char * name;\n\n    mbedtls_cipher_type_t cipher;\n    mbedtls_md_type_t mac;\n    mbedtls_key_exchange_type_t key_exchange;\n\n    int min_major_ver;\n    int min_minor_ver;\n    int max_major_ver;\n    int max_minor_ver;\n\n    unsigned char flags;\n};\n\nconst int *mbedtls_ssl_list_ciphersuites( void );\n\nconst mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_string( const char *ciphersuite_name );\nconst mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite_id );\n\n#if defined(MBEDTLS_PK_C)\nmbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info );\nmbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_alg( const mbedtls_ssl_ciphersuite_t *info );\n#endif\n\nint mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info );\nint mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info );\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_has_pfs( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_ECJPAKE:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_no_pfs( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_PSK:\n        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_uses_ecdh( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */\n\nstatic inline int mbedtls_ssl_ciphersuite_cert_req_allowed( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_uses_dhe( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED) */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_uses_ecdhe( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\nstatic inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )\n{\n    switch( info->key_exchange )\n    {\n        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n            return( 1 );\n\n        default:\n            return( 0 );\n    }\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* ssl_ciphersuites.h */\n","/*\n *  Elliptic curves over GF(p): curve-specific data and functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n\n#include \"mbedtls/ecp.h\"\n\n#include <string.h>\n\n#if !defined(MBEDTLS_ECP_ALT)\n\n#if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \\\n    !defined(inline) && !defined(__cplusplus)\n#define inline __inline\n#endif\n\n/*\n * Conversion macros for embedded constants:\n * build lists of mbedtls_mpi_uint's from lists of unsigned char's grouped by 8, 4 or 2\n */\n#if defined(MBEDTLS_HAVE_INT32)\n\n#define BYTES_TO_T_UINT_4( a, b, c, d )             \\\n    ( (mbedtls_mpi_uint) a <<  0 ) |                          \\\n    ( (mbedtls_mpi_uint) b <<  8 ) |                          \\\n    ( (mbedtls_mpi_uint) c << 16 ) |                          \\\n    ( (mbedtls_mpi_uint) d << 24 )\n\n#define BYTES_TO_T_UINT_2( a, b )                   \\\n    BYTES_TO_T_UINT_4( a, b, 0, 0 )\n\n#define BYTES_TO_T_UINT_8( a, b, c, d, e, f, g, h ) \\\n    BYTES_TO_T_UINT_4( a, b, c, d ),                \\\n    BYTES_TO_T_UINT_4( e, f, g, h )\n\n#else /* 64-bits */\n\n#define BYTES_TO_T_UINT_8( a, b, c, d, e, f, g, h ) \\\n    ( (mbedtls_mpi_uint) a <<  0 ) |                          \\\n    ( (mbedtls_mpi_uint) b <<  8 ) |                          \\\n    ( (mbedtls_mpi_uint) c << 16 ) |                          \\\n    ( (mbedtls_mpi_uint) d << 24 ) |                          \\\n    ( (mbedtls_mpi_uint) e << 32 ) |                          \\\n    ( (mbedtls_mpi_uint) f << 40 ) |                          \\\n    ( (mbedtls_mpi_uint) g << 48 ) |                          \\\n    ( (mbedtls_mpi_uint) h << 56 )\n\n#define BYTES_TO_T_UINT_4( a, b, c, d )             \\\n    BYTES_TO_T_UINT_8( a, b, c, d, 0, 0, 0, 0 )\n\n#define BYTES_TO_T_UINT_2( a, b )                   \\\n    BYTES_TO_T_UINT_8( a, b, 0, 0, 0, 0, 0, 0 )\n\n#endif /* bits in mbedtls_mpi_uint */\n\n/*\n * Note: the constants are in little-endian order\n * to be directly usable in MPIs\n */\n\n/*\n * Domain parameters for secp192r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\nstatic const mbedtls_mpi_uint secp192r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp192r1_b[] = {\n    BYTES_TO_T_UINT_8( 0xB1, 0xB9, 0x46, 0xC1, 0xEC, 0xDE, 0xB8, 0xFE ),\n    BYTES_TO_T_UINT_8( 0x49, 0x30, 0x24, 0x72, 0xAB, 0xE9, 0xA7, 0x0F ),\n    BYTES_TO_T_UINT_8( 0xE7, 0x80, 0x9C, 0xE5, 0x19, 0x05, 0x21, 0x64 ),\n};\nstatic const mbedtls_mpi_uint secp192r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x12, 0x10, 0xFF, 0x82, 0xFD, 0x0A, 0xFF, 0xF4 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x88, 0xA1, 0x43, 0xEB, 0x20, 0xBF, 0x7C ),\n    BYTES_TO_T_UINT_8( 0xF6, 0x90, 0x30, 0xB0, 0x0E, 0xA8, 0x8D, 0x18 ),\n};\nstatic const mbedtls_mpi_uint secp192r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x11, 0x48, 0x79, 0x1E, 0xA1, 0x77, 0xF9, 0x73 ),\n    BYTES_TO_T_UINT_8( 0xD5, 0xCD, 0x24, 0x6B, 0xED, 0x11, 0x10, 0x63 ),\n    BYTES_TO_T_UINT_8( 0x78, 0xDA, 0xC8, 0xFF, 0x95, 0x2B, 0x19, 0x07 ),\n};\nstatic const mbedtls_mpi_uint secp192r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x31, 0x28, 0xD2, 0xB4, 0xB1, 0xC9, 0x6B, 0x14 ),\n    BYTES_TO_T_UINT_8( 0x36, 0xF8, 0xDE, 0x99, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */\n\n/*\n * Domain parameters for secp224r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\nstatic const mbedtls_mpi_uint secp224r1_p[] = {\n    BYTES_TO_T_UINT_8( 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp224r1_b[] = {\n    BYTES_TO_T_UINT_8( 0xB4, 0xFF, 0x55, 0x23, 0x43, 0x39, 0x0B, 0x27 ),\n    BYTES_TO_T_UINT_8( 0xBA, 0xD8, 0xBF, 0xD7, 0xB7, 0xB0, 0x44, 0x50 ),\n    BYTES_TO_T_UINT_8( 0x56, 0x32, 0x41, 0xF5, 0xAB, 0xB3, 0x04, 0x0C ),\n    BYTES_TO_T_UINT_4( 0x85, 0x0A, 0x05, 0xB4 ),\n};\nstatic const mbedtls_mpi_uint secp224r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x21, 0x1D, 0x5C, 0x11, 0xD6, 0x80, 0x32, 0x34 ),\n    BYTES_TO_T_UINT_8( 0x22, 0x11, 0xC2, 0x56, 0xD3, 0xC1, 0x03, 0x4A ),\n    BYTES_TO_T_UINT_8( 0xB9, 0x90, 0x13, 0x32, 0x7F, 0xBF, 0xB4, 0x6B ),\n    BYTES_TO_T_UINT_4( 0xBD, 0x0C, 0x0E, 0xB7 ),\n};\nstatic const mbedtls_mpi_uint secp224r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x34, 0x7E, 0x00, 0x85, 0x99, 0x81, 0xD5, 0x44 ),\n    BYTES_TO_T_UINT_8( 0x64, 0x47, 0x07, 0x5A, 0xA0, 0x75, 0x43, 0xCD ),\n    BYTES_TO_T_UINT_8( 0xE6, 0xDF, 0x22, 0x4C, 0xFB, 0x23, 0xF7, 0xB5 ),\n    BYTES_TO_T_UINT_4( 0x88, 0x63, 0x37, 0xBD ),\n};\nstatic const mbedtls_mpi_uint secp224r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x3D, 0x2A, 0x5C, 0x5C, 0x45, 0x29, 0xDD, 0x13 ),\n    BYTES_TO_T_UINT_8( 0x3E, 0xF0, 0xB8, 0xE0, 0xA2, 0x16, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_4( 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */\n\n/*\n * Domain parameters for secp256r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\nstatic const mbedtls_mpi_uint secp256r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp256r1_b[] = {\n    BYTES_TO_T_UINT_8( 0x4B, 0x60, 0xD2, 0x27, 0x3E, 0x3C, 0xCE, 0x3B ),\n    BYTES_TO_T_UINT_8( 0xF6, 0xB0, 0x53, 0xCC, 0xB0, 0x06, 0x1D, 0x65 ),\n    BYTES_TO_T_UINT_8( 0xBC, 0x86, 0x98, 0x76, 0x55, 0xBD, 0xEB, 0xB3 ),\n    BYTES_TO_T_UINT_8( 0xE7, 0x93, 0x3A, 0xAA, 0xD8, 0x35, 0xC6, 0x5A ),\n};\nstatic const mbedtls_mpi_uint secp256r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x96, 0xC2, 0x98, 0xD8, 0x45, 0x39, 0xA1, 0xF4 ),\n    BYTES_TO_T_UINT_8( 0xA0, 0x33, 0xEB, 0x2D, 0x81, 0x7D, 0x03, 0x77 ),\n    BYTES_TO_T_UINT_8( 0xF2, 0x40, 0xA4, 0x63, 0xE5, 0xE6, 0xBC, 0xF8 ),\n    BYTES_TO_T_UINT_8( 0x47, 0x42, 0x2C, 0xE1, 0xF2, 0xD1, 0x17, 0x6B ),\n};\nstatic const mbedtls_mpi_uint secp256r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0xF5, 0x51, 0xBF, 0x37, 0x68, 0x40, 0xB6, 0xCB ),\n    BYTES_TO_T_UINT_8( 0xCE, 0x5E, 0x31, 0x6B, 0x57, 0x33, 0xCE, 0x2B ),\n    BYTES_TO_T_UINT_8( 0x16, 0x9E, 0x0F, 0x7C, 0x4A, 0xEB, 0xE7, 0x8E ),\n    BYTES_TO_T_UINT_8( 0x9B, 0x7F, 0x1A, 0xFE, 0xE2, 0x42, 0xE3, 0x4F ),\n};\nstatic const mbedtls_mpi_uint secp256r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x51, 0x25, 0x63, 0xFC, 0xC2, 0xCA, 0xB9, 0xF3 ),\n    BYTES_TO_T_UINT_8( 0x84, 0x9E, 0x17, 0xA7, 0xAD, 0xFA, 0xE6, 0xBC ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */\n\n/*\n * Domain parameters for secp384r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\nstatic const mbedtls_mpi_uint secp384r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp384r1_b[] = {\n    BYTES_TO_T_UINT_8( 0xEF, 0x2A, 0xEC, 0xD3, 0xED, 0xC8, 0x85, 0x2A ),\n    BYTES_TO_T_UINT_8( 0x9D, 0xD1, 0x2E, 0x8A, 0x8D, 0x39, 0x56, 0xC6 ),\n    BYTES_TO_T_UINT_8( 0x5A, 0x87, 0x13, 0x50, 0x8F, 0x08, 0x14, 0x03 ),\n    BYTES_TO_T_UINT_8( 0x12, 0x41, 0x81, 0xFE, 0x6E, 0x9C, 0x1D, 0x18 ),\n    BYTES_TO_T_UINT_8( 0x19, 0x2D, 0xF8, 0xE3, 0x6B, 0x05, 0x8E, 0x98 ),\n    BYTES_TO_T_UINT_8( 0xE4, 0xE7, 0x3E, 0xE2, 0xA7, 0x2F, 0x31, 0xB3 ),\n};\nstatic const mbedtls_mpi_uint secp384r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0xB7, 0x0A, 0x76, 0x72, 0x38, 0x5E, 0x54, 0x3A ),\n    BYTES_TO_T_UINT_8( 0x6C, 0x29, 0x55, 0xBF, 0x5D, 0xF2, 0x02, 0x55 ),\n    BYTES_TO_T_UINT_8( 0x38, 0x2A, 0x54, 0x82, 0xE0, 0x41, 0xF7, 0x59 ),\n    BYTES_TO_T_UINT_8( 0x98, 0x9B, 0xA7, 0x8B, 0x62, 0x3B, 0x1D, 0x6E ),\n    BYTES_TO_T_UINT_8( 0x74, 0xAD, 0x20, 0xF3, 0x1E, 0xC7, 0xB1, 0x8E ),\n    BYTES_TO_T_UINT_8( 0x37, 0x05, 0x8B, 0xBE, 0x22, 0xCA, 0x87, 0xAA ),\n};\nstatic const mbedtls_mpi_uint secp384r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x5F, 0x0E, 0xEA, 0x90, 0x7C, 0x1D, 0x43, 0x7A ),\n    BYTES_TO_T_UINT_8( 0x9D, 0x81, 0x7E, 0x1D, 0xCE, 0xB1, 0x60, 0x0A ),\n    BYTES_TO_T_UINT_8( 0xC0, 0xB8, 0xF0, 0xB5, 0x13, 0x31, 0xDA, 0xE9 ),\n    BYTES_TO_T_UINT_8( 0x7C, 0x14, 0x9A, 0x28, 0xBD, 0x1D, 0xF4, 0xF8 ),\n    BYTES_TO_T_UINT_8( 0x29, 0xDC, 0x92, 0x92, 0xBF, 0x98, 0x9E, 0x5D ),\n    BYTES_TO_T_UINT_8( 0x6F, 0x2C, 0x26, 0x96, 0x4A, 0xDE, 0x17, 0x36 ),\n};\nstatic const mbedtls_mpi_uint secp384r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x73, 0x29, 0xC5, 0xCC, 0x6A, 0x19, 0xEC, 0xEC ),\n    BYTES_TO_T_UINT_8( 0x7A, 0xA7, 0xB0, 0x48, 0xB2, 0x0D, 0x1A, 0x58 ),\n    BYTES_TO_T_UINT_8( 0xDF, 0x2D, 0x37, 0xF4, 0x81, 0x4D, 0x63, 0xC7 ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n\n/*\n * Domain parameters for secp521r1\n */\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\nstatic const mbedtls_mpi_uint secp521r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_2( 0xFF, 0x01 ),\n};\nstatic const mbedtls_mpi_uint secp521r1_b[] = {\n    BYTES_TO_T_UINT_8( 0x00, 0x3F, 0x50, 0x6B, 0xD4, 0x1F, 0x45, 0xEF ),\n    BYTES_TO_T_UINT_8( 0xF1, 0x34, 0x2C, 0x3D, 0x88, 0xDF, 0x73, 0x35 ),\n    BYTES_TO_T_UINT_8( 0x07, 0xBF, 0xB1, 0x3B, 0xBD, 0xC0, 0x52, 0x16 ),\n    BYTES_TO_T_UINT_8( 0x7B, 0x93, 0x7E, 0xEC, 0x51, 0x39, 0x19, 0x56 ),\n    BYTES_TO_T_UINT_8( 0xE1, 0x09, 0xF1, 0x8E, 0x91, 0x89, 0xB4, 0xB8 ),\n    BYTES_TO_T_UINT_8( 0xF3, 0x15, 0xB3, 0x99, 0x5B, 0x72, 0xDA, 0xA2 ),\n    BYTES_TO_T_UINT_8( 0xEE, 0x40, 0x85, 0xB6, 0xA0, 0x21, 0x9A, 0x92 ),\n    BYTES_TO_T_UINT_8( 0x1F, 0x9A, 0x1C, 0x8E, 0x61, 0xB9, 0x3E, 0x95 ),\n    BYTES_TO_T_UINT_2( 0x51, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp521r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x66, 0xBD, 0xE5, 0xC2, 0x31, 0x7E, 0x7E, 0xF9 ),\n    BYTES_TO_T_UINT_8( 0x9B, 0x42, 0x6A, 0x85, 0xC1, 0xB3, 0x48, 0x33 ),\n    BYTES_TO_T_UINT_8( 0xDE, 0xA8, 0xFF, 0xA2, 0x27, 0xC1, 0x1D, 0xFE ),\n    BYTES_TO_T_UINT_8( 0x28, 0x59, 0xE7, 0xEF, 0x77, 0x5E, 0x4B, 0xA1 ),\n    BYTES_TO_T_UINT_8( 0xBA, 0x3D, 0x4D, 0x6B, 0x60, 0xAF, 0x28, 0xF8 ),\n    BYTES_TO_T_UINT_8( 0x21, 0xB5, 0x3F, 0x05, 0x39, 0x81, 0x64, 0x9C ),\n    BYTES_TO_T_UINT_8( 0x42, 0xB4, 0x95, 0x23, 0x66, 0xCB, 0x3E, 0x9E ),\n    BYTES_TO_T_UINT_8( 0xCD, 0xE9, 0x04, 0x04, 0xB7, 0x06, 0x8E, 0x85 ),\n    BYTES_TO_T_UINT_2( 0xC6, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp521r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x50, 0x66, 0xD1, 0x9F, 0x76, 0x94, 0xBE, 0x88 ),\n    BYTES_TO_T_UINT_8( 0x40, 0xC2, 0x72, 0xA2, 0x86, 0x70, 0x3C, 0x35 ),\n    BYTES_TO_T_UINT_8( 0x61, 0x07, 0xAD, 0x3F, 0x01, 0xB9, 0x50, 0xC5 ),\n    BYTES_TO_T_UINT_8( 0x40, 0x26, 0xF4, 0x5E, 0x99, 0x72, 0xEE, 0x97 ),\n    BYTES_TO_T_UINT_8( 0x2C, 0x66, 0x3E, 0x27, 0x17, 0xBD, 0xAF, 0x17 ),\n    BYTES_TO_T_UINT_8( 0x68, 0x44, 0x9B, 0x57, 0x49, 0x44, 0xF5, 0x98 ),\n    BYTES_TO_T_UINT_8( 0xD9, 0x1B, 0x7D, 0x2C, 0xB4, 0x5F, 0x8A, 0x5C ),\n    BYTES_TO_T_UINT_8( 0x04, 0xC0, 0x3B, 0x9A, 0x78, 0x6A, 0x29, 0x39 ),\n    BYTES_TO_T_UINT_2( 0x18, 0x01 ),\n};\nstatic const mbedtls_mpi_uint secp521r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x09, 0x64, 0x38, 0x91, 0x1E, 0xB7, 0x6F, 0xBB ),\n    BYTES_TO_T_UINT_8( 0xAE, 0x47, 0x9C, 0x89, 0xB8, 0xC9, 0xB5, 0x3B ),\n    BYTES_TO_T_UINT_8( 0xD0, 0xA5, 0x09, 0xF7, 0x48, 0x01, 0xCC, 0x7F ),\n    BYTES_TO_T_UINT_8( 0x6B, 0x96, 0x2F, 0xBF, 0x83, 0x87, 0x86, 0x51 ),\n    BYTES_TO_T_UINT_8( 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_2( 0xFF, 0x01 ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\nstatic const mbedtls_mpi_uint secp192k1_p[] = {\n    BYTES_TO_T_UINT_8( 0x37, 0xEE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp192k1_a[] = {\n    BYTES_TO_T_UINT_2( 0x00, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp192k1_b[] = {\n    BYTES_TO_T_UINT_2( 0x03, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp192k1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x7D, 0x6C, 0xE0, 0xEA, 0xB1, 0xD1, 0xA5, 0x1D ),\n    BYTES_TO_T_UINT_8( 0x34, 0xF4, 0xB7, 0x80, 0x02, 0x7D, 0xB0, 0x26 ),\n    BYTES_TO_T_UINT_8( 0xAE, 0xE9, 0x57, 0xC0, 0x0E, 0xF1, 0x4F, 0xDB ),\n};\nstatic const mbedtls_mpi_uint secp192k1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x9D, 0x2F, 0x5E, 0xD9, 0x88, 0xAA, 0x82, 0x40 ),\n    BYTES_TO_T_UINT_8( 0x34, 0x86, 0xBE, 0x15, 0xD0, 0x63, 0x41, 0x84 ),\n    BYTES_TO_T_UINT_8( 0xA7, 0x28, 0x56, 0x9C, 0x6D, 0x2F, 0x2F, 0x9B ),\n};\nstatic const mbedtls_mpi_uint secp192k1_n[] = {\n    BYTES_TO_T_UINT_8( 0x8D, 0xFD, 0xDE, 0x74, 0x6A, 0x46, 0x69, 0x0F ),\n    BYTES_TO_T_UINT_8( 0x17, 0xFC, 0xF2, 0x26, 0xFE, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\nstatic const mbedtls_mpi_uint secp224k1_p[] = {\n    BYTES_TO_T_UINT_8( 0x6D, 0xE5, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_4( 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp224k1_a[] = {\n    BYTES_TO_T_UINT_2( 0x00, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp224k1_b[] = {\n    BYTES_TO_T_UINT_2( 0x05, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp224k1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x5C, 0xA4, 0xB7, 0xB6, 0x0E, 0x65, 0x7E, 0x0F ),\n    BYTES_TO_T_UINT_8( 0xA9, 0x75, 0x70, 0xE4, 0xE9, 0x67, 0xA4, 0x69 ),\n    BYTES_TO_T_UINT_8( 0xA1, 0x28, 0xFC, 0x30, 0xDF, 0x99, 0xF0, 0x4D ),\n    BYTES_TO_T_UINT_4( 0x33, 0x5B, 0x45, 0xA1 ),\n};\nstatic const mbedtls_mpi_uint secp224k1_gy[] = {\n    BYTES_TO_T_UINT_8( 0xA5, 0x61, 0x6D, 0x55, 0xDB, 0x4B, 0xCA, 0xE2 ),\n    BYTES_TO_T_UINT_8( 0x59, 0xBD, 0xB0, 0xC0, 0xF7, 0x19, 0xE3, 0xF7 ),\n    BYTES_TO_T_UINT_8( 0xD6, 0xFB, 0xCA, 0x82, 0x42, 0x34, 0xBA, 0x7F ),\n    BYTES_TO_T_UINT_4( 0xED, 0x9F, 0x08, 0x7E ),\n};\nstatic const mbedtls_mpi_uint secp224k1_n[] = {\n    BYTES_TO_T_UINT_8( 0xF7, 0xB1, 0x9F, 0x76, 0x71, 0xA9, 0xF0, 0xCA ),\n    BYTES_TO_T_UINT_8( 0x84, 0x61, 0xEC, 0xD2, 0xE8, 0xDC, 0x01, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),\n    BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\nstatic const mbedtls_mpi_uint secp256k1_p[] = {\n    BYTES_TO_T_UINT_8( 0x2F, 0xFC, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\nstatic const mbedtls_mpi_uint secp256k1_a[] = {\n    BYTES_TO_T_UINT_2( 0x00, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp256k1_b[] = {\n    BYTES_TO_T_UINT_2( 0x07, 0x00 ),\n};\nstatic const mbedtls_mpi_uint secp256k1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x98, 0x17, 0xF8, 0x16, 0x5B, 0x81, 0xF2, 0x59 ),\n    BYTES_TO_T_UINT_8( 0xD9, 0x28, 0xCE, 0x2D, 0xDB, 0xFC, 0x9B, 0x02 ),\n    BYTES_TO_T_UINT_8( 0x07, 0x0B, 0x87, 0xCE, 0x95, 0x62, 0xA0, 0x55 ),\n    BYTES_TO_T_UINT_8( 0xAC, 0xBB, 0xDC, 0xF9, 0x7E, 0x66, 0xBE, 0x79 ),\n};\nstatic const mbedtls_mpi_uint secp256k1_gy[] = {\n    BYTES_TO_T_UINT_8( 0xB8, 0xD4, 0x10, 0xFB, 0x8F, 0xD0, 0x47, 0x9C ),\n    BYTES_TO_T_UINT_8( 0x19, 0x54, 0x85, 0xA6, 0x48, 0xB4, 0x17, 0xFD ),\n    BYTES_TO_T_UINT_8( 0xA8, 0x08, 0x11, 0x0E, 0xFC, 0xFB, 0xA4, 0x5D ),\n    BYTES_TO_T_UINT_8( 0x65, 0xC4, 0xA3, 0x26, 0x77, 0xDA, 0x3A, 0x48 ),\n};\nstatic const mbedtls_mpi_uint secp256k1_n[] = {\n    BYTES_TO_T_UINT_8( 0x41, 0x41, 0x36, 0xD0, 0x8C, 0x5E, 0xD2, 0xBF ),\n    BYTES_TO_T_UINT_8( 0x3B, 0xA0, 0x48, 0xAF, 0xE6, 0xDC, 0xAE, 0xBA ),\n    BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n    BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),\n};\n#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */\n\n/*\n * Domain parameters for brainpoolP256r1 (RFC 5639 3.4)\n */\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\nstatic const mbedtls_mpi_uint brainpoolP256r1_p[] = {\n    BYTES_TO_T_UINT_8( 0x77, 0x53, 0x6E, 0x1F, 0x1D, 0x48, 0x13, 0x20 ),\n    BYTES_TO_T_UINT_8( 0x28, 0x20, 0x26, 0xD5, 0x23, 0xF6, 0x3B, 0x6E ),\n    BYTES_TO_T_UINT_8( 0x72, 0x8D, 0x83, 0x9D, 0x90, 0x0A, 0x66, 0x3E ),\n    BYTES_TO_T_UINT_8( 0xBC, 0xA9, 0xEE, 0xA1, 0xDB, 0x57, 0xFB, 0xA9 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_a[] = {\n    BYTES_TO_T_UINT_8( 0xD9, 0xB5, 0x30, 0xF3, 0x44, 0x4B, 0x4A, 0xE9 ),\n    BYTES_TO_T_UINT_8( 0x6C, 0x5C, 0xDC, 0x26, 0xC1, 0x55, 0x80, 0xFB ),\n    BYTES_TO_T_UINT_8( 0xE7, 0xFF, 0x7A, 0x41, 0x30, 0x75, 0xF6, 0xEE ),\n    BYTES_TO_T_UINT_8( 0x57, 0x30, 0x2C, 0xFC, 0x75, 0x09, 0x5A, 0x7D ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_b[] = {\n    BYTES_TO_T_UINT_8( 0xB6, 0x07, 0x8C, 0xFF, 0x18, 0xDC, 0xCC, 0x6B ),\n    BYTES_TO_T_UINT_8( 0xCE, 0xE1, 0xF7, 0x5C, 0x29, 0x16, 0x84, 0x95 ),\n    BYTES_TO_T_UINT_8( 0xBF, 0x7C, 0xD7, 0xBB, 0xD9, 0xB5, 0x30, 0xF3 ),\n    BYTES_TO_T_UINT_8( 0x44, 0x4B, 0x4A, 0xE9, 0x6C, 0x5C, 0xDC, 0x26 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x62, 0x32, 0xCE, 0x9A, 0xBD, 0x53, 0x44, 0x3A ),\n    BYTES_TO_T_UINT_8( 0xC2, 0x23, 0xBD, 0xE3, 0xE1, 0x27, 0xDE, 0xB9 ),\n    BYTES_TO_T_UINT_8( 0xAF, 0xB7, 0x81, 0xFC, 0x2F, 0x48, 0x4B, 0x2C ),\n    BYTES_TO_T_UINT_8( 0xCB, 0x57, 0x7E, 0xCB, 0xB9, 0xAE, 0xD2, 0x8B ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x97, 0x69, 0x04, 0x2F, 0xC7, 0x54, 0x1D, 0x5C ),\n    BYTES_TO_T_UINT_8( 0x54, 0x8E, 0xED, 0x2D, 0x13, 0x45, 0x77, 0xC2 ),\n    BYTES_TO_T_UINT_8( 0xC9, 0x1D, 0x61, 0x14, 0x1A, 0x46, 0xF8, 0x97 ),\n    BYTES_TO_T_UINT_8( 0xFD, 0xC4, 0xDA, 0xC3, 0x35, 0xF8, 0x7E, 0x54 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP256r1_n[] = {\n    BYTES_TO_T_UINT_8( 0xA7, 0x56, 0x48, 0x97, 0x82, 0x0E, 0x1E, 0x90 ),\n    BYTES_TO_T_UINT_8( 0xF7, 0xA6, 0x61, 0xB5, 0xA3, 0x7A, 0x39, 0x8C ),\n    BYTES_TO_T_UINT_8( 0x71, 0x8D, 0x83, 0x9D, 0x90, 0x0A, 0x66, 0x3E ),\n    BYTES_TO_T_UINT_8( 0xBC, 0xA9, 0xEE, 0xA1, 0xDB, 0x57, 0xFB, 0xA9 ),\n};\n#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */\n\n/*\n * Domain parameters for brainpoolP384r1 (RFC 5639 3.6)\n */\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\nstatic const mbedtls_mpi_uint brainpoolP384r1_p[] = {\n    BYTES_TO_T_UINT_8( 0x53, 0xEC, 0x07, 0x31, 0x13, 0x00, 0x47, 0x87 ),\n    BYTES_TO_T_UINT_8( 0x71, 0x1A, 0x1D, 0x90, 0x29, 0xA7, 0xD3, 0xAC ),\n    BYTES_TO_T_UINT_8( 0x23, 0x11, 0xB7, 0x7F, 0x19, 0xDA, 0xB1, 0x12 ),\n    BYTES_TO_T_UINT_8( 0xB4, 0x56, 0x54, 0xED, 0x09, 0x71, 0x2F, 0x15 ),\n    BYTES_TO_T_UINT_8( 0xDF, 0x41, 0xE6, 0x50, 0x7E, 0x6F, 0x5D, 0x0F ),\n    BYTES_TO_T_UINT_8( 0x28, 0x6D, 0x38, 0xA3, 0x82, 0x1E, 0xB9, 0x8C ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_a[] = {\n    BYTES_TO_T_UINT_8( 0x26, 0x28, 0xCE, 0x22, 0xDD, 0xC7, 0xA8, 0x04 ),\n    BYTES_TO_T_UINT_8( 0xEB, 0xD4, 0x3A, 0x50, 0x4A, 0x81, 0xA5, 0x8A ),\n    BYTES_TO_T_UINT_8( 0x0F, 0xF9, 0x91, 0xBA, 0xEF, 0x65, 0x91, 0x13 ),\n    BYTES_TO_T_UINT_8( 0x87, 0x27, 0xB2, 0x4F, 0x8E, 0xA2, 0xBE, 0xC2 ),\n    BYTES_TO_T_UINT_8( 0xA0, 0xAF, 0x05, 0xCE, 0x0A, 0x08, 0x72, 0x3C ),\n    BYTES_TO_T_UINT_8( 0x0C, 0x15, 0x8C, 0x3D, 0xC6, 0x82, 0xC3, 0x7B ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_b[] = {\n    BYTES_TO_T_UINT_8( 0x11, 0x4C, 0x50, 0xFA, 0x96, 0x86, 0xB7, 0x3A ),\n    BYTES_TO_T_UINT_8( 0x94, 0xC9, 0xDB, 0x95, 0x02, 0x39, 0xB4, 0x7C ),\n    BYTES_TO_T_UINT_8( 0xD5, 0x62, 0xEB, 0x3E, 0xA5, 0x0E, 0x88, 0x2E ),\n    BYTES_TO_T_UINT_8( 0xA6, 0xD2, 0xDC, 0x07, 0xE1, 0x7D, 0xB7, 0x2F ),\n    BYTES_TO_T_UINT_8( 0x7C, 0x44, 0xF0, 0x16, 0x54, 0xB5, 0x39, 0x8B ),\n    BYTES_TO_T_UINT_8( 0x26, 0x28, 0xCE, 0x22, 0xDD, 0xC7, 0xA8, 0x04 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x1E, 0xAF, 0xD4, 0x47, 0xE2, 0xB2, 0x87, 0xEF ),\n    BYTES_TO_T_UINT_8( 0xAA, 0x46, 0xD6, 0x36, 0x34, 0xE0, 0x26, 0xE8 ),\n    BYTES_TO_T_UINT_8( 0xE8, 0x10, 0xBD, 0x0C, 0xFE, 0xCA, 0x7F, 0xDB ),\n    BYTES_TO_T_UINT_8( 0xE3, 0x4F, 0xF1, 0x7E, 0xE7, 0xA3, 0x47, 0x88 ),\n    BYTES_TO_T_UINT_8( 0x6B, 0x3F, 0xC1, 0xB7, 0x81, 0x3A, 0xA6, 0xA2 ),\n    BYTES_TO_T_UINT_8( 0xFF, 0x45, 0xCF, 0x68, 0xF0, 0x64, 0x1C, 0x1D ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x15, 0x53, 0x3C, 0x26, 0x41, 0x03, 0x82, 0x42 ),\n    BYTES_TO_T_UINT_8( 0x11, 0x81, 0x91, 0x77, 0x21, 0x46, 0x46, 0x0E ),\n    BYTES_TO_T_UINT_8( 0x28, 0x29, 0x91, 0xF9, 0x4F, 0x05, 0x9C, 0xE1 ),\n    BYTES_TO_T_UINT_8( 0x64, 0x58, 0xEC, 0xFE, 0x29, 0x0B, 0xB7, 0x62 ),\n    BYTES_TO_T_UINT_8( 0x52, 0xD5, 0xCF, 0x95, 0x8E, 0xEB, 0xB1, 0x5C ),\n    BYTES_TO_T_UINT_8( 0xA4, 0xC2, 0xF9, 0x20, 0x75, 0x1D, 0xBE, 0x8A ),\n};\nstatic const mbedtls_mpi_uint brainpoolP384r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x65, 0x65, 0x04, 0xE9, 0x02, 0x32, 0x88, 0x3B ),\n    BYTES_TO_T_UINT_8( 0x10, 0xC3, 0x7F, 0x6B, 0xAF, 0xB6, 0x3A, 0xCF ),\n    BYTES_TO_T_UINT_8( 0xA7, 0x25, 0x04, 0xAC, 0x6C, 0x6E, 0x16, 0x1F ),\n    BYTES_TO_T_UINT_8( 0xB3, 0x56, 0x54, 0xED, 0x09, 0x71, 0x2F, 0x15 ),\n    BYTES_TO_T_UINT_8( 0xDF, 0x41, 0xE6, 0x50, 0x7E, 0x6F, 0x5D, 0x0F ),\n    BYTES_TO_T_UINT_8( 0x28, 0x6D, 0x38, 0xA3, 0x82, 0x1E, 0xB9, 0x8C ),\n};\n#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */\n\n/*\n * Domain parameters for brainpoolP512r1 (RFC 5639 3.7)\n */\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\nstatic const mbedtls_mpi_uint brainpoolP512r1_p[] = {\n    BYTES_TO_T_UINT_8( 0xF3, 0x48, 0x3A, 0x58, 0x56, 0x60, 0xAA, 0x28 ),\n    BYTES_TO_T_UINT_8( 0x85, 0xC6, 0x82, 0x2D, 0x2F, 0xFF, 0x81, 0x28 ),\n    BYTES_TO_T_UINT_8( 0xE6, 0x80, 0xA3, 0xE6, 0x2A, 0xA1, 0xCD, 0xAE ),\n    BYTES_TO_T_UINT_8( 0x42, 0x68, 0xC6, 0x9B, 0x00, 0x9B, 0x4D, 0x7D ),\n    BYTES_TO_T_UINT_8( 0x71, 0x08, 0x33, 0x70, 0xCA, 0x9C, 0x63, 0xD6 ),\n    BYTES_TO_T_UINT_8( 0x0E, 0xD2, 0xC9, 0xB3, 0xB3, 0x8D, 0x30, 0xCB ),\n    BYTES_TO_T_UINT_8( 0x07, 0xFC, 0xC9, 0x33, 0xAE, 0xE6, 0xD4, 0x3F ),\n    BYTES_TO_T_UINT_8( 0x8B, 0xC4, 0xE9, 0xDB, 0xB8, 0x9D, 0xDD, 0xAA ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_a[] = {\n    BYTES_TO_T_UINT_8( 0xCA, 0x94, 0xFC, 0x77, 0x4D, 0xAC, 0xC1, 0xE7 ),\n    BYTES_TO_T_UINT_8( 0xB9, 0xC7, 0xF2, 0x2B, 0xA7, 0x17, 0x11, 0x7F ),\n    BYTES_TO_T_UINT_8( 0xB5, 0xC8, 0x9A, 0x8B, 0xC9, 0xF1, 0x2E, 0x0A ),\n    BYTES_TO_T_UINT_8( 0xA1, 0x3A, 0x25, 0xA8, 0x5A, 0x5D, 0xED, 0x2D ),\n    BYTES_TO_T_UINT_8( 0xBC, 0x63, 0x98, 0xEA, 0xCA, 0x41, 0x34, 0xA8 ),\n    BYTES_TO_T_UINT_8( 0x10, 0x16, 0xF9, 0x3D, 0x8D, 0xDD, 0xCB, 0x94 ),\n    BYTES_TO_T_UINT_8( 0xC5, 0x4C, 0x23, 0xAC, 0x45, 0x71, 0x32, 0xE2 ),\n    BYTES_TO_T_UINT_8( 0x89, 0x3B, 0x60, 0x8B, 0x31, 0xA3, 0x30, 0x78 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_b[] = {\n    BYTES_TO_T_UINT_8( 0x23, 0xF7, 0x16, 0x80, 0x63, 0xBD, 0x09, 0x28 ),\n    BYTES_TO_T_UINT_8( 0xDD, 0xE5, 0xBA, 0x5E, 0xB7, 0x50, 0x40, 0x98 ),\n    BYTES_TO_T_UINT_8( 0x67, 0x3E, 0x08, 0xDC, 0xCA, 0x94, 0xFC, 0x77 ),\n    BYTES_TO_T_UINT_8( 0x4D, 0xAC, 0xC1, 0xE7, 0xB9, 0xC7, 0xF2, 0x2B ),\n    BYTES_TO_T_UINT_8( 0xA7, 0x17, 0x11, 0x7F, 0xB5, 0xC8, 0x9A, 0x8B ),\n    BYTES_TO_T_UINT_8( 0xC9, 0xF1, 0x2E, 0x0A, 0xA1, 0x3A, 0x25, 0xA8 ),\n    BYTES_TO_T_UINT_8( 0x5A, 0x5D, 0xED, 0x2D, 0xBC, 0x63, 0x98, 0xEA ),\n    BYTES_TO_T_UINT_8( 0xCA, 0x41, 0x34, 0xA8, 0x10, 0x16, 0xF9, 0x3D ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_gx[] = {\n    BYTES_TO_T_UINT_8( 0x22, 0xF8, 0xB9, 0xBC, 0x09, 0x22, 0x35, 0x8B ),\n    BYTES_TO_T_UINT_8( 0x68, 0x5E, 0x6A, 0x40, 0x47, 0x50, 0x6D, 0x7C ),\n    BYTES_TO_T_UINT_8( 0x5F, 0x7D, 0xB9, 0x93, 0x7B, 0x68, 0xD1, 0x50 ),\n    BYTES_TO_T_UINT_8( 0x8D, 0xD4, 0xD0, 0xE2, 0x78, 0x1F, 0x3B, 0xFF ),\n    BYTES_TO_T_UINT_8( 0x8E, 0x09, 0xD0, 0xF4, 0xEE, 0x62, 0x3B, 0xB4 ),\n    BYTES_TO_T_UINT_8( 0xC1, 0x16, 0xD9, 0xB5, 0x70, 0x9F, 0xED, 0x85 ),\n    BYTES_TO_T_UINT_8( 0x93, 0x6A, 0x4C, 0x9C, 0x2E, 0x32, 0x21, 0x5A ),\n    BYTES_TO_T_UINT_8( 0x64, 0xD9, 0x2E, 0xD8, 0xBD, 0xE4, 0xAE, 0x81 ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_gy[] = {\n    BYTES_TO_T_UINT_8( 0x92, 0x08, 0xD8, 0x3A, 0x0F, 0x1E, 0xCD, 0x78 ),\n    BYTES_TO_T_UINT_8( 0x06, 0x54, 0xF0, 0xA8, 0x2F, 0x2B, 0xCA, 0xD1 ),\n    BYTES_TO_T_UINT_8( 0xAE, 0x63, 0x27, 0x8A, 0xD8, 0x4B, 0xCA, 0x5B ),\n    BYTES_TO_T_UINT_8( 0x5E, 0x48, 0x5F, 0x4A, 0x49, 0xDE, 0xDC, 0xB2 ),\n    BYTES_TO_T_UINT_8( 0x11, 0x81, 0x1F, 0x88, 0x5B, 0xC5, 0x00, 0xA0 ),\n    BYTES_TO_T_UINT_8( 0x1A, 0x7B, 0xA5, 0x24, 0x00, 0xF7, 0x09, 0xF2 ),\n    BYTES_TO_T_UINT_8( 0xFD, 0x22, 0x78, 0xCF, 0xA9, 0xBF, 0xEA, 0xC0 ),\n    BYTES_TO_T_UINT_8( 0xEC, 0x32, 0x63, 0x56, 0x5D, 0x38, 0xDE, 0x7D ),\n};\nstatic const mbedtls_mpi_uint brainpoolP512r1_n[] = {\n    BYTES_TO_T_UINT_8( 0x69, 0x00, 0xA9, 0x9C, 0x82, 0x96, 0x87, 0xB5 ),\n    BYTES_TO_T_UINT_8( 0xDD, 0xDA, 0x5D, 0x08, 0x81, 0xD3, 0xB1, 0x1D ),\n    BYTES_TO_T_UINT_8( 0x47, 0x10, 0xAC, 0x7F, 0x19, 0x61, 0x86, 0x41 ),\n    BYTES_TO_T_UINT_8( 0x19, 0x26, 0xA9, 0x4C, 0x41, 0x5C, 0x3E, 0x55 ),\n    BYTES_TO_T_UINT_8( 0x70, 0x08, 0x33, 0x70, 0xCA, 0x9C, 0x63, 0xD6 ),\n    BYTES_TO_T_UINT_8( 0x0E, 0xD2, 0xC9, 0xB3, 0xB3, 0x8D, 0x30, 0xCB ),\n    BYTES_TO_T_UINT_8( 0x07, 0xFC, 0xC9, 0x33, 0xAE, 0xE6, 0xD4, 0x3F ),\n    BYTES_TO_T_UINT_8( 0x8B, 0xC4, 0xE9, 0xDB, 0xB8, 0x9D, 0xDD, 0xAA ),\n};\n#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */\n\n/*\n * Create an MPI from embedded constants\n * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)\n */\nstatic inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )\n{\n    X->s = 1;\n    X->n = len / sizeof( mbedtls_mpi_uint );\n    X->p = (mbedtls_mpi_uint *) p;\n}\n\n/*\n * Set an MPI to static value 1\n */\nstatic inline void ecp_mpi_set1( mbedtls_mpi *X )\n{\n    static mbedtls_mpi_uint one[] = { 1 };\n    X->s = 1;\n    X->n = 1;\n    X->p = one;\n}\n\n/*\n * Make group available from embedded constants\n */\nstatic int ecp_group_load( mbedtls_ecp_group *grp,\n                           const mbedtls_mpi_uint *p,  size_t plen,\n                           const mbedtls_mpi_uint *a,  size_t alen,\n                           const mbedtls_mpi_uint *b,  size_t blen,\n                           const mbedtls_mpi_uint *gx, size_t gxlen,\n                           const mbedtls_mpi_uint *gy, size_t gylen,\n                           const mbedtls_mpi_uint *n,  size_t nlen)\n{\n    ecp_mpi_load( &grp->P, p, plen );\n    if( a != NULL )\n        ecp_mpi_load( &grp->A, a, alen );\n    ecp_mpi_load( &grp->B, b, blen );\n    ecp_mpi_load( &grp->N, n, nlen );\n\n    ecp_mpi_load( &grp->G.X, gx, gxlen );\n    ecp_mpi_load( &grp->G.Y, gy, gylen );\n    ecp_mpi_set1( &grp->G.Z );\n\n    grp->pbits = mbedtls_mpi_bitlen( &grp->P );\n    grp->nbits = mbedtls_mpi_bitlen( &grp->N );\n\n    grp->h = 1;\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_ECP_NIST_OPTIM)\n/* Forward declarations */\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\nstatic int ecp_mod_p192( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\nstatic int ecp_mod_p224( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\nstatic int ecp_mod_p256( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\nstatic int ecp_mod_p384( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\nstatic int ecp_mod_p521( mbedtls_mpi * );\n#endif\n\n#define NIST_MODP( P )      grp->modp = ecp_mod_ ## P;\n#else\n#define NIST_MODP( P )\n#endif /* MBEDTLS_ECP_NIST_OPTIM */\n\n/* Additional forward declarations */\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\nstatic int ecp_mod_p255( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\nstatic int ecp_mod_p192k1( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\nstatic int ecp_mod_p224k1( mbedtls_mpi * );\n#endif\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\nstatic int ecp_mod_p256k1( mbedtls_mpi * );\n#endif\n\n#define LOAD_GROUP_A( G )   ecp_group_load( grp,            \\\n                            G ## _p,  sizeof( G ## _p  ),   \\\n                            G ## _a,  sizeof( G ## _a  ),   \\\n                            G ## _b,  sizeof( G ## _b  ),   \\\n                            G ## _gx, sizeof( G ## _gx ),   \\\n                            G ## _gy, sizeof( G ## _gy ),   \\\n                            G ## _n,  sizeof( G ## _n  ) )\n\n#define LOAD_GROUP( G )     ecp_group_load( grp,            \\\n                            G ## _p,  sizeof( G ## _p  ),   \\\n                            NULL,     0,                    \\\n                            G ## _b,  sizeof( G ## _b  ),   \\\n                            G ## _gx, sizeof( G ## _gx ),   \\\n                            G ## _gy, sizeof( G ## _gy ),   \\\n                            G ## _n,  sizeof( G ## _n  ) )\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n/*\n * Specialized function for creating the Curve25519 group\n */\nstatic int ecp_use_curve25519( mbedtls_ecp_group *grp )\n{\n    int ret;\n\n    /* Actually ( A + 2 ) / 4 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, \"01DB42\" ) );\n\n    /* P = 2^255 - 19 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );\n    grp->pbits = mbedtls_mpi_bitlen( &grp->P );\n\n    /* Y intentionaly not set, since we use x/z coordinates.\n     * This is used as a marker to identify Montgomery curves! */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );\n    mbedtls_mpi_free( &grp->G.Y );\n\n    /* Actually, the required msb for private keys */\n    grp->nbits = 254;\n\ncleanup:\n    if( ret != 0 )\n        mbedtls_ecp_group_free( grp );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */\n\n/*\n * Set a group using well-known domain parameters\n */\nint mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )\n{\n    mbedtls_ecp_group_free( grp );\n\n    grp->id = id;\n\n    switch( id )\n    {\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP192R1:\n            NIST_MODP( p192 );\n            return( LOAD_GROUP( secp192r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP224R1:\n            NIST_MODP( p224 );\n            return( LOAD_GROUP( secp224r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP256R1:\n            NIST_MODP( p256 );\n            return( LOAD_GROUP( secp256r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP384R1:\n            NIST_MODP( p384 );\n            return( LOAD_GROUP( secp384r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP521R1:\n            NIST_MODP( p521 );\n            return( LOAD_GROUP( secp521r1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP192K1:\n            grp->modp = ecp_mod_p192k1;\n            return( LOAD_GROUP_A( secp192k1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP224K1:\n            grp->modp = ecp_mod_p224k1;\n            return( LOAD_GROUP_A( secp224k1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n        case MBEDTLS_ECP_DP_SECP256K1:\n            grp->modp = ecp_mod_p256k1;\n            return( LOAD_GROUP_A( secp256k1 ) );\n#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)\n        case MBEDTLS_ECP_DP_BP256R1:\n            return( LOAD_GROUP_A( brainpoolP256r1 ) );\n#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)\n        case MBEDTLS_ECP_DP_BP384R1:\n            return( LOAD_GROUP_A( brainpoolP384r1 ) );\n#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)\n        case MBEDTLS_ECP_DP_BP512R1:\n            return( LOAD_GROUP_A( brainpoolP512r1 ) );\n#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n        case MBEDTLS_ECP_DP_CURVE25519:\n            grp->modp = ecp_mod_p255;\n            return( ecp_use_curve25519( grp ) );\n#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */\n\n        default:\n            mbedtls_ecp_group_free( grp );\n            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );\n    }\n}\n\n#if defined(MBEDTLS_ECP_NIST_OPTIM)\n/*\n * Fast reduction modulo the primes used by the NIST curves.\n *\n * These functions are critical for speed, but not needed for correct\n * operations. So, we make the choice to heavily rely on the internals of our\n * bignum library, which creates a tight coupling between these functions and\n * our MPI implementation.  However, the coupling between the ECP module and\n * MPI remains loose, since these functions can be deactivated at will.\n */\n\n#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)\n/*\n * Compared to the way things are presented in FIPS 186-3 D.2,\n * we proceed in columns, from right (least significant chunk) to left,\n * adding chunks to N in place, and keeping a carry for the next chunk.\n * This avoids moving things around in memory, and uselessly adding zeros,\n * compared to the more straightforward, line-oriented approach.\n *\n * For this prime we need to handle data in chunks of 64 bits.\n * Since this is always a multiple of our basic mbedtls_mpi_uint, we can\n * use a mbedtls_mpi_uint * to designate such a chunk, and small loops to handle it.\n */\n\n/* Add 64-bit chunks (dst += src) and update carry */\nstatic inline void add64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *src, mbedtls_mpi_uint *carry )\n{\n    unsigned char i;\n    mbedtls_mpi_uint c = 0;\n    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )\n    {\n        *dst += c;      c  = ( *dst < c );\n        *dst += *src;   c += ( *dst < *src );\n    }\n    *carry += c;\n}\n\n/* Add carry to a 64-bit chunk and update carry */\nstatic inline void carry64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *carry )\n{\n    unsigned char i;\n    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )\n    {\n        *dst += *carry;\n        *carry  = ( *dst < *carry );\n    }\n}\n\n#define WIDTH       8 / sizeof( mbedtls_mpi_uint )\n#define A( i )      N->p + i * WIDTH\n#define ADD( i )    add64( p, A( i ), &c )\n#define NEXT        p += WIDTH; carry64( p, &c )\n#define LAST        p += WIDTH; *p = c; while( ++p < end ) *p = 0\n\n/*\n * Fast quasi-reduction modulo p192 (FIPS 186-3 D.2.1)\n */\nstatic int ecp_mod_p192( mbedtls_mpi *N )\n{\n    int ret;\n    mbedtls_mpi_uint c = 0;\n    mbedtls_mpi_uint *p, *end;\n\n    /* Make sure we have enough blocks so that A(5) is legal */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, 6 * WIDTH ) );\n\n    p = N->p;\n    end = p + N->n;\n\n    ADD( 3 ); ADD( 5 );             NEXT; // A0 += A3 + A5\n    ADD( 3 ); ADD( 4 ); ADD( 5 );   NEXT; // A1 += A3 + A4 + A5\n    ADD( 4 ); ADD( 5 );             LAST; // A2 += A4 + A5\n\ncleanup:\n    return( ret );\n}\n\n#undef WIDTH\n#undef A\n#undef ADD\n#undef NEXT\n#undef LAST\n#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n/*\n * The reader is advised to first understand ecp_mod_p192() since the same\n * general structure is used here, but with additional complications:\n * (1) chunks of 32 bits, and (2) subtractions.\n */\n\n/*\n * For these primes, we need to handle data in chunks of 32 bits.\n * This makes it more complicated if we use 64 bits limbs in MPI,\n * which prevents us from using a uniform access method as for p192.\n *\n * So, we define a mini abstraction layer to access 32 bit chunks,\n * load them in 'cur' for work, and store them back from 'cur' when done.\n *\n * While at it, also define the size of N in terms of 32-bit chunks.\n */\n#define LOAD32      cur = A( i );\n\n#if defined(MBEDTLS_HAVE_INT32)  /* 32 bit */\n\n#define MAX32       N->n\n#define A( j )      N->p[j]\n#define STORE32     N->p[i] = cur;\n\n#else                               /* 64-bit */\n\n#define MAX32       N->n * 2\n#define A( j ) j % 2 ? (uint32_t)( N->p[j/2] >> 32 ) : (uint32_t)( N->p[j/2] )\n#define STORE32                                   \\\n    if( i % 2 ) {                                 \\\n        N->p[i/2] &= 0x00000000FFFFFFFF;          \\\n        N->p[i/2] |= ((mbedtls_mpi_uint) cur) << 32;        \\\n    } else {                                      \\\n        N->p[i/2] &= 0xFFFFFFFF00000000;          \\\n        N->p[i/2] |= (mbedtls_mpi_uint) cur;                \\\n    }\n\n#endif /* sizeof( mbedtls_mpi_uint ) */\n\n/*\n * Helpers for addition and subtraction of chunks, with signed carry.\n */\nstatic inline void add32( uint32_t *dst, uint32_t src, signed char *carry )\n{\n    *dst += src;\n    *carry += ( *dst < src );\n}\n\nstatic inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )\n{\n    *carry -= ( *dst < src );\n    *dst -= src;\n}\n\n#define ADD( j )    add32( &cur, A( j ), &c );\n#define SUB( j )    sub32( &cur, A( j ), &c );\n\n/*\n * Helpers for the main 'loop'\n * (see fix_negative for the motivation of C)\n */\n#define INIT( b )                                           \\\n    int ret;                                                \\\n    signed char c = 0, cc;                                  \\\n    uint32_t cur;                                           \\\n    size_t i = 0, bits = b;                                 \\\n    mbedtls_mpi C;                                                  \\\n    mbedtls_mpi_uint Cp[ b / 8 / sizeof( mbedtls_mpi_uint) + 1 ];               \\\n                                                            \\\n    C.s = 1;                                                \\\n    C.n = b / 8 / sizeof( mbedtls_mpi_uint) + 1;                      \\\n    C.p = Cp;                                               \\\n    memset( Cp, 0, C.n * sizeof( mbedtls_mpi_uint ) );                \\\n                                                            \\\n    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, b * 2 / 8 / sizeof( mbedtls_mpi_uint ) ) ); \\\n    LOAD32;\n\n#define NEXT                    \\\n    STORE32; i++; LOAD32;       \\\n    cc = c; c = 0;              \\\n    if( cc < 0 )                \\\n        sub32( &cur, -cc, &c ); \\\n    else                        \\\n        add32( &cur, cc, &c );  \\\n\n#define LAST                                    \\\n    STORE32; i++;                               \\\n    cur = c > 0 ? c : 0; STORE32;               \\\n    cur = 0; while( ++i < MAX32 ) { STORE32; }  \\\n    if( c < 0 ) fix_negative( N, c, &C, bits );\n\n/*\n * If the result is negative, we get it in the form\n * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'\n */\nstatic inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )\n{\n    int ret;\n\n    /* C = - c * 2^(bits + 32) */\n#if !defined(MBEDTLS_HAVE_INT64)\n    ((void) bits);\n#else\n    if( bits == 224 )\n        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;\n    else\n#endif\n        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;\n\n    /* N = - ( C - N ) */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );\n    N->s = -1;\n\ncleanup:\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)\n/*\n * Fast quasi-reduction modulo p224 (FIPS 186-3 D.2.2)\n */\nstatic int ecp_mod_p224( mbedtls_mpi *N )\n{\n    INIT( 224 );\n\n    SUB(  7 ); SUB( 11 );               NEXT; // A0 += -A7 - A11\n    SUB(  8 ); SUB( 12 );               NEXT; // A1 += -A8 - A12\n    SUB(  9 ); SUB( 13 );               NEXT; // A2 += -A9 - A13\n    SUB( 10 ); ADD(  7 ); ADD( 11 );    NEXT; // A3 += -A10 + A7 + A11\n    SUB( 11 ); ADD(  8 ); ADD( 12 );    NEXT; // A4 += -A11 + A8 + A12\n    SUB( 12 ); ADD(  9 ); ADD( 13 );    NEXT; // A5 += -A12 + A9 + A13\n    SUB( 13 ); ADD( 10 );               LAST; // A6 += -A13 + A10\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)\n/*\n * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)\n */\nstatic int ecp_mod_p256( mbedtls_mpi *N )\n{\n    INIT( 256 );\n\n    ADD(  8 ); ADD(  9 );\n    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0\n\n    ADD(  9 ); ADD( 10 );\n    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1\n\n    ADD( 10 ); ADD( 11 );\n    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2\n\n    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );\n    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3\n\n    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );\n    SUB(  9 ); SUB( 10 );                                   NEXT; // A4\n\n    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );\n    SUB( 10 ); SUB( 11 );                                   NEXT; // A5\n\n    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );\n    SUB(  8 ); SUB(  9 );                                   NEXT; // A6\n\n    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );\n    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)\n/*\n * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)\n */\nstatic int ecp_mod_p384( mbedtls_mpi *N )\n{\n    INIT( 384 );\n\n    ADD( 12 ); ADD( 21 ); ADD( 20 );\n    SUB( 23 );                                              NEXT; // A0\n\n    ADD( 13 ); ADD( 22 ); ADD( 23 );\n    SUB( 12 ); SUB( 20 );                                   NEXT; // A2\n\n    ADD( 14 ); ADD( 23 );\n    SUB( 13 ); SUB( 21 );                                   NEXT; // A2\n\n    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );\n    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3\n\n    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );\n    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4\n\n    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );\n    SUB( 16 );                                              NEXT; // A5\n\n    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );\n    SUB( 17 );                                              NEXT; // A6\n\n    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );\n    SUB( 18 );                                              NEXT; // A7\n\n    ADD( 20 ); ADD( 17 ); ADD( 16 );\n    SUB( 19 );                                              NEXT; // A8\n\n    ADD( 21 ); ADD( 18 ); ADD( 17 );\n    SUB( 20 );                                              NEXT; // A9\n\n    ADD( 22 ); ADD( 19 ); ADD( 18 );\n    SUB( 21 );                                              NEXT; // A10\n\n    ADD( 23 ); ADD( 20 ); ADD( 19 );\n    SUB( 22 );                                              LAST; // A11\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n\n#undef A\n#undef LOAD32\n#undef STORE32\n#undef MAX32\n#undef INIT\n#undef NEXT\n#undef LAST\n\n#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED ||\n          MBEDTLS_ECP_DP_SECP256R1_ENABLED ||\n          MBEDTLS_ECP_DP_SECP384R1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)\n/*\n * Here we have an actual Mersenne prime, so things are more straightforward.\n * However, chunks are aligned on a 'weird' boundary (521 bits).\n */\n\n/* Size of p521 in terms of mbedtls_mpi_uint */\n#define P521_WIDTH      ( 521 / 8 / sizeof( mbedtls_mpi_uint ) + 1 )\n\n/* Bits to keep in the most significant mbedtls_mpi_uint */\n#define P521_MASK       0x01FF\n\n/*\n * Fast quasi-reduction modulo p521 (FIPS 186-3 D.2.5)\n * Write N as A1 + 2^521 A0, return A0 + A1\n */\nstatic int ecp_mod_p521( mbedtls_mpi *N )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi M;\n    mbedtls_mpi_uint Mp[P521_WIDTH + 1];\n    /* Worst case for the size of M is when mbedtls_mpi_uint is 16 bits:\n     * we need to hold bits 513 to 1056, which is 34 limbs, that is\n     * P521_WIDTH + 1. Otherwise P521_WIDTH is enough. */\n\n    if( N->n < P521_WIDTH )\n        return( 0 );\n\n    /* M = A1 */\n    M.s = 1;\n    M.n = N->n - ( P521_WIDTH - 1 );\n    if( M.n > P521_WIDTH + 1 )\n        M.n = P521_WIDTH + 1;\n    M.p = Mp;\n    memcpy( Mp, N->p + P521_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 521 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );\n\n    /* N = A0 */\n    N->p[P521_WIDTH - 1] &= P521_MASK;\n    for( i = P521_WIDTH; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N = A0 + A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );\n\ncleanup:\n    return( ret );\n}\n\n#undef P521_WIDTH\n#undef P521_MASK\n#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */\n\n#endif /* MBEDTLS_ECP_NIST_OPTIM */\n\n#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)\n\n/* Size of p255 in terms of mbedtls_mpi_uint */\n#define P255_WIDTH      ( 255 / 8 / sizeof( mbedtls_mpi_uint ) + 1 )\n\n/*\n * Fast quasi-reduction modulo p255 = 2^255 - 19\n * Write N as A0 + 2^255 A1, return A0 + 19 * A1\n */\nstatic int ecp_mod_p255( mbedtls_mpi *N )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi M;\n    mbedtls_mpi_uint Mp[P255_WIDTH + 2];\n\n    if( N->n < P255_WIDTH )\n        return( 0 );\n\n    /* M = A1 */\n    M.s = 1;\n    M.n = N->n - ( P255_WIDTH - 1 );\n    if( M.n > P255_WIDTH + 1 )\n        M.n = P255_WIDTH + 1;\n    M.p = Mp;\n    memset( Mp, 0, sizeof Mp );\n    memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );\n    M.n++; /* Make room for multiplication by 19 */\n\n    /* N = A0 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );\n    for( i = P255_WIDTH; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N = A0 + 19 * A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \\\n    defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n/*\n * Fast quasi-reduction modulo P = 2^s - R,\n * with R about 33 bits, used by the Koblitz curves.\n *\n * Write N as A0 + 2^224 A1, return A0 + R * A1.\n * Actually do two passes, since R is big.\n */\n#define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P\n#define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R\nstatic inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,\n                                   size_t adjust, size_t shift, mbedtls_mpi_uint mask )\n{\n    int ret;\n    size_t i;\n    mbedtls_mpi M, R;\n    mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];\n\n    if( N->n < p_limbs )\n        return( 0 );\n\n    /* Init R */\n    R.s = 1;\n    R.p = Rp;\n    R.n = P_KOBLITZ_R;\n\n    /* Common setup for M */\n    M.s = 1;\n    M.p = Mp;\n\n    /* M = A1 */\n    M.n = N->n - ( p_limbs - adjust );\n    if( M.n > p_limbs + adjust )\n        M.n = p_limbs + adjust;\n    memset( Mp, 0, sizeof Mp );\n    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );\n    if( shift != 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );\n    M.n += R.n; /* Make room for multiplication by R */\n\n    /* N = A0 */\n    if( mask != 0 )\n        N->p[p_limbs - 1] &= mask;\n    for( i = p_limbs; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N = A0 + R * A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );\n\n    /* Second pass */\n\n    /* M = A1 */\n    M.n = N->n - ( p_limbs - adjust );\n    if( M.n > p_limbs + adjust )\n        M.n = p_limbs + adjust;\n    memset( Mp, 0, sizeof Mp );\n    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );\n    if( shift != 0 )\n        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );\n    M.n += R.n; /* Make room for multiplication by R */\n\n    /* N = A0 */\n    if( mask != 0 )\n        N->p[p_limbs - 1] &= mask;\n    for( i = p_limbs; i < N->n; i++ )\n        N->p[i] = 0;\n\n    /* N = A0 + R * A1 */\n    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );\n    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );\n\ncleanup:\n    return( ret );\n}\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||\n          MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||\n          MBEDTLS_ECP_DP_SECP256K1_ENABLED) */\n\n#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)\n/*\n * Fast quasi-reduction modulo p192k1 = 2^192 - R,\n * with R = 2^32 + 2^12 + 2^8 + 2^7 + 2^6 + 2^3 + 1 = 0x0100001119\n */\nstatic int ecp_mod_p192k1( mbedtls_mpi *N )\n{\n    static mbedtls_mpi_uint Rp[] = {\n        BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };\n\n    return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );\n}\n#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)\n/*\n * Fast quasi-reduction modulo p224k1 = 2^224 - R,\n * with R = 2^32 + 2^12 + 2^11 + 2^9 + 2^7 + 2^4 + 2 + 1 = 0x0100001A93\n */\nstatic int ecp_mod_p224k1( mbedtls_mpi *N )\n{\n    static mbedtls_mpi_uint Rp[] = {\n        BYTES_TO_T_UINT_8( 0x93, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };\n\n#if defined(MBEDTLS_HAVE_INT64)\n    return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );\n#else\n    return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );\n#endif\n}\n\n#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */\n\n#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)\n/*\n * Fast quasi-reduction modulo p256k1 = 2^256 - R,\n * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1\n */\nstatic int ecp_mod_p256k1( mbedtls_mpi *N )\n{\n    static mbedtls_mpi_uint Rp[] = {\n        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };\n    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );\n}\n#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */\n\n#endif /* !MBEDTLS_ECP_ALT */\n\n#endif /* MBEDTLS_ECP_C */\n","/*\n *  Entropy accumulator implementation\n *\n *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ENTROPY_C)\n\n#if defined(MBEDTLS_TEST_NULL_ENTROPY) && !defined(TARGET_SIMULATOR)\n#warning \"**** WARNING!  MBEDTLS_TEST_NULL_ENTROPY defined! \"\n#warning \"**** THIS BUILD HAS NO DEFINED ENTROPY SOURCES \"\n#warning \"**** THIS BUILD IS *NOT* SUITABLE FOR PRODUCTION USE \"\n#endif\n\n#include \"mbedtls/entropy.h\"\n#include \"mbedtls/entropy_poll.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_FS_IO)\n#include <stdio.h>\n#endif\n\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n#include \"mbedtls/platform.h\"\n#endif\n\n#if defined(MBEDTLS_SELF_TEST)\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdio.h>\n#define mbedtls_printf     printf\n#endif /* MBEDTLS_PLATFORM_C */\n#endif /* MBEDTLS_SELF_TEST */\n\n#if defined(MBEDTLS_HAVEGE_C)\n#include \"mbedtls/havege.h\"\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */\n\nvoid mbedtls_entropy_init( mbedtls_entropy_context *ctx )\n{\n    ctx->source_count = 0;\n    memset( ctx->source, 0, sizeof( ctx->source ) );\n\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_init( &ctx->mutex );\n#endif\n\n    ctx->accumulator_started = 0;\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n    mbedtls_sha512_init( &ctx->accumulator );\n#else\n    mbedtls_sha256_init( &ctx->accumulator );\n#endif\n#if defined(MBEDTLS_HAVEGE_C)\n    mbedtls_havege_init( &ctx->havege_data );\n#endif\n\n    /* Reminder: Update ENTROPY_HAVE_STRONG in the test files\n     *           when adding more strong entropy sources here. */\n\n#if defined(MBEDTLS_TEST_NULL_ENTROPY)\n    mbedtls_entropy_add_source( ctx, mbedtls_null_entropy_poll, NULL,\n                                1, MBEDTLS_ENTROPY_SOURCE_STRONG );\n#endif\n\n#if !defined(MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES)\n#if !defined(MBEDTLS_NO_PLATFORM_ENTROPY)\n    mbedtls_entropy_add_source( ctx, mbedtls_platform_entropy_poll, NULL,\n                                MBEDTLS_ENTROPY_MIN_PLATFORM,\n                                MBEDTLS_ENTROPY_SOURCE_STRONG );\n#endif\n#if defined(MBEDTLS_TIMING_C)\n    mbedtls_entropy_add_source( ctx, mbedtls_hardclock_poll, NULL,\n                                MBEDTLS_ENTROPY_MIN_HARDCLOCK,\n                                MBEDTLS_ENTROPY_SOURCE_WEAK );\n#endif\n#if defined(MBEDTLS_HAVEGE_C)\n    mbedtls_entropy_add_source( ctx, mbedtls_havege_poll, &ctx->havege_data,\n                                MBEDTLS_ENTROPY_MIN_HAVEGE,\n                                MBEDTLS_ENTROPY_SOURCE_STRONG );\n#endif\n#if defined(MBEDTLS_ENTROPY_HARDWARE_ALT)\n    mbedtls_entropy_add_source( ctx, mbedtls_hardware_poll, NULL,\n                                MBEDTLS_ENTROPY_MIN_HARDWARE,\n                                MBEDTLS_ENTROPY_SOURCE_STRONG );\n#endif\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n    mbedtls_entropy_add_source( ctx, mbedtls_nv_seed_poll, NULL,\n                                MBEDTLS_ENTROPY_BLOCK_SIZE,\n                                MBEDTLS_ENTROPY_SOURCE_STRONG );\n    ctx->initial_entropy_run = 0;\n#endif\n#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */\n}\n\nvoid mbedtls_entropy_free( mbedtls_entropy_context *ctx )\n{\n#if defined(MBEDTLS_HAVEGE_C)\n    mbedtls_havege_free( &ctx->havege_data );\n#endif\n#if defined(MBEDTLS_THREADING_C)\n    mbedtls_mutex_free( &ctx->mutex );\n#endif\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n    mbedtls_sha512_free( &ctx->accumulator );\n#else\n    mbedtls_sha256_free( &ctx->accumulator );\n#endif\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n    ctx->initial_entropy_run = 0;\n#endif\n    ctx->source_count = 0;\n    mbedtls_zeroize( ctx->source, sizeof( ctx->source ) );\n    ctx->accumulator_started = 0;\n}\n\nint mbedtls_entropy_add_source( mbedtls_entropy_context *ctx,\n                        mbedtls_entropy_f_source_ptr f_source, void *p_source,\n                        size_t threshold, int strong )\n{\n    int idx, ret = 0;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    idx = ctx->source_count;\n    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )\n    {\n        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;\n        goto exit;\n    }\n\n    ctx->source[idx].f_source  = f_source;\n    ctx->source[idx].p_source  = p_source;\n    ctx->source[idx].threshold = threshold;\n    ctx->source[idx].strong    = strong;\n\n    ctx->source_count++;\n\nexit:\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n/*\n * Entropy accumulator update\n */\nstatic int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,\n                           const unsigned char *data, size_t len )\n{\n    unsigned char header[2];\n    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];\n    size_t use_len = len;\n    const unsigned char *p = data;\n    int ret = 0;\n\n    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )\n    {\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )\n            goto cleanup;\n#else\n        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )\n            goto cleanup;\n#endif\n        p = tmp;\n        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;\n    }\n\n    header[0] = source_id;\n    header[1] = use_len & 0xFF;\n\n    /*\n     * Start the accumulator if this has not already happened. Note that\n     * it is sufficient to start the accumulator here only because all calls to\n     * gather entropy eventually execute this code.\n     */\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n    if( ctx->accumulator_started == 0 &&\n        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )\n        goto cleanup;\n    else\n        ctx->accumulator_started = 1;\n    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )\n        goto cleanup;\n    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );\n#else\n    if( ctx->accumulator_started == 0 &&\n        ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )\n        goto cleanup;\n    else\n        ctx->accumulator_started = 1;\n    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )\n        goto cleanup;\n    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );\n#endif\n\ncleanup:\n    mbedtls_zeroize( tmp, sizeof( tmp ) );\n\n    return( ret );\n}\n\nint mbedtls_entropy_update_manual( mbedtls_entropy_context *ctx,\n                           const unsigned char *data, size_t len )\n{\n    int ret;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    ret = entropy_update( ctx, MBEDTLS_ENTROPY_SOURCE_MANUAL, data, len );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n/*\n * Run through the different sources to add entropy to our accumulator\n */\nstatic int entropy_gather_internal( mbedtls_entropy_context *ctx )\n{\n    int ret, i, have_one_strong = 0;\n    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];\n    size_t olen;\n\n    if( ctx->source_count == 0 )\n        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );\n\n    /*\n     * Run through our entropy sources\n     */\n    for( i = 0; i < ctx->source_count; i++ )\n    {\n        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )\n            have_one_strong = 1;\n\n        olen = 0;\n        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,\n                        buf, MBEDTLS_ENTROPY_MAX_GATHER, &olen ) ) != 0 )\n        {\n            goto cleanup;\n        }\n\n        /*\n         * Add if we actually gathered something\n         */\n        if( olen > 0 )\n        {\n            if( ( ret = entropy_update( ctx, (unsigned char) i,\n                                        buf, olen ) ) != 0 )\n                return( ret );\n            ctx->source[i].size += olen;\n        }\n    }\n\n    if( have_one_strong == 0 )\n        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;\n\ncleanup:\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n    return( ret );\n}\n\n/*\n * Thread-safe wrapper for entropy_gather_internal()\n */\nint mbedtls_entropy_gather( mbedtls_entropy_context *ctx )\n{\n    int ret;\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    ret = entropy_gather_internal( ctx );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\nint mbedtls_entropy_func( void *data, unsigned char *output, size_t len )\n{\n    int ret, count = 0, i, done;\n    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];\n\n    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n    /* Update the NV entropy seed before generating any entropy for outside\n     * use.\n     */\n    if( ctx->initial_entropy_run == 0 )\n    {\n        ctx->initial_entropy_run = 1;\n        if( ( ret = mbedtls_entropy_update_nv_seed( ctx ) ) != 0 )\n            return( ret );\n    }\n#endif\n\n#if defined(MBEDTLS_THREADING_C)\n    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )\n        return( ret );\n#endif\n\n    /*\n     * Always gather extra entropy before a call\n     */\n    do\n    {\n        if( count++ > ENTROPY_MAX_LOOP )\n        {\n            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;\n            goto exit;\n        }\n\n        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )\n            goto exit;\n\n        done = 1;\n        for( i = 0; i < ctx->source_count; i++ )\n            if( ctx->source[i].size < ctx->source[i].threshold )\n                done = 0;\n    }\n    while( ! done );\n\n    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );\n\n#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)\n    /*\n     * Note that at this stage it is assumed that the accumulator was started\n     * in a previous call to entropy_update(). If this is not guaranteed, the\n     * code below will fail.\n     */\n    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )\n        goto exit;\n\n    /*\n     * Reset accumulator and counters and recycle existing entropy\n     */\n    mbedtls_sha512_free( &ctx->accumulator );\n    mbedtls_sha512_init( &ctx->accumulator );\n    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,\n                                           MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )\n        goto exit;\n\n    /*\n     * Perform second SHA-512 on entropy\n     */\n    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,\n                                    buf, 0 ) ) != 0 )\n        goto exit;\n#else /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */\n    if( ( ret = mbedtls_sha256_finish_ret( &ctx->accumulator, buf ) ) != 0 )\n        goto exit;\n\n    /*\n     * Reset accumulator and counters and recycle existing entropy\n     */\n    mbedtls_sha256_free( &ctx->accumulator );\n    mbedtls_sha256_init( &ctx->accumulator );\n    if( ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )\n        goto exit;\n    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, buf,\n                                           MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )\n        goto exit;\n\n    /*\n     * Perform second SHA-256 on entropy\n     */\n    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,\n                                    buf, 0 ) ) != 0 )\n        goto exit;\n#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */\n\n    for( i = 0; i < ctx->source_count; i++ )\n        ctx->source[i].size = 0;\n\n    memcpy( output, buf, len );\n\n    ret = 0;\n\nexit:\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n#if defined(MBEDTLS_THREADING_C)\n    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )\n        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );\n#endif\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\nint mbedtls_entropy_update_nv_seed( mbedtls_entropy_context *ctx )\n{\n    int ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];\n\n    /* Read new seed  and write it to NV */\n    if( ( ret = mbedtls_entropy_func( ctx, buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )\n        return( ret );\n\n    if( mbedtls_nv_seed_write( buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) < 0 )\n        return( MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR );\n\n    /* Manually update the remaining stream with a separator value to diverge */\n    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );\n    ret = mbedtls_entropy_update_manual( ctx, buf, MBEDTLS_ENTROPY_BLOCK_SIZE );\n\n    return( ret );\n}\n#endif /* MBEDTLS_ENTROPY_NV_SEED */\n\n#if defined(MBEDTLS_FS_IO)\nint mbedtls_entropy_write_seed_file( mbedtls_entropy_context *ctx, const char *path )\n{\n    int ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;\n    FILE *f;\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];\n\n    if( ( f = fopen( path, \"wb\" ) ) == NULL )\n        return( MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR );\n\n    if( ( ret = mbedtls_entropy_func( ctx, buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )\n        goto exit;\n\n    if( fwrite( buf, 1, MBEDTLS_ENTROPY_BLOCK_SIZE, f ) != MBEDTLS_ENTROPY_BLOCK_SIZE )\n    {\n        ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;\n        goto exit;\n    }\n\n    ret = 0;\n\nexit:\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n    fclose( f );\n    return( ret );\n}\n\nint mbedtls_entropy_update_seed_file( mbedtls_entropy_context *ctx, const char *path )\n{\n    int ret = 0;\n    FILE *f;\n    size_t n;\n    unsigned char buf[ MBEDTLS_ENTROPY_MAX_SEED_SIZE ];\n\n    if( ( f = fopen( path, \"rb\" ) ) == NULL )\n        return( MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR );\n\n    fseek( f, 0, SEEK_END );\n    n = (size_t) ftell( f );\n    fseek( f, 0, SEEK_SET );\n\n    if( n > MBEDTLS_ENTROPY_MAX_SEED_SIZE )\n        n = MBEDTLS_ENTROPY_MAX_SEED_SIZE;\n\n    if( fread( buf, 1, n, f ) != n )\n        ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;\n    else\n        ret = mbedtls_entropy_update_manual( ctx, buf, n );\n\n    fclose( f );\n\n    mbedtls_zeroize( buf, sizeof( buf ) );\n\n    if( ret != 0 )\n        return( ret );\n\n    return( mbedtls_entropy_write_seed_file( ctx, path ) );\n}\n#endif /* MBEDTLS_FS_IO */\n\n#if defined(MBEDTLS_SELF_TEST)\n#if !defined(MBEDTLS_TEST_NULL_ENTROPY)\n/*\n * Dummy source function\n */\nstatic int entropy_dummy_source( void *data, unsigned char *output,\n                                 size_t len, size_t *olen )\n{\n    ((void) data);\n\n    memset( output, 0x2a, len );\n    *olen = len;\n\n    return( 0 );\n}\n#endif /* !MBEDTLS_TEST_NULL_ENTROPY */\n\n#if defined(MBEDTLS_ENTROPY_HARDWARE_ALT)\n\nstatic int mbedtls_entropy_source_self_test_gather( unsigned char *buf, size_t buf_len )\n{\n    int ret = 0;\n    size_t entropy_len = 0;\n    size_t olen = 0;\n    size_t attempts = buf_len;\n\n    while( attempts > 0 && entropy_len < buf_len )\n    {\n        if( ( ret = mbedtls_hardware_poll( NULL, buf + entropy_len,\n            buf_len - entropy_len, &olen ) ) != 0 )\n            return( ret );\n\n        entropy_len += olen;\n        attempts--;\n    }\n\n    if( entropy_len < buf_len )\n    {\n        ret = 1;\n    }\n\n    return( ret );\n}\n\n\nstatic int mbedtls_entropy_source_self_test_check_bits( const unsigned char *buf,\n                                                        size_t buf_len )\n{\n    unsigned char set= 0xFF;\n    unsigned char unset = 0x00;\n    size_t i;\n\n    for( i = 0; i < buf_len; i++ )\n    {\n        set &= buf[i];\n        unset |= buf[i];\n    }\n\n    return( set == 0xFF || unset == 0x00 );\n}\n\n/*\n * A test to ensure hat the entropy sources are functioning correctly\n * and there is no obvious failure. The test performs the following checks:\n *  - The entropy source is not providing only 0s (all bits unset) or 1s (all\n *    bits set).\n *  - The entropy source is not providing values in a pattern. Because the\n *    hardware could be providing data in an arbitrary length, this check polls\n *    the hardware entropy source twice and compares the result to ensure they\n *    are not equal.\n *  - The error code returned by the entropy source is not an error.\n */\nint mbedtls_entropy_source_self_test( int verbose )\n{\n    int ret = 0;\n    unsigned char buf0[2 * sizeof( unsigned long long int )];\n    unsigned char buf1[2 * sizeof( unsigned long long int )];\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ENTROPY_BIAS test: \" );\n\n    memset( buf0, 0x00, sizeof( buf0 ) );\n    memset( buf1, 0x00, sizeof( buf1 ) );\n\n    if( ( ret = mbedtls_entropy_source_self_test_gather( buf0, sizeof( buf0 ) ) ) != 0 )\n        goto cleanup;\n    if( ( ret = mbedtls_entropy_source_self_test_gather( buf1, sizeof( buf1 ) ) ) != 0 )\n        goto cleanup;\n\n    /* Make sure that the returned values are not all 0 or 1 */\n    if( ( ret = mbedtls_entropy_source_self_test_check_bits( buf0, sizeof( buf0 ) ) ) != 0 )\n        goto cleanup;\n    if( ( ret = mbedtls_entropy_source_self_test_check_bits( buf1, sizeof( buf1 ) ) ) != 0 )\n        goto cleanup;\n\n    /* Make sure that the entropy source is not returning values in a\n     * pattern */\n    ret = memcmp( buf0, buf1, sizeof( buf0 ) ) == 0;\n\ncleanup:\n    if( verbose != 0 )\n    {\n        if( ret != 0 )\n            mbedtls_printf( \"failed\\n\" );\n        else\n            mbedtls_printf( \"passed\\n\" );\n\n        mbedtls_printf( \"\\n\" );\n    }\n\n    return( ret != 0 );\n}\n\n#endif /* MBEDTLS_ENTROPY_HARDWARE_ALT */\n\n/*\n * The actual entropy quality is hard to test, but we can at least\n * test that the functions don't cause errors and write the correct\n * amount of data to buffers.\n */\nint mbedtls_entropy_self_test( int verbose )\n{\n    int ret = 1;\n#if !defined(MBEDTLS_TEST_NULL_ENTROPY)\n    mbedtls_entropy_context ctx;\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE] = { 0 };\n    unsigned char acc[MBEDTLS_ENTROPY_BLOCK_SIZE] = { 0 };\n    size_t i, j;\n#endif /* !MBEDTLS_TEST_NULL_ENTROPY */\n\n    if( verbose != 0 )\n        mbedtls_printf( \"  ENTROPY test: \" );\n\n#if !defined(MBEDTLS_TEST_NULL_ENTROPY)\n    mbedtls_entropy_init( &ctx );\n\n    /* First do a gather to make sure we have default sources */\n    if( ( ret = mbedtls_entropy_gather( &ctx ) ) != 0 )\n        goto cleanup;\n\n    ret = mbedtls_entropy_add_source( &ctx, entropy_dummy_source, NULL, 16,\n                                      MBEDTLS_ENTROPY_SOURCE_WEAK );\n    if( ret != 0 )\n        goto cleanup;\n\n    if( ( ret = mbedtls_entropy_update_manual( &ctx, buf, sizeof buf ) ) != 0 )\n        goto cleanup;\n\n    /*\n     * To test that mbedtls_entropy_func writes correct number of bytes:\n     * - use the whole buffer and rely on ASan to detect overruns\n     * - collect entropy 8 times and OR the result in an accumulator:\n     *   any byte should then be 0 with probably 2^(-64), so requiring\n     *   each of the 32 or 64 bytes to be non-zero has a false failure rate\n     *   of at most 2^(-58) which is acceptable.\n     */\n    for( i = 0; i < 8; i++ )\n    {\n        if( ( ret = mbedtls_entropy_func( &ctx, buf, sizeof( buf ) ) ) != 0 )\n            goto cleanup;\n\n        for( j = 0; j < sizeof( buf ); j++ )\n            acc[j] |= buf[j];\n    }\n\n    for( j = 0; j < sizeof( buf ); j++ )\n    {\n        if( acc[j] == 0 )\n        {\n            ret = 1;\n            goto cleanup;\n        }\n    }\n\n#if defined(MBEDTLS_ENTROPY_HARDWARE_ALT)\n    if( ( ret = mbedtls_entropy_source_self_test( 0 ) ) != 0 )\n        goto cleanup;\n#endif\n\ncleanup:\n    mbedtls_entropy_free( &ctx );\n#endif /* !MBEDTLS_TEST_NULL_ENTROPY */\n\n    if( verbose != 0 )\n    {\n        if( ret != 0 )\n            mbedtls_printf( \"failed\\n\" );\n        else\n            mbedtls_printf( \"passed\\n\" );\n\n        mbedtls_printf( \"\\n\" );\n    }\n\n    return( ret != 0 );\n}\n#endif /* MBEDTLS_SELF_TEST */\n\n#endif /* MBEDTLS_ENTROPY_C */\n","/*\n *  Platform-specific and custom entropy polling functions\n *\n *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_ENTROPY_C)\n\n#include \"mbedtls/entropy.h\"\n#include \"mbedtls/entropy_poll.h\"\n\n#if defined(MBEDTLS_TIMING_C)\n#include <string.h>\n#include \"mbedtls/timing.h\"\n#endif\n#if defined(MBEDTLS_HAVEGE_C)\n#include \"mbedtls/havege.h\"\n#endif\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\n#include \"mbedtls/platform.h\"\n#endif\n\n#if !defined(MBEDTLS_NO_PLATFORM_ENTROPY)\n\n#if !defined(unix) && !defined(__unix__) && !defined(__unix) && \\\n    !defined(__APPLE__) && !defined(_WIN32)\n#error \"Platform entropy sources only work on Unix and Windows, see MBEDTLS_NO_PLATFORM_ENTROPY in config.h\"\n#endif\n\n#if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)\n\n#if !defined(_WIN32_WINNT)\n#define _WIN32_WINNT 0x0400\n#endif\n#include <windows.h>\n#include <wincrypt.h>\n\nint mbedtls_platform_entropy_poll( void *data, unsigned char *output, size_t len,\n                           size_t *olen )\n{\n    HCRYPTPROV provider;\n    ((void) data);\n    *olen = 0;\n\n    if( CryptAcquireContext( &provider, NULL, NULL,\n                              PROV_RSA_FULL, CRYPT_VERIFYCONTEXT ) == FALSE )\n    {\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n    }\n\n    if( CryptGenRandom( provider, (DWORD) len, output ) == FALSE )\n    {\n        CryptReleaseContext( provider, 0 );\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n    }\n\n    CryptReleaseContext( provider, 0 );\n    *olen = len;\n\n    return( 0 );\n}\n#else /* _WIN32 && !EFIX64 && !EFI32 */\n\n/*\n * Test for Linux getrandom() support.\n * Since there is no wrapper in the libc yet, use the generic syscall wrapper\n * available in GNU libc and compatible libc's (eg uClibc).\n */\n#if defined(__linux__) && defined(__GLIBC__)\n#include <unistd.h>\n#include <sys/syscall.h>\n#if defined(SYS_getrandom)\n#define HAVE_GETRANDOM\n\nstatic int getrandom_wrapper( void *buf, size_t buflen, unsigned int flags )\n{\n    /* MemSan cannot understand that the syscall writes to the buffer */\n#if defined(__has_feature)\n#if __has_feature(memory_sanitizer)\n    memset( buf, 0, buflen );\n#endif\n#endif\n\n    return( syscall( SYS_getrandom, buf, buflen, flags ) );\n}\n\n#include <sys/utsname.h>\n/* Check if version is at least 3.17.0 */\nstatic int check_version_3_17_plus( void )\n{\n    int minor;\n    struct utsname un;\n    const char *ver;\n\n    /* Get version information */\n    uname(&un);\n    ver = un.release;\n\n    /* Check major version; assume a single digit */\n    if( ver[0] < '3' || ver[0] > '9' || ver [1] != '.' )\n        return( -1 );\n\n    if( ver[0] - '0' > 3 )\n        return( 0 );\n\n    /* Ok, so now we know major == 3, check minor.\n     * Assume 1 or 2 digits. */\n    if( ver[2] < '0' || ver[2] > '9' )\n        return( -1 );\n\n    minor = ver[2] - '0';\n\n    if( ver[3] >= '0' && ver[3] <= '9' )\n        minor = 10 * minor + ver[3] - '0';\n    else if( ver [3] != '.' )\n        return( -1 );\n\n    if( minor < 17 )\n        return( -1 );\n\n    return( 0 );\n}\nstatic int has_getrandom = -1;\n#endif /* SYS_getrandom */\n#endif /* __linux__ */\n\n#include <stdio.h>\n\nint mbedtls_platform_entropy_poll( void *data,\n                           unsigned char *output, size_t len, size_t *olen )\n{\n    FILE *file;\n    size_t read_len;\n    ((void) data);\n\n#if defined(HAVE_GETRANDOM)\n    if( has_getrandom == -1 )\n        has_getrandom = ( check_version_3_17_plus() == 0 );\n\n    if( has_getrandom )\n    {\n        int ret;\n\n        if( ( ret = getrandom_wrapper( output, len, 0 ) ) < 0 )\n            return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n        *olen = ret;\n        return( 0 );\n    }\n#endif /* HAVE_GETRANDOM */\n\n    *olen = 0;\n\n    file = fopen( \"/dev/urandom\", \"rb\" );\n    if( file == NULL )\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n    read_len = fread( output, 1, len, file );\n    if( read_len != len )\n    {\n        fclose( file );\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n    }\n\n    fclose( file );\n    *olen = len;\n\n    return( 0 );\n}\n#endif /* _WIN32 && !EFIX64 && !EFI32 */\n#endif /* !MBEDTLS_NO_PLATFORM_ENTROPY */\n\n#if defined(MBEDTLS_TEST_NULL_ENTROPY)\nint mbedtls_null_entropy_poll( void *data,\n                    unsigned char *output, size_t len, size_t *olen )\n{\n    ((void) data);\n    ((void) output);\n    *olen = 0;\n\n    if( len < sizeof(unsigned char) )\n        return( 0 );\n\n    *olen = sizeof(unsigned char);\n\n    return( 0 );\n}\n#endif\n\n#if defined(MBEDTLS_TIMING_C)\nint mbedtls_hardclock_poll( void *data,\n                    unsigned char *output, size_t len, size_t *olen )\n{\n    unsigned long timer = mbedtls_timing_hardclock();\n    ((void) data);\n    *olen = 0;\n\n    if( len < sizeof(unsigned long) )\n        return( 0 );\n\n    memcpy( output, &timer, sizeof(unsigned long) );\n    *olen = sizeof(unsigned long);\n\n    return( 0 );\n}\n#endif /* MBEDTLS_TIMING_C */\n\n#if defined(MBEDTLS_HAVEGE_C)\nint mbedtls_havege_poll( void *data,\n                 unsigned char *output, size_t len, size_t *olen )\n{\n    mbedtls_havege_state *hs = (mbedtls_havege_state *) data;\n    *olen = 0;\n\n    if( mbedtls_havege_random( hs, output, len ) != 0 )\n        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n    *olen = len;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_HAVEGE_C */\n\n#if defined(MBEDTLS_ENTROPY_NV_SEED)\nint mbedtls_nv_seed_poll( void *data,\n                          unsigned char *output, size_t len, size_t *olen )\n{\n    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];\n    size_t use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;\n    ((void) data);\n\n    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );\n\n    if( mbedtls_nv_seed_read( buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) < 0 )\n      return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );\n\n    if( len < use_len )\n      use_len = len;\n\n    memcpy( output, buf, use_len );\n    *olen = use_len;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_ENTROPY_NV_SEED */\n\n#endif /* MBEDTLS_ENTROPY_C */\n","/*\n *  SSLv3/TLSv1 shared functions\n *\n *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved\n *  SPDX-License-Identifier: Apache-2.0\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n *  not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *  This file is part of mbed TLS (https://tls.mbed.org)\n */\n/*\n *  The SSL 3.0 specification was drafted by Netscape in 1996,\n *  and became an IETF standard in 1999.\n *\n *  http://wp.netscape.com/eng/ssl3/\n *  http://www.ietf.org/rfc/rfc2246.txt\n *  http://www.ietf.org/rfc/rfc4346.txt\n */\n\n#if !defined(MBEDTLS_CONFIG_FILE)\n#include \"mbedtls/config.h\"\n#else\n#include MBEDTLS_CONFIG_FILE\n#endif\n\n#if defined(MBEDTLS_SSL_TLS_C)\n\n#if defined(MBEDTLS_PLATFORM_C)\n#include \"mbedtls/platform.h\"\n#else\n#include <stdlib.h>\n#define mbedtls_calloc    calloc\n#define mbedtls_free      free\n#endif\n\n#include \"mbedtls/debug.h\"\n#include \"mbedtls/ssl.h\"\n#include \"mbedtls/ssl_internal.h\"\n\n#include <string.h>\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n#include \"mbedtls/oid.h\"\n#endif\n\n/* Implementation that should never be optimized out by the compiler */\nstatic void mbedtls_zeroize( void *v, size_t n ) {\n    volatile unsigned char *p = v; while( n-- ) *p++ = 0;\n}\n\n/* Length of the \"epoch\" field in the record header */\nstatic inline size_t ssl_ep_len( const mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        return( 2 );\n#else\n    ((void) ssl);\n#endif\n    return( 0 );\n}\n\n/*\n * Start a timer.\n * Passing millisecs = 0 cancels a running timer.\n */\nstatic void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )\n{\n    if( ssl->f_set_timer == NULL )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"set_timer to %d ms\", (int) millisecs ) );\n    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );\n}\n\n/*\n * Return -1 is timer is expired, 0 if it isn't.\n */\nstatic int ssl_check_timer( mbedtls_ssl_context *ssl )\n{\n    if( ssl->f_get_timer == NULL )\n        return( 0 );\n\n    if( ssl->f_get_timer( ssl->p_timer ) == 2 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"timer expired\" ) );\n        return( -1 );\n    }\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n/*\n * Double the retransmit timeout value, within the allowed range,\n * returning -1 if the maximum value has already been reached.\n */\nstatic int ssl_double_retransmit_timeout( mbedtls_ssl_context *ssl )\n{\n    uint32_t new_timeout;\n\n    if( ssl->handshake->retransmit_timeout >= ssl->conf->hs_timeout_max )\n        return( -1 );\n\n    new_timeout = 2 * ssl->handshake->retransmit_timeout;\n\n    /* Avoid arithmetic overflow and range overflow */\n    if( new_timeout < ssl->handshake->retransmit_timeout ||\n        new_timeout > ssl->conf->hs_timeout_max )\n    {\n        new_timeout = ssl->conf->hs_timeout_max;\n    }\n\n    ssl->handshake->retransmit_timeout = new_timeout;\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"update timeout value to %d millisecs\",\n                        ssl->handshake->retransmit_timeout ) );\n\n    return( 0 );\n}\n\nstatic void ssl_reset_retransmit_timeout( mbedtls_ssl_context *ssl )\n{\n    ssl->handshake->retransmit_timeout = ssl->conf->hs_timeout_min;\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"update timeout value to %d millisecs\",\n                        ssl->handshake->retransmit_timeout ) );\n}\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n/*\n * Convert max_fragment_length codes to length.\n * RFC 6066 says:\n *    enum{\n *        2^9(1), 2^10(2), 2^11(3), 2^12(4), (255)\n *    } MaxFragmentLength;\n * and we add 0 -> extension unused\n */\nstatic unsigned int mfl_code_to_length[MBEDTLS_SSL_MAX_FRAG_LEN_INVALID] =\n{\n    MBEDTLS_SSL_MAX_CONTENT_LEN,    /* MBEDTLS_SSL_MAX_FRAG_LEN_NONE */\n    512,                    /* MBEDTLS_SSL_MAX_FRAG_LEN_512  */\n    1024,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_1024 */\n    2048,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_2048 */\n    4096,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_4096 */\n};\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_CLI_C)\nstatic int ssl_session_copy( mbedtls_ssl_session *dst, const mbedtls_ssl_session *src )\n{\n    mbedtls_ssl_session_free( dst );\n    memcpy( dst, src, sizeof( mbedtls_ssl_session ) );\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n    if( src->peer_cert != NULL )\n    {\n        int ret;\n\n        dst->peer_cert = mbedtls_calloc( 1, sizeof(mbedtls_x509_crt) );\n        if( dst->peer_cert == NULL )\n            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n\n        mbedtls_x509_crt_init( dst->peer_cert );\n\n        if( ( ret = mbedtls_x509_crt_parse_der( dst->peer_cert, src->peer_cert->raw.p,\n                                        src->peer_cert->raw.len ) ) != 0 )\n        {\n            mbedtls_free( dst->peer_cert );\n            dst->peer_cert = NULL;\n            return( ret );\n        }\n    }\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)\n    if( src->ticket != NULL )\n    {\n        dst->ticket = mbedtls_calloc( 1, src->ticket_len );\n        if( dst->ticket == NULL )\n            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n\n        memcpy( dst->ticket, src->ticket, src->ticket_len );\n    }\n#endif /* MBEDTLS_SSL_SESSION_TICKETS && MBEDTLS_SSL_CLI_C */\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_CLI_C */\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\nint (*mbedtls_ssl_hw_record_init)( mbedtls_ssl_context *ssl,\n                     const unsigned char *key_enc, const unsigned char *key_dec,\n                     size_t keylen,\n                     const unsigned char *iv_enc,  const unsigned char *iv_dec,\n                     size_t ivlen,\n                     const unsigned char *mac_enc, const unsigned char *mac_dec,\n                     size_t maclen ) = NULL;\nint (*mbedtls_ssl_hw_record_activate)( mbedtls_ssl_context *ssl, int direction) = NULL;\nint (*mbedtls_ssl_hw_record_reset)( mbedtls_ssl_context *ssl ) = NULL;\nint (*mbedtls_ssl_hw_record_write)( mbedtls_ssl_context *ssl ) = NULL;\nint (*mbedtls_ssl_hw_record_read)( mbedtls_ssl_context *ssl ) = NULL;\nint (*mbedtls_ssl_hw_record_finish)( mbedtls_ssl_context *ssl ) = NULL;\n#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */\n\n/*\n * Key material generation\n */\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\nstatic int ssl3_prf( const unsigned char *secret, size_t slen,\n                     const char *label,\n                     const unsigned char *random, size_t rlen,\n                     unsigned char *dstbuf, size_t dlen )\n{\n    int ret = 0;\n    size_t i;\n    mbedtls_md5_context md5;\n    mbedtls_sha1_context sha1;\n    unsigned char padding[16];\n    unsigned char sha1sum[20];\n    ((void)label);\n\n    mbedtls_md5_init(  &md5  );\n    mbedtls_sha1_init( &sha1 );\n\n    /*\n     *  SSLv3:\n     *    block =\n     *      MD5( secret + SHA1( 'A'    + secret + random ) ) +\n     *      MD5( secret + SHA1( 'BB'   + secret + random ) ) +\n     *      MD5( secret + SHA1( 'CCC'  + secret + random ) ) +\n     *      ...\n     */\n    for( i = 0; i < dlen / 16; i++ )\n    {\n        memset( padding, (unsigned char) ('A' + i), 1 + i );\n\n        if( ( ret = mbedtls_sha1_starts_ret( &sha1 ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_sha1_update_ret( &sha1, padding, 1 + i ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_sha1_update_ret( &sha1, secret, slen ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_sha1_update_ret( &sha1, random, rlen ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_sha1_finish_ret( &sha1, sha1sum ) ) != 0 )\n            goto exit;\n\n        if( ( ret = mbedtls_md5_starts_ret( &md5 ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md5_update_ret( &md5, secret, slen ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md5_update_ret( &md5, sha1sum, 20 ) ) != 0 )\n            goto exit;\n        if( ( ret = mbedtls_md5_finish_ret( &md5, dstbuf + i * 16 ) ) != 0 )\n            goto exit;\n    }\n\nexit:\n    mbedtls_md5_free(  &md5  );\n    mbedtls_sha1_free( &sha1 );\n\n    mbedtls_zeroize( padding, sizeof( padding ) );\n    mbedtls_zeroize( sha1sum, sizeof( sha1sum ) );\n\n    return( ret );\n}\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)\nstatic int tls1_prf( const unsigned char *secret, size_t slen,\n                     const char *label,\n                     const unsigned char *random, size_t rlen,\n                     unsigned char *dstbuf, size_t dlen )\n{\n    size_t nb, hs;\n    size_t i, j, k;\n    const unsigned char *S1, *S2;\n    unsigned char tmp[128];\n    unsigned char h_i[20];\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n    int ret;\n\n    mbedtls_md_init( &md_ctx );\n\n    if( sizeof( tmp ) < 20 + strlen( label ) + rlen )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    hs = ( slen + 1 ) / 2;\n    S1 = secret;\n    S2 = secret + slen - hs;\n\n    nb = strlen( label );\n    memcpy( tmp + 20, label, nb );\n    memcpy( tmp + 20 + nb, random, rlen );\n    nb += rlen;\n\n    /*\n     * First compute P_md5(secret,label+random)[0..dlen]\n     */\n    if( ( md_info = mbedtls_md_info_from_type( MBEDTLS_MD_MD5 ) ) == NULL )\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )\n        return( ret );\n\n    mbedtls_md_hmac_starts( &md_ctx, S1, hs );\n    mbedtls_md_hmac_update( &md_ctx, tmp + 20, nb );\n    mbedtls_md_hmac_finish( &md_ctx, 4 + tmp );\n\n    for( i = 0; i < dlen; i += 16 )\n    {\n        mbedtls_md_hmac_reset ( &md_ctx );\n        mbedtls_md_hmac_update( &md_ctx, 4 + tmp, 16 + nb );\n        mbedtls_md_hmac_finish( &md_ctx, h_i );\n\n        mbedtls_md_hmac_reset ( &md_ctx );\n        mbedtls_md_hmac_update( &md_ctx, 4 + tmp, 16 );\n        mbedtls_md_hmac_finish( &md_ctx, 4 + tmp );\n\n        k = ( i + 16 > dlen ) ? dlen % 16 : 16;\n\n        for( j = 0; j < k; j++ )\n            dstbuf[i + j]  = h_i[j];\n    }\n\n    mbedtls_md_free( &md_ctx );\n\n    /*\n     * XOR out with P_sha1(secret,label+random)[0..dlen]\n     */\n    if( ( md_info = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 ) ) == NULL )\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n\n    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )\n        return( ret );\n\n    mbedtls_md_hmac_starts( &md_ctx, S2, hs );\n    mbedtls_md_hmac_update( &md_ctx, tmp + 20, nb );\n    mbedtls_md_hmac_finish( &md_ctx, tmp );\n\n    for( i = 0; i < dlen; i += 20 )\n    {\n        mbedtls_md_hmac_reset ( &md_ctx );\n        mbedtls_md_hmac_update( &md_ctx, tmp, 20 + nb );\n        mbedtls_md_hmac_finish( &md_ctx, h_i );\n\n        mbedtls_md_hmac_reset ( &md_ctx );\n        mbedtls_md_hmac_update( &md_ctx, tmp, 20 );\n        mbedtls_md_hmac_finish( &md_ctx, tmp );\n\n        k = ( i + 20 > dlen ) ? dlen % 20 : 20;\n\n        for( j = 0; j < k; j++ )\n            dstbuf[i + j] = (unsigned char)( dstbuf[i + j] ^ h_i[j] );\n    }\n\n    mbedtls_md_free( &md_ctx );\n\n    mbedtls_zeroize( tmp, sizeof( tmp ) );\n    mbedtls_zeroize( h_i, sizeof( h_i ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_PROTO_TLS1) || MBEDTLS_SSL_PROTO_TLS1_1 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\nstatic int tls_prf_generic( mbedtls_md_type_t md_type,\n                            const unsigned char *secret, size_t slen,\n                            const char *label,\n                            const unsigned char *random, size_t rlen,\n                            unsigned char *dstbuf, size_t dlen )\n{\n    size_t nb;\n    size_t i, j, k, md_len;\n    unsigned char tmp[128];\n    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];\n    const mbedtls_md_info_t *md_info;\n    mbedtls_md_context_t md_ctx;\n    int ret;\n\n    mbedtls_md_init( &md_ctx );\n\n    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n\n    md_len = mbedtls_md_get_size( md_info );\n\n    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    nb = strlen( label );\n    memcpy( tmp + md_len, label, nb );\n    memcpy( tmp + md_len + nb, random, rlen );\n    nb += rlen;\n\n    /*\n     * Compute P_<hash>(secret, label + random)[0..dlen]\n     */\n    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )\n        return( ret );\n\n    mbedtls_md_hmac_starts( &md_ctx, secret, slen );\n    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );\n    mbedtls_md_hmac_finish( &md_ctx, tmp );\n\n    for( i = 0; i < dlen; i += md_len )\n    {\n        mbedtls_md_hmac_reset ( &md_ctx );\n        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );\n        mbedtls_md_hmac_finish( &md_ctx, h_i );\n\n        mbedtls_md_hmac_reset ( &md_ctx );\n        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );\n        mbedtls_md_hmac_finish( &md_ctx, tmp );\n\n        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;\n\n        for( j = 0; j < k; j++ )\n            dstbuf[i + j]  = h_i[j];\n    }\n\n    mbedtls_md_free( &md_ctx );\n\n    mbedtls_zeroize( tmp, sizeof( tmp ) );\n    mbedtls_zeroize( h_i, sizeof( h_i ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SHA256_C)\nstatic int tls_prf_sha256( const unsigned char *secret, size_t slen,\n                           const char *label,\n                           const unsigned char *random, size_t rlen,\n                           unsigned char *dstbuf, size_t dlen )\n{\n    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,\n                             label, random, rlen, dstbuf, dlen ) );\n}\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\nstatic int tls_prf_sha384( const unsigned char *secret, size_t slen,\n                           const char *label,\n                           const unsigned char *random, size_t rlen,\n                           unsigned char *dstbuf, size_t dlen )\n{\n    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,\n                             label, random, rlen, dstbuf, dlen ) );\n}\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\nstatic void ssl_update_checksum_start( mbedtls_ssl_context *, const unsigned char *, size_t );\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\nstatic void ssl_update_checksum_md5sha1( mbedtls_ssl_context *, const unsigned char *, size_t );\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\nstatic void ssl_calc_verify_ssl( mbedtls_ssl_context *, unsigned char * );\nstatic void ssl_calc_finished_ssl( mbedtls_ssl_context *, unsigned char *, int );\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)\nstatic void ssl_calc_verify_tls( mbedtls_ssl_context *, unsigned char * );\nstatic void ssl_calc_finished_tls( mbedtls_ssl_context *, unsigned char *, int );\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\nstatic void ssl_update_checksum_sha256( mbedtls_ssl_context *, const unsigned char *, size_t );\nstatic void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *,unsigned char * );\nstatic void ssl_calc_finished_tls_sha256( mbedtls_ssl_context *,unsigned char *, int );\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\nstatic void ssl_update_checksum_sha384( mbedtls_ssl_context *, const unsigned char *, size_t );\nstatic void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *, unsigned char * );\nstatic void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\nint mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )\n{\n    int ret = 0;\n    unsigned char tmp[64];\n    unsigned char keyblk[256];\n    unsigned char *key1;\n    unsigned char *key2;\n    unsigned char *mac_enc;\n    unsigned char *mac_dec;\n    size_t mac_key_len;\n    size_t iv_copy_len;\n    const mbedtls_cipher_info_t *cipher_info;\n    const mbedtls_md_info_t *md_info;\n\n    mbedtls_ssl_session *session = ssl->session_negotiate;\n    mbedtls_ssl_transform *transform = ssl->transform_negotiate;\n    mbedtls_ssl_handshake_params *handshake = ssl->handshake;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> derive keys\" ) );\n\n    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );\n    if( cipher_info == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"cipher info for %d not found\",\n                            transform->ciphersuite_info->cipher ) );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );\n    if( md_info == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"mbedtls_md info for %d not found\",\n                            transform->ciphersuite_info->mac ) );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    /*\n     * Set appropriate PRF function and other SSL / TLS / TLS1.2 functions\n     */\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        handshake->tls_prf = ssl3_prf;\n        handshake->calc_verify = ssl_calc_verify_ssl;\n        handshake->calc_finished = ssl_calc_finished_ssl;\n    }\n    else\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)\n    if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        handshake->tls_prf = tls1_prf;\n        handshake->calc_verify = ssl_calc_verify_tls;\n        handshake->calc_finished = ssl_calc_finished_tls;\n    }\n    else\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA512_C)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&\n        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )\n    {\n        handshake->tls_prf = tls_prf_sha384;\n        handshake->calc_verify = ssl_calc_verify_tls_sha384;\n        handshake->calc_finished = ssl_calc_finished_tls_sha384;\n    }\n    else\n#endif\n#if defined(MBEDTLS_SHA256_C)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n    {\n        handshake->tls_prf = tls_prf_sha256;\n        handshake->calc_verify = ssl_calc_verify_tls_sha256;\n        handshake->calc_finished = ssl_calc_finished_tls_sha256;\n    }\n    else\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    /*\n     * SSLv3:\n     *   master =\n     *     MD5( premaster + SHA1( 'A'   + premaster + randbytes ) ) +\n     *     MD5( premaster + SHA1( 'BB'  + premaster + randbytes ) ) +\n     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )\n     *\n     * TLSv1+:\n     *   master = PRF( premaster, \"master secret\", randbytes )[0..47]\n     */\n    if( handshake->resume == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"premaster secret\", handshake->premaster,\n                       handshake->pmslen );\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n        if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED )\n        {\n            unsigned char session_hash[48];\n            size_t hash_len;\n\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"using extended master secret\" ) );\n\n            ssl->handshake->calc_verify( ssl, session_hash );\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n            {\n#if defined(MBEDTLS_SHA512_C)\n                if( ssl->transform_negotiate->ciphersuite_info->mac ==\n                    MBEDTLS_MD_SHA384 )\n                {\n                    hash_len = 48;\n                }\n                else\n#endif\n                    hash_len = 32;\n            }\n            else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n                hash_len = 36;\n\n            MBEDTLS_SSL_DEBUG_BUF( 3, \"session hash\", session_hash, hash_len );\n\n            ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,\n                                      \"extended master secret\",\n                                      session_hash, hash_len,\n                                      session->master, 48 );\n            if( ret != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"prf\", ret );\n                return( ret );\n            }\n\n        }\n        else\n#endif\n        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,\n                                  \"master secret\",\n                                  handshake->randbytes, 64,\n                                  session->master, 48 );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"prf\", ret );\n            return( ret );\n        }\n\n        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );\n    }\n    else\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"no premaster (session resumed)\" ) );\n\n    /*\n     * Swap the client and server random values.\n     */\n    memcpy( tmp, handshake->randbytes, 64 );\n    memcpy( handshake->randbytes, tmp + 32, 32 );\n    memcpy( handshake->randbytes + 32, tmp, 32 );\n    mbedtls_zeroize( tmp, sizeof( tmp ) );\n\n    /*\n     *  SSLv3:\n     *    key block =\n     *      MD5( master + SHA1( 'A'    + master + randbytes ) ) +\n     *      MD5( master + SHA1( 'BB'   + master + randbytes ) ) +\n     *      MD5( master + SHA1( 'CCC'  + master + randbytes ) ) +\n     *      MD5( master + SHA1( 'DDDD' + master + randbytes ) ) +\n     *      ...\n     *\n     *  TLSv1:\n     *    key block = PRF( master, \"key expansion\", randbytes )\n     */\n    ret = handshake->tls_prf( session->master, 48, \"key expansion\",\n                              handshake->randbytes, 64, keyblk, 256 );\n    if( ret != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"prf\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"ciphersuite = %s\",\n                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"master secret\", session->master, 48 );\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"random bytes\", handshake->randbytes, 64 );\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"key block\", keyblk, 256 );\n\n    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );\n\n    /*\n     * Determine the appropriate key, IV and MAC length.\n     */\n\n    transform->keylen = cipher_info->key_bitlen / 8;\n\n    if( cipher_info->mode == MBEDTLS_MODE_GCM ||\n        cipher_info->mode == MBEDTLS_MODE_CCM )\n    {\n        transform->maclen = 0;\n        mac_key_len = 0;\n\n        transform->ivlen = 12;\n        transform->fixed_ivlen = 4;\n\n        /* Minimum length is expicit IV + tag */\n        transform->minlen = transform->ivlen - transform->fixed_ivlen\n                            + ( transform->ciphersuite_info->flags &\n                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );\n    }\n    else\n    {\n        /* Initialize HMAC contexts */\n        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||\n            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md_setup\", ret );\n            return( ret );\n        }\n\n        /* Get MAC length */\n        mac_key_len = mbedtls_md_get_size( md_info );\n        transform->maclen = mac_key_len;\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\n        /*\n         * If HMAC is to be truncated, we shall keep the leftmost bytes,\n         * (rfc 6066 page 13 or rfc 2104 section 4),\n         * so we only need to adjust the length here.\n         */\n        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )\n        {\n            transform->maclen = MBEDTLS_SSL_TRUNCATED_HMAC_LEN;\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT)\n            /* Fall back to old, non-compliant version of the truncated\n             * HMAC implementation which also truncates the key\n             * (Mbed TLS versions from 1.3 to 2.6.0) */\n            mac_key_len = transform->maclen;\n#endif\n        }\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n        /* IV length */\n        transform->ivlen = cipher_info->iv_size;\n\n        /* Minimum length */\n        if( cipher_info->mode == MBEDTLS_MODE_STREAM )\n            transform->minlen = transform->maclen;\n        else\n        {\n            /*\n             * GenericBlockCipher:\n             * 1. if EtM is in use: one block plus MAC\n             *    otherwise: * first multiple of blocklen greater than maclen\n             * 2. IV except for SSL3 and TLS 1.0\n             */\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n            if( session->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED )\n            {\n                transform->minlen = transform->maclen\n                                  + cipher_info->block_size;\n            }\n            else\n#endif\n            {\n                transform->minlen = transform->maclen\n                                  + cipher_info->block_size\n                                  - transform->maclen % cipher_info->block_size;\n            }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)\n            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||\n                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )\n                ; /* No need to adjust minlen */\n            else\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)\n            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||\n                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n            {\n                transform->minlen += transform->ivlen;\n            }\n            else\n#endif\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n            }\n        }\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"keylen: %d, minlen: %d, ivlen: %d, maclen: %d\",\n                   transform->keylen, transform->minlen, transform->ivlen,\n                   transform->maclen ) );\n\n    /*\n     * Finally setup the cipher contexts, IVs and MAC secrets.\n     */\n#if defined(MBEDTLS_SSL_CLI_C)\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )\n    {\n        key1 = keyblk + mac_key_len * 2;\n        key2 = keyblk + mac_key_len * 2 + transform->keylen;\n\n        mac_enc = keyblk;\n        mac_dec = keyblk + mac_key_len;\n\n        /*\n         * This is not used in TLS v1.1.\n         */\n        iv_copy_len = ( transform->fixed_ivlen ) ?\n                            transform->fixed_ivlen : transform->ivlen;\n        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );\n        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,\n                iv_copy_len );\n    }\n    else\n#endif /* MBEDTLS_SSL_CLI_C */\n#if defined(MBEDTLS_SSL_SRV_C)\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )\n    {\n        key1 = keyblk + mac_key_len * 2 + transform->keylen;\n        key2 = keyblk + mac_key_len * 2;\n\n        mac_enc = keyblk + mac_key_len;\n        mac_dec = keyblk;\n\n        /*\n         * This is not used in TLS v1.1.\n         */\n        iv_copy_len = ( transform->fixed_ivlen ) ?\n                            transform->fixed_ivlen : transform->ivlen;\n        memcpy( transform->iv_dec, key1 + transform->keylen,  iv_copy_len );\n        memcpy( transform->iv_enc, key1 + transform->keylen + iv_copy_len,\n                iv_copy_len );\n    }\n    else\n#endif /* MBEDTLS_SSL_SRV_C */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        if( mac_key_len > sizeof transform->mac_enc )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        memcpy( transform->mac_enc, mac_enc, mac_key_len );\n        memcpy( transform->mac_dec, mac_dec, mac_key_len );\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )\n    {\n        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );\n        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );\n    }\n    else\n#endif\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\n    if( mbedtls_ssl_hw_record_init != NULL )\n    {\n        int ret = 0;\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"going for mbedtls_ssl_hw_record_init()\" ) );\n\n        if( ( ret = mbedtls_ssl_hw_record_init( ssl, key1, key2, transform->keylen,\n                                        transform->iv_enc, transform->iv_dec,\n                                        iv_copy_len,\n                                        mac_enc, mac_dec,\n                                        mac_key_len ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_hw_record_init\", ret );\n            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );\n        }\n    }\n#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */\n\n#if defined(MBEDTLS_SSL_EXPORT_KEYS)\n    if( ssl->conf->f_export_keys != NULL )\n    {\n        ssl->conf->f_export_keys( ssl->conf->p_export_keys,\n                                  session->master, keyblk,\n                                  mac_key_len, transform->keylen,\n                                  iv_copy_len );\n    }\n#endif\n\n    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,\n                                 cipher_info ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_setup\", ret );\n        return( ret );\n    }\n\n    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,\n                                 cipher_info ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_setup\", ret );\n        return( ret );\n    }\n\n    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,\n                               cipher_info->key_bitlen,\n                               MBEDTLS_ENCRYPT ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_setkey\", ret );\n        return( ret );\n    }\n\n    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,\n                               cipher_info->key_bitlen,\n                               MBEDTLS_DECRYPT ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_setkey\", ret );\n        return( ret );\n    }\n\n#if defined(MBEDTLS_CIPHER_MODE_CBC)\n    if( cipher_info->mode == MBEDTLS_MODE_CBC )\n    {\n        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,\n                                             MBEDTLS_PADDING_NONE ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_set_padding_mode\", ret );\n            return( ret );\n        }\n\n        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,\n                                             MBEDTLS_PADDING_NONE ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_set_padding_mode\", ret );\n            return( ret );\n        }\n    }\n#endif /* MBEDTLS_CIPHER_MODE_CBC */\n\n    mbedtls_zeroize( keyblk, sizeof( keyblk ) );\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    // Initialize compression\n    //\n    if( session->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )\n    {\n        if( ssl->compress_buf == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"Allocating compression buffer\" ) );\n            ssl->compress_buf = mbedtls_calloc( 1, MBEDTLS_SSL_BUFFER_LEN );\n            if( ssl->compress_buf == NULL )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc(%d bytes) failed\",\n                                    MBEDTLS_SSL_BUFFER_LEN ) );\n                return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n            }\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"Initializing zlib states\" ) );\n\n        memset( &transform->ctx_deflate, 0, sizeof( transform->ctx_deflate ) );\n        memset( &transform->ctx_inflate, 0, sizeof( transform->ctx_inflate ) );\n\n        if( deflateInit( &transform->ctx_deflate,\n                         Z_DEFAULT_COMPRESSION )   != Z_OK ||\n            inflateInit( &transform->ctx_inflate ) != Z_OK )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"Failed to initialize compression\" ) );\n            return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );\n        }\n    }\n#endif /* MBEDTLS_ZLIB_SUPPORT */\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= derive keys\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\nvoid ssl_calc_verify_ssl( mbedtls_ssl_context *ssl, unsigned char hash[36] )\n{\n    mbedtls_md5_context md5;\n    mbedtls_sha1_context sha1;\n    unsigned char pad_1[48];\n    unsigned char pad_2[48];\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> calc verify ssl\" ) );\n\n    mbedtls_md5_init( &md5 );\n    mbedtls_sha1_init( &sha1 );\n\n    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );\n    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );\n\n    memset( pad_1, 0x36, 48 );\n    memset( pad_2, 0x5C, 48 );\n\n    mbedtls_md5_update_ret( &md5, ssl->session_negotiate->master, 48 );\n    mbedtls_md5_update_ret( &md5, pad_1, 48 );\n    mbedtls_md5_finish_ret( &md5, hash );\n\n    mbedtls_md5_starts_ret( &md5 );\n    mbedtls_md5_update_ret( &md5, ssl->session_negotiate->master, 48 );\n    mbedtls_md5_update_ret( &md5, pad_2, 48 );\n    mbedtls_md5_update_ret( &md5, hash,  16 );\n    mbedtls_md5_finish_ret( &md5, hash );\n\n    mbedtls_sha1_update_ret( &sha1, ssl->session_negotiate->master, 48 );\n    mbedtls_sha1_update_ret( &sha1, pad_1, 40 );\n    mbedtls_sha1_finish_ret( &sha1, hash + 16 );\n\n    mbedtls_sha1_starts_ret( &sha1 );\n    mbedtls_sha1_update_ret( &sha1, ssl->session_negotiate->master, 48 );\n    mbedtls_sha1_update_ret( &sha1, pad_2, 40 );\n    mbedtls_sha1_update_ret( &sha1, hash + 16, 20 );\n    mbedtls_sha1_finish_ret( &sha1, hash + 16 );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"calculated verify result\", hash, 36 );\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= calc verify\" ) );\n\n    mbedtls_md5_free(  &md5  );\n    mbedtls_sha1_free( &sha1 );\n\n    return;\n}\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)\nvoid ssl_calc_verify_tls( mbedtls_ssl_context *ssl, unsigned char hash[36] )\n{\n    mbedtls_md5_context md5;\n    mbedtls_sha1_context sha1;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> calc verify tls\" ) );\n\n    mbedtls_md5_init( &md5 );\n    mbedtls_sha1_init( &sha1 );\n\n    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );\n    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );\n\n     mbedtls_md5_finish_ret( &md5,  hash );\n    mbedtls_sha1_finish_ret( &sha1, hash + 16 );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"calculated verify result\", hash, 36 );\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= calc verify\" ) );\n\n    mbedtls_md5_free(  &md5  );\n    mbedtls_sha1_free( &sha1 );\n\n    return;\n}\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\nvoid ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )\n{\n    mbedtls_sha256_context sha256;\n\n    mbedtls_sha256_init( &sha256 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> calc verify sha256\" ) );\n\n    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );\n    mbedtls_sha256_finish_ret( &sha256, hash );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"calculated verify result\", hash, 32 );\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= calc verify\" ) );\n\n    mbedtls_sha256_free( &sha256 );\n\n    return;\n}\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\nvoid ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )\n{\n    mbedtls_sha512_context sha512;\n\n    mbedtls_sha512_init( &sha512 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> calc verify sha384\" ) );\n\n    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );\n    mbedtls_sha512_finish_ret( &sha512, hash );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"calculated verify result\", hash, 48 );\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= calc verify\" ) );\n\n    mbedtls_sha512_free( &sha512 );\n\n    return;\n}\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nint mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )\n{\n    unsigned char *p = ssl->handshake->premaster;\n    unsigned char *end = p + sizeof( ssl->handshake->premaster );\n    const unsigned char *psk = ssl->conf->psk;\n    size_t psk_len = ssl->conf->psk_len;\n\n    /* If the psk callback was called, use its result */\n    if( ssl->handshake->psk != NULL )\n    {\n        psk = ssl->handshake->psk;\n        psk_len = ssl->handshake->psk_len;\n    }\n\n    /*\n     * PMS = struct {\n     *     opaque other_secret<0..2^16-1>;\n     *     opaque psk<0..2^16-1>;\n     * };\n     * with \"other_secret\" depending on the particular key exchange\n     */\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)\n    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )\n    {\n        if( end - p < 2 )\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n        *(p++) = (unsigned char)( psk_len >> 8 );\n        *(p++) = (unsigned char)( psk_len      );\n\n        if( end < p || (size_t)( end - p ) < psk_len )\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n        memset( p, 0, psk_len );\n        p += psk_len;\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n    {\n        /*\n         * other_secret already set by the ClientKeyExchange message,\n         * and is 48 bytes long\n         */\n        *p++ = 0;\n        *p++ = 48;\n        p += 48;\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n    if( key_ex == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n    {\n        int ret;\n        size_t len;\n\n        /* Write length only when we know the actual value */\n        if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,\n                                      p + 2, end - ( p + 2 ), &len,\n                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_dhm_calc_secret\", ret );\n            return( ret );\n        }\n        *(p++) = (unsigned char)( len >> 8 );\n        *(p++) = (unsigned char)( len );\n        p += len;\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->handshake->dhm_ctx.K  );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)\n    if( key_ex == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        int ret;\n        size_t zlen;\n\n        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx, &zlen,\n                                       p + 2, end - ( p + 2 ),\n                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecdh_calc_secret\", ret );\n            return( ret );\n        }\n\n        *(p++) = (unsigned char)( zlen >> 8 );\n        *(p++) = (unsigned char)( zlen      );\n        p += zlen;\n\n        MBEDTLS_SSL_DEBUG_MPI( 3, \"ECDH: z\", &ssl->handshake->ecdh_ctx.z );\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    /* opaque psk<0..2^16-1>; */\n    if( end - p < 2 )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    *(p++) = (unsigned char)( psk_len >> 8 );\n    *(p++) = (unsigned char)( psk_len      );\n\n    if( end < p || (size_t)( end - p ) < psk_len )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    memcpy( p, psk, psk_len );\n    p += psk_len;\n\n    ssl->handshake->pmslen = p - ssl->handshake->premaster;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n/*\n * SSLv3.0 MAC functions\n */\n#define SSL_MAC_MAX_BYTES   20  /* MD-5 or SHA-1 */\nstatic void ssl_mac( mbedtls_md_context_t *md_ctx,\n                     const unsigned char *secret,\n                     const unsigned char *buf, size_t len,\n                     const unsigned char *ctr, int type,\n                     unsigned char out[SSL_MAC_MAX_BYTES] )\n{\n    unsigned char header[11];\n    unsigned char padding[48];\n    int padlen;\n    int md_size = mbedtls_md_get_size( md_ctx->md_info );\n    int md_type = mbedtls_md_get_type( md_ctx->md_info );\n\n    /* Only MD5 and SHA-1 supported */\n    if( md_type == MBEDTLS_MD_MD5 )\n        padlen = 48;\n    else\n        padlen = 40;\n\n    memcpy( header, ctr, 8 );\n    header[ 8] = (unsigned char)  type;\n    header[ 9] = (unsigned char)( len >> 8 );\n    header[10] = (unsigned char)( len      );\n\n    memset( padding, 0x36, padlen );\n    mbedtls_md_starts( md_ctx );\n    mbedtls_md_update( md_ctx, secret,  md_size );\n    mbedtls_md_update( md_ctx, padding, padlen  );\n    mbedtls_md_update( md_ctx, header,  11      );\n    mbedtls_md_update( md_ctx, buf,     len     );\n    mbedtls_md_finish( md_ctx, out              );\n\n    memset( padding, 0x5C, padlen );\n    mbedtls_md_starts( md_ctx );\n    mbedtls_md_update( md_ctx, secret,    md_size );\n    mbedtls_md_update( md_ctx, padding,   padlen  );\n    mbedtls_md_update( md_ctx, out,       md_size );\n    mbedtls_md_finish( md_ctx, out                );\n}\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n\n#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER) ||     \\\n    ( defined(MBEDTLS_CIPHER_MODE_CBC) &&                                  \\\n      ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) ) )\n#define SSL_SOME_MODES_USE_MAC\n#endif\n\n/*\n * Encryption/decryption functions\n */\nstatic int ssl_encrypt_buf( mbedtls_ssl_context *ssl )\n{\n    mbedtls_cipher_mode_t mode;\n    int auth_done = 0;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> encrypt buf\" ) );\n\n    if( ssl->session_out == NULL || ssl->transform_out == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"before encrypt: output payload\",\n                      ssl->out_msg, ssl->out_msglen );\n\n    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"Record content %u too large, maximum %d\",\n                                    (unsigned) ssl->out_msglen,\n                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    /*\n     * Add MAC before if needed\n     */\n#if defined(SSL_SOME_MODES_USE_MAC)\n    if( mode == MBEDTLS_MODE_STREAM ||\n        ( mode == MBEDTLS_MODE_CBC\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n          && ssl->session_out->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED\n#endif\n        ) )\n    {\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n        {\n            unsigned char mac[SSL_MAC_MAX_BYTES];\n\n            ssl_mac( &ssl->transform_out->md_ctx_enc,\n                      ssl->transform_out->mac_enc,\n                      ssl->out_msg, ssl->out_msglen,\n                      ssl->out_ctr, ssl->out_msgtype,\n                      mac );\n\n            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );\n        }\n        else\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n        defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )\n        {\n            unsigned char mac[MBEDTLS_SSL_MAC_ADD];\n\n            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );\n            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );\n            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );\n            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,\n                             ssl->out_msg, ssl->out_msglen );\n            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );\n            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );\n\n            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );\n        }\n        else\n#endif\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"computed mac\",\n                       ssl->out_msg + ssl->out_msglen,\n                       ssl->transform_out->maclen );\n\n        ssl->out_msglen += ssl->transform_out->maclen;\n        auth_done++;\n    }\n#endif /* AEAD not the only option */\n\n    /*\n     * Encrypt\n     */\n#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)\n    if( mode == MBEDTLS_MODE_STREAM )\n    {\n        int ret;\n        size_t olen = 0;\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"before encrypt: msglen = %d, \"\n                            \"including %d bytes of padding\",\n                       ssl->out_msglen, 0 ) );\n\n        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,\n                                   ssl->transform_out->iv_enc,\n                                   ssl->transform_out->ivlen,\n                                   ssl->out_msg, ssl->out_msglen,\n                                   ssl->out_msg, &olen ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_crypt\", ret );\n            return( ret );\n        }\n\n        if( ssl->out_msglen != olen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n    }\n    else\n#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */\n#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)\n    if( mode == MBEDTLS_MODE_GCM ||\n        mode == MBEDTLS_MODE_CCM )\n    {\n        int ret;\n        size_t enc_msglen, olen;\n        unsigned char *enc_msg;\n        unsigned char add_data[13];\n        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &\n                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;\n\n        memcpy( add_data, ssl->out_ctr, 8 );\n        add_data[8]  = ssl->out_msgtype;\n        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,\n                           ssl->conf->transport, add_data + 9 );\n        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;\n        add_data[12] = ssl->out_msglen & 0xFF;\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"additional data used for AEAD\",\n                       add_data, 13 );\n\n        /*\n         * Generate IV\n         */\n        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )\n        {\n            /* Reminder if we ever add an AEAD mode with a different size */\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,\n                             ssl->out_ctr, 8 );\n        memcpy( ssl->out_iv, ssl->out_ctr, 8 );\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"IV used\", ssl->out_iv,\n                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );\n\n        /*\n         * Fix pointer positions and message length with added IV\n         */\n        enc_msg = ssl->out_msg;\n        enc_msglen = ssl->out_msglen;\n        ssl->out_msglen += ssl->transform_out->ivlen -\n                           ssl->transform_out->fixed_ivlen;\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"before encrypt: msglen = %d, \"\n                            \"including %d bytes of padding\",\n                       ssl->out_msglen, 0 ) );\n\n        /*\n         * Encrypt and authenticate\n         */\n        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,\n                                         ssl->transform_out->iv_enc,\n                                         ssl->transform_out->ivlen,\n                                         add_data, 13,\n                                         enc_msg, enc_msglen,\n                                         enc_msg, &olen,\n                                         enc_msg + enc_msglen, taglen ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_auth_encrypt\", ret );\n            return( ret );\n        }\n\n        if( olen != enc_msglen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        ssl->out_msglen += taglen;\n        auth_done++;\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"after encrypt: tag\", enc_msg + enc_msglen, taglen );\n    }\n    else\n#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */\n#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \\\n    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )\n    if( mode == MBEDTLS_MODE_CBC )\n    {\n        int ret;\n        unsigned char *enc_msg;\n        size_t enc_msglen, padlen, olen = 0, i;\n\n        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %\n                 ssl->transform_out->ivlen;\n        if( padlen == ssl->transform_out->ivlen )\n            padlen = 0;\n\n        for( i = 0; i <= padlen; i++ )\n            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;\n\n        ssl->out_msglen += padlen + 1;\n\n        enc_msglen = ssl->out_msglen;\n        enc_msg = ssl->out_msg;\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        /*\n         * Prepend per-record IV for block cipher in TLS v1.1 and up as per\n         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)\n         */\n        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )\n        {\n            /*\n             * Generate IV\n             */\n            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,\n                                  ssl->transform_out->ivlen );\n            if( ret != 0 )\n                return( ret );\n\n            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,\n                    ssl->transform_out->ivlen );\n\n            /*\n             * Fix pointer positions and message length with added IV\n             */\n            enc_msg = ssl->out_msg;\n            enc_msglen = ssl->out_msglen;\n            ssl->out_msglen += ssl->transform_out->ivlen;\n        }\n#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"before encrypt: msglen = %d, \"\n                            \"including %d bytes of IV and %d bytes of padding\",\n                            ssl->out_msglen, ssl->transform_out->ivlen,\n                            padlen + 1 ) );\n\n        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,\n                                   ssl->transform_out->iv_enc,\n                                   ssl->transform_out->ivlen,\n                                   enc_msg, enc_msglen,\n                                   enc_msg, &olen ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_crypt\", ret );\n            return( ret );\n        }\n\n        if( enc_msglen != olen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)\n        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )\n        {\n            /*\n             * Save IV in SSL3 and TLS1\n             */\n            memcpy( ssl->transform_out->iv_enc,\n                    ssl->transform_out->cipher_ctx_enc.iv,\n                    ssl->transform_out->ivlen );\n        }\n#endif\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n        if( auth_done == 0 )\n        {\n            /*\n             * MAC(MAC_write_key, seq_num +\n             *     TLSCipherText.type +\n             *     TLSCipherText.version +\n             *     length_of( (IV +) ENC(...) ) +\n             *     IV + // except for TLS 1.0\n             *     ENC(content + padding + padding_length));\n             */\n            unsigned char pseudo_hdr[13];\n\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"using encrypt then mac\" ) );\n\n            memcpy( pseudo_hdr +  0, ssl->out_ctr, 8 );\n            memcpy( pseudo_hdr +  8, ssl->out_hdr, 3 );\n            pseudo_hdr[11] = (unsigned char)( ( ssl->out_msglen >> 8 ) & 0xFF );\n            pseudo_hdr[12] = (unsigned char)( ( ssl->out_msglen      ) & 0xFF );\n\n            MBEDTLS_SSL_DEBUG_BUF( 4, \"MAC'd meta-data\", pseudo_hdr, 13 );\n\n            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, pseudo_hdr, 13 );\n            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,\n                             ssl->out_iv, ssl->out_msglen );\n            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc,\n                             ssl->out_iv + ssl->out_msglen );\n            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );\n\n            ssl->out_msglen += ssl->transform_out->maclen;\n            auth_done++;\n        }\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n    }\n    else\n#endif /* MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    /* Make extra sure authentication was performed, exactly once */\n    if( auth_done != 1 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= encrypt buf\" ) );\n\n    return( 0 );\n}\n\nstatic int ssl_decrypt_buf( mbedtls_ssl_context *ssl )\n{\n    size_t i;\n    mbedtls_cipher_mode_t mode;\n    int auth_done = 0;\n#if defined(SSL_SOME_MODES_USE_MAC)\n    size_t padlen = 0, correct = 1;\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> decrypt buf\" ) );\n\n    if( ssl->session_in == NULL || ssl->transform_in == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );\n\n    if( ssl->in_msglen < ssl->transform_in->minlen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"in_msglen (%d) < minlen (%d)\",\n                       ssl->in_msglen, ssl->transform_in->minlen ) );\n        return( MBEDTLS_ERR_SSL_INVALID_MAC );\n    }\n\n#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)\n    if( mode == MBEDTLS_MODE_STREAM )\n    {\n        int ret;\n        size_t olen = 0;\n\n        padlen = 0;\n\n        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,\n                                   ssl->transform_in->iv_dec,\n                                   ssl->transform_in->ivlen,\n                                   ssl->in_msg, ssl->in_msglen,\n                                   ssl->in_msg, &olen ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_crypt\", ret );\n            return( ret );\n        }\n\n        if( ssl->in_msglen != olen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n    }\n    else\n#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */\n#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)\n    if( mode == MBEDTLS_MODE_GCM ||\n        mode == MBEDTLS_MODE_CCM )\n    {\n        int ret;\n        size_t dec_msglen, olen;\n        unsigned char *dec_msg;\n        unsigned char *dec_msg_result;\n        unsigned char add_data[13];\n        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &\n                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;\n        size_t explicit_iv_len = ssl->transform_in->ivlen -\n                                 ssl->transform_in->fixed_ivlen;\n\n        if( ssl->in_msglen < explicit_iv_len + taglen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"msglen (%d) < explicit_iv_len (%d) \"\n                                \"+ taglen (%d)\", ssl->in_msglen,\n                                explicit_iv_len, taglen ) );\n            return( MBEDTLS_ERR_SSL_INVALID_MAC );\n        }\n        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;\n\n        dec_msg = ssl->in_msg;\n        dec_msg_result = ssl->in_msg;\n        ssl->in_msglen = dec_msglen;\n\n        memcpy( add_data, ssl->in_ctr, 8 );\n        add_data[8]  = ssl->in_msgtype;\n        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,\n                           ssl->conf->transport, add_data + 9 );\n        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;\n        add_data[12] = ssl->in_msglen & 0xFF;\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"additional data used for AEAD\",\n                       add_data, 13 );\n\n        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,\n                ssl->in_iv,\n                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"IV used\", ssl->transform_in->iv_dec,\n                                     ssl->transform_in->ivlen );\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"TAG used\", dec_msg + dec_msglen, taglen );\n\n        /*\n         * Decrypt and authenticate\n         */\n        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,\n                                         ssl->transform_in->iv_dec,\n                                         ssl->transform_in->ivlen,\n                                         add_data, 13,\n                                         dec_msg, dec_msglen,\n                                         dec_msg_result, &olen,\n                                         dec_msg + dec_msglen, taglen ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_auth_decrypt\", ret );\n\n            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )\n                return( MBEDTLS_ERR_SSL_INVALID_MAC );\n\n            return( ret );\n        }\n        auth_done++;\n\n        if( olen != dec_msglen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n    }\n    else\n#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */\n#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \\\n    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )\n    if( mode == MBEDTLS_MODE_CBC )\n    {\n        /*\n         * Decrypt and check the padding\n         */\n        int ret;\n        unsigned char *dec_msg;\n        unsigned char *dec_msg_result;\n        size_t dec_msglen;\n        size_t minlen = 0;\n        size_t olen = 0;\n\n        /*\n         * Check immediate ciphertext sanity\n         */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )\n            minlen += ssl->transform_in->ivlen;\n#endif\n\n        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||\n            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"msglen (%d) < max( ivlen(%d), maclen (%d) \"\n                                \"+ 1 ) ( + expl IV )\", ssl->in_msglen,\n                                ssl->transform_in->ivlen,\n                                ssl->transform_in->maclen ) );\n            return( MBEDTLS_ERR_SSL_INVALID_MAC );\n        }\n\n        dec_msglen = ssl->in_msglen;\n        dec_msg = ssl->in_msg;\n        dec_msg_result = ssl->in_msg;\n\n        /*\n         * Authenticate before decrypt if enabled\n         */\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n        if( ssl->session_in->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED )\n        {\n            unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];\n            unsigned char pseudo_hdr[13];\n\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"using encrypt then mac\" ) );\n\n            dec_msglen -= ssl->transform_in->maclen;\n            ssl->in_msglen -= ssl->transform_in->maclen;\n\n            memcpy( pseudo_hdr +  0, ssl->in_ctr, 8 );\n            memcpy( pseudo_hdr +  8, ssl->in_hdr, 3 );\n            pseudo_hdr[11] = (unsigned char)( ( ssl->in_msglen >> 8 ) & 0xFF );\n            pseudo_hdr[12] = (unsigned char)( ( ssl->in_msglen      ) & 0xFF );\n\n            MBEDTLS_SSL_DEBUG_BUF( 4, \"MAC'd meta-data\", pseudo_hdr, 13 );\n\n            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, pseudo_hdr, 13 );\n            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec,\n                             ssl->in_iv, ssl->in_msglen );\n            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );\n            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );\n\n            MBEDTLS_SSL_DEBUG_BUF( 4, \"message  mac\", ssl->in_iv + ssl->in_msglen,\n                                              ssl->transform_in->maclen );\n            MBEDTLS_SSL_DEBUG_BUF( 4, \"expected mac\", mac_expect,\n                                              ssl->transform_in->maclen );\n\n            if( mbedtls_ssl_safer_memcmp( ssl->in_iv + ssl->in_msglen, mac_expect,\n                                          ssl->transform_in->maclen ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"message mac does not match\" ) );\n\n                return( MBEDTLS_ERR_SSL_INVALID_MAC );\n            }\n            auth_done++;\n        }\n#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */\n\n        /*\n         * Check length sanity\n         */\n        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"msglen (%d) %% ivlen (%d) != 0\",\n                           ssl->in_msglen, ssl->transform_in->ivlen ) );\n            return( MBEDTLS_ERR_SSL_INVALID_MAC );\n        }\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        /*\n         * Initialize for prepended IV for block cipher in TLS v1.1 and up\n         */\n        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )\n        {\n            dec_msglen -= ssl->transform_in->ivlen;\n            ssl->in_msglen -= ssl->transform_in->ivlen;\n\n            for( i = 0; i < ssl->transform_in->ivlen; i++ )\n                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];\n        }\n#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */\n\n        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,\n                                   ssl->transform_in->iv_dec,\n                                   ssl->transform_in->ivlen,\n                                   dec_msg, dec_msglen,\n                                   dec_msg_result, &olen ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_cipher_crypt\", ret );\n            return( ret );\n        }\n\n        if( dec_msglen != olen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)\n        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )\n        {\n            /*\n             * Save IV in SSL3 and TLS1\n             */\n            memcpy( ssl->transform_in->iv_dec,\n                    ssl->transform_in->cipher_ctx_dec.iv,\n                    ssl->transform_in->ivlen );\n        }\n#endif\n\n        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];\n\n        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&\n            auth_done == 0 )\n        {\n#if defined(MBEDTLS_SSL_DEBUG_ALL)\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"msglen (%d) < maclen (%d) + padlen (%d)\",\n                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );\n#endif\n            padlen = 0;\n            correct = 0;\n        }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n        {\n            if( padlen > ssl->transform_in->ivlen )\n            {\n#if defined(MBEDTLS_SSL_DEBUG_ALL)\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad padding length: is %d, \"\n                                    \"should be no more than %d\",\n                               padlen, ssl->transform_in->ivlen ) );\n#endif\n                correct = 0;\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )\n        {\n            /*\n             * TLSv1+: always check the padding up to the first failure\n             * and fake check up to 256 bytes of padding\n             */\n            size_t pad_count = 0, real_count = 1;\n            size_t padding_idx = ssl->in_msglen - padlen - 1;\n\n            /*\n             * Padding is guaranteed to be incorrect if:\n             *   1. padlen >= ssl->in_msglen\n             *\n             *   2. padding_idx >= MBEDTLS_SSL_MAX_CONTENT_LEN +\n             *                     ssl->transform_in->maclen\n             *\n             * In both cases we reset padding_idx to a safe value (0) to\n             * prevent out-of-buffer reads.\n             */\n            correct &= ( ssl->in_msglen >= padlen + 1 );\n            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +\n                                       ssl->transform_in->maclen );\n\n            padding_idx *= correct;\n\n            for( i = 1; i <= 256; i++ )\n            {\n                real_count &= ( i <= padlen );\n                pad_count += real_count *\n                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );\n            }\n\n            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */\n\n#if defined(MBEDTLS_SSL_DEBUG_ALL)\n            if( padlen > 0 && correct == 0 )\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad padding byte detected\" ) );\n#endif\n            padlen &= correct * 0x1FF;\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        ssl->in_msglen -= padlen;\n    }\n    else\n#endif /* MBEDTLS_CIPHER_MODE_CBC &&\n          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"raw buffer after decryption\",\n                   ssl->in_msg, ssl->in_msglen );\n\n    /*\n     * Authenticate if not done yet.\n     * Compute the MAC regardless of the padding result (RFC4346, CBCTIME).\n     */\n#if defined(SSL_SOME_MODES_USE_MAC)\n    if( auth_done == 0 )\n    {\n        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];\n\n        ssl->in_msglen -= ssl->transform_in->maclen;\n\n        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );\n        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n        {\n            ssl_mac( &ssl->transform_in->md_ctx_dec,\n                      ssl->transform_in->mac_dec,\n                      ssl->in_msg, ssl->in_msglen,\n                      ssl->in_ctr, ssl->in_msgtype,\n                      mac_expect );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n        defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )\n        {\n            /*\n             * Process MAC and always update for padlen afterwards to make\n             * total time independent of padlen\n             *\n             * extra_run compensates MAC check for padlen\n             *\n             * Known timing attacks:\n             *  - Lucky Thirteen (http://www.isg.rhul.ac.uk/tls/TLStiming.pdf)\n             *\n             * We use ( ( Lx + 8 ) / 64 ) to handle 'negative Lx' values\n             * correctly. (We round down instead of up, so -56 is the correct\n             * value for our calculations instead of -55)\n             */\n            size_t j, extra_run = 0;\n            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -\n                        ( 13 + ssl->in_msglen          + 8 ) / 64;\n\n            extra_run &= correct * 0xFF;\n\n            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );\n            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );\n            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );\n            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,\n                             ssl->in_msglen );\n            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );\n            /* Call mbedtls_md_process at least once due to cache attacks */\n            for( j = 0; j < extra_run + 1; j++ )\n                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );\n\n            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n              MBEDTLS_SSL_PROTO_TLS1_2 */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"expected mac\", mac_expect, ssl->transform_in->maclen );\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"message  mac\", ssl->in_msg + ssl->in_msglen,\n                               ssl->transform_in->maclen );\n\n        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,\n                                      ssl->transform_in->maclen ) != 0 )\n        {\n#if defined(MBEDTLS_SSL_DEBUG_ALL)\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"message mac does not match\" ) );\n#endif\n            correct = 0;\n        }\n        auth_done++;\n\n        /*\n         * Finally check the correct flag\n         */\n        if( correct == 0 )\n            return( MBEDTLS_ERR_SSL_INVALID_MAC );\n    }\n#endif /* SSL_SOME_MODES_USE_MAC */\n\n    /* Make extra sure authentication was performed, exactly once */\n    if( auth_done != 1 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    if( ssl->in_msglen == 0 )\n    {\n        ssl->nb_zero++;\n\n        /*\n         * Three or more empty messages may be a DoS attack\n         * (excessive CPU consumption).\n         */\n        if( ssl->nb_zero > 3 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"received four consecutive empty \"\n                                \"messages, possible DoS attack\" ) );\n            return( MBEDTLS_ERR_SSL_INVALID_MAC );\n        }\n    }\n    else\n        ssl->nb_zero = 0;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        ; /* in_ctr read from peer, not maintained internally */\n    }\n    else\n#endif\n    {\n        for( i = 8; i > ssl_ep_len( ssl ); i-- )\n            if( ++ssl->in_ctr[i - 1] != 0 )\n                break;\n\n        /* The loop goes to its end iff the counter is wrapping */\n        if( i == ssl_ep_len( ssl ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"incoming message counter would wrap\" ) );\n            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );\n        }\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= decrypt buf\" ) );\n\n    return( 0 );\n}\n\n#undef MAC_NONE\n#undef MAC_PLAINTEXT\n#undef MAC_CIPHERTEXT\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n/*\n * Compression/decompression functions\n */\nstatic int ssl_compress_buf( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *msg_post = ssl->out_msg;\n    size_t len_pre = ssl->out_msglen;\n    unsigned char *msg_pre = ssl->compress_buf;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> compress buf\" ) );\n\n    if( len_pre == 0 )\n        return( 0 );\n\n    memcpy( msg_pre, ssl->out_msg, len_pre );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"before compression: msglen = %d, \",\n                   ssl->out_msglen ) );\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"before compression: output payload\",\n                   ssl->out_msg, ssl->out_msglen );\n\n    ssl->transform_out->ctx_deflate.next_in = msg_pre;\n    ssl->transform_out->ctx_deflate.avail_in = len_pre;\n    ssl->transform_out->ctx_deflate.next_out = msg_post;\n    ssl->transform_out->ctx_deflate.avail_out = MBEDTLS_SSL_BUFFER_LEN;\n\n    ret = deflate( &ssl->transform_out->ctx_deflate, Z_SYNC_FLUSH );\n    if( ret != Z_OK )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"failed to perform compression (%d)\", ret ) );\n        return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );\n    }\n\n    ssl->out_msglen = MBEDTLS_SSL_BUFFER_LEN -\n                      ssl->transform_out->ctx_deflate.avail_out;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"after compression: msglen = %d, \",\n                   ssl->out_msglen ) );\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"after compression: output payload\",\n                   ssl->out_msg, ssl->out_msglen );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= compress buf\" ) );\n\n    return( 0 );\n}\n\nstatic int ssl_decompress_buf( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *msg_post = ssl->in_msg;\n    size_t len_pre = ssl->in_msglen;\n    unsigned char *msg_pre = ssl->compress_buf;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> decompress buf\" ) );\n\n    if( len_pre == 0 )\n        return( 0 );\n\n    memcpy( msg_pre, ssl->in_msg, len_pre );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"before decompression: msglen = %d, \",\n                   ssl->in_msglen ) );\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"before decompression: input payload\",\n                   ssl->in_msg, ssl->in_msglen );\n\n    ssl->transform_in->ctx_inflate.next_in = msg_pre;\n    ssl->transform_in->ctx_inflate.avail_in = len_pre;\n    ssl->transform_in->ctx_inflate.next_out = msg_post;\n    ssl->transform_in->ctx_inflate.avail_out = MBEDTLS_SSL_MAX_CONTENT_LEN;\n\n    ret = inflate( &ssl->transform_in->ctx_inflate, Z_SYNC_FLUSH );\n    if( ret != Z_OK )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"failed to perform decompression (%d)\", ret ) );\n        return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );\n    }\n\n    ssl->in_msglen = MBEDTLS_SSL_MAX_CONTENT_LEN -\n                     ssl->transform_in->ctx_inflate.avail_out;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"after decompression: msglen = %d, \",\n                   ssl->in_msglen ) );\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"after decompression: input payload\",\n                   ssl->in_msg, ssl->in_msglen );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= decompress buf\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_ZLIB_SUPPORT */\n\n#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)\nstatic int ssl_write_hello_request( mbedtls_ssl_context *ssl );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\nstatic int ssl_resend_hello_request( mbedtls_ssl_context *ssl )\n{\n    /* If renegotiation is not enforced, retransmit until we would reach max\n     * timeout if we were using the usual handshake doubling scheme */\n    if( ssl->conf->renego_max_records < 0 )\n    {\n        uint32_t ratio = ssl->conf->hs_timeout_max / ssl->conf->hs_timeout_min + 1;\n        unsigned char doublings = 1;\n\n        while( ratio != 0 )\n        {\n            ++doublings;\n            ratio >>= 1;\n        }\n\n        if( ++ssl->renego_records_seen > doublings )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"no longer retransmitting hello request\" ) );\n            return( 0 );\n        }\n    }\n\n    return( ssl_write_hello_request( ssl ) );\n}\n#endif\n#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */\n\n/*\n * Fill the input message buffer by appending data to it.\n * The amount of data already fetched is in ssl->in_left.\n *\n * If we return 0, is it guaranteed that (at least) nb_want bytes are\n * available (from this read and/or a previous one). Otherwise, an error code\n * is returned (possibly EOF or WANT_READ).\n *\n * With stream transport (TLS) on success ssl->in_left == nb_want, but\n * with datagram transport (DTLS) on success ssl->in_left >= nb_want,\n * since we always read a whole datagram at once.\n *\n * For DTLS, it is up to the caller to set ssl->next_record_offset when\n * they're done reading a record.\n */\nint mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )\n{\n    int ret;\n    size_t len;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> fetch input\" ) );\n\n    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"Bad usage of mbedtls_ssl_set_bio() \"\n                            \"or mbedtls_ssl_set_bio()\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"requesting more data than fits\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        uint32_t timeout;\n\n        /* Just to be sure */\n        if( ssl->f_set_timer == NULL || ssl->f_get_timer == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"You must use \"\n                        \"mbedtls_ssl_set_timer_cb() for DTLS\" ) );\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n        }\n\n        /*\n         * The point is, we need to always read a full datagram at once, so we\n         * sometimes read more then requested, and handle the additional data.\n         * It could be the rest of the current record (while fetching the\n         * header) and/or some other records in the same datagram.\n         */\n\n        /*\n         * Move to the next record in the already read datagram if applicable\n         */\n        if( ssl->next_record_offset != 0 )\n        {\n            if( ssl->in_left < ssl->next_record_offset )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n            }\n\n            ssl->in_left -= ssl->next_record_offset;\n\n            if( ssl->in_left != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 2, ( \"next record in same datagram, offset: %d\",\n                                    ssl->next_record_offset ) );\n                memmove( ssl->in_hdr,\n                         ssl->in_hdr + ssl->next_record_offset,\n                         ssl->in_left );\n            }\n\n            ssl->next_record_offset = 0;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"in_left: %d, nb_want: %d\",\n                       ssl->in_left, nb_want ) );\n\n        /*\n         * Done if we already have enough data.\n         */\n        if( nb_want <= ssl->in_left)\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= fetch input\" ) );\n            return( 0 );\n        }\n\n        /*\n         * A record can't be split accross datagrams. If we need to read but\n         * are not at the beginning of a new record, the caller did something\n         * wrong.\n         */\n        if( ssl->in_left != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        /*\n         * Don't even try to read if time's out already.\n         * This avoids by-passing the timer when repeatedly receiving messages\n         * that will end up being dropped.\n         */\n        if( ssl_check_timer( ssl ) != 0 )\n            ret = MBEDTLS_ERR_SSL_TIMEOUT;\n        else\n        {\n            len = MBEDTLS_SSL_BUFFER_LEN - ( ssl->in_hdr - ssl->in_buf );\n\n            if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )\n                timeout = ssl->handshake->retransmit_timeout;\n            else\n                timeout = ssl->conf->read_timeout;\n\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"f_recv_timeout: %u ms\", timeout ) );\n\n            if( ssl->f_recv_timeout != NULL )\n                ret = ssl->f_recv_timeout( ssl->p_bio, ssl->in_hdr, len,\n                                                                    timeout );\n            else\n                ret = ssl->f_recv( ssl->p_bio, ssl->in_hdr, len );\n\n            MBEDTLS_SSL_DEBUG_RET( 2, \"ssl->f_recv(_timeout)\", ret );\n\n            if( ret == 0 )\n                return( MBEDTLS_ERR_SSL_CONN_EOF );\n        }\n\n        if( ret == MBEDTLS_ERR_SSL_TIMEOUT )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"timeout\" ) );\n            ssl_set_timer( ssl, 0 );\n\n            if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )\n            {\n                if( ssl_double_retransmit_timeout( ssl ) != 0 )\n                {\n                    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"handshake timeout\" ) );\n                    return( MBEDTLS_ERR_SSL_TIMEOUT );\n                }\n\n                if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )\n                {\n                    MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_resend\", ret );\n                    return( ret );\n                }\n\n                return( MBEDTLS_ERR_SSL_WANT_READ );\n            }\n#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)\n            else if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&\n                     ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )\n            {\n                if( ( ret = ssl_resend_hello_request( ssl ) ) != 0 )\n                {\n                    MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_resend_hello_request\", ret );\n                    return( ret );\n                }\n\n                return( MBEDTLS_ERR_SSL_WANT_READ );\n            }\n#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */\n        }\n\n        if( ret < 0 )\n            return( ret );\n\n        ssl->in_left = ret;\n    }\n    else\n#endif\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"in_left: %d, nb_want: %d\",\n                       ssl->in_left, nb_want ) );\n\n        while( ssl->in_left < nb_want )\n        {\n            len = nb_want - ssl->in_left;\n\n            if( ssl_check_timer( ssl ) != 0 )\n                ret = MBEDTLS_ERR_SSL_TIMEOUT;\n            else\n            {\n                if( ssl->f_recv_timeout != NULL )\n                {\n                    ret = ssl->f_recv_timeout( ssl->p_bio,\n                                               ssl->in_hdr + ssl->in_left, len,\n                                               ssl->conf->read_timeout );\n                }\n                else\n                {\n                    ret = ssl->f_recv( ssl->p_bio,\n                                       ssl->in_hdr + ssl->in_left, len );\n                }\n            }\n\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"in_left: %d, nb_want: %d\",\n                                        ssl->in_left, nb_want ) );\n            MBEDTLS_SSL_DEBUG_RET( 2, \"ssl->f_recv(_timeout)\", ret );\n\n            if( ret == 0 )\n                return( MBEDTLS_ERR_SSL_CONN_EOF );\n\n            if( ret < 0 )\n                return( ret );\n\n            ssl->in_left += ret;\n        }\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= fetch input\" ) );\n\n    return( 0 );\n}\n\n/*\n * Flush any data not yet written\n */\nint mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned char *buf, i;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> flush output\" ) );\n\n    if( ssl->f_send == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"Bad usage of mbedtls_ssl_set_bio() \"\n                            \"or mbedtls_ssl_set_bio()\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    /* Avoid incrementing counter if data is flushed */\n    if( ssl->out_left == 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= flush output\" ) );\n        return( 0 );\n    }\n\n    while( ssl->out_left > 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"message length: %d, out_left: %d\",\n                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );\n\n        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +\n              ssl->out_msglen - ssl->out_left;\n        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );\n\n        MBEDTLS_SSL_DEBUG_RET( 2, \"ssl->f_send\", ret );\n\n        if( ret <= 0 )\n            return( ret );\n\n        ssl->out_left -= ret;\n    }\n\n    for( i = 8; i > ssl_ep_len( ssl ); i-- )\n        if( ++ssl->out_ctr[i - 1] != 0 )\n            break;\n\n    /* The loop goes to its end iff the counter is wrapping */\n    if( i == ssl_ep_len( ssl ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"outgoing message counter would wrap\" ) );\n        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= flush output\" ) );\n\n    return( 0 );\n}\n\n/*\n * Functions to handle the DTLS retransmission state machine\n */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n/*\n * Append current handshake message to current outgoing flight\n */\nstatic int ssl_flight_append( mbedtls_ssl_context *ssl )\n{\n    mbedtls_ssl_flight_item *msg;\n\n    /* Allocate space for current message */\n    if( ( msg = mbedtls_calloc( 1, sizeof(  mbedtls_ssl_flight_item ) ) ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc %d bytes failed\",\n                            sizeof( mbedtls_ssl_flight_item ) ) );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    if( ( msg->p = mbedtls_calloc( 1, ssl->out_msglen ) ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc %d bytes failed\", ssl->out_msglen ) );\n        mbedtls_free( msg );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    /* Copy current handshake message with headers */\n    memcpy( msg->p, ssl->out_msg, ssl->out_msglen );\n    msg->len = ssl->out_msglen;\n    msg->type = ssl->out_msgtype;\n    msg->next = NULL;\n\n    /* Append to the current flight */\n    if( ssl->handshake->flight == NULL )\n        ssl->handshake->flight = msg;\n    else\n    {\n        mbedtls_ssl_flight_item *cur = ssl->handshake->flight;\n        while( cur->next != NULL )\n            cur = cur->next;\n        cur->next = msg;\n    }\n\n    return( 0 );\n}\n\n/*\n * Free the current flight of handshake messages\n */\nstatic void ssl_flight_free( mbedtls_ssl_flight_item *flight )\n{\n    mbedtls_ssl_flight_item *cur = flight;\n    mbedtls_ssl_flight_item *next;\n\n    while( cur != NULL )\n    {\n        next = cur->next;\n\n        mbedtls_free( cur->p );\n        mbedtls_free( cur );\n\n        cur = next;\n    }\n}\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\nstatic void ssl_dtls_replay_reset( mbedtls_ssl_context *ssl );\n#endif\n\n/*\n * Swap transform_out and out_ctr with the alternative ones\n */\nstatic void ssl_swap_epochs( mbedtls_ssl_context *ssl )\n{\n    mbedtls_ssl_transform *tmp_transform;\n    unsigned char tmp_out_ctr[8];\n\n    if( ssl->transform_out == ssl->handshake->alt_transform_out )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"skip swap epochs\" ) );\n        return;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"swap epochs\" ) );\n\n    /* Swap transforms */\n    tmp_transform                     = ssl->transform_out;\n    ssl->transform_out                = ssl->handshake->alt_transform_out;\n    ssl->handshake->alt_transform_out = tmp_transform;\n\n    /* Swap epoch + sequence_number */\n    memcpy( tmp_out_ctr,                 ssl->out_ctr,                8 );\n    memcpy( ssl->out_ctr,                ssl->handshake->alt_out_ctr, 8 );\n    memcpy( ssl->handshake->alt_out_ctr, tmp_out_ctr,                 8 );\n\n    /* Adjust to the newly activated transform */\n    if( ssl->transform_out != NULL &&\n        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )\n    {\n        ssl->out_msg = ssl->out_iv + ssl->transform_out->ivlen -\n                                     ssl->transform_out->fixed_ivlen;\n    }\n    else\n        ssl->out_msg = ssl->out_iv;\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\n    if( mbedtls_ssl_hw_record_activate != NULL )\n    {\n        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_OUTBOUND ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_hw_record_activate\", ret );\n            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );\n        }\n    }\n#endif\n}\n\n/*\n * Retransmit the current flight of messages.\n *\n * Need to remember the current message in case flush_output returns\n * WANT_WRITE, causing us to exit this function and come back later.\n * This function must be called until state is no longer SENDING.\n */\nint mbedtls_ssl_resend( mbedtls_ssl_context *ssl )\n{\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> mbedtls_ssl_resend\" ) );\n\n    if( ssl->handshake->retransmit_state != MBEDTLS_SSL_RETRANS_SENDING )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"initialise resending\" ) );\n\n        ssl->handshake->cur_msg = ssl->handshake->flight;\n        ssl_swap_epochs( ssl );\n\n        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_SENDING;\n    }\n\n    while( ssl->handshake->cur_msg != NULL )\n    {\n        int ret;\n        mbedtls_ssl_flight_item *cur = ssl->handshake->cur_msg;\n\n        /* Swap epochs before sending Finished: we can't do it after\n         * sending ChangeCipherSpec, in case write returns WANT_READ.\n         * Must be done before copying, may change out_msg pointer */\n        if( cur->type == MBEDTLS_SSL_MSG_HANDSHAKE &&\n            cur->p[0] == MBEDTLS_SSL_HS_FINISHED )\n        {\n            ssl_swap_epochs( ssl );\n        }\n\n        memcpy( ssl->out_msg, cur->p, cur->len );\n        ssl->out_msglen = cur->len;\n        ssl->out_msgtype = cur->type;\n\n        ssl->handshake->cur_msg = cur->next;\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"resent handshake message header\", ssl->out_msg, 12 );\n\n        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n            return( ret );\n        }\n    }\n\n    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )\n        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;\n    else\n    {\n        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;\n        ssl_set_timer( ssl, ssl->handshake->retransmit_timeout );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= mbedtls_ssl_resend\" ) );\n\n    return( 0 );\n}\n\n/*\n * To be called when the last message of an incoming flight is received.\n */\nvoid mbedtls_ssl_recv_flight_completed( mbedtls_ssl_context *ssl )\n{\n    /* We won't need to resend that one any more */\n    ssl_flight_free( ssl->handshake->flight );\n    ssl->handshake->flight = NULL;\n    ssl->handshake->cur_msg = NULL;\n\n    /* The next incoming flight will start with this msg_seq */\n    ssl->handshake->in_flight_start_seq = ssl->handshake->in_msg_seq;\n\n    /* Cancel timer */\n    ssl_set_timer( ssl, 0 );\n\n    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&\n        ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )\n    {\n        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;\n    }\n    else\n        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_PREPARING;\n}\n\n/*\n * To be called when the last message of an outgoing flight is send.\n */\nvoid mbedtls_ssl_send_flight_completed( mbedtls_ssl_context *ssl )\n{\n    ssl_reset_retransmit_timeout( ssl );\n    ssl_set_timer( ssl, ssl->handshake->retransmit_timeout );\n\n    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&\n        ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )\n    {\n        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;\n    }\n    else\n        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;\n}\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n/*\n * Record layer functions\n */\n\n/*\n * Write current record.\n * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.\n */\nint mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )\n{\n    int ret, done = 0, out_msg_type;\n    size_t len = ssl->out_msglen;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write record\" ) );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake != NULL &&\n        ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )\n    {\n        ; /* Skip special handshake treatment when resending */\n    }\n    else\n#endif\n    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        out_msg_type = ssl->out_msg[0];\n\n        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&\n            ssl->handshake == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );\n        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );\n        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );\n\n        /*\n         * DTLS has additional fields in the Handshake layer,\n         * between the length field and the actual payload:\n         *      uint16 message_seq;\n         *      uint24 fragment_offset;\n         *      uint24 fragment_length;\n         */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        {\n            /* Make room for the additional DTLS fields */\n            if( MBEDTLS_SSL_MAX_CONTENT_LEN - ssl->out_msglen < 8 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"DTLS handshake message too large: \"\n                              \"size %u, maximum %u\",\n                               (unsigned) ( ssl->in_hslen - 4 ),\n                               (unsigned) ( MBEDTLS_SSL_MAX_CONTENT_LEN - 12 ) ) );\n                return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n            }\n\n            memmove( ssl->out_msg + 12, ssl->out_msg + 4, len - 4 );\n            ssl->out_msglen += 8;\n            len += 8;\n\n            /* Write message_seq and update it, except for HelloRequest */\n            if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )\n            {\n                ssl->out_msg[4] = ( ssl->handshake->out_msg_seq >> 8 ) & 0xFF;\n                ssl->out_msg[5] = ( ssl->handshake->out_msg_seq      ) & 0xFF;\n                ++( ssl->handshake->out_msg_seq );\n            }\n            else\n            {\n                ssl->out_msg[4] = 0;\n                ssl->out_msg[5] = 0;\n            }\n\n            /* We don't fragment, so frag_offset = 0 and frag_len = len */\n            memset( ssl->out_msg + 6, 0x00, 3 );\n            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );\n        }\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )\n            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );\n    }\n\n    /* Save handshake and CCS messages for resending */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake != NULL &&\n        ssl->handshake->retransmit_state != MBEDTLS_SSL_RETRANS_SENDING &&\n        ( ssl->out_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC ||\n          ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE ) )\n    {\n        if( ( ret = ssl_flight_append( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_flight_append\", ret );\n            return( ret );\n        }\n    }\n#endif\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    if( ssl->transform_out != NULL &&\n        ssl->session_out->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )\n    {\n        if( ( ret = ssl_compress_buf( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_compress_buf\", ret );\n            return( ret );\n        }\n\n        len = ssl->out_msglen;\n    }\n#endif /*MBEDTLS_ZLIB_SUPPORT */\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\n    if( mbedtls_ssl_hw_record_write != NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"going for mbedtls_ssl_hw_record_write()\" ) );\n\n        ret = mbedtls_ssl_hw_record_write( ssl );\n        if( ret != 0 && ret != MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_hw_record_write\", ret );\n            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );\n        }\n\n        if( ret == 0 )\n            done = 1;\n    }\n#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */\n    if( !done )\n    {\n        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;\n        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,\n                           ssl->conf->transport, ssl->out_hdr + 1 );\n\n        ssl->out_len[0] = (unsigned char)( len >> 8 );\n        ssl->out_len[1] = (unsigned char)( len      );\n\n        if( ssl->transform_out != NULL )\n        {\n            if( ( ret = ssl_encrypt_buf( ssl ) ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_encrypt_buf\", ret );\n                return( ret );\n            }\n\n            len = ssl->out_msglen;\n            ssl->out_len[0] = (unsigned char)( len >> 8 );\n            ssl->out_len[1] = (unsigned char)( len      );\n        }\n\n        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;\n\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"output record: msgtype = %d, \"\n                            \"version = [%d:%d], msglen = %d\",\n                       ssl->out_hdr[0], ssl->out_hdr[1], ssl->out_hdr[2],\n                     ( ssl->out_len[0] << 8 ) | ssl->out_len[1] ) );\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"output record sent to network\",\n                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );\n    }\n\n    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_flush_output\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write record\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n/*\n * Mark bits in bitmask (used for DTLS HS reassembly)\n */\nstatic void ssl_bitmask_set( unsigned char *mask, size_t offset, size_t len )\n{\n    unsigned int start_bits, end_bits;\n\n    start_bits = 8 - ( offset % 8 );\n    if( start_bits != 8 )\n    {\n        size_t first_byte_idx = offset / 8;\n\n        /* Special case */\n        if( len <= start_bits )\n        {\n            for( ; len != 0; len-- )\n                mask[first_byte_idx] |= 1 << ( start_bits - len );\n\n            /* Avoid potential issues with offset or len becoming invalid */\n            return;\n        }\n\n        offset += start_bits; /* Now offset % 8 == 0 */\n        len -= start_bits;\n\n        for( ; start_bits != 0; start_bits-- )\n            mask[first_byte_idx] |= 1 << ( start_bits - 1 );\n    }\n\n    end_bits = len % 8;\n    if( end_bits != 0 )\n    {\n        size_t last_byte_idx = ( offset + len ) / 8;\n\n        len -= end_bits; /* Now len % 8 == 0 */\n\n        for( ; end_bits != 0; end_bits-- )\n            mask[last_byte_idx] |= 1 << ( 8 - end_bits );\n    }\n\n    memset( mask + offset / 8, 0xFF, len / 8 );\n}\n\n/*\n * Check that bitmask is full\n */\nstatic int ssl_bitmask_check( unsigned char *mask, size_t len )\n{\n    size_t i;\n\n    for( i = 0; i < len / 8; i++ )\n        if( mask[i] != 0xFF )\n            return( -1 );\n\n    for( i = 0; i < len % 8; i++ )\n        if( ( mask[len / 8] & ( 1 << ( 7 - i ) ) ) == 0 )\n            return( -1 );\n\n    return( 0 );\n}\n\n/*\n * Reassemble fragmented DTLS handshake messages.\n *\n * Use a temporary buffer for reassembly, divided in two parts:\n * - the first holds the reassembled message (including handshake header),\n * - the second holds a bitmask indicating which parts of the message\n *   (excluding headers) have been received so far.\n */\nstatic int ssl_reassemble_dtls_handshake( mbedtls_ssl_context *ssl )\n{\n    unsigned char *msg, *bitmask;\n    size_t frag_len, frag_off;\n    size_t msg_len = ssl->in_hslen - 12; /* Without headers */\n\n    if( ssl->handshake == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"not supported outside handshake (for now)\" ) );\n        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n    }\n\n    /*\n     * For first fragment, check size and allocate buffer\n     */\n    if( ssl->handshake->hs_msg == NULL )\n    {\n        size_t alloc_len;\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"initialize reassembly, total length = %d\",\n                            msg_len ) );\n\n        if( ssl->in_hslen > MBEDTLS_SSL_MAX_CONTENT_LEN )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"handshake message too large\" ) );\n            return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n        }\n\n        /* The bitmask needs one bit per byte of message excluding header */\n        alloc_len = 12 + msg_len + msg_len / 8 + ( msg_len % 8 != 0 );\n\n        ssl->handshake->hs_msg = mbedtls_calloc( 1, alloc_len );\n        if( ssl->handshake->hs_msg == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc failed (%d bytes)\", alloc_len ) );\n            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n        }\n\n        /* Prepare final header: copy msg_type, length and message_seq,\n         * then add standardised fragment_offset and fragment_length */\n        memcpy( ssl->handshake->hs_msg, ssl->in_msg, 6 );\n        memset( ssl->handshake->hs_msg + 6, 0, 3 );\n        memcpy( ssl->handshake->hs_msg + 9,\n                ssl->handshake->hs_msg + 1, 3 );\n    }\n    else\n    {\n        /* Make sure msg_type and length are consistent */\n        if( memcmp( ssl->handshake->hs_msg, ssl->in_msg, 4 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"fragment header mismatch\" ) );\n            return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n        }\n    }\n\n    msg = ssl->handshake->hs_msg + 12;\n    bitmask = msg + msg_len;\n\n    /*\n     * Check and copy current fragment\n     */\n    frag_off = ( ssl->in_msg[6]  << 16 ) |\n               ( ssl->in_msg[7]  << 8  ) |\n                 ssl->in_msg[8];\n    frag_len = ( ssl->in_msg[9]  << 16 ) |\n               ( ssl->in_msg[10] << 8  ) |\n                 ssl->in_msg[11];\n\n    if( frag_off + frag_len > msg_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"invalid fragment offset/len: %d + %d > %d\",\n                          frag_off, frag_len, msg_len ) );\n        return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n    }\n\n    if( frag_len + 12 > ssl->in_msglen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"invalid fragment length: %d + 12 > %d\",\n                          frag_len, ssl->in_msglen ) );\n        return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"adding fragment, offset = %d, length = %d\",\n                        frag_off, frag_len ) );\n\n    memcpy( msg + frag_off, ssl->in_msg + 12, frag_len );\n    ssl_bitmask_set( bitmask, frag_off, frag_len );\n\n    /*\n     * Do we have the complete message by now?\n     * If yes, finalize it, else ask to read the next record.\n     */\n    if( ssl_bitmask_check( bitmask, msg_len ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"message is not complete yet\" ) );\n        return( MBEDTLS_ERR_SSL_WANT_READ );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"handshake message completed\" ) );\n\n    if( frag_len + 12 < ssl->in_msglen )\n    {\n        /*\n         * We'got more handshake messages in the same record.\n         * This case is not handled now because no know implementation does\n         * that and it's hard to test, so we prefer to fail cleanly for now.\n         */\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"last fragment not alone in its record\" ) );\n        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n    }\n\n    if( ssl->in_left > ssl->next_record_offset )\n    {\n        /*\n         * We've got more data in the buffer after the current record,\n         * that we don't want to overwrite. Move it before writing the\n         * reassembled message, and adjust in_left and next_record_offset.\n         */\n        unsigned char *cur_remain = ssl->in_hdr + ssl->next_record_offset;\n        unsigned char *new_remain = ssl->in_msg + ssl->in_hslen;\n        size_t remain_len = ssl->in_left - ssl->next_record_offset;\n\n        /* First compute and check new lengths */\n        ssl->next_record_offset = new_remain - ssl->in_hdr;\n        ssl->in_left = ssl->next_record_offset + remain_len;\n\n        if( ssl->in_left > MBEDTLS_SSL_BUFFER_LEN -\n                           (size_t)( ssl->in_hdr - ssl->in_buf ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"reassembled message too large for buffer\" ) );\n            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );\n        }\n\n        memmove( new_remain, cur_remain, remain_len );\n    }\n\n    memcpy( ssl->in_msg, ssl->handshake->hs_msg, ssl->in_hslen );\n\n    mbedtls_free( ssl->handshake->hs_msg );\n    ssl->handshake->hs_msg = NULL;\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"reassembled handshake message\",\n                   ssl->in_msg, ssl->in_hslen );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\nint mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )\n{\n    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"handshake message too short: %d\",\n                            ssl->in_msglen ) );\n        return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n    }\n\n    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (\n                    ( ssl->in_msg[1] << 16 ) |\n                    ( ssl->in_msg[2] << 8  ) |\n                      ssl->in_msg[3] );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"handshake message: msglen =\"\n                        \" %d, type = %d, hslen = %d\",\n                        ssl->in_msglen, ssl->in_msg[0], ssl->in_hslen ) );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        int ret;\n        unsigned int recv_msg_seq = ( ssl->in_msg[4] << 8 ) | ssl->in_msg[5];\n\n        /* ssl->handshake is NULL when receiving ClientHello for renego */\n        if( ssl->handshake != NULL &&\n            recv_msg_seq != ssl->handshake->in_msg_seq )\n        {\n            /* Retransmit only on last message from previous flight, to avoid\n             * too many retransmissions.\n             * Besides, No sane server ever retransmits HelloVerifyRequest */\n            if( recv_msg_seq == ssl->handshake->in_flight_start_seq - 1 &&\n                ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 2, ( \"received message from last flight, \"\n                                    \"message_seq = %d, start_of_flight = %d\",\n                                    recv_msg_seq,\n                                    ssl->handshake->in_flight_start_seq ) );\n\n                if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )\n                {\n                    MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_resend\", ret );\n                    return( ret );\n                }\n            }\n            else\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 2, ( \"dropping out-of-sequence message: \"\n                                    \"message_seq = %d, expected = %d\",\n                                    recv_msg_seq,\n                                    ssl->handshake->in_msg_seq ) );\n            }\n\n            return( MBEDTLS_ERR_SSL_WANT_READ );\n        }\n        /* Wait until message completion to increment in_msg_seq */\n\n        /* Reassemble if current message is fragmented or reassembly is\n         * already in progress */\n        if( ssl->in_msglen < ssl->in_hslen ||\n            memcmp( ssl->in_msg + 6, \"\\0\\0\\0\",        3 ) != 0 ||\n            memcmp( ssl->in_msg + 9, ssl->in_msg + 1, 3 ) != 0 ||\n            ( ssl->handshake != NULL && ssl->handshake->hs_msg != NULL ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"found fragmented DTLS handshake message\" ) );\n\n            if( ( ret = ssl_reassemble_dtls_handshake( ssl ) ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_reassemble_dtls_handshake\", ret );\n                return( ret );\n            }\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n    /* With TLS we don't handle fragmentation (for now) */\n    if( ssl->in_msglen < ssl->in_hslen )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"TLS handshake fragmentation not supported\" ) );\n        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n    }\n\n    return( 0 );\n}\n\nvoid mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )\n{\n\n    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&\n        ssl->handshake != NULL )\n    {\n        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );\n    }\n\n    /* Handshake message is complete, increment counter */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake != NULL )\n    {\n        ssl->handshake->in_msg_seq++;\n    }\n#endif\n}\n\n/*\n * DTLS anti-replay: RFC 6347 4.1.2.6\n *\n * in_window is a field of bits numbered from 0 (lsb) to 63 (msb).\n * Bit n is set iff record number in_window_top - n has been seen.\n *\n * Usually, in_window_top is the last record number seen and the lsb of\n * in_window is set. The only exception is the initial state (record number 0\n * not seen yet).\n */\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\nstatic void ssl_dtls_replay_reset( mbedtls_ssl_context *ssl )\n{\n    ssl->in_window_top = 0;\n    ssl->in_window = 0;\n}\n\nstatic inline uint64_t ssl_load_six_bytes( unsigned char *buf )\n{\n    return( ( (uint64_t) buf[0] << 40 ) |\n            ( (uint64_t) buf[1] << 32 ) |\n            ( (uint64_t) buf[2] << 24 ) |\n            ( (uint64_t) buf[3] << 16 ) |\n            ( (uint64_t) buf[4] <<  8 ) |\n            ( (uint64_t) buf[5]       ) );\n}\n\n/*\n * Return 0 if sequence number is acceptable, -1 otherwise\n */\nint mbedtls_ssl_dtls_replay_check( mbedtls_ssl_context *ssl )\n{\n    uint64_t rec_seqnum = ssl_load_six_bytes( ssl->in_ctr + 2 );\n    uint64_t bit;\n\n    if( ssl->conf->anti_replay == MBEDTLS_SSL_ANTI_REPLAY_DISABLED )\n        return( 0 );\n\n    if( rec_seqnum > ssl->in_window_top )\n        return( 0 );\n\n    bit = ssl->in_window_top - rec_seqnum;\n\n    if( bit >= 64 )\n        return( -1 );\n\n    if( ( ssl->in_window & ( (uint64_t) 1 << bit ) ) != 0 )\n        return( -1 );\n\n    return( 0 );\n}\n\n/*\n * Update replay window on new validated record\n */\nvoid mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl )\n{\n    uint64_t rec_seqnum = ssl_load_six_bytes( ssl->in_ctr + 2 );\n\n    if( ssl->conf->anti_replay == MBEDTLS_SSL_ANTI_REPLAY_DISABLED )\n        return;\n\n    if( rec_seqnum > ssl->in_window_top )\n    {\n        /* Update window_top and the contents of the window */\n        uint64_t shift = rec_seqnum - ssl->in_window_top;\n\n        if( shift >= 64 )\n            ssl->in_window = 1;\n        else\n        {\n            ssl->in_window <<= shift;\n            ssl->in_window |= 1;\n        }\n\n        ssl->in_window_top = rec_seqnum;\n    }\n    else\n    {\n        /* Mark that number as seen in the current window */\n        uint64_t bit = ssl->in_window_top - rec_seqnum;\n\n        if( bit < 64 ) /* Always true, but be extra sure */\n            ssl->in_window |= (uint64_t) 1 << bit;\n    }\n}\n#endif /* MBEDTLS_SSL_DTLS_ANTI_REPLAY */\n\n#if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)\n/* Forward declaration */\nstatic int ssl_session_reset_int( mbedtls_ssl_context *ssl, int partial );\n\n/*\n * Without any SSL context, check if a datagram looks like a ClientHello with\n * a valid cookie, and if it doesn't, generate a HelloVerifyRequest message.\n * Both input and output include full DTLS headers.\n *\n * - if cookie is valid, return 0\n * - if ClientHello looks superficially valid but cookie is not,\n *   fill obuf and set olen, then\n *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED\n * - otherwise return a specific error code\n */\nstatic int ssl_check_dtls_clihlo_cookie(\n                           mbedtls_ssl_cookie_write_t *f_cookie_write,\n                           mbedtls_ssl_cookie_check_t *f_cookie_check,\n                           void *p_cookie,\n                           const unsigned char *cli_id, size_t cli_id_len,\n                           const unsigned char *in, size_t in_len,\n                           unsigned char *obuf, size_t buf_len, size_t *olen )\n{\n    size_t sid_len, cookie_len;\n    unsigned char *p;\n\n    if( f_cookie_write == NULL || f_cookie_check == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    /*\n     * Structure of ClientHello with record and handshake headers,\n     * and expected values. We don't need to check a lot, more checks will be\n     * done when actually parsing the ClientHello - skipping those checks\n     * avoids code duplication and does not make cookie forging any easier.\n     *\n     *  0-0  ContentType type;                  copied, must be handshake\n     *  1-2  ProtocolVersion version;           copied\n     *  3-4  uint16 epoch;                      copied, must be 0\n     *  5-10 uint48 sequence_number;            copied\n     * 11-12 uint16 length;                     (ignored)\n     *\n     * 13-13 HandshakeType msg_type;            (ignored)\n     * 14-16 uint24 length;                     (ignored)\n     * 17-18 uint16 message_seq;                copied\n     * 19-21 uint24 fragment_offset;            copied, must be 0\n     * 22-24 uint24 fragment_length;            (ignored)\n     *\n     * 25-26 ProtocolVersion client_version;    (ignored)\n     * 27-58 Random random;                     (ignored)\n     * 59-xx SessionID session_id;              1 byte len + sid_len content\n     * 60+   opaque cookie<0..2^8-1>;           1 byte len + content\n     *       ...\n     *\n     * Minimum length is 61 bytes.\n     */\n    if( in_len < 61 ||\n        in[0] != MBEDTLS_SSL_MSG_HANDSHAKE ||\n        in[3] != 0 || in[4] != 0 ||\n        in[19] != 0 || in[20] != 0 || in[21] != 0 )\n    {\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    sid_len = in[59];\n    if( sid_len > in_len - 61 )\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n\n    cookie_len = in[60 + sid_len];\n    if( cookie_len > in_len - 60 )\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n\n    if( f_cookie_check( p_cookie, in + sid_len + 61, cookie_len,\n                        cli_id, cli_id_len ) == 0 )\n    {\n        /* Valid cookie */\n        return( 0 );\n    }\n\n    /*\n     * If we get here, we've got an invalid cookie, let's prepare HVR.\n     *\n     *  0-0  ContentType type;                  copied\n     *  1-2  ProtocolVersion version;           copied\n     *  3-4  uint16 epoch;                      copied\n     *  5-10 uint48 sequence_number;            copied\n     * 11-12 uint16 length;                     olen - 13\n     *\n     * 13-13 HandshakeType msg_type;            hello_verify_request\n     * 14-16 uint24 length;                     olen - 25\n     * 17-18 uint16 message_seq;                copied\n     * 19-21 uint24 fragment_offset;            copied\n     * 22-24 uint24 fragment_length;            olen - 25\n     *\n     * 25-26 ProtocolVersion server_version;    0xfe 0xff\n     * 27-27 opaque cookie<0..2^8-1>;           cookie_len = olen - 27, cookie\n     *\n     * Minimum length is 28.\n     */\n    if( buf_len < 28 )\n        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );\n\n    /* Copy most fields and adapt others */\n    memcpy( obuf, in, 25 );\n    obuf[13] = MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST;\n    obuf[25] = 0xfe;\n    obuf[26] = 0xff;\n\n    /* Generate and write actual cookie */\n    p = obuf + 28;\n    if( f_cookie_write( p_cookie,\n                        &p, obuf + buf_len, cli_id, cli_id_len ) != 0 )\n    {\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    *olen = p - obuf;\n\n    /* Go back and fill length fields */\n    obuf[27] = (unsigned char)( *olen - 28 );\n\n    obuf[14] = obuf[22] = (unsigned char)( ( *olen - 25 ) >> 16 );\n    obuf[15] = obuf[23] = (unsigned char)( ( *olen - 25 ) >>  8 );\n    obuf[16] = obuf[24] = (unsigned char)( ( *olen - 25 )       );\n\n    obuf[11] = (unsigned char)( ( *olen - 13 ) >>  8 );\n    obuf[12] = (unsigned char)( ( *olen - 13 )       );\n\n    return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );\n}\n\n/*\n * Handle possible client reconnect with the same UDP quadruplet\n * (RFC 6347 Section 4.2.8).\n *\n * Called by ssl_parse_record_header() in case we receive an epoch 0 record\n * that looks like a ClientHello.\n *\n * - if the input looks like a ClientHello without cookies,\n *   send back HelloVerifyRequest, then\n *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED\n * - if the input looks like a ClientHello with a valid cookie,\n *   reset the session of the current context, and\n *   return MBEDTLS_ERR_SSL_CLIENT_RECONNECT\n * - if anything goes wrong, return a specific error code\n *\n * mbedtls_ssl_read_record() will ignore the record if anything else than\n * MBEDTLS_ERR_SSL_CLIENT_RECONNECT or 0 is returned, although this function\n * cannot not return 0.\n */\nstatic int ssl_handle_possible_reconnect( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    size_t len;\n\n    ret = ssl_check_dtls_clihlo_cookie(\n            ssl->conf->f_cookie_write,\n            ssl->conf->f_cookie_check,\n            ssl->conf->p_cookie,\n            ssl->cli_id, ssl->cli_id_len,\n            ssl->in_buf, ssl->in_left,\n            ssl->out_buf, MBEDTLS_SSL_MAX_CONTENT_LEN, &len );\n\n    MBEDTLS_SSL_DEBUG_RET( 2, \"ssl_check_dtls_clihlo_cookie\", ret );\n\n    if( ret == MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED )\n    {\n        /* Don't check write errors as we can't do anything here.\n         * If the error is permanent we'll catch it later,\n         * if it's not, then hopefully it'll work next time. */\n        (void) ssl->f_send( ssl->p_bio, ssl->out_buf, len );\n\n        return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );\n    }\n\n    if( ret == 0 )\n    {\n        /* Got a valid cookie, partially reset context */\n        if( ( ret = ssl_session_reset_int( ssl, 1 ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"reset\", ret );\n            return( ret );\n        }\n\n        return( MBEDTLS_ERR_SSL_CLIENT_RECONNECT );\n    }\n\n    return( ret );\n}\n#endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */\n\n/*\n * ContentType type;\n * ProtocolVersion version;\n * uint16 epoch;            // DTLS only\n * uint48 sequence_number;  // DTLS only\n * uint16 length;\n *\n * Return 0 if header looks sane (and, for DTLS, the record is expected)\n * MBEDTLS_ERR_SSL_INVALID_RECORD if the header looks bad,\n * MBEDTLS_ERR_SSL_UNEXPECTED_RECORD (DTLS only) if sane but unexpected.\n *\n * With DTLS, mbedtls_ssl_read_record() will:\n * 1. proceed with the record if this function returns 0\n * 2. drop only the current record if this function returns UNEXPECTED_RECORD\n * 3. return CLIENT_RECONNECT if this function return that value\n * 4. drop the whole datagram if this function returns anything else.\n * Point 2 is needed when the peer is resending, and we have already received\n * the first record from a datagram but are still waiting for the others.\n */\nstatic int ssl_parse_record_header( mbedtls_ssl_context *ssl )\n{\n    int major_ver, minor_ver;\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"input record header\", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );\n\n    ssl->in_msgtype =  ssl->in_hdr[0];\n    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];\n    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"input record: msgtype = %d, \"\n                        \"version = [%d:%d], msglen = %d\",\n                        ssl->in_msgtype,\n                        major_ver, minor_ver, ssl->in_msglen ) );\n\n    /* Check record type */\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&\n        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&\n        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&\n        ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"unknown record type\" ) );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        /* Silently ignore invalid DTLS records as recommended by RFC 6347\n         * Section 4.1.2.7 */\n        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n\n        return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n    }\n\n    /* Check version */\n    if( major_ver != ssl->major_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"major version mismatch\" ) );\n        return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n    }\n\n    if( minor_ver > ssl->conf->max_minor_ver )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"minor version mismatch\" ) );\n        return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n    }\n\n    /* Check length against the size of our buffer */\n    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN\n                         - (size_t)( ssl->in_msg - ssl->in_buf ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );\n        return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n    }\n\n    /* Check length against bounds of the current transform and version */\n    if( ssl->transform_in == NULL )\n    {\n        if( ssl->in_msglen < 1 ||\n            ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );\n            return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n        }\n    }\n    else\n    {\n        if( ssl->in_msglen < ssl->transform_in->minlen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );\n            return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n        }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 &&\n            ssl->in_msglen > ssl->transform_in->minlen + MBEDTLS_SSL_MAX_CONTENT_LEN )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );\n            return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n        }\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        /*\n         * TLS encrypted messages can have up to 256 bytes of padding\n         */\n        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&\n            ssl->in_msglen > ssl->transform_in->minlen +\n                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );\n            return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n        }\n#endif\n    }\n\n    /*\n     * DTLS-related tests done last, because most of them may result in\n     * silently dropping the record (but not the whole datagram), and we only\n     * want to consider that after ensuring that the \"basic\" fields (type,\n     * version, length) are sane.\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        unsigned int rec_epoch = ( ssl->in_ctr[0] << 8 ) | ssl->in_ctr[1];\n\n        /* Drop unexpected ChangeCipherSpec messages */\n        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&\n            ssl->state != MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC &&\n            ssl->state != MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"dropping unexpected ChangeCipherSpec\" ) );\n            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );\n        }\n\n        /* Drop unexpected ApplicationData records,\n         * except at the beginning of renegotiations */\n        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA &&\n            ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            && ! ( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&\n                   ssl->state == MBEDTLS_SSL_SERVER_HELLO )\n#endif\n            )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"dropping unexpected ApplicationData\" ) );\n            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );\n        }\n\n        /* Check epoch (and sequence number) with DTLS */\n        if( rec_epoch != ssl->in_epoch )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"record from another epoch: \"\n                                        \"expected %d, received %d\",\n                                        ssl->in_epoch, rec_epoch ) );\n\n#if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)\n            /*\n             * Check for an epoch 0 ClientHello. We can't use in_msg here to\n             * access the first byte of record content (handshake type), as we\n             * have an active transform (possibly iv_len != 0), so use the\n             * fact that the record header len is 13 instead.\n             */\n            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&\n                ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER &&\n                rec_epoch == 0 &&\n                ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&\n                ssl->in_left > 13 &&\n                ssl->in_buf[13] == MBEDTLS_SSL_HS_CLIENT_HELLO )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"possible client reconnect \"\n                                            \"from the same port\" ) );\n                return( ssl_handle_possible_reconnect( ssl ) );\n            }\n            else\n#endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */\n                return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );\n        }\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\n        /* Replay detection only works for the current epoch */\n        if( rec_epoch == ssl->in_epoch &&\n            mbedtls_ssl_dtls_replay_check( ssl ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"replayed record\" ) );\n            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );\n        }\n#endif\n    }\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n\n    return( 0 );\n}\n\n/*\n * If applicable, decrypt (and decompress) record content\n */\nstatic int ssl_prepare_record_content( mbedtls_ssl_context *ssl )\n{\n    int ret, done = 0;\n\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"input record from network\",\n                   ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen );\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\n    if( mbedtls_ssl_hw_record_read != NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"going for mbedtls_ssl_hw_record_read()\" ) );\n\n        ret = mbedtls_ssl_hw_record_read( ssl );\n        if( ret != 0 && ret != MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_hw_record_read\", ret );\n            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );\n        }\n\n        if( ret == 0 )\n            done = 1;\n    }\n#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */\n    if( !done && ssl->transform_in != NULL )\n    {\n        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_decrypt_buf\", ret );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 4, \"input payload after decrypt\",\n                       ssl->in_msg, ssl->in_msglen );\n\n        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );\n            return( MBEDTLS_ERR_SSL_INVALID_RECORD );\n        }\n    }\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    if( ssl->transform_in != NULL &&\n        ssl->session_in->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )\n    {\n        if( ( ret = ssl_decompress_buf( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_decompress_buf\", ret );\n            return( ret );\n        }\n    }\n#endif /* MBEDTLS_ZLIB_SUPPORT */\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        mbedtls_ssl_dtls_replay_update( ssl );\n    }\n#endif\n\n    return( 0 );\n}\n\nstatic void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl );\n\n/*\n * Read a record.\n *\n * Silently ignore non-fatal alert (and for DTLS, invalid records as well,\n * RFC 6347 4.1.2.7) and continue reading until a valid record is found.\n *\n */\nint mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> read record\" ) );\n\n    if( ssl->keep_current_message == 0 )\n    {\n        do {\n\n            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ssl_read_record_layer\" ), ret );\n                return( ret );\n            }\n\n            ret = mbedtls_ssl_handle_message_type( ssl );\n\n        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );\n\n        if( 0 != ret )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, ( \"mbedtls_ssl_read_record_layer\" ), ret );\n            return( ret );\n        }\n\n        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )\n        {\n            mbedtls_ssl_update_handshake_status( ssl );\n        }\n    }\n    else\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= reuse previously read message\" ) );\n        ssl->keep_current_message = 0;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= read record\" ) );\n\n    return( 0 );\n}\n\nint mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    /*\n     * Step A\n     *\n     * Consume last content-layer message and potentially\n     * update in_msglen which keeps track of the contents'\n     * consumption state.\n     *\n     * (1) Handshake messages:\n     *     Remove last handshake message, move content\n     *     and adapt in_msglen.\n     *\n     * (2) Alert messages:\n     *     Consume whole record content, in_msglen = 0.\n     *\n     *     NOTE: This needs to be fixed, since like for\n     *     handshake messages it is allowed to have\n     *     multiple alerts witin a single record.\n     *     Internal reference IOTSSL-1321.\n     *\n     * (3) Change cipher spec:\n     *     Consume whole record content, in_msglen = 0.\n     *\n     * (4) Application data:\n     *     Don't do anything - the record layer provides\n     *     the application data as a stream transport\n     *     and consumes through mbedtls_ssl_read only.\n     *\n     */\n\n    /* Case (1): Handshake messages */\n    if( ssl->in_hslen != 0 )\n    {\n        /* Hard assertion to be sure that no application data\n         * is in flight, as corrupting ssl->in_msglen during\n         * ssl->in_offt != NULL is fatal. */\n        if( ssl->in_offt != NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        /*\n         * Get next Handshake message in the current record\n         */\n\n        /* Notes:\n         * (1) in_hslen is *NOT* necessarily the size of the\n         *     current handshake content: If DTLS handshake\n         *     fragmentation is used, that's the fragment\n         *     size instead. Using the total handshake message\n         *     size here is FAULTY and should be changed at\n         *     some point. Internal reference IOTSSL-1414.\n         * (2) While it doesn't seem to cause problems, one\n         *     has to be very careful not to assume that in_hslen\n         *     is always <= in_msglen in a sensible communication.\n         *     Again, it's wrong for DTLS handshake fragmentation.\n         *     The following check is therefore mandatory, and\n         *     should not be treated as a silently corrected assertion.\n         *     Additionally, ssl->in_hslen might be arbitrarily out of\n         *     bounds after handling a DTLS message with an unexpected\n         *     sequence number, see mbedtls_ssl_prepare_handshake_record.\n         */\n        if( ssl->in_hslen < ssl->in_msglen )\n        {\n            ssl->in_msglen -= ssl->in_hslen;\n            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,\n                     ssl->in_msglen );\n\n            MBEDTLS_SSL_DEBUG_BUF( 4, \"remaining content in record\",\n                                   ssl->in_msg, ssl->in_msglen );\n        }\n        else\n        {\n            ssl->in_msglen = 0;\n        }\n\n        ssl->in_hslen   = 0;\n    }\n    /* Case (4): Application data */\n    else if( ssl->in_offt != NULL )\n    {\n        return( 0 );\n    }\n    /* Everything else (CCS & Alerts) */\n    else\n    {\n        ssl->in_msglen = 0;\n    }\n\n    /*\n     * Step B\n     *\n     * Fetch and decode new record if current one is fully consumed.\n     *\n     */\n\n    if( ssl->in_msglen > 0 )\n    {\n        /* There's something left to be processed in the current record. */\n        return( 0 );\n    }\n\n    /* Need to fetch a new record */\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\nread_record_header:\n#endif\n\n    /* Current record either fully processed or to be discarded. */\n\n    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_fetch_input\", ret );\n        return( ret );\n    }\n\n    if( ( ret = ssl_parse_record_header( ssl ) ) != 0 )\n    {\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n            ret != MBEDTLS_ERR_SSL_CLIENT_RECONNECT )\n        {\n            if( ret == MBEDTLS_ERR_SSL_UNEXPECTED_RECORD )\n            {\n                /* Skip unexpected record (but not whole datagram) */\n                ssl->next_record_offset = ssl->in_msglen\n                                        + mbedtls_ssl_hdr_len( ssl );\n\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"discarding unexpected record \"\n                                            \"(header)\" ) );\n            }\n            else\n            {\n                /* Skip invalid record and the rest of the datagram */\n                ssl->next_record_offset = 0;\n                ssl->in_left = 0;\n\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"discarding invalid record \"\n                                            \"(header)\" ) );\n            }\n\n            /* Get next record */\n            goto read_record_header;\n        }\n#endif\n        return( ret );\n    }\n\n    /*\n     * Read and optionally decrypt the message contents\n     */\n    if( ( ret = mbedtls_ssl_fetch_input( ssl,\n                                 mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_fetch_input\", ret );\n        return( ret );\n    }\n\n    /* Done reading this record, get ready for the next one */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );\n    else\n#endif\n        ssl->in_left = 0;\n\n    if( ( ret = ssl_prepare_record_content( ssl ) ) != 0 )\n    {\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        {\n            /* Silently discard invalid records */\n            if( ret == MBEDTLS_ERR_SSL_INVALID_RECORD ||\n                ret == MBEDTLS_ERR_SSL_INVALID_MAC )\n            {\n                /* Except when waiting for Finished as a bad mac here\n                 * probably means something went wrong in the handshake\n                 * (eg wrong psk used, mitm downgrade attempt, etc.) */\n                if( ssl->state == MBEDTLS_SSL_CLIENT_FINISHED ||\n                    ssl->state == MBEDTLS_SSL_SERVER_FINISHED )\n                {\n#if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)\n                    if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )\n                    {\n                        mbedtls_ssl_send_alert_message( ssl,\n                                MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );\n                    }\n#endif\n                    return( ret );\n                }\n\n#if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)\n                if( ssl->conf->badmac_limit != 0 &&\n                    ++ssl->badmac_seen >= ssl->conf->badmac_limit )\n                {\n                    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"too many records with bad MAC\" ) );\n                    return( MBEDTLS_ERR_SSL_INVALID_MAC );\n                }\n#endif\n\n                /* As above, invalid records cause\n                 * dismissal of the whole datagram. */\n\n                ssl->next_record_offset = 0;\n                ssl->in_left = 0;\n\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"discarding invalid record (mac)\" ) );\n                goto read_record_header;\n            }\n\n            return( ret );\n        }\n        else\n#endif\n        {\n            /* Error out (and send alert) on invalid records */\n#if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)\n            if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )\n            {\n                mbedtls_ssl_send_alert_message( ssl,\n                        MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                        MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );\n            }\n#endif\n            return( ret );\n        }\n    }\n\n    /*\n     * When we sent the last flight of the handshake, we MUST respond to a\n     * retransmit of the peer's previous flight with a retransmit. (In\n     * practice, only the Finished message will make it, other messages\n     * including CCS use the old transform so they're dropped as invalid.)\n     *\n     * If the record we received is not a handshake message, however, it\n     * means the peer received our last flight so we can clean up\n     * handshake info.\n     *\n     * This check needs to be done before prepare_handshake() due to an edge\n     * case: if the client immediately requests renegotiation, this\n     * finishes the current handshake first, avoiding the new ClientHello\n     * being mistaken for an ancient message in the current handshake.\n     */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake != NULL &&\n        ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )\n    {\n        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&\n                ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"received retransmit of last flight\" ) );\n\n            if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_resend\", ret );\n                return( ret );\n            }\n\n            return( MBEDTLS_ERR_SSL_WANT_READ );\n        }\n        else\n        {\n            ssl_handshake_wrapup_free_hs_transform( ssl );\n        }\n    }\n#endif\n\n    return( 0 );\n}\n\nint mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    /*\n     * Handle particular types of records\n     */\n    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )\n        {\n            return( ret );\n        }\n    }\n\n    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"got an alert message, type: [%d:%d]\",\n                       ssl->in_msg[0], ssl->in_msg[1] ) );\n\n        /*\n         * Ignore non-fatal alerts, except close_notify and no_renegotiation\n         */\n        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"is a fatal alert message (msg %d)\",\n                           ssl->in_msg[1] ) );\n            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );\n        }\n\n        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&\n            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"is a close notify message\" ) );\n            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );\n        }\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION_ENABLED)\n        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&\n            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"is a SSLv3 no_cert\" ) );\n            /* Will be handled when trying to parse ServerHello */\n            return( 0 );\n        }\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_SRV_C)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 &&\n            ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&\n            ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&\n            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_CERT )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"is a SSLv3 no_cert\" ) );\n            /* Will be handled in mbedtls_ssl_parse_certificate() */\n            return( 0 );\n        }\n#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */\n\n        /* Silently ignore: fetch new message */\n        return MBEDTLS_ERR_SSL_NON_FATAL;\n    }\n\n    return( 0 );\n}\n\nint mbedtls_ssl_send_fatal_handshake_failure( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    if( ( ret = mbedtls_ssl_send_alert_message( ssl,\n                    MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE ) ) != 0 )\n    {\n        return( ret );\n    }\n\n    return( 0 );\n}\n\nint mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,\n                            unsigned char level,\n                            unsigned char message )\n{\n    int ret;\n\n    if( ssl == NULL || ssl->conf == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> send alert message\" ) );\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"send alert level=%u message=%u\", level, message ));\n\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;\n    ssl->out_msglen = 2;\n    ssl->out_msg[0] = level;\n    ssl->out_msg[1] = message;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= send alert message\" ) );\n\n    return( 0 );\n}\n\n/*\n * Handshake functions\n */\n#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)         && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)     && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)     && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)   && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)    && \\\n    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n/* No certificate support -> dummy functions */\nint mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n\nint mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )\n{\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n}\n\n#else\n/* Some certificate support -> implement write and parse */\n\nint mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t i, n;\n    const mbedtls_x509_crt *crt;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write certificate\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_SSL_CLI_C)\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )\n    {\n        if( ssl->client_auth == 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip write certificate\" ) );\n            ssl->state++;\n            return( 0 );\n        }\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n        /*\n         * If using SSLv3 and got no cert, send an Alert message\n         * (otherwise an empty Certificate message will be sent).\n         */\n        if( mbedtls_ssl_own_cert( ssl )  == NULL &&\n            ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n        {\n            ssl->out_msglen  = 2;\n            ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;\n            ssl->out_msg[0]  = MBEDTLS_SSL_ALERT_LEVEL_WARNING;\n            ssl->out_msg[1]  = MBEDTLS_SSL_ALERT_MSG_NO_CERT;\n\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"got no certificate to send\" ) );\n            goto write_msg;\n        }\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n    }\n#endif /* MBEDTLS_SSL_CLI_C */\n#if defined(MBEDTLS_SSL_SRV_C)\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )\n    {\n        if( mbedtls_ssl_own_cert( ssl ) == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no certificate to send\" ) );\n            return( MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED );\n        }\n    }\n#endif\n\n    MBEDTLS_SSL_DEBUG_CRT( 3, \"own certificate\", mbedtls_ssl_own_cert( ssl ) );\n\n    /*\n     *     0  .  0    handshake type\n     *     1  .  3    handshake length\n     *     4  .  6    length of all certs\n     *     7  .  9    length of cert. 1\n     *    10  . n-1   peer certificate\n     *     n  . n+2   length of cert. 2\n     *    n+3 . ...   upper level cert, etc.\n     */\n    i = 7;\n    crt = mbedtls_ssl_own_cert( ssl );\n\n    while( crt != NULL )\n    {\n        n = crt->raw.len;\n        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"certificate too large, %d > %d\",\n                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );\n            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );\n        }\n\n        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );\n        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );\n        ssl->out_msg[i + 2] = (unsigned char)( n       );\n\n        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );\n        i += n; crt = crt->next;\n    }\n\n    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );\n    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );\n    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );\n\n    ssl->out_msglen  = i;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)\nwrite_msg:\n#endif\n\n    ssl->state++;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write certificate\" ) );\n\n    return( ret );\n}\n\nint mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t i, n;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;\n    int authmode = ssl->conf->authmode;\n    uint8_t alert;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse certificate\" ) );\n\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_SSL_SRV_C)\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    if( ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET )\n        authmode = ssl->handshake->sni_authmode;\n#endif\n\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&\n        authmode == MBEDTLS_SSL_VERIFY_NONE )\n    {\n        ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_SKIP_VERIFY;\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n#endif\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        /* mbedtls_ssl_read_record may have sent an alert already. We\n           let it decide whether to alert. */\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    ssl->state++;\n\n#if defined(MBEDTLS_SSL_SRV_C)\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    /*\n     * Check if the client sent an empty certificate\n     */\n    if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&\n        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        if( ssl->in_msglen  == 2                        &&\n            ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT            &&\n            ssl->in_msg[0]  == MBEDTLS_SSL_ALERT_LEVEL_WARNING  &&\n            ssl->in_msg[1]  == MBEDTLS_SSL_ALERT_MSG_NO_CERT )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"SSLv3 client has no certificate\" ) );\n\n            /* The client was asked for a certificate but didn't send\n               one. The client should know what's going on, so we\n               don't send an alert. */\n            ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;\n            if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )\n                return( 0 );\n            else\n                return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );\n        }\n    }\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&\n        ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )\n    {\n        if( ssl->in_hslen   == 3 + mbedtls_ssl_hs_hdr_len( ssl ) &&\n            ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE    &&\n            ssl->in_msg[0]  == MBEDTLS_SSL_HS_CERTIFICATE   &&\n            memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ), \"\\0\\0\\0\", 3 ) == 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"TLSv1 client has no certificate\" ) );\n\n            /* The client was asked for a certificate but didn't send\n               one. The client should know what's going on, so we\n               don't send an alert. */\n            ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;\n            if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )\n                return( 0 );\n            else\n                return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );\n        }\n    }\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n#endif /* MBEDTLS_SSL_SRV_C */\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||\n        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );\n    }\n\n    i = mbedtls_ssl_hs_hdr_len( ssl );\n\n    /*\n     * Same message structure as in mbedtls_ssl_write_certificate()\n     */\n    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];\n\n    if( ssl->in_msg[i] != 0 ||\n        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );\n    }\n\n    /* In case we tried to reuse a session but it failed */\n    if( ssl->session_negotiate->peer_cert != NULL )\n    {\n        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );\n        mbedtls_free( ssl->session_negotiate->peer_cert );\n    }\n\n    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,\n                    sizeof( mbedtls_x509_crt ) ) ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc(%d bytes) failed\",\n                       sizeof( mbedtls_x509_crt ) ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );\n\n    i += 3;\n\n    while( i < ssl->in_hslen )\n    {\n        if( ssl->in_msg[i] != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );\n        }\n\n        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )\n            | (unsigned int) ssl->in_msg[i + 2];\n        i += 3;\n\n        if( n < 128 || i + n > ssl->in_hslen )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );\n        }\n\n        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,\n                                  ssl->in_msg + i, n );\n        switch( ret )\n        {\n        case 0: /*ok*/\n        case MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + MBEDTLS_ERR_OID_NOT_FOUND:\n            /* Ignore certificate with an unknown algorithm: maybe a\n               prior certificate was already trusted. */\n            break;\n\n        case MBEDTLS_ERR_X509_ALLOC_FAILED:\n            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;\n            goto crt_parse_der_failed;\n\n        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:\n            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;\n            goto crt_parse_der_failed;\n\n        default:\n            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;\n        crt_parse_der_failed:\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );\n            MBEDTLS_SSL_DEBUG_RET( 1, \" mbedtls_x509_crt_parse_der\", ret );\n            return( ret );\n        }\n\n        i += n;\n    }\n\n    MBEDTLS_SSL_DEBUG_CRT( 3, \"peer certificate\", ssl->session_negotiate->peer_cert );\n\n    /*\n     * On client, make sure the server cert doesn't change during renego to\n     * avoid \"triple handshake\" attack: https://secure-resumption.com/\n     */\n#if defined(MBEDTLS_SSL_RENEGOTIATION) && defined(MBEDTLS_SSL_CLI_C)\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&\n        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n    {\n        if( ssl->session->peer_cert == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"new server cert during renegotiation\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );\n        }\n\n        if( ssl->session->peer_cert->raw.len !=\n            ssl->session_negotiate->peer_cert->raw.len ||\n            memcmp( ssl->session->peer_cert->raw.p,\n                    ssl->session_negotiate->peer_cert->raw.p,\n                    ssl->session->peer_cert->raw.len ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server cert changed during renegotiation\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED );\n            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );\n        }\n    }\n#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */\n\n    if( authmode != MBEDTLS_SSL_VERIFY_NONE )\n    {\n        mbedtls_x509_crt *ca_chain;\n        mbedtls_x509_crl *ca_crl;\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n        if( ssl->handshake->sni_ca_chain != NULL )\n        {\n            ca_chain = ssl->handshake->sni_ca_chain;\n            ca_crl   = ssl->handshake->sni_ca_crl;\n        }\n        else\n#endif\n        {\n            ca_chain = ssl->conf->ca_chain;\n            ca_crl   = ssl->conf->ca_crl;\n        }\n\n        /*\n         * Main check: verify certificate\n         */\n        ret = mbedtls_x509_crt_verify_with_profile(\n                                ssl->session_negotiate->peer_cert,\n                                ca_chain, ca_crl,\n                                ssl->conf->cert_profile,\n                                ssl->hostname,\n                               &ssl->session_negotiate->verify_result,\n                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );\n\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"x509_verify_cert\", ret );\n        }\n\n        /*\n         * Secondary checks: always done, but change 'ret' only if it was 0\n         */\n\n#if defined(MBEDTLS_ECP_C)\n        {\n            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;\n\n            /* If certificate uses an EC key, make sure the curve is OK */\n            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&\n                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )\n            {\n                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;\n\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate (EC key curve)\" ) );\n                if( ret == 0 )\n                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;\n            }\n        }\n#endif /* MBEDTLS_ECP_C */\n\n        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,\n                                 ciphersuite_info,\n                                 ! ssl->conf->endpoint,\n                                 &ssl->session_negotiate->verify_result ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad certificate (usage extensions)\" ) );\n            if( ret == 0 )\n                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;\n        }\n\n        /* mbedtls_x509_crt_verify_with_profile is supposed to report a\n         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,\n         * with details encoded in the verification flags. All other kinds\n         * of error codes, including those from the user provided f_vrfy\n         * functions, are treated as fatal and lead to a failure of\n         * ssl_parse_certificate even if verification was optional. */\n        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&\n            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||\n              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )\n        {\n            ret = 0;\n        }\n\n        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"got no CA chain\" ) );\n            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;\n        }\n\n        if( ret != 0 )\n        {\n            /* The certificate may have been rejected for several reasons.\n               Pick one and send the corresponding alert. Which alert to send\n               may be a subject of debate in some cases. */\n            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )\n                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )\n                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_KEY_USAGE )\n                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXT_KEY_USAGE )\n                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )\n                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )\n                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )\n                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )\n                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )\n                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;\n            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )\n                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;\n            else\n                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            alert );\n        }\n\n#if defined(MBEDTLS_DEBUG_C)\n        if( ssl->session_negotiate->verify_result != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"! Certificate verification flags %x\",\n                                        ssl->session_negotiate->verify_result ) );\n        }\n        else\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 3, ( \"Certificate verification flags clear\" ) );\n        }\n#endif /* MBEDTLS_DEBUG_C */\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse certificate\" ) );\n\n    return( ret );\n}\n#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED\n          !MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED\n          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED\n          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED\n          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED\n          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\nint mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write change cipher spec\" ) );\n\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;\n    ssl->out_msglen  = 1;\n    ssl->out_msg[0]  = 1;\n\n    ssl->state++;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write change cipher spec\" ) );\n\n    return( 0 );\n}\n\nint mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse change cipher spec\" ) );\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad change cipher spec message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad change cipher spec message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );\n    }\n\n    /*\n     * Switch to our negotiated transform and session parameters for inbound\n     * data.\n     */\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"switching to new transform spec for inbound data\" ) );\n    ssl->transform_in = ssl->transform_negotiate;\n    ssl->session_in = ssl->session_negotiate;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\n        ssl_dtls_replay_reset( ssl );\n#endif\n\n        /* Increment epoch */\n        if( ++ssl->in_epoch == 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"DTLS epoch would wrap\" ) );\n            /* This is highly unlikely to happen for legitimate reasons, so\n               treat it as an attack and don't send an alert. */\n            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n    memset( ssl->in_ctr, 0, 8 );\n\n    /*\n     * Set the in_msg pointer to the correct location based on IV length\n     */\n    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )\n    {\n        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -\n                      ssl->transform_negotiate->fixed_ivlen;\n    }\n    else\n        ssl->in_msg = ssl->in_iv;\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\n    if( mbedtls_ssl_hw_record_activate != NULL )\n    {\n        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_INBOUND ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_hw_record_activate\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );\n        }\n    }\n#endif\n\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse change cipher spec\" ) );\n\n    return( 0 );\n}\n\nvoid mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,\n                            const mbedtls_ssl_ciphersuite_t *ciphersuite_info )\n{\n    ((void) ciphersuite_info);\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n    if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )\n        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;\n    else\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA512_C)\n    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )\n        ssl->handshake->update_checksum = ssl_update_checksum_sha384;\n    else\n#endif\n#if defined(MBEDTLS_SHA256_C)\n    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )\n        ssl->handshake->update_checksum = ssl_update_checksum_sha256;\n    else\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return;\n    }\n}\n\nvoid mbedtls_ssl_reset_checksum( mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n     mbedtls_md5_starts_ret( &ssl->handshake->fin_md5  );\n    mbedtls_sha1_starts_ret( &ssl->handshake->fin_sha1 );\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\n    mbedtls_sha256_starts_ret( &ssl->handshake->fin_sha256, 0 );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n    mbedtls_sha512_starts_ret( &ssl->handshake->fin_sha512, 1 );\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n}\n\nstatic void ssl_update_checksum_start( mbedtls_ssl_context *ssl,\n                                       const unsigned char *buf, size_t len )\n{\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );\n    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\n    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n}\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\nstatic void ssl_update_checksum_md5sha1( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf, size_t len )\n{\n     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );\n    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );\n}\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\nstatic void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,\n                                        const unsigned char *buf, size_t len )\n{\n    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );\n}\n#endif\n\n#if defined(MBEDTLS_SHA512_C)\nstatic void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,\n                                        const unsigned char *buf, size_t len )\n{\n    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );\n}\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\nstatic void ssl_calc_finished_ssl(\n                mbedtls_ssl_context *ssl, unsigned char *buf, int from )\n{\n    const char *sender;\n    mbedtls_md5_context  md5;\n    mbedtls_sha1_context sha1;\n\n    unsigned char padbuf[48];\n    unsigned char md5sum[16];\n    unsigned char sha1sum[20];\n\n    mbedtls_ssl_session *session = ssl->session_negotiate;\n    if( !session )\n        session = ssl->session;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> calc  finished ssl\" ) );\n\n    mbedtls_md5_init( &md5 );\n    mbedtls_sha1_init( &sha1 );\n\n    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );\n    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );\n\n    /*\n     * SSLv3:\n     *   hash =\n     *      MD5( master + pad2 +\n     *          MD5( handshake + sender + master + pad1 ) )\n     *   + SHA1( master + pad2 +\n     *         SHA1( handshake + sender + master + pad1 ) )\n     */\n\n#if !defined(MBEDTLS_MD5_ALT)\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"finished  md5 state\", (unsigned char *)\n                    md5.state, sizeof(  md5.state ) );\n#endif\n\n#if !defined(MBEDTLS_SHA1_ALT)\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"finished sha1 state\", (unsigned char *)\n                   sha1.state, sizeof( sha1.state ) );\n#endif\n\n    sender = ( from == MBEDTLS_SSL_IS_CLIENT ) ? \"CLNT\"\n                                       : \"SRVR\";\n\n    memset( padbuf, 0x36, 48 );\n\n    mbedtls_md5_update_ret( &md5, (const unsigned char *) sender, 4 );\n    mbedtls_md5_update_ret( &md5, session->master, 48 );\n    mbedtls_md5_update_ret( &md5, padbuf, 48 );\n    mbedtls_md5_finish_ret( &md5, md5sum );\n\n    mbedtls_sha1_update_ret( &sha1, (const unsigned char *) sender, 4 );\n    mbedtls_sha1_update_ret( &sha1, session->master, 48 );\n    mbedtls_sha1_update_ret( &sha1, padbuf, 40 );\n    mbedtls_sha1_finish_ret( &sha1, sha1sum );\n\n    memset( padbuf, 0x5C, 48 );\n\n    mbedtls_md5_starts_ret( &md5 );\n    mbedtls_md5_update_ret( &md5, session->master, 48 );\n    mbedtls_md5_update_ret( &md5, padbuf, 48 );\n    mbedtls_md5_update_ret( &md5, md5sum, 16 );\n    mbedtls_md5_finish_ret( &md5, buf );\n\n    mbedtls_sha1_starts_ret( &sha1 );\n    mbedtls_sha1_update_ret( &sha1, session->master, 48 );\n    mbedtls_sha1_update_ret( &sha1, padbuf , 40 );\n    mbedtls_sha1_update_ret( &sha1, sha1sum, 20 );\n    mbedtls_sha1_finish_ret( &sha1, buf + 16 );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"calc finished result\", buf, 36 );\n\n    mbedtls_md5_free(  &md5  );\n    mbedtls_sha1_free( &sha1 );\n\n    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );\n    mbedtls_zeroize(  md5sum, sizeof(  md5sum ) );\n    mbedtls_zeroize( sha1sum, sizeof( sha1sum ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= calc  finished\" ) );\n}\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)\nstatic void ssl_calc_finished_tls(\n                mbedtls_ssl_context *ssl, unsigned char *buf, int from )\n{\n    int len = 12;\n    const char *sender;\n    mbedtls_md5_context  md5;\n    mbedtls_sha1_context sha1;\n    unsigned char padbuf[36];\n\n    mbedtls_ssl_session *session = ssl->session_negotiate;\n    if( !session )\n        session = ssl->session;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> calc  finished tls\" ) );\n\n    mbedtls_md5_init( &md5 );\n    mbedtls_sha1_init( &sha1 );\n\n    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );\n    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );\n\n    /*\n     * TLSv1:\n     *   hash = PRF( master, finished_label,\n     *               MD5( handshake ) + SHA1( handshake ) )[0..11]\n     */\n\n#if !defined(MBEDTLS_MD5_ALT)\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"finished  md5 state\", (unsigned char *)\n                    md5.state, sizeof(  md5.state ) );\n#endif\n\n#if !defined(MBEDTLS_SHA1_ALT)\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"finished sha1 state\", (unsigned char *)\n                   sha1.state, sizeof( sha1.state ) );\n#endif\n\n    sender = ( from == MBEDTLS_SSL_IS_CLIENT )\n             ? \"client finished\"\n             : \"server finished\";\n\n    mbedtls_md5_finish_ret(  &md5, padbuf );\n    mbedtls_sha1_finish_ret( &sha1, padbuf + 16 );\n\n    ssl->handshake->tls_prf( session->master, 48, sender,\n                             padbuf, 36, buf, len );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"calc finished result\", buf, len );\n\n    mbedtls_md5_free(  &md5  );\n    mbedtls_sha1_free( &sha1 );\n\n    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= calc  finished\" ) );\n}\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\nstatic void ssl_calc_finished_tls_sha256(\n                mbedtls_ssl_context *ssl, unsigned char *buf, int from )\n{\n    int len = 12;\n    const char *sender;\n    mbedtls_sha256_context sha256;\n    unsigned char padbuf[32];\n\n    mbedtls_ssl_session *session = ssl->session_negotiate;\n    if( !session )\n        session = ssl->session;\n\n    mbedtls_sha256_init( &sha256 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> calc  finished tls sha256\" ) );\n\n    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );\n\n    /*\n     * TLSv1.2:\n     *   hash = PRF( master, finished_label,\n     *               Hash( handshake ) )[0.11]\n     */\n\n#if !defined(MBEDTLS_SHA256_ALT)\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"finished sha2 state\", (unsigned char *)\n                   sha256.state, sizeof( sha256.state ) );\n#endif\n\n    sender = ( from == MBEDTLS_SSL_IS_CLIENT )\n             ? \"client finished\"\n             : \"server finished\";\n\n    mbedtls_sha256_finish_ret( &sha256, padbuf );\n\n    ssl->handshake->tls_prf( session->master, 48, sender,\n                             padbuf, 32, buf, len );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"calc finished result\", buf, len );\n\n    mbedtls_sha256_free( &sha256 );\n\n    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= calc  finished\" ) );\n}\n#endif /* MBEDTLS_SHA256_C */\n\n#if defined(MBEDTLS_SHA512_C)\nstatic void ssl_calc_finished_tls_sha384(\n                mbedtls_ssl_context *ssl, unsigned char *buf, int from )\n{\n    int len = 12;\n    const char *sender;\n    mbedtls_sha512_context sha512;\n    unsigned char padbuf[48];\n\n    mbedtls_ssl_session *session = ssl->session_negotiate;\n    if( !session )\n        session = ssl->session;\n\n    mbedtls_sha512_init( &sha512 );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> calc  finished tls sha384\" ) );\n\n    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );\n\n    /*\n     * TLSv1.2:\n     *   hash = PRF( master, finished_label,\n     *               Hash( handshake ) )[0.11]\n     */\n\n#if !defined(MBEDTLS_SHA512_ALT)\n    MBEDTLS_SSL_DEBUG_BUF( 4, \"finished sha512 state\", (unsigned char *)\n                   sha512.state, sizeof( sha512.state ) );\n#endif\n\n    sender = ( from == MBEDTLS_SSL_IS_CLIENT )\n             ? \"client finished\"\n             : \"server finished\";\n\n    mbedtls_sha512_finish_ret( &sha512, padbuf );\n\n    ssl->handshake->tls_prf( session->master, 48, sender,\n                             padbuf, 48, buf, len );\n\n    MBEDTLS_SSL_DEBUG_BUF( 3, \"calc finished result\", buf, len );\n\n    mbedtls_sha512_free( &sha512 );\n\n    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= calc  finished\" ) );\n}\n#endif /* MBEDTLS_SHA512_C */\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\nstatic void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl )\n{\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"=> handshake wrapup: final free\" ) );\n\n    /*\n     * Free our handshake params\n     */\n    mbedtls_ssl_handshake_free( ssl->handshake );\n    mbedtls_free( ssl->handshake );\n    ssl->handshake = NULL;\n\n    /*\n     * Free the previous transform and swith in the current one\n     */\n    if( ssl->transform )\n    {\n        mbedtls_ssl_transform_free( ssl->transform );\n        mbedtls_free( ssl->transform );\n    }\n    ssl->transform = ssl->transform_negotiate;\n    ssl->transform_negotiate = NULL;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"<= handshake wrapup: final free\" ) );\n}\n\nvoid mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )\n{\n    int resume = ssl->handshake->resume;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"=> handshake wrapup\" ) );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n    {\n        ssl->renego_status =  MBEDTLS_SSL_RENEGOTIATION_DONE;\n        ssl->renego_records_seen = 0;\n    }\n#endif\n\n    /*\n     * Free the previous session and switch in the current one\n     */\n    if( ssl->session )\n    {\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n        /* RFC 7366 3.1: keep the EtM state */\n        ssl->session_negotiate->encrypt_then_mac =\n                  ssl->session->encrypt_then_mac;\n#endif\n\n        mbedtls_ssl_session_free( ssl->session );\n        mbedtls_free( ssl->session );\n    }\n    ssl->session = ssl->session_negotiate;\n    ssl->session_negotiate = NULL;\n\n    /*\n     * Add cache entry\n     */\n    if( ssl->conf->f_set_cache != NULL &&\n        ssl->session->id_len != 0 &&\n        resume == 0 )\n    {\n        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"cache did not store session\" ) );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->handshake->flight != NULL )\n    {\n        /* Cancel handshake timer */\n        ssl_set_timer( ssl, 0 );\n\n        /* Keep last flight around in case we need to resend it:\n         * we need the handshake and transform structures for that */\n        MBEDTLS_SSL_DEBUG_MSG( 3, ( \"skip freeing handshake and transform\" ) );\n    }\n    else\n#endif\n        ssl_handshake_wrapup_free_hs_transform( ssl );\n\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"<= handshake wrapup\" ) );\n}\n\nint mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )\n{\n    int ret, hash_len;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write finished\" ) );\n\n    /*\n     * Set the out_msg pointer to the correct location based on IV length\n     */\n    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )\n    {\n        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -\n                       ssl->transform_negotiate->fixed_ivlen;\n    }\n    else\n        ssl->out_msg = ssl->out_iv;\n\n    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );\n\n    /*\n     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites\n     * may define some other value. Currently (early 2016), no defined\n     * ciphersuite does this (and this is unlikely to change as activity has\n     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.\n     */\n    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    ssl->verify_data_len = hash_len;\n    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );\n#endif\n\n    ssl->out_msglen  = 4 + hash_len;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;\n\n    /*\n     * In case of session resuming, invert the client and server\n     * ChangeCipherSpec messages order.\n     */\n    if( ssl->handshake->resume != 0 )\n    {\n#if defined(MBEDTLS_SSL_CLI_C)\n        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )\n            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;\n#endif\n#if defined(MBEDTLS_SSL_SRV_C)\n        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )\n            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;\n#endif\n    }\n    else\n        ssl->state++;\n\n    /*\n     * Switch to our negotiated transform and session parameters for outbound\n     * data.\n     */\n    MBEDTLS_SSL_DEBUG_MSG( 3, ( \"switching to new transform spec for outbound data\" ) );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        unsigned char i;\n\n        /* Remember current epoch settings for resending */\n        ssl->handshake->alt_transform_out = ssl->transform_out;\n        memcpy( ssl->handshake->alt_out_ctr, ssl->out_ctr, 8 );\n\n        /* Set sequence_number to zero */\n        memset( ssl->out_ctr + 2, 0, 6 );\n\n        /* Increment epoch */\n        for( i = 2; i > 0; i-- )\n            if( ++ssl->out_ctr[i - 1] != 0 )\n                break;\n\n        /* The loop goes to its end iff the counter is wrapping */\n        if( i == 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"DTLS epoch would wrap\" ) );\n            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );\n        }\n    }\n    else\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n    memset( ssl->out_ctr, 0, 8 );\n\n    ssl->transform_out = ssl->transform_negotiate;\n    ssl->session_out = ssl->session_negotiate;\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\n    if( mbedtls_ssl_hw_record_activate != NULL )\n    {\n        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_OUTBOUND ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_hw_record_activate\", ret );\n            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );\n        }\n    }\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_send_flight_completed( ssl );\n#endif\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write finished\" ) );\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n#define SSL_MAX_HASH_LEN 36\n#else\n#define SSL_MAX_HASH_LEN 12\n#endif\n\nint mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    unsigned int hash_len;\n    unsigned char buf[SSL_MAX_HASH_LEN];\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse finished\" ) );\n\n    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad finished message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /* There is currently no ciphersuite using another length with TLS 1.2 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n        hash_len = 36;\n    else\n#endif\n        hash_len = 12;\n\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||\n        ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) + hash_len )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad finished message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );\n    }\n\n    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),\n                      buf, hash_len ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad finished message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );\n    }\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    ssl->verify_data_len = hash_len;\n    memcpy( ssl->peer_verify_data, buf, hash_len );\n#endif\n\n    if( ssl->handshake->resume != 0 )\n    {\n#if defined(MBEDTLS_SSL_CLI_C)\n        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )\n            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;\n#endif\n#if defined(MBEDTLS_SSL_SRV_C)\n        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )\n            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;\n#endif\n    }\n    else\n        ssl->state++;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        mbedtls_ssl_recv_flight_completed( ssl );\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse finished\" ) );\n\n    return( 0 );\n}\n\nstatic void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )\n{\n    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n     mbedtls_md5_init(   &handshake->fin_md5  );\n    mbedtls_sha1_init(   &handshake->fin_sha1 );\n     mbedtls_md5_starts_ret( &handshake->fin_md5  );\n    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\n    mbedtls_sha256_init(   &handshake->fin_sha256    );\n    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n    mbedtls_sha512_init(   &handshake->fin_sha512    );\n    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n    handshake->update_checksum = ssl_update_checksum_start;\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n    mbedtls_ssl_sig_hash_set_init( &handshake->hash_algs );\n#endif\n\n#if defined(MBEDTLS_DHM_C)\n    mbedtls_dhm_init( &handshake->dhm_ctx );\n#endif\n#if defined(MBEDTLS_ECDH_C)\n    mbedtls_ecdh_init( &handshake->ecdh_ctx );\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    mbedtls_ecjpake_init( &handshake->ecjpake_ctx );\n#if defined(MBEDTLS_SSL_CLI_C)\n    handshake->ecjpake_cache = NULL;\n    handshake->ecjpake_cache_len = 0;\n#endif\n#endif\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;\n#endif\n}\n\nstatic void ssl_transform_init( mbedtls_ssl_transform *transform )\n{\n    memset( transform, 0, sizeof(mbedtls_ssl_transform) );\n\n    mbedtls_cipher_init( &transform->cipher_ctx_enc );\n    mbedtls_cipher_init( &transform->cipher_ctx_dec );\n\n    mbedtls_md_init( &transform->md_ctx_enc );\n    mbedtls_md_init( &transform->md_ctx_dec );\n}\n\nvoid mbedtls_ssl_session_init( mbedtls_ssl_session *session )\n{\n    memset( session, 0, sizeof(mbedtls_ssl_session) );\n}\n\nstatic int ssl_handshake_init( mbedtls_ssl_context *ssl )\n{\n    /* Clear old handshake information if present */\n    if( ssl->transform_negotiate )\n        mbedtls_ssl_transform_free( ssl->transform_negotiate );\n    if( ssl->session_negotiate )\n        mbedtls_ssl_session_free( ssl->session_negotiate );\n    if( ssl->handshake )\n        mbedtls_ssl_handshake_free( ssl->handshake );\n\n    /*\n     * Either the pointers are now NULL or cleared properly and can be freed.\n     * Now allocate missing structures.\n     */\n    if( ssl->transform_negotiate == NULL )\n    {\n        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );\n    }\n\n    if( ssl->session_negotiate == NULL )\n    {\n        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );\n    }\n\n    if( ssl->handshake == NULL )\n    {\n        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );\n    }\n\n    /* All pointers should exist and can be directly freed without issue */\n    if( ssl->handshake == NULL ||\n        ssl->transform_negotiate == NULL ||\n        ssl->session_negotiate == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc() of ssl sub-contexts failed\" ) );\n\n        mbedtls_free( ssl->handshake );\n        mbedtls_free( ssl->transform_negotiate );\n        mbedtls_free( ssl->session_negotiate );\n\n        ssl->handshake = NULL;\n        ssl->transform_negotiate = NULL;\n        ssl->session_negotiate = NULL;\n\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    /* Initialize structures */\n    mbedtls_ssl_session_init( ssl->session_negotiate );\n    ssl_transform_init( ssl->transform_negotiate );\n    ssl_handshake_params_init( ssl->handshake );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        ssl->handshake->alt_transform_out = ssl->transform_out;\n\n        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )\n            ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_PREPARING;\n        else\n            ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;\n\n        ssl_set_timer( ssl, 0 );\n    }\n#endif\n\n    return( 0 );\n}\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)\n/* Dummy cookie callbacks for defaults */\nstatic int ssl_cookie_write_dummy( void *ctx,\n                      unsigned char **p, unsigned char *end,\n                      const unsigned char *cli_id, size_t cli_id_len )\n{\n    ((void) ctx);\n    ((void) p);\n    ((void) end);\n    ((void) cli_id);\n    ((void) cli_id_len);\n\n    return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n}\n\nstatic int ssl_cookie_check_dummy( void *ctx,\n                      const unsigned char *cookie, size_t cookie_len,\n                      const unsigned char *cli_id, size_t cli_id_len )\n{\n    ((void) ctx);\n    ((void) cookie);\n    ((void) cookie_len);\n    ((void) cli_id);\n    ((void) cli_id_len);\n\n    return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n}\n#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY && MBEDTLS_SSL_SRV_C */\n\n/*\n * Initialize an SSL context\n */\nvoid mbedtls_ssl_init( mbedtls_ssl_context *ssl )\n{\n    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );\n}\n\n/*\n * Setup an SSL context\n */\nint mbedtls_ssl_setup( mbedtls_ssl_context *ssl,\n                       const mbedtls_ssl_config *conf )\n{\n    int ret;\n    const size_t len = MBEDTLS_SSL_BUFFER_LEN;\n\n    ssl->conf = conf;\n\n    /*\n     * Prepare base structures\n     */\n    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||\n        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"alloc(%d bytes) failed\", len ) );\n        mbedtls_free( ssl->in_buf );\n        ssl->in_buf = NULL;\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        ssl->out_hdr = ssl->out_buf;\n        ssl->out_ctr = ssl->out_buf +  3;\n        ssl->out_len = ssl->out_buf + 11;\n        ssl->out_iv  = ssl->out_buf + 13;\n        ssl->out_msg = ssl->out_buf + 13;\n\n        ssl->in_hdr = ssl->in_buf;\n        ssl->in_ctr = ssl->in_buf +  3;\n        ssl->in_len = ssl->in_buf + 11;\n        ssl->in_iv  = ssl->in_buf + 13;\n        ssl->in_msg = ssl->in_buf + 13;\n    }\n    else\n#endif\n    {\n        ssl->out_ctr = ssl->out_buf;\n        ssl->out_hdr = ssl->out_buf +  8;\n        ssl->out_len = ssl->out_buf + 11;\n        ssl->out_iv  = ssl->out_buf + 13;\n        ssl->out_msg = ssl->out_buf + 13;\n\n        ssl->in_ctr = ssl->in_buf;\n        ssl->in_hdr = ssl->in_buf +  8;\n        ssl->in_len = ssl->in_buf + 11;\n        ssl->in_iv  = ssl->in_buf + 13;\n        ssl->in_msg = ssl->in_buf + 13;\n    }\n\n    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * Reset an initialized and used SSL context for re-use while retaining\n * all application-set variables, function pointers and data.\n *\n * If partial is non-zero, keep data in the input buffer and client ID.\n * (Use when a DTLS client reconnects from the same port.)\n */\nstatic int ssl_session_reset_int( mbedtls_ssl_context *ssl, int partial )\n{\n    int ret;\n\n    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;\n\n    /* Cancel any possibly running timer */\n    ssl_set_timer( ssl, 0 );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    ssl->renego_status = MBEDTLS_SSL_INITIAL_HANDSHAKE;\n    ssl->renego_records_seen = 0;\n\n    ssl->verify_data_len = 0;\n    memset( ssl->own_verify_data, 0, MBEDTLS_SSL_VERIFY_DATA_MAX_LEN );\n    memset( ssl->peer_verify_data, 0, MBEDTLS_SSL_VERIFY_DATA_MAX_LEN );\n#endif\n    ssl->secure_renegotiation = MBEDTLS_SSL_LEGACY_RENEGOTIATION;\n\n    ssl->in_offt = NULL;\n\n    ssl->in_msg = ssl->in_buf + 13;\n    ssl->in_msgtype = 0;\n    ssl->in_msglen = 0;\n    if( partial == 0 )\n        ssl->in_left = 0;\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    ssl->next_record_offset = 0;\n    ssl->in_epoch = 0;\n#endif\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\n    ssl_dtls_replay_reset( ssl );\n#endif\n\n    ssl->in_hslen = 0;\n    ssl->nb_zero = 0;\n\n    ssl->keep_current_message = 0;\n\n    ssl->out_msg = ssl->out_buf + 13;\n    ssl->out_msgtype = 0;\n    ssl->out_msglen = 0;\n    ssl->out_left = 0;\n#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)\n    if( ssl->split_done != MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED )\n        ssl->split_done = 0;\n#endif\n\n    ssl->transform_in = NULL;\n    ssl->transform_out = NULL;\n\n    memset( ssl->out_buf, 0, MBEDTLS_SSL_BUFFER_LEN );\n    if( partial == 0 )\n        memset( ssl->in_buf, 0, MBEDTLS_SSL_BUFFER_LEN );\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\n    if( mbedtls_ssl_hw_record_reset != NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"going for mbedtls_ssl_hw_record_reset()\" ) );\n        if( ( ret = mbedtls_ssl_hw_record_reset( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_hw_record_reset\", ret );\n            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );\n        }\n    }\n#endif\n\n    if( ssl->transform )\n    {\n        mbedtls_ssl_transform_free( ssl->transform );\n        mbedtls_free( ssl->transform );\n        ssl->transform = NULL;\n    }\n\n    if( ssl->session )\n    {\n        mbedtls_ssl_session_free( ssl->session );\n        mbedtls_free( ssl->session );\n        ssl->session = NULL;\n    }\n\n#if defined(MBEDTLS_SSL_ALPN)\n    ssl->alpn_chosen = NULL;\n#endif\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)\n    if( partial == 0 )\n    {\n        mbedtls_free( ssl->cli_id );\n        ssl->cli_id = NULL;\n        ssl->cli_id_len = 0;\n    }\n#endif\n\n    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )\n        return( ret );\n\n    return( 0 );\n}\n\n/*\n * Reset an initialized and used SSL context for re-use while retaining\n * all application-set variables, function pointers and data.\n */\nint mbedtls_ssl_session_reset( mbedtls_ssl_context *ssl )\n{\n    return( ssl_session_reset_int( ssl, 0 ) );\n}\n\n/*\n * SSL set accessors\n */\nvoid mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )\n{\n    conf->endpoint   = endpoint;\n}\n\nvoid mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )\n{\n    conf->transport = transport;\n}\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\nvoid mbedtls_ssl_conf_dtls_anti_replay( mbedtls_ssl_config *conf, char mode )\n{\n    conf->anti_replay = mode;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)\nvoid mbedtls_ssl_conf_dtls_badmac_limit( mbedtls_ssl_config *conf, unsigned limit )\n{\n    conf->badmac_limit = limit;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\nvoid mbedtls_ssl_conf_handshake_timeout( mbedtls_ssl_config *conf, uint32_t min, uint32_t max )\n{\n    conf->hs_timeout_min = min;\n    conf->hs_timeout_max = max;\n}\n#endif\n\nvoid mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )\n{\n    conf->authmode   = authmode;\n}\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nvoid mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,\n                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),\n                     void *p_vrfy )\n{\n    conf->f_vrfy      = f_vrfy;\n    conf->p_vrfy      = p_vrfy;\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\nvoid mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,\n                  int (*f_rng)(void *, unsigned char *, size_t),\n                  void *p_rng )\n{\n    conf->f_rng      = f_rng;\n    conf->p_rng      = p_rng;\n}\n\nvoid mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,\n                  void (*f_dbg)(void *, int, const char *, int, const char *),\n                  void  *p_dbg )\n{\n    conf->f_dbg      = f_dbg;\n    conf->p_dbg      = p_dbg;\n}\n\nvoid mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,\n        void *p_bio,\n        mbedtls_ssl_send_t *f_send,\n        mbedtls_ssl_recv_t *f_recv,\n        mbedtls_ssl_recv_timeout_t *f_recv_timeout )\n{\n    ssl->p_bio          = p_bio;\n    ssl->f_send         = f_send;\n    ssl->f_recv         = f_recv;\n    ssl->f_recv_timeout = f_recv_timeout;\n}\n\nvoid mbedtls_ssl_conf_read_timeout( mbedtls_ssl_config *conf, uint32_t timeout )\n{\n    conf->read_timeout   = timeout;\n}\n\nvoid mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,\n                               void *p_timer,\n                               mbedtls_ssl_set_timer_t *f_set_timer,\n                               mbedtls_ssl_get_timer_t *f_get_timer )\n{\n    ssl->p_timer        = p_timer;\n    ssl->f_set_timer    = f_set_timer;\n    ssl->f_get_timer    = f_get_timer;\n\n    /* Make sure we start with no timer running */\n    ssl_set_timer( ssl, 0 );\n}\n\n#if defined(MBEDTLS_SSL_SRV_C)\nvoid mbedtls_ssl_conf_session_cache( mbedtls_ssl_config *conf,\n        void *p_cache,\n        int (*f_get_cache)(void *, mbedtls_ssl_session *),\n        int (*f_set_cache)(void *, const mbedtls_ssl_session *) )\n{\n    conf->p_cache = p_cache;\n    conf->f_get_cache = f_get_cache;\n    conf->f_set_cache = f_set_cache;\n}\n#endif /* MBEDTLS_SSL_SRV_C */\n\n#if defined(MBEDTLS_SSL_CLI_C)\nint mbedtls_ssl_set_session( mbedtls_ssl_context *ssl, const mbedtls_ssl_session *session )\n{\n    int ret;\n\n    if( ssl == NULL ||\n        session == NULL ||\n        ssl->session_negotiate == NULL ||\n        ssl->conf->endpoint != MBEDTLS_SSL_IS_CLIENT )\n    {\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    if( ( ret = ssl_session_copy( ssl->session_negotiate, session ) ) != 0 )\n        return( ret );\n\n    ssl->handshake->resume = 1;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_CLI_C */\n\nvoid mbedtls_ssl_conf_ciphersuites( mbedtls_ssl_config *conf,\n                                   const int *ciphersuites )\n{\n    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] = ciphersuites;\n    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] = ciphersuites;\n    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] = ciphersuites;\n    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] = ciphersuites;\n}\n\nvoid mbedtls_ssl_conf_ciphersuites_for_version( mbedtls_ssl_config *conf,\n                                       const int *ciphersuites,\n                                       int major, int minor )\n{\n    if( major != MBEDTLS_SSL_MAJOR_VERSION_3 )\n        return;\n\n    if( minor < MBEDTLS_SSL_MINOR_VERSION_0 || minor > MBEDTLS_SSL_MINOR_VERSION_3 )\n        return;\n\n    conf->ciphersuite_list[minor] = ciphersuites;\n}\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nvoid mbedtls_ssl_conf_cert_profile( mbedtls_ssl_config *conf,\n                                    const mbedtls_x509_crt_profile *profile )\n{\n    conf->cert_profile = profile;\n}\n\n/* Append a new keycert entry to a (possibly empty) list */\nstatic int ssl_append_key_cert( mbedtls_ssl_key_cert **head,\n                                mbedtls_x509_crt *cert,\n                                mbedtls_pk_context *key )\n{\n    mbedtls_ssl_key_cert *new;\n\n    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );\n    if( new == NULL )\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n\n    new->cert = cert;\n    new->key  = key;\n    new->next = NULL;\n\n    /* Update head is the list was null, else add to the end */\n    if( *head == NULL )\n    {\n        *head = new;\n    }\n    else\n    {\n        mbedtls_ssl_key_cert *cur = *head;\n        while( cur->next != NULL )\n            cur = cur->next;\n        cur->next = new;\n    }\n\n    return( 0 );\n}\n\nint mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,\n                              mbedtls_x509_crt *own_cert,\n                              mbedtls_pk_context *pk_key )\n{\n    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );\n}\n\nvoid mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,\n                               mbedtls_x509_crt *ca_chain,\n                               mbedtls_x509_crl *ca_crl )\n{\n    conf->ca_chain   = ca_chain;\n    conf->ca_crl     = ca_crl;\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\nint mbedtls_ssl_set_hs_own_cert( mbedtls_ssl_context *ssl,\n                                 mbedtls_x509_crt *own_cert,\n                                 mbedtls_pk_context *pk_key )\n{\n    return( ssl_append_key_cert( &ssl->handshake->sni_key_cert,\n                                 own_cert, pk_key ) );\n}\n\nvoid mbedtls_ssl_set_hs_ca_chain( mbedtls_ssl_context *ssl,\n                                  mbedtls_x509_crt *ca_chain,\n                                  mbedtls_x509_crl *ca_crl )\n{\n    ssl->handshake->sni_ca_chain   = ca_chain;\n    ssl->handshake->sni_ca_crl     = ca_crl;\n}\n\nvoid mbedtls_ssl_set_hs_authmode( mbedtls_ssl_context *ssl,\n                                  int authmode )\n{\n    ssl->handshake->sni_authmode = authmode;\n}\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n/*\n * Set EC J-PAKE password for current handshake\n */\nint mbedtls_ssl_set_hs_ecjpake_password( mbedtls_ssl_context *ssl,\n                                         const unsigned char *pw,\n                                         size_t pw_len )\n{\n    mbedtls_ecjpake_role role;\n\n    if( ssl->handshake == NULL || ssl->conf == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )\n        role = MBEDTLS_ECJPAKE_SERVER;\n    else\n        role = MBEDTLS_ECJPAKE_CLIENT;\n\n    return( mbedtls_ecjpake_setup( &ssl->handshake->ecjpake_ctx,\n                                   role,\n                                   MBEDTLS_MD_SHA256,\n                                   MBEDTLS_ECP_DP_SECP256R1,\n                                   pw, pw_len ) );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\nint mbedtls_ssl_conf_psk( mbedtls_ssl_config *conf,\n                const unsigned char *psk, size_t psk_len,\n                const unsigned char *psk_identity, size_t psk_identity_len )\n{\n    if( psk == NULL || psk_identity == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    if( psk_len > MBEDTLS_PSK_MAX_LEN )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    /* Identity len will be encoded on two bytes */\n    if( ( psk_identity_len >> 16 ) != 0 ||\n        psk_identity_len > MBEDTLS_SSL_MAX_CONTENT_LEN )\n    {\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    if( conf->psk != NULL )\n    {\n        mbedtls_zeroize( conf->psk, conf->psk_len );\n\n        mbedtls_free( conf->psk );\n        conf->psk = NULL;\n        conf->psk_len = 0;\n    }\n    if( conf->psk_identity != NULL )\n    {\n        mbedtls_free( conf->psk_identity );\n        conf->psk_identity = NULL;\n        conf->psk_identity_len = 0;\n    }\n\n    if( ( conf->psk = mbedtls_calloc( 1, psk_len ) ) == NULL ||\n        ( conf->psk_identity = mbedtls_calloc( 1, psk_identity_len ) ) == NULL )\n    {\n        mbedtls_free( conf->psk );\n        mbedtls_free( conf->psk_identity );\n        conf->psk = NULL;\n        conf->psk_identity = NULL;\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n    }\n\n    conf->psk_len = psk_len;\n    conf->psk_identity_len = psk_identity_len;\n\n    memcpy( conf->psk, psk, conf->psk_len );\n    memcpy( conf->psk_identity, psk_identity, conf->psk_identity_len );\n\n    return( 0 );\n}\n\nint mbedtls_ssl_set_hs_psk( mbedtls_ssl_context *ssl,\n                            const unsigned char *psk, size_t psk_len )\n{\n    if( psk == NULL || ssl->handshake == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    if( psk_len > MBEDTLS_PSK_MAX_LEN )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    if( ssl->handshake->psk != NULL )\n    {\n        mbedtls_zeroize( ssl->handshake->psk, ssl->handshake->psk_len );\n        mbedtls_free( ssl->handshake->psk );\n        ssl->handshake->psk_len = 0;\n    }\n\n    if( ( ssl->handshake->psk = mbedtls_calloc( 1, psk_len ) ) == NULL )\n        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n\n    ssl->handshake->psk_len = psk_len;\n    memcpy( ssl->handshake->psk, psk, ssl->handshake->psk_len );\n\n    return( 0 );\n}\n\nvoid mbedtls_ssl_conf_psk_cb( mbedtls_ssl_config *conf,\n                     int (*f_psk)(void *, mbedtls_ssl_context *, const unsigned char *,\n                     size_t),\n                     void *p_psk )\n{\n    conf->f_psk = f_psk;\n    conf->p_psk = p_psk;\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)\n\n#if !defined(MBEDTLS_DEPRECATED_REMOVED)\nint mbedtls_ssl_conf_dh_param( mbedtls_ssl_config *conf, const char *dhm_P, const char *dhm_G )\n{\n    int ret;\n\n    if( ( ret = mbedtls_mpi_read_string( &conf->dhm_P, 16, dhm_P ) ) != 0 ||\n        ( ret = mbedtls_mpi_read_string( &conf->dhm_G, 16, dhm_G ) ) != 0 )\n    {\n        mbedtls_mpi_free( &conf->dhm_P );\n        mbedtls_mpi_free( &conf->dhm_G );\n        return( ret );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_DEPRECATED_REMOVED */\n\nint mbedtls_ssl_conf_dh_param_bin( mbedtls_ssl_config *conf,\n                                   const unsigned char *dhm_P, size_t P_len,\n                                   const unsigned char *dhm_G, size_t G_len )\n{\n    int ret;\n\n    if( ( ret = mbedtls_mpi_read_binary( &conf->dhm_P, dhm_P, P_len ) ) != 0 ||\n        ( ret = mbedtls_mpi_read_binary( &conf->dhm_G, dhm_G, G_len ) ) != 0 )\n    {\n        mbedtls_mpi_free( &conf->dhm_P );\n        mbedtls_mpi_free( &conf->dhm_G );\n        return( ret );\n    }\n\n    return( 0 );\n}\n\nint mbedtls_ssl_conf_dh_param_ctx( mbedtls_ssl_config *conf, mbedtls_dhm_context *dhm_ctx )\n{\n    int ret;\n\n    if( ( ret = mbedtls_mpi_copy( &conf->dhm_P, &dhm_ctx->P ) ) != 0 ||\n        ( ret = mbedtls_mpi_copy( &conf->dhm_G, &dhm_ctx->G ) ) != 0 )\n    {\n        mbedtls_mpi_free( &conf->dhm_P );\n        mbedtls_mpi_free( &conf->dhm_G );\n        return( ret );\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_DHM_C && MBEDTLS_SSL_SRV_C */\n\n#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)\n/*\n * Set the minimum length for Diffie-Hellman parameters\n */\nvoid mbedtls_ssl_conf_dhm_min_bitlen( mbedtls_ssl_config *conf,\n                                      unsigned int bitlen )\n{\n    conf->dhm_min_bitlen = bitlen;\n}\n#endif /* MBEDTLS_DHM_C && MBEDTLS_SSL_CLI_C */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n/*\n * Set allowed/preferred hashes for handshake signatures\n */\nvoid mbedtls_ssl_conf_sig_hashes( mbedtls_ssl_config *conf,\n                                  const int *hashes )\n{\n    conf->sig_hashes = hashes;\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_ECP_C)\n/*\n * Set the allowed elliptic curves\n */\nvoid mbedtls_ssl_conf_curves( mbedtls_ssl_config *conf,\n                             const mbedtls_ecp_group_id *curve_list )\n{\n    conf->curve_list = curve_list;\n}\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nint mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )\n{\n    /* Initialize to suppress unnecessary compiler warning */\n    size_t hostname_len = 0;\n\n    /* Check if new hostname is valid before\n     * making any change to current one */\n    if( hostname != NULL )\n    {\n        hostname_len = strlen( hostname );\n\n        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    /* Now it's clear that we will overwrite the old hostname,\n     * so we can free it safely */\n\n    if( ssl->hostname != NULL )\n    {\n        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );\n        mbedtls_free( ssl->hostname );\n    }\n\n    /* Passing NULL as hostname shall clear the old one */\n\n    if( hostname == NULL )\n    {\n        ssl->hostname = NULL;\n    }\n    else\n    {\n        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );\n        if( ssl->hostname == NULL )\n            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );\n\n        memcpy( ssl->hostname, hostname, hostname_len );\n\n        ssl->hostname[hostname_len] = '\\0';\n    }\n\n    return( 0 );\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\nvoid mbedtls_ssl_conf_sni( mbedtls_ssl_config *conf,\n                  int (*f_sni)(void *, mbedtls_ssl_context *,\n                                const unsigned char *, size_t),\n                  void *p_sni )\n{\n    conf->f_sni = f_sni;\n    conf->p_sni = p_sni;\n}\n#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\n#if defined(MBEDTLS_SSL_ALPN)\nint mbedtls_ssl_conf_alpn_protocols( mbedtls_ssl_config *conf, const char **protos )\n{\n    size_t cur_len, tot_len;\n    const char **p;\n\n    /*\n     * RFC 7301 3.1: \"Empty strings MUST NOT be included and byte strings\n     * MUST NOT be truncated.\"\n     * We check lengths now rather than later.\n     */\n    tot_len = 0;\n    for( p = protos; *p != NULL; p++ )\n    {\n        cur_len = strlen( *p );\n        tot_len += cur_len;\n\n        if( cur_len == 0 || cur_len > 255 || tot_len > 65535 )\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    conf->alpn_list = protos;\n\n    return( 0 );\n}\n\nconst char *mbedtls_ssl_get_alpn_protocol( const mbedtls_ssl_context *ssl )\n{\n    return( ssl->alpn_chosen );\n}\n#endif /* MBEDTLS_SSL_ALPN */\n\nvoid mbedtls_ssl_conf_max_version( mbedtls_ssl_config *conf, int major, int minor )\n{\n    conf->max_major_ver = major;\n    conf->max_minor_ver = minor;\n}\n\nvoid mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )\n{\n    conf->min_major_ver = major;\n    conf->min_minor_ver = minor;\n}\n\n#if defined(MBEDTLS_SSL_FALLBACK_SCSV) && defined(MBEDTLS_SSL_CLI_C)\nvoid mbedtls_ssl_conf_fallback( mbedtls_ssl_config *conf, char fallback )\n{\n    conf->fallback = fallback;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_SRV_C)\nvoid mbedtls_ssl_conf_cert_req_ca_list( mbedtls_ssl_config *conf,\n                                          char cert_req_ca_list )\n{\n    conf->cert_req_ca_list = cert_req_ca_list;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\nvoid mbedtls_ssl_conf_encrypt_then_mac( mbedtls_ssl_config *conf, char etm )\n{\n    conf->encrypt_then_mac = etm;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\nvoid mbedtls_ssl_conf_extended_master_secret( mbedtls_ssl_config *conf, char ems )\n{\n    conf->extended_ms = ems;\n}\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\nvoid mbedtls_ssl_conf_arc4_support( mbedtls_ssl_config *conf, char arc4 )\n{\n    conf->arc4_disabled = arc4;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nint mbedtls_ssl_conf_max_frag_len( mbedtls_ssl_config *conf, unsigned char mfl_code )\n{\n    if( mfl_code >= MBEDTLS_SSL_MAX_FRAG_LEN_INVALID ||\n        mfl_code_to_length[mfl_code] > MBEDTLS_SSL_MAX_CONTENT_LEN )\n    {\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    conf->mfl_code = mfl_code;\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)\nvoid mbedtls_ssl_conf_truncated_hmac( mbedtls_ssl_config *conf, int truncate )\n{\n    conf->trunc_hmac = truncate;\n}\n#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */\n\n#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)\nvoid mbedtls_ssl_conf_cbc_record_splitting( mbedtls_ssl_config *conf, char split )\n{\n    conf->cbc_record_splitting = split;\n}\n#endif\n\nvoid mbedtls_ssl_conf_legacy_renegotiation( mbedtls_ssl_config *conf, int allow_legacy )\n{\n    conf->allow_legacy_renegotiation = allow_legacy;\n}\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\nvoid mbedtls_ssl_conf_renegotiation( mbedtls_ssl_config *conf, int renegotiation )\n{\n    conf->disable_renegotiation = renegotiation;\n}\n\nvoid mbedtls_ssl_conf_renegotiation_enforced( mbedtls_ssl_config *conf, int max_records )\n{\n    conf->renego_max_records = max_records;\n}\n\nvoid mbedtls_ssl_conf_renegotiation_period( mbedtls_ssl_config *conf,\n                                   const unsigned char period[8] )\n{\n    memcpy( conf->renego_period, period, 8 );\n}\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n#if defined(MBEDTLS_SSL_CLI_C)\nvoid mbedtls_ssl_conf_session_tickets( mbedtls_ssl_config *conf, int use_tickets )\n{\n    conf->session_tickets = use_tickets;\n}\n#endif\n\n#if defined(MBEDTLS_SSL_SRV_C)\nvoid mbedtls_ssl_conf_session_tickets_cb( mbedtls_ssl_config *conf,\n        mbedtls_ssl_ticket_write_t *f_ticket_write,\n        mbedtls_ssl_ticket_parse_t *f_ticket_parse,\n        void *p_ticket )\n{\n    conf->f_ticket_write = f_ticket_write;\n    conf->f_ticket_parse = f_ticket_parse;\n    conf->p_ticket       = p_ticket;\n}\n#endif\n#endif /* MBEDTLS_SSL_SESSION_TICKETS */\n\n#if defined(MBEDTLS_SSL_EXPORT_KEYS)\nvoid mbedtls_ssl_conf_export_keys_cb( mbedtls_ssl_config *conf,\n        mbedtls_ssl_export_keys_t *f_export_keys,\n        void *p_export_keys )\n{\n    conf->f_export_keys = f_export_keys;\n    conf->p_export_keys = p_export_keys;\n}\n#endif\n\n/*\n * SSL get accessors\n */\nsize_t mbedtls_ssl_get_bytes_avail( const mbedtls_ssl_context *ssl )\n{\n    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );\n}\n\nuint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )\n{\n    if( ssl->session != NULL )\n        return( ssl->session->verify_result );\n\n    if( ssl->session_negotiate != NULL )\n        return( ssl->session_negotiate->verify_result );\n\n    return( 0xFFFFFFFF );\n}\n\nconst char *mbedtls_ssl_get_ciphersuite( const mbedtls_ssl_context *ssl )\n{\n    if( ssl == NULL || ssl->session == NULL )\n        return( NULL );\n\n    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );\n}\n\nconst char *mbedtls_ssl_get_version( const mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        switch( ssl->minor_ver )\n        {\n            case MBEDTLS_SSL_MINOR_VERSION_2:\n                return( \"DTLSv1.0\" );\n\n            case MBEDTLS_SSL_MINOR_VERSION_3:\n                return( \"DTLSv1.2\" );\n\n            default:\n                return( \"unknown (DTLS)\" );\n        }\n    }\n#endif\n\n    switch( ssl->minor_ver )\n    {\n        case MBEDTLS_SSL_MINOR_VERSION_0:\n            return( \"SSLv3.0\" );\n\n        case MBEDTLS_SSL_MINOR_VERSION_1:\n            return( \"TLSv1.0\" );\n\n        case MBEDTLS_SSL_MINOR_VERSION_2:\n            return( \"TLSv1.1\" );\n\n        case MBEDTLS_SSL_MINOR_VERSION_3:\n            return( \"TLSv1.2\" );\n\n        default:\n            return( \"unknown\" );\n    }\n}\n\nint mbedtls_ssl_get_record_expansion( const mbedtls_ssl_context *ssl )\n{\n    size_t transform_expansion;\n    const mbedtls_ssl_transform *transform = ssl->transform_out;\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    if( ssl->session_out->compression != MBEDTLS_SSL_COMPRESS_NULL )\n        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );\n#endif\n\n    if( transform == NULL )\n        return( (int) mbedtls_ssl_hdr_len( ssl ) );\n\n    switch( mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc ) )\n    {\n        case MBEDTLS_MODE_GCM:\n        case MBEDTLS_MODE_CCM:\n        case MBEDTLS_MODE_STREAM:\n            transform_expansion = transform->minlen;\n            break;\n\n        case MBEDTLS_MODE_CBC:\n            transform_expansion = transform->maclen\n                      + mbedtls_cipher_get_block_size( &transform->cipher_ctx_enc );\n            break;\n\n        default:\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n    return( (int)( mbedtls_ssl_hdr_len( ssl ) + transform_expansion ) );\n}\n\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\nsize_t mbedtls_ssl_get_max_frag_len( const mbedtls_ssl_context *ssl )\n{\n    size_t max_len;\n\n    /*\n     * Assume mfl_code is correct since it was checked when set\n     */\n    max_len = mfl_code_to_length[ssl->conf->mfl_code];\n\n    /*\n     * Check if a smaller max length was negotiated\n     */\n    if( ssl->session_out != NULL &&\n        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )\n    {\n        max_len = mfl_code_to_length[ssl->session_out->mfl_code];\n    }\n\n    return max_len;\n}\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nconst mbedtls_x509_crt *mbedtls_ssl_get_peer_cert( const mbedtls_ssl_context *ssl )\n{\n    if( ssl == NULL || ssl->session == NULL )\n        return( NULL );\n\n    return( ssl->session->peer_cert );\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n#if defined(MBEDTLS_SSL_CLI_C)\nint mbedtls_ssl_get_session( const mbedtls_ssl_context *ssl, mbedtls_ssl_session *dst )\n{\n    if( ssl == NULL ||\n        dst == NULL ||\n        ssl->session == NULL ||\n        ssl->conf->endpoint != MBEDTLS_SSL_IS_CLIENT )\n    {\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n    }\n\n    return( ssl_session_copy( dst, ssl->session ) );\n}\n#endif /* MBEDTLS_SSL_CLI_C */\n\n/*\n * Perform a single step of the SSL handshake\n */\nint mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n\n    if( ssl == NULL || ssl->conf == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n#if defined(MBEDTLS_SSL_CLI_C)\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )\n        ret = mbedtls_ssl_handshake_client_step( ssl );\n#endif\n#if defined(MBEDTLS_SSL_SRV_C)\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )\n        ret = mbedtls_ssl_handshake_server_step( ssl );\n#endif\n\n    return( ret );\n}\n\n/*\n * Perform the SSL handshake\n */\nint mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )\n{\n    int ret = 0;\n\n    if( ssl == NULL || ssl->conf == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> handshake\" ) );\n\n    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )\n    {\n        ret = mbedtls_ssl_handshake_step( ssl );\n\n        if( ret != 0 )\n            break;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= handshake\" ) );\n\n    return( ret );\n}\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n#if defined(MBEDTLS_SSL_SRV_C)\n/*\n * Write HelloRequest to request renegotiation on server\n */\nstatic int ssl_write_hello_request( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write hello request\" ) );\n\n    ssl->out_msglen  = 4;\n    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;\n    ssl->out_msg[0]  = MBEDTLS_SSL_HS_HELLO_REQUEST;\n\n    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write hello request\" ) );\n\n    return( 0 );\n}\n#endif /* MBEDTLS_SSL_SRV_C */\n\n/*\n * Actually renegotiate current connection, triggered by either:\n * - any side: calling mbedtls_ssl_renegotiate(),\n * - client: receiving a HelloRequest during mbedtls_ssl_read(),\n * - server: receiving any handshake message on server during mbedtls_ssl_read() after\n *   the initial handshake is completed.\n * If the handshake doesn't complete due to waiting for I/O, it will continue\n * during the next calls to mbedtls_ssl_renegotiate() or mbedtls_ssl_read() respectively.\n */\nstatic int ssl_start_renegotiation( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> renegotiate\" ) );\n\n    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )\n        return( ret );\n\n    /* RFC 6347 4.2.2: \"[...] the HelloRequest will have message_seq = 0 and\n     * the ServerHello will have message_seq = 1\" */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )\n    {\n        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )\n            ssl->handshake->out_msg_seq = 1;\n        else\n            ssl->handshake->in_msg_seq = 1;\n    }\n#endif\n\n    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;\n    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;\n\n    if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_handshake\", ret );\n        return( ret );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= renegotiate\" ) );\n\n    return( 0 );\n}\n\n/*\n * Renegotiate current connection on client,\n * or request renegotiation on server\n */\nint mbedtls_ssl_renegotiate( mbedtls_ssl_context *ssl )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n\n    if( ssl == NULL || ssl->conf == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n#if defined(MBEDTLS_SSL_SRV_C)\n    /* On server, just send the request */\n    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )\n    {\n        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n        ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_PENDING;\n\n        /* Did we already try/start sending HelloRequest? */\n        if( ssl->out_left != 0 )\n            return( mbedtls_ssl_flush_output( ssl ) );\n\n        return( ssl_write_hello_request( ssl ) );\n    }\n#endif /* MBEDTLS_SSL_SRV_C */\n\n#if defined(MBEDTLS_SSL_CLI_C)\n    /*\n     * On client, either start the renegotiation process or,\n     * if already in progress, continue the handshake\n     */\n    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )\n    {\n        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n        if( ( ret = ssl_start_renegotiation( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_start_renegotiation\", ret );\n            return( ret );\n        }\n    }\n    else\n    {\n        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_handshake\", ret );\n            return( ret );\n        }\n    }\n#endif /* MBEDTLS_SSL_CLI_C */\n\n    return( ret );\n}\n\n/*\n * Check record counters and renegotiate if they're above the limit.\n */\nstatic int ssl_check_ctr_renegotiate( mbedtls_ssl_context *ssl )\n{\n    size_t ep_len = ssl_ep_len( ssl );\n    int in_ctr_cmp;\n    int out_ctr_cmp;\n\n    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||\n        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING ||\n        ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED )\n    {\n        return( 0 );\n    }\n\n    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,\n                        ssl->conf->renego_period + ep_len, 8 - ep_len );\n    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,\n                          ssl->conf->renego_period + ep_len, 8 - ep_len );\n\n    if( in_ctr_cmp <= 0 && out_ctr_cmp <= 0 )\n    {\n        return( 0 );\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"record counter limit reached: renegotiate\" ) );\n    return( mbedtls_ssl_renegotiate( ssl ) );\n}\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n/*\n * Receive application data decrypted from the SSL layer\n */\nint mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )\n{\n    int ret;\n    size_t n;\n\n    if( ssl == NULL || ssl->conf == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> read\" ) );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )\n            return( ret );\n\n        if( ssl->handshake != NULL &&\n            ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )\n        {\n            if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )\n                return( ret );\n        }\n    }\n#endif\n\n    /*\n     * Check if renegotiation is necessary and/or handshake is\n     * in process. If yes, perform/continue, and fall through\n     * if an unexpected packet is received while the client\n     * is waiting for the ServerHello.\n     *\n     * (There is no equivalent to the last condition on\n     *  the server-side as it is not treated as within\n     *  a handshake while waiting for the ClientHello\n     *  after a renegotiation request.)\n     */\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    ret = ssl_check_ctr_renegotiate( ssl );\n    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&\n        ret != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_check_ctr_renegotiate\", ret );\n        return( ret );\n    }\n#endif\n\n    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )\n    {\n        ret = mbedtls_ssl_handshake( ssl );\n        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&\n            ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_handshake\", ret );\n            return( ret );\n        }\n    }\n\n    /*\n     * TODO\n     *\n     * The logic should be streamlined here:\n     *\n     * Instead of\n     *\n     * - Manually checking whether ssl->in_offt is NULL\n     * - Fetching a new record if yes\n     * - Setting ssl->in_offt if one finds an application record\n     * - Resetting keep_current_message after handling the application data\n     *\n     * one should\n     *\n     * - Adapt read_record to set ssl->in_offt automatically\n     *   when a new application data record is processed.\n     * - Always call mbedtls_ssl_read_record here.\n     *\n     * This way, the logic of ssl_read would be much clearer:\n     *\n     * (1) Always call record layer and see what kind of record is on\n     *     and have it ready for consumption (in particular, in_offt\n     *     properly set for application data records).\n     * (2) If it's application data (either freshly fetched\n     *     or something already being partially processed),\n     *     serve the read request from it.\n     * (3) If it's something different from application data,\n     *     handle it accordingly, e.g. potentially start a\n     *     renegotiation.\n     *\n     * This will also remove the need to manually reset\n     * ssl->keep_current_message = 0 below.\n     *\n     */\n\n    if( ssl->in_offt == NULL )\n    {\n        /* Start timer if not already running */\n        if( ssl->f_get_timer != NULL &&\n            ssl->f_get_timer( ssl->p_timer ) == -1 )\n        {\n            ssl_set_timer( ssl, ssl->conf->read_timeout );\n        }\n\n        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n        {\n            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )\n                return( 0 );\n\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n            return( ret );\n        }\n\n        if( ssl->in_msglen  == 0 &&\n            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )\n        {\n            /*\n             * OpenSSL sends empty messages to randomize the IV\n             */\n            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n            {\n                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )\n                    return( 0 );\n\n                MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n                return( ret );\n            }\n        }\n\n        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"received handshake message\" ) );\n\n            /*\n             * - For client-side, expect SERVER_HELLO_REQUEST.\n             * - For server-side, expect CLIENT_HELLO.\n             * - Fail (TLS) or silently drop record (DTLS) in other cases.\n             */\n\n#if defined(MBEDTLS_SSL_CLI_C)\n            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&\n                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||\n                  ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ) )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"handshake received (not HelloRequest)\" ) );\n\n                /* With DTLS, drop the packet (probably from last handshake) */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n                    return( MBEDTLS_ERR_SSL_WANT_READ );\n#endif\n                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n            }\n#endif /* MBEDTLS_SSL_CLI_C */\n\n#if defined(MBEDTLS_SSL_SRV_C)\n            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&\n                ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"handshake received (not ClientHello)\" ) );\n\n                /* With DTLS, drop the packet (probably from last handshake) */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n                    return( MBEDTLS_ERR_SSL_WANT_READ );\n#endif\n                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n            }\n#endif /* MBEDTLS_SSL_SRV_C */\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n            /* Determine whether renegotiation attempt should be accepted */\n            if( ! ( ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED ||\n                    ( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&\n                      ssl->conf->allow_legacy_renegotiation ==\n                                                   MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION ) ) )\n            {\n                /*\n                 * Accept renegotiation request\n                 */\n\n                /* DTLS clients need to know renego is server-initiated */\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&\n                    ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )\n                {\n                    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_PENDING;\n                }\n#endif\n                ret = ssl_start_renegotiation( ssl );\n                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&\n                    ret != 0 )\n                {\n                    MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_start_renegotiation\", ret );\n                    return( ret );\n                }\n            }\n            else\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n            {\n                /*\n                 * Refuse renegotiation\n                 */\n\n                MBEDTLS_SSL_DEBUG_MSG( 3, ( \"refusing renegotiation, sending alert\" ) );\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3)\n                if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )\n                {\n                    /* SSLv3 does not have a \"no_renegotiation\" warning, so\n                       we send a fatal alert and abort the connection. */\n                    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n                    return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n                }\n                else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )\n                {\n                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,\n                                    MBEDTLS_SSL_ALERT_LEVEL_WARNING,\n                                    MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION ) ) != 0 )\n                    {\n                        return( ret );\n                    }\n                }\n                else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n                {\n                    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n                }\n            }\n\n            return( MBEDTLS_ERR_SSL_WANT_READ );\n        }\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n        else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )\n        {\n            if( ssl->conf->renego_max_records >= 0 )\n            {\n                if( ++ssl->renego_records_seen > ssl->conf->renego_max_records )\n                {\n                    MBEDTLS_SSL_DEBUG_MSG( 1, ( \"renegotiation requested, \"\n                                        \"but not honored by client\" ) );\n                    return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n                }\n            }\n        }\n#endif /* MBEDTLS_SSL_RENEGOTIATION */\n\n        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */\n        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"ignoring non-fatal non-closure alert\" ) );\n            return( MBEDTLS_ERR_SSL_WANT_READ );\n        }\n\n        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad application data message\" ) );\n            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n        }\n\n        ssl->in_offt = ssl->in_msg;\n\n        /* We're going to return something now, cancel timer,\n         * except if handshake (renegotiation) is in progress */\n        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )\n            ssl_set_timer( ssl, 0 );\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        /* If we requested renego but received AppData, resend HelloRequest.\n         * Do it now, after setting in_offt, to avoid taking this branch\n         * again if ssl_write_hello_request() returns WANT_WRITE */\n#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)\n        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&\n            ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )\n        {\n            if( ( ret = ssl_resend_hello_request( ssl ) ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_resend_hello_request\", ret );\n                return( ret );\n            }\n        }\n#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */\n#endif /* MBEDTLS_SSL_PROTO_DTLS */\n    }\n\n    n = ( len < ssl->in_msglen )\n        ? len : ssl->in_msglen;\n\n    memcpy( buf, ssl->in_offt, n );\n    ssl->in_msglen -= n;\n\n    if( ssl->in_msglen == 0 )\n    {\n        /* all bytes consumed */\n        ssl->in_offt = NULL;\n        ssl->keep_current_message = 0;\n    }\n    else\n    {\n        /* more data available */\n        ssl->in_offt += n;\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= read\" ) );\n\n    return( (int) n );\n}\n\n/*\n * Send application data to be encrypted by the SSL layer,\n * taking care of max fragment length and buffer size\n */\nstatic int ssl_write_real( mbedtls_ssl_context *ssl,\n                           const unsigned char *buf, size_t len )\n{\n    int ret;\n#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)\n    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );\n#else\n    size_t max_len = MBEDTLS_SSL_MAX_CONTENT_LEN;\n#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */\n    if( len > max_len )\n    {\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"fragment larger than the (negotiated) \"\n                                \"maximum fragment length: %d > %d\",\n                                len, max_len ) );\n            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n        }\n        else\n#endif\n            len = max_len;\n    }\n\n    if( ssl->out_left != 0 )\n    {\n        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_flush_output\", ret );\n            return( ret );\n        }\n    }\n    else\n    {\n        ssl->out_msglen  = len;\n        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;\n        memcpy( ssl->out_msg, buf, len );\n\n        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_write_record\", ret );\n            return( ret );\n        }\n    }\n\n    return( (int) len );\n}\n\n/*\n * Write application data, doing 1/n-1 splitting if necessary.\n *\n * With non-blocking I/O, ssl_write_real() may return WANT_WRITE,\n * then the caller will call us again with the same arguments, so\n * remember whether we already did the split or not.\n */\n#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)\nstatic int ssl_write_split( mbedtls_ssl_context *ssl,\n                            const unsigned char *buf, size_t len )\n{\n    int ret;\n\n    if( ssl->conf->cbc_record_splitting ==\n            MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED ||\n        len <= 1 ||\n        ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_1 ||\n        mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc )\n                                != MBEDTLS_MODE_CBC )\n    {\n        return( ssl_write_real( ssl, buf, len ) );\n    }\n\n    if( ssl->split_done == 0 )\n    {\n        if( ( ret = ssl_write_real( ssl, buf, 1 ) ) <= 0 )\n            return( ret );\n        ssl->split_done = 1;\n    }\n\n    if( ( ret = ssl_write_real( ssl, buf + 1, len - 1 ) ) <= 0 )\n        return( ret );\n    ssl->split_done = 0;\n\n    return( ret + 1 );\n}\n#endif /* MBEDTLS_SSL_CBC_RECORD_SPLITTING */\n\n/*\n * Write application data (public-facing wrapper)\n */\nint mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )\n{\n    int ret;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write\" ) );\n\n    if( ssl == NULL || ssl->conf == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_check_ctr_renegotiate\", ret );\n        return( ret );\n    }\n#endif\n\n    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )\n    {\n        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_handshake\", ret );\n            return( ret );\n        }\n    }\n\n#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)\n    ret = ssl_write_split( ssl, buf, len );\n#else\n    ret = ssl_write_real( ssl, buf, len );\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write\" ) );\n\n    return( ret );\n}\n\n/*\n * Notify the peer that the connection is being closed\n */\nint mbedtls_ssl_close_notify( mbedtls_ssl_context *ssl )\n{\n    int ret;\n\n    if( ssl == NULL || ssl->conf == NULL )\n        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> write close notify\" ) );\n\n    if( ssl->out_left != 0 )\n        return( mbedtls_ssl_flush_output( ssl ) );\n\n    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )\n    {\n        if( ( ret = mbedtls_ssl_send_alert_message( ssl,\n                        MBEDTLS_SSL_ALERT_LEVEL_WARNING,\n                        MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_send_alert_message\", ret );\n            return( ret );\n        }\n    }\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= write close notify\" ) );\n\n    return( 0 );\n}\n\nvoid mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )\n{\n    if( transform == NULL )\n        return;\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    deflateEnd( &transform->ctx_deflate );\n    inflateEnd( &transform->ctx_inflate );\n#endif\n\n    mbedtls_cipher_free( &transform->cipher_ctx_enc );\n    mbedtls_cipher_free( &transform->cipher_ctx_dec );\n\n    mbedtls_md_free( &transform->md_ctx_enc );\n    mbedtls_md_free( &transform->md_ctx_dec );\n\n    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );\n}\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nstatic void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )\n{\n    mbedtls_ssl_key_cert *cur = key_cert, *next;\n\n    while( cur != NULL )\n    {\n        next = cur->next;\n        mbedtls_free( cur );\n        cur = next;\n    }\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\nvoid mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )\n{\n    if( handshake == NULL )\n        return;\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n    mbedtls_md5_free(    &handshake->fin_md5  );\n    mbedtls_sha1_free(   &handshake->fin_sha1 );\n#endif\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n#if defined(MBEDTLS_SHA256_C)\n    mbedtls_sha256_free(   &handshake->fin_sha256    );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n    mbedtls_sha512_free(   &handshake->fin_sha512    );\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#if defined(MBEDTLS_DHM_C)\n    mbedtls_dhm_free( &handshake->dhm_ctx );\n#endif\n#if defined(MBEDTLS_ECDH_C)\n    mbedtls_ecdh_free( &handshake->ecdh_ctx );\n#endif\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    mbedtls_ecjpake_free( &handshake->ecjpake_ctx );\n#if defined(MBEDTLS_SSL_CLI_C)\n    mbedtls_free( handshake->ecjpake_cache );\n    handshake->ecjpake_cache = NULL;\n    handshake->ecjpake_cache_len = 0;\n#endif\n#endif\n\n#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    /* explicit void pointer cast for buggy MS compiler */\n    mbedtls_free( (void *) handshake->curves );\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    if( handshake->psk != NULL )\n    {\n        mbedtls_zeroize( handshake->psk, handshake->psk_len );\n        mbedtls_free( handshake->psk );\n    }\n#endif\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C) && \\\n    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)\n    /*\n     * Free only the linked list wrapper, not the keys themselves\n     * since the belong to the SNI callback\n     */\n    if( handshake->sni_key_cert != NULL )\n    {\n        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;\n\n        while( cur != NULL )\n        {\n            next = cur->next;\n            mbedtls_free( cur );\n            cur = next;\n        }\n    }\n#endif /* MBEDTLS_X509_CRT_PARSE_C && MBEDTLS_SSL_SERVER_NAME_INDICATION */\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    mbedtls_free( handshake->verify_cookie );\n    mbedtls_free( handshake->hs_msg );\n    ssl_flight_free( handshake->flight );\n#endif\n\n    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );\n}\n\nvoid mbedtls_ssl_session_free( mbedtls_ssl_session *session )\n{\n    if( session == NULL )\n        return;\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n    if( session->peer_cert != NULL )\n    {\n        mbedtls_x509_crt_free( session->peer_cert );\n        mbedtls_free( session->peer_cert );\n    }\n#endif\n\n#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)\n    mbedtls_free( session->ticket );\n#endif\n\n    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );\n}\n\n/*\n * Free an SSL context\n */\nvoid mbedtls_ssl_free( mbedtls_ssl_context *ssl )\n{\n    if( ssl == NULL )\n        return;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> free\" ) );\n\n    if( ssl->out_buf != NULL )\n    {\n        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );\n        mbedtls_free( ssl->out_buf );\n    }\n\n    if( ssl->in_buf != NULL )\n    {\n        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );\n        mbedtls_free( ssl->in_buf );\n    }\n\n#if defined(MBEDTLS_ZLIB_SUPPORT)\n    if( ssl->compress_buf != NULL )\n    {\n        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );\n        mbedtls_free( ssl->compress_buf );\n    }\n#endif\n\n    if( ssl->transform )\n    {\n        mbedtls_ssl_transform_free( ssl->transform );\n        mbedtls_free( ssl->transform );\n    }\n\n    if( ssl->handshake )\n    {\n        mbedtls_ssl_handshake_free( ssl->handshake );\n        mbedtls_ssl_transform_free( ssl->transform_negotiate );\n        mbedtls_ssl_session_free( ssl->session_negotiate );\n\n        mbedtls_free( ssl->handshake );\n        mbedtls_free( ssl->transform_negotiate );\n        mbedtls_free( ssl->session_negotiate );\n    }\n\n    if( ssl->session )\n    {\n        mbedtls_ssl_session_free( ssl->session );\n        mbedtls_free( ssl->session );\n    }\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n    if( ssl->hostname != NULL )\n    {\n        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );\n        mbedtls_free( ssl->hostname );\n    }\n#endif\n\n#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)\n    if( mbedtls_ssl_hw_record_finish != NULL )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"going for mbedtls_ssl_hw_record_finish()\" ) );\n        mbedtls_ssl_hw_record_finish( ssl );\n    }\n#endif\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)\n    mbedtls_free( ssl->cli_id );\n#endif\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= free\" ) );\n\n    /* Actually clear after last debug message */\n    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );\n}\n\n/*\n * Initialze mbedtls_ssl_config\n */\nvoid mbedtls_ssl_config_init( mbedtls_ssl_config *conf )\n{\n    memset( conf, 0, sizeof( mbedtls_ssl_config ) );\n}\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\nstatic int ssl_preset_default_hashes[] = {\n#if defined(MBEDTLS_SHA512_C)\n    MBEDTLS_MD_SHA512,\n    MBEDTLS_MD_SHA384,\n#endif\n#if defined(MBEDTLS_SHA256_C)\n    MBEDTLS_MD_SHA256,\n    MBEDTLS_MD_SHA224,\n#endif\n#if defined(MBEDTLS_SHA1_C) && defined(MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE)\n    MBEDTLS_MD_SHA1,\n#endif\n    MBEDTLS_MD_NONE\n};\n#endif\n\nstatic int ssl_preset_suiteb_ciphersuites[] = {\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n    0\n};\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\nstatic int ssl_preset_suiteb_hashes[] = {\n    MBEDTLS_MD_SHA256,\n    MBEDTLS_MD_SHA384,\n    MBEDTLS_MD_NONE\n};\n#endif\n\n#if defined(MBEDTLS_ECP_C)\nstatic mbedtls_ecp_group_id ssl_preset_suiteb_curves[] = {\n    MBEDTLS_ECP_DP_SECP256R1,\n    MBEDTLS_ECP_DP_SECP384R1,\n    MBEDTLS_ECP_DP_NONE\n};\n#endif\n\n/*\n * Load default in mbedtls_ssl_config\n */\nint mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,\n                                 int endpoint, int transport, int preset )\n{\n#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)\n    int ret;\n#endif\n\n    /* Use the functions here so that they are covered in tests,\n     * but otherwise access member directly for efficiency */\n    mbedtls_ssl_conf_endpoint( conf, endpoint );\n    mbedtls_ssl_conf_transport( conf, transport );\n\n    /*\n     * Things that are common to all presets\n     */\n#if defined(MBEDTLS_SSL_CLI_C)\n    if( endpoint == MBEDTLS_SSL_IS_CLIENT )\n    {\n        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;\n#if defined(MBEDTLS_SSL_SESSION_TICKETS)\n        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;\n#endif\n    }\n#endif\n\n#if defined(MBEDTLS_ARC4_C)\n    conf->arc4_disabled = MBEDTLS_SSL_ARC4_DISABLED;\n#endif\n\n#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)\n    conf->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;\n#endif\n\n#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)\n    conf->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;\n#endif\n\n#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)\n    conf->cbc_record_splitting = MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED;\n#endif\n\n#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)\n    conf->f_cookie_write = ssl_cookie_write_dummy;\n    conf->f_cookie_check = ssl_cookie_check_dummy;\n#endif\n\n#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)\n    conf->anti_replay = MBEDTLS_SSL_ANTI_REPLAY_ENABLED;\n#endif\n\n#if defined(MBEDTLS_SSL_SRV_C)\n    conf->cert_req_ca_list = MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED;\n#endif\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    conf->hs_timeout_min = MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN;\n    conf->hs_timeout_max = MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX;\n#endif\n\n#if defined(MBEDTLS_SSL_RENEGOTIATION)\n    conf->renego_max_records = MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT;\n    memset( conf->renego_period,     0x00, 2 );\n    memset( conf->renego_period + 2, 0xFF, 6 );\n#endif\n\n#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)\n            if( endpoint == MBEDTLS_SSL_IS_SERVER )\n            {\n                const unsigned char dhm_p[] =\n                    MBEDTLS_DHM_RFC3526_MODP_2048_P_BIN;\n                const unsigned char dhm_g[] =\n                    MBEDTLS_DHM_RFC3526_MODP_2048_G_BIN;\n\n                if ( ( ret = mbedtls_ssl_conf_dh_param_bin( conf,\n                                               dhm_p, sizeof( dhm_p ),\n                                               dhm_g, sizeof( dhm_g ) ) ) != 0 )\n                {\n                    return( ret );\n                }\n            }\n#endif\n\n    /*\n     * Preset-specific defaults\n     */\n    switch( preset )\n    {\n        /*\n         * NSA Suite B\n         */\n        case MBEDTLS_SSL_PRESET_SUITEB:\n            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;\n            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */\n            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;\n            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;\n\n            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =\n            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =\n            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =\n            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =\n                                   ssl_preset_suiteb_ciphersuites;\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n            conf->sig_hashes = ssl_preset_suiteb_hashes;\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n            conf->curve_list = ssl_preset_suiteb_curves;\n#endif\n            break;\n\n        /*\n         * Default\n         */\n        default:\n            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;\n            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_1; /* TLS 1.0 */\n            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;\n            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;\n\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n            if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n                conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_2;\n#endif\n\n            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =\n            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =\n            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =\n            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =\n                                   mbedtls_ssl_list_ciphersuites();\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n            conf->cert_profile = &mbedtls_x509_crt_profile_default;\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n            conf->sig_hashes = ssl_preset_default_hashes;\n#endif\n\n#if defined(MBEDTLS_ECP_C)\n            conf->curve_list = mbedtls_ecp_grp_id_list();\n#endif\n\n#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)\n            conf->dhm_min_bitlen = 1024;\n#endif\n    }\n\n    return( 0 );\n}\n\n/*\n * Free mbedtls_ssl_config\n */\nvoid mbedtls_ssl_config_free( mbedtls_ssl_config *conf )\n{\n#if defined(MBEDTLS_DHM_C)\n    mbedtls_mpi_free( &conf->dhm_P );\n    mbedtls_mpi_free( &conf->dhm_G );\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    if( conf->psk != NULL )\n    {\n        mbedtls_zeroize( conf->psk, conf->psk_len );\n        mbedtls_zeroize( conf->psk_identity, conf->psk_identity_len );\n        mbedtls_free( conf->psk );\n        mbedtls_free( conf->psk_identity );\n        conf->psk_len = 0;\n        conf->psk_identity_len = 0;\n    }\n#endif\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\n    ssl_key_cert_free( conf->key_cert );\n#endif\n\n    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );\n}\n\n#if defined(MBEDTLS_PK_C) && \\\n    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )\n/*\n * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX\n */\nunsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )\n{\n#if defined(MBEDTLS_RSA_C)\n    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )\n        return( MBEDTLS_SSL_SIG_RSA );\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )\n        return( MBEDTLS_SSL_SIG_ECDSA );\n#endif\n    return( MBEDTLS_SSL_SIG_ANON );\n}\n\nunsigned char mbedtls_ssl_sig_from_pk_alg( mbedtls_pk_type_t type )\n{\n    switch( type ) {\n        case MBEDTLS_PK_RSA:\n            return( MBEDTLS_SSL_SIG_RSA );\n        case MBEDTLS_PK_ECDSA:\n        case MBEDTLS_PK_ECKEY:\n            return( MBEDTLS_SSL_SIG_ECDSA );\n        default:\n            return( MBEDTLS_SSL_SIG_ANON );\n    }\n}\n\nmbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig )\n{\n    switch( sig )\n    {\n#if defined(MBEDTLS_RSA_C)\n        case MBEDTLS_SSL_SIG_RSA:\n            return( MBEDTLS_PK_RSA );\n#endif\n#if defined(MBEDTLS_ECDSA_C)\n        case MBEDTLS_SSL_SIG_ECDSA:\n            return( MBEDTLS_PK_ECDSA );\n#endif\n        default:\n            return( MBEDTLS_PK_NONE );\n    }\n}\n#endif /* MBEDTLS_PK_C && ( MBEDTLS_RSA_C || MBEDTLS_ECDSA_C ) */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \\\n    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n\n/* Find an entry in a signature-hash set matching a given hash algorithm. */\nmbedtls_md_type_t mbedtls_ssl_sig_hash_set_find( mbedtls_ssl_sig_hash_set_t *set,\n                                                 mbedtls_pk_type_t sig_alg )\n{\n    switch( sig_alg )\n    {\n        case MBEDTLS_PK_RSA:\n            return( set->rsa );\n        case MBEDTLS_PK_ECDSA:\n            return( set->ecdsa );\n        default:\n            return( MBEDTLS_MD_NONE );\n    }\n}\n\n/* Add a signature-hash-pair to a signature-hash set */\nvoid mbedtls_ssl_sig_hash_set_add( mbedtls_ssl_sig_hash_set_t *set,\n                                   mbedtls_pk_type_t sig_alg,\n                                   mbedtls_md_type_t md_alg )\n{\n    switch( sig_alg )\n    {\n        case MBEDTLS_PK_RSA:\n            if( set->rsa == MBEDTLS_MD_NONE )\n                set->rsa = md_alg;\n            break;\n\n        case MBEDTLS_PK_ECDSA:\n            if( set->ecdsa == MBEDTLS_MD_NONE )\n                set->ecdsa = md_alg;\n            break;\n\n        default:\n            break;\n    }\n}\n\n/* Allow exactly one hash algorithm for each signature. */\nvoid mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,\n                                          mbedtls_md_type_t md_alg )\n{\n    set->rsa   = md_alg;\n    set->ecdsa = md_alg;\n}\n\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2) &&\n          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n/*\n * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX\n */\nmbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash )\n{\n    switch( hash )\n    {\n#if defined(MBEDTLS_MD5_C)\n        case MBEDTLS_SSL_HASH_MD5:\n            return( MBEDTLS_MD_MD5 );\n#endif\n#if defined(MBEDTLS_SHA1_C)\n        case MBEDTLS_SSL_HASH_SHA1:\n            return( MBEDTLS_MD_SHA1 );\n#endif\n#if defined(MBEDTLS_SHA256_C)\n        case MBEDTLS_SSL_HASH_SHA224:\n            return( MBEDTLS_MD_SHA224 );\n        case MBEDTLS_SSL_HASH_SHA256:\n            return( MBEDTLS_MD_SHA256 );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n        case MBEDTLS_SSL_HASH_SHA384:\n            return( MBEDTLS_MD_SHA384 );\n        case MBEDTLS_SSL_HASH_SHA512:\n            return( MBEDTLS_MD_SHA512 );\n#endif\n        default:\n            return( MBEDTLS_MD_NONE );\n    }\n}\n\n/*\n * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX\n */\nunsigned char mbedtls_ssl_hash_from_md_alg( int md )\n{\n    switch( md )\n    {\n#if defined(MBEDTLS_MD5_C)\n        case MBEDTLS_MD_MD5:\n            return( MBEDTLS_SSL_HASH_MD5 );\n#endif\n#if defined(MBEDTLS_SHA1_C)\n        case MBEDTLS_MD_SHA1:\n            return( MBEDTLS_SSL_HASH_SHA1 );\n#endif\n#if defined(MBEDTLS_SHA256_C)\n        case MBEDTLS_MD_SHA224:\n            return( MBEDTLS_SSL_HASH_SHA224 );\n        case MBEDTLS_MD_SHA256:\n            return( MBEDTLS_SSL_HASH_SHA256 );\n#endif\n#if defined(MBEDTLS_SHA512_C)\n        case MBEDTLS_MD_SHA384:\n            return( MBEDTLS_SSL_HASH_SHA384 );\n        case MBEDTLS_MD_SHA512:\n            return( MBEDTLS_SSL_HASH_SHA512 );\n#endif\n        default:\n            return( MBEDTLS_SSL_HASH_NONE );\n    }\n}\n\n#if defined(MBEDTLS_ECP_C)\n/*\n * Check if a curve proposed by the peer is in our list.\n * Return 0 if we're willing to use it, -1 otherwise.\n */\nint mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )\n{\n    const mbedtls_ecp_group_id *gid;\n\n    if( ssl->conf->curve_list == NULL )\n        return( -1 );\n\n    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )\n        if( *gid == grp_id )\n            return( 0 );\n\n    return( -1 );\n}\n#endif /* MBEDTLS_ECP_C */\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)\n/*\n * Check if a hash proposed by the peer is in our list.\n * Return 0 if we're willing to use it, -1 otherwise.\n */\nint mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,\n                                mbedtls_md_type_t md )\n{\n    const int *cur;\n\n    if( ssl->conf->sig_hashes == NULL )\n        return( -1 );\n\n    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )\n        if( *cur == (int) md )\n            return( 0 );\n\n    return( -1 );\n}\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */\n\n#if defined(MBEDTLS_X509_CRT_PARSE_C)\nint mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,\n                          const mbedtls_ssl_ciphersuite_t *ciphersuite,\n                          int cert_endpoint,\n                          uint32_t *flags )\n{\n    int ret = 0;\n#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)\n    int usage = 0;\n#endif\n#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)\n    const char *ext_oid;\n    size_t ext_len;\n#endif\n\n#if !defined(MBEDTLS_X509_CHECK_KEY_USAGE) &&          \\\n    !defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)\n    ((void) cert);\n    ((void) cert_endpoint);\n    ((void) flags);\n#endif\n\n#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)\n    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )\n    {\n        /* Server part of the key exchange */\n        switch( ciphersuite->key_exchange )\n        {\n            case MBEDTLS_KEY_EXCHANGE_RSA:\n            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:\n                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;\n                break;\n\n            case MBEDTLS_KEY_EXCHANGE_DHE_RSA:\n            case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:\n            case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:\n                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;\n                break;\n\n            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:\n            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:\n                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;\n                break;\n\n            /* Don't use default: we want warnings when adding new values */\n            case MBEDTLS_KEY_EXCHANGE_NONE:\n            case MBEDTLS_KEY_EXCHANGE_PSK:\n            case MBEDTLS_KEY_EXCHANGE_DHE_PSK:\n            case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:\n            case MBEDTLS_KEY_EXCHANGE_ECJPAKE:\n                usage = 0;\n        }\n    }\n    else\n    {\n        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */\n        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;\n    }\n\n    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )\n    {\n        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;\n        ret = -1;\n    }\n#else\n    ((void) ciphersuite);\n#endif /* MBEDTLS_X509_CHECK_KEY_USAGE */\n\n#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)\n    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )\n    {\n        ext_oid = MBEDTLS_OID_SERVER_AUTH;\n        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_SERVER_AUTH );\n    }\n    else\n    {\n        ext_oid = MBEDTLS_OID_CLIENT_AUTH;\n        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );\n    }\n\n    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )\n    {\n        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;\n        ret = -1;\n    }\n#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */\n\n    return( ret );\n}\n#endif /* MBEDTLS_X509_CRT_PARSE_C */\n\n/*\n * Convert version numbers to/from wire format\n * and, for DTLS, to/from TLS equivalent.\n *\n * For TLS this is the identity.\n * For DTLS, use 1's complement (v -> 255 - v, and then map as follows:\n * 1.0 <-> 3.2      (DTLS 1.0 is based on TLS 1.1)\n * 1.x <-> 3.x+1    for x != 0 (DTLS 1.2 based on TLS 1.2)\n */\nvoid mbedtls_ssl_write_version( int major, int minor, int transport,\n                        unsigned char ver[2] )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        if( minor == MBEDTLS_SSL_MINOR_VERSION_2 )\n            --minor; /* DTLS 1.0 stored as TLS 1.1 internally */\n\n        ver[0] = (unsigned char)( 255 - ( major - 2 ) );\n        ver[1] = (unsigned char)( 255 - ( minor - 1 ) );\n    }\n    else\n#else\n    ((void) transport);\n#endif\n    {\n        ver[0] = (unsigned char) major;\n        ver[1] = (unsigned char) minor;\n    }\n}\n\nvoid mbedtls_ssl_read_version( int *major, int *minor, int transport,\n                       const unsigned char ver[2] )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        *major = 255 - ver[0] + 2;\n        *minor = 255 - ver[1] + 1;\n\n        if( *minor == MBEDTLS_SSL_MINOR_VERSION_1 )\n            ++*minor; /* DTLS 1.0 stored as TLS 1.1 internally */\n    }\n    else\n#else\n    ((void) transport);\n#endif\n    {\n        *major = ver[0];\n        *minor = ver[1];\n    }\n}\n\nint mbedtls_ssl_set_calc_verify_md( mbedtls_ssl_context *ssl, int md )\n{\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )\n        return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;\n\n    switch( md )\n    {\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)\n#if defined(MBEDTLS_MD5_C)\n        case MBEDTLS_SSL_HASH_MD5:\n            return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;\n#endif\n#if defined(MBEDTLS_SHA1_C)\n        case MBEDTLS_SSL_HASH_SHA1:\n            ssl->handshake->calc_verify = ssl_calc_verify_tls;\n            break;\n#endif\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SHA512_C)\n        case MBEDTLS_SSL_HASH_SHA384:\n            ssl->handshake->calc_verify = ssl_calc_verify_tls_sha384;\n            break;\n#endif\n#if defined(MBEDTLS_SHA256_C)\n        case MBEDTLS_SSL_HASH_SHA256:\n            ssl->handshake->calc_verify = ssl_calc_verify_tls_sha256;\n            break;\n#endif\n        default:\n            return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;\n    }\n\n    return 0;\n#else /* !MBEDTLS_SSL_PROTO_TLS1_2 */\n    (void) ssl;\n    (void) md;\n\n    return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n}\n\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\nint mbedtls_ssl_get_key_exchange_md_ssl_tls( mbedtls_ssl_context *ssl,\n                                        unsigned char *output,\n                                        unsigned char *data, size_t data_len )\n{\n    int ret = 0;\n    mbedtls_md5_context mbedtls_md5;\n    mbedtls_sha1_context mbedtls_sha1;\n\n    mbedtls_md5_init( &mbedtls_md5 );\n    mbedtls_sha1_init( &mbedtls_sha1 );\n\n    /*\n     * digitally-signed struct {\n     *     opaque md5_hash[16];\n     *     opaque sha_hash[20];\n     * };\n     *\n     * md5_hash\n     *     MD5(ClientHello.random + ServerHello.random\n     *                            + ServerParams);\n     * sha_hash\n     *     SHA(ClientHello.random + ServerHello.random\n     *                            + ServerParams);\n     */\n    if( ( ret = mbedtls_md5_starts_ret( &mbedtls_md5 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md5_starts_ret\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_md5_update_ret( &mbedtls_md5,\n                                        ssl->handshake->randbytes, 64 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md5_update_ret\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_md5_update_ret( &mbedtls_md5, data, data_len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md5_update_ret\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_md5_finish_ret( &mbedtls_md5, output ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md5_finish_ret\", ret );\n        goto exit;\n    }\n\n    if( ( ret = mbedtls_sha1_starts_ret( &mbedtls_sha1 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_sha1_starts_ret\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_sha1_update_ret( &mbedtls_sha1,\n                                         ssl->handshake->randbytes, 64 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_sha1_update_ret\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_sha1_update_ret( &mbedtls_sha1, data,\n                                         data_len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_sha1_update_ret\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_sha1_finish_ret( &mbedtls_sha1,\n                                         output + 16 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_sha1_finish_ret\", ret );\n        goto exit;\n    }\n\nexit:\n    mbedtls_md5_free( &mbedtls_md5 );\n    mbedtls_sha1_free( &mbedtls_sha1 );\n\n    if( ret != 0 )\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n\n    return( ret );\n\n}\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\nint mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,\n                                       unsigned char *output,\n                                       unsigned char *data, size_t data_len,\n                                       mbedtls_md_type_t md_alg )\n{\n    int ret = 0;\n    mbedtls_md_context_t ctx;\n    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );\n\n    mbedtls_md_init( &ctx );\n\n    /*\n     * digitally-signed struct {\n     *     opaque client_random[32];\n     *     opaque server_random[32];\n     *     ServerDHParams params;\n     * };\n     */\n    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md_setup\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md_starts\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md_update\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md_update\", ret );\n        goto exit;\n    }\n    if( ( ret = mbedtls_md_finish( &ctx, output ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_md_finish\", ret );\n        goto exit;\n    }\n\nexit:\n    mbedtls_md_free( &ctx );\n\n    if( ret != 0 )\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );\n\n    return( ret );\n}\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n\n#endif /* MBEDTLS_SSL_TLS_C */\n"]}