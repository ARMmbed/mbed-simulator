// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0, $1, $2) { MbedJSHal.gpio.irq_set($0, $1, $2); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); },
 function($0) { return window.MbedJSHal.sht31.read_temperature($0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24960;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_timedwait() { return 0; }

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "__ZN7LoRaPHY16verify_frequencyEj", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa", "__ZN7LoRaPHY11add_channelEP16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZL12send_messagev", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_394", "__ZN16SX1276_LoRaRadio11radio_resetEv__async_cb", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb_392", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb_393", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_418", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_417", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_419", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_37", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_36", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_81", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_80", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_79", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_22", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_13", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_14", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_15", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_16", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_17", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_21", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_24", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_20", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_19", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_23", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_18", "__ZN16SX1276_LoRaRadio11set_channelEj__async_cb", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_243", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb", "__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_208", "__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_211", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_159", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_158", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_157", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_160", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_156", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_165", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_161", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_162", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_164", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_155", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_163", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_154", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_153", "__ZN16SX1276_LoRaRadio9start_cadEv__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_255", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_252", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_254", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_256", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_253", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_285", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_279", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_284", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_280", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_283", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_281", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_282", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_291", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_290", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_289", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_288", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_287", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_286", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_487", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_440", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_436", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_437", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_438", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_439", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_65", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_64", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_66", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_63", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_61", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_62", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "_handle_lora_downlink__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_312", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_311", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_310", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_251", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_247", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_209", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_196", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_197", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_198", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_199", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_403", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_391", "__ZN4mbed7Timeout7handlerEv__async_cb_366", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue8dispatchEi__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_equeue_dispatch__async_cb", "_equeue_dispatch__async_cb_11", "_equeue_dispatch__async_cb_9", "_equeue_dispatch__async_cb_10", "_equeue_dispatch__async_cb_12", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb_25", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_93", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_94", "__ZN12LoRaWANStackC2Ev__async_cb", "__ZN12LoRaWANStackC2Ev__async_cb_133", "__ZN12LoRaWANStackC2Ev__async_cb_134", "__ZN12LoRaWANStackC2Ev__async_cb_135", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_110", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_117", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_109", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_108", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_113", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_103", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_116", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_104", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_112", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_105", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_115", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_106", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_111", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_107", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_114", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_448", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_447", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_451", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_444", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_453", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_445", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_450", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_446", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_452", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_449", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_409", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_416", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_413", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_408", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_412", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_407", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_411", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_404", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_415", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_405", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_410", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_406", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_414", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_324", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_333", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_332", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_331", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_339", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_313", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_344", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_334", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_314", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_338", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_315", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_343", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_330", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_329", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_328", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_327", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_326", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_316", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_337", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_317", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_342", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_325", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_323", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_318", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_336", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_319", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_341", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_322", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_320", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_335", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_321", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_340", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_379", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_380", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_383", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_381", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_382", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_361", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_362", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_365", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_363", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_364", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_386", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_210", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_143", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_142", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_141", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_239", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_241", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_238", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_237", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_236", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_240", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_235", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_234", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_242", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_101", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_100", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_102", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_455", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_456", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_457", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_458", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_459", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_422", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb_435", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb_425", "__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_515", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_501", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_502", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_503", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_507", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_307", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_258", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb_395", "__ZN7LoRaMacD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_355", "__ZN12radio_eventsD2Ev__async_cb_356", "__ZN12radio_eventsD2Ev__async_cb_357", "__ZN12radio_eventsD2Ev__async_cb_358", "__ZN12radio_eventsD2Ev__async_cb_359", "__ZN12radio_eventsD2Ev__async_cb_360", "__ZN14lorawan_timersD2Ev__async_cb", "__ZN14lorawan_timersD2Ev__async_cb_367", "__ZN14lorawan_timersD2Ev__async_cb_368", "__ZN14lorawan_timersD2Ev__async_cb_369", "__ZN14lorawan_timersD2Ev__async_cb_370", "__ZN7LoRaMac16on_radio_tx_doneEv", "__ZN7LoRaMac14handle_tx_doneEv__async_cb", "__ZN7LoRaMac14handle_tx_doneEv__async_cb_506", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_493", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_498", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_492", "__ZN7LoRaMac25on_rx_window2_timer_eventEv", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_499", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_500", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_497", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_496", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_495", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_494", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_207", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_206", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_200", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_227", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_229", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_226", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_228", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_214", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_215", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_41", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_54", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_60", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_49", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_52", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_48", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_47", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_51", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_50", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_46", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_45", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_44", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_57", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_40", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_56", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_39", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_55", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_38", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_59", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_58", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_43", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_42", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_53", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_31", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_32", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_35", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_33", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_34", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_385", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_293", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_294", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_292", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_277", "__ZN7LoRaMac17on_radio_rx_errorEv", "__ZN7LoRaMac15handle_rx_errorEv__async_cb", "__ZN7LoRaMac15handle_rx_errorEv__async_cb_257", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_272", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_274", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_276", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_273", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_275", "__ZN7LoRaMac19on_radio_rx_timeoutEv", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_126", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_118", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_121", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_123", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_120", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_122", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_119", "__ZN7LoRaMac19on_radio_tx_timeoutEv", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_99", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_88", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_89", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_90", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_91", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_486", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_476", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_475", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_483", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_474", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_482", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_472", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_481", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_465", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_480", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_466", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_470", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_471", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_469", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_473", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_479", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_478", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_467", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_477", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_468", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_461", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_464", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_462", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_463", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_460", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_426", "__ZN7LoRaMac11schedule_txEv__async_cb_432", "__ZN7LoRaMac11schedule_txEv__async_cb_427", "__ZN7LoRaMac11schedule_txEv__async_cb_428", "__ZN7LoRaMac11schedule_txEv__async_cb_429", "__ZN7LoRaMac11schedule_txEv__async_cb_431", "__ZN7LoRaMac11schedule_txEv__async_cb_434", "__ZN7LoRaMac11schedule_txEv__async_cb_430", "__ZN7LoRaMac11schedule_txEv__async_cb_433", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_420", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_421", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_514", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_512", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_513", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_511", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_505", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_490", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_491", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_347", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_350", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_349", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_346", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_348", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_308", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_309", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_304", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_305", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_306", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_303", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_302", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_295", "__ZN7LoRaMac22handle_rx1_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_301", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_296", "__ZN7LoRaMac22handle_rx2_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_300", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_297", "__ZN7LoRaMac18handle_ack_timeoutEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_299", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_298", "__ZN7LoRaMac10disconnectEv__async_cb_263", "__ZN7LoRaMac10disconnectEv__async_cb_262", "__ZN7LoRaMac10disconnectEv__async_cb_261", "__ZN7LoRaMac10disconnectEv__async_cb_260", "__ZN7LoRaMac10disconnectEv__async_cb_259", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_396", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_219", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_220", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_225", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_224", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_222", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_223", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_221", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_245", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_246", "__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_136", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_137", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_138", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_139", "__ZN7LoRaMac14handle_tx_doneEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_166", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_167", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_168", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_169", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_170", "__ZN7LoRaMac15handle_rx_errorEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_171", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_172", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_173", "__ZN7LoRaMac17handle_tx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_174", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_175", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_176", "__ZN7LoRaMac17handle_rx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_177", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_178", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_179", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_132", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_4", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_387", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_388", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_389", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_390", "__Z11compute_micPKhtS0_jhjPj__async_cb_267", "__Z11compute_micPKhtS0_jhjPj__async_cb_266", "__Z11compute_micPKhtS0_jhjPj__async_cb_264", "__Z11compute_micPKhtS0_jhjPj__async_cb", "__Z11compute_micPKhtS0_jhjPj__async_cb_265", "__Z11compute_micPKhtS0_jhjPj__async_cb_268", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_353", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_352", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_351", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_354", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_131", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_130", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_128", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_129", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_127", "__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_423", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_454", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_371", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_372", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_373", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_374", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_375", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_376", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_377", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_378", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_397", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_398", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_399", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_400", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_401", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_402", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb", "__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_217", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_218", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_96", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_97", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_29", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_30", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_67", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_68", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_1", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_2", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_3", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_5", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_6", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_28", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_26", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_27", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_95", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_75", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_77", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_76", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_78", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_443", "_mbedtls_ccm_setkey__async_cb_442", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_278", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_271", "_mbedtls_cipher_update__async_cb_269", "_mbedtls_cipher_update__async_cb_270", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_485", "_mbedtls_cipher_cmac_update__async_cb_484", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_488", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_510", "_mbedtls_gcm_setkey__async_cb_509", "_mbedtls_gcm_setkey__async_cb_508", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_69", "_initialize__async_cb_74", "_initialize__async_cb_73", "_initialize__async_cb_70", "_initialize__async_cb_71", "_initialize__async_cb_72", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_82", "_schedule_interrupt__async_cb_83", "_schedule_interrupt__async_cb_84", "_schedule_interrupt__async_cb_85", "_schedule_interrupt__async_cb_86", "_schedule_interrupt__async_cb_87", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_124", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_194", "_mbed_die__async_cb_193", "_mbed_die__async_cb_192", "_mbed_die__async_cb_191", "_mbed_die__async_cb_190", "_mbed_die__async_cb_189", "_mbed_die__async_cb_188", "_mbed_die__async_cb_187", "_mbed_die__async_cb_186", "_mbed_die__async_cb_185", "_mbed_die__async_cb_184", "_mbed_die__async_cb_183", "_mbed_die__async_cb_182", "_mbed_die__async_cb_181", "_mbed_die__async_cb_180", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_printf__async_cb_98", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_345", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_424", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_441", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_489", "_invoke_ticker__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb_125", "_main__async_cb_150", "_main__async_cb_149", "_main__async_cb_152", "_main__async_cb", "__ZL18lora_event_handler11lora_events", "_main__async_cb_144", "_main__async_cb_145", "_main__async_cb_146", "_main__async_cb_148", "_main__async_cb_147", "_main__async_cb_151", "__ZL12send_messagev__async_cb_140", "__ZL12send_messagev__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_205", "__ZL18lora_event_handler11lora_events__async_cb_204", "__ZL18lora_event_handler11lora_events__async_cb_203", "__ZL18lora_event_handler11lora_events__async_cb_202", "__ZL18lora_event_handler11lora_events__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_201", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb", "_putc__async_cb_8", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_249", "_fflush__async_cb_248", "_fflush__async_cb_250", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_216", "_vfprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_92", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_195", "_abort_message__async_cb", "_abort_message__async_cb_384", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_212", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_504", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_516", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_213", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_233", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_232", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_231", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_230", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_244", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv", "__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t", "__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa", "__ZN7LoRaMac14handle_rx_doneEPhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$095113 = 0, $$096$be = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $257 = 0, $26 = 0, $260 = 0, $265 = 0, $273 = 0, $28 = 0, $292 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $373 = 0, $374 = 0, $38 = 0, $4 = 0, $40 = 0, $411 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $487 = 0, $491 = 0, $495 = 0, $498 = 0, $50 = 0, $504 = 0, $507 = 0, $508 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $6 = 0, $60 = 0, $604 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $686 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9647
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9649
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9651
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9653
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9655
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9657
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9659
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9661
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9663
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9665
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9667
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9669
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9671
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9673
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9675
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9677
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9679
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9681
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9683
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9685
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9687
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9689
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9691
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9693
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9695
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9697
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 9699
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 9701
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 9703
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 9705
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 9707
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 9709
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 9711
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 9713
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 9715
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 9717
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 9719
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 9721
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 9723
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 9725
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 9727
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 9729
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 9731
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 9733
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 9735
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 9737
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 9739
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 9741
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 9743
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 9745
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 9747
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 9749
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 9751
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 9753
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 9755
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 9757
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 9759
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 9761
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 9763
 $118 = HEAP8[$0 + 236 >> 0] | 0; //@line 9765
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 9767
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 9769
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 9771
 $126 = HEAP8[$0 + 252 >> 0] | 0; //@line 9773
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 9775
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 9777
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 9779
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 9781
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 9783
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 9785
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$98 >> 0] = HEAP8[$136 >> 0] | 0; //@line 9790
  HEAP8[$76 >> 0] = HEAP8[$68 >> 0] | 0; //@line 9792
  HEAP8[$62 >> 0] = HEAP8[$72 >> 0] | 0; //@line 9794
 }
 $238 = HEAP8[$40 >> 0] | 0; //@line 9796
 if (($238 & 255) > 4) {
  $div = ($238 & 255) / 5 | 0; //@line 9799
  $242 = (-128 - (HEAP8[$30 >> 0] | 0) & 255) + -1 | 0; //@line 9804
  $$095113 = 0; //@line 9805
  $248 = HEAP8[$20 >> 0] | 0; //@line 9805
  while (1) {
   $247 = $248 & 255; //@line 9807
   if (($242 | 0) > ($247 | 0)) {
    $251 = $248 + 2 << 24 >> 24; //@line 9811
    HEAP8[$94 + 4 + $247 >> 0] = 3; //@line 9815
    HEAP8[$20 >> 0] = $251; //@line 9816
    HEAP8[($248 + 1 & 255) + ($94 + 4) >> 0] = $AsyncRetVal; //@line 9817
    HEAP8[$10 >> 0] = 1; //@line 9818
    $$0$i = 0; //@line 9819
    $686 = $251; //@line 9819
   } else {
    $$0$i = -1e3; //@line 9821
    $686 = $248; //@line 9821
   }
   $$095113 = $$095113 + 1 << 24 >> 24; //@line 9823
   if (($$095113 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 9828
    break;
   } else {
    $248 = $686; //@line 9826
   }
  }
 } else {
  $$1$lcssa = $132; //@line 9833
 }
 $$0$be = $48 + 255 + ($238 & 255) & 255; //@line 9839
 $$096$be = $$1$lcssa; //@line 9839
 L13 : while (1) {
  if (($$0$be & 255) >= ($118 & 255)) {
   label = 36; //@line 9843
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 9847
  switch (HEAP8[$124 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 9852
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 9857
    break L13;
    break;
   }
  case 7:
   {
    label = 22; //@line 9862
    break L13;
    break;
   }
  case 9:
   {
    label = 27; //@line 9867
    break L13;
    break;
   }
  case 10:
   {
    label = 32; //@line 9872
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$58 >> 2] = 0; //@line 9877
    HEAP8[$42 >> 0] = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 9882
    HEAP8[$32 >> 0] = HEAP8[$124 + ($$0$be + 2 & 255) >> 0] | 0; //@line 9887
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 9888
    continue L13;
    break;
   }
  case 4:
   {
    $257 = $$0$be + 2 << 24 >> 24; //@line 9893
    $260 = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 9896
    HEAP8[$2 >> 0] = $260; //@line 9897
    HEAP16[$14 >> 1] = 1 << ($260 & 255); //@line 9901
    $265 = HEAP8[$20 >> 0] | 0; //@line 9903
    if (($265 & 255) >= (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
     $$0$be = $257; //@line 9907
     $$096$be = -1e3; //@line 9907
     continue L13;
    }
    HEAP8[$20 >> 0] = $265 + 1 << 24 >> 24; //@line 9913
    HEAP8[($265 & 255) + ($94 + 4) >> 0] = 4; //@line 9914
    HEAP8[$10 >> 0] = 1; //@line 9915
    $$0$be = $257; //@line 9916
    $$096$be = 0; //@line 9916
    continue L13;
    break;
   }
  case 6:
   {
    $373 = HEAP8[$20 >> 0] | 0; //@line 9922
    $374 = $373 & 255; //@line 9923
    if (((-128 - (HEAP8[$30 >> 0] | 0) & 255) + -2 | 0) <= ($374 | 0)) {
     $$0$be = $139; //@line 9929
     $$096$be = -1e3; //@line 9929
     continue L13;
    }
    HEAP8[$94 + 4 + $374 >> 0] = 6; //@line 9934
    HEAP8[($373 + 1 & 255) + ($94 + 4) >> 0] = -1; //@line 9938
    HEAP8[$20 >> 0] = $373 + 3 << 24 >> 24; //@line 9940
    HEAP8[($373 + 2 & 255) + ($94 + 4) >> 0] = $114; //@line 9943
    HEAP8[$10 >> 0] = 1; //@line 9944
    $$0$be = $139; //@line 9945
    $$096$be = 0; //@line 9945
    continue L13;
    break;
   }
  case 8:
   {
    $487 = $$0$be + 2 << 24 >> 24; //@line 9950
    $491 = HEAP8[$124 + ($139 & 255) >> 0] & 15; //@line 9954
    $495 = ($491 + ($491 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 9959
    HEAP32[$36 >> 2] = $495; //@line 9960
    HEAP32[$54 >> 2] = $495 + 1e3; //@line 9962
    $498 = HEAP8[$20 >> 0] | 0; //@line 9964
    if (($498 & 255) >= (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
     $$0$be = $487; //@line 9968
     $$096$be = -1e3; //@line 9968
     continue L13;
    }
    HEAP8[$20 >> 0] = $498 + 1 << 24 >> 24; //@line 9974
    HEAP8[($498 & 255) + ($94 + 4) >> 0] = 8; //@line 9975
    HEAP8[$92 >> 0] = 1; //@line 9976
    HEAP8[$10 >> 0] = 1; //@line 9977
    $$0$be = $487; //@line 9978
    $$096$be = 0; //@line 9978
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 9983
    $$096$be = -1013; //@line 9983
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$136 >> 0] = 0; //@line 9989
  HEAP8[$68 >> 0] = 0; //@line 9990
  HEAP8[$72 >> 0] = 0; //@line 9991
  HEAP8[$40 >> 0] = 0; //@line 9992
  $150 = $139 & 255; //@line 9993
  $151 = $150 + -1 | 0; //@line 9994
  HEAP32[$16 >> 2] = $124 + $151; //@line 9996
  HEAP8[$6 >> 0] = $80 - $151; //@line 9999
  HEAP8[$122 >> 0] = HEAP8[$134 >> 0] | 0; //@line 10001
  HEAP8[$104 >> 0] = HEAP8[$112 >> 0] | 0; //@line 10003
  HEAP8[$86 >> 0] = HEAP8[$98 >> 0] | 0; //@line 10005
  HEAP8[$70 >> 0] = HEAP8[$76 >> 0] | 0; //@line 10007
  HEAP8[$46 >> 0] = HEAP8[$62 >> 0] | 0; //@line 10009
  $162 = HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] | 0; //@line 10012
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 10013
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($110, $84, $136, $68, $72, $40) | 0; //@line 10014
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 10017
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 10018
   HEAP32[$164 >> 2] = $2; //@line 10019
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 10020
   HEAP32[$165 >> 2] = $4; //@line 10021
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 10022
   HEAP32[$166 >> 2] = $6; //@line 10023
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 10024
   HEAP32[$167 >> 2] = $8; //@line 10025
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 10026
   HEAP32[$168 >> 2] = $10; //@line 10027
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 10028
   HEAP32[$169 >> 2] = $12; //@line 10029
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 10030
   HEAP32[$170 >> 2] = $14; //@line 10031
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 10032
   HEAP32[$171 >> 2] = $16; //@line 10033
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 10034
   HEAP32[$172 >> 2] = $18; //@line 10035
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 10036
   HEAP32[$173 >> 2] = $20; //@line 10037
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 10038
   HEAP32[$174 >> 2] = $22; //@line 10039
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 10040
   HEAP32[$175 >> 2] = $24; //@line 10041
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 10042
   HEAP32[$176 >> 2] = $26; //@line 10043
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 10044
   HEAP32[$177 >> 2] = $28; //@line 10045
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 10046
   HEAP32[$178 >> 2] = $30; //@line 10047
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 10048
   HEAP32[$179 >> 2] = $32; //@line 10049
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 10050
   HEAP32[$180 >> 2] = $34; //@line 10051
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 10052
   HEAP32[$181 >> 2] = $36; //@line 10053
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 10054
   HEAP32[$182 >> 2] = $38; //@line 10055
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 10056
   HEAP32[$183 >> 2] = $40; //@line 10057
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 10058
   HEAP32[$184 >> 2] = $42; //@line 10059
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 10060
   HEAP32[$185 >> 2] = $44; //@line 10061
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 10062
   HEAP32[$186 >> 2] = $46; //@line 10063
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 10064
   HEAP32[$187 >> 2] = $150; //@line 10065
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 10066
   HEAP32[$188 >> 2] = $50; //@line 10067
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 10068
   HEAP32[$189 >> 2] = $52; //@line 10069
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 10070
   HEAP32[$190 >> 2] = $54; //@line 10071
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 10072
   HEAP32[$191 >> 2] = $56; //@line 10073
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 10074
   HEAP32[$192 >> 2] = $58; //@line 10075
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 10076
   HEAP32[$193 >> 2] = $60; //@line 10077
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 10078
   HEAP32[$194 >> 2] = $62; //@line 10079
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 10080
   HEAP32[$195 >> 2] = $64; //@line 10081
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 10082
   HEAP32[$196 >> 2] = $66; //@line 10083
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 10084
   HEAP32[$197 >> 2] = $68; //@line 10085
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 10086
   HEAP32[$198 >> 2] = $70; //@line 10087
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 10088
   HEAP32[$199 >> 2] = $72; //@line 10089
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 10090
   HEAP32[$200 >> 2] = $74; //@line 10091
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 10092
   HEAP32[$201 >> 2] = $76; //@line 10093
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 10094
   HEAP32[$202 >> 2] = $78; //@line 10095
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 10096
   HEAP32[$203 >> 2] = $80; //@line 10097
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 10098
   HEAP32[$204 >> 2] = $82; //@line 10099
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 10100
   HEAP32[$205 >> 2] = $84; //@line 10101
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 10102
   HEAP32[$206 >> 2] = $86; //@line 10103
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 10104
   HEAP32[$207 >> 2] = $88; //@line 10105
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 10106
   HEAP32[$208 >> 2] = $90; //@line 10107
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 10108
   HEAP32[$209 >> 2] = $92; //@line 10109
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 10110
   HEAP32[$210 >> 2] = $94; //@line 10111
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 10112
   HEAP32[$211 >> 2] = $96; //@line 10113
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 10114
   HEAP32[$212 >> 2] = $98; //@line 10115
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 10116
   HEAP32[$213 >> 2] = $100; //@line 10117
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 10118
   HEAP32[$214 >> 2] = $102; //@line 10119
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 10120
   HEAP32[$215 >> 2] = $104; //@line 10121
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 10122
   HEAP32[$216 >> 2] = $106; //@line 10123
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 10124
   HEAP32[$217 >> 2] = $108; //@line 10125
   $218 = $ReallocAsyncCtx + 220 | 0; //@line 10126
   HEAP32[$218 >> 2] = $110; //@line 10127
   $219 = $ReallocAsyncCtx + 224 | 0; //@line 10128
   HEAP32[$219 >> 2] = $112; //@line 10129
   $220 = $ReallocAsyncCtx + 228 | 0; //@line 10130
   HEAP8[$220 >> 0] = $114; //@line 10131
   $221 = $ReallocAsyncCtx + 232 | 0; //@line 10132
   HEAP32[$221 >> 2] = $116; //@line 10133
   $222 = $ReallocAsyncCtx + 236 | 0; //@line 10134
   HEAP8[$222 >> 0] = $118; //@line 10135
   $223 = $ReallocAsyncCtx + 240 | 0; //@line 10136
   HEAP32[$223 >> 2] = $120; //@line 10137
   $224 = $ReallocAsyncCtx + 244 | 0; //@line 10138
   HEAP32[$224 >> 2] = $122; //@line 10139
   $225 = $ReallocAsyncCtx + 248 | 0; //@line 10140
   HEAP32[$225 >> 2] = $124; //@line 10141
   $226 = $ReallocAsyncCtx + 252 | 0; //@line 10142
   HEAP8[$226 >> 0] = $126; //@line 10143
   $227 = $ReallocAsyncCtx + 256 | 0; //@line 10144
   HEAP32[$227 >> 2] = $128; //@line 10145
   $228 = $ReallocAsyncCtx + 260 | 0; //@line 10146
   HEAP32[$228 >> 2] = $130; //@line 10147
   $229 = $ReallocAsyncCtx + 264 | 0; //@line 10148
   HEAP32[$229 >> 2] = $$096$be; //@line 10149
   $230 = $ReallocAsyncCtx + 268 | 0; //@line 10150
   HEAP32[$230 >> 2] = $134; //@line 10151
   $231 = $ReallocAsyncCtx + 272 | 0; //@line 10152
   HEAP32[$231 >> 2] = $136; //@line 10153
   sp = STACKTOP; //@line 10154
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 10158
  ___async_unwind = 0; //@line 10159
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 10160
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 10161
  HEAP32[$164 >> 2] = $2; //@line 10162
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 10163
  HEAP32[$165 >> 2] = $4; //@line 10164
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 10165
  HEAP32[$166 >> 2] = $6; //@line 10166
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 10167
  HEAP32[$167 >> 2] = $8; //@line 10168
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 10169
  HEAP32[$168 >> 2] = $10; //@line 10170
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 10171
  HEAP32[$169 >> 2] = $12; //@line 10172
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 10173
  HEAP32[$170 >> 2] = $14; //@line 10174
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 10175
  HEAP32[$171 >> 2] = $16; //@line 10176
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 10177
  HEAP32[$172 >> 2] = $18; //@line 10178
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 10179
  HEAP32[$173 >> 2] = $20; //@line 10180
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 10181
  HEAP32[$174 >> 2] = $22; //@line 10182
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 10183
  HEAP32[$175 >> 2] = $24; //@line 10184
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 10185
  HEAP32[$176 >> 2] = $26; //@line 10186
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 10187
  HEAP32[$177 >> 2] = $28; //@line 10188
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 10189
  HEAP32[$178 >> 2] = $30; //@line 10190
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 10191
  HEAP32[$179 >> 2] = $32; //@line 10192
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 10193
  HEAP32[$180 >> 2] = $34; //@line 10194
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 10195
  HEAP32[$181 >> 2] = $36; //@line 10196
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 10197
  HEAP32[$182 >> 2] = $38; //@line 10198
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 10199
  HEAP32[$183 >> 2] = $40; //@line 10200
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 10201
  HEAP32[$184 >> 2] = $42; //@line 10202
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 10203
  HEAP32[$185 >> 2] = $44; //@line 10204
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 10205
  HEAP32[$186 >> 2] = $46; //@line 10206
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 10207
  HEAP32[$187 >> 2] = $150; //@line 10208
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 10209
  HEAP32[$188 >> 2] = $50; //@line 10210
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 10211
  HEAP32[$189 >> 2] = $52; //@line 10212
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 10213
  HEAP32[$190 >> 2] = $54; //@line 10214
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 10215
  HEAP32[$191 >> 2] = $56; //@line 10216
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 10217
  HEAP32[$192 >> 2] = $58; //@line 10218
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 10219
  HEAP32[$193 >> 2] = $60; //@line 10220
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 10221
  HEAP32[$194 >> 2] = $62; //@line 10222
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 10223
  HEAP32[$195 >> 2] = $64; //@line 10224
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 10225
  HEAP32[$196 >> 2] = $66; //@line 10226
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 10227
  HEAP32[$197 >> 2] = $68; //@line 10228
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 10229
  HEAP32[$198 >> 2] = $70; //@line 10230
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 10231
  HEAP32[$199 >> 2] = $72; //@line 10232
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 10233
  HEAP32[$200 >> 2] = $74; //@line 10234
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 10235
  HEAP32[$201 >> 2] = $76; //@line 10236
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 10237
  HEAP32[$202 >> 2] = $78; //@line 10238
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 10239
  HEAP32[$203 >> 2] = $80; //@line 10240
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 10241
  HEAP32[$204 >> 2] = $82; //@line 10242
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 10243
  HEAP32[$205 >> 2] = $84; //@line 10244
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 10245
  HEAP32[$206 >> 2] = $86; //@line 10246
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 10247
  HEAP32[$207 >> 2] = $88; //@line 10248
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 10249
  HEAP32[$208 >> 2] = $90; //@line 10250
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 10251
  HEAP32[$209 >> 2] = $92; //@line 10252
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 10253
  HEAP32[$210 >> 2] = $94; //@line 10254
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 10255
  HEAP32[$211 >> 2] = $96; //@line 10256
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 10257
  HEAP32[$212 >> 2] = $98; //@line 10258
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 10259
  HEAP32[$213 >> 2] = $100; //@line 10260
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 10261
  HEAP32[$214 >> 2] = $102; //@line 10262
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 10263
  HEAP32[$215 >> 2] = $104; //@line 10264
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 10265
  HEAP32[$216 >> 2] = $106; //@line 10266
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 10267
  HEAP32[$217 >> 2] = $108; //@line 10268
  $218 = $ReallocAsyncCtx + 220 | 0; //@line 10269
  HEAP32[$218 >> 2] = $110; //@line 10270
  $219 = $ReallocAsyncCtx + 224 | 0; //@line 10271
  HEAP32[$219 >> 2] = $112; //@line 10272
  $220 = $ReallocAsyncCtx + 228 | 0; //@line 10273
  HEAP8[$220 >> 0] = $114; //@line 10274
  $221 = $ReallocAsyncCtx + 232 | 0; //@line 10275
  HEAP32[$221 >> 2] = $116; //@line 10276
  $222 = $ReallocAsyncCtx + 236 | 0; //@line 10277
  HEAP8[$222 >> 0] = $118; //@line 10278
  $223 = $ReallocAsyncCtx + 240 | 0; //@line 10279
  HEAP32[$223 >> 2] = $120; //@line 10280
  $224 = $ReallocAsyncCtx + 244 | 0; //@line 10281
  HEAP32[$224 >> 2] = $122; //@line 10282
  $225 = $ReallocAsyncCtx + 248 | 0; //@line 10283
  HEAP32[$225 >> 2] = $124; //@line 10284
  $226 = $ReallocAsyncCtx + 252 | 0; //@line 10285
  HEAP8[$226 >> 0] = $126; //@line 10286
  $227 = $ReallocAsyncCtx + 256 | 0; //@line 10287
  HEAP32[$227 >> 2] = $128; //@line 10288
  $228 = $ReallocAsyncCtx + 260 | 0; //@line 10289
  HEAP32[$228 >> 2] = $130; //@line 10290
  $229 = $ReallocAsyncCtx + 264 | 0; //@line 10291
  HEAP32[$229 >> 2] = $$096$be; //@line 10292
  $230 = $ReallocAsyncCtx + 268 | 0; //@line 10293
  HEAP32[$230 >> 2] = $134; //@line 10294
  $231 = $ReallocAsyncCtx + 272 | 0; //@line 10295
  HEAP32[$231 >> 2] = $136; //@line 10296
  sp = STACKTOP; //@line 10297
  return;
 } else if ((label | 0) == 17) {
  $273 = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 10303
  HEAP8[$34 >> 0] = ($273 & 255) >>> 4 & 7; //@line 10308
  HEAP8[$24 >> 0] = $273 & 15; //@line 10310
  $292 = $$0$be + 5 << 24 >> 24; //@line 10324
  HEAP32[$44 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 10332
  $302 = HEAP32[(HEAP32[$52 >> 2] | 0) + 40 >> 2] | 0; //@line 10335
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 10336
  $303 = FUNCTION_TABLE_iii[$302 & 31]($110, $50) | 0; //@line 10337
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 10340
   $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 10341
   HEAP32[$304 >> 2] = $2; //@line 10342
   $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 10343
   HEAP32[$305 >> 2] = $4; //@line 10344
   $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 10345
   HEAP32[$306 >> 2] = $6; //@line 10346
   $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 10347
   HEAP32[$307 >> 2] = $8; //@line 10348
   $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 10349
   HEAP32[$308 >> 2] = $10; //@line 10350
   $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 10351
   HEAP32[$309 >> 2] = $12; //@line 10352
   $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 10353
   HEAP32[$310 >> 2] = $14; //@line 10354
   $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 10355
   HEAP32[$311 >> 2] = $16; //@line 10356
   $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 10357
   HEAP32[$312 >> 2] = $18; //@line 10358
   $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 10359
   HEAP32[$313 >> 2] = $20; //@line 10360
   $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 10361
   HEAP32[$314 >> 2] = $22; //@line 10362
   $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 10363
   HEAP32[$315 >> 2] = $24; //@line 10364
   $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 10365
   HEAP32[$316 >> 2] = $26; //@line 10366
   $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 10367
   HEAP32[$317 >> 2] = $28; //@line 10368
   $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 10369
   HEAP32[$318 >> 2] = $30; //@line 10370
   $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 10371
   HEAP32[$319 >> 2] = $32; //@line 10372
   $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 10373
   HEAP32[$320 >> 2] = $34; //@line 10374
   $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 10375
   HEAP32[$321 >> 2] = $36; //@line 10376
   $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 10377
   HEAP32[$322 >> 2] = $38; //@line 10378
   $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 10379
   HEAP32[$323 >> 2] = $40; //@line 10380
   $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 10381
   HEAP32[$324 >> 2] = $42; //@line 10382
   $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 10383
   HEAP32[$325 >> 2] = $44; //@line 10384
   $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 10385
   HEAP32[$326 >> 2] = $46; //@line 10386
   $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 10387
   HEAP32[$327 >> 2] = $54; //@line 10388
   $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 10389
   HEAP32[$328 >> 2] = $50; //@line 10390
   $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 10391
   HEAP32[$329 >> 2] = $52; //@line 10392
   $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 10393
   HEAP32[$330 >> 2] = $56; //@line 10394
   $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 10395
   HEAP32[$331 >> 2] = $58; //@line 10396
   $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 10397
   HEAP32[$332 >> 2] = $60; //@line 10398
   $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 10399
   HEAP32[$333 >> 2] = $62; //@line 10400
   $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 10401
   HEAP32[$334 >> 2] = $64; //@line 10402
   $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 10403
   HEAP32[$335 >> 2] = $66; //@line 10404
   $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 10405
   HEAP32[$336 >> 2] = $68; //@line 10406
   $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 10407
   HEAP32[$337 >> 2] = $70; //@line 10408
   $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 10409
   HEAP32[$338 >> 2] = $72; //@line 10410
   $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 10411
   HEAP8[$339 >> 0] = $292; //@line 10412
   $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 10413
   HEAP32[$340 >> 2] = $74; //@line 10414
   $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 10415
   HEAP32[$341 >> 2] = $76; //@line 10416
   $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 10417
   HEAP32[$342 >> 2] = $78; //@line 10418
   $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 10419
   HEAP32[$343 >> 2] = $80; //@line 10420
   $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 10421
   HEAP32[$344 >> 2] = $82; //@line 10422
   $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 10423
   HEAP32[$345 >> 2] = $84; //@line 10424
   $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 10425
   HEAP32[$346 >> 2] = $86; //@line 10426
   $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 10427
   HEAP32[$347 >> 2] = $88; //@line 10428
   $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 10429
   HEAP32[$348 >> 2] = $90; //@line 10430
   $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 10431
   HEAP32[$349 >> 2] = $92; //@line 10432
   $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 10433
   HEAP32[$350 >> 2] = $94; //@line 10434
   $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 10435
   HEAP32[$351 >> 2] = $96; //@line 10436
   $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 10437
   HEAP32[$352 >> 2] = $98; //@line 10438
   $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 10439
   HEAP32[$353 >> 2] = $100; //@line 10440
   $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 10441
   HEAP32[$354 >> 2] = $102; //@line 10442
   $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 10443
   HEAP32[$355 >> 2] = $104; //@line 10444
   $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 10445
   HEAP32[$356 >> 2] = $106; //@line 10446
   $357 = $ReallocAsyncCtx2 + 216 | 0; //@line 10447
   HEAP32[$357 >> 2] = $108; //@line 10448
   $358 = $ReallocAsyncCtx2 + 220 | 0; //@line 10449
   HEAP32[$358 >> 2] = $110; //@line 10450
   $359 = $ReallocAsyncCtx2 + 224 | 0; //@line 10451
   HEAP32[$359 >> 2] = $112; //@line 10452
   $360 = $ReallocAsyncCtx2 + 228 | 0; //@line 10453
   HEAP8[$360 >> 0] = $114; //@line 10454
   $361 = $ReallocAsyncCtx2 + 232 | 0; //@line 10455
   HEAP32[$361 >> 2] = $116; //@line 10456
   $362 = $ReallocAsyncCtx2 + 236 | 0; //@line 10457
   HEAP8[$362 >> 0] = $118; //@line 10458
   $363 = $ReallocAsyncCtx2 + 240 | 0; //@line 10459
   HEAP32[$363 >> 2] = $120; //@line 10460
   $364 = $ReallocAsyncCtx2 + 244 | 0; //@line 10461
   HEAP32[$364 >> 2] = $122; //@line 10462
   $365 = $ReallocAsyncCtx2 + 248 | 0; //@line 10463
   HEAP32[$365 >> 2] = $124; //@line 10464
   $366 = $ReallocAsyncCtx2 + 252 | 0; //@line 10465
   HEAP8[$366 >> 0] = $126; //@line 10466
   $367 = $ReallocAsyncCtx2 + 256 | 0; //@line 10467
   HEAP32[$367 >> 2] = $128; //@line 10468
   $368 = $ReallocAsyncCtx2 + 260 | 0; //@line 10469
   HEAP32[$368 >> 2] = $130; //@line 10470
   $369 = $ReallocAsyncCtx2 + 264 | 0; //@line 10471
   HEAP32[$369 >> 2] = $134; //@line 10472
   $370 = $ReallocAsyncCtx2 + 268 | 0; //@line 10473
   HEAP32[$370 >> 2] = $136; //@line 10474
   sp = STACKTOP; //@line 10475
   return;
  }
  HEAP8[___async_retval >> 0] = $303; //@line 10479
  ___async_unwind = 0; //@line 10480
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 10481
  $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 10482
  HEAP32[$304 >> 2] = $2; //@line 10483
  $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 10484
  HEAP32[$305 >> 2] = $4; //@line 10485
  $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 10486
  HEAP32[$306 >> 2] = $6; //@line 10487
  $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 10488
  HEAP32[$307 >> 2] = $8; //@line 10489
  $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 10490
  HEAP32[$308 >> 2] = $10; //@line 10491
  $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 10492
  HEAP32[$309 >> 2] = $12; //@line 10493
  $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 10494
  HEAP32[$310 >> 2] = $14; //@line 10495
  $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 10496
  HEAP32[$311 >> 2] = $16; //@line 10497
  $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 10498
  HEAP32[$312 >> 2] = $18; //@line 10499
  $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 10500
  HEAP32[$313 >> 2] = $20; //@line 10501
  $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 10502
  HEAP32[$314 >> 2] = $22; //@line 10503
  $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 10504
  HEAP32[$315 >> 2] = $24; //@line 10505
  $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 10506
  HEAP32[$316 >> 2] = $26; //@line 10507
  $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 10508
  HEAP32[$317 >> 2] = $28; //@line 10509
  $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 10510
  HEAP32[$318 >> 2] = $30; //@line 10511
  $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 10512
  HEAP32[$319 >> 2] = $32; //@line 10513
  $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 10514
  HEAP32[$320 >> 2] = $34; //@line 10515
  $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 10516
  HEAP32[$321 >> 2] = $36; //@line 10517
  $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 10518
  HEAP32[$322 >> 2] = $38; //@line 10519
  $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 10520
  HEAP32[$323 >> 2] = $40; //@line 10521
  $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 10522
  HEAP32[$324 >> 2] = $42; //@line 10523
  $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 10524
  HEAP32[$325 >> 2] = $44; //@line 10525
  $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 10526
  HEAP32[$326 >> 2] = $46; //@line 10527
  $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 10528
  HEAP32[$327 >> 2] = $54; //@line 10529
  $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 10530
  HEAP32[$328 >> 2] = $50; //@line 10531
  $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 10532
  HEAP32[$329 >> 2] = $52; //@line 10533
  $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 10534
  HEAP32[$330 >> 2] = $56; //@line 10535
  $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 10536
  HEAP32[$331 >> 2] = $58; //@line 10537
  $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 10538
  HEAP32[$332 >> 2] = $60; //@line 10539
  $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 10540
  HEAP32[$333 >> 2] = $62; //@line 10541
  $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 10542
  HEAP32[$334 >> 2] = $64; //@line 10543
  $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 10544
  HEAP32[$335 >> 2] = $66; //@line 10545
  $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 10546
  HEAP32[$336 >> 2] = $68; //@line 10547
  $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 10548
  HEAP32[$337 >> 2] = $70; //@line 10549
  $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 10550
  HEAP32[$338 >> 2] = $72; //@line 10551
  $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 10552
  HEAP8[$339 >> 0] = $292; //@line 10553
  $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 10554
  HEAP32[$340 >> 2] = $74; //@line 10555
  $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 10556
  HEAP32[$341 >> 2] = $76; //@line 10557
  $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 10558
  HEAP32[$342 >> 2] = $78; //@line 10559
  $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 10560
  HEAP32[$343 >> 2] = $80; //@line 10561
  $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 10562
  HEAP32[$344 >> 2] = $82; //@line 10563
  $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 10564
  HEAP32[$345 >> 2] = $84; //@line 10565
  $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 10566
  HEAP32[$346 >> 2] = $86; //@line 10567
  $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 10568
  HEAP32[$347 >> 2] = $88; //@line 10569
  $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 10570
  HEAP32[$348 >> 2] = $90; //@line 10571
  $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 10572
  HEAP32[$349 >> 2] = $92; //@line 10573
  $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 10574
  HEAP32[$350 >> 2] = $94; //@line 10575
  $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 10576
  HEAP32[$351 >> 2] = $96; //@line 10577
  $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 10578
  HEAP32[$352 >> 2] = $98; //@line 10579
  $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 10580
  HEAP32[$353 >> 2] = $100; //@line 10581
  $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 10582
  HEAP32[$354 >> 2] = $102; //@line 10583
  $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 10584
  HEAP32[$355 >> 2] = $104; //@line 10585
  $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 10586
  HEAP32[$356 >> 2] = $106; //@line 10587
  $357 = $ReallocAsyncCtx2 + 216 | 0; //@line 10588
  HEAP32[$357 >> 2] = $108; //@line 10589
  $358 = $ReallocAsyncCtx2 + 220 | 0; //@line 10590
  HEAP32[$358 >> 2] = $110; //@line 10591
  $359 = $ReallocAsyncCtx2 + 224 | 0; //@line 10592
  HEAP32[$359 >> 2] = $112; //@line 10593
  $360 = $ReallocAsyncCtx2 + 228 | 0; //@line 10594
  HEAP8[$360 >> 0] = $114; //@line 10595
  $361 = $ReallocAsyncCtx2 + 232 | 0; //@line 10596
  HEAP32[$361 >> 2] = $116; //@line 10597
  $362 = $ReallocAsyncCtx2 + 236 | 0; //@line 10598
  HEAP8[$362 >> 0] = $118; //@line 10599
  $363 = $ReallocAsyncCtx2 + 240 | 0; //@line 10600
  HEAP32[$363 >> 2] = $120; //@line 10601
  $364 = $ReallocAsyncCtx2 + 244 | 0; //@line 10602
  HEAP32[$364 >> 2] = $122; //@line 10603
  $365 = $ReallocAsyncCtx2 + 248 | 0; //@line 10604
  HEAP32[$365 >> 2] = $124; //@line 10605
  $366 = $ReallocAsyncCtx2 + 252 | 0; //@line 10606
  HEAP8[$366 >> 0] = $126; //@line 10607
  $367 = $ReallocAsyncCtx2 + 256 | 0; //@line 10608
  HEAP32[$367 >> 2] = $128; //@line 10609
  $368 = $ReallocAsyncCtx2 + 260 | 0; //@line 10610
  HEAP32[$368 >> 2] = $130; //@line 10611
  $369 = $ReallocAsyncCtx2 + 264 | 0; //@line 10612
  HEAP32[$369 >> 2] = $134; //@line 10613
  $370 = $ReallocAsyncCtx2 + 268 | 0; //@line 10614
  HEAP32[$370 >> 2] = $136; //@line 10615
  sp = STACKTOP; //@line 10616
  return;
 } else if ((label | 0) == 22) {
  HEAP8[$116 >> 0] = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 10624
  HEAP32[$128 >> 2] = $8; //@line 10625
  HEAP32[$130 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 10646
  HEAP32[$4 >> 2] = 0; //@line 10647
  $411 = $$0$be + 6 << 24 >> 24; //@line 10648
  HEAP8[$18 >> 0] = HEAP8[$124 + ($$0$be + 5 & 255) >> 0] | 0; //@line 10652
  $417 = HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0; //@line 10655
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(272) | 0; //@line 10656
  $418 = FUNCTION_TABLE_iii[$417 & 31]($110, $60) | 0; //@line 10657
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 10660
   $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 10661
   HEAP32[$419 >> 2] = $2; //@line 10662
   $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 10663
   HEAP32[$420 >> 2] = $4; //@line 10664
   $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 10665
   HEAP32[$421 >> 2] = $6; //@line 10666
   $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 10667
   HEAP32[$422 >> 2] = $8; //@line 10668
   $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 10669
   HEAP32[$423 >> 2] = $10; //@line 10670
   $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 10671
   HEAP32[$424 >> 2] = $12; //@line 10672
   $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 10673
   HEAP32[$425 >> 2] = $14; //@line 10674
   $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 10675
   HEAP32[$426 >> 2] = $16; //@line 10676
   $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 10677
   HEAP32[$427 >> 2] = $18; //@line 10678
   $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 10679
   HEAP32[$428 >> 2] = $20; //@line 10680
   $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 10681
   HEAP32[$429 >> 2] = $22; //@line 10682
   $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 10683
   HEAP32[$430 >> 2] = $24; //@line 10684
   $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 10685
   HEAP32[$431 >> 2] = $26; //@line 10686
   $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 10687
   HEAP32[$432 >> 2] = $28; //@line 10688
   $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 10689
   HEAP32[$433 >> 2] = $30; //@line 10690
   $434 = $ReallocAsyncCtx3 + 64 | 0; //@line 10691
   HEAP32[$434 >> 2] = $32; //@line 10692
   $435 = $ReallocAsyncCtx3 + 68 | 0; //@line 10693
   HEAP32[$435 >> 2] = $34; //@line 10694
   $436 = $ReallocAsyncCtx3 + 72 | 0; //@line 10695
   HEAP32[$436 >> 2] = $36; //@line 10696
   $437 = $ReallocAsyncCtx3 + 76 | 0; //@line 10697
   HEAP32[$437 >> 2] = $38; //@line 10698
   $438 = $ReallocAsyncCtx3 + 80 | 0; //@line 10699
   HEAP32[$438 >> 2] = $40; //@line 10700
   $439 = $ReallocAsyncCtx3 + 84 | 0; //@line 10701
   HEAP32[$439 >> 2] = $42; //@line 10702
   $440 = $ReallocAsyncCtx3 + 88 | 0; //@line 10703
   HEAP32[$440 >> 2] = $44; //@line 10704
   $441 = $ReallocAsyncCtx3 + 92 | 0; //@line 10705
   HEAP32[$441 >> 2] = $46; //@line 10706
   $442 = $ReallocAsyncCtx3 + 96 | 0; //@line 10707
   HEAP32[$442 >> 2] = $54; //@line 10708
   $443 = $ReallocAsyncCtx3 + 100 | 0; //@line 10709
   HEAP32[$443 >> 2] = $50; //@line 10710
   $444 = $ReallocAsyncCtx3 + 104 | 0; //@line 10711
   HEAP8[$444 >> 0] = $411; //@line 10712
   $445 = $ReallocAsyncCtx3 + 108 | 0; //@line 10713
   HEAP32[$445 >> 2] = $52; //@line 10714
   $446 = $ReallocAsyncCtx3 + 112 | 0; //@line 10715
   HEAP32[$446 >> 2] = $56; //@line 10716
   $447 = $ReallocAsyncCtx3 + 116 | 0; //@line 10717
   HEAP32[$447 >> 2] = $58; //@line 10718
   $448 = $ReallocAsyncCtx3 + 120 | 0; //@line 10719
   HEAP32[$448 >> 2] = $60; //@line 10720
   $449 = $ReallocAsyncCtx3 + 124 | 0; //@line 10721
   HEAP32[$449 >> 2] = $62; //@line 10722
   $450 = $ReallocAsyncCtx3 + 128 | 0; //@line 10723
   HEAP32[$450 >> 2] = $64; //@line 10724
   $451 = $ReallocAsyncCtx3 + 132 | 0; //@line 10725
   HEAP32[$451 >> 2] = $66; //@line 10726
   $452 = $ReallocAsyncCtx3 + 136 | 0; //@line 10727
   HEAP32[$452 >> 2] = $68; //@line 10728
   $453 = $ReallocAsyncCtx3 + 140 | 0; //@line 10729
   HEAP32[$453 >> 2] = $70; //@line 10730
   $454 = $ReallocAsyncCtx3 + 144 | 0; //@line 10731
   HEAP32[$454 >> 2] = $72; //@line 10732
   $455 = $ReallocAsyncCtx3 + 148 | 0; //@line 10733
   HEAP32[$455 >> 2] = $74; //@line 10734
   $456 = $ReallocAsyncCtx3 + 152 | 0; //@line 10735
   HEAP32[$456 >> 2] = $76; //@line 10736
   $457 = $ReallocAsyncCtx3 + 156 | 0; //@line 10737
   HEAP32[$457 >> 2] = $78; //@line 10738
   $458 = $ReallocAsyncCtx3 + 160 | 0; //@line 10739
   HEAP32[$458 >> 2] = $80; //@line 10740
   $459 = $ReallocAsyncCtx3 + 164 | 0; //@line 10741
   HEAP32[$459 >> 2] = $82; //@line 10742
   $460 = $ReallocAsyncCtx3 + 168 | 0; //@line 10743
   HEAP32[$460 >> 2] = $84; //@line 10744
   $461 = $ReallocAsyncCtx3 + 172 | 0; //@line 10745
   HEAP32[$461 >> 2] = $86; //@line 10746
   $462 = $ReallocAsyncCtx3 + 176 | 0; //@line 10747
   HEAP32[$462 >> 2] = $88; //@line 10748
   $463 = $ReallocAsyncCtx3 + 180 | 0; //@line 10749
   HEAP32[$463 >> 2] = $90; //@line 10750
   $464 = $ReallocAsyncCtx3 + 184 | 0; //@line 10751
   HEAP32[$464 >> 2] = $92; //@line 10752
   $465 = $ReallocAsyncCtx3 + 188 | 0; //@line 10753
   HEAP32[$465 >> 2] = $94; //@line 10754
   $466 = $ReallocAsyncCtx3 + 192 | 0; //@line 10755
   HEAP32[$466 >> 2] = $96; //@line 10756
   $467 = $ReallocAsyncCtx3 + 196 | 0; //@line 10757
   HEAP32[$467 >> 2] = $98; //@line 10758
   $468 = $ReallocAsyncCtx3 + 200 | 0; //@line 10759
   HEAP32[$468 >> 2] = $100; //@line 10760
   $469 = $ReallocAsyncCtx3 + 204 | 0; //@line 10761
   HEAP32[$469 >> 2] = $102; //@line 10762
   $470 = $ReallocAsyncCtx3 + 208 | 0; //@line 10763
   HEAP32[$470 >> 2] = $104; //@line 10764
   $471 = $ReallocAsyncCtx3 + 212 | 0; //@line 10765
   HEAP32[$471 >> 2] = $106; //@line 10766
   $472 = $ReallocAsyncCtx3 + 216 | 0; //@line 10767
   HEAP32[$472 >> 2] = $108; //@line 10768
   $473 = $ReallocAsyncCtx3 + 220 | 0; //@line 10769
   HEAP32[$473 >> 2] = $110; //@line 10770
   $474 = $ReallocAsyncCtx3 + 224 | 0; //@line 10771
   HEAP32[$474 >> 2] = $112; //@line 10772
   $475 = $ReallocAsyncCtx3 + 228 | 0; //@line 10773
   HEAP8[$475 >> 0] = $114; //@line 10774
   $476 = $ReallocAsyncCtx3 + 232 | 0; //@line 10775
   HEAP32[$476 >> 2] = $116; //@line 10776
   $477 = $ReallocAsyncCtx3 + 236 | 0; //@line 10777
   HEAP8[$477 >> 0] = $118; //@line 10778
   $478 = $ReallocAsyncCtx3 + 240 | 0; //@line 10779
   HEAP32[$478 >> 2] = $120; //@line 10780
   $479 = $ReallocAsyncCtx3 + 244 | 0; //@line 10781
   HEAP32[$479 >> 2] = $122; //@line 10782
   $480 = $ReallocAsyncCtx3 + 248 | 0; //@line 10783
   HEAP32[$480 >> 2] = $124; //@line 10784
   $481 = $ReallocAsyncCtx3 + 252 | 0; //@line 10785
   HEAP8[$481 >> 0] = $126; //@line 10786
   $482 = $ReallocAsyncCtx3 + 256 | 0; //@line 10787
   HEAP32[$482 >> 2] = $128; //@line 10788
   $483 = $ReallocAsyncCtx3 + 260 | 0; //@line 10789
   HEAP32[$483 >> 2] = $130; //@line 10790
   $484 = $ReallocAsyncCtx3 + 264 | 0; //@line 10791
   HEAP32[$484 >> 2] = $134; //@line 10792
   $485 = $ReallocAsyncCtx3 + 268 | 0; //@line 10793
   HEAP32[$485 >> 2] = $136; //@line 10794
   sp = STACKTOP; //@line 10795
   return;
  }
  HEAP8[___async_retval >> 0] = $418; //@line 10799
  ___async_unwind = 0; //@line 10800
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 10801
  $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 10802
  HEAP32[$419 >> 2] = $2; //@line 10803
  $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 10804
  HEAP32[$420 >> 2] = $4; //@line 10805
  $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 10806
  HEAP32[$421 >> 2] = $6; //@line 10807
  $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 10808
  HEAP32[$422 >> 2] = $8; //@line 10809
  $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 10810
  HEAP32[$423 >> 2] = $10; //@line 10811
  $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 10812
  HEAP32[$424 >> 2] = $12; //@line 10813
  $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 10814
  HEAP32[$425 >> 2] = $14; //@line 10815
  $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 10816
  HEAP32[$426 >> 2] = $16; //@line 10817
  $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 10818
  HEAP32[$427 >> 2] = $18; //@line 10819
  $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 10820
  HEAP32[$428 >> 2] = $20; //@line 10821
  $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 10822
  HEAP32[$429 >> 2] = $22; //@line 10823
  $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 10824
  HEAP32[$430 >> 2] = $24; //@line 10825
  $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 10826
  HEAP32[$431 >> 2] = $26; //@line 10827
  $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 10828
  HEAP32[$432 >> 2] = $28; //@line 10829
  $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 10830
  HEAP32[$433 >> 2] = $30; //@line 10831
  $434 = $ReallocAsyncCtx3 + 64 | 0; //@line 10832
  HEAP32[$434 >> 2] = $32; //@line 10833
  $435 = $ReallocAsyncCtx3 + 68 | 0; //@line 10834
  HEAP32[$435 >> 2] = $34; //@line 10835
  $436 = $ReallocAsyncCtx3 + 72 | 0; //@line 10836
  HEAP32[$436 >> 2] = $36; //@line 10837
  $437 = $ReallocAsyncCtx3 + 76 | 0; //@line 10838
  HEAP32[$437 >> 2] = $38; //@line 10839
  $438 = $ReallocAsyncCtx3 + 80 | 0; //@line 10840
  HEAP32[$438 >> 2] = $40; //@line 10841
  $439 = $ReallocAsyncCtx3 + 84 | 0; //@line 10842
  HEAP32[$439 >> 2] = $42; //@line 10843
  $440 = $ReallocAsyncCtx3 + 88 | 0; //@line 10844
  HEAP32[$440 >> 2] = $44; //@line 10845
  $441 = $ReallocAsyncCtx3 + 92 | 0; //@line 10846
  HEAP32[$441 >> 2] = $46; //@line 10847
  $442 = $ReallocAsyncCtx3 + 96 | 0; //@line 10848
  HEAP32[$442 >> 2] = $54; //@line 10849
  $443 = $ReallocAsyncCtx3 + 100 | 0; //@line 10850
  HEAP32[$443 >> 2] = $50; //@line 10851
  $444 = $ReallocAsyncCtx3 + 104 | 0; //@line 10852
  HEAP8[$444 >> 0] = $411; //@line 10853
  $445 = $ReallocAsyncCtx3 + 108 | 0; //@line 10854
  HEAP32[$445 >> 2] = $52; //@line 10855
  $446 = $ReallocAsyncCtx3 + 112 | 0; //@line 10856
  HEAP32[$446 >> 2] = $56; //@line 10857
  $447 = $ReallocAsyncCtx3 + 116 | 0; //@line 10858
  HEAP32[$447 >> 2] = $58; //@line 10859
  $448 = $ReallocAsyncCtx3 + 120 | 0; //@line 10860
  HEAP32[$448 >> 2] = $60; //@line 10861
  $449 = $ReallocAsyncCtx3 + 124 | 0; //@line 10862
  HEAP32[$449 >> 2] = $62; //@line 10863
  $450 = $ReallocAsyncCtx3 + 128 | 0; //@line 10864
  HEAP32[$450 >> 2] = $64; //@line 10865
  $451 = $ReallocAsyncCtx3 + 132 | 0; //@line 10866
  HEAP32[$451 >> 2] = $66; //@line 10867
  $452 = $ReallocAsyncCtx3 + 136 | 0; //@line 10868
  HEAP32[$452 >> 2] = $68; //@line 10869
  $453 = $ReallocAsyncCtx3 + 140 | 0; //@line 10870
  HEAP32[$453 >> 2] = $70; //@line 10871
  $454 = $ReallocAsyncCtx3 + 144 | 0; //@line 10872
  HEAP32[$454 >> 2] = $72; //@line 10873
  $455 = $ReallocAsyncCtx3 + 148 | 0; //@line 10874
  HEAP32[$455 >> 2] = $74; //@line 10875
  $456 = $ReallocAsyncCtx3 + 152 | 0; //@line 10876
  HEAP32[$456 >> 2] = $76; //@line 10877
  $457 = $ReallocAsyncCtx3 + 156 | 0; //@line 10878
  HEAP32[$457 >> 2] = $78; //@line 10879
  $458 = $ReallocAsyncCtx3 + 160 | 0; //@line 10880
  HEAP32[$458 >> 2] = $80; //@line 10881
  $459 = $ReallocAsyncCtx3 + 164 | 0; //@line 10882
  HEAP32[$459 >> 2] = $82; //@line 10883
  $460 = $ReallocAsyncCtx3 + 168 | 0; //@line 10884
  HEAP32[$460 >> 2] = $84; //@line 10885
  $461 = $ReallocAsyncCtx3 + 172 | 0; //@line 10886
  HEAP32[$461 >> 2] = $86; //@line 10887
  $462 = $ReallocAsyncCtx3 + 176 | 0; //@line 10888
  HEAP32[$462 >> 2] = $88; //@line 10889
  $463 = $ReallocAsyncCtx3 + 180 | 0; //@line 10890
  HEAP32[$463 >> 2] = $90; //@line 10891
  $464 = $ReallocAsyncCtx3 + 184 | 0; //@line 10892
  HEAP32[$464 >> 2] = $92; //@line 10893
  $465 = $ReallocAsyncCtx3 + 188 | 0; //@line 10894
  HEAP32[$465 >> 2] = $94; //@line 10895
  $466 = $ReallocAsyncCtx3 + 192 | 0; //@line 10896
  HEAP32[$466 >> 2] = $96; //@line 10897
  $467 = $ReallocAsyncCtx3 + 196 | 0; //@line 10898
  HEAP32[$467 >> 2] = $98; //@line 10899
  $468 = $ReallocAsyncCtx3 + 200 | 0; //@line 10900
  HEAP32[$468 >> 2] = $100; //@line 10901
  $469 = $ReallocAsyncCtx3 + 204 | 0; //@line 10902
  HEAP32[$469 >> 2] = $102; //@line 10903
  $470 = $ReallocAsyncCtx3 + 208 | 0; //@line 10904
  HEAP32[$470 >> 2] = $104; //@line 10905
  $471 = $ReallocAsyncCtx3 + 212 | 0; //@line 10906
  HEAP32[$471 >> 2] = $106; //@line 10907
  $472 = $ReallocAsyncCtx3 + 216 | 0; //@line 10908
  HEAP32[$472 >> 2] = $108; //@line 10909
  $473 = $ReallocAsyncCtx3 + 220 | 0; //@line 10910
  HEAP32[$473 >> 2] = $110; //@line 10911
  $474 = $ReallocAsyncCtx3 + 224 | 0; //@line 10912
  HEAP32[$474 >> 2] = $112; //@line 10913
  $475 = $ReallocAsyncCtx3 + 228 | 0; //@line 10914
  HEAP8[$475 >> 0] = $114; //@line 10915
  $476 = $ReallocAsyncCtx3 + 232 | 0; //@line 10916
  HEAP32[$476 >> 2] = $116; //@line 10917
  $477 = $ReallocAsyncCtx3 + 236 | 0; //@line 10918
  HEAP8[$477 >> 0] = $118; //@line 10919
  $478 = $ReallocAsyncCtx3 + 240 | 0; //@line 10920
  HEAP32[$478 >> 2] = $120; //@line 10921
  $479 = $ReallocAsyncCtx3 + 244 | 0; //@line 10922
  HEAP32[$479 >> 2] = $122; //@line 10923
  $480 = $ReallocAsyncCtx3 + 248 | 0; //@line 10924
  HEAP32[$480 >> 2] = $124; //@line 10925
  $481 = $ReallocAsyncCtx3 + 252 | 0; //@line 10926
  HEAP8[$481 >> 0] = $126; //@line 10927
  $482 = $ReallocAsyncCtx3 + 256 | 0; //@line 10928
  HEAP32[$482 >> 2] = $128; //@line 10929
  $483 = $ReallocAsyncCtx3 + 260 | 0; //@line 10930
  HEAP32[$483 >> 2] = $130; //@line 10931
  $484 = $ReallocAsyncCtx3 + 264 | 0; //@line 10932
  HEAP32[$484 >> 2] = $134; //@line 10933
  $485 = $ReallocAsyncCtx3 + 268 | 0; //@line 10934
  HEAP32[$485 >> 2] = $136; //@line 10935
  sp = STACKTOP; //@line 10936
  return;
 } else if ((label | 0) == 27) {
  $504 = $$0$be + 2 << 24 >> 24; //@line 10940
  $507 = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 10943
  HEAP8[$56 >> 0] = 0; //@line 10944
  $508 = $507 & 255; //@line 10945
  HEAP8[$64 >> 0] = $508 >>> 5 & 1; //@line 10949
  if ($508 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 10953
  }
  HEAP8[$74 >> 0] = $508 & 15; //@line 10957
  $517 = HEAP32[(HEAP32[$82 >> 2] | 0) + 44 >> 2] | 0; //@line 10960
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 10961
  $518 = FUNCTION_TABLE_iii[$517 & 31]($110, $22) | 0; //@line 10962
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 10965
   $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 10966
   HEAP32[$519 >> 2] = $2; //@line 10967
   $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 10968
   HEAP32[$520 >> 2] = $4; //@line 10969
   $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 10970
   HEAP32[$521 >> 2] = $6; //@line 10971
   $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 10972
   HEAP32[$522 >> 2] = $8; //@line 10973
   $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 10974
   HEAP32[$523 >> 2] = $10; //@line 10975
   $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 10976
   HEAP32[$524 >> 2] = $12; //@line 10977
   $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 10978
   HEAP32[$525 >> 2] = $14; //@line 10979
   $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 10980
   HEAP32[$526 >> 2] = $16; //@line 10981
   $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 10982
   HEAP32[$527 >> 2] = $18; //@line 10983
   $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 10984
   HEAP32[$528 >> 2] = $20; //@line 10985
   $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 10986
   HEAP32[$529 >> 2] = $22; //@line 10987
   $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 10988
   HEAP32[$530 >> 2] = $24; //@line 10989
   $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 10990
   HEAP32[$531 >> 2] = $26; //@line 10991
   $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 10992
   HEAP32[$532 >> 2] = $28; //@line 10993
   $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 10994
   HEAP32[$533 >> 2] = $30; //@line 10995
   $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 10996
   HEAP32[$534 >> 2] = $32; //@line 10997
   $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 10998
   HEAP32[$535 >> 2] = $34; //@line 10999
   $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 11000
   HEAP32[$536 >> 2] = $36; //@line 11001
   $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 11002
   HEAP32[$537 >> 2] = $38; //@line 11003
   $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 11004
   HEAP32[$538 >> 2] = $40; //@line 11005
   $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 11006
   HEAP32[$539 >> 2] = $42; //@line 11007
   $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 11008
   HEAP32[$540 >> 2] = $44; //@line 11009
   $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 11010
   HEAP32[$541 >> 2] = $46; //@line 11011
   $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 11012
   HEAP32[$542 >> 2] = $54; //@line 11013
   $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 11014
   HEAP32[$543 >> 2] = $50; //@line 11015
   $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 11016
   HEAP32[$544 >> 2] = $52; //@line 11017
   $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 11018
   HEAP8[$545 >> 0] = $504; //@line 11019
   $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 11020
   HEAP32[$546 >> 2] = $56; //@line 11021
   $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 11022
   HEAP32[$547 >> 2] = $58; //@line 11023
   $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 11024
   HEAP32[$548 >> 2] = $62; //@line 11025
   $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 11026
   HEAP32[$549 >> 2] = $60; //@line 11027
   $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 11028
   HEAP32[$550 >> 2] = $64; //@line 11029
   $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 11030
   HEAP32[$551 >> 2] = $66; //@line 11031
   $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 11032
   HEAP32[$552 >> 2] = $68; //@line 11033
   $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 11034
   HEAP32[$553 >> 2] = $70; //@line 11035
   $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 11036
   HEAP32[$554 >> 2] = $72; //@line 11037
   $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 11038
   HEAP32[$555 >> 2] = $74; //@line 11039
   $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 11040
   HEAP32[$556 >> 2] = $76; //@line 11041
   $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 11042
   HEAP32[$557 >> 2] = $78; //@line 11043
   $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 11044
   HEAP32[$558 >> 2] = $80; //@line 11045
   $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 11046
   HEAP32[$559 >> 2] = $82; //@line 11047
   $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 11048
   HEAP32[$560 >> 2] = $84; //@line 11049
   $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 11050
   HEAP32[$561 >> 2] = $86; //@line 11051
   $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 11052
   HEAP32[$562 >> 2] = $88; //@line 11053
   $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 11054
   HEAP32[$563 >> 2] = $90; //@line 11055
   $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 11056
   HEAP32[$564 >> 2] = $92; //@line 11057
   $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 11058
   HEAP32[$565 >> 2] = $94; //@line 11059
   $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 11060
   HEAP32[$566 >> 2] = $96; //@line 11061
   $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 11062
   HEAP32[$567 >> 2] = $98; //@line 11063
   $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 11064
   HEAP32[$568 >> 2] = $100; //@line 11065
   $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 11066
   HEAP32[$569 >> 2] = $102; //@line 11067
   $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 11068
   HEAP32[$570 >> 2] = $104; //@line 11069
   $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 11070
   HEAP32[$571 >> 2] = $106; //@line 11071
   $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 11072
   HEAP32[$572 >> 2] = $108; //@line 11073
   $573 = $ReallocAsyncCtx4 + 220 | 0; //@line 11074
   HEAP32[$573 >> 2] = $110; //@line 11075
   $574 = $ReallocAsyncCtx4 + 224 | 0; //@line 11076
   HEAP32[$574 >> 2] = $112; //@line 11077
   $575 = $ReallocAsyncCtx4 + 228 | 0; //@line 11078
   HEAP8[$575 >> 0] = $114; //@line 11079
   $576 = $ReallocAsyncCtx4 + 232 | 0; //@line 11080
   HEAP32[$576 >> 2] = $116; //@line 11081
   $577 = $ReallocAsyncCtx4 + 236 | 0; //@line 11082
   HEAP8[$577 >> 0] = $118; //@line 11083
   $578 = $ReallocAsyncCtx4 + 240 | 0; //@line 11084
   HEAP32[$578 >> 2] = $120; //@line 11085
   $579 = $ReallocAsyncCtx4 + 244 | 0; //@line 11086
   HEAP32[$579 >> 2] = $122; //@line 11087
   $580 = $ReallocAsyncCtx4 + 248 | 0; //@line 11088
   HEAP32[$580 >> 2] = $124; //@line 11089
   $581 = $ReallocAsyncCtx4 + 252 | 0; //@line 11090
   HEAP8[$581 >> 0] = $126; //@line 11091
   $582 = $ReallocAsyncCtx4 + 256 | 0; //@line 11092
   HEAP32[$582 >> 2] = $128; //@line 11093
   $583 = $ReallocAsyncCtx4 + 260 | 0; //@line 11094
   HEAP32[$583 >> 2] = $130; //@line 11095
   $584 = $ReallocAsyncCtx4 + 264 | 0; //@line 11096
   HEAP32[$584 >> 2] = $$096$be; //@line 11097
   $585 = $ReallocAsyncCtx4 + 268 | 0; //@line 11098
   HEAP32[$585 >> 2] = $134; //@line 11099
   $586 = $ReallocAsyncCtx4 + 272 | 0; //@line 11100
   HEAP32[$586 >> 2] = $136; //@line 11101
   sp = STACKTOP; //@line 11102
   return;
  }
  HEAP8[___async_retval >> 0] = $518 & 1; //@line 11107
  ___async_unwind = 0; //@line 11108
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 11109
  $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 11110
  HEAP32[$519 >> 2] = $2; //@line 11111
  $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 11112
  HEAP32[$520 >> 2] = $4; //@line 11113
  $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 11114
  HEAP32[$521 >> 2] = $6; //@line 11115
  $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 11116
  HEAP32[$522 >> 2] = $8; //@line 11117
  $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 11118
  HEAP32[$523 >> 2] = $10; //@line 11119
  $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 11120
  HEAP32[$524 >> 2] = $12; //@line 11121
  $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 11122
  HEAP32[$525 >> 2] = $14; //@line 11123
  $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 11124
  HEAP32[$526 >> 2] = $16; //@line 11125
  $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 11126
  HEAP32[$527 >> 2] = $18; //@line 11127
  $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 11128
  HEAP32[$528 >> 2] = $20; //@line 11129
  $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 11130
  HEAP32[$529 >> 2] = $22; //@line 11131
  $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 11132
  HEAP32[$530 >> 2] = $24; //@line 11133
  $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 11134
  HEAP32[$531 >> 2] = $26; //@line 11135
  $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 11136
  HEAP32[$532 >> 2] = $28; //@line 11137
  $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 11138
  HEAP32[$533 >> 2] = $30; //@line 11139
  $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 11140
  HEAP32[$534 >> 2] = $32; //@line 11141
  $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 11142
  HEAP32[$535 >> 2] = $34; //@line 11143
  $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 11144
  HEAP32[$536 >> 2] = $36; //@line 11145
  $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 11146
  HEAP32[$537 >> 2] = $38; //@line 11147
  $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 11148
  HEAP32[$538 >> 2] = $40; //@line 11149
  $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 11150
  HEAP32[$539 >> 2] = $42; //@line 11151
  $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 11152
  HEAP32[$540 >> 2] = $44; //@line 11153
  $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 11154
  HEAP32[$541 >> 2] = $46; //@line 11155
  $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 11156
  HEAP32[$542 >> 2] = $54; //@line 11157
  $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 11158
  HEAP32[$543 >> 2] = $50; //@line 11159
  $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 11160
  HEAP32[$544 >> 2] = $52; //@line 11161
  $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 11162
  HEAP8[$545 >> 0] = $504; //@line 11163
  $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 11164
  HEAP32[$546 >> 2] = $56; //@line 11165
  $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 11166
  HEAP32[$547 >> 2] = $58; //@line 11167
  $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 11168
  HEAP32[$548 >> 2] = $62; //@line 11169
  $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 11170
  HEAP32[$549 >> 2] = $60; //@line 11171
  $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 11172
  HEAP32[$550 >> 2] = $64; //@line 11173
  $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 11174
  HEAP32[$551 >> 2] = $66; //@line 11175
  $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 11176
  HEAP32[$552 >> 2] = $68; //@line 11177
  $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 11178
  HEAP32[$553 >> 2] = $70; //@line 11179
  $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 11180
  HEAP32[$554 >> 2] = $72; //@line 11181
  $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 11182
  HEAP32[$555 >> 2] = $74; //@line 11183
  $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 11184
  HEAP32[$556 >> 2] = $76; //@line 11185
  $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 11186
  HEAP32[$557 >> 2] = $78; //@line 11187
  $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 11188
  HEAP32[$558 >> 2] = $80; //@line 11189
  $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 11190
  HEAP32[$559 >> 2] = $82; //@line 11191
  $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 11192
  HEAP32[$560 >> 2] = $84; //@line 11193
  $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 11194
  HEAP32[$561 >> 2] = $86; //@line 11195
  $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 11196
  HEAP32[$562 >> 2] = $88; //@line 11197
  $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 11198
  HEAP32[$563 >> 2] = $90; //@line 11199
  $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 11200
  HEAP32[$564 >> 2] = $92; //@line 11201
  $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 11202
  HEAP32[$565 >> 2] = $94; //@line 11203
  $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 11204
  HEAP32[$566 >> 2] = $96; //@line 11205
  $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 11206
  HEAP32[$567 >> 2] = $98; //@line 11207
  $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 11208
  HEAP32[$568 >> 2] = $100; //@line 11209
  $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 11210
  HEAP32[$569 >> 2] = $102; //@line 11211
  $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 11212
  HEAP32[$570 >> 2] = $104; //@line 11213
  $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 11214
  HEAP32[$571 >> 2] = $106; //@line 11215
  $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 11216
  HEAP32[$572 >> 2] = $108; //@line 11217
  $573 = $ReallocAsyncCtx4 + 220 | 0; //@line 11218
  HEAP32[$573 >> 2] = $110; //@line 11219
  $574 = $ReallocAsyncCtx4 + 224 | 0; //@line 11220
  HEAP32[$574 >> 2] = $112; //@line 11221
  $575 = $ReallocAsyncCtx4 + 228 | 0; //@line 11222
  HEAP8[$575 >> 0] = $114; //@line 11223
  $576 = $ReallocAsyncCtx4 + 232 | 0; //@line 11224
  HEAP32[$576 >> 2] = $116; //@line 11225
  $577 = $ReallocAsyncCtx4 + 236 | 0; //@line 11226
  HEAP8[$577 >> 0] = $118; //@line 11227
  $578 = $ReallocAsyncCtx4 + 240 | 0; //@line 11228
  HEAP32[$578 >> 2] = $120; //@line 11229
  $579 = $ReallocAsyncCtx4 + 244 | 0; //@line 11230
  HEAP32[$579 >> 2] = $122; //@line 11231
  $580 = $ReallocAsyncCtx4 + 248 | 0; //@line 11232
  HEAP32[$580 >> 2] = $124; //@line 11233
  $581 = $ReallocAsyncCtx4 + 252 | 0; //@line 11234
  HEAP8[$581 >> 0] = $126; //@line 11235
  $582 = $ReallocAsyncCtx4 + 256 | 0; //@line 11236
  HEAP32[$582 >> 2] = $128; //@line 11237
  $583 = $ReallocAsyncCtx4 + 260 | 0; //@line 11238
  HEAP32[$583 >> 2] = $130; //@line 11239
  $584 = $ReallocAsyncCtx4 + 264 | 0; //@line 11240
  HEAP32[$584 >> 2] = $$096$be; //@line 11241
  $585 = $ReallocAsyncCtx4 + 268 | 0; //@line 11242
  HEAP32[$585 >> 2] = $134; //@line 11243
  $586 = $ReallocAsyncCtx4 + 272 | 0; //@line 11244
  HEAP32[$586 >> 2] = $136; //@line 11245
  sp = STACKTOP; //@line 11246
  return;
 } else if ((label | 0) == 32) {
  HEAP8[$102 >> 0] = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 11254
  $604 = $$0$be + 5 << 24 >> 24; //@line 11267
  HEAP32[$108 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 11275
  $614 = HEAP32[(HEAP32[$120 >> 2] | 0) + 48 >> 2] | 0; //@line 11278
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 11279
  $615 = FUNCTION_TABLE_iii[$614 & 31]($110, $12) | 0; //@line 11280
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 11283
   $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 11284
   HEAP32[$616 >> 2] = $2; //@line 11285
   $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 11286
   HEAP32[$617 >> 2] = $4; //@line 11287
   $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 11288
   HEAP32[$618 >> 2] = $6; //@line 11289
   $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 11290
   HEAP32[$619 >> 2] = $8; //@line 11291
   $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 11292
   HEAP32[$620 >> 2] = $10; //@line 11293
   $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 11294
   HEAP32[$621 >> 2] = $12; //@line 11295
   $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 11296
   HEAP32[$622 >> 2] = $14; //@line 11297
   $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 11298
   HEAP32[$623 >> 2] = $16; //@line 11299
   $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 11300
   HEAP8[$624 >> 0] = $604; //@line 11301
   $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 11302
   HEAP32[$625 >> 2] = $20; //@line 11303
   $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 11304
   HEAP32[$626 >> 2] = $18; //@line 11305
   $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 11306
   HEAP32[$627 >> 2] = $24; //@line 11307
   $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 11308
   HEAP32[$628 >> 2] = $22; //@line 11309
   $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 11310
   HEAP32[$629 >> 2] = $28; //@line 11311
   $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 11312
   HEAP32[$630 >> 2] = $26; //@line 11313
   $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 11314
   HEAP32[$631 >> 2] = $30; //@line 11315
   $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 11316
   HEAP32[$632 >> 2] = $32; //@line 11317
   $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 11318
   HEAP32[$633 >> 2] = $34; //@line 11319
   $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 11320
   HEAP32[$634 >> 2] = $36; //@line 11321
   $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 11322
   HEAP32[$635 >> 2] = $38; //@line 11323
   $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 11324
   HEAP32[$636 >> 2] = $40; //@line 11325
   $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 11326
   HEAP32[$637 >> 2] = $42; //@line 11327
   $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 11328
   HEAP32[$638 >> 2] = $44; //@line 11329
   $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 11330
   HEAP32[$639 >> 2] = $46; //@line 11331
   $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 11332
   HEAP32[$640 >> 2] = $54; //@line 11333
   $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 11334
   HEAP32[$641 >> 2] = $50; //@line 11335
   $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 11336
   HEAP32[$642 >> 2] = $52; //@line 11337
   $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 11338
   HEAP32[$643 >> 2] = $56; //@line 11339
   $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 11340
   HEAP32[$644 >> 2] = $58; //@line 11341
   $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 11342
   HEAP32[$645 >> 2] = $60; //@line 11343
   $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 11344
   HEAP32[$646 >> 2] = $62; //@line 11345
   $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 11346
   HEAP32[$647 >> 2] = $64; //@line 11347
   $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 11348
   HEAP32[$648 >> 2] = $66; //@line 11349
   $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 11350
   HEAP32[$649 >> 2] = $68; //@line 11351
   $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 11352
   HEAP32[$650 >> 2] = $70; //@line 11353
   $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 11354
   HEAP32[$651 >> 2] = $72; //@line 11355
   $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 11356
   HEAP32[$652 >> 2] = $74; //@line 11357
   $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 11358
   HEAP32[$653 >> 2] = $76; //@line 11359
   $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 11360
   HEAP32[$654 >> 2] = $78; //@line 11361
   $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 11362
   HEAP32[$655 >> 2] = $80; //@line 11363
   $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 11364
   HEAP32[$656 >> 2] = $82; //@line 11365
   $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 11366
   HEAP32[$657 >> 2] = $84; //@line 11367
   $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 11368
   HEAP32[$658 >> 2] = $86; //@line 11369
   $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 11370
   HEAP32[$659 >> 2] = $88; //@line 11371
   $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 11372
   HEAP32[$660 >> 2] = $90; //@line 11373
   $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 11374
   HEAP32[$661 >> 2] = $92; //@line 11375
   $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 11376
   HEAP32[$662 >> 2] = $94; //@line 11377
   $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 11378
   HEAP32[$663 >> 2] = $96; //@line 11379
   $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 11380
   HEAP32[$664 >> 2] = $98; //@line 11381
   $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 11382
   HEAP32[$665 >> 2] = $100; //@line 11383
   $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 11384
   HEAP32[$666 >> 2] = $102; //@line 11385
   $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 11386
   HEAP32[$667 >> 2] = $104; //@line 11387
   $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 11388
   HEAP32[$668 >> 2] = $106; //@line 11389
   $669 = $ReallocAsyncCtx5 + 216 | 0; //@line 11390
   HEAP32[$669 >> 2] = $108; //@line 11391
   $670 = $ReallocAsyncCtx5 + 220 | 0; //@line 11392
   HEAP32[$670 >> 2] = $110; //@line 11393
   $671 = $ReallocAsyncCtx5 + 224 | 0; //@line 11394
   HEAP32[$671 >> 2] = $112; //@line 11395
   $672 = $ReallocAsyncCtx5 + 228 | 0; //@line 11396
   HEAP8[$672 >> 0] = $114; //@line 11397
   $673 = $ReallocAsyncCtx5 + 232 | 0; //@line 11398
   HEAP32[$673 >> 2] = $116; //@line 11399
   $674 = $ReallocAsyncCtx5 + 236 | 0; //@line 11400
   HEAP8[$674 >> 0] = $118; //@line 11401
   $675 = $ReallocAsyncCtx5 + 240 | 0; //@line 11402
   HEAP32[$675 >> 2] = $120; //@line 11403
   $676 = $ReallocAsyncCtx5 + 244 | 0; //@line 11404
   HEAP32[$676 >> 2] = $122; //@line 11405
   $677 = $ReallocAsyncCtx5 + 248 | 0; //@line 11406
   HEAP32[$677 >> 2] = $124; //@line 11407
   $678 = $ReallocAsyncCtx5 + 252 | 0; //@line 11408
   HEAP8[$678 >> 0] = $126; //@line 11409
   $679 = $ReallocAsyncCtx5 + 256 | 0; //@line 11410
   HEAP32[$679 >> 2] = $128; //@line 11411
   $680 = $ReallocAsyncCtx5 + 260 | 0; //@line 11412
   HEAP32[$680 >> 2] = $130; //@line 11413
   $681 = $ReallocAsyncCtx5 + 264 | 0; //@line 11414
   HEAP32[$681 >> 2] = $134; //@line 11415
   $682 = $ReallocAsyncCtx5 + 268 | 0; //@line 11416
   HEAP32[$682 >> 2] = $136; //@line 11417
   sp = STACKTOP; //@line 11418
   return;
  }
  HEAP8[___async_retval >> 0] = $615; //@line 11422
  ___async_unwind = 0; //@line 11423
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 11424
  $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 11425
  HEAP32[$616 >> 2] = $2; //@line 11426
  $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 11427
  HEAP32[$617 >> 2] = $4; //@line 11428
  $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 11429
  HEAP32[$618 >> 2] = $6; //@line 11430
  $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 11431
  HEAP32[$619 >> 2] = $8; //@line 11432
  $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 11433
  HEAP32[$620 >> 2] = $10; //@line 11434
  $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 11435
  HEAP32[$621 >> 2] = $12; //@line 11436
  $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 11437
  HEAP32[$622 >> 2] = $14; //@line 11438
  $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 11439
  HEAP32[$623 >> 2] = $16; //@line 11440
  $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 11441
  HEAP8[$624 >> 0] = $604; //@line 11442
  $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 11443
  HEAP32[$625 >> 2] = $20; //@line 11444
  $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 11445
  HEAP32[$626 >> 2] = $18; //@line 11446
  $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 11447
  HEAP32[$627 >> 2] = $24; //@line 11448
  $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 11449
  HEAP32[$628 >> 2] = $22; //@line 11450
  $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 11451
  HEAP32[$629 >> 2] = $28; //@line 11452
  $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 11453
  HEAP32[$630 >> 2] = $26; //@line 11454
  $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 11455
  HEAP32[$631 >> 2] = $30; //@line 11456
  $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 11457
  HEAP32[$632 >> 2] = $32; //@line 11458
  $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 11459
  HEAP32[$633 >> 2] = $34; //@line 11460
  $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 11461
  HEAP32[$634 >> 2] = $36; //@line 11462
  $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 11463
  HEAP32[$635 >> 2] = $38; //@line 11464
  $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 11465
  HEAP32[$636 >> 2] = $40; //@line 11466
  $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 11467
  HEAP32[$637 >> 2] = $42; //@line 11468
  $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 11469
  HEAP32[$638 >> 2] = $44; //@line 11470
  $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 11471
  HEAP32[$639 >> 2] = $46; //@line 11472
  $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 11473
  HEAP32[$640 >> 2] = $54; //@line 11474
  $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 11475
  HEAP32[$641 >> 2] = $50; //@line 11476
  $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 11477
  HEAP32[$642 >> 2] = $52; //@line 11478
  $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 11479
  HEAP32[$643 >> 2] = $56; //@line 11480
  $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 11481
  HEAP32[$644 >> 2] = $58; //@line 11482
  $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 11483
  HEAP32[$645 >> 2] = $60; //@line 11484
  $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 11485
  HEAP32[$646 >> 2] = $62; //@line 11486
  $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 11487
  HEAP32[$647 >> 2] = $64; //@line 11488
  $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 11489
  HEAP32[$648 >> 2] = $66; //@line 11490
  $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 11491
  HEAP32[$649 >> 2] = $68; //@line 11492
  $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 11493
  HEAP32[$650 >> 2] = $70; //@line 11494
  $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 11495
  HEAP32[$651 >> 2] = $72; //@line 11496
  $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 11497
  HEAP32[$652 >> 2] = $74; //@line 11498
  $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 11499
  HEAP32[$653 >> 2] = $76; //@line 11500
  $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 11501
  HEAP32[$654 >> 2] = $78; //@line 11502
  $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 11503
  HEAP32[$655 >> 2] = $80; //@line 11504
  $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 11505
  HEAP32[$656 >> 2] = $82; //@line 11506
  $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 11507
  HEAP32[$657 >> 2] = $84; //@line 11508
  $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 11509
  HEAP32[$658 >> 2] = $86; //@line 11510
  $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 11511
  HEAP32[$659 >> 2] = $88; //@line 11512
  $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 11513
  HEAP32[$660 >> 2] = $90; //@line 11514
  $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 11515
  HEAP32[$661 >> 2] = $92; //@line 11516
  $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 11517
  HEAP32[$662 >> 2] = $94; //@line 11518
  $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 11519
  HEAP32[$663 >> 2] = $96; //@line 11520
  $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 11521
  HEAP32[$664 >> 2] = $98; //@line 11522
  $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 11523
  HEAP32[$665 >> 2] = $100; //@line 11524
  $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 11525
  HEAP32[$666 >> 2] = $102; //@line 11526
  $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 11527
  HEAP32[$667 >> 2] = $104; //@line 11528
  $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 11529
  HEAP32[$668 >> 2] = $106; //@line 11530
  $669 = $ReallocAsyncCtx5 + 216 | 0; //@line 11531
  HEAP32[$669 >> 2] = $108; //@line 11532
  $670 = $ReallocAsyncCtx5 + 220 | 0; //@line 11533
  HEAP32[$670 >> 2] = $110; //@line 11534
  $671 = $ReallocAsyncCtx5 + 224 | 0; //@line 11535
  HEAP32[$671 >> 2] = $112; //@line 11536
  $672 = $ReallocAsyncCtx5 + 228 | 0; //@line 11537
  HEAP8[$672 >> 0] = $114; //@line 11538
  $673 = $ReallocAsyncCtx5 + 232 | 0; //@line 11539
  HEAP32[$673 >> 2] = $116; //@line 11540
  $674 = $ReallocAsyncCtx5 + 236 | 0; //@line 11541
  HEAP8[$674 >> 0] = $118; //@line 11542
  $675 = $ReallocAsyncCtx5 + 240 | 0; //@line 11543
  HEAP32[$675 >> 2] = $120; //@line 11544
  $676 = $ReallocAsyncCtx5 + 244 | 0; //@line 11545
  HEAP32[$676 >> 2] = $122; //@line 11546
  $677 = $ReallocAsyncCtx5 + 248 | 0; //@line 11547
  HEAP32[$677 >> 2] = $124; //@line 11548
  $678 = $ReallocAsyncCtx5 + 252 | 0; //@line 11549
  HEAP8[$678 >> 0] = $126; //@line 11550
  $679 = $ReallocAsyncCtx5 + 256 | 0; //@line 11551
  HEAP32[$679 >> 2] = $128; //@line 11552
  $680 = $ReallocAsyncCtx5 + 260 | 0; //@line 11553
  HEAP32[$680 >> 2] = $130; //@line 11554
  $681 = $ReallocAsyncCtx5 + 264 | 0; //@line 11555
  HEAP32[$681 >> 2] = $134; //@line 11556
  $682 = $ReallocAsyncCtx5 + 268 | 0; //@line 11557
  HEAP32[$682 >> 2] = $136; //@line 11558
  sp = STACKTOP; //@line 11559
  return;
 } else if ((label | 0) == 36) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 11564
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_387($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i104 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $353 = 0, $36 = 0, $364 = 0, $365 = 0, $38 = 0, $4 = 0, $40 = 0, $402 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $478 = 0, $48 = 0, $482 = 0, $486 = 0, $489 = 0, $495 = 0, $498 = 0, $499 = 0, $50 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $595 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11605
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11607
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11609
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11611
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11613
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11615
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11617
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11619
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11621
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11623
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11625
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11627
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11629
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11631
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11633
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11635
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11637
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11639
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11641
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11643
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11645
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11647
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 11649
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11651
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 11653
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11655
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 11657
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 11659
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 11661
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 11663
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 11665
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 11667
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 11669
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 11671
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 11673
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 11675
 $72 = HEAP8[$0 + 144 >> 0] | 0; //@line 11677
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 11679
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 11681
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 11683
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 11685
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 11687
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 11689
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 11691
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 11693
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 11695
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 11697
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 11699
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 11701
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 11703
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 11705
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 11707
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 11709
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 11711
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 11713
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 11715
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 11717
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 11719
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 11721
 $118 = HEAP8[$0 + 236 >> 0] | 0; //@line 11723
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 11725
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 11727
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 11729
 $126 = HEAP8[$0 + 252 >> 0] | 0; //@line 11731
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 11733
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 11735
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 11737
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 11739
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 11741
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$64 >> 0] = HEAP8[$24 >> 0] | 0; //@line 11746
  HEAP32[$78 >> 2] = HEAP32[$44 >> 2]; //@line 11748
  HEAP8[$88 >> 0] = HEAP8[$34 >> 0] | 0; //@line 11750
 }
 $352 = HEAP8[$20 >> 0] | 0; //@line 11753
 $353 = $352 & 255; //@line 11754
 if (((-128 - (HEAP8[$30 >> 0] | 0) & 255) + -1 | 0) > ($353 | 0)) {
  HEAP8[$94 + 4 + $353 >> 0] = 5; //@line 11762
  HEAP8[$20 >> 0] = $352 + 2 << 24 >> 24; //@line 11764
  HEAP8[($352 + 1 & 255) + ($94 + 4) >> 0] = $AsyncRetVal; //@line 11767
  HEAP8[$92 >> 0] = 1; //@line 11768
  HEAP8[$10 >> 0] = 1; //@line 11769
  $$0$i104 = 0; //@line 11770
 } else {
  $$0$i104 = -1e3; //@line 11772
 }
 $$0$be = $72; //@line 11774
 $$096$be = $$0$i104; //@line 11774
 L8 : while (1) {
  if (($$0$be & 255) >= ($118 & 255)) {
   label = 33; //@line 11778
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 11782
  switch (HEAP8[$124 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 11787
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 11792
    break L8;
    break;
   }
  case 7:
   {
    label = 19; //@line 11797
    break L8;
    break;
   }
  case 9:
   {
    label = 24; //@line 11802
    break L8;
    break;
   }
  case 10:
   {
    label = 29; //@line 11807
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$56 >> 2] = 0; //@line 11812
    HEAP8[$42 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 11817
    HEAP8[$32 >> 0] = HEAP8[$124 + ($$0$be + 2 & 255) >> 0] | 0; //@line 11822
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 11823
    continue L8;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 11828
    $234 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 11831
    HEAP8[$2 >> 0] = $234; //@line 11832
    HEAP16[$14 >> 1] = 1 << ($234 & 255); //@line 11836
    $239 = HEAP8[$20 >> 0] | 0; //@line 11838
    if (($239 & 255) >= (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 11842
     $$096$be = -1e3; //@line 11842
     continue L8;
    }
    HEAP8[$20 >> 0] = $239 + 1 << 24 >> 24; //@line 11848
    HEAP8[($239 & 255) + ($94 + 4) >> 0] = 4; //@line 11849
    HEAP8[$10 >> 0] = 1; //@line 11850
    $$0$be = $231; //@line 11851
    $$096$be = 0; //@line 11851
    continue L8;
    break;
   }
  case 6:
   {
    $364 = HEAP8[$20 >> 0] | 0; //@line 11857
    $365 = $364 & 255; //@line 11858
    if (((-128 - (HEAP8[$30 >> 0] | 0) & 255) + -2 | 0) <= ($365 | 0)) {
     $$0$be = $137; //@line 11864
     $$096$be = -1e3; //@line 11864
     continue L8;
    }
    HEAP8[$94 + 4 + $365 >> 0] = 6; //@line 11869
    HEAP8[($364 + 1 & 255) + ($94 + 4) >> 0] = -1; //@line 11873
    HEAP8[$20 >> 0] = $364 + 3 << 24 >> 24; //@line 11875
    HEAP8[($364 + 2 & 255) + ($94 + 4) >> 0] = $114; //@line 11878
    HEAP8[$10 >> 0] = 1; //@line 11879
    $$0$be = $137; //@line 11880
    $$096$be = 0; //@line 11880
    continue L8;
    break;
   }
  case 8:
   {
    $478 = $$0$be + 2 << 24 >> 24; //@line 11885
    $482 = HEAP8[$124 + ($137 & 255) >> 0] & 15; //@line 11889
    $486 = ($482 + ($482 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 11894
    HEAP32[$36 >> 2] = $486; //@line 11895
    HEAP32[$48 >> 2] = $486 + 1e3; //@line 11897
    $489 = HEAP8[$20 >> 0] | 0; //@line 11899
    if (($489 & 255) >= (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
     $$0$be = $478; //@line 11903
     $$096$be = -1e3; //@line 11903
     continue L8;
    }
    HEAP8[$20 >> 0] = $489 + 1 << 24 >> 24; //@line 11909
    HEAP8[($489 & 255) + ($94 + 4) >> 0] = 8; //@line 11910
    HEAP8[$92 >> 0] = 1; //@line 11911
    HEAP8[$10 >> 0] = 1; //@line 11912
    $$0$be = $478; //@line 11913
    $$096$be = 0; //@line 11913
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 11918
    $$096$be = -1013; //@line 11918
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$134 >> 0] = 0; //@line 11924
  HEAP8[$66 >> 0] = 0; //@line 11925
  HEAP8[$70 >> 0] = 0; //@line 11926
  HEAP8[$40 >> 0] = 0; //@line 11927
  $148 = $137 & 255; //@line 11928
  $149 = $148 + -1 | 0; //@line 11929
  HEAP32[$16 >> 2] = $124 + $149; //@line 11931
  HEAP8[$6 >> 0] = $80 - $149; //@line 11934
  HEAP8[$122 >> 0] = HEAP8[$132 >> 0] | 0; //@line 11936
  HEAP8[$104 >> 0] = HEAP8[$112 >> 0] | 0; //@line 11938
  HEAP8[$86 >> 0] = HEAP8[$98 >> 0] | 0; //@line 11940
  HEAP8[$68 >> 0] = HEAP8[$76 >> 0] | 0; //@line 11942
  HEAP8[$46 >> 0] = HEAP8[$60 >> 0] | 0; //@line 11944
  $160 = HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] | 0; //@line 11947
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 11948
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($110, $84, $134, $66, $70, $40) | 0; //@line 11949
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 11952
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 11953
   HEAP32[$162 >> 2] = $2; //@line 11954
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 11955
   HEAP32[$163 >> 2] = $4; //@line 11956
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 11957
   HEAP32[$164 >> 2] = $6; //@line 11958
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 11959
   HEAP32[$165 >> 2] = $8; //@line 11960
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 11961
   HEAP32[$166 >> 2] = $10; //@line 11962
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 11963
   HEAP32[$167 >> 2] = $12; //@line 11964
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 11965
   HEAP32[$168 >> 2] = $14; //@line 11966
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 11967
   HEAP32[$169 >> 2] = $16; //@line 11968
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 11969
   HEAP32[$170 >> 2] = $18; //@line 11970
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 11971
   HEAP32[$171 >> 2] = $20; //@line 11972
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 11973
   HEAP32[$172 >> 2] = $22; //@line 11974
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 11975
   HEAP32[$173 >> 2] = $24; //@line 11976
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 11977
   HEAP32[$174 >> 2] = $26; //@line 11978
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 11979
   HEAP32[$175 >> 2] = $28; //@line 11980
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 11981
   HEAP32[$176 >> 2] = $30; //@line 11982
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 11983
   HEAP32[$177 >> 2] = $32; //@line 11984
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 11985
   HEAP32[$178 >> 2] = $34; //@line 11986
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 11987
   HEAP32[$179 >> 2] = $36; //@line 11988
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 11989
   HEAP32[$180 >> 2] = $38; //@line 11990
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 11991
   HEAP32[$181 >> 2] = $40; //@line 11992
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 11993
   HEAP32[$182 >> 2] = $42; //@line 11994
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 11995
   HEAP32[$183 >> 2] = $44; //@line 11996
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 11997
   HEAP32[$184 >> 2] = $46; //@line 11998
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 11999
   HEAP32[$185 >> 2] = $148; //@line 12000
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 12001
   HEAP32[$186 >> 2] = $50; //@line 12002
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 12003
   HEAP32[$187 >> 2] = $52; //@line 12004
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 12005
   HEAP32[$188 >> 2] = $48; //@line 12006
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 12007
   HEAP32[$189 >> 2] = $54; //@line 12008
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 12009
   HEAP32[$190 >> 2] = $56; //@line 12010
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 12011
   HEAP32[$191 >> 2] = $58; //@line 12012
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 12013
   HEAP32[$192 >> 2] = $60; //@line 12014
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 12015
   HEAP32[$193 >> 2] = $62; //@line 12016
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 12017
   HEAP32[$194 >> 2] = $64; //@line 12018
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 12019
   HEAP32[$195 >> 2] = $66; //@line 12020
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 12021
   HEAP32[$196 >> 2] = $68; //@line 12022
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 12023
   HEAP32[$197 >> 2] = $70; //@line 12024
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 12025
   HEAP32[$198 >> 2] = $74; //@line 12026
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 12027
   HEAP32[$199 >> 2] = $76; //@line 12028
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 12029
   HEAP32[$200 >> 2] = $78; //@line 12030
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 12031
   HEAP32[$201 >> 2] = $80; //@line 12032
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 12033
   HEAP32[$202 >> 2] = $82; //@line 12034
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 12035
   HEAP32[$203 >> 2] = $84; //@line 12036
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 12037
   HEAP32[$204 >> 2] = $86; //@line 12038
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 12039
   HEAP32[$205 >> 2] = $88; //@line 12040
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 12041
   HEAP32[$206 >> 2] = $90; //@line 12042
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 12043
   HEAP32[$207 >> 2] = $92; //@line 12044
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 12045
   HEAP32[$208 >> 2] = $94; //@line 12046
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 12047
   HEAP32[$209 >> 2] = $96; //@line 12048
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 12049
   HEAP32[$210 >> 2] = $98; //@line 12050
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 12051
   HEAP32[$211 >> 2] = $100; //@line 12052
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 12053
   HEAP32[$212 >> 2] = $102; //@line 12054
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 12055
   HEAP32[$213 >> 2] = $104; //@line 12056
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 12057
   HEAP32[$214 >> 2] = $106; //@line 12058
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 12059
   HEAP32[$215 >> 2] = $108; //@line 12060
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 12061
   HEAP32[$216 >> 2] = $110; //@line 12062
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 12063
   HEAP32[$217 >> 2] = $112; //@line 12064
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 12065
   HEAP8[$218 >> 0] = $114; //@line 12066
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 12067
   HEAP32[$219 >> 2] = $116; //@line 12068
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 12069
   HEAP8[$220 >> 0] = $118; //@line 12070
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 12071
   HEAP32[$221 >> 2] = $120; //@line 12072
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 12073
   HEAP32[$222 >> 2] = $122; //@line 12074
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 12075
   HEAP32[$223 >> 2] = $124; //@line 12076
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 12077
   HEAP8[$224 >> 0] = $126; //@line 12078
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 12079
   HEAP32[$225 >> 2] = $128; //@line 12080
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 12081
   HEAP32[$226 >> 2] = $130; //@line 12082
   $227 = $ReallocAsyncCtx + 264 | 0; //@line 12083
   HEAP32[$227 >> 2] = $$096$be; //@line 12084
   $228 = $ReallocAsyncCtx + 268 | 0; //@line 12085
   HEAP32[$228 >> 2] = $132; //@line 12086
   $229 = $ReallocAsyncCtx + 272 | 0; //@line 12087
   HEAP32[$229 >> 2] = $134; //@line 12088
   sp = STACKTOP; //@line 12089
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 12093
  ___async_unwind = 0; //@line 12094
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 12095
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 12096
  HEAP32[$162 >> 2] = $2; //@line 12097
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 12098
  HEAP32[$163 >> 2] = $4; //@line 12099
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 12100
  HEAP32[$164 >> 2] = $6; //@line 12101
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 12102
  HEAP32[$165 >> 2] = $8; //@line 12103
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 12104
  HEAP32[$166 >> 2] = $10; //@line 12105
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 12106
  HEAP32[$167 >> 2] = $12; //@line 12107
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 12108
  HEAP32[$168 >> 2] = $14; //@line 12109
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 12110
  HEAP32[$169 >> 2] = $16; //@line 12111
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 12112
  HEAP32[$170 >> 2] = $18; //@line 12113
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 12114
  HEAP32[$171 >> 2] = $20; //@line 12115
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 12116
  HEAP32[$172 >> 2] = $22; //@line 12117
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 12118
  HEAP32[$173 >> 2] = $24; //@line 12119
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 12120
  HEAP32[$174 >> 2] = $26; //@line 12121
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 12122
  HEAP32[$175 >> 2] = $28; //@line 12123
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 12124
  HEAP32[$176 >> 2] = $30; //@line 12125
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 12126
  HEAP32[$177 >> 2] = $32; //@line 12127
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 12128
  HEAP32[$178 >> 2] = $34; //@line 12129
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 12130
  HEAP32[$179 >> 2] = $36; //@line 12131
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 12132
  HEAP32[$180 >> 2] = $38; //@line 12133
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 12134
  HEAP32[$181 >> 2] = $40; //@line 12135
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 12136
  HEAP32[$182 >> 2] = $42; //@line 12137
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 12138
  HEAP32[$183 >> 2] = $44; //@line 12139
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 12140
  HEAP32[$184 >> 2] = $46; //@line 12141
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 12142
  HEAP32[$185 >> 2] = $148; //@line 12143
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 12144
  HEAP32[$186 >> 2] = $50; //@line 12145
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 12146
  HEAP32[$187 >> 2] = $52; //@line 12147
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 12148
  HEAP32[$188 >> 2] = $48; //@line 12149
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 12150
  HEAP32[$189 >> 2] = $54; //@line 12151
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 12152
  HEAP32[$190 >> 2] = $56; //@line 12153
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 12154
  HEAP32[$191 >> 2] = $58; //@line 12155
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 12156
  HEAP32[$192 >> 2] = $60; //@line 12157
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 12158
  HEAP32[$193 >> 2] = $62; //@line 12159
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 12160
  HEAP32[$194 >> 2] = $64; //@line 12161
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 12162
  HEAP32[$195 >> 2] = $66; //@line 12163
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 12164
  HEAP32[$196 >> 2] = $68; //@line 12165
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 12166
  HEAP32[$197 >> 2] = $70; //@line 12167
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 12168
  HEAP32[$198 >> 2] = $74; //@line 12169
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 12170
  HEAP32[$199 >> 2] = $76; //@line 12171
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 12172
  HEAP32[$200 >> 2] = $78; //@line 12173
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 12174
  HEAP32[$201 >> 2] = $80; //@line 12175
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 12176
  HEAP32[$202 >> 2] = $82; //@line 12177
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 12178
  HEAP32[$203 >> 2] = $84; //@line 12179
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 12180
  HEAP32[$204 >> 2] = $86; //@line 12181
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 12182
  HEAP32[$205 >> 2] = $88; //@line 12183
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 12184
  HEAP32[$206 >> 2] = $90; //@line 12185
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 12186
  HEAP32[$207 >> 2] = $92; //@line 12187
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 12188
  HEAP32[$208 >> 2] = $94; //@line 12189
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 12190
  HEAP32[$209 >> 2] = $96; //@line 12191
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 12192
  HEAP32[$210 >> 2] = $98; //@line 12193
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 12194
  HEAP32[$211 >> 2] = $100; //@line 12195
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 12196
  HEAP32[$212 >> 2] = $102; //@line 12197
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 12198
  HEAP32[$213 >> 2] = $104; //@line 12199
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 12200
  HEAP32[$214 >> 2] = $106; //@line 12201
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 12202
  HEAP32[$215 >> 2] = $108; //@line 12203
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 12204
  HEAP32[$216 >> 2] = $110; //@line 12205
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 12206
  HEAP32[$217 >> 2] = $112; //@line 12207
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 12208
  HEAP8[$218 >> 0] = $114; //@line 12209
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 12210
  HEAP32[$219 >> 2] = $116; //@line 12211
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 12212
  HEAP8[$220 >> 0] = $118; //@line 12213
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 12214
  HEAP32[$221 >> 2] = $120; //@line 12215
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 12216
  HEAP32[$222 >> 2] = $122; //@line 12217
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 12218
  HEAP32[$223 >> 2] = $124; //@line 12219
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 12220
  HEAP8[$224 >> 0] = $126; //@line 12221
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 12222
  HEAP32[$225 >> 2] = $128; //@line 12223
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 12224
  HEAP32[$226 >> 2] = $130; //@line 12225
  $227 = $ReallocAsyncCtx + 264 | 0; //@line 12226
  HEAP32[$227 >> 2] = $$096$be; //@line 12227
  $228 = $ReallocAsyncCtx + 268 | 0; //@line 12228
  HEAP32[$228 >> 2] = $132; //@line 12229
  $229 = $ReallocAsyncCtx + 272 | 0; //@line 12230
  HEAP32[$229 >> 2] = $134; //@line 12231
  sp = STACKTOP; //@line 12232
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 12238
  HEAP8[$34 >> 0] = ($247 & 255) >>> 4 & 7; //@line 12243
  HEAP8[$24 >> 0] = $247 & 15; //@line 12245
  $266 = $$0$be + 5 << 24 >> 24; //@line 12259
  HEAP32[$44 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 12267
  $276 = HEAP32[(HEAP32[$52 >> 2] | 0) + 40 >> 2] | 0; //@line 12270
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 12271
  $277 = FUNCTION_TABLE_iii[$276 & 31]($110, $50) | 0; //@line 12272
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 12275
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 12276
   HEAP32[$278 >> 2] = $2; //@line 12277
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 12278
   HEAP32[$279 >> 2] = $4; //@line 12279
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 12280
   HEAP32[$280 >> 2] = $6; //@line 12281
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 12282
   HEAP32[$281 >> 2] = $8; //@line 12283
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 12284
   HEAP32[$282 >> 2] = $10; //@line 12285
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 12286
   HEAP32[$283 >> 2] = $12; //@line 12287
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 12288
   HEAP32[$284 >> 2] = $14; //@line 12289
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 12290
   HEAP32[$285 >> 2] = $16; //@line 12291
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 12292
   HEAP32[$286 >> 2] = $18; //@line 12293
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 12294
   HEAP32[$287 >> 2] = $20; //@line 12295
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 12296
   HEAP32[$288 >> 2] = $22; //@line 12297
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 12298
   HEAP32[$289 >> 2] = $24; //@line 12299
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 12300
   HEAP32[$290 >> 2] = $26; //@line 12301
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 12302
   HEAP32[$291 >> 2] = $28; //@line 12303
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 12304
   HEAP32[$292 >> 2] = $30; //@line 12305
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 12306
   HEAP32[$293 >> 2] = $32; //@line 12307
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 12308
   HEAP32[$294 >> 2] = $34; //@line 12309
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 12310
   HEAP32[$295 >> 2] = $36; //@line 12311
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 12312
   HEAP32[$296 >> 2] = $38; //@line 12313
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 12314
   HEAP32[$297 >> 2] = $40; //@line 12315
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 12316
   HEAP32[$298 >> 2] = $42; //@line 12317
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 12318
   HEAP32[$299 >> 2] = $44; //@line 12319
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 12320
   HEAP32[$300 >> 2] = $46; //@line 12321
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 12322
   HEAP32[$301 >> 2] = $48; //@line 12323
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 12324
   HEAP32[$302 >> 2] = $50; //@line 12325
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 12326
   HEAP32[$303 >> 2] = $52; //@line 12327
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 12328
   HEAP32[$304 >> 2] = $54; //@line 12329
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 12330
   HEAP32[$305 >> 2] = $56; //@line 12331
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 12332
   HEAP32[$306 >> 2] = $58; //@line 12333
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 12334
   HEAP32[$307 >> 2] = $60; //@line 12335
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 12336
   HEAP32[$308 >> 2] = $62; //@line 12337
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 12338
   HEAP32[$309 >> 2] = $64; //@line 12339
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 12340
   HEAP32[$310 >> 2] = $66; //@line 12341
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 12342
   HEAP32[$311 >> 2] = $68; //@line 12343
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 12344
   HEAP32[$312 >> 2] = $70; //@line 12345
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 12346
   HEAP8[$313 >> 0] = $266; //@line 12347
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 12348
   HEAP32[$314 >> 2] = $74; //@line 12349
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 12350
   HEAP32[$315 >> 2] = $76; //@line 12351
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 12352
   HEAP32[$316 >> 2] = $78; //@line 12353
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 12354
   HEAP32[$317 >> 2] = $80; //@line 12355
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 12356
   HEAP32[$318 >> 2] = $82; //@line 12357
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 12358
   HEAP32[$319 >> 2] = $84; //@line 12359
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 12360
   HEAP32[$320 >> 2] = $86; //@line 12361
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 12362
   HEAP32[$321 >> 2] = $88; //@line 12363
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 12364
   HEAP32[$322 >> 2] = $90; //@line 12365
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 12366
   HEAP32[$323 >> 2] = $92; //@line 12367
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 12368
   HEAP32[$324 >> 2] = $94; //@line 12369
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 12370
   HEAP32[$325 >> 2] = $96; //@line 12371
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 12372
   HEAP32[$326 >> 2] = $98; //@line 12373
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 12374
   HEAP32[$327 >> 2] = $100; //@line 12375
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 12376
   HEAP32[$328 >> 2] = $102; //@line 12377
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 12378
   HEAP32[$329 >> 2] = $104; //@line 12379
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 12380
   HEAP32[$330 >> 2] = $106; //@line 12381
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 12382
   HEAP32[$331 >> 2] = $108; //@line 12383
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 12384
   HEAP32[$332 >> 2] = $110; //@line 12385
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 12386
   HEAP32[$333 >> 2] = $112; //@line 12387
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 12388
   HEAP8[$334 >> 0] = $114; //@line 12389
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 12390
   HEAP32[$335 >> 2] = $116; //@line 12391
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 12392
   HEAP8[$336 >> 0] = $118; //@line 12393
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 12394
   HEAP32[$337 >> 2] = $120; //@line 12395
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 12396
   HEAP32[$338 >> 2] = $122; //@line 12397
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 12398
   HEAP32[$339 >> 2] = $124; //@line 12399
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 12400
   HEAP8[$340 >> 0] = $126; //@line 12401
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 12402
   HEAP32[$341 >> 2] = $128; //@line 12403
   $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 12404
   HEAP32[$342 >> 2] = $130; //@line 12405
   $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 12406
   HEAP32[$343 >> 2] = $132; //@line 12407
   $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 12408
   HEAP32[$344 >> 2] = $134; //@line 12409
   sp = STACKTOP; //@line 12410
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 12414
  ___async_unwind = 0; //@line 12415
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 12416
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 12417
  HEAP32[$278 >> 2] = $2; //@line 12418
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 12419
  HEAP32[$279 >> 2] = $4; //@line 12420
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 12421
  HEAP32[$280 >> 2] = $6; //@line 12422
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 12423
  HEAP32[$281 >> 2] = $8; //@line 12424
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 12425
  HEAP32[$282 >> 2] = $10; //@line 12426
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 12427
  HEAP32[$283 >> 2] = $12; //@line 12428
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 12429
  HEAP32[$284 >> 2] = $14; //@line 12430
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 12431
  HEAP32[$285 >> 2] = $16; //@line 12432
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 12433
  HEAP32[$286 >> 2] = $18; //@line 12434
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 12435
  HEAP32[$287 >> 2] = $20; //@line 12436
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 12437
  HEAP32[$288 >> 2] = $22; //@line 12438
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 12439
  HEAP32[$289 >> 2] = $24; //@line 12440
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 12441
  HEAP32[$290 >> 2] = $26; //@line 12442
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 12443
  HEAP32[$291 >> 2] = $28; //@line 12444
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 12445
  HEAP32[$292 >> 2] = $30; //@line 12446
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 12447
  HEAP32[$293 >> 2] = $32; //@line 12448
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 12449
  HEAP32[$294 >> 2] = $34; //@line 12450
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 12451
  HEAP32[$295 >> 2] = $36; //@line 12452
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 12453
  HEAP32[$296 >> 2] = $38; //@line 12454
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 12455
  HEAP32[$297 >> 2] = $40; //@line 12456
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 12457
  HEAP32[$298 >> 2] = $42; //@line 12458
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 12459
  HEAP32[$299 >> 2] = $44; //@line 12460
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 12461
  HEAP32[$300 >> 2] = $46; //@line 12462
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 12463
  HEAP32[$301 >> 2] = $48; //@line 12464
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 12465
  HEAP32[$302 >> 2] = $50; //@line 12466
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 12467
  HEAP32[$303 >> 2] = $52; //@line 12468
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 12469
  HEAP32[$304 >> 2] = $54; //@line 12470
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 12471
  HEAP32[$305 >> 2] = $56; //@line 12472
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 12473
  HEAP32[$306 >> 2] = $58; //@line 12474
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 12475
  HEAP32[$307 >> 2] = $60; //@line 12476
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 12477
  HEAP32[$308 >> 2] = $62; //@line 12478
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 12479
  HEAP32[$309 >> 2] = $64; //@line 12480
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 12481
  HEAP32[$310 >> 2] = $66; //@line 12482
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 12483
  HEAP32[$311 >> 2] = $68; //@line 12484
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 12485
  HEAP32[$312 >> 2] = $70; //@line 12486
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 12487
  HEAP8[$313 >> 0] = $266; //@line 12488
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 12489
  HEAP32[$314 >> 2] = $74; //@line 12490
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 12491
  HEAP32[$315 >> 2] = $76; //@line 12492
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 12493
  HEAP32[$316 >> 2] = $78; //@line 12494
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 12495
  HEAP32[$317 >> 2] = $80; //@line 12496
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 12497
  HEAP32[$318 >> 2] = $82; //@line 12498
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 12499
  HEAP32[$319 >> 2] = $84; //@line 12500
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 12501
  HEAP32[$320 >> 2] = $86; //@line 12502
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 12503
  HEAP32[$321 >> 2] = $88; //@line 12504
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 12505
  HEAP32[$322 >> 2] = $90; //@line 12506
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 12507
  HEAP32[$323 >> 2] = $92; //@line 12508
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 12509
  HEAP32[$324 >> 2] = $94; //@line 12510
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 12511
  HEAP32[$325 >> 2] = $96; //@line 12512
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 12513
  HEAP32[$326 >> 2] = $98; //@line 12514
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 12515
  HEAP32[$327 >> 2] = $100; //@line 12516
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 12517
  HEAP32[$328 >> 2] = $102; //@line 12518
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 12519
  HEAP32[$329 >> 2] = $104; //@line 12520
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 12521
  HEAP32[$330 >> 2] = $106; //@line 12522
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 12523
  HEAP32[$331 >> 2] = $108; //@line 12524
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 12525
  HEAP32[$332 >> 2] = $110; //@line 12526
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 12527
  HEAP32[$333 >> 2] = $112; //@line 12528
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 12529
  HEAP8[$334 >> 0] = $114; //@line 12530
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 12531
  HEAP32[$335 >> 2] = $116; //@line 12532
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 12533
  HEAP8[$336 >> 0] = $118; //@line 12534
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 12535
  HEAP32[$337 >> 2] = $120; //@line 12536
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 12537
  HEAP32[$338 >> 2] = $122; //@line 12538
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 12539
  HEAP32[$339 >> 2] = $124; //@line 12540
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 12541
  HEAP8[$340 >> 0] = $126; //@line 12542
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 12543
  HEAP32[$341 >> 2] = $128; //@line 12544
  $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 12545
  HEAP32[$342 >> 2] = $130; //@line 12546
  $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 12547
  HEAP32[$343 >> 2] = $132; //@line 12548
  $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 12549
  HEAP32[$344 >> 2] = $134; //@line 12550
  sp = STACKTOP; //@line 12551
  return;
 } else if ((label | 0) == 19) {
  HEAP8[$116 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 12559
  HEAP32[$128 >> 2] = $8; //@line 12560
  HEAP32[$130 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 12581
  HEAP32[$4 >> 2] = 0; //@line 12582
  $402 = $$0$be + 6 << 24 >> 24; //@line 12583
  HEAP8[$18 >> 0] = HEAP8[$124 + ($$0$be + 5 & 255) >> 0] | 0; //@line 12587
  $408 = HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0; //@line 12590
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(272) | 0; //@line 12591
  $409 = FUNCTION_TABLE_iii[$408 & 31]($110, $58) | 0; //@line 12592
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 12595
   $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 12596
   HEAP32[$410 >> 2] = $2; //@line 12597
   $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 12598
   HEAP32[$411 >> 2] = $4; //@line 12599
   $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 12600
   HEAP32[$412 >> 2] = $6; //@line 12601
   $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 12602
   HEAP32[$413 >> 2] = $8; //@line 12603
   $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 12604
   HEAP32[$414 >> 2] = $10; //@line 12605
   $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 12606
   HEAP32[$415 >> 2] = $12; //@line 12607
   $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 12608
   HEAP32[$416 >> 2] = $14; //@line 12609
   $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 12610
   HEAP32[$417 >> 2] = $16; //@line 12611
   $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 12612
   HEAP32[$418 >> 2] = $18; //@line 12613
   $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 12614
   HEAP32[$419 >> 2] = $20; //@line 12615
   $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 12616
   HEAP32[$420 >> 2] = $22; //@line 12617
   $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 12618
   HEAP32[$421 >> 2] = $24; //@line 12619
   $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 12620
   HEAP32[$422 >> 2] = $26; //@line 12621
   $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 12622
   HEAP32[$423 >> 2] = $28; //@line 12623
   $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 12624
   HEAP32[$424 >> 2] = $30; //@line 12625
   $425 = $ReallocAsyncCtx3 + 64 | 0; //@line 12626
   HEAP32[$425 >> 2] = $32; //@line 12627
   $426 = $ReallocAsyncCtx3 + 68 | 0; //@line 12628
   HEAP32[$426 >> 2] = $34; //@line 12629
   $427 = $ReallocAsyncCtx3 + 72 | 0; //@line 12630
   HEAP32[$427 >> 2] = $36; //@line 12631
   $428 = $ReallocAsyncCtx3 + 76 | 0; //@line 12632
   HEAP32[$428 >> 2] = $38; //@line 12633
   $429 = $ReallocAsyncCtx3 + 80 | 0; //@line 12634
   HEAP32[$429 >> 2] = $40; //@line 12635
   $430 = $ReallocAsyncCtx3 + 84 | 0; //@line 12636
   HEAP32[$430 >> 2] = $42; //@line 12637
   $431 = $ReallocAsyncCtx3 + 88 | 0; //@line 12638
   HEAP32[$431 >> 2] = $44; //@line 12639
   $432 = $ReallocAsyncCtx3 + 92 | 0; //@line 12640
   HEAP32[$432 >> 2] = $46; //@line 12641
   $433 = $ReallocAsyncCtx3 + 96 | 0; //@line 12642
   HEAP32[$433 >> 2] = $48; //@line 12643
   $434 = $ReallocAsyncCtx3 + 100 | 0; //@line 12644
   HEAP32[$434 >> 2] = $50; //@line 12645
   $435 = $ReallocAsyncCtx3 + 104 | 0; //@line 12646
   HEAP8[$435 >> 0] = $402; //@line 12647
   $436 = $ReallocAsyncCtx3 + 108 | 0; //@line 12648
   HEAP32[$436 >> 2] = $52; //@line 12649
   $437 = $ReallocAsyncCtx3 + 112 | 0; //@line 12650
   HEAP32[$437 >> 2] = $54; //@line 12651
   $438 = $ReallocAsyncCtx3 + 116 | 0; //@line 12652
   HEAP32[$438 >> 2] = $56; //@line 12653
   $439 = $ReallocAsyncCtx3 + 120 | 0; //@line 12654
   HEAP32[$439 >> 2] = $58; //@line 12655
   $440 = $ReallocAsyncCtx3 + 124 | 0; //@line 12656
   HEAP32[$440 >> 2] = $60; //@line 12657
   $441 = $ReallocAsyncCtx3 + 128 | 0; //@line 12658
   HEAP32[$441 >> 2] = $62; //@line 12659
   $442 = $ReallocAsyncCtx3 + 132 | 0; //@line 12660
   HEAP32[$442 >> 2] = $64; //@line 12661
   $443 = $ReallocAsyncCtx3 + 136 | 0; //@line 12662
   HEAP32[$443 >> 2] = $66; //@line 12663
   $444 = $ReallocAsyncCtx3 + 140 | 0; //@line 12664
   HEAP32[$444 >> 2] = $68; //@line 12665
   $445 = $ReallocAsyncCtx3 + 144 | 0; //@line 12666
   HEAP32[$445 >> 2] = $70; //@line 12667
   $446 = $ReallocAsyncCtx3 + 148 | 0; //@line 12668
   HEAP32[$446 >> 2] = $74; //@line 12669
   $447 = $ReallocAsyncCtx3 + 152 | 0; //@line 12670
   HEAP32[$447 >> 2] = $76; //@line 12671
   $448 = $ReallocAsyncCtx3 + 156 | 0; //@line 12672
   HEAP32[$448 >> 2] = $78; //@line 12673
   $449 = $ReallocAsyncCtx3 + 160 | 0; //@line 12674
   HEAP32[$449 >> 2] = $80; //@line 12675
   $450 = $ReallocAsyncCtx3 + 164 | 0; //@line 12676
   HEAP32[$450 >> 2] = $82; //@line 12677
   $451 = $ReallocAsyncCtx3 + 168 | 0; //@line 12678
   HEAP32[$451 >> 2] = $84; //@line 12679
   $452 = $ReallocAsyncCtx3 + 172 | 0; //@line 12680
   HEAP32[$452 >> 2] = $86; //@line 12681
   $453 = $ReallocAsyncCtx3 + 176 | 0; //@line 12682
   HEAP32[$453 >> 2] = $88; //@line 12683
   $454 = $ReallocAsyncCtx3 + 180 | 0; //@line 12684
   HEAP32[$454 >> 2] = $90; //@line 12685
   $455 = $ReallocAsyncCtx3 + 184 | 0; //@line 12686
   HEAP32[$455 >> 2] = $92; //@line 12687
   $456 = $ReallocAsyncCtx3 + 188 | 0; //@line 12688
   HEAP32[$456 >> 2] = $94; //@line 12689
   $457 = $ReallocAsyncCtx3 + 192 | 0; //@line 12690
   HEAP32[$457 >> 2] = $96; //@line 12691
   $458 = $ReallocAsyncCtx3 + 196 | 0; //@line 12692
   HEAP32[$458 >> 2] = $98; //@line 12693
   $459 = $ReallocAsyncCtx3 + 200 | 0; //@line 12694
   HEAP32[$459 >> 2] = $100; //@line 12695
   $460 = $ReallocAsyncCtx3 + 204 | 0; //@line 12696
   HEAP32[$460 >> 2] = $102; //@line 12697
   $461 = $ReallocAsyncCtx3 + 208 | 0; //@line 12698
   HEAP32[$461 >> 2] = $104; //@line 12699
   $462 = $ReallocAsyncCtx3 + 212 | 0; //@line 12700
   HEAP32[$462 >> 2] = $106; //@line 12701
   $463 = $ReallocAsyncCtx3 + 216 | 0; //@line 12702
   HEAP32[$463 >> 2] = $108; //@line 12703
   $464 = $ReallocAsyncCtx3 + 220 | 0; //@line 12704
   HEAP32[$464 >> 2] = $110; //@line 12705
   $465 = $ReallocAsyncCtx3 + 224 | 0; //@line 12706
   HEAP32[$465 >> 2] = $112; //@line 12707
   $466 = $ReallocAsyncCtx3 + 228 | 0; //@line 12708
   HEAP8[$466 >> 0] = $114; //@line 12709
   $467 = $ReallocAsyncCtx3 + 232 | 0; //@line 12710
   HEAP32[$467 >> 2] = $116; //@line 12711
   $468 = $ReallocAsyncCtx3 + 236 | 0; //@line 12712
   HEAP8[$468 >> 0] = $118; //@line 12713
   $469 = $ReallocAsyncCtx3 + 240 | 0; //@line 12714
   HEAP32[$469 >> 2] = $120; //@line 12715
   $470 = $ReallocAsyncCtx3 + 244 | 0; //@line 12716
   HEAP32[$470 >> 2] = $122; //@line 12717
   $471 = $ReallocAsyncCtx3 + 248 | 0; //@line 12718
   HEAP32[$471 >> 2] = $124; //@line 12719
   $472 = $ReallocAsyncCtx3 + 252 | 0; //@line 12720
   HEAP8[$472 >> 0] = $126; //@line 12721
   $473 = $ReallocAsyncCtx3 + 256 | 0; //@line 12722
   HEAP32[$473 >> 2] = $128; //@line 12723
   $474 = $ReallocAsyncCtx3 + 260 | 0; //@line 12724
   HEAP32[$474 >> 2] = $130; //@line 12725
   $475 = $ReallocAsyncCtx3 + 264 | 0; //@line 12726
   HEAP32[$475 >> 2] = $132; //@line 12727
   $476 = $ReallocAsyncCtx3 + 268 | 0; //@line 12728
   HEAP32[$476 >> 2] = $134; //@line 12729
   sp = STACKTOP; //@line 12730
   return;
  }
  HEAP8[___async_retval >> 0] = $409; //@line 12734
  ___async_unwind = 0; //@line 12735
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 12736
  $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 12737
  HEAP32[$410 >> 2] = $2; //@line 12738
  $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 12739
  HEAP32[$411 >> 2] = $4; //@line 12740
  $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 12741
  HEAP32[$412 >> 2] = $6; //@line 12742
  $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 12743
  HEAP32[$413 >> 2] = $8; //@line 12744
  $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 12745
  HEAP32[$414 >> 2] = $10; //@line 12746
  $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 12747
  HEAP32[$415 >> 2] = $12; //@line 12748
  $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 12749
  HEAP32[$416 >> 2] = $14; //@line 12750
  $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 12751
  HEAP32[$417 >> 2] = $16; //@line 12752
  $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 12753
  HEAP32[$418 >> 2] = $18; //@line 12754
  $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 12755
  HEAP32[$419 >> 2] = $20; //@line 12756
  $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 12757
  HEAP32[$420 >> 2] = $22; //@line 12758
  $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 12759
  HEAP32[$421 >> 2] = $24; //@line 12760
  $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 12761
  HEAP32[$422 >> 2] = $26; //@line 12762
  $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 12763
  HEAP32[$423 >> 2] = $28; //@line 12764
  $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 12765
  HEAP32[$424 >> 2] = $30; //@line 12766
  $425 = $ReallocAsyncCtx3 + 64 | 0; //@line 12767
  HEAP32[$425 >> 2] = $32; //@line 12768
  $426 = $ReallocAsyncCtx3 + 68 | 0; //@line 12769
  HEAP32[$426 >> 2] = $34; //@line 12770
  $427 = $ReallocAsyncCtx3 + 72 | 0; //@line 12771
  HEAP32[$427 >> 2] = $36; //@line 12772
  $428 = $ReallocAsyncCtx3 + 76 | 0; //@line 12773
  HEAP32[$428 >> 2] = $38; //@line 12774
  $429 = $ReallocAsyncCtx3 + 80 | 0; //@line 12775
  HEAP32[$429 >> 2] = $40; //@line 12776
  $430 = $ReallocAsyncCtx3 + 84 | 0; //@line 12777
  HEAP32[$430 >> 2] = $42; //@line 12778
  $431 = $ReallocAsyncCtx3 + 88 | 0; //@line 12779
  HEAP32[$431 >> 2] = $44; //@line 12780
  $432 = $ReallocAsyncCtx3 + 92 | 0; //@line 12781
  HEAP32[$432 >> 2] = $46; //@line 12782
  $433 = $ReallocAsyncCtx3 + 96 | 0; //@line 12783
  HEAP32[$433 >> 2] = $48; //@line 12784
  $434 = $ReallocAsyncCtx3 + 100 | 0; //@line 12785
  HEAP32[$434 >> 2] = $50; //@line 12786
  $435 = $ReallocAsyncCtx3 + 104 | 0; //@line 12787
  HEAP8[$435 >> 0] = $402; //@line 12788
  $436 = $ReallocAsyncCtx3 + 108 | 0; //@line 12789
  HEAP32[$436 >> 2] = $52; //@line 12790
  $437 = $ReallocAsyncCtx3 + 112 | 0; //@line 12791
  HEAP32[$437 >> 2] = $54; //@line 12792
  $438 = $ReallocAsyncCtx3 + 116 | 0; //@line 12793
  HEAP32[$438 >> 2] = $56; //@line 12794
  $439 = $ReallocAsyncCtx3 + 120 | 0; //@line 12795
  HEAP32[$439 >> 2] = $58; //@line 12796
  $440 = $ReallocAsyncCtx3 + 124 | 0; //@line 12797
  HEAP32[$440 >> 2] = $60; //@line 12798
  $441 = $ReallocAsyncCtx3 + 128 | 0; //@line 12799
  HEAP32[$441 >> 2] = $62; //@line 12800
  $442 = $ReallocAsyncCtx3 + 132 | 0; //@line 12801
  HEAP32[$442 >> 2] = $64; //@line 12802
  $443 = $ReallocAsyncCtx3 + 136 | 0; //@line 12803
  HEAP32[$443 >> 2] = $66; //@line 12804
  $444 = $ReallocAsyncCtx3 + 140 | 0; //@line 12805
  HEAP32[$444 >> 2] = $68; //@line 12806
  $445 = $ReallocAsyncCtx3 + 144 | 0; //@line 12807
  HEAP32[$445 >> 2] = $70; //@line 12808
  $446 = $ReallocAsyncCtx3 + 148 | 0; //@line 12809
  HEAP32[$446 >> 2] = $74; //@line 12810
  $447 = $ReallocAsyncCtx3 + 152 | 0; //@line 12811
  HEAP32[$447 >> 2] = $76; //@line 12812
  $448 = $ReallocAsyncCtx3 + 156 | 0; //@line 12813
  HEAP32[$448 >> 2] = $78; //@line 12814
  $449 = $ReallocAsyncCtx3 + 160 | 0; //@line 12815
  HEAP32[$449 >> 2] = $80; //@line 12816
  $450 = $ReallocAsyncCtx3 + 164 | 0; //@line 12817
  HEAP32[$450 >> 2] = $82; //@line 12818
  $451 = $ReallocAsyncCtx3 + 168 | 0; //@line 12819
  HEAP32[$451 >> 2] = $84; //@line 12820
  $452 = $ReallocAsyncCtx3 + 172 | 0; //@line 12821
  HEAP32[$452 >> 2] = $86; //@line 12822
  $453 = $ReallocAsyncCtx3 + 176 | 0; //@line 12823
  HEAP32[$453 >> 2] = $88; //@line 12824
  $454 = $ReallocAsyncCtx3 + 180 | 0; //@line 12825
  HEAP32[$454 >> 2] = $90; //@line 12826
  $455 = $ReallocAsyncCtx3 + 184 | 0; //@line 12827
  HEAP32[$455 >> 2] = $92; //@line 12828
  $456 = $ReallocAsyncCtx3 + 188 | 0; //@line 12829
  HEAP32[$456 >> 2] = $94; //@line 12830
  $457 = $ReallocAsyncCtx3 + 192 | 0; //@line 12831
  HEAP32[$457 >> 2] = $96; //@line 12832
  $458 = $ReallocAsyncCtx3 + 196 | 0; //@line 12833
  HEAP32[$458 >> 2] = $98; //@line 12834
  $459 = $ReallocAsyncCtx3 + 200 | 0; //@line 12835
  HEAP32[$459 >> 2] = $100; //@line 12836
  $460 = $ReallocAsyncCtx3 + 204 | 0; //@line 12837
  HEAP32[$460 >> 2] = $102; //@line 12838
  $461 = $ReallocAsyncCtx3 + 208 | 0; //@line 12839
  HEAP32[$461 >> 2] = $104; //@line 12840
  $462 = $ReallocAsyncCtx3 + 212 | 0; //@line 12841
  HEAP32[$462 >> 2] = $106; //@line 12842
  $463 = $ReallocAsyncCtx3 + 216 | 0; //@line 12843
  HEAP32[$463 >> 2] = $108; //@line 12844
  $464 = $ReallocAsyncCtx3 + 220 | 0; //@line 12845
  HEAP32[$464 >> 2] = $110; //@line 12846
  $465 = $ReallocAsyncCtx3 + 224 | 0; //@line 12847
  HEAP32[$465 >> 2] = $112; //@line 12848
  $466 = $ReallocAsyncCtx3 + 228 | 0; //@line 12849
  HEAP8[$466 >> 0] = $114; //@line 12850
  $467 = $ReallocAsyncCtx3 + 232 | 0; //@line 12851
  HEAP32[$467 >> 2] = $116; //@line 12852
  $468 = $ReallocAsyncCtx3 + 236 | 0; //@line 12853
  HEAP8[$468 >> 0] = $118; //@line 12854
  $469 = $ReallocAsyncCtx3 + 240 | 0; //@line 12855
  HEAP32[$469 >> 2] = $120; //@line 12856
  $470 = $ReallocAsyncCtx3 + 244 | 0; //@line 12857
  HEAP32[$470 >> 2] = $122; //@line 12858
  $471 = $ReallocAsyncCtx3 + 248 | 0; //@line 12859
  HEAP32[$471 >> 2] = $124; //@line 12860
  $472 = $ReallocAsyncCtx3 + 252 | 0; //@line 12861
  HEAP8[$472 >> 0] = $126; //@line 12862
  $473 = $ReallocAsyncCtx3 + 256 | 0; //@line 12863
  HEAP32[$473 >> 2] = $128; //@line 12864
  $474 = $ReallocAsyncCtx3 + 260 | 0; //@line 12865
  HEAP32[$474 >> 2] = $130; //@line 12866
  $475 = $ReallocAsyncCtx3 + 264 | 0; //@line 12867
  HEAP32[$475 >> 2] = $132; //@line 12868
  $476 = $ReallocAsyncCtx3 + 268 | 0; //@line 12869
  HEAP32[$476 >> 2] = $134; //@line 12870
  sp = STACKTOP; //@line 12871
  return;
 } else if ((label | 0) == 24) {
  $495 = $$0$be + 2 << 24 >> 24; //@line 12875
  $498 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 12878
  HEAP8[$54 >> 0] = 0; //@line 12879
  $499 = $498 & 255; //@line 12880
  HEAP8[$62 >> 0] = $499 >>> 5 & 1; //@line 12884
  if ($499 & 16 | 0) {
   HEAP8[$54 >> 0] = 1; //@line 12888
  }
  HEAP8[$74 >> 0] = $499 & 15; //@line 12892
  $508 = HEAP32[(HEAP32[$82 >> 2] | 0) + 44 >> 2] | 0; //@line 12895
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 12896
  $509 = FUNCTION_TABLE_iii[$508 & 31]($110, $22) | 0; //@line 12897
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 12900
   $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 12901
   HEAP32[$510 >> 2] = $2; //@line 12902
   $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 12903
   HEAP32[$511 >> 2] = $4; //@line 12904
   $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 12905
   HEAP32[$512 >> 2] = $6; //@line 12906
   $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 12907
   HEAP32[$513 >> 2] = $8; //@line 12908
   $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 12909
   HEAP32[$514 >> 2] = $10; //@line 12910
   $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 12911
   HEAP32[$515 >> 2] = $12; //@line 12912
   $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 12913
   HEAP32[$516 >> 2] = $14; //@line 12914
   $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 12915
   HEAP32[$517 >> 2] = $16; //@line 12916
   $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 12917
   HEAP32[$518 >> 2] = $18; //@line 12918
   $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 12919
   HEAP32[$519 >> 2] = $20; //@line 12920
   $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 12921
   HEAP32[$520 >> 2] = $22; //@line 12922
   $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 12923
   HEAP32[$521 >> 2] = $24; //@line 12924
   $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 12925
   HEAP32[$522 >> 2] = $26; //@line 12926
   $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 12927
   HEAP32[$523 >> 2] = $28; //@line 12928
   $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 12929
   HEAP32[$524 >> 2] = $30; //@line 12930
   $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 12931
   HEAP32[$525 >> 2] = $32; //@line 12932
   $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 12933
   HEAP32[$526 >> 2] = $34; //@line 12934
   $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 12935
   HEAP32[$527 >> 2] = $36; //@line 12936
   $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 12937
   HEAP32[$528 >> 2] = $38; //@line 12938
   $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 12939
   HEAP32[$529 >> 2] = $40; //@line 12940
   $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 12941
   HEAP32[$530 >> 2] = $42; //@line 12942
   $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 12943
   HEAP32[$531 >> 2] = $44; //@line 12944
   $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 12945
   HEAP32[$532 >> 2] = $46; //@line 12946
   $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 12947
   HEAP32[$533 >> 2] = $48; //@line 12948
   $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 12949
   HEAP32[$534 >> 2] = $50; //@line 12950
   $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 12951
   HEAP32[$535 >> 2] = $52; //@line 12952
   $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 12953
   HEAP8[$536 >> 0] = $495; //@line 12954
   $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 12955
   HEAP32[$537 >> 2] = $54; //@line 12956
   $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 12957
   HEAP32[$538 >> 2] = $56; //@line 12958
   $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 12959
   HEAP32[$539 >> 2] = $60; //@line 12960
   $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 12961
   HEAP32[$540 >> 2] = $58; //@line 12962
   $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 12963
   HEAP32[$541 >> 2] = $62; //@line 12964
   $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 12965
   HEAP32[$542 >> 2] = $64; //@line 12966
   $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 12967
   HEAP32[$543 >> 2] = $66; //@line 12968
   $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 12969
   HEAP32[$544 >> 2] = $68; //@line 12970
   $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 12971
   HEAP32[$545 >> 2] = $70; //@line 12972
   $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 12973
   HEAP32[$546 >> 2] = $74; //@line 12974
   $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 12975
   HEAP32[$547 >> 2] = $76; //@line 12976
   $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 12977
   HEAP32[$548 >> 2] = $78; //@line 12978
   $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 12979
   HEAP32[$549 >> 2] = $80; //@line 12980
   $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 12981
   HEAP32[$550 >> 2] = $82; //@line 12982
   $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 12983
   HEAP32[$551 >> 2] = $84; //@line 12984
   $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 12985
   HEAP32[$552 >> 2] = $86; //@line 12986
   $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 12987
   HEAP32[$553 >> 2] = $88; //@line 12988
   $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 12989
   HEAP32[$554 >> 2] = $90; //@line 12990
   $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 12991
   HEAP32[$555 >> 2] = $92; //@line 12992
   $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 12993
   HEAP32[$556 >> 2] = $94; //@line 12994
   $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 12995
   HEAP32[$557 >> 2] = $96; //@line 12996
   $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 12997
   HEAP32[$558 >> 2] = $98; //@line 12998
   $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 12999
   HEAP32[$559 >> 2] = $100; //@line 13000
   $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 13001
   HEAP32[$560 >> 2] = $102; //@line 13002
   $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 13003
   HEAP32[$561 >> 2] = $104; //@line 13004
   $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 13005
   HEAP32[$562 >> 2] = $106; //@line 13006
   $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 13007
   HEAP32[$563 >> 2] = $108; //@line 13008
   $564 = $ReallocAsyncCtx4 + 220 | 0; //@line 13009
   HEAP32[$564 >> 2] = $110; //@line 13010
   $565 = $ReallocAsyncCtx4 + 224 | 0; //@line 13011
   HEAP32[$565 >> 2] = $112; //@line 13012
   $566 = $ReallocAsyncCtx4 + 228 | 0; //@line 13013
   HEAP8[$566 >> 0] = $114; //@line 13014
   $567 = $ReallocAsyncCtx4 + 232 | 0; //@line 13015
   HEAP32[$567 >> 2] = $116; //@line 13016
   $568 = $ReallocAsyncCtx4 + 236 | 0; //@line 13017
   HEAP8[$568 >> 0] = $118; //@line 13018
   $569 = $ReallocAsyncCtx4 + 240 | 0; //@line 13019
   HEAP32[$569 >> 2] = $120; //@line 13020
   $570 = $ReallocAsyncCtx4 + 244 | 0; //@line 13021
   HEAP32[$570 >> 2] = $122; //@line 13022
   $571 = $ReallocAsyncCtx4 + 248 | 0; //@line 13023
   HEAP32[$571 >> 2] = $124; //@line 13024
   $572 = $ReallocAsyncCtx4 + 252 | 0; //@line 13025
   HEAP8[$572 >> 0] = $126; //@line 13026
   $573 = $ReallocAsyncCtx4 + 256 | 0; //@line 13027
   HEAP32[$573 >> 2] = $128; //@line 13028
   $574 = $ReallocAsyncCtx4 + 260 | 0; //@line 13029
   HEAP32[$574 >> 2] = $130; //@line 13030
   $575 = $ReallocAsyncCtx4 + 264 | 0; //@line 13031
   HEAP32[$575 >> 2] = $$096$be; //@line 13032
   $576 = $ReallocAsyncCtx4 + 268 | 0; //@line 13033
   HEAP32[$576 >> 2] = $132; //@line 13034
   $577 = $ReallocAsyncCtx4 + 272 | 0; //@line 13035
   HEAP32[$577 >> 2] = $134; //@line 13036
   sp = STACKTOP; //@line 13037
   return;
  }
  HEAP8[___async_retval >> 0] = $509 & 1; //@line 13042
  ___async_unwind = 0; //@line 13043
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 13044
  $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 13045
  HEAP32[$510 >> 2] = $2; //@line 13046
  $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 13047
  HEAP32[$511 >> 2] = $4; //@line 13048
  $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 13049
  HEAP32[$512 >> 2] = $6; //@line 13050
  $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 13051
  HEAP32[$513 >> 2] = $8; //@line 13052
  $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 13053
  HEAP32[$514 >> 2] = $10; //@line 13054
  $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 13055
  HEAP32[$515 >> 2] = $12; //@line 13056
  $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 13057
  HEAP32[$516 >> 2] = $14; //@line 13058
  $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 13059
  HEAP32[$517 >> 2] = $16; //@line 13060
  $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 13061
  HEAP32[$518 >> 2] = $18; //@line 13062
  $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 13063
  HEAP32[$519 >> 2] = $20; //@line 13064
  $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 13065
  HEAP32[$520 >> 2] = $22; //@line 13066
  $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 13067
  HEAP32[$521 >> 2] = $24; //@line 13068
  $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 13069
  HEAP32[$522 >> 2] = $26; //@line 13070
  $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 13071
  HEAP32[$523 >> 2] = $28; //@line 13072
  $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 13073
  HEAP32[$524 >> 2] = $30; //@line 13074
  $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 13075
  HEAP32[$525 >> 2] = $32; //@line 13076
  $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 13077
  HEAP32[$526 >> 2] = $34; //@line 13078
  $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 13079
  HEAP32[$527 >> 2] = $36; //@line 13080
  $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 13081
  HEAP32[$528 >> 2] = $38; //@line 13082
  $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 13083
  HEAP32[$529 >> 2] = $40; //@line 13084
  $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 13085
  HEAP32[$530 >> 2] = $42; //@line 13086
  $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 13087
  HEAP32[$531 >> 2] = $44; //@line 13088
  $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 13089
  HEAP32[$532 >> 2] = $46; //@line 13090
  $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 13091
  HEAP32[$533 >> 2] = $48; //@line 13092
  $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 13093
  HEAP32[$534 >> 2] = $50; //@line 13094
  $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 13095
  HEAP32[$535 >> 2] = $52; //@line 13096
  $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 13097
  HEAP8[$536 >> 0] = $495; //@line 13098
  $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 13099
  HEAP32[$537 >> 2] = $54; //@line 13100
  $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 13101
  HEAP32[$538 >> 2] = $56; //@line 13102
  $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 13103
  HEAP32[$539 >> 2] = $60; //@line 13104
  $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 13105
  HEAP32[$540 >> 2] = $58; //@line 13106
  $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 13107
  HEAP32[$541 >> 2] = $62; //@line 13108
  $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 13109
  HEAP32[$542 >> 2] = $64; //@line 13110
  $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 13111
  HEAP32[$543 >> 2] = $66; //@line 13112
  $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 13113
  HEAP32[$544 >> 2] = $68; //@line 13114
  $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 13115
  HEAP32[$545 >> 2] = $70; //@line 13116
  $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 13117
  HEAP32[$546 >> 2] = $74; //@line 13118
  $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 13119
  HEAP32[$547 >> 2] = $76; //@line 13120
  $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 13121
  HEAP32[$548 >> 2] = $78; //@line 13122
  $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 13123
  HEAP32[$549 >> 2] = $80; //@line 13124
  $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 13125
  HEAP32[$550 >> 2] = $82; //@line 13126
  $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 13127
  HEAP32[$551 >> 2] = $84; //@line 13128
  $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 13129
  HEAP32[$552 >> 2] = $86; //@line 13130
  $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 13131
  HEAP32[$553 >> 2] = $88; //@line 13132
  $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 13133
  HEAP32[$554 >> 2] = $90; //@line 13134
  $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 13135
  HEAP32[$555 >> 2] = $92; //@line 13136
  $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 13137
  HEAP32[$556 >> 2] = $94; //@line 13138
  $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 13139
  HEAP32[$557 >> 2] = $96; //@line 13140
  $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 13141
  HEAP32[$558 >> 2] = $98; //@line 13142
  $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 13143
  HEAP32[$559 >> 2] = $100; //@line 13144
  $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 13145
  HEAP32[$560 >> 2] = $102; //@line 13146
  $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 13147
  HEAP32[$561 >> 2] = $104; //@line 13148
  $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 13149
  HEAP32[$562 >> 2] = $106; //@line 13150
  $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 13151
  HEAP32[$563 >> 2] = $108; //@line 13152
  $564 = $ReallocAsyncCtx4 + 220 | 0; //@line 13153
  HEAP32[$564 >> 2] = $110; //@line 13154
  $565 = $ReallocAsyncCtx4 + 224 | 0; //@line 13155
  HEAP32[$565 >> 2] = $112; //@line 13156
  $566 = $ReallocAsyncCtx4 + 228 | 0; //@line 13157
  HEAP8[$566 >> 0] = $114; //@line 13158
  $567 = $ReallocAsyncCtx4 + 232 | 0; //@line 13159
  HEAP32[$567 >> 2] = $116; //@line 13160
  $568 = $ReallocAsyncCtx4 + 236 | 0; //@line 13161
  HEAP8[$568 >> 0] = $118; //@line 13162
  $569 = $ReallocAsyncCtx4 + 240 | 0; //@line 13163
  HEAP32[$569 >> 2] = $120; //@line 13164
  $570 = $ReallocAsyncCtx4 + 244 | 0; //@line 13165
  HEAP32[$570 >> 2] = $122; //@line 13166
  $571 = $ReallocAsyncCtx4 + 248 | 0; //@line 13167
  HEAP32[$571 >> 2] = $124; //@line 13168
  $572 = $ReallocAsyncCtx4 + 252 | 0; //@line 13169
  HEAP8[$572 >> 0] = $126; //@line 13170
  $573 = $ReallocAsyncCtx4 + 256 | 0; //@line 13171
  HEAP32[$573 >> 2] = $128; //@line 13172
  $574 = $ReallocAsyncCtx4 + 260 | 0; //@line 13173
  HEAP32[$574 >> 2] = $130; //@line 13174
  $575 = $ReallocAsyncCtx4 + 264 | 0; //@line 13175
  HEAP32[$575 >> 2] = $$096$be; //@line 13176
  $576 = $ReallocAsyncCtx4 + 268 | 0; //@line 13177
  HEAP32[$576 >> 2] = $132; //@line 13178
  $577 = $ReallocAsyncCtx4 + 272 | 0; //@line 13179
  HEAP32[$577 >> 2] = $134; //@line 13180
  sp = STACKTOP; //@line 13181
  return;
 } else if ((label | 0) == 29) {
  HEAP8[$102 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 13189
  $595 = $$0$be + 5 << 24 >> 24; //@line 13202
  HEAP32[$108 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 13210
  $605 = HEAP32[(HEAP32[$120 >> 2] | 0) + 48 >> 2] | 0; //@line 13213
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 13214
  $606 = FUNCTION_TABLE_iii[$605 & 31]($110, $12) | 0; //@line 13215
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 13218
   $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 13219
   HEAP32[$607 >> 2] = $2; //@line 13220
   $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 13221
   HEAP32[$608 >> 2] = $4; //@line 13222
   $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 13223
   HEAP32[$609 >> 2] = $6; //@line 13224
   $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 13225
   HEAP32[$610 >> 2] = $8; //@line 13226
   $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 13227
   HEAP32[$611 >> 2] = $10; //@line 13228
   $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 13229
   HEAP32[$612 >> 2] = $12; //@line 13230
   $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 13231
   HEAP32[$613 >> 2] = $14; //@line 13232
   $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 13233
   HEAP32[$614 >> 2] = $16; //@line 13234
   $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 13235
   HEAP8[$615 >> 0] = $595; //@line 13236
   $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 13237
   HEAP32[$616 >> 2] = $20; //@line 13238
   $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 13239
   HEAP32[$617 >> 2] = $18; //@line 13240
   $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 13241
   HEAP32[$618 >> 2] = $24; //@line 13242
   $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 13243
   HEAP32[$619 >> 2] = $22; //@line 13244
   $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 13245
   HEAP32[$620 >> 2] = $28; //@line 13246
   $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 13247
   HEAP32[$621 >> 2] = $26; //@line 13248
   $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 13249
   HEAP32[$622 >> 2] = $30; //@line 13250
   $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 13251
   HEAP32[$623 >> 2] = $32; //@line 13252
   $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 13253
   HEAP32[$624 >> 2] = $34; //@line 13254
   $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 13255
   HEAP32[$625 >> 2] = $36; //@line 13256
   $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 13257
   HEAP32[$626 >> 2] = $38; //@line 13258
   $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 13259
   HEAP32[$627 >> 2] = $40; //@line 13260
   $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 13261
   HEAP32[$628 >> 2] = $42; //@line 13262
   $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 13263
   HEAP32[$629 >> 2] = $44; //@line 13264
   $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 13265
   HEAP32[$630 >> 2] = $46; //@line 13266
   $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 13267
   HEAP32[$631 >> 2] = $48; //@line 13268
   $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 13269
   HEAP32[$632 >> 2] = $50; //@line 13270
   $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 13271
   HEAP32[$633 >> 2] = $52; //@line 13272
   $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 13273
   HEAP32[$634 >> 2] = $54; //@line 13274
   $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 13275
   HEAP32[$635 >> 2] = $56; //@line 13276
   $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 13277
   HEAP32[$636 >> 2] = $58; //@line 13278
   $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 13279
   HEAP32[$637 >> 2] = $60; //@line 13280
   $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 13281
   HEAP32[$638 >> 2] = $62; //@line 13282
   $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 13283
   HEAP32[$639 >> 2] = $64; //@line 13284
   $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 13285
   HEAP32[$640 >> 2] = $66; //@line 13286
   $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 13287
   HEAP32[$641 >> 2] = $68; //@line 13288
   $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 13289
   HEAP32[$642 >> 2] = $70; //@line 13290
   $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 13291
   HEAP32[$643 >> 2] = $74; //@line 13292
   $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 13293
   HEAP32[$644 >> 2] = $76; //@line 13294
   $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 13295
   HEAP32[$645 >> 2] = $78; //@line 13296
   $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 13297
   HEAP32[$646 >> 2] = $80; //@line 13298
   $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 13299
   HEAP32[$647 >> 2] = $82; //@line 13300
   $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 13301
   HEAP32[$648 >> 2] = $84; //@line 13302
   $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 13303
   HEAP32[$649 >> 2] = $86; //@line 13304
   $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 13305
   HEAP32[$650 >> 2] = $88; //@line 13306
   $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 13307
   HEAP32[$651 >> 2] = $90; //@line 13308
   $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 13309
   HEAP32[$652 >> 2] = $92; //@line 13310
   $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 13311
   HEAP32[$653 >> 2] = $94; //@line 13312
   $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 13313
   HEAP32[$654 >> 2] = $96; //@line 13314
   $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 13315
   HEAP32[$655 >> 2] = $98; //@line 13316
   $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 13317
   HEAP32[$656 >> 2] = $100; //@line 13318
   $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 13319
   HEAP32[$657 >> 2] = $102; //@line 13320
   $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 13321
   HEAP32[$658 >> 2] = $104; //@line 13322
   $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 13323
   HEAP32[$659 >> 2] = $106; //@line 13324
   $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 13325
   HEAP32[$660 >> 2] = $108; //@line 13326
   $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 13327
   HEAP32[$661 >> 2] = $110; //@line 13328
   $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 13329
   HEAP32[$662 >> 2] = $112; //@line 13330
   $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 13331
   HEAP8[$663 >> 0] = $114; //@line 13332
   $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 13333
   HEAP32[$664 >> 2] = $116; //@line 13334
   $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 13335
   HEAP8[$665 >> 0] = $118; //@line 13336
   $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 13337
   HEAP32[$666 >> 2] = $120; //@line 13338
   $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 13339
   HEAP32[$667 >> 2] = $122; //@line 13340
   $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 13341
   HEAP32[$668 >> 2] = $124; //@line 13342
   $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 13343
   HEAP8[$669 >> 0] = $126; //@line 13344
   $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 13345
   HEAP32[$670 >> 2] = $128; //@line 13346
   $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 13347
   HEAP32[$671 >> 2] = $130; //@line 13348
   $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 13349
   HEAP32[$672 >> 2] = $132; //@line 13350
   $673 = $ReallocAsyncCtx5 + 268 | 0; //@line 13351
   HEAP32[$673 >> 2] = $134; //@line 13352
   sp = STACKTOP; //@line 13353
   return;
  }
  HEAP8[___async_retval >> 0] = $606; //@line 13357
  ___async_unwind = 0; //@line 13358
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 13359
  $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 13360
  HEAP32[$607 >> 2] = $2; //@line 13361
  $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 13362
  HEAP32[$608 >> 2] = $4; //@line 13363
  $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 13364
  HEAP32[$609 >> 2] = $6; //@line 13365
  $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 13366
  HEAP32[$610 >> 2] = $8; //@line 13367
  $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 13368
  HEAP32[$611 >> 2] = $10; //@line 13369
  $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 13370
  HEAP32[$612 >> 2] = $12; //@line 13371
  $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 13372
  HEAP32[$613 >> 2] = $14; //@line 13373
  $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 13374
  HEAP32[$614 >> 2] = $16; //@line 13375
  $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 13376
  HEAP8[$615 >> 0] = $595; //@line 13377
  $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 13378
  HEAP32[$616 >> 2] = $20; //@line 13379
  $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 13380
  HEAP32[$617 >> 2] = $18; //@line 13381
  $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 13382
  HEAP32[$618 >> 2] = $24; //@line 13383
  $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 13384
  HEAP32[$619 >> 2] = $22; //@line 13385
  $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 13386
  HEAP32[$620 >> 2] = $28; //@line 13387
  $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 13388
  HEAP32[$621 >> 2] = $26; //@line 13389
  $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 13390
  HEAP32[$622 >> 2] = $30; //@line 13391
  $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 13392
  HEAP32[$623 >> 2] = $32; //@line 13393
  $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 13394
  HEAP32[$624 >> 2] = $34; //@line 13395
  $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 13396
  HEAP32[$625 >> 2] = $36; //@line 13397
  $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 13398
  HEAP32[$626 >> 2] = $38; //@line 13399
  $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 13400
  HEAP32[$627 >> 2] = $40; //@line 13401
  $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 13402
  HEAP32[$628 >> 2] = $42; //@line 13403
  $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 13404
  HEAP32[$629 >> 2] = $44; //@line 13405
  $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 13406
  HEAP32[$630 >> 2] = $46; //@line 13407
  $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 13408
  HEAP32[$631 >> 2] = $48; //@line 13409
  $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 13410
  HEAP32[$632 >> 2] = $50; //@line 13411
  $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 13412
  HEAP32[$633 >> 2] = $52; //@line 13413
  $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 13414
  HEAP32[$634 >> 2] = $54; //@line 13415
  $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 13416
  HEAP32[$635 >> 2] = $56; //@line 13417
  $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 13418
  HEAP32[$636 >> 2] = $58; //@line 13419
  $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 13420
  HEAP32[$637 >> 2] = $60; //@line 13421
  $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 13422
  HEAP32[$638 >> 2] = $62; //@line 13423
  $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 13424
  HEAP32[$639 >> 2] = $64; //@line 13425
  $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 13426
  HEAP32[$640 >> 2] = $66; //@line 13427
  $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 13428
  HEAP32[$641 >> 2] = $68; //@line 13429
  $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 13430
  HEAP32[$642 >> 2] = $70; //@line 13431
  $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 13432
  HEAP32[$643 >> 2] = $74; //@line 13433
  $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 13434
  HEAP32[$644 >> 2] = $76; //@line 13435
  $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 13436
  HEAP32[$645 >> 2] = $78; //@line 13437
  $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 13438
  HEAP32[$646 >> 2] = $80; //@line 13439
  $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 13440
  HEAP32[$647 >> 2] = $82; //@line 13441
  $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 13442
  HEAP32[$648 >> 2] = $84; //@line 13443
  $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 13444
  HEAP32[$649 >> 2] = $86; //@line 13445
  $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 13446
  HEAP32[$650 >> 2] = $88; //@line 13447
  $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 13448
  HEAP32[$651 >> 2] = $90; //@line 13449
  $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 13450
  HEAP32[$652 >> 2] = $92; //@line 13451
  $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 13452
  HEAP32[$653 >> 2] = $94; //@line 13453
  $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 13454
  HEAP32[$654 >> 2] = $96; //@line 13455
  $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 13456
  HEAP32[$655 >> 2] = $98; //@line 13457
  $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 13458
  HEAP32[$656 >> 2] = $100; //@line 13459
  $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 13460
  HEAP32[$657 >> 2] = $102; //@line 13461
  $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 13462
  HEAP32[$658 >> 2] = $104; //@line 13463
  $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 13464
  HEAP32[$659 >> 2] = $106; //@line 13465
  $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 13466
  HEAP32[$660 >> 2] = $108; //@line 13467
  $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 13468
  HEAP32[$661 >> 2] = $110; //@line 13469
  $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 13470
  HEAP32[$662 >> 2] = $112; //@line 13471
  $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 13472
  HEAP8[$663 >> 0] = $114; //@line 13473
  $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 13474
  HEAP32[$664 >> 2] = $116; //@line 13475
  $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 13476
  HEAP8[$665 >> 0] = $118; //@line 13477
  $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 13478
  HEAP32[$666 >> 2] = $120; //@line 13479
  $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 13480
  HEAP32[$667 >> 2] = $122; //@line 13481
  $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 13482
  HEAP32[$668 >> 2] = $124; //@line 13483
  $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 13484
  HEAP8[$669 >> 0] = $126; //@line 13485
  $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 13486
  HEAP32[$670 >> 2] = $128; //@line 13487
  $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 13488
  HEAP32[$671 >> 2] = $130; //@line 13489
  $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 13490
  HEAP32[$672 >> 2] = $132; //@line 13491
  $673 = $ReallocAsyncCtx5 + 268 | 0; //@line 13492
  HEAP32[$673 >> 2] = $134; //@line 13493
  sp = STACKTOP; //@line 13494
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 13499
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_389($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$096$be = 0, $$2 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $241 = 0, $249 = 0, $26 = 0, $268 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $349 = 0, $350 = 0, $36 = 0, $38 = 0, $387 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $463 = 0, $467 = 0, $471 = 0, $474 = 0, $48 = 0, $480 = 0, $483 = 0, $484 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $572 = 0, $58 = 0, $594 = 0, $6 = 0, $60 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15464
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15466
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15468
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15470
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15472
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15474
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15476
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15478
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15480
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15482
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15484
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15486
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15488
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15490
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15492
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15494
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15496
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15498
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15500
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15502
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 15504
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 15506
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 15508
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 15510
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 15512
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 15514
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 15516
 $54 = HEAP8[$0 + 108 >> 0] | 0; //@line 15518
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 15520
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 15522
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 15524
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 15526
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 15528
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 15530
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 15532
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 15534
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 15536
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 15538
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 15540
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 15542
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 15544
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 15546
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 15548
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 15550
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 15552
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 15554
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 15556
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 15558
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 15560
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 15562
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 15564
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 15566
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 15568
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 15570
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 15572
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 15574
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 15576
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 15578
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 15580
 $118 = HEAP8[$0 + 236 >> 0] | 0; //@line 15582
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 15584
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 15586
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 15588
 $126 = HEAP8[$0 + 252 >> 0] | 0; //@line 15590
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 15592
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 15594
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 15596
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 15598
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 15600
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$112 >> 0] = HEAP8[$56 >> 0] | 0; //@line 15606
  HEAP8[$90 >> 0] = HEAP8[$64 >> 0] | 0; //@line 15608
  HEAPF32[$96 >> 2] = +(HEAPU8[13572 + (HEAPU8[$74 >> 0] | 0) >> 0] | 0); //@line 15614
  $572 = HEAP8[$20 >> 0] | 0; //@line 15616
  if (($572 & 255) < (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
   HEAP8[$20 >> 0] = $572 + 1 << 24 >> 24; //@line 15623
   HEAP8[($572 & 255) + ($94 + 4) >> 0] = 9; //@line 15624
   HEAP8[$10 >> 0] = 1; //@line 15625
   $$2 = 0; //@line 15626
  } else {
   $$2 = -1e3; //@line 15628
  }
 } else {
  $$2 = $132; //@line 15631
 }
 $$0$be = $54; //@line 15633
 $$096$be = $$2; //@line 15633
 L6 : while (1) {
  if (($$0$be & 255) >= ($118 & 255)) {
   label = 32; //@line 15637
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 15641
  switch (HEAP8[$124 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 15646
    break L6;
    break;
   }
  case 5:
   {
    label = 9; //@line 15651
    break L6;
    break;
   }
  case 7:
   {
    label = 14; //@line 15656
    break L6;
    break;
   }
  case 9:
   {
    label = 19; //@line 15661
    break L6;
    break;
   }
  case 10:
   {
    label = 28; //@line 15666
    break L6;
    break;
   }
  case 2:
   {
    HEAP32[$58 >> 2] = 0; //@line 15671
    HEAP8[$42 >> 0] = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 15676
    HEAP8[$32 >> 0] = HEAP8[$124 + ($$0$be + 2 & 255) >> 0] | 0; //@line 15681
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 15682
    continue L6;
    break;
   }
  case 4:
   {
    $233 = $$0$be + 2 << 24 >> 24; //@line 15687
    $236 = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 15690
    HEAP8[$2 >> 0] = $236; //@line 15691
    HEAP16[$14 >> 1] = 1 << ($236 & 255); //@line 15695
    $241 = HEAP8[$20 >> 0] | 0; //@line 15697
    if (($241 & 255) >= (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
     $$0$be = $233; //@line 15701
     $$096$be = -1e3; //@line 15701
     continue L6;
    }
    HEAP8[$20 >> 0] = $241 + 1 << 24 >> 24; //@line 15707
    HEAP8[($241 & 255) + ($94 + 4) >> 0] = 4; //@line 15708
    HEAP8[$10 >> 0] = 1; //@line 15709
    $$0$be = $233; //@line 15710
    $$096$be = 0; //@line 15710
    continue L6;
    break;
   }
  case 6:
   {
    $349 = HEAP8[$20 >> 0] | 0; //@line 15716
    $350 = $349 & 255; //@line 15717
    if (((-128 - (HEAP8[$30 >> 0] | 0) & 255) + -2 | 0) <= ($350 | 0)) {
     $$0$be = $139; //@line 15723
     $$096$be = -1e3; //@line 15723
     continue L6;
    }
    HEAP8[$94 + 4 + $350 >> 0] = 6; //@line 15728
    HEAP8[($349 + 1 & 255) + ($94 + 4) >> 0] = -1; //@line 15732
    HEAP8[$20 >> 0] = $349 + 3 << 24 >> 24; //@line 15734
    HEAP8[($349 + 2 & 255) + ($94 + 4) >> 0] = $114; //@line 15737
    HEAP8[$10 >> 0] = 1; //@line 15738
    $$0$be = $139; //@line 15739
    $$096$be = 0; //@line 15739
    continue L6;
    break;
   }
  case 8:
   {
    $463 = $$0$be + 2 << 24 >> 24; //@line 15744
    $467 = HEAP8[$124 + ($139 & 255) >> 0] & 15; //@line 15748
    $471 = ($467 + ($467 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 15753
    HEAP32[$36 >> 2] = $471; //@line 15754
    HEAP32[$48 >> 2] = $471 + 1e3; //@line 15756
    $474 = HEAP8[$20 >> 0] | 0; //@line 15758
    if (($474 & 255) >= (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
     $$0$be = $463; //@line 15762
     $$096$be = -1e3; //@line 15762
     continue L6;
    }
    HEAP8[$20 >> 0] = $474 + 1 << 24 >> 24; //@line 15768
    HEAP8[($474 & 255) + ($94 + 4) >> 0] = 8; //@line 15769
    HEAP8[$92 >> 0] = 1; //@line 15770
    HEAP8[$10 >> 0] = 1; //@line 15771
    $$0$be = $463; //@line 15772
    $$096$be = 0; //@line 15772
    continue L6;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 15777
    $$096$be = -1013; //@line 15777
    continue L6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$136 >> 0] = 0; //@line 15783
  HEAP8[$68 >> 0] = 0; //@line 15784
  HEAP8[$72 >> 0] = 0; //@line 15785
  HEAP8[$40 >> 0] = 0; //@line 15786
  $150 = $139 & 255; //@line 15787
  $151 = $150 + -1 | 0; //@line 15788
  HEAP32[$16 >> 2] = $124 + $151; //@line 15790
  HEAP8[$6 >> 0] = $80 - $151; //@line 15793
  HEAP8[$122 >> 0] = HEAP8[$134 >> 0] | 0; //@line 15795
  HEAP8[$104 >> 0] = HEAP8[$112 >> 0] | 0; //@line 15797
  HEAP8[$86 >> 0] = HEAP8[$98 >> 0] | 0; //@line 15799
  HEAP8[$70 >> 0] = HEAP8[$76 >> 0] | 0; //@line 15801
  HEAP8[$46 >> 0] = HEAP8[$60 >> 0] | 0; //@line 15803
  $162 = HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] | 0; //@line 15806
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 15807
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($110, $84, $136, $68, $72, $40) | 0; //@line 15808
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 15811
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 15812
   HEAP32[$164 >> 2] = $2; //@line 15813
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 15814
   HEAP32[$165 >> 2] = $4; //@line 15815
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 15816
   HEAP32[$166 >> 2] = $6; //@line 15817
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 15818
   HEAP32[$167 >> 2] = $8; //@line 15819
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 15820
   HEAP32[$168 >> 2] = $10; //@line 15821
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 15822
   HEAP32[$169 >> 2] = $12; //@line 15823
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 15824
   HEAP32[$170 >> 2] = $14; //@line 15825
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 15826
   HEAP32[$171 >> 2] = $16; //@line 15827
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 15828
   HEAP32[$172 >> 2] = $18; //@line 15829
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 15830
   HEAP32[$173 >> 2] = $20; //@line 15831
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 15832
   HEAP32[$174 >> 2] = $22; //@line 15833
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 15834
   HEAP32[$175 >> 2] = $24; //@line 15835
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 15836
   HEAP32[$176 >> 2] = $26; //@line 15837
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 15838
   HEAP32[$177 >> 2] = $28; //@line 15839
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 15840
   HEAP32[$178 >> 2] = $30; //@line 15841
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 15842
   HEAP32[$179 >> 2] = $32; //@line 15843
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 15844
   HEAP32[$180 >> 2] = $34; //@line 15845
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 15846
   HEAP32[$181 >> 2] = $36; //@line 15847
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 15848
   HEAP32[$182 >> 2] = $38; //@line 15849
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 15850
   HEAP32[$183 >> 2] = $40; //@line 15851
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 15852
   HEAP32[$184 >> 2] = $42; //@line 15853
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 15854
   HEAP32[$185 >> 2] = $44; //@line 15855
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 15856
   HEAP32[$186 >> 2] = $46; //@line 15857
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 15858
   HEAP32[$187 >> 2] = $150; //@line 15859
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 15860
   HEAP32[$188 >> 2] = $50; //@line 15861
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 15862
   HEAP32[$189 >> 2] = $52; //@line 15863
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 15864
   HEAP32[$190 >> 2] = $48; //@line 15865
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 15866
   HEAP32[$191 >> 2] = $56; //@line 15867
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 15868
   HEAP32[$192 >> 2] = $58; //@line 15869
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 15870
   HEAP32[$193 >> 2] = $62; //@line 15871
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 15872
   HEAP32[$194 >> 2] = $60; //@line 15873
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 15874
   HEAP32[$195 >> 2] = $64; //@line 15875
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 15876
   HEAP32[$196 >> 2] = $66; //@line 15877
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 15878
   HEAP32[$197 >> 2] = $68; //@line 15879
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 15880
   HEAP32[$198 >> 2] = $70; //@line 15881
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 15882
   HEAP32[$199 >> 2] = $72; //@line 15883
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 15884
   HEAP32[$200 >> 2] = $74; //@line 15885
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 15886
   HEAP32[$201 >> 2] = $76; //@line 15887
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 15888
   HEAP32[$202 >> 2] = $78; //@line 15889
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 15890
   HEAP32[$203 >> 2] = $80; //@line 15891
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 15892
   HEAP32[$204 >> 2] = $82; //@line 15893
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 15894
   HEAP32[$205 >> 2] = $84; //@line 15895
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 15896
   HEAP32[$206 >> 2] = $86; //@line 15897
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 15898
   HEAP32[$207 >> 2] = $88; //@line 15899
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 15900
   HEAP32[$208 >> 2] = $90; //@line 15901
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 15902
   HEAP32[$209 >> 2] = $92; //@line 15903
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 15904
   HEAP32[$210 >> 2] = $94; //@line 15905
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 15906
   HEAP32[$211 >> 2] = $96; //@line 15907
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 15908
   HEAP32[$212 >> 2] = $98; //@line 15909
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 15910
   HEAP32[$213 >> 2] = $100; //@line 15911
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 15912
   HEAP32[$214 >> 2] = $102; //@line 15913
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 15914
   HEAP32[$215 >> 2] = $104; //@line 15915
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 15916
   HEAP32[$216 >> 2] = $106; //@line 15917
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 15918
   HEAP32[$217 >> 2] = $108; //@line 15919
   $218 = $ReallocAsyncCtx + 220 | 0; //@line 15920
   HEAP32[$218 >> 2] = $110; //@line 15921
   $219 = $ReallocAsyncCtx + 224 | 0; //@line 15922
   HEAP32[$219 >> 2] = $112; //@line 15923
   $220 = $ReallocAsyncCtx + 228 | 0; //@line 15924
   HEAP8[$220 >> 0] = $114; //@line 15925
   $221 = $ReallocAsyncCtx + 232 | 0; //@line 15926
   HEAP32[$221 >> 2] = $116; //@line 15927
   $222 = $ReallocAsyncCtx + 236 | 0; //@line 15928
   HEAP8[$222 >> 0] = $118; //@line 15929
   $223 = $ReallocAsyncCtx + 240 | 0; //@line 15930
   HEAP32[$223 >> 2] = $120; //@line 15931
   $224 = $ReallocAsyncCtx + 244 | 0; //@line 15932
   HEAP32[$224 >> 2] = $122; //@line 15933
   $225 = $ReallocAsyncCtx + 248 | 0; //@line 15934
   HEAP32[$225 >> 2] = $124; //@line 15935
   $226 = $ReallocAsyncCtx + 252 | 0; //@line 15936
   HEAP8[$226 >> 0] = $126; //@line 15937
   $227 = $ReallocAsyncCtx + 256 | 0; //@line 15938
   HEAP32[$227 >> 2] = $128; //@line 15939
   $228 = $ReallocAsyncCtx + 260 | 0; //@line 15940
   HEAP32[$228 >> 2] = $130; //@line 15941
   $229 = $ReallocAsyncCtx + 264 | 0; //@line 15942
   HEAP32[$229 >> 2] = $$096$be; //@line 15943
   $230 = $ReallocAsyncCtx + 268 | 0; //@line 15944
   HEAP32[$230 >> 2] = $134; //@line 15945
   $231 = $ReallocAsyncCtx + 272 | 0; //@line 15946
   HEAP32[$231 >> 2] = $136; //@line 15947
   sp = STACKTOP; //@line 15948
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 15952
  ___async_unwind = 0; //@line 15953
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 15954
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 15955
  HEAP32[$164 >> 2] = $2; //@line 15956
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 15957
  HEAP32[$165 >> 2] = $4; //@line 15958
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 15959
  HEAP32[$166 >> 2] = $6; //@line 15960
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 15961
  HEAP32[$167 >> 2] = $8; //@line 15962
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 15963
  HEAP32[$168 >> 2] = $10; //@line 15964
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 15965
  HEAP32[$169 >> 2] = $12; //@line 15966
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 15967
  HEAP32[$170 >> 2] = $14; //@line 15968
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 15969
  HEAP32[$171 >> 2] = $16; //@line 15970
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 15971
  HEAP32[$172 >> 2] = $18; //@line 15972
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 15973
  HEAP32[$173 >> 2] = $20; //@line 15974
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 15975
  HEAP32[$174 >> 2] = $22; //@line 15976
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 15977
  HEAP32[$175 >> 2] = $24; //@line 15978
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 15979
  HEAP32[$176 >> 2] = $26; //@line 15980
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 15981
  HEAP32[$177 >> 2] = $28; //@line 15982
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 15983
  HEAP32[$178 >> 2] = $30; //@line 15984
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 15985
  HEAP32[$179 >> 2] = $32; //@line 15986
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 15987
  HEAP32[$180 >> 2] = $34; //@line 15988
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 15989
  HEAP32[$181 >> 2] = $36; //@line 15990
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 15991
  HEAP32[$182 >> 2] = $38; //@line 15992
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 15993
  HEAP32[$183 >> 2] = $40; //@line 15994
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 15995
  HEAP32[$184 >> 2] = $42; //@line 15996
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 15997
  HEAP32[$185 >> 2] = $44; //@line 15998
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 15999
  HEAP32[$186 >> 2] = $46; //@line 16000
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 16001
  HEAP32[$187 >> 2] = $150; //@line 16002
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 16003
  HEAP32[$188 >> 2] = $50; //@line 16004
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 16005
  HEAP32[$189 >> 2] = $52; //@line 16006
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 16007
  HEAP32[$190 >> 2] = $48; //@line 16008
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 16009
  HEAP32[$191 >> 2] = $56; //@line 16010
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 16011
  HEAP32[$192 >> 2] = $58; //@line 16012
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 16013
  HEAP32[$193 >> 2] = $62; //@line 16014
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 16015
  HEAP32[$194 >> 2] = $60; //@line 16016
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 16017
  HEAP32[$195 >> 2] = $64; //@line 16018
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 16019
  HEAP32[$196 >> 2] = $66; //@line 16020
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 16021
  HEAP32[$197 >> 2] = $68; //@line 16022
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 16023
  HEAP32[$198 >> 2] = $70; //@line 16024
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 16025
  HEAP32[$199 >> 2] = $72; //@line 16026
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 16027
  HEAP32[$200 >> 2] = $74; //@line 16028
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 16029
  HEAP32[$201 >> 2] = $76; //@line 16030
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 16031
  HEAP32[$202 >> 2] = $78; //@line 16032
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 16033
  HEAP32[$203 >> 2] = $80; //@line 16034
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 16035
  HEAP32[$204 >> 2] = $82; //@line 16036
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 16037
  HEAP32[$205 >> 2] = $84; //@line 16038
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 16039
  HEAP32[$206 >> 2] = $86; //@line 16040
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 16041
  HEAP32[$207 >> 2] = $88; //@line 16042
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 16043
  HEAP32[$208 >> 2] = $90; //@line 16044
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 16045
  HEAP32[$209 >> 2] = $92; //@line 16046
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 16047
  HEAP32[$210 >> 2] = $94; //@line 16048
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 16049
  HEAP32[$211 >> 2] = $96; //@line 16050
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 16051
  HEAP32[$212 >> 2] = $98; //@line 16052
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 16053
  HEAP32[$213 >> 2] = $100; //@line 16054
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 16055
  HEAP32[$214 >> 2] = $102; //@line 16056
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 16057
  HEAP32[$215 >> 2] = $104; //@line 16058
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 16059
  HEAP32[$216 >> 2] = $106; //@line 16060
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 16061
  HEAP32[$217 >> 2] = $108; //@line 16062
  $218 = $ReallocAsyncCtx + 220 | 0; //@line 16063
  HEAP32[$218 >> 2] = $110; //@line 16064
  $219 = $ReallocAsyncCtx + 224 | 0; //@line 16065
  HEAP32[$219 >> 2] = $112; //@line 16066
  $220 = $ReallocAsyncCtx + 228 | 0; //@line 16067
  HEAP8[$220 >> 0] = $114; //@line 16068
  $221 = $ReallocAsyncCtx + 232 | 0; //@line 16069
  HEAP32[$221 >> 2] = $116; //@line 16070
  $222 = $ReallocAsyncCtx + 236 | 0; //@line 16071
  HEAP8[$222 >> 0] = $118; //@line 16072
  $223 = $ReallocAsyncCtx + 240 | 0; //@line 16073
  HEAP32[$223 >> 2] = $120; //@line 16074
  $224 = $ReallocAsyncCtx + 244 | 0; //@line 16075
  HEAP32[$224 >> 2] = $122; //@line 16076
  $225 = $ReallocAsyncCtx + 248 | 0; //@line 16077
  HEAP32[$225 >> 2] = $124; //@line 16078
  $226 = $ReallocAsyncCtx + 252 | 0; //@line 16079
  HEAP8[$226 >> 0] = $126; //@line 16080
  $227 = $ReallocAsyncCtx + 256 | 0; //@line 16081
  HEAP32[$227 >> 2] = $128; //@line 16082
  $228 = $ReallocAsyncCtx + 260 | 0; //@line 16083
  HEAP32[$228 >> 2] = $130; //@line 16084
  $229 = $ReallocAsyncCtx + 264 | 0; //@line 16085
  HEAP32[$229 >> 2] = $$096$be; //@line 16086
  $230 = $ReallocAsyncCtx + 268 | 0; //@line 16087
  HEAP32[$230 >> 2] = $134; //@line 16088
  $231 = $ReallocAsyncCtx + 272 | 0; //@line 16089
  HEAP32[$231 >> 2] = $136; //@line 16090
  sp = STACKTOP; //@line 16091
  return;
 } else if ((label | 0) == 9) {
  $249 = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 16097
  HEAP8[$34 >> 0] = ($249 & 255) >>> 4 & 7; //@line 16102
  HEAP8[$24 >> 0] = $249 & 15; //@line 16104
  $268 = $$0$be + 5 << 24 >> 24; //@line 16118
  HEAP32[$44 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16126
  $278 = HEAP32[(HEAP32[$52 >> 2] | 0) + 40 >> 2] | 0; //@line 16129
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 16130
  $279 = FUNCTION_TABLE_iii[$278 & 31]($110, $50) | 0; //@line 16131
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 16134
   $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 16135
   HEAP32[$280 >> 2] = $2; //@line 16136
   $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 16137
   HEAP32[$281 >> 2] = $4; //@line 16138
   $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 16139
   HEAP32[$282 >> 2] = $6; //@line 16140
   $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 16141
   HEAP32[$283 >> 2] = $8; //@line 16142
   $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 16143
   HEAP32[$284 >> 2] = $10; //@line 16144
   $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 16145
   HEAP32[$285 >> 2] = $12; //@line 16146
   $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 16147
   HEAP32[$286 >> 2] = $14; //@line 16148
   $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 16149
   HEAP32[$287 >> 2] = $16; //@line 16150
   $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 16151
   HEAP32[$288 >> 2] = $18; //@line 16152
   $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 16153
   HEAP32[$289 >> 2] = $20; //@line 16154
   $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 16155
   HEAP32[$290 >> 2] = $22; //@line 16156
   $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 16157
   HEAP32[$291 >> 2] = $24; //@line 16158
   $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 16159
   HEAP32[$292 >> 2] = $26; //@line 16160
   $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 16161
   HEAP32[$293 >> 2] = $28; //@line 16162
   $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 16163
   HEAP32[$294 >> 2] = $30; //@line 16164
   $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 16165
   HEAP32[$295 >> 2] = $32; //@line 16166
   $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 16167
   HEAP32[$296 >> 2] = $34; //@line 16168
   $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 16169
   HEAP32[$297 >> 2] = $36; //@line 16170
   $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 16171
   HEAP32[$298 >> 2] = $38; //@line 16172
   $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 16173
   HEAP32[$299 >> 2] = $40; //@line 16174
   $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 16175
   HEAP32[$300 >> 2] = $42; //@line 16176
   $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 16177
   HEAP32[$301 >> 2] = $44; //@line 16178
   $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 16179
   HEAP32[$302 >> 2] = $46; //@line 16180
   $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 16181
   HEAP32[$303 >> 2] = $48; //@line 16182
   $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 16183
   HEAP32[$304 >> 2] = $50; //@line 16184
   $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 16185
   HEAP32[$305 >> 2] = $52; //@line 16186
   $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 16187
   HEAP32[$306 >> 2] = $56; //@line 16188
   $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 16189
   HEAP32[$307 >> 2] = $58; //@line 16190
   $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 16191
   HEAP32[$308 >> 2] = $62; //@line 16192
   $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 16193
   HEAP32[$309 >> 2] = $60; //@line 16194
   $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 16195
   HEAP32[$310 >> 2] = $64; //@line 16196
   $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 16197
   HEAP32[$311 >> 2] = $66; //@line 16198
   $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 16199
   HEAP32[$312 >> 2] = $68; //@line 16200
   $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 16201
   HEAP32[$313 >> 2] = $70; //@line 16202
   $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 16203
   HEAP32[$314 >> 2] = $72; //@line 16204
   $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 16205
   HEAP8[$315 >> 0] = $268; //@line 16206
   $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 16207
   HEAP32[$316 >> 2] = $74; //@line 16208
   $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 16209
   HEAP32[$317 >> 2] = $76; //@line 16210
   $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 16211
   HEAP32[$318 >> 2] = $78; //@line 16212
   $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 16213
   HEAP32[$319 >> 2] = $80; //@line 16214
   $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 16215
   HEAP32[$320 >> 2] = $82; //@line 16216
   $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 16217
   HEAP32[$321 >> 2] = $84; //@line 16218
   $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 16219
   HEAP32[$322 >> 2] = $86; //@line 16220
   $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 16221
   HEAP32[$323 >> 2] = $88; //@line 16222
   $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 16223
   HEAP32[$324 >> 2] = $90; //@line 16224
   $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 16225
   HEAP32[$325 >> 2] = $92; //@line 16226
   $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 16227
   HEAP32[$326 >> 2] = $94; //@line 16228
   $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 16229
   HEAP32[$327 >> 2] = $96; //@line 16230
   $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 16231
   HEAP32[$328 >> 2] = $98; //@line 16232
   $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 16233
   HEAP32[$329 >> 2] = $100; //@line 16234
   $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 16235
   HEAP32[$330 >> 2] = $102; //@line 16236
   $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 16237
   HEAP32[$331 >> 2] = $104; //@line 16238
   $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 16239
   HEAP32[$332 >> 2] = $106; //@line 16240
   $333 = $ReallocAsyncCtx2 + 216 | 0; //@line 16241
   HEAP32[$333 >> 2] = $108; //@line 16242
   $334 = $ReallocAsyncCtx2 + 220 | 0; //@line 16243
   HEAP32[$334 >> 2] = $110; //@line 16244
   $335 = $ReallocAsyncCtx2 + 224 | 0; //@line 16245
   HEAP32[$335 >> 2] = $112; //@line 16246
   $336 = $ReallocAsyncCtx2 + 228 | 0; //@line 16247
   HEAP8[$336 >> 0] = $114; //@line 16248
   $337 = $ReallocAsyncCtx2 + 232 | 0; //@line 16249
   HEAP32[$337 >> 2] = $116; //@line 16250
   $338 = $ReallocAsyncCtx2 + 236 | 0; //@line 16251
   HEAP8[$338 >> 0] = $118; //@line 16252
   $339 = $ReallocAsyncCtx2 + 240 | 0; //@line 16253
   HEAP32[$339 >> 2] = $120; //@line 16254
   $340 = $ReallocAsyncCtx2 + 244 | 0; //@line 16255
   HEAP32[$340 >> 2] = $122; //@line 16256
   $341 = $ReallocAsyncCtx2 + 248 | 0; //@line 16257
   HEAP32[$341 >> 2] = $124; //@line 16258
   $342 = $ReallocAsyncCtx2 + 252 | 0; //@line 16259
   HEAP8[$342 >> 0] = $126; //@line 16260
   $343 = $ReallocAsyncCtx2 + 256 | 0; //@line 16261
   HEAP32[$343 >> 2] = $128; //@line 16262
   $344 = $ReallocAsyncCtx2 + 260 | 0; //@line 16263
   HEAP32[$344 >> 2] = $130; //@line 16264
   $345 = $ReallocAsyncCtx2 + 264 | 0; //@line 16265
   HEAP32[$345 >> 2] = $134; //@line 16266
   $346 = $ReallocAsyncCtx2 + 268 | 0; //@line 16267
   HEAP32[$346 >> 2] = $136; //@line 16268
   sp = STACKTOP; //@line 16269
   return;
  }
  HEAP8[___async_retval >> 0] = $279; //@line 16273
  ___async_unwind = 0; //@line 16274
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 16275
  $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 16276
  HEAP32[$280 >> 2] = $2; //@line 16277
  $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 16278
  HEAP32[$281 >> 2] = $4; //@line 16279
  $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 16280
  HEAP32[$282 >> 2] = $6; //@line 16281
  $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 16282
  HEAP32[$283 >> 2] = $8; //@line 16283
  $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 16284
  HEAP32[$284 >> 2] = $10; //@line 16285
  $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 16286
  HEAP32[$285 >> 2] = $12; //@line 16287
  $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 16288
  HEAP32[$286 >> 2] = $14; //@line 16289
  $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 16290
  HEAP32[$287 >> 2] = $16; //@line 16291
  $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 16292
  HEAP32[$288 >> 2] = $18; //@line 16293
  $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 16294
  HEAP32[$289 >> 2] = $20; //@line 16295
  $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 16296
  HEAP32[$290 >> 2] = $22; //@line 16297
  $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 16298
  HEAP32[$291 >> 2] = $24; //@line 16299
  $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 16300
  HEAP32[$292 >> 2] = $26; //@line 16301
  $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 16302
  HEAP32[$293 >> 2] = $28; //@line 16303
  $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 16304
  HEAP32[$294 >> 2] = $30; //@line 16305
  $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 16306
  HEAP32[$295 >> 2] = $32; //@line 16307
  $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 16308
  HEAP32[$296 >> 2] = $34; //@line 16309
  $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 16310
  HEAP32[$297 >> 2] = $36; //@line 16311
  $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 16312
  HEAP32[$298 >> 2] = $38; //@line 16313
  $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 16314
  HEAP32[$299 >> 2] = $40; //@line 16315
  $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 16316
  HEAP32[$300 >> 2] = $42; //@line 16317
  $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 16318
  HEAP32[$301 >> 2] = $44; //@line 16319
  $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 16320
  HEAP32[$302 >> 2] = $46; //@line 16321
  $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 16322
  HEAP32[$303 >> 2] = $48; //@line 16323
  $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 16324
  HEAP32[$304 >> 2] = $50; //@line 16325
  $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 16326
  HEAP32[$305 >> 2] = $52; //@line 16327
  $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 16328
  HEAP32[$306 >> 2] = $56; //@line 16329
  $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 16330
  HEAP32[$307 >> 2] = $58; //@line 16331
  $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 16332
  HEAP32[$308 >> 2] = $62; //@line 16333
  $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 16334
  HEAP32[$309 >> 2] = $60; //@line 16335
  $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 16336
  HEAP32[$310 >> 2] = $64; //@line 16337
  $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 16338
  HEAP32[$311 >> 2] = $66; //@line 16339
  $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 16340
  HEAP32[$312 >> 2] = $68; //@line 16341
  $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 16342
  HEAP32[$313 >> 2] = $70; //@line 16343
  $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 16344
  HEAP32[$314 >> 2] = $72; //@line 16345
  $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 16346
  HEAP8[$315 >> 0] = $268; //@line 16347
  $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 16348
  HEAP32[$316 >> 2] = $74; //@line 16349
  $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 16350
  HEAP32[$317 >> 2] = $76; //@line 16351
  $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 16352
  HEAP32[$318 >> 2] = $78; //@line 16353
  $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 16354
  HEAP32[$319 >> 2] = $80; //@line 16355
  $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 16356
  HEAP32[$320 >> 2] = $82; //@line 16357
  $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 16358
  HEAP32[$321 >> 2] = $84; //@line 16359
  $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 16360
  HEAP32[$322 >> 2] = $86; //@line 16361
  $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 16362
  HEAP32[$323 >> 2] = $88; //@line 16363
  $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 16364
  HEAP32[$324 >> 2] = $90; //@line 16365
  $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 16366
  HEAP32[$325 >> 2] = $92; //@line 16367
  $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 16368
  HEAP32[$326 >> 2] = $94; //@line 16369
  $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 16370
  HEAP32[$327 >> 2] = $96; //@line 16371
  $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 16372
  HEAP32[$328 >> 2] = $98; //@line 16373
  $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 16374
  HEAP32[$329 >> 2] = $100; //@line 16375
  $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 16376
  HEAP32[$330 >> 2] = $102; //@line 16377
  $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 16378
  HEAP32[$331 >> 2] = $104; //@line 16379
  $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 16380
  HEAP32[$332 >> 2] = $106; //@line 16381
  $333 = $ReallocAsyncCtx2 + 216 | 0; //@line 16382
  HEAP32[$333 >> 2] = $108; //@line 16383
  $334 = $ReallocAsyncCtx2 + 220 | 0; //@line 16384
  HEAP32[$334 >> 2] = $110; //@line 16385
  $335 = $ReallocAsyncCtx2 + 224 | 0; //@line 16386
  HEAP32[$335 >> 2] = $112; //@line 16387
  $336 = $ReallocAsyncCtx2 + 228 | 0; //@line 16388
  HEAP8[$336 >> 0] = $114; //@line 16389
  $337 = $ReallocAsyncCtx2 + 232 | 0; //@line 16390
  HEAP32[$337 >> 2] = $116; //@line 16391
  $338 = $ReallocAsyncCtx2 + 236 | 0; //@line 16392
  HEAP8[$338 >> 0] = $118; //@line 16393
  $339 = $ReallocAsyncCtx2 + 240 | 0; //@line 16394
  HEAP32[$339 >> 2] = $120; //@line 16395
  $340 = $ReallocAsyncCtx2 + 244 | 0; //@line 16396
  HEAP32[$340 >> 2] = $122; //@line 16397
  $341 = $ReallocAsyncCtx2 + 248 | 0; //@line 16398
  HEAP32[$341 >> 2] = $124; //@line 16399
  $342 = $ReallocAsyncCtx2 + 252 | 0; //@line 16400
  HEAP8[$342 >> 0] = $126; //@line 16401
  $343 = $ReallocAsyncCtx2 + 256 | 0; //@line 16402
  HEAP32[$343 >> 2] = $128; //@line 16403
  $344 = $ReallocAsyncCtx2 + 260 | 0; //@line 16404
  HEAP32[$344 >> 2] = $130; //@line 16405
  $345 = $ReallocAsyncCtx2 + 264 | 0; //@line 16406
  HEAP32[$345 >> 2] = $134; //@line 16407
  $346 = $ReallocAsyncCtx2 + 268 | 0; //@line 16408
  HEAP32[$346 >> 2] = $136; //@line 16409
  sp = STACKTOP; //@line 16410
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$116 >> 0] = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 16418
  HEAP32[$128 >> 2] = $8; //@line 16419
  HEAP32[$130 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16440
  HEAP32[$4 >> 2] = 0; //@line 16441
  $387 = $$0$be + 6 << 24 >> 24; //@line 16442
  HEAP8[$18 >> 0] = HEAP8[$124 + ($$0$be + 5 & 255) >> 0] | 0; //@line 16446
  $393 = HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0; //@line 16449
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(272) | 0; //@line 16450
  $394 = FUNCTION_TABLE_iii[$393 & 31]($110, $62) | 0; //@line 16451
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 16454
   $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 16455
   HEAP32[$395 >> 2] = $2; //@line 16456
   $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 16457
   HEAP32[$396 >> 2] = $4; //@line 16458
   $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 16459
   HEAP32[$397 >> 2] = $6; //@line 16460
   $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 16461
   HEAP32[$398 >> 2] = $8; //@line 16462
   $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 16463
   HEAP32[$399 >> 2] = $10; //@line 16464
   $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 16465
   HEAP32[$400 >> 2] = $12; //@line 16466
   $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 16467
   HEAP32[$401 >> 2] = $14; //@line 16468
   $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 16469
   HEAP32[$402 >> 2] = $16; //@line 16470
   $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 16471
   HEAP32[$403 >> 2] = $18; //@line 16472
   $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 16473
   HEAP32[$404 >> 2] = $20; //@line 16474
   $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 16475
   HEAP32[$405 >> 2] = $22; //@line 16476
   $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 16477
   HEAP32[$406 >> 2] = $24; //@line 16478
   $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 16479
   HEAP32[$407 >> 2] = $26; //@line 16480
   $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 16481
   HEAP32[$408 >> 2] = $28; //@line 16482
   $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 16483
   HEAP32[$409 >> 2] = $30; //@line 16484
   $410 = $ReallocAsyncCtx3 + 64 | 0; //@line 16485
   HEAP32[$410 >> 2] = $32; //@line 16486
   $411 = $ReallocAsyncCtx3 + 68 | 0; //@line 16487
   HEAP32[$411 >> 2] = $34; //@line 16488
   $412 = $ReallocAsyncCtx3 + 72 | 0; //@line 16489
   HEAP32[$412 >> 2] = $36; //@line 16490
   $413 = $ReallocAsyncCtx3 + 76 | 0; //@line 16491
   HEAP32[$413 >> 2] = $38; //@line 16492
   $414 = $ReallocAsyncCtx3 + 80 | 0; //@line 16493
   HEAP32[$414 >> 2] = $40; //@line 16494
   $415 = $ReallocAsyncCtx3 + 84 | 0; //@line 16495
   HEAP32[$415 >> 2] = $42; //@line 16496
   $416 = $ReallocAsyncCtx3 + 88 | 0; //@line 16497
   HEAP32[$416 >> 2] = $44; //@line 16498
   $417 = $ReallocAsyncCtx3 + 92 | 0; //@line 16499
   HEAP32[$417 >> 2] = $46; //@line 16500
   $418 = $ReallocAsyncCtx3 + 96 | 0; //@line 16501
   HEAP32[$418 >> 2] = $48; //@line 16502
   $419 = $ReallocAsyncCtx3 + 100 | 0; //@line 16503
   HEAP32[$419 >> 2] = $50; //@line 16504
   $420 = $ReallocAsyncCtx3 + 104 | 0; //@line 16505
   HEAP8[$420 >> 0] = $387; //@line 16506
   $421 = $ReallocAsyncCtx3 + 108 | 0; //@line 16507
   HEAP32[$421 >> 2] = $52; //@line 16508
   $422 = $ReallocAsyncCtx3 + 112 | 0; //@line 16509
   HEAP32[$422 >> 2] = $56; //@line 16510
   $423 = $ReallocAsyncCtx3 + 116 | 0; //@line 16511
   HEAP32[$423 >> 2] = $58; //@line 16512
   $424 = $ReallocAsyncCtx3 + 120 | 0; //@line 16513
   HEAP32[$424 >> 2] = $62; //@line 16514
   $425 = $ReallocAsyncCtx3 + 124 | 0; //@line 16515
   HEAP32[$425 >> 2] = $60; //@line 16516
   $426 = $ReallocAsyncCtx3 + 128 | 0; //@line 16517
   HEAP32[$426 >> 2] = $64; //@line 16518
   $427 = $ReallocAsyncCtx3 + 132 | 0; //@line 16519
   HEAP32[$427 >> 2] = $66; //@line 16520
   $428 = $ReallocAsyncCtx3 + 136 | 0; //@line 16521
   HEAP32[$428 >> 2] = $68; //@line 16522
   $429 = $ReallocAsyncCtx3 + 140 | 0; //@line 16523
   HEAP32[$429 >> 2] = $70; //@line 16524
   $430 = $ReallocAsyncCtx3 + 144 | 0; //@line 16525
   HEAP32[$430 >> 2] = $72; //@line 16526
   $431 = $ReallocAsyncCtx3 + 148 | 0; //@line 16527
   HEAP32[$431 >> 2] = $74; //@line 16528
   $432 = $ReallocAsyncCtx3 + 152 | 0; //@line 16529
   HEAP32[$432 >> 2] = $76; //@line 16530
   $433 = $ReallocAsyncCtx3 + 156 | 0; //@line 16531
   HEAP32[$433 >> 2] = $78; //@line 16532
   $434 = $ReallocAsyncCtx3 + 160 | 0; //@line 16533
   HEAP32[$434 >> 2] = $80; //@line 16534
   $435 = $ReallocAsyncCtx3 + 164 | 0; //@line 16535
   HEAP32[$435 >> 2] = $82; //@line 16536
   $436 = $ReallocAsyncCtx3 + 168 | 0; //@line 16537
   HEAP32[$436 >> 2] = $84; //@line 16538
   $437 = $ReallocAsyncCtx3 + 172 | 0; //@line 16539
   HEAP32[$437 >> 2] = $86; //@line 16540
   $438 = $ReallocAsyncCtx3 + 176 | 0; //@line 16541
   HEAP32[$438 >> 2] = $88; //@line 16542
   $439 = $ReallocAsyncCtx3 + 180 | 0; //@line 16543
   HEAP32[$439 >> 2] = $90; //@line 16544
   $440 = $ReallocAsyncCtx3 + 184 | 0; //@line 16545
   HEAP32[$440 >> 2] = $92; //@line 16546
   $441 = $ReallocAsyncCtx3 + 188 | 0; //@line 16547
   HEAP32[$441 >> 2] = $94; //@line 16548
   $442 = $ReallocAsyncCtx3 + 192 | 0; //@line 16549
   HEAP32[$442 >> 2] = $96; //@line 16550
   $443 = $ReallocAsyncCtx3 + 196 | 0; //@line 16551
   HEAP32[$443 >> 2] = $98; //@line 16552
   $444 = $ReallocAsyncCtx3 + 200 | 0; //@line 16553
   HEAP32[$444 >> 2] = $100; //@line 16554
   $445 = $ReallocAsyncCtx3 + 204 | 0; //@line 16555
   HEAP32[$445 >> 2] = $102; //@line 16556
   $446 = $ReallocAsyncCtx3 + 208 | 0; //@line 16557
   HEAP32[$446 >> 2] = $104; //@line 16558
   $447 = $ReallocAsyncCtx3 + 212 | 0; //@line 16559
   HEAP32[$447 >> 2] = $106; //@line 16560
   $448 = $ReallocAsyncCtx3 + 216 | 0; //@line 16561
   HEAP32[$448 >> 2] = $108; //@line 16562
   $449 = $ReallocAsyncCtx3 + 220 | 0; //@line 16563
   HEAP32[$449 >> 2] = $110; //@line 16564
   $450 = $ReallocAsyncCtx3 + 224 | 0; //@line 16565
   HEAP32[$450 >> 2] = $112; //@line 16566
   $451 = $ReallocAsyncCtx3 + 228 | 0; //@line 16567
   HEAP8[$451 >> 0] = $114; //@line 16568
   $452 = $ReallocAsyncCtx3 + 232 | 0; //@line 16569
   HEAP32[$452 >> 2] = $116; //@line 16570
   $453 = $ReallocAsyncCtx3 + 236 | 0; //@line 16571
   HEAP8[$453 >> 0] = $118; //@line 16572
   $454 = $ReallocAsyncCtx3 + 240 | 0; //@line 16573
   HEAP32[$454 >> 2] = $120; //@line 16574
   $455 = $ReallocAsyncCtx3 + 244 | 0; //@line 16575
   HEAP32[$455 >> 2] = $122; //@line 16576
   $456 = $ReallocAsyncCtx3 + 248 | 0; //@line 16577
   HEAP32[$456 >> 2] = $124; //@line 16578
   $457 = $ReallocAsyncCtx3 + 252 | 0; //@line 16579
   HEAP8[$457 >> 0] = $126; //@line 16580
   $458 = $ReallocAsyncCtx3 + 256 | 0; //@line 16581
   HEAP32[$458 >> 2] = $128; //@line 16582
   $459 = $ReallocAsyncCtx3 + 260 | 0; //@line 16583
   HEAP32[$459 >> 2] = $130; //@line 16584
   $460 = $ReallocAsyncCtx3 + 264 | 0; //@line 16585
   HEAP32[$460 >> 2] = $134; //@line 16586
   $461 = $ReallocAsyncCtx3 + 268 | 0; //@line 16587
   HEAP32[$461 >> 2] = $136; //@line 16588
   sp = STACKTOP; //@line 16589
   return;
  }
  HEAP8[___async_retval >> 0] = $394; //@line 16593
  ___async_unwind = 0; //@line 16594
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 16595
  $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 16596
  HEAP32[$395 >> 2] = $2; //@line 16597
  $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 16598
  HEAP32[$396 >> 2] = $4; //@line 16599
  $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 16600
  HEAP32[$397 >> 2] = $6; //@line 16601
  $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 16602
  HEAP32[$398 >> 2] = $8; //@line 16603
  $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 16604
  HEAP32[$399 >> 2] = $10; //@line 16605
  $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 16606
  HEAP32[$400 >> 2] = $12; //@line 16607
  $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 16608
  HEAP32[$401 >> 2] = $14; //@line 16609
  $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 16610
  HEAP32[$402 >> 2] = $16; //@line 16611
  $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 16612
  HEAP32[$403 >> 2] = $18; //@line 16613
  $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 16614
  HEAP32[$404 >> 2] = $20; //@line 16615
  $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 16616
  HEAP32[$405 >> 2] = $22; //@line 16617
  $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 16618
  HEAP32[$406 >> 2] = $24; //@line 16619
  $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 16620
  HEAP32[$407 >> 2] = $26; //@line 16621
  $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 16622
  HEAP32[$408 >> 2] = $28; //@line 16623
  $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 16624
  HEAP32[$409 >> 2] = $30; //@line 16625
  $410 = $ReallocAsyncCtx3 + 64 | 0; //@line 16626
  HEAP32[$410 >> 2] = $32; //@line 16627
  $411 = $ReallocAsyncCtx3 + 68 | 0; //@line 16628
  HEAP32[$411 >> 2] = $34; //@line 16629
  $412 = $ReallocAsyncCtx3 + 72 | 0; //@line 16630
  HEAP32[$412 >> 2] = $36; //@line 16631
  $413 = $ReallocAsyncCtx3 + 76 | 0; //@line 16632
  HEAP32[$413 >> 2] = $38; //@line 16633
  $414 = $ReallocAsyncCtx3 + 80 | 0; //@line 16634
  HEAP32[$414 >> 2] = $40; //@line 16635
  $415 = $ReallocAsyncCtx3 + 84 | 0; //@line 16636
  HEAP32[$415 >> 2] = $42; //@line 16637
  $416 = $ReallocAsyncCtx3 + 88 | 0; //@line 16638
  HEAP32[$416 >> 2] = $44; //@line 16639
  $417 = $ReallocAsyncCtx3 + 92 | 0; //@line 16640
  HEAP32[$417 >> 2] = $46; //@line 16641
  $418 = $ReallocAsyncCtx3 + 96 | 0; //@line 16642
  HEAP32[$418 >> 2] = $48; //@line 16643
  $419 = $ReallocAsyncCtx3 + 100 | 0; //@line 16644
  HEAP32[$419 >> 2] = $50; //@line 16645
  $420 = $ReallocAsyncCtx3 + 104 | 0; //@line 16646
  HEAP8[$420 >> 0] = $387; //@line 16647
  $421 = $ReallocAsyncCtx3 + 108 | 0; //@line 16648
  HEAP32[$421 >> 2] = $52; //@line 16649
  $422 = $ReallocAsyncCtx3 + 112 | 0; //@line 16650
  HEAP32[$422 >> 2] = $56; //@line 16651
  $423 = $ReallocAsyncCtx3 + 116 | 0; //@line 16652
  HEAP32[$423 >> 2] = $58; //@line 16653
  $424 = $ReallocAsyncCtx3 + 120 | 0; //@line 16654
  HEAP32[$424 >> 2] = $62; //@line 16655
  $425 = $ReallocAsyncCtx3 + 124 | 0; //@line 16656
  HEAP32[$425 >> 2] = $60; //@line 16657
  $426 = $ReallocAsyncCtx3 + 128 | 0; //@line 16658
  HEAP32[$426 >> 2] = $64; //@line 16659
  $427 = $ReallocAsyncCtx3 + 132 | 0; //@line 16660
  HEAP32[$427 >> 2] = $66; //@line 16661
  $428 = $ReallocAsyncCtx3 + 136 | 0; //@line 16662
  HEAP32[$428 >> 2] = $68; //@line 16663
  $429 = $ReallocAsyncCtx3 + 140 | 0; //@line 16664
  HEAP32[$429 >> 2] = $70; //@line 16665
  $430 = $ReallocAsyncCtx3 + 144 | 0; //@line 16666
  HEAP32[$430 >> 2] = $72; //@line 16667
  $431 = $ReallocAsyncCtx3 + 148 | 0; //@line 16668
  HEAP32[$431 >> 2] = $74; //@line 16669
  $432 = $ReallocAsyncCtx3 + 152 | 0; //@line 16670
  HEAP32[$432 >> 2] = $76; //@line 16671
  $433 = $ReallocAsyncCtx3 + 156 | 0; //@line 16672
  HEAP32[$433 >> 2] = $78; //@line 16673
  $434 = $ReallocAsyncCtx3 + 160 | 0; //@line 16674
  HEAP32[$434 >> 2] = $80; //@line 16675
  $435 = $ReallocAsyncCtx3 + 164 | 0; //@line 16676
  HEAP32[$435 >> 2] = $82; //@line 16677
  $436 = $ReallocAsyncCtx3 + 168 | 0; //@line 16678
  HEAP32[$436 >> 2] = $84; //@line 16679
  $437 = $ReallocAsyncCtx3 + 172 | 0; //@line 16680
  HEAP32[$437 >> 2] = $86; //@line 16681
  $438 = $ReallocAsyncCtx3 + 176 | 0; //@line 16682
  HEAP32[$438 >> 2] = $88; //@line 16683
  $439 = $ReallocAsyncCtx3 + 180 | 0; //@line 16684
  HEAP32[$439 >> 2] = $90; //@line 16685
  $440 = $ReallocAsyncCtx3 + 184 | 0; //@line 16686
  HEAP32[$440 >> 2] = $92; //@line 16687
  $441 = $ReallocAsyncCtx3 + 188 | 0; //@line 16688
  HEAP32[$441 >> 2] = $94; //@line 16689
  $442 = $ReallocAsyncCtx3 + 192 | 0; //@line 16690
  HEAP32[$442 >> 2] = $96; //@line 16691
  $443 = $ReallocAsyncCtx3 + 196 | 0; //@line 16692
  HEAP32[$443 >> 2] = $98; //@line 16693
  $444 = $ReallocAsyncCtx3 + 200 | 0; //@line 16694
  HEAP32[$444 >> 2] = $100; //@line 16695
  $445 = $ReallocAsyncCtx3 + 204 | 0; //@line 16696
  HEAP32[$445 >> 2] = $102; //@line 16697
  $446 = $ReallocAsyncCtx3 + 208 | 0; //@line 16698
  HEAP32[$446 >> 2] = $104; //@line 16699
  $447 = $ReallocAsyncCtx3 + 212 | 0; //@line 16700
  HEAP32[$447 >> 2] = $106; //@line 16701
  $448 = $ReallocAsyncCtx3 + 216 | 0; //@line 16702
  HEAP32[$448 >> 2] = $108; //@line 16703
  $449 = $ReallocAsyncCtx3 + 220 | 0; //@line 16704
  HEAP32[$449 >> 2] = $110; //@line 16705
  $450 = $ReallocAsyncCtx3 + 224 | 0; //@line 16706
  HEAP32[$450 >> 2] = $112; //@line 16707
  $451 = $ReallocAsyncCtx3 + 228 | 0; //@line 16708
  HEAP8[$451 >> 0] = $114; //@line 16709
  $452 = $ReallocAsyncCtx3 + 232 | 0; //@line 16710
  HEAP32[$452 >> 2] = $116; //@line 16711
  $453 = $ReallocAsyncCtx3 + 236 | 0; //@line 16712
  HEAP8[$453 >> 0] = $118; //@line 16713
  $454 = $ReallocAsyncCtx3 + 240 | 0; //@line 16714
  HEAP32[$454 >> 2] = $120; //@line 16715
  $455 = $ReallocAsyncCtx3 + 244 | 0; //@line 16716
  HEAP32[$455 >> 2] = $122; //@line 16717
  $456 = $ReallocAsyncCtx3 + 248 | 0; //@line 16718
  HEAP32[$456 >> 2] = $124; //@line 16719
  $457 = $ReallocAsyncCtx3 + 252 | 0; //@line 16720
  HEAP8[$457 >> 0] = $126; //@line 16721
  $458 = $ReallocAsyncCtx3 + 256 | 0; //@line 16722
  HEAP32[$458 >> 2] = $128; //@line 16723
  $459 = $ReallocAsyncCtx3 + 260 | 0; //@line 16724
  HEAP32[$459 >> 2] = $130; //@line 16725
  $460 = $ReallocAsyncCtx3 + 264 | 0; //@line 16726
  HEAP32[$460 >> 2] = $134; //@line 16727
  $461 = $ReallocAsyncCtx3 + 268 | 0; //@line 16728
  HEAP32[$461 >> 2] = $136; //@line 16729
  sp = STACKTOP; //@line 16730
  return;
 } else if ((label | 0) == 19) {
  $480 = $$0$be + 2 << 24 >> 24; //@line 16734
  $483 = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 16737
  HEAP8[$56 >> 0] = 0; //@line 16738
  $484 = $483 & 255; //@line 16739
  HEAP8[$64 >> 0] = $484 >>> 5 & 1; //@line 16743
  if ($484 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 16747
  }
  HEAP8[$74 >> 0] = $484 & 15; //@line 16751
  $493 = HEAP32[(HEAP32[$82 >> 2] | 0) + 44 >> 2] | 0; //@line 16754
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 16755
  $494 = FUNCTION_TABLE_iii[$493 & 31]($110, $22) | 0; //@line 16756
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 16759
   $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 16760
   HEAP32[$495 >> 2] = $2; //@line 16761
   $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 16762
   HEAP32[$496 >> 2] = $4; //@line 16763
   $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 16764
   HEAP32[$497 >> 2] = $6; //@line 16765
   $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 16766
   HEAP32[$498 >> 2] = $8; //@line 16767
   $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 16768
   HEAP32[$499 >> 2] = $10; //@line 16769
   $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 16770
   HEAP32[$500 >> 2] = $12; //@line 16771
   $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 16772
   HEAP32[$501 >> 2] = $14; //@line 16773
   $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 16774
   HEAP32[$502 >> 2] = $16; //@line 16775
   $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 16776
   HEAP32[$503 >> 2] = $18; //@line 16777
   $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 16778
   HEAP32[$504 >> 2] = $20; //@line 16779
   $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 16780
   HEAP32[$505 >> 2] = $22; //@line 16781
   $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 16782
   HEAP32[$506 >> 2] = $24; //@line 16783
   $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 16784
   HEAP32[$507 >> 2] = $26; //@line 16785
   $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 16786
   HEAP32[$508 >> 2] = $28; //@line 16787
   $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 16788
   HEAP32[$509 >> 2] = $30; //@line 16789
   $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 16790
   HEAP32[$510 >> 2] = $32; //@line 16791
   $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 16792
   HEAP32[$511 >> 2] = $34; //@line 16793
   $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 16794
   HEAP32[$512 >> 2] = $36; //@line 16795
   $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 16796
   HEAP32[$513 >> 2] = $38; //@line 16797
   $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 16798
   HEAP32[$514 >> 2] = $40; //@line 16799
   $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 16800
   HEAP32[$515 >> 2] = $42; //@line 16801
   $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 16802
   HEAP32[$516 >> 2] = $44; //@line 16803
   $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 16804
   HEAP32[$517 >> 2] = $46; //@line 16805
   $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 16806
   HEAP32[$518 >> 2] = $48; //@line 16807
   $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 16808
   HEAP32[$519 >> 2] = $50; //@line 16809
   $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 16810
   HEAP32[$520 >> 2] = $52; //@line 16811
   $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 16812
   HEAP8[$521 >> 0] = $480; //@line 16813
   $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 16814
   HEAP32[$522 >> 2] = $56; //@line 16815
   $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 16816
   HEAP32[$523 >> 2] = $58; //@line 16817
   $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 16818
   HEAP32[$524 >> 2] = $60; //@line 16819
   $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 16820
   HEAP32[$525 >> 2] = $62; //@line 16821
   $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 16822
   HEAP32[$526 >> 2] = $64; //@line 16823
   $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 16824
   HEAP32[$527 >> 2] = $66; //@line 16825
   $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 16826
   HEAP32[$528 >> 2] = $68; //@line 16827
   $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 16828
   HEAP32[$529 >> 2] = $70; //@line 16829
   $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 16830
   HEAP32[$530 >> 2] = $72; //@line 16831
   $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 16832
   HEAP32[$531 >> 2] = $74; //@line 16833
   $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 16834
   HEAP32[$532 >> 2] = $76; //@line 16835
   $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 16836
   HEAP32[$533 >> 2] = $78; //@line 16837
   $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 16838
   HEAP32[$534 >> 2] = $80; //@line 16839
   $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 16840
   HEAP32[$535 >> 2] = $82; //@line 16841
   $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 16842
   HEAP32[$536 >> 2] = $84; //@line 16843
   $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 16844
   HEAP32[$537 >> 2] = $86; //@line 16845
   $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 16846
   HEAP32[$538 >> 2] = $88; //@line 16847
   $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 16848
   HEAP32[$539 >> 2] = $90; //@line 16849
   $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 16850
   HEAP32[$540 >> 2] = $92; //@line 16851
   $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 16852
   HEAP32[$541 >> 2] = $94; //@line 16853
   $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 16854
   HEAP32[$542 >> 2] = $96; //@line 16855
   $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 16856
   HEAP32[$543 >> 2] = $98; //@line 16857
   $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 16858
   HEAP32[$544 >> 2] = $100; //@line 16859
   $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 16860
   HEAP32[$545 >> 2] = $102; //@line 16861
   $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 16862
   HEAP32[$546 >> 2] = $104; //@line 16863
   $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 16864
   HEAP32[$547 >> 2] = $106; //@line 16865
   $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 16866
   HEAP32[$548 >> 2] = $108; //@line 16867
   $549 = $ReallocAsyncCtx4 + 220 | 0; //@line 16868
   HEAP32[$549 >> 2] = $110; //@line 16869
   $550 = $ReallocAsyncCtx4 + 224 | 0; //@line 16870
   HEAP32[$550 >> 2] = $112; //@line 16871
   $551 = $ReallocAsyncCtx4 + 228 | 0; //@line 16872
   HEAP8[$551 >> 0] = $114; //@line 16873
   $552 = $ReallocAsyncCtx4 + 232 | 0; //@line 16874
   HEAP32[$552 >> 2] = $116; //@line 16875
   $553 = $ReallocAsyncCtx4 + 236 | 0; //@line 16876
   HEAP8[$553 >> 0] = $118; //@line 16877
   $554 = $ReallocAsyncCtx4 + 240 | 0; //@line 16878
   HEAP32[$554 >> 2] = $120; //@line 16879
   $555 = $ReallocAsyncCtx4 + 244 | 0; //@line 16880
   HEAP32[$555 >> 2] = $122; //@line 16881
   $556 = $ReallocAsyncCtx4 + 248 | 0; //@line 16882
   HEAP32[$556 >> 2] = $124; //@line 16883
   $557 = $ReallocAsyncCtx4 + 252 | 0; //@line 16884
   HEAP8[$557 >> 0] = $126; //@line 16885
   $558 = $ReallocAsyncCtx4 + 256 | 0; //@line 16886
   HEAP32[$558 >> 2] = $128; //@line 16887
   $559 = $ReallocAsyncCtx4 + 260 | 0; //@line 16888
   HEAP32[$559 >> 2] = $130; //@line 16889
   $560 = $ReallocAsyncCtx4 + 264 | 0; //@line 16890
   HEAP32[$560 >> 2] = $$096$be; //@line 16891
   $561 = $ReallocAsyncCtx4 + 268 | 0; //@line 16892
   HEAP32[$561 >> 2] = $134; //@line 16893
   $562 = $ReallocAsyncCtx4 + 272 | 0; //@line 16894
   HEAP32[$562 >> 2] = $136; //@line 16895
   sp = STACKTOP; //@line 16896
   return;
  }
  HEAP8[___async_retval >> 0] = $494 & 1; //@line 16901
  ___async_unwind = 0; //@line 16902
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 16903
  $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 16904
  HEAP32[$495 >> 2] = $2; //@line 16905
  $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 16906
  HEAP32[$496 >> 2] = $4; //@line 16907
  $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 16908
  HEAP32[$497 >> 2] = $6; //@line 16909
  $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 16910
  HEAP32[$498 >> 2] = $8; //@line 16911
  $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 16912
  HEAP32[$499 >> 2] = $10; //@line 16913
  $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 16914
  HEAP32[$500 >> 2] = $12; //@line 16915
  $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 16916
  HEAP32[$501 >> 2] = $14; //@line 16917
  $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 16918
  HEAP32[$502 >> 2] = $16; //@line 16919
  $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 16920
  HEAP32[$503 >> 2] = $18; //@line 16921
  $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 16922
  HEAP32[$504 >> 2] = $20; //@line 16923
  $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 16924
  HEAP32[$505 >> 2] = $22; //@line 16925
  $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 16926
  HEAP32[$506 >> 2] = $24; //@line 16927
  $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 16928
  HEAP32[$507 >> 2] = $26; //@line 16929
  $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 16930
  HEAP32[$508 >> 2] = $28; //@line 16931
  $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 16932
  HEAP32[$509 >> 2] = $30; //@line 16933
  $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 16934
  HEAP32[$510 >> 2] = $32; //@line 16935
  $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 16936
  HEAP32[$511 >> 2] = $34; //@line 16937
  $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 16938
  HEAP32[$512 >> 2] = $36; //@line 16939
  $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 16940
  HEAP32[$513 >> 2] = $38; //@line 16941
  $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 16942
  HEAP32[$514 >> 2] = $40; //@line 16943
  $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 16944
  HEAP32[$515 >> 2] = $42; //@line 16945
  $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 16946
  HEAP32[$516 >> 2] = $44; //@line 16947
  $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 16948
  HEAP32[$517 >> 2] = $46; //@line 16949
  $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 16950
  HEAP32[$518 >> 2] = $48; //@line 16951
  $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 16952
  HEAP32[$519 >> 2] = $50; //@line 16953
  $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 16954
  HEAP32[$520 >> 2] = $52; //@line 16955
  $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 16956
  HEAP8[$521 >> 0] = $480; //@line 16957
  $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 16958
  HEAP32[$522 >> 2] = $56; //@line 16959
  $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 16960
  HEAP32[$523 >> 2] = $58; //@line 16961
  $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 16962
  HEAP32[$524 >> 2] = $60; //@line 16963
  $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 16964
  HEAP32[$525 >> 2] = $62; //@line 16965
  $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 16966
  HEAP32[$526 >> 2] = $64; //@line 16967
  $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 16968
  HEAP32[$527 >> 2] = $66; //@line 16969
  $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 16970
  HEAP32[$528 >> 2] = $68; //@line 16971
  $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 16972
  HEAP32[$529 >> 2] = $70; //@line 16973
  $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 16974
  HEAP32[$530 >> 2] = $72; //@line 16975
  $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 16976
  HEAP32[$531 >> 2] = $74; //@line 16977
  $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 16978
  HEAP32[$532 >> 2] = $76; //@line 16979
  $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 16980
  HEAP32[$533 >> 2] = $78; //@line 16981
  $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 16982
  HEAP32[$534 >> 2] = $80; //@line 16983
  $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 16984
  HEAP32[$535 >> 2] = $82; //@line 16985
  $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 16986
  HEAP32[$536 >> 2] = $84; //@line 16987
  $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 16988
  HEAP32[$537 >> 2] = $86; //@line 16989
  $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 16990
  HEAP32[$538 >> 2] = $88; //@line 16991
  $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 16992
  HEAP32[$539 >> 2] = $90; //@line 16993
  $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 16994
  HEAP32[$540 >> 2] = $92; //@line 16995
  $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 16996
  HEAP32[$541 >> 2] = $94; //@line 16997
  $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 16998
  HEAP32[$542 >> 2] = $96; //@line 16999
  $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 17000
  HEAP32[$543 >> 2] = $98; //@line 17001
  $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 17002
  HEAP32[$544 >> 2] = $100; //@line 17003
  $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 17004
  HEAP32[$545 >> 2] = $102; //@line 17005
  $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 17006
  HEAP32[$546 >> 2] = $104; //@line 17007
  $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 17008
  HEAP32[$547 >> 2] = $106; //@line 17009
  $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 17010
  HEAP32[$548 >> 2] = $108; //@line 17011
  $549 = $ReallocAsyncCtx4 + 220 | 0; //@line 17012
  HEAP32[$549 >> 2] = $110; //@line 17013
  $550 = $ReallocAsyncCtx4 + 224 | 0; //@line 17014
  HEAP32[$550 >> 2] = $112; //@line 17015
  $551 = $ReallocAsyncCtx4 + 228 | 0; //@line 17016
  HEAP8[$551 >> 0] = $114; //@line 17017
  $552 = $ReallocAsyncCtx4 + 232 | 0; //@line 17018
  HEAP32[$552 >> 2] = $116; //@line 17019
  $553 = $ReallocAsyncCtx4 + 236 | 0; //@line 17020
  HEAP8[$553 >> 0] = $118; //@line 17021
  $554 = $ReallocAsyncCtx4 + 240 | 0; //@line 17022
  HEAP32[$554 >> 2] = $120; //@line 17023
  $555 = $ReallocAsyncCtx4 + 244 | 0; //@line 17024
  HEAP32[$555 >> 2] = $122; //@line 17025
  $556 = $ReallocAsyncCtx4 + 248 | 0; //@line 17026
  HEAP32[$556 >> 2] = $124; //@line 17027
  $557 = $ReallocAsyncCtx4 + 252 | 0; //@line 17028
  HEAP8[$557 >> 0] = $126; //@line 17029
  $558 = $ReallocAsyncCtx4 + 256 | 0; //@line 17030
  HEAP32[$558 >> 2] = $128; //@line 17031
  $559 = $ReallocAsyncCtx4 + 260 | 0; //@line 17032
  HEAP32[$559 >> 2] = $130; //@line 17033
  $560 = $ReallocAsyncCtx4 + 264 | 0; //@line 17034
  HEAP32[$560 >> 2] = $$096$be; //@line 17035
  $561 = $ReallocAsyncCtx4 + 268 | 0; //@line 17036
  HEAP32[$561 >> 2] = $134; //@line 17037
  $562 = $ReallocAsyncCtx4 + 272 | 0; //@line 17038
  HEAP32[$562 >> 2] = $136; //@line 17039
  sp = STACKTOP; //@line 17040
  return;
 } else if ((label | 0) == 28) {
  HEAP8[$102 >> 0] = HEAP8[$124 + ($139 & 255) >> 0] | 0; //@line 17048
  $594 = $$0$be + 5 << 24 >> 24; //@line 17061
  HEAP32[$108 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 17069
  $604 = HEAP32[(HEAP32[$120 >> 2] | 0) + 48 >> 2] | 0; //@line 17072
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 17073
  $605 = FUNCTION_TABLE_iii[$604 & 31]($110, $12) | 0; //@line 17074
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 17077
   $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 17078
   HEAP32[$606 >> 2] = $2; //@line 17079
   $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 17080
   HEAP32[$607 >> 2] = $4; //@line 17081
   $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 17082
   HEAP32[$608 >> 2] = $6; //@line 17083
   $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 17084
   HEAP32[$609 >> 2] = $8; //@line 17085
   $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 17086
   HEAP32[$610 >> 2] = $10; //@line 17087
   $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 17088
   HEAP32[$611 >> 2] = $12; //@line 17089
   $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 17090
   HEAP32[$612 >> 2] = $14; //@line 17091
   $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 17092
   HEAP32[$613 >> 2] = $16; //@line 17093
   $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 17094
   HEAP8[$614 >> 0] = $594; //@line 17095
   $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 17096
   HEAP32[$615 >> 2] = $20; //@line 17097
   $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 17098
   HEAP32[$616 >> 2] = $18; //@line 17099
   $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 17100
   HEAP32[$617 >> 2] = $24; //@line 17101
   $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 17102
   HEAP32[$618 >> 2] = $22; //@line 17103
   $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 17104
   HEAP32[$619 >> 2] = $28; //@line 17105
   $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 17106
   HEAP32[$620 >> 2] = $26; //@line 17107
   $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 17108
   HEAP32[$621 >> 2] = $30; //@line 17109
   $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 17110
   HEAP32[$622 >> 2] = $32; //@line 17111
   $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 17112
   HEAP32[$623 >> 2] = $34; //@line 17113
   $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 17114
   HEAP32[$624 >> 2] = $36; //@line 17115
   $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 17116
   HEAP32[$625 >> 2] = $38; //@line 17117
   $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 17118
   HEAP32[$626 >> 2] = $40; //@line 17119
   $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 17120
   HEAP32[$627 >> 2] = $42; //@line 17121
   $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 17122
   HEAP32[$628 >> 2] = $44; //@line 17123
   $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 17124
   HEAP32[$629 >> 2] = $46; //@line 17125
   $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 17126
   HEAP32[$630 >> 2] = $48; //@line 17127
   $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 17128
   HEAP32[$631 >> 2] = $50; //@line 17129
   $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 17130
   HEAP32[$632 >> 2] = $52; //@line 17131
   $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 17132
   HEAP32[$633 >> 2] = $56; //@line 17133
   $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 17134
   HEAP32[$634 >> 2] = $58; //@line 17135
   $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 17136
   HEAP32[$635 >> 2] = $62; //@line 17137
   $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 17138
   HEAP32[$636 >> 2] = $60; //@line 17139
   $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 17140
   HEAP32[$637 >> 2] = $64; //@line 17141
   $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 17142
   HEAP32[$638 >> 2] = $66; //@line 17143
   $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 17144
   HEAP32[$639 >> 2] = $68; //@line 17145
   $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 17146
   HEAP32[$640 >> 2] = $70; //@line 17147
   $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 17148
   HEAP32[$641 >> 2] = $72; //@line 17149
   $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 17150
   HEAP32[$642 >> 2] = $74; //@line 17151
   $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 17152
   HEAP32[$643 >> 2] = $76; //@line 17153
   $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 17154
   HEAP32[$644 >> 2] = $78; //@line 17155
   $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 17156
   HEAP32[$645 >> 2] = $80; //@line 17157
   $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 17158
   HEAP32[$646 >> 2] = $82; //@line 17159
   $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 17160
   HEAP32[$647 >> 2] = $84; //@line 17161
   $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 17162
   HEAP32[$648 >> 2] = $86; //@line 17163
   $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 17164
   HEAP32[$649 >> 2] = $88; //@line 17165
   $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 17166
   HEAP32[$650 >> 2] = $90; //@line 17167
   $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 17168
   HEAP32[$651 >> 2] = $92; //@line 17169
   $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 17170
   HEAP32[$652 >> 2] = $94; //@line 17171
   $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 17172
   HEAP32[$653 >> 2] = $96; //@line 17173
   $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 17174
   HEAP32[$654 >> 2] = $98; //@line 17175
   $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 17176
   HEAP32[$655 >> 2] = $100; //@line 17177
   $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 17178
   HEAP32[$656 >> 2] = $102; //@line 17179
   $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 17180
   HEAP32[$657 >> 2] = $104; //@line 17181
   $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 17182
   HEAP32[$658 >> 2] = $106; //@line 17183
   $659 = $ReallocAsyncCtx5 + 216 | 0; //@line 17184
   HEAP32[$659 >> 2] = $108; //@line 17185
   $660 = $ReallocAsyncCtx5 + 220 | 0; //@line 17186
   HEAP32[$660 >> 2] = $110; //@line 17187
   $661 = $ReallocAsyncCtx5 + 224 | 0; //@line 17188
   HEAP32[$661 >> 2] = $112; //@line 17189
   $662 = $ReallocAsyncCtx5 + 228 | 0; //@line 17190
   HEAP8[$662 >> 0] = $114; //@line 17191
   $663 = $ReallocAsyncCtx5 + 232 | 0; //@line 17192
   HEAP32[$663 >> 2] = $116; //@line 17193
   $664 = $ReallocAsyncCtx5 + 236 | 0; //@line 17194
   HEAP8[$664 >> 0] = $118; //@line 17195
   $665 = $ReallocAsyncCtx5 + 240 | 0; //@line 17196
   HEAP32[$665 >> 2] = $120; //@line 17197
   $666 = $ReallocAsyncCtx5 + 244 | 0; //@line 17198
   HEAP32[$666 >> 2] = $122; //@line 17199
   $667 = $ReallocAsyncCtx5 + 248 | 0; //@line 17200
   HEAP32[$667 >> 2] = $124; //@line 17201
   $668 = $ReallocAsyncCtx5 + 252 | 0; //@line 17202
   HEAP8[$668 >> 0] = $126; //@line 17203
   $669 = $ReallocAsyncCtx5 + 256 | 0; //@line 17204
   HEAP32[$669 >> 2] = $128; //@line 17205
   $670 = $ReallocAsyncCtx5 + 260 | 0; //@line 17206
   HEAP32[$670 >> 2] = $130; //@line 17207
   $671 = $ReallocAsyncCtx5 + 264 | 0; //@line 17208
   HEAP32[$671 >> 2] = $134; //@line 17209
   $672 = $ReallocAsyncCtx5 + 268 | 0; //@line 17210
   HEAP32[$672 >> 2] = $136; //@line 17211
   sp = STACKTOP; //@line 17212
   return;
  }
  HEAP8[___async_retval >> 0] = $605; //@line 17216
  ___async_unwind = 0; //@line 17217
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 17218
  $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 17219
  HEAP32[$606 >> 2] = $2; //@line 17220
  $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 17221
  HEAP32[$607 >> 2] = $4; //@line 17222
  $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 17223
  HEAP32[$608 >> 2] = $6; //@line 17224
  $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 17225
  HEAP32[$609 >> 2] = $8; //@line 17226
  $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 17227
  HEAP32[$610 >> 2] = $10; //@line 17228
  $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 17229
  HEAP32[$611 >> 2] = $12; //@line 17230
  $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 17231
  HEAP32[$612 >> 2] = $14; //@line 17232
  $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 17233
  HEAP32[$613 >> 2] = $16; //@line 17234
  $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 17235
  HEAP8[$614 >> 0] = $594; //@line 17236
  $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 17237
  HEAP32[$615 >> 2] = $20; //@line 17238
  $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 17239
  HEAP32[$616 >> 2] = $18; //@line 17240
  $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 17241
  HEAP32[$617 >> 2] = $24; //@line 17242
  $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 17243
  HEAP32[$618 >> 2] = $22; //@line 17244
  $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 17245
  HEAP32[$619 >> 2] = $28; //@line 17246
  $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 17247
  HEAP32[$620 >> 2] = $26; //@line 17248
  $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 17249
  HEAP32[$621 >> 2] = $30; //@line 17250
  $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 17251
  HEAP32[$622 >> 2] = $32; //@line 17252
  $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 17253
  HEAP32[$623 >> 2] = $34; //@line 17254
  $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 17255
  HEAP32[$624 >> 2] = $36; //@line 17256
  $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 17257
  HEAP32[$625 >> 2] = $38; //@line 17258
  $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 17259
  HEAP32[$626 >> 2] = $40; //@line 17260
  $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 17261
  HEAP32[$627 >> 2] = $42; //@line 17262
  $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 17263
  HEAP32[$628 >> 2] = $44; //@line 17264
  $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 17265
  HEAP32[$629 >> 2] = $46; //@line 17266
  $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 17267
  HEAP32[$630 >> 2] = $48; //@line 17268
  $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 17269
  HEAP32[$631 >> 2] = $50; //@line 17270
  $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 17271
  HEAP32[$632 >> 2] = $52; //@line 17272
  $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 17273
  HEAP32[$633 >> 2] = $56; //@line 17274
  $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 17275
  HEAP32[$634 >> 2] = $58; //@line 17276
  $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 17277
  HEAP32[$635 >> 2] = $62; //@line 17278
  $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 17279
  HEAP32[$636 >> 2] = $60; //@line 17280
  $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 17281
  HEAP32[$637 >> 2] = $64; //@line 17282
  $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 17283
  HEAP32[$638 >> 2] = $66; //@line 17284
  $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 17285
  HEAP32[$639 >> 2] = $68; //@line 17286
  $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 17287
  HEAP32[$640 >> 2] = $70; //@line 17288
  $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 17289
  HEAP32[$641 >> 2] = $72; //@line 17290
  $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 17291
  HEAP32[$642 >> 2] = $74; //@line 17292
  $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 17293
  HEAP32[$643 >> 2] = $76; //@line 17294
  $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 17295
  HEAP32[$644 >> 2] = $78; //@line 17296
  $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 17297
  HEAP32[$645 >> 2] = $80; //@line 17298
  $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 17299
  HEAP32[$646 >> 2] = $82; //@line 17300
  $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 17301
  HEAP32[$647 >> 2] = $84; //@line 17302
  $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 17303
  HEAP32[$648 >> 2] = $86; //@line 17304
  $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 17305
  HEAP32[$649 >> 2] = $88; //@line 17306
  $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 17307
  HEAP32[$650 >> 2] = $90; //@line 17308
  $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 17309
  HEAP32[$651 >> 2] = $92; //@line 17310
  $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 17311
  HEAP32[$652 >> 2] = $94; //@line 17312
  $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 17313
  HEAP32[$653 >> 2] = $96; //@line 17314
  $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 17315
  HEAP32[$654 >> 2] = $98; //@line 17316
  $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 17317
  HEAP32[$655 >> 2] = $100; //@line 17318
  $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 17319
  HEAP32[$656 >> 2] = $102; //@line 17320
  $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 17321
  HEAP32[$657 >> 2] = $104; //@line 17322
  $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 17323
  HEAP32[$658 >> 2] = $106; //@line 17324
  $659 = $ReallocAsyncCtx5 + 216 | 0; //@line 17325
  HEAP32[$659 >> 2] = $108; //@line 17326
  $660 = $ReallocAsyncCtx5 + 220 | 0; //@line 17327
  HEAP32[$660 >> 2] = $110; //@line 17328
  $661 = $ReallocAsyncCtx5 + 224 | 0; //@line 17329
  HEAP32[$661 >> 2] = $112; //@line 17330
  $662 = $ReallocAsyncCtx5 + 228 | 0; //@line 17331
  HEAP8[$662 >> 0] = $114; //@line 17332
  $663 = $ReallocAsyncCtx5 + 232 | 0; //@line 17333
  HEAP32[$663 >> 2] = $116; //@line 17334
  $664 = $ReallocAsyncCtx5 + 236 | 0; //@line 17335
  HEAP8[$664 >> 0] = $118; //@line 17336
  $665 = $ReallocAsyncCtx5 + 240 | 0; //@line 17337
  HEAP32[$665 >> 2] = $120; //@line 17338
  $666 = $ReallocAsyncCtx5 + 244 | 0; //@line 17339
  HEAP32[$666 >> 2] = $122; //@line 17340
  $667 = $ReallocAsyncCtx5 + 248 | 0; //@line 17341
  HEAP32[$667 >> 2] = $124; //@line 17342
  $668 = $ReallocAsyncCtx5 + 252 | 0; //@line 17343
  HEAP8[$668 >> 0] = $126; //@line 17344
  $669 = $ReallocAsyncCtx5 + 256 | 0; //@line 17345
  HEAP32[$669 >> 2] = $128; //@line 17346
  $670 = $ReallocAsyncCtx5 + 260 | 0; //@line 17347
  HEAP32[$670 >> 2] = $130; //@line 17348
  $671 = $ReallocAsyncCtx5 + 264 | 0; //@line 17349
  HEAP32[$671 >> 2] = $134; //@line 17350
  $672 = $ReallocAsyncCtx5 + 268 | 0; //@line 17351
  HEAP32[$672 >> 2] = $136; //@line 17352
  sp = STACKTOP; //@line 17353
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 17358
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_388($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i108 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $462 = 0, $463 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $484 = 0, $490 = 0, $493 = 0, $494 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $590 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13540
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13542
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13544
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13546
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13548
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13550
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13552
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13554
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13556
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13558
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13560
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13562
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13564
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13566
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13568
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13570
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13572
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13574
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13576
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13578
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 13580
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 13582
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 13584
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 13586
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 13588
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 13590
 $52 = HEAP8[$0 + 104 >> 0] | 0; //@line 13592
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 13594
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 13596
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 13598
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 13600
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 13602
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 13604
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 13606
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 13608
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 13610
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 13612
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 13614
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 13616
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 13618
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 13620
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 13622
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 13624
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 13626
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 13628
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 13630
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 13632
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 13634
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 13636
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 13638
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 13640
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 13642
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 13644
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 13646
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 13648
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 13650
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 13652
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 13654
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 13656
 $118 = HEAP8[$0 + 236 >> 0] | 0; //@line 13658
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 13660
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 13662
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 13664
 $126 = HEAP8[$0 + 252 >> 0] | 0; //@line 13666
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 13668
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 13670
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 13672
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 13674
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 13676
 $462 = HEAP8[$20 >> 0] | 0; //@line 13678
 $463 = $462 & 255; //@line 13679
 if (((-128 - (HEAP8[$30 >> 0] | 0) & 255) + -1 | 0) > ($463 | 0)) {
  HEAP8[$94 + 4 + $463 >> 0] = 7; //@line 13690
  HEAP8[$20 >> 0] = $462 + 2 << 24 >> 24; //@line 13691
  HEAP8[($462 + 1 & 255) + ($94 + 4) >> 0] = $AsyncRetVal; //@line 13692
  HEAP8[$10 >> 0] = 1; //@line 13693
  $$0$i108 = 0; //@line 13694
 } else {
  $$0$i108 = -1e3; //@line 13696
 }
 $$0$be = $52; //@line 13698
 $$096$be = $$0$i108; //@line 13698
 L5 : while (1) {
  if (($$0$be & 255) >= ($118 & 255)) {
   label = 31; //@line 13702
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 13706
  switch (HEAP8[$124 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 13711
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 13716
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 13721
    break L5;
    break;
   }
  case 9:
   {
    label = 22; //@line 13726
    break L5;
    break;
   }
  case 10:
   {
    label = 27; //@line 13731
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$58 >> 2] = 0; //@line 13736
    HEAP8[$42 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 13741
    HEAP8[$32 >> 0] = HEAP8[$124 + ($$0$be + 2 & 255) >> 0] | 0; //@line 13746
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 13747
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 13752
    $234 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 13755
    HEAP8[$2 >> 0] = $234; //@line 13756
    HEAP16[$14 >> 1] = 1 << ($234 & 255); //@line 13760
    $239 = HEAP8[$20 >> 0] | 0; //@line 13762
    if (($239 & 255) >= (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 13766
     $$096$be = -1e3; //@line 13766
     continue L5;
    }
    HEAP8[$20 >> 0] = $239 + 1 << 24 >> 24; //@line 13772
    HEAP8[($239 & 255) + ($94 + 4) >> 0] = 4; //@line 13773
    HEAP8[$10 >> 0] = 1; //@line 13774
    $$0$be = $231; //@line 13775
    $$096$be = 0; //@line 13775
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$20 >> 0] | 0; //@line 13781
    $348 = $347 & 255; //@line 13782
    if (((-128 - (HEAP8[$30 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 13788
     $$096$be = -1e3; //@line 13788
     continue L5;
    }
    HEAP8[$94 + 4 + $348 >> 0] = 6; //@line 13793
    HEAP8[($347 + 1 & 255) + ($94 + 4) >> 0] = -1; //@line 13797
    HEAP8[$20 >> 0] = $347 + 3 << 24 >> 24; //@line 13799
    HEAP8[($347 + 2 & 255) + ($94 + 4) >> 0] = $114; //@line 13802
    HEAP8[$10 >> 0] = 1; //@line 13803
    $$0$be = $137; //@line 13804
    $$096$be = 0; //@line 13804
    continue L5;
    break;
   }
  case 8:
   {
    $473 = $$0$be + 2 << 24 >> 24; //@line 13809
    $477 = HEAP8[$124 + ($137 & 255) >> 0] & 15; //@line 13813
    $481 = ($477 + ($477 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 13818
    HEAP32[$36 >> 2] = $481; //@line 13819
    HEAP32[$48 >> 2] = $481 + 1e3; //@line 13821
    $484 = HEAP8[$20 >> 0] | 0; //@line 13823
    if (($484 & 255) >= (-128 - (HEAP8[$30 >> 0] | 0) & 255)) {
     $$0$be = $473; //@line 13827
     $$096$be = -1e3; //@line 13827
     continue L5;
    }
    HEAP8[$20 >> 0] = $484 + 1 << 24 >> 24; //@line 13833
    HEAP8[($484 & 255) + ($94 + 4) >> 0] = 8; //@line 13834
    HEAP8[$92 >> 0] = 1; //@line 13835
    HEAP8[$10 >> 0] = 1; //@line 13836
    $$0$be = $473; //@line 13837
    $$096$be = 0; //@line 13837
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 13842
    $$096$be = -1013; //@line 13842
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$134 >> 0] = 0; //@line 13848
  HEAP8[$68 >> 0] = 0; //@line 13849
  HEAP8[$72 >> 0] = 0; //@line 13850
  HEAP8[$40 >> 0] = 0; //@line 13851
  $148 = $137 & 255; //@line 13852
  $149 = $148 + -1 | 0; //@line 13853
  HEAP32[$16 >> 2] = $124 + $149; //@line 13855
  HEAP8[$6 >> 0] = $80 - $149; //@line 13858
  HEAP8[$122 >> 0] = HEAP8[$132 >> 0] | 0; //@line 13860
  HEAP8[$104 >> 0] = HEAP8[$112 >> 0] | 0; //@line 13862
  HEAP8[$86 >> 0] = HEAP8[$98 >> 0] | 0; //@line 13864
  HEAP8[$70 >> 0] = HEAP8[$76 >> 0] | 0; //@line 13866
  HEAP8[$46 >> 0] = HEAP8[$62 >> 0] | 0; //@line 13868
  $160 = HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] | 0; //@line 13871
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 13872
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($110, $84, $134, $68, $72, $40) | 0; //@line 13873
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 13876
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 13877
   HEAP32[$162 >> 2] = $2; //@line 13878
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 13879
   HEAP32[$163 >> 2] = $4; //@line 13880
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 13881
   HEAP32[$164 >> 2] = $6; //@line 13882
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 13883
   HEAP32[$165 >> 2] = $8; //@line 13884
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 13885
   HEAP32[$166 >> 2] = $10; //@line 13886
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 13887
   HEAP32[$167 >> 2] = $12; //@line 13888
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 13889
   HEAP32[$168 >> 2] = $14; //@line 13890
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 13891
   HEAP32[$169 >> 2] = $16; //@line 13892
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 13893
   HEAP32[$170 >> 2] = $18; //@line 13894
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 13895
   HEAP32[$171 >> 2] = $20; //@line 13896
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 13897
   HEAP32[$172 >> 2] = $22; //@line 13898
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 13899
   HEAP32[$173 >> 2] = $24; //@line 13900
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 13901
   HEAP32[$174 >> 2] = $26; //@line 13902
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 13903
   HEAP32[$175 >> 2] = $28; //@line 13904
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 13905
   HEAP32[$176 >> 2] = $30; //@line 13906
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 13907
   HEAP32[$177 >> 2] = $32; //@line 13908
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 13909
   HEAP32[$178 >> 2] = $34; //@line 13910
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 13911
   HEAP32[$179 >> 2] = $36; //@line 13912
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 13913
   HEAP32[$180 >> 2] = $38; //@line 13914
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 13915
   HEAP32[$181 >> 2] = $40; //@line 13916
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 13917
   HEAP32[$182 >> 2] = $42; //@line 13918
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 13919
   HEAP32[$183 >> 2] = $44; //@line 13920
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 13921
   HEAP32[$184 >> 2] = $46; //@line 13922
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 13923
   HEAP32[$185 >> 2] = $148; //@line 13924
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 13925
   HEAP32[$186 >> 2] = $50; //@line 13926
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 13927
   HEAP32[$187 >> 2] = $54; //@line 13928
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 13929
   HEAP32[$188 >> 2] = $48; //@line 13930
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 13931
   HEAP32[$189 >> 2] = $56; //@line 13932
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 13933
   HEAP32[$190 >> 2] = $58; //@line 13934
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 13935
   HEAP32[$191 >> 2] = $60; //@line 13936
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 13937
   HEAP32[$192 >> 2] = $62; //@line 13938
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 13939
   HEAP32[$193 >> 2] = $64; //@line 13940
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 13941
   HEAP32[$194 >> 2] = $66; //@line 13942
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 13943
   HEAP32[$195 >> 2] = $68; //@line 13944
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 13945
   HEAP32[$196 >> 2] = $70; //@line 13946
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 13947
   HEAP32[$197 >> 2] = $72; //@line 13948
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 13949
   HEAP32[$198 >> 2] = $74; //@line 13950
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 13951
   HEAP32[$199 >> 2] = $76; //@line 13952
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 13953
   HEAP32[$200 >> 2] = $78; //@line 13954
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 13955
   HEAP32[$201 >> 2] = $80; //@line 13956
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 13957
   HEAP32[$202 >> 2] = $82; //@line 13958
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 13959
   HEAP32[$203 >> 2] = $84; //@line 13960
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 13961
   HEAP32[$204 >> 2] = $86; //@line 13962
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 13963
   HEAP32[$205 >> 2] = $88; //@line 13964
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 13965
   HEAP32[$206 >> 2] = $90; //@line 13966
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 13967
   HEAP32[$207 >> 2] = $92; //@line 13968
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 13969
   HEAP32[$208 >> 2] = $94; //@line 13970
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 13971
   HEAP32[$209 >> 2] = $96; //@line 13972
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 13973
   HEAP32[$210 >> 2] = $98; //@line 13974
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 13975
   HEAP32[$211 >> 2] = $100; //@line 13976
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 13977
   HEAP32[$212 >> 2] = $102; //@line 13978
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 13979
   HEAP32[$213 >> 2] = $104; //@line 13980
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 13981
   HEAP32[$214 >> 2] = $106; //@line 13982
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 13983
   HEAP32[$215 >> 2] = $108; //@line 13984
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 13985
   HEAP32[$216 >> 2] = $110; //@line 13986
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 13987
   HEAP32[$217 >> 2] = $112; //@line 13988
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 13989
   HEAP8[$218 >> 0] = $114; //@line 13990
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 13991
   HEAP32[$219 >> 2] = $116; //@line 13992
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 13993
   HEAP8[$220 >> 0] = $118; //@line 13994
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 13995
   HEAP32[$221 >> 2] = $120; //@line 13996
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 13997
   HEAP32[$222 >> 2] = $122; //@line 13998
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 13999
   HEAP32[$223 >> 2] = $124; //@line 14000
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 14001
   HEAP8[$224 >> 0] = $126; //@line 14002
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 14003
   HEAP32[$225 >> 2] = $128; //@line 14004
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 14005
   HEAP32[$226 >> 2] = $130; //@line 14006
   $227 = $ReallocAsyncCtx + 264 | 0; //@line 14007
   HEAP32[$227 >> 2] = $$096$be; //@line 14008
   $228 = $ReallocAsyncCtx + 268 | 0; //@line 14009
   HEAP32[$228 >> 2] = $132; //@line 14010
   $229 = $ReallocAsyncCtx + 272 | 0; //@line 14011
   HEAP32[$229 >> 2] = $134; //@line 14012
   sp = STACKTOP; //@line 14013
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 14017
  ___async_unwind = 0; //@line 14018
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 14019
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 14020
  HEAP32[$162 >> 2] = $2; //@line 14021
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 14022
  HEAP32[$163 >> 2] = $4; //@line 14023
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 14024
  HEAP32[$164 >> 2] = $6; //@line 14025
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 14026
  HEAP32[$165 >> 2] = $8; //@line 14027
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 14028
  HEAP32[$166 >> 2] = $10; //@line 14029
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 14030
  HEAP32[$167 >> 2] = $12; //@line 14031
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 14032
  HEAP32[$168 >> 2] = $14; //@line 14033
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 14034
  HEAP32[$169 >> 2] = $16; //@line 14035
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 14036
  HEAP32[$170 >> 2] = $18; //@line 14037
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 14038
  HEAP32[$171 >> 2] = $20; //@line 14039
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 14040
  HEAP32[$172 >> 2] = $22; //@line 14041
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 14042
  HEAP32[$173 >> 2] = $24; //@line 14043
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 14044
  HEAP32[$174 >> 2] = $26; //@line 14045
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 14046
  HEAP32[$175 >> 2] = $28; //@line 14047
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 14048
  HEAP32[$176 >> 2] = $30; //@line 14049
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 14050
  HEAP32[$177 >> 2] = $32; //@line 14051
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 14052
  HEAP32[$178 >> 2] = $34; //@line 14053
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 14054
  HEAP32[$179 >> 2] = $36; //@line 14055
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 14056
  HEAP32[$180 >> 2] = $38; //@line 14057
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 14058
  HEAP32[$181 >> 2] = $40; //@line 14059
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 14060
  HEAP32[$182 >> 2] = $42; //@line 14061
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 14062
  HEAP32[$183 >> 2] = $44; //@line 14063
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 14064
  HEAP32[$184 >> 2] = $46; //@line 14065
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 14066
  HEAP32[$185 >> 2] = $148; //@line 14067
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 14068
  HEAP32[$186 >> 2] = $50; //@line 14069
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 14070
  HEAP32[$187 >> 2] = $54; //@line 14071
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 14072
  HEAP32[$188 >> 2] = $48; //@line 14073
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 14074
  HEAP32[$189 >> 2] = $56; //@line 14075
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 14076
  HEAP32[$190 >> 2] = $58; //@line 14077
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 14078
  HEAP32[$191 >> 2] = $60; //@line 14079
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 14080
  HEAP32[$192 >> 2] = $62; //@line 14081
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 14082
  HEAP32[$193 >> 2] = $64; //@line 14083
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 14084
  HEAP32[$194 >> 2] = $66; //@line 14085
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 14086
  HEAP32[$195 >> 2] = $68; //@line 14087
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 14088
  HEAP32[$196 >> 2] = $70; //@line 14089
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 14090
  HEAP32[$197 >> 2] = $72; //@line 14091
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 14092
  HEAP32[$198 >> 2] = $74; //@line 14093
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 14094
  HEAP32[$199 >> 2] = $76; //@line 14095
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 14096
  HEAP32[$200 >> 2] = $78; //@line 14097
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 14098
  HEAP32[$201 >> 2] = $80; //@line 14099
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 14100
  HEAP32[$202 >> 2] = $82; //@line 14101
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 14102
  HEAP32[$203 >> 2] = $84; //@line 14103
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 14104
  HEAP32[$204 >> 2] = $86; //@line 14105
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 14106
  HEAP32[$205 >> 2] = $88; //@line 14107
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 14108
  HEAP32[$206 >> 2] = $90; //@line 14109
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 14110
  HEAP32[$207 >> 2] = $92; //@line 14111
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 14112
  HEAP32[$208 >> 2] = $94; //@line 14113
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 14114
  HEAP32[$209 >> 2] = $96; //@line 14115
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 14116
  HEAP32[$210 >> 2] = $98; //@line 14117
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 14118
  HEAP32[$211 >> 2] = $100; //@line 14119
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 14120
  HEAP32[$212 >> 2] = $102; //@line 14121
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 14122
  HEAP32[$213 >> 2] = $104; //@line 14123
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 14124
  HEAP32[$214 >> 2] = $106; //@line 14125
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 14126
  HEAP32[$215 >> 2] = $108; //@line 14127
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 14128
  HEAP32[$216 >> 2] = $110; //@line 14129
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 14130
  HEAP32[$217 >> 2] = $112; //@line 14131
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 14132
  HEAP8[$218 >> 0] = $114; //@line 14133
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 14134
  HEAP32[$219 >> 2] = $116; //@line 14135
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 14136
  HEAP8[$220 >> 0] = $118; //@line 14137
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 14138
  HEAP32[$221 >> 2] = $120; //@line 14139
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 14140
  HEAP32[$222 >> 2] = $122; //@line 14141
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 14142
  HEAP32[$223 >> 2] = $124; //@line 14143
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 14144
  HEAP8[$224 >> 0] = $126; //@line 14145
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 14146
  HEAP32[$225 >> 2] = $128; //@line 14147
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 14148
  HEAP32[$226 >> 2] = $130; //@line 14149
  $227 = $ReallocAsyncCtx + 264 | 0; //@line 14150
  HEAP32[$227 >> 2] = $$096$be; //@line 14151
  $228 = $ReallocAsyncCtx + 268 | 0; //@line 14152
  HEAP32[$228 >> 2] = $132; //@line 14153
  $229 = $ReallocAsyncCtx + 272 | 0; //@line 14154
  HEAP32[$229 >> 2] = $134; //@line 14155
  sp = STACKTOP; //@line 14156
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 14162
  HEAP8[$34 >> 0] = ($247 & 255) >>> 4 & 7; //@line 14167
  HEAP8[$24 >> 0] = $247 & 15; //@line 14169
  $266 = $$0$be + 5 << 24 >> 24; //@line 14183
  HEAP32[$44 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 14191
  $276 = HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] | 0; //@line 14194
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 14195
  $277 = FUNCTION_TABLE_iii[$276 & 31]($110, $50) | 0; //@line 14196
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 14199
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 14200
   HEAP32[$278 >> 2] = $2; //@line 14201
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 14202
   HEAP32[$279 >> 2] = $4; //@line 14203
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 14204
   HEAP32[$280 >> 2] = $6; //@line 14205
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 14206
   HEAP32[$281 >> 2] = $8; //@line 14207
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 14208
   HEAP32[$282 >> 2] = $10; //@line 14209
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 14210
   HEAP32[$283 >> 2] = $12; //@line 14211
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 14212
   HEAP32[$284 >> 2] = $14; //@line 14213
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 14214
   HEAP32[$285 >> 2] = $16; //@line 14215
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 14216
   HEAP32[$286 >> 2] = $18; //@line 14217
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 14218
   HEAP32[$287 >> 2] = $20; //@line 14219
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 14220
   HEAP32[$288 >> 2] = $22; //@line 14221
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 14222
   HEAP32[$289 >> 2] = $24; //@line 14223
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 14224
   HEAP32[$290 >> 2] = $26; //@line 14225
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 14226
   HEAP32[$291 >> 2] = $28; //@line 14227
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 14228
   HEAP32[$292 >> 2] = $30; //@line 14229
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 14230
   HEAP32[$293 >> 2] = $32; //@line 14231
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 14232
   HEAP32[$294 >> 2] = $34; //@line 14233
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 14234
   HEAP32[$295 >> 2] = $36; //@line 14235
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 14236
   HEAP32[$296 >> 2] = $38; //@line 14237
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 14238
   HEAP32[$297 >> 2] = $40; //@line 14239
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 14240
   HEAP32[$298 >> 2] = $42; //@line 14241
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 14242
   HEAP32[$299 >> 2] = $44; //@line 14243
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 14244
   HEAP32[$300 >> 2] = $46; //@line 14245
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 14246
   HEAP32[$301 >> 2] = $48; //@line 14247
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 14248
   HEAP32[$302 >> 2] = $50; //@line 14249
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 14250
   HEAP32[$303 >> 2] = $54; //@line 14251
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 14252
   HEAP32[$304 >> 2] = $56; //@line 14253
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 14254
   HEAP32[$305 >> 2] = $58; //@line 14255
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 14256
   HEAP32[$306 >> 2] = $60; //@line 14257
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 14258
   HEAP32[$307 >> 2] = $62; //@line 14259
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 14260
   HEAP32[$308 >> 2] = $64; //@line 14261
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 14262
   HEAP32[$309 >> 2] = $66; //@line 14263
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 14264
   HEAP32[$310 >> 2] = $68; //@line 14265
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 14266
   HEAP32[$311 >> 2] = $70; //@line 14267
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 14268
   HEAP32[$312 >> 2] = $72; //@line 14269
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 14270
   HEAP8[$313 >> 0] = $266; //@line 14271
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 14272
   HEAP32[$314 >> 2] = $74; //@line 14273
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 14274
   HEAP32[$315 >> 2] = $76; //@line 14275
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 14276
   HEAP32[$316 >> 2] = $78; //@line 14277
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 14278
   HEAP32[$317 >> 2] = $80; //@line 14279
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 14280
   HEAP32[$318 >> 2] = $82; //@line 14281
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 14282
   HEAP32[$319 >> 2] = $84; //@line 14283
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 14284
   HEAP32[$320 >> 2] = $86; //@line 14285
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 14286
   HEAP32[$321 >> 2] = $88; //@line 14287
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 14288
   HEAP32[$322 >> 2] = $90; //@line 14289
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 14290
   HEAP32[$323 >> 2] = $92; //@line 14291
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 14292
   HEAP32[$324 >> 2] = $94; //@line 14293
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 14294
   HEAP32[$325 >> 2] = $96; //@line 14295
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 14296
   HEAP32[$326 >> 2] = $98; //@line 14297
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 14298
   HEAP32[$327 >> 2] = $100; //@line 14299
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 14300
   HEAP32[$328 >> 2] = $102; //@line 14301
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 14302
   HEAP32[$329 >> 2] = $104; //@line 14303
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 14304
   HEAP32[$330 >> 2] = $106; //@line 14305
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 14306
   HEAP32[$331 >> 2] = $108; //@line 14307
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 14308
   HEAP32[$332 >> 2] = $110; //@line 14309
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 14310
   HEAP32[$333 >> 2] = $112; //@line 14311
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 14312
   HEAP8[$334 >> 0] = $114; //@line 14313
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 14314
   HEAP32[$335 >> 2] = $116; //@line 14315
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 14316
   HEAP8[$336 >> 0] = $118; //@line 14317
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 14318
   HEAP32[$337 >> 2] = $120; //@line 14319
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 14320
   HEAP32[$338 >> 2] = $122; //@line 14321
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 14322
   HEAP32[$339 >> 2] = $124; //@line 14323
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 14324
   HEAP8[$340 >> 0] = $126; //@line 14325
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 14326
   HEAP32[$341 >> 2] = $128; //@line 14327
   $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 14328
   HEAP32[$342 >> 2] = $130; //@line 14329
   $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 14330
   HEAP32[$343 >> 2] = $132; //@line 14331
   $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 14332
   HEAP32[$344 >> 2] = $134; //@line 14333
   sp = STACKTOP; //@line 14334
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 14338
  ___async_unwind = 0; //@line 14339
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 14340
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 14341
  HEAP32[$278 >> 2] = $2; //@line 14342
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 14343
  HEAP32[$279 >> 2] = $4; //@line 14344
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 14345
  HEAP32[$280 >> 2] = $6; //@line 14346
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 14347
  HEAP32[$281 >> 2] = $8; //@line 14348
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 14349
  HEAP32[$282 >> 2] = $10; //@line 14350
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 14351
  HEAP32[$283 >> 2] = $12; //@line 14352
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 14353
  HEAP32[$284 >> 2] = $14; //@line 14354
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 14355
  HEAP32[$285 >> 2] = $16; //@line 14356
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 14357
  HEAP32[$286 >> 2] = $18; //@line 14358
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 14359
  HEAP32[$287 >> 2] = $20; //@line 14360
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 14361
  HEAP32[$288 >> 2] = $22; //@line 14362
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 14363
  HEAP32[$289 >> 2] = $24; //@line 14364
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 14365
  HEAP32[$290 >> 2] = $26; //@line 14366
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 14367
  HEAP32[$291 >> 2] = $28; //@line 14368
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 14369
  HEAP32[$292 >> 2] = $30; //@line 14370
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 14371
  HEAP32[$293 >> 2] = $32; //@line 14372
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 14373
  HEAP32[$294 >> 2] = $34; //@line 14374
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 14375
  HEAP32[$295 >> 2] = $36; //@line 14376
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 14377
  HEAP32[$296 >> 2] = $38; //@line 14378
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 14379
  HEAP32[$297 >> 2] = $40; //@line 14380
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 14381
  HEAP32[$298 >> 2] = $42; //@line 14382
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 14383
  HEAP32[$299 >> 2] = $44; //@line 14384
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 14385
  HEAP32[$300 >> 2] = $46; //@line 14386
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 14387
  HEAP32[$301 >> 2] = $48; //@line 14388
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 14389
  HEAP32[$302 >> 2] = $50; //@line 14390
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 14391
  HEAP32[$303 >> 2] = $54; //@line 14392
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 14393
  HEAP32[$304 >> 2] = $56; //@line 14394
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 14395
  HEAP32[$305 >> 2] = $58; //@line 14396
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 14397
  HEAP32[$306 >> 2] = $60; //@line 14398
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 14399
  HEAP32[$307 >> 2] = $62; //@line 14400
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 14401
  HEAP32[$308 >> 2] = $64; //@line 14402
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 14403
  HEAP32[$309 >> 2] = $66; //@line 14404
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 14405
  HEAP32[$310 >> 2] = $68; //@line 14406
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 14407
  HEAP32[$311 >> 2] = $70; //@line 14408
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 14409
  HEAP32[$312 >> 2] = $72; //@line 14410
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 14411
  HEAP8[$313 >> 0] = $266; //@line 14412
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 14413
  HEAP32[$314 >> 2] = $74; //@line 14414
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 14415
  HEAP32[$315 >> 2] = $76; //@line 14416
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 14417
  HEAP32[$316 >> 2] = $78; //@line 14418
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 14419
  HEAP32[$317 >> 2] = $80; //@line 14420
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 14421
  HEAP32[$318 >> 2] = $82; //@line 14422
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 14423
  HEAP32[$319 >> 2] = $84; //@line 14424
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 14425
  HEAP32[$320 >> 2] = $86; //@line 14426
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 14427
  HEAP32[$321 >> 2] = $88; //@line 14428
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 14429
  HEAP32[$322 >> 2] = $90; //@line 14430
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 14431
  HEAP32[$323 >> 2] = $92; //@line 14432
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 14433
  HEAP32[$324 >> 2] = $94; //@line 14434
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 14435
  HEAP32[$325 >> 2] = $96; //@line 14436
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 14437
  HEAP32[$326 >> 2] = $98; //@line 14438
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 14439
  HEAP32[$327 >> 2] = $100; //@line 14440
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 14441
  HEAP32[$328 >> 2] = $102; //@line 14442
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 14443
  HEAP32[$329 >> 2] = $104; //@line 14444
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 14445
  HEAP32[$330 >> 2] = $106; //@line 14446
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 14447
  HEAP32[$331 >> 2] = $108; //@line 14448
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 14449
  HEAP32[$332 >> 2] = $110; //@line 14450
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 14451
  HEAP32[$333 >> 2] = $112; //@line 14452
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 14453
  HEAP8[$334 >> 0] = $114; //@line 14454
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 14455
  HEAP32[$335 >> 2] = $116; //@line 14456
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 14457
  HEAP8[$336 >> 0] = $118; //@line 14458
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 14459
  HEAP32[$337 >> 2] = $120; //@line 14460
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 14461
  HEAP32[$338 >> 2] = $122; //@line 14462
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 14463
  HEAP32[$339 >> 2] = $124; //@line 14464
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 14465
  HEAP8[$340 >> 0] = $126; //@line 14466
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 14467
  HEAP32[$341 >> 2] = $128; //@line 14468
  $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 14469
  HEAP32[$342 >> 2] = $130; //@line 14470
  $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 14471
  HEAP32[$343 >> 2] = $132; //@line 14472
  $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 14473
  HEAP32[$344 >> 2] = $134; //@line 14474
  sp = STACKTOP; //@line 14475
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$116 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 14483
  HEAP32[$128 >> 2] = $8; //@line 14484
  HEAP32[$130 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 14505
  HEAP32[$4 >> 2] = 0; //@line 14506
  $385 = $$0$be + 6 << 24 >> 24; //@line 14507
  HEAP8[$18 >> 0] = HEAP8[$124 + ($$0$be + 5 & 255) >> 0] | 0; //@line 14511
  $391 = HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0; //@line 14514
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(272) | 0; //@line 14515
  $392 = FUNCTION_TABLE_iii[$391 & 31]($110, $60) | 0; //@line 14516
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 14519
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 14520
   HEAP32[$393 >> 2] = $2; //@line 14521
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 14522
   HEAP32[$394 >> 2] = $4; //@line 14523
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 14524
   HEAP32[$395 >> 2] = $6; //@line 14525
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 14526
   HEAP32[$396 >> 2] = $8; //@line 14527
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 14528
   HEAP32[$397 >> 2] = $10; //@line 14529
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 14530
   HEAP32[$398 >> 2] = $12; //@line 14531
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 14532
   HEAP32[$399 >> 2] = $14; //@line 14533
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 14534
   HEAP32[$400 >> 2] = $16; //@line 14535
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 14536
   HEAP32[$401 >> 2] = $18; //@line 14537
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 14538
   HEAP32[$402 >> 2] = $20; //@line 14539
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 14540
   HEAP32[$403 >> 2] = $22; //@line 14541
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 14542
   HEAP32[$404 >> 2] = $24; //@line 14543
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 14544
   HEAP32[$405 >> 2] = $26; //@line 14545
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 14546
   HEAP32[$406 >> 2] = $28; //@line 14547
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 14548
   HEAP32[$407 >> 2] = $30; //@line 14549
   $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 14550
   HEAP32[$408 >> 2] = $32; //@line 14551
   $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 14552
   HEAP32[$409 >> 2] = $34; //@line 14553
   $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 14554
   HEAP32[$410 >> 2] = $36; //@line 14555
   $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 14556
   HEAP32[$411 >> 2] = $38; //@line 14557
   $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 14558
   HEAP32[$412 >> 2] = $40; //@line 14559
   $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 14560
   HEAP32[$413 >> 2] = $42; //@line 14561
   $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 14562
   HEAP32[$414 >> 2] = $44; //@line 14563
   $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 14564
   HEAP32[$415 >> 2] = $46; //@line 14565
   $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 14566
   HEAP32[$416 >> 2] = $48; //@line 14567
   $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 14568
   HEAP32[$417 >> 2] = $50; //@line 14569
   $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 14570
   HEAP8[$418 >> 0] = $385; //@line 14571
   $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 14572
   HEAP32[$419 >> 2] = $54; //@line 14573
   $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 14574
   HEAP32[$420 >> 2] = $56; //@line 14575
   $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 14576
   HEAP32[$421 >> 2] = $58; //@line 14577
   $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 14578
   HEAP32[$422 >> 2] = $60; //@line 14579
   $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 14580
   HEAP32[$423 >> 2] = $62; //@line 14581
   $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 14582
   HEAP32[$424 >> 2] = $64; //@line 14583
   $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 14584
   HEAP32[$425 >> 2] = $66; //@line 14585
   $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 14586
   HEAP32[$426 >> 2] = $68; //@line 14587
   $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 14588
   HEAP32[$427 >> 2] = $70; //@line 14589
   $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 14590
   HEAP32[$428 >> 2] = $72; //@line 14591
   $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 14592
   HEAP32[$429 >> 2] = $74; //@line 14593
   $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 14594
   HEAP32[$430 >> 2] = $76; //@line 14595
   $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 14596
   HEAP32[$431 >> 2] = $78; //@line 14597
   $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 14598
   HEAP32[$432 >> 2] = $80; //@line 14599
   $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 14600
   HEAP32[$433 >> 2] = $82; //@line 14601
   $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 14602
   HEAP32[$434 >> 2] = $84; //@line 14603
   $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 14604
   HEAP32[$435 >> 2] = $86; //@line 14605
   $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 14606
   HEAP32[$436 >> 2] = $88; //@line 14607
   $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 14608
   HEAP32[$437 >> 2] = $90; //@line 14609
   $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 14610
   HEAP32[$438 >> 2] = $92; //@line 14611
   $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 14612
   HEAP32[$439 >> 2] = $94; //@line 14613
   $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 14614
   HEAP32[$440 >> 2] = $96; //@line 14615
   $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 14616
   HEAP32[$441 >> 2] = $98; //@line 14617
   $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 14618
   HEAP32[$442 >> 2] = $100; //@line 14619
   $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 14620
   HEAP32[$443 >> 2] = $102; //@line 14621
   $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 14622
   HEAP32[$444 >> 2] = $104; //@line 14623
   $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 14624
   HEAP32[$445 >> 2] = $106; //@line 14625
   $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 14626
   HEAP32[$446 >> 2] = $108; //@line 14627
   $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 14628
   HEAP32[$447 >> 2] = $110; //@line 14629
   $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 14630
   HEAP32[$448 >> 2] = $112; //@line 14631
   $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 14632
   HEAP8[$449 >> 0] = $114; //@line 14633
   $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 14634
   HEAP32[$450 >> 2] = $116; //@line 14635
   $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 14636
   HEAP8[$451 >> 0] = $118; //@line 14637
   $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 14638
   HEAP32[$452 >> 2] = $120; //@line 14639
   $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 14640
   HEAP32[$453 >> 2] = $122; //@line 14641
   $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 14642
   HEAP32[$454 >> 2] = $124; //@line 14643
   $455 = $ReallocAsyncCtx3 + 252 | 0; //@line 14644
   HEAP8[$455 >> 0] = $126; //@line 14645
   $456 = $ReallocAsyncCtx3 + 256 | 0; //@line 14646
   HEAP32[$456 >> 2] = $128; //@line 14647
   $457 = $ReallocAsyncCtx3 + 260 | 0; //@line 14648
   HEAP32[$457 >> 2] = $130; //@line 14649
   $458 = $ReallocAsyncCtx3 + 264 | 0; //@line 14650
   HEAP32[$458 >> 2] = $132; //@line 14651
   $459 = $ReallocAsyncCtx3 + 268 | 0; //@line 14652
   HEAP32[$459 >> 2] = $134; //@line 14653
   sp = STACKTOP; //@line 14654
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 14658
  ___async_unwind = 0; //@line 14659
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 14660
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 14661
  HEAP32[$393 >> 2] = $2; //@line 14662
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 14663
  HEAP32[$394 >> 2] = $4; //@line 14664
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 14665
  HEAP32[$395 >> 2] = $6; //@line 14666
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 14667
  HEAP32[$396 >> 2] = $8; //@line 14668
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 14669
  HEAP32[$397 >> 2] = $10; //@line 14670
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 14671
  HEAP32[$398 >> 2] = $12; //@line 14672
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 14673
  HEAP32[$399 >> 2] = $14; //@line 14674
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 14675
  HEAP32[$400 >> 2] = $16; //@line 14676
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 14677
  HEAP32[$401 >> 2] = $18; //@line 14678
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 14679
  HEAP32[$402 >> 2] = $20; //@line 14680
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 14681
  HEAP32[$403 >> 2] = $22; //@line 14682
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 14683
  HEAP32[$404 >> 2] = $24; //@line 14684
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 14685
  HEAP32[$405 >> 2] = $26; //@line 14686
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 14687
  HEAP32[$406 >> 2] = $28; //@line 14688
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 14689
  HEAP32[$407 >> 2] = $30; //@line 14690
  $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 14691
  HEAP32[$408 >> 2] = $32; //@line 14692
  $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 14693
  HEAP32[$409 >> 2] = $34; //@line 14694
  $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 14695
  HEAP32[$410 >> 2] = $36; //@line 14696
  $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 14697
  HEAP32[$411 >> 2] = $38; //@line 14698
  $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 14699
  HEAP32[$412 >> 2] = $40; //@line 14700
  $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 14701
  HEAP32[$413 >> 2] = $42; //@line 14702
  $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 14703
  HEAP32[$414 >> 2] = $44; //@line 14704
  $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 14705
  HEAP32[$415 >> 2] = $46; //@line 14706
  $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 14707
  HEAP32[$416 >> 2] = $48; //@line 14708
  $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 14709
  HEAP32[$417 >> 2] = $50; //@line 14710
  $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 14711
  HEAP8[$418 >> 0] = $385; //@line 14712
  $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 14713
  HEAP32[$419 >> 2] = $54; //@line 14714
  $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 14715
  HEAP32[$420 >> 2] = $56; //@line 14716
  $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 14717
  HEAP32[$421 >> 2] = $58; //@line 14718
  $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 14719
  HEAP32[$422 >> 2] = $60; //@line 14720
  $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 14721
  HEAP32[$423 >> 2] = $62; //@line 14722
  $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 14723
  HEAP32[$424 >> 2] = $64; //@line 14724
  $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 14725
  HEAP32[$425 >> 2] = $66; //@line 14726
  $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 14727
  HEAP32[$426 >> 2] = $68; //@line 14728
  $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 14729
  HEAP32[$427 >> 2] = $70; //@line 14730
  $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 14731
  HEAP32[$428 >> 2] = $72; //@line 14732
  $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 14733
  HEAP32[$429 >> 2] = $74; //@line 14734
  $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 14735
  HEAP32[$430 >> 2] = $76; //@line 14736
  $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 14737
  HEAP32[$431 >> 2] = $78; //@line 14738
  $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 14739
  HEAP32[$432 >> 2] = $80; //@line 14740
  $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 14741
  HEAP32[$433 >> 2] = $82; //@line 14742
  $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 14743
  HEAP32[$434 >> 2] = $84; //@line 14744
  $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 14745
  HEAP32[$435 >> 2] = $86; //@line 14746
  $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 14747
  HEAP32[$436 >> 2] = $88; //@line 14748
  $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 14749
  HEAP32[$437 >> 2] = $90; //@line 14750
  $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 14751
  HEAP32[$438 >> 2] = $92; //@line 14752
  $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 14753
  HEAP32[$439 >> 2] = $94; //@line 14754
  $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 14755
  HEAP32[$440 >> 2] = $96; //@line 14756
  $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 14757
  HEAP32[$441 >> 2] = $98; //@line 14758
  $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 14759
  HEAP32[$442 >> 2] = $100; //@line 14760
  $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 14761
  HEAP32[$443 >> 2] = $102; //@line 14762
  $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 14763
  HEAP32[$444 >> 2] = $104; //@line 14764
  $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 14765
  HEAP32[$445 >> 2] = $106; //@line 14766
  $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 14767
  HEAP32[$446 >> 2] = $108; //@line 14768
  $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 14769
  HEAP32[$447 >> 2] = $110; //@line 14770
  $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 14771
  HEAP32[$448 >> 2] = $112; //@line 14772
  $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 14773
  HEAP8[$449 >> 0] = $114; //@line 14774
  $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 14775
  HEAP32[$450 >> 2] = $116; //@line 14776
  $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 14777
  HEAP8[$451 >> 0] = $118; //@line 14778
  $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 14779
  HEAP32[$452 >> 2] = $120; //@line 14780
  $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 14781
  HEAP32[$453 >> 2] = $122; //@line 14782
  $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 14783
  HEAP32[$454 >> 2] = $124; //@line 14784
  $455 = $ReallocAsyncCtx3 + 252 | 0; //@line 14785
  HEAP8[$455 >> 0] = $126; //@line 14786
  $456 = $ReallocAsyncCtx3 + 256 | 0; //@line 14787
  HEAP32[$456 >> 2] = $128; //@line 14788
  $457 = $ReallocAsyncCtx3 + 260 | 0; //@line 14789
  HEAP32[$457 >> 2] = $130; //@line 14790
  $458 = $ReallocAsyncCtx3 + 264 | 0; //@line 14791
  HEAP32[$458 >> 2] = $132; //@line 14792
  $459 = $ReallocAsyncCtx3 + 268 | 0; //@line 14793
  HEAP32[$459 >> 2] = $134; //@line 14794
  sp = STACKTOP; //@line 14795
  return;
 } else if ((label | 0) == 22) {
  $490 = $$0$be + 2 << 24 >> 24; //@line 14799
  $493 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 14802
  HEAP8[$56 >> 0] = 0; //@line 14803
  $494 = $493 & 255; //@line 14804
  HEAP8[$64 >> 0] = $494 >>> 5 & 1; //@line 14808
  if ($494 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 14812
  }
  HEAP8[$74 >> 0] = $494 & 15; //@line 14816
  $503 = HEAP32[(HEAP32[$82 >> 2] | 0) + 44 >> 2] | 0; //@line 14819
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 14820
  $504 = FUNCTION_TABLE_iii[$503 & 31]($110, $22) | 0; //@line 14821
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 14824
   $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 14825
   HEAP32[$505 >> 2] = $2; //@line 14826
   $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 14827
   HEAP32[$506 >> 2] = $4; //@line 14828
   $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 14829
   HEAP32[$507 >> 2] = $6; //@line 14830
   $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 14831
   HEAP32[$508 >> 2] = $8; //@line 14832
   $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 14833
   HEAP32[$509 >> 2] = $10; //@line 14834
   $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 14835
   HEAP32[$510 >> 2] = $12; //@line 14836
   $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 14837
   HEAP32[$511 >> 2] = $14; //@line 14838
   $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 14839
   HEAP32[$512 >> 2] = $16; //@line 14840
   $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 14841
   HEAP32[$513 >> 2] = $18; //@line 14842
   $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 14843
   HEAP32[$514 >> 2] = $20; //@line 14844
   $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 14845
   HEAP32[$515 >> 2] = $22; //@line 14846
   $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 14847
   HEAP32[$516 >> 2] = $24; //@line 14848
   $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 14849
   HEAP32[$517 >> 2] = $26; //@line 14850
   $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 14851
   HEAP32[$518 >> 2] = $28; //@line 14852
   $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 14853
   HEAP32[$519 >> 2] = $30; //@line 14854
   $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 14855
   HEAP32[$520 >> 2] = $32; //@line 14856
   $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 14857
   HEAP32[$521 >> 2] = $34; //@line 14858
   $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 14859
   HEAP32[$522 >> 2] = $36; //@line 14860
   $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 14861
   HEAP32[$523 >> 2] = $38; //@line 14862
   $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 14863
   HEAP32[$524 >> 2] = $40; //@line 14864
   $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 14865
   HEAP32[$525 >> 2] = $42; //@line 14866
   $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 14867
   HEAP32[$526 >> 2] = $44; //@line 14868
   $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 14869
   HEAP32[$527 >> 2] = $46; //@line 14870
   $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 14871
   HEAP32[$528 >> 2] = $48; //@line 14872
   $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 14873
   HEAP32[$529 >> 2] = $50; //@line 14874
   $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 14875
   HEAP32[$530 >> 2] = $54; //@line 14876
   $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 14877
   HEAP8[$531 >> 0] = $490; //@line 14878
   $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 14879
   HEAP32[$532 >> 2] = $56; //@line 14880
   $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 14881
   HEAP32[$533 >> 2] = $58; //@line 14882
   $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 14883
   HEAP32[$534 >> 2] = $62; //@line 14884
   $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 14885
   HEAP32[$535 >> 2] = $60; //@line 14886
   $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 14887
   HEAP32[$536 >> 2] = $64; //@line 14888
   $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 14889
   HEAP32[$537 >> 2] = $66; //@line 14890
   $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 14891
   HEAP32[$538 >> 2] = $68; //@line 14892
   $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 14893
   HEAP32[$539 >> 2] = $70; //@line 14894
   $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 14895
   HEAP32[$540 >> 2] = $72; //@line 14896
   $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 14897
   HEAP32[$541 >> 2] = $74; //@line 14898
   $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 14899
   HEAP32[$542 >> 2] = $76; //@line 14900
   $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 14901
   HEAP32[$543 >> 2] = $78; //@line 14902
   $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 14903
   HEAP32[$544 >> 2] = $80; //@line 14904
   $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 14905
   HEAP32[$545 >> 2] = $82; //@line 14906
   $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 14907
   HEAP32[$546 >> 2] = $84; //@line 14908
   $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 14909
   HEAP32[$547 >> 2] = $86; //@line 14910
   $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 14911
   HEAP32[$548 >> 2] = $88; //@line 14912
   $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 14913
   HEAP32[$549 >> 2] = $90; //@line 14914
   $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 14915
   HEAP32[$550 >> 2] = $92; //@line 14916
   $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 14917
   HEAP32[$551 >> 2] = $94; //@line 14918
   $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 14919
   HEAP32[$552 >> 2] = $96; //@line 14920
   $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 14921
   HEAP32[$553 >> 2] = $98; //@line 14922
   $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 14923
   HEAP32[$554 >> 2] = $100; //@line 14924
   $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 14925
   HEAP32[$555 >> 2] = $102; //@line 14926
   $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 14927
   HEAP32[$556 >> 2] = $104; //@line 14928
   $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 14929
   HEAP32[$557 >> 2] = $106; //@line 14930
   $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 14931
   HEAP32[$558 >> 2] = $108; //@line 14932
   $559 = $ReallocAsyncCtx4 + 220 | 0; //@line 14933
   HEAP32[$559 >> 2] = $110; //@line 14934
   $560 = $ReallocAsyncCtx4 + 224 | 0; //@line 14935
   HEAP32[$560 >> 2] = $112; //@line 14936
   $561 = $ReallocAsyncCtx4 + 228 | 0; //@line 14937
   HEAP8[$561 >> 0] = $114; //@line 14938
   $562 = $ReallocAsyncCtx4 + 232 | 0; //@line 14939
   HEAP32[$562 >> 2] = $116; //@line 14940
   $563 = $ReallocAsyncCtx4 + 236 | 0; //@line 14941
   HEAP8[$563 >> 0] = $118; //@line 14942
   $564 = $ReallocAsyncCtx4 + 240 | 0; //@line 14943
   HEAP32[$564 >> 2] = $120; //@line 14944
   $565 = $ReallocAsyncCtx4 + 244 | 0; //@line 14945
   HEAP32[$565 >> 2] = $122; //@line 14946
   $566 = $ReallocAsyncCtx4 + 248 | 0; //@line 14947
   HEAP32[$566 >> 2] = $124; //@line 14948
   $567 = $ReallocAsyncCtx4 + 252 | 0; //@line 14949
   HEAP8[$567 >> 0] = $126; //@line 14950
   $568 = $ReallocAsyncCtx4 + 256 | 0; //@line 14951
   HEAP32[$568 >> 2] = $128; //@line 14952
   $569 = $ReallocAsyncCtx4 + 260 | 0; //@line 14953
   HEAP32[$569 >> 2] = $130; //@line 14954
   $570 = $ReallocAsyncCtx4 + 264 | 0; //@line 14955
   HEAP32[$570 >> 2] = $$096$be; //@line 14956
   $571 = $ReallocAsyncCtx4 + 268 | 0; //@line 14957
   HEAP32[$571 >> 2] = $132; //@line 14958
   $572 = $ReallocAsyncCtx4 + 272 | 0; //@line 14959
   HEAP32[$572 >> 2] = $134; //@line 14960
   sp = STACKTOP; //@line 14961
   return;
  }
  HEAP8[___async_retval >> 0] = $504 & 1; //@line 14966
  ___async_unwind = 0; //@line 14967
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 14968
  $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 14969
  HEAP32[$505 >> 2] = $2; //@line 14970
  $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 14971
  HEAP32[$506 >> 2] = $4; //@line 14972
  $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 14973
  HEAP32[$507 >> 2] = $6; //@line 14974
  $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 14975
  HEAP32[$508 >> 2] = $8; //@line 14976
  $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 14977
  HEAP32[$509 >> 2] = $10; //@line 14978
  $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 14979
  HEAP32[$510 >> 2] = $12; //@line 14980
  $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 14981
  HEAP32[$511 >> 2] = $14; //@line 14982
  $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 14983
  HEAP32[$512 >> 2] = $16; //@line 14984
  $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 14985
  HEAP32[$513 >> 2] = $18; //@line 14986
  $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 14987
  HEAP32[$514 >> 2] = $20; //@line 14988
  $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 14989
  HEAP32[$515 >> 2] = $22; //@line 14990
  $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 14991
  HEAP32[$516 >> 2] = $24; //@line 14992
  $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 14993
  HEAP32[$517 >> 2] = $26; //@line 14994
  $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 14995
  HEAP32[$518 >> 2] = $28; //@line 14996
  $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 14997
  HEAP32[$519 >> 2] = $30; //@line 14998
  $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 14999
  HEAP32[$520 >> 2] = $32; //@line 15000
  $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 15001
  HEAP32[$521 >> 2] = $34; //@line 15002
  $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 15003
  HEAP32[$522 >> 2] = $36; //@line 15004
  $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 15005
  HEAP32[$523 >> 2] = $38; //@line 15006
  $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 15007
  HEAP32[$524 >> 2] = $40; //@line 15008
  $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 15009
  HEAP32[$525 >> 2] = $42; //@line 15010
  $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 15011
  HEAP32[$526 >> 2] = $44; //@line 15012
  $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 15013
  HEAP32[$527 >> 2] = $46; //@line 15014
  $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 15015
  HEAP32[$528 >> 2] = $48; //@line 15016
  $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 15017
  HEAP32[$529 >> 2] = $50; //@line 15018
  $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 15019
  HEAP32[$530 >> 2] = $54; //@line 15020
  $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 15021
  HEAP8[$531 >> 0] = $490; //@line 15022
  $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 15023
  HEAP32[$532 >> 2] = $56; //@line 15024
  $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 15025
  HEAP32[$533 >> 2] = $58; //@line 15026
  $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 15027
  HEAP32[$534 >> 2] = $62; //@line 15028
  $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 15029
  HEAP32[$535 >> 2] = $60; //@line 15030
  $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 15031
  HEAP32[$536 >> 2] = $64; //@line 15032
  $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 15033
  HEAP32[$537 >> 2] = $66; //@line 15034
  $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 15035
  HEAP32[$538 >> 2] = $68; //@line 15036
  $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 15037
  HEAP32[$539 >> 2] = $70; //@line 15038
  $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 15039
  HEAP32[$540 >> 2] = $72; //@line 15040
  $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 15041
  HEAP32[$541 >> 2] = $74; //@line 15042
  $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 15043
  HEAP32[$542 >> 2] = $76; //@line 15044
  $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 15045
  HEAP32[$543 >> 2] = $78; //@line 15046
  $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 15047
  HEAP32[$544 >> 2] = $80; //@line 15048
  $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 15049
  HEAP32[$545 >> 2] = $82; //@line 15050
  $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 15051
  HEAP32[$546 >> 2] = $84; //@line 15052
  $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 15053
  HEAP32[$547 >> 2] = $86; //@line 15054
  $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 15055
  HEAP32[$548 >> 2] = $88; //@line 15056
  $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 15057
  HEAP32[$549 >> 2] = $90; //@line 15058
  $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 15059
  HEAP32[$550 >> 2] = $92; //@line 15060
  $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 15061
  HEAP32[$551 >> 2] = $94; //@line 15062
  $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 15063
  HEAP32[$552 >> 2] = $96; //@line 15064
  $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 15065
  HEAP32[$553 >> 2] = $98; //@line 15066
  $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 15067
  HEAP32[$554 >> 2] = $100; //@line 15068
  $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 15069
  HEAP32[$555 >> 2] = $102; //@line 15070
  $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 15071
  HEAP32[$556 >> 2] = $104; //@line 15072
  $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 15073
  HEAP32[$557 >> 2] = $106; //@line 15074
  $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 15075
  HEAP32[$558 >> 2] = $108; //@line 15076
  $559 = $ReallocAsyncCtx4 + 220 | 0; //@line 15077
  HEAP32[$559 >> 2] = $110; //@line 15078
  $560 = $ReallocAsyncCtx4 + 224 | 0; //@line 15079
  HEAP32[$560 >> 2] = $112; //@line 15080
  $561 = $ReallocAsyncCtx4 + 228 | 0; //@line 15081
  HEAP8[$561 >> 0] = $114; //@line 15082
  $562 = $ReallocAsyncCtx4 + 232 | 0; //@line 15083
  HEAP32[$562 >> 2] = $116; //@line 15084
  $563 = $ReallocAsyncCtx4 + 236 | 0; //@line 15085
  HEAP8[$563 >> 0] = $118; //@line 15086
  $564 = $ReallocAsyncCtx4 + 240 | 0; //@line 15087
  HEAP32[$564 >> 2] = $120; //@line 15088
  $565 = $ReallocAsyncCtx4 + 244 | 0; //@line 15089
  HEAP32[$565 >> 2] = $122; //@line 15090
  $566 = $ReallocAsyncCtx4 + 248 | 0; //@line 15091
  HEAP32[$566 >> 2] = $124; //@line 15092
  $567 = $ReallocAsyncCtx4 + 252 | 0; //@line 15093
  HEAP8[$567 >> 0] = $126; //@line 15094
  $568 = $ReallocAsyncCtx4 + 256 | 0; //@line 15095
  HEAP32[$568 >> 2] = $128; //@line 15096
  $569 = $ReallocAsyncCtx4 + 260 | 0; //@line 15097
  HEAP32[$569 >> 2] = $130; //@line 15098
  $570 = $ReallocAsyncCtx4 + 264 | 0; //@line 15099
  HEAP32[$570 >> 2] = $$096$be; //@line 15100
  $571 = $ReallocAsyncCtx4 + 268 | 0; //@line 15101
  HEAP32[$571 >> 2] = $132; //@line 15102
  $572 = $ReallocAsyncCtx4 + 272 | 0; //@line 15103
  HEAP32[$572 >> 2] = $134; //@line 15104
  sp = STACKTOP; //@line 15105
  return;
 } else if ((label | 0) == 27) {
  HEAP8[$102 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 15113
  $590 = $$0$be + 5 << 24 >> 24; //@line 15126
  HEAP32[$108 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 15134
  $600 = HEAP32[(HEAP32[$120 >> 2] | 0) + 48 >> 2] | 0; //@line 15137
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 15138
  $601 = FUNCTION_TABLE_iii[$600 & 31]($110, $12) | 0; //@line 15139
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 15142
   $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 15143
   HEAP32[$602 >> 2] = $2; //@line 15144
   $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 15145
   HEAP32[$603 >> 2] = $4; //@line 15146
   $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 15147
   HEAP32[$604 >> 2] = $6; //@line 15148
   $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 15149
   HEAP32[$605 >> 2] = $8; //@line 15150
   $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 15151
   HEAP32[$606 >> 2] = $10; //@line 15152
   $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 15153
   HEAP32[$607 >> 2] = $12; //@line 15154
   $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 15155
   HEAP32[$608 >> 2] = $14; //@line 15156
   $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 15157
   HEAP32[$609 >> 2] = $16; //@line 15158
   $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 15159
   HEAP8[$610 >> 0] = $590; //@line 15160
   $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 15161
   HEAP32[$611 >> 2] = $20; //@line 15162
   $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 15163
   HEAP32[$612 >> 2] = $18; //@line 15164
   $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 15165
   HEAP32[$613 >> 2] = $24; //@line 15166
   $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 15167
   HEAP32[$614 >> 2] = $22; //@line 15168
   $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 15169
   HEAP32[$615 >> 2] = $28; //@line 15170
   $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 15171
   HEAP32[$616 >> 2] = $26; //@line 15172
   $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 15173
   HEAP32[$617 >> 2] = $30; //@line 15174
   $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 15175
   HEAP32[$618 >> 2] = $32; //@line 15176
   $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 15177
   HEAP32[$619 >> 2] = $34; //@line 15178
   $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 15179
   HEAP32[$620 >> 2] = $36; //@line 15180
   $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 15181
   HEAP32[$621 >> 2] = $38; //@line 15182
   $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 15183
   HEAP32[$622 >> 2] = $40; //@line 15184
   $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 15185
   HEAP32[$623 >> 2] = $42; //@line 15186
   $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 15187
   HEAP32[$624 >> 2] = $44; //@line 15188
   $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 15189
   HEAP32[$625 >> 2] = $46; //@line 15190
   $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 15191
   HEAP32[$626 >> 2] = $48; //@line 15192
   $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 15193
   HEAP32[$627 >> 2] = $50; //@line 15194
   $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 15195
   HEAP32[$628 >> 2] = $54; //@line 15196
   $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 15197
   HEAP32[$629 >> 2] = $56; //@line 15198
   $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 15199
   HEAP32[$630 >> 2] = $58; //@line 15200
   $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 15201
   HEAP32[$631 >> 2] = $60; //@line 15202
   $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 15203
   HEAP32[$632 >> 2] = $62; //@line 15204
   $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 15205
   HEAP32[$633 >> 2] = $64; //@line 15206
   $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 15207
   HEAP32[$634 >> 2] = $66; //@line 15208
   $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 15209
   HEAP32[$635 >> 2] = $68; //@line 15210
   $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 15211
   HEAP32[$636 >> 2] = $70; //@line 15212
   $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 15213
   HEAP32[$637 >> 2] = $72; //@line 15214
   $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 15215
   HEAP32[$638 >> 2] = $74; //@line 15216
   $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 15217
   HEAP32[$639 >> 2] = $76; //@line 15218
   $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 15219
   HEAP32[$640 >> 2] = $78; //@line 15220
   $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 15221
   HEAP32[$641 >> 2] = $80; //@line 15222
   $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 15223
   HEAP32[$642 >> 2] = $82; //@line 15224
   $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 15225
   HEAP32[$643 >> 2] = $84; //@line 15226
   $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 15227
   HEAP32[$644 >> 2] = $86; //@line 15228
   $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 15229
   HEAP32[$645 >> 2] = $88; //@line 15230
   $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 15231
   HEAP32[$646 >> 2] = $90; //@line 15232
   $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 15233
   HEAP32[$647 >> 2] = $92; //@line 15234
   $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 15235
   HEAP32[$648 >> 2] = $94; //@line 15236
   $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 15237
   HEAP32[$649 >> 2] = $96; //@line 15238
   $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 15239
   HEAP32[$650 >> 2] = $98; //@line 15240
   $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 15241
   HEAP32[$651 >> 2] = $100; //@line 15242
   $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 15243
   HEAP32[$652 >> 2] = $102; //@line 15244
   $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 15245
   HEAP32[$653 >> 2] = $104; //@line 15246
   $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 15247
   HEAP32[$654 >> 2] = $106; //@line 15248
   $655 = $ReallocAsyncCtx5 + 216 | 0; //@line 15249
   HEAP32[$655 >> 2] = $108; //@line 15250
   $656 = $ReallocAsyncCtx5 + 220 | 0; //@line 15251
   HEAP32[$656 >> 2] = $110; //@line 15252
   $657 = $ReallocAsyncCtx5 + 224 | 0; //@line 15253
   HEAP32[$657 >> 2] = $112; //@line 15254
   $658 = $ReallocAsyncCtx5 + 228 | 0; //@line 15255
   HEAP8[$658 >> 0] = $114; //@line 15256
   $659 = $ReallocAsyncCtx5 + 232 | 0; //@line 15257
   HEAP32[$659 >> 2] = $116; //@line 15258
   $660 = $ReallocAsyncCtx5 + 236 | 0; //@line 15259
   HEAP8[$660 >> 0] = $118; //@line 15260
   $661 = $ReallocAsyncCtx5 + 240 | 0; //@line 15261
   HEAP32[$661 >> 2] = $120; //@line 15262
   $662 = $ReallocAsyncCtx5 + 244 | 0; //@line 15263
   HEAP32[$662 >> 2] = $122; //@line 15264
   $663 = $ReallocAsyncCtx5 + 248 | 0; //@line 15265
   HEAP32[$663 >> 2] = $124; //@line 15266
   $664 = $ReallocAsyncCtx5 + 252 | 0; //@line 15267
   HEAP8[$664 >> 0] = $126; //@line 15268
   $665 = $ReallocAsyncCtx5 + 256 | 0; //@line 15269
   HEAP32[$665 >> 2] = $128; //@line 15270
   $666 = $ReallocAsyncCtx5 + 260 | 0; //@line 15271
   HEAP32[$666 >> 2] = $130; //@line 15272
   $667 = $ReallocAsyncCtx5 + 264 | 0; //@line 15273
   HEAP32[$667 >> 2] = $132; //@line 15274
   $668 = $ReallocAsyncCtx5 + 268 | 0; //@line 15275
   HEAP32[$668 >> 2] = $134; //@line 15276
   sp = STACKTOP; //@line 15277
   return;
  }
  HEAP8[___async_retval >> 0] = $601; //@line 15281
  ___async_unwind = 0; //@line 15282
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 15283
  $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 15284
  HEAP32[$602 >> 2] = $2; //@line 15285
  $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 15286
  HEAP32[$603 >> 2] = $4; //@line 15287
  $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 15288
  HEAP32[$604 >> 2] = $6; //@line 15289
  $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 15290
  HEAP32[$605 >> 2] = $8; //@line 15291
  $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 15292
  HEAP32[$606 >> 2] = $10; //@line 15293
  $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 15294
  HEAP32[$607 >> 2] = $12; //@line 15295
  $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 15296
  HEAP32[$608 >> 2] = $14; //@line 15297
  $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 15298
  HEAP32[$609 >> 2] = $16; //@line 15299
  $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 15300
  HEAP8[$610 >> 0] = $590; //@line 15301
  $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 15302
  HEAP32[$611 >> 2] = $20; //@line 15303
  $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 15304
  HEAP32[$612 >> 2] = $18; //@line 15305
  $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 15306
  HEAP32[$613 >> 2] = $24; //@line 15307
  $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 15308
  HEAP32[$614 >> 2] = $22; //@line 15309
  $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 15310
  HEAP32[$615 >> 2] = $28; //@line 15311
  $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 15312
  HEAP32[$616 >> 2] = $26; //@line 15313
  $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 15314
  HEAP32[$617 >> 2] = $30; //@line 15315
  $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 15316
  HEAP32[$618 >> 2] = $32; //@line 15317
  $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 15318
  HEAP32[$619 >> 2] = $34; //@line 15319
  $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 15320
  HEAP32[$620 >> 2] = $36; //@line 15321
  $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 15322
  HEAP32[$621 >> 2] = $38; //@line 15323
  $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 15324
  HEAP32[$622 >> 2] = $40; //@line 15325
  $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 15326
  HEAP32[$623 >> 2] = $42; //@line 15327
  $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 15328
  HEAP32[$624 >> 2] = $44; //@line 15329
  $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 15330
  HEAP32[$625 >> 2] = $46; //@line 15331
  $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 15332
  HEAP32[$626 >> 2] = $48; //@line 15333
  $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 15334
  HEAP32[$627 >> 2] = $50; //@line 15335
  $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 15336
  HEAP32[$628 >> 2] = $54; //@line 15337
  $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 15338
  HEAP32[$629 >> 2] = $56; //@line 15339
  $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 15340
  HEAP32[$630 >> 2] = $58; //@line 15341
  $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 15342
  HEAP32[$631 >> 2] = $60; //@line 15343
  $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 15344
  HEAP32[$632 >> 2] = $62; //@line 15345
  $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 15346
  HEAP32[$633 >> 2] = $64; //@line 15347
  $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 15348
  HEAP32[$634 >> 2] = $66; //@line 15349
  $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 15350
  HEAP32[$635 >> 2] = $68; //@line 15351
  $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 15352
  HEAP32[$636 >> 2] = $70; //@line 15353
  $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 15354
  HEAP32[$637 >> 2] = $72; //@line 15355
  $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 15356
  HEAP32[$638 >> 2] = $74; //@line 15357
  $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 15358
  HEAP32[$639 >> 2] = $76; //@line 15359
  $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 15360
  HEAP32[$640 >> 2] = $78; //@line 15361
  $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 15362
  HEAP32[$641 >> 2] = $80; //@line 15363
  $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 15364
  HEAP32[$642 >> 2] = $82; //@line 15365
  $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 15366
  HEAP32[$643 >> 2] = $84; //@line 15367
  $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 15368
  HEAP32[$644 >> 2] = $86; //@line 15369
  $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 15370
  HEAP32[$645 >> 2] = $88; //@line 15371
  $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 15372
  HEAP32[$646 >> 2] = $90; //@line 15373
  $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 15374
  HEAP32[$647 >> 2] = $92; //@line 15375
  $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 15376
  HEAP32[$648 >> 2] = $94; //@line 15377
  $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 15378
  HEAP32[$649 >> 2] = $96; //@line 15379
  $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 15380
  HEAP32[$650 >> 2] = $98; //@line 15381
  $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 15382
  HEAP32[$651 >> 2] = $100; //@line 15383
  $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 15384
  HEAP32[$652 >> 2] = $102; //@line 15385
  $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 15386
  HEAP32[$653 >> 2] = $104; //@line 15387
  $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 15388
  HEAP32[$654 >> 2] = $106; //@line 15389
  $655 = $ReallocAsyncCtx5 + 216 | 0; //@line 15390
  HEAP32[$655 >> 2] = $108; //@line 15391
  $656 = $ReallocAsyncCtx5 + 220 | 0; //@line 15392
  HEAP32[$656 >> 2] = $110; //@line 15393
  $657 = $ReallocAsyncCtx5 + 224 | 0; //@line 15394
  HEAP32[$657 >> 2] = $112; //@line 15395
  $658 = $ReallocAsyncCtx5 + 228 | 0; //@line 15396
  HEAP8[$658 >> 0] = $114; //@line 15397
  $659 = $ReallocAsyncCtx5 + 232 | 0; //@line 15398
  HEAP32[$659 >> 2] = $116; //@line 15399
  $660 = $ReallocAsyncCtx5 + 236 | 0; //@line 15400
  HEAP8[$660 >> 0] = $118; //@line 15401
  $661 = $ReallocAsyncCtx5 + 240 | 0; //@line 15402
  HEAP32[$661 >> 2] = $120; //@line 15403
  $662 = $ReallocAsyncCtx5 + 244 | 0; //@line 15404
  HEAP32[$662 >> 2] = $122; //@line 15405
  $663 = $ReallocAsyncCtx5 + 248 | 0; //@line 15406
  HEAP32[$663 >> 2] = $124; //@line 15407
  $664 = $ReallocAsyncCtx5 + 252 | 0; //@line 15408
  HEAP8[$664 >> 0] = $126; //@line 15409
  $665 = $ReallocAsyncCtx5 + 256 | 0; //@line 15410
  HEAP32[$665 >> 2] = $128; //@line 15411
  $666 = $ReallocAsyncCtx5 + 260 | 0; //@line 15412
  HEAP32[$666 >> 2] = $130; //@line 15413
  $667 = $ReallocAsyncCtx5 + 264 | 0; //@line 15414
  HEAP32[$667 >> 2] = $132; //@line 15415
  $668 = $ReallocAsyncCtx5 + 268 | 0; //@line 15416
  HEAP32[$668 >> 2] = $134; //@line 15417
  sp = STACKTOP; //@line 15418
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 15423
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_390($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i98 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $465 = 0, $469 = 0, $472 = 0, $478 = 0, $48 = 0, $481 = 0, $482 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $578 = 0, $58 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $659 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17399
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17401
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17403
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17405
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17407
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17409
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17411
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17413
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17415
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 17417
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17419
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17421
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17423
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17425
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17427
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17429
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17431
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17433
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17435
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17437
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17439
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 17441
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 17443
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 17445
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 17447
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 17449
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 17451
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 17453
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 17455
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 17457
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 17459
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 17461
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 17463
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 17465
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 17467
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 17469
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 17471
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 17473
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 17475
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 17477
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 17479
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 17481
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 17483
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 17485
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 17487
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 17489
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 17491
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 17493
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 17495
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 17497
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 17499
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 17501
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 17503
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 17505
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 17507
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 17509
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 17511
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 17513
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 17515
 $118 = HEAP8[$0 + 236 >> 0] | 0; //@line 17517
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 17519
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 17521
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 17523
 $126 = HEAP8[$0 + 252 >> 0] | 0; //@line 17525
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 17527
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 17529
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 17531
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 17533
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 17535
 $659 = HEAP8[$20 >> 0] | 0; //@line 17537
 if (($659 & 255) < (-128 - (HEAP8[$32 >> 0] | 0) & 255)) {
  HEAP8[($659 & 255) + ($94 + 4) >> 0] = 10; //@line 17544
  HEAP8[$20 >> 0] = $659 + 2 << 24 >> 24; //@line 17546
  HEAP8[($659 + 1 & 255) + ($94 + 4) >> 0] = $AsyncRetVal; //@line 17549
  HEAP8[$92 >> 0] = 1; //@line 17550
  HEAP8[$10 >> 0] = 1; //@line 17551
  $$0$i98 = 0; //@line 17552
 } else {
  $$0$i98 = -1e3; //@line 17554
 }
 $$0$be = $18; //@line 17556
 $$096$be = $$0$i98; //@line 17556
 L5 : while (1) {
  if (($$0$be & 255) >= ($118 & 255)) {
   label = 31; //@line 17560
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 17564
  switch (HEAP8[$124 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 17569
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 17574
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 17579
    break L5;
    break;
   }
  case 9:
   {
    label = 19; //@line 17584
    break L5;
    break;
   }
  case 10:
   {
    label = 24; //@line 17589
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$58 >> 2] = 0; //@line 17594
    HEAP8[$44 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 17599
    HEAP8[$34 >> 0] = HEAP8[$124 + ($$0$be + 2 & 255) >> 0] | 0; //@line 17604
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 17605
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 17610
    $234 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 17613
    HEAP8[$2 >> 0] = $234; //@line 17614
    HEAP16[$14 >> 1] = 1 << ($234 & 255); //@line 17618
    $239 = HEAP8[$20 >> 0] | 0; //@line 17620
    if (($239 & 255) >= (-128 - (HEAP8[$32 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 17624
     $$096$be = -1e3; //@line 17624
     continue L5;
    }
    HEAP8[$20 >> 0] = $239 + 1 << 24 >> 24; //@line 17630
    HEAP8[($239 & 255) + ($94 + 4) >> 0] = 4; //@line 17631
    HEAP8[$10 >> 0] = 1; //@line 17632
    $$0$be = $231; //@line 17633
    $$096$be = 0; //@line 17633
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$20 >> 0] | 0; //@line 17639
    $348 = $347 & 255; //@line 17640
    if (((-128 - (HEAP8[$32 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 17646
     $$096$be = -1e3; //@line 17646
     continue L5;
    }
    HEAP8[$94 + 4 + $348 >> 0] = 6; //@line 17651
    HEAP8[($347 + 1 & 255) + ($94 + 4) >> 0] = -1; //@line 17655
    HEAP8[$20 >> 0] = $347 + 3 << 24 >> 24; //@line 17657
    HEAP8[($347 + 2 & 255) + ($94 + 4) >> 0] = $114; //@line 17660
    HEAP8[$10 >> 0] = 1; //@line 17661
    $$0$be = $137; //@line 17662
    $$096$be = 0; //@line 17662
    continue L5;
    break;
   }
  case 8:
   {
    $461 = $$0$be + 2 << 24 >> 24; //@line 17667
    $465 = HEAP8[$124 + ($137 & 255) >> 0] & 15; //@line 17671
    $469 = ($465 + ($465 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 17676
    HEAP32[$38 >> 2] = $469; //@line 17677
    HEAP32[$50 >> 2] = $469 + 1e3; //@line 17679
    $472 = HEAP8[$20 >> 0] | 0; //@line 17681
    if (($472 & 255) >= (-128 - (HEAP8[$32 >> 0] | 0) & 255)) {
     $$0$be = $461; //@line 17685
     $$096$be = -1e3; //@line 17685
     continue L5;
    }
    HEAP8[$20 >> 0] = $472 + 1 << 24 >> 24; //@line 17691
    HEAP8[($472 & 255) + ($94 + 4) >> 0] = 8; //@line 17692
    HEAP8[$92 >> 0] = 1; //@line 17693
    HEAP8[$10 >> 0] = 1; //@line 17694
    $$0$be = $461; //@line 17695
    $$096$be = 0; //@line 17695
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 17700
    $$096$be = -1013; //@line 17700
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$134 >> 0] = 0; //@line 17706
  HEAP8[$68 >> 0] = 0; //@line 17707
  HEAP8[$72 >> 0] = 0; //@line 17708
  HEAP8[$42 >> 0] = 0; //@line 17709
  $148 = $137 & 255; //@line 17710
  $149 = $148 + -1 | 0; //@line 17711
  HEAP32[$16 >> 2] = $124 + $149; //@line 17713
  HEAP8[$6 >> 0] = $80 - $149; //@line 17716
  HEAP8[$122 >> 0] = HEAP8[$132 >> 0] | 0; //@line 17718
  HEAP8[$104 >> 0] = HEAP8[$112 >> 0] | 0; //@line 17720
  HEAP8[$86 >> 0] = HEAP8[$98 >> 0] | 0; //@line 17722
  HEAP8[$70 >> 0] = HEAP8[$76 >> 0] | 0; //@line 17724
  HEAP8[$48 >> 0] = HEAP8[$62 >> 0] | 0; //@line 17726
  $160 = HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] | 0; //@line 17729
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 17730
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($110, $84, $134, $68, $72, $42) | 0; //@line 17731
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 17734
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 17735
   HEAP32[$162 >> 2] = $2; //@line 17736
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 17737
   HEAP32[$163 >> 2] = $4; //@line 17738
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 17739
   HEAP32[$164 >> 2] = $6; //@line 17740
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 17741
   HEAP32[$165 >> 2] = $8; //@line 17742
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 17743
   HEAP32[$166 >> 2] = $10; //@line 17744
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 17745
   HEAP32[$167 >> 2] = $12; //@line 17746
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 17747
   HEAP32[$168 >> 2] = $14; //@line 17748
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 17749
   HEAP32[$169 >> 2] = $16; //@line 17750
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 17751
   HEAP32[$170 >> 2] = $22; //@line 17752
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 17753
   HEAP32[$171 >> 2] = $20; //@line 17754
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 17755
   HEAP32[$172 >> 2] = $26; //@line 17756
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 17757
   HEAP32[$173 >> 2] = $24; //@line 17758
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 17759
   HEAP32[$174 >> 2] = $30; //@line 17760
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 17761
   HEAP32[$175 >> 2] = $28; //@line 17762
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 17763
   HEAP32[$176 >> 2] = $32; //@line 17764
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 17765
   HEAP32[$177 >> 2] = $34; //@line 17766
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 17767
   HEAP32[$178 >> 2] = $36; //@line 17768
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 17769
   HEAP32[$179 >> 2] = $38; //@line 17770
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 17771
   HEAP32[$180 >> 2] = $40; //@line 17772
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 17773
   HEAP32[$181 >> 2] = $42; //@line 17774
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 17775
   HEAP32[$182 >> 2] = $44; //@line 17776
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 17777
   HEAP32[$183 >> 2] = $46; //@line 17778
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 17779
   HEAP32[$184 >> 2] = $48; //@line 17780
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 17781
   HEAP32[$185 >> 2] = $148; //@line 17782
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 17783
   HEAP32[$186 >> 2] = $52; //@line 17784
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 17785
   HEAP32[$187 >> 2] = $54; //@line 17786
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 17787
   HEAP32[$188 >> 2] = $50; //@line 17788
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 17789
   HEAP32[$189 >> 2] = $56; //@line 17790
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 17791
   HEAP32[$190 >> 2] = $58; //@line 17792
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 17793
   HEAP32[$191 >> 2] = $60; //@line 17794
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 17795
   HEAP32[$192 >> 2] = $62; //@line 17796
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 17797
   HEAP32[$193 >> 2] = $64; //@line 17798
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 17799
   HEAP32[$194 >> 2] = $66; //@line 17800
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 17801
   HEAP32[$195 >> 2] = $68; //@line 17802
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 17803
   HEAP32[$196 >> 2] = $70; //@line 17804
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 17805
   HEAP32[$197 >> 2] = $72; //@line 17806
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 17807
   HEAP32[$198 >> 2] = $74; //@line 17808
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 17809
   HEAP32[$199 >> 2] = $76; //@line 17810
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 17811
   HEAP32[$200 >> 2] = $78; //@line 17812
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 17813
   HEAP32[$201 >> 2] = $80; //@line 17814
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 17815
   HEAP32[$202 >> 2] = $82; //@line 17816
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 17817
   HEAP32[$203 >> 2] = $84; //@line 17818
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 17819
   HEAP32[$204 >> 2] = $86; //@line 17820
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 17821
   HEAP32[$205 >> 2] = $88; //@line 17822
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 17823
   HEAP32[$206 >> 2] = $90; //@line 17824
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 17825
   HEAP32[$207 >> 2] = $92; //@line 17826
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 17827
   HEAP32[$208 >> 2] = $94; //@line 17828
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 17829
   HEAP32[$209 >> 2] = $96; //@line 17830
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 17831
   HEAP32[$210 >> 2] = $98; //@line 17832
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 17833
   HEAP32[$211 >> 2] = $100; //@line 17834
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 17835
   HEAP32[$212 >> 2] = $102; //@line 17836
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 17837
   HEAP32[$213 >> 2] = $104; //@line 17838
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 17839
   HEAP32[$214 >> 2] = $106; //@line 17840
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 17841
   HEAP32[$215 >> 2] = $108; //@line 17842
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 17843
   HEAP32[$216 >> 2] = $110; //@line 17844
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 17845
   HEAP32[$217 >> 2] = $112; //@line 17846
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 17847
   HEAP8[$218 >> 0] = $114; //@line 17848
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 17849
   HEAP32[$219 >> 2] = $116; //@line 17850
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 17851
   HEAP8[$220 >> 0] = $118; //@line 17852
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 17853
   HEAP32[$221 >> 2] = $120; //@line 17854
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 17855
   HEAP32[$222 >> 2] = $122; //@line 17856
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 17857
   HEAP32[$223 >> 2] = $124; //@line 17858
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 17859
   HEAP8[$224 >> 0] = $126; //@line 17860
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 17861
   HEAP32[$225 >> 2] = $128; //@line 17862
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 17863
   HEAP32[$226 >> 2] = $130; //@line 17864
   $227 = $ReallocAsyncCtx + 264 | 0; //@line 17865
   HEAP32[$227 >> 2] = $$096$be; //@line 17866
   $228 = $ReallocAsyncCtx + 268 | 0; //@line 17867
   HEAP32[$228 >> 2] = $132; //@line 17868
   $229 = $ReallocAsyncCtx + 272 | 0; //@line 17869
   HEAP32[$229 >> 2] = $134; //@line 17870
   sp = STACKTOP; //@line 17871
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 17875
  ___async_unwind = 0; //@line 17876
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 17877
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 17878
  HEAP32[$162 >> 2] = $2; //@line 17879
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 17880
  HEAP32[$163 >> 2] = $4; //@line 17881
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 17882
  HEAP32[$164 >> 2] = $6; //@line 17883
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 17884
  HEAP32[$165 >> 2] = $8; //@line 17885
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 17886
  HEAP32[$166 >> 2] = $10; //@line 17887
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 17888
  HEAP32[$167 >> 2] = $12; //@line 17889
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 17890
  HEAP32[$168 >> 2] = $14; //@line 17891
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 17892
  HEAP32[$169 >> 2] = $16; //@line 17893
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 17894
  HEAP32[$170 >> 2] = $22; //@line 17895
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 17896
  HEAP32[$171 >> 2] = $20; //@line 17897
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 17898
  HEAP32[$172 >> 2] = $26; //@line 17899
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 17900
  HEAP32[$173 >> 2] = $24; //@line 17901
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 17902
  HEAP32[$174 >> 2] = $30; //@line 17903
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 17904
  HEAP32[$175 >> 2] = $28; //@line 17905
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 17906
  HEAP32[$176 >> 2] = $32; //@line 17907
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 17908
  HEAP32[$177 >> 2] = $34; //@line 17909
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 17910
  HEAP32[$178 >> 2] = $36; //@line 17911
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 17912
  HEAP32[$179 >> 2] = $38; //@line 17913
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 17914
  HEAP32[$180 >> 2] = $40; //@line 17915
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 17916
  HEAP32[$181 >> 2] = $42; //@line 17917
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 17918
  HEAP32[$182 >> 2] = $44; //@line 17919
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 17920
  HEAP32[$183 >> 2] = $46; //@line 17921
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 17922
  HEAP32[$184 >> 2] = $48; //@line 17923
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 17924
  HEAP32[$185 >> 2] = $148; //@line 17925
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 17926
  HEAP32[$186 >> 2] = $52; //@line 17927
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 17928
  HEAP32[$187 >> 2] = $54; //@line 17929
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 17930
  HEAP32[$188 >> 2] = $50; //@line 17931
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 17932
  HEAP32[$189 >> 2] = $56; //@line 17933
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 17934
  HEAP32[$190 >> 2] = $58; //@line 17935
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 17936
  HEAP32[$191 >> 2] = $60; //@line 17937
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 17938
  HEAP32[$192 >> 2] = $62; //@line 17939
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 17940
  HEAP32[$193 >> 2] = $64; //@line 17941
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 17942
  HEAP32[$194 >> 2] = $66; //@line 17943
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 17944
  HEAP32[$195 >> 2] = $68; //@line 17945
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 17946
  HEAP32[$196 >> 2] = $70; //@line 17947
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 17948
  HEAP32[$197 >> 2] = $72; //@line 17949
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 17950
  HEAP32[$198 >> 2] = $74; //@line 17951
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 17952
  HEAP32[$199 >> 2] = $76; //@line 17953
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 17954
  HEAP32[$200 >> 2] = $78; //@line 17955
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 17956
  HEAP32[$201 >> 2] = $80; //@line 17957
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 17958
  HEAP32[$202 >> 2] = $82; //@line 17959
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 17960
  HEAP32[$203 >> 2] = $84; //@line 17961
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 17962
  HEAP32[$204 >> 2] = $86; //@line 17963
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 17964
  HEAP32[$205 >> 2] = $88; //@line 17965
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 17966
  HEAP32[$206 >> 2] = $90; //@line 17967
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 17968
  HEAP32[$207 >> 2] = $92; //@line 17969
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 17970
  HEAP32[$208 >> 2] = $94; //@line 17971
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 17972
  HEAP32[$209 >> 2] = $96; //@line 17973
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 17974
  HEAP32[$210 >> 2] = $98; //@line 17975
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 17976
  HEAP32[$211 >> 2] = $100; //@line 17977
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 17978
  HEAP32[$212 >> 2] = $102; //@line 17979
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 17980
  HEAP32[$213 >> 2] = $104; //@line 17981
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 17982
  HEAP32[$214 >> 2] = $106; //@line 17983
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 17984
  HEAP32[$215 >> 2] = $108; //@line 17985
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 17986
  HEAP32[$216 >> 2] = $110; //@line 17987
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 17988
  HEAP32[$217 >> 2] = $112; //@line 17989
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 17990
  HEAP8[$218 >> 0] = $114; //@line 17991
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 17992
  HEAP32[$219 >> 2] = $116; //@line 17993
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 17994
  HEAP8[$220 >> 0] = $118; //@line 17995
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 17996
  HEAP32[$221 >> 2] = $120; //@line 17997
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 17998
  HEAP32[$222 >> 2] = $122; //@line 17999
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 18000
  HEAP32[$223 >> 2] = $124; //@line 18001
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 18002
  HEAP8[$224 >> 0] = $126; //@line 18003
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 18004
  HEAP32[$225 >> 2] = $128; //@line 18005
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 18006
  HEAP32[$226 >> 2] = $130; //@line 18007
  $227 = $ReallocAsyncCtx + 264 | 0; //@line 18008
  HEAP32[$227 >> 2] = $$096$be; //@line 18009
  $228 = $ReallocAsyncCtx + 268 | 0; //@line 18010
  HEAP32[$228 >> 2] = $132; //@line 18011
  $229 = $ReallocAsyncCtx + 272 | 0; //@line 18012
  HEAP32[$229 >> 2] = $134; //@line 18013
  sp = STACKTOP; //@line 18014
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 18020
  HEAP8[$36 >> 0] = ($247 & 255) >>> 4 & 7; //@line 18025
  HEAP8[$24 >> 0] = $247 & 15; //@line 18027
  $266 = $$0$be + 5 << 24 >> 24; //@line 18041
  HEAP32[$46 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18049
  $276 = HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] | 0; //@line 18052
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 18053
  $277 = FUNCTION_TABLE_iii[$276 & 31]($110, $52) | 0; //@line 18054
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 18057
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 18058
   HEAP32[$278 >> 2] = $2; //@line 18059
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 18060
   HEAP32[$279 >> 2] = $4; //@line 18061
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 18062
   HEAP32[$280 >> 2] = $6; //@line 18063
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 18064
   HEAP32[$281 >> 2] = $8; //@line 18065
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 18066
   HEAP32[$282 >> 2] = $10; //@line 18067
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 18068
   HEAP32[$283 >> 2] = $12; //@line 18069
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 18070
   HEAP32[$284 >> 2] = $14; //@line 18071
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 18072
   HEAP32[$285 >> 2] = $16; //@line 18073
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 18074
   HEAP32[$286 >> 2] = $22; //@line 18075
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 18076
   HEAP32[$287 >> 2] = $20; //@line 18077
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 18078
   HEAP32[$288 >> 2] = $26; //@line 18079
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 18080
   HEAP32[$289 >> 2] = $24; //@line 18081
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 18082
   HEAP32[$290 >> 2] = $30; //@line 18083
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 18084
   HEAP32[$291 >> 2] = $28; //@line 18085
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 18086
   HEAP32[$292 >> 2] = $32; //@line 18087
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 18088
   HEAP32[$293 >> 2] = $34; //@line 18089
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 18090
   HEAP32[$294 >> 2] = $36; //@line 18091
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 18092
   HEAP32[$295 >> 2] = $38; //@line 18093
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 18094
   HEAP32[$296 >> 2] = $40; //@line 18095
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 18096
   HEAP32[$297 >> 2] = $42; //@line 18097
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 18098
   HEAP32[$298 >> 2] = $44; //@line 18099
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 18100
   HEAP32[$299 >> 2] = $46; //@line 18101
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 18102
   HEAP32[$300 >> 2] = $48; //@line 18103
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 18104
   HEAP32[$301 >> 2] = $50; //@line 18105
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 18106
   HEAP32[$302 >> 2] = $52; //@line 18107
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 18108
   HEAP32[$303 >> 2] = $54; //@line 18109
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 18110
   HEAP32[$304 >> 2] = $56; //@line 18111
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 18112
   HEAP32[$305 >> 2] = $58; //@line 18113
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 18114
   HEAP32[$306 >> 2] = $60; //@line 18115
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 18116
   HEAP32[$307 >> 2] = $62; //@line 18117
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 18118
   HEAP32[$308 >> 2] = $64; //@line 18119
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 18120
   HEAP32[$309 >> 2] = $66; //@line 18121
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 18122
   HEAP32[$310 >> 2] = $68; //@line 18123
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 18124
   HEAP32[$311 >> 2] = $70; //@line 18125
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 18126
   HEAP32[$312 >> 2] = $72; //@line 18127
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 18128
   HEAP8[$313 >> 0] = $266; //@line 18129
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 18130
   HEAP32[$314 >> 2] = $74; //@line 18131
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 18132
   HEAP32[$315 >> 2] = $76; //@line 18133
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 18134
   HEAP32[$316 >> 2] = $78; //@line 18135
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 18136
   HEAP32[$317 >> 2] = $80; //@line 18137
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 18138
   HEAP32[$318 >> 2] = $82; //@line 18139
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 18140
   HEAP32[$319 >> 2] = $84; //@line 18141
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 18142
   HEAP32[$320 >> 2] = $86; //@line 18143
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 18144
   HEAP32[$321 >> 2] = $88; //@line 18145
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 18146
   HEAP32[$322 >> 2] = $90; //@line 18147
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 18148
   HEAP32[$323 >> 2] = $92; //@line 18149
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 18150
   HEAP32[$324 >> 2] = $94; //@line 18151
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 18152
   HEAP32[$325 >> 2] = $96; //@line 18153
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 18154
   HEAP32[$326 >> 2] = $98; //@line 18155
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 18156
   HEAP32[$327 >> 2] = $100; //@line 18157
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 18158
   HEAP32[$328 >> 2] = $102; //@line 18159
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 18160
   HEAP32[$329 >> 2] = $104; //@line 18161
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 18162
   HEAP32[$330 >> 2] = $106; //@line 18163
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 18164
   HEAP32[$331 >> 2] = $108; //@line 18165
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 18166
   HEAP32[$332 >> 2] = $110; //@line 18167
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 18168
   HEAP32[$333 >> 2] = $112; //@line 18169
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 18170
   HEAP8[$334 >> 0] = $114; //@line 18171
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 18172
   HEAP32[$335 >> 2] = $116; //@line 18173
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 18174
   HEAP8[$336 >> 0] = $118; //@line 18175
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 18176
   HEAP32[$337 >> 2] = $120; //@line 18177
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 18178
   HEAP32[$338 >> 2] = $122; //@line 18179
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 18180
   HEAP32[$339 >> 2] = $124; //@line 18181
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 18182
   HEAP8[$340 >> 0] = $126; //@line 18183
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 18184
   HEAP32[$341 >> 2] = $128; //@line 18185
   $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 18186
   HEAP32[$342 >> 2] = $130; //@line 18187
   $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 18188
   HEAP32[$343 >> 2] = $132; //@line 18189
   $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 18190
   HEAP32[$344 >> 2] = $134; //@line 18191
   sp = STACKTOP; //@line 18192
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 18196
  ___async_unwind = 0; //@line 18197
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 18198
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 18199
  HEAP32[$278 >> 2] = $2; //@line 18200
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 18201
  HEAP32[$279 >> 2] = $4; //@line 18202
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 18203
  HEAP32[$280 >> 2] = $6; //@line 18204
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 18205
  HEAP32[$281 >> 2] = $8; //@line 18206
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 18207
  HEAP32[$282 >> 2] = $10; //@line 18208
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 18209
  HEAP32[$283 >> 2] = $12; //@line 18210
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 18211
  HEAP32[$284 >> 2] = $14; //@line 18212
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 18213
  HEAP32[$285 >> 2] = $16; //@line 18214
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 18215
  HEAP32[$286 >> 2] = $22; //@line 18216
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 18217
  HEAP32[$287 >> 2] = $20; //@line 18218
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 18219
  HEAP32[$288 >> 2] = $26; //@line 18220
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 18221
  HEAP32[$289 >> 2] = $24; //@line 18222
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 18223
  HEAP32[$290 >> 2] = $30; //@line 18224
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 18225
  HEAP32[$291 >> 2] = $28; //@line 18226
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 18227
  HEAP32[$292 >> 2] = $32; //@line 18228
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 18229
  HEAP32[$293 >> 2] = $34; //@line 18230
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 18231
  HEAP32[$294 >> 2] = $36; //@line 18232
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 18233
  HEAP32[$295 >> 2] = $38; //@line 18234
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 18235
  HEAP32[$296 >> 2] = $40; //@line 18236
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 18237
  HEAP32[$297 >> 2] = $42; //@line 18238
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 18239
  HEAP32[$298 >> 2] = $44; //@line 18240
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 18241
  HEAP32[$299 >> 2] = $46; //@line 18242
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 18243
  HEAP32[$300 >> 2] = $48; //@line 18244
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 18245
  HEAP32[$301 >> 2] = $50; //@line 18246
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 18247
  HEAP32[$302 >> 2] = $52; //@line 18248
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 18249
  HEAP32[$303 >> 2] = $54; //@line 18250
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 18251
  HEAP32[$304 >> 2] = $56; //@line 18252
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 18253
  HEAP32[$305 >> 2] = $58; //@line 18254
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 18255
  HEAP32[$306 >> 2] = $60; //@line 18256
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 18257
  HEAP32[$307 >> 2] = $62; //@line 18258
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 18259
  HEAP32[$308 >> 2] = $64; //@line 18260
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 18261
  HEAP32[$309 >> 2] = $66; //@line 18262
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 18263
  HEAP32[$310 >> 2] = $68; //@line 18264
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 18265
  HEAP32[$311 >> 2] = $70; //@line 18266
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 18267
  HEAP32[$312 >> 2] = $72; //@line 18268
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 18269
  HEAP8[$313 >> 0] = $266; //@line 18270
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 18271
  HEAP32[$314 >> 2] = $74; //@line 18272
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 18273
  HEAP32[$315 >> 2] = $76; //@line 18274
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 18275
  HEAP32[$316 >> 2] = $78; //@line 18276
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 18277
  HEAP32[$317 >> 2] = $80; //@line 18278
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 18279
  HEAP32[$318 >> 2] = $82; //@line 18280
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 18281
  HEAP32[$319 >> 2] = $84; //@line 18282
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 18283
  HEAP32[$320 >> 2] = $86; //@line 18284
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 18285
  HEAP32[$321 >> 2] = $88; //@line 18286
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 18287
  HEAP32[$322 >> 2] = $90; //@line 18288
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 18289
  HEAP32[$323 >> 2] = $92; //@line 18290
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 18291
  HEAP32[$324 >> 2] = $94; //@line 18292
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 18293
  HEAP32[$325 >> 2] = $96; //@line 18294
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 18295
  HEAP32[$326 >> 2] = $98; //@line 18296
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 18297
  HEAP32[$327 >> 2] = $100; //@line 18298
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 18299
  HEAP32[$328 >> 2] = $102; //@line 18300
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 18301
  HEAP32[$329 >> 2] = $104; //@line 18302
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 18303
  HEAP32[$330 >> 2] = $106; //@line 18304
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 18305
  HEAP32[$331 >> 2] = $108; //@line 18306
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 18307
  HEAP32[$332 >> 2] = $110; //@line 18308
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 18309
  HEAP32[$333 >> 2] = $112; //@line 18310
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 18311
  HEAP8[$334 >> 0] = $114; //@line 18312
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 18313
  HEAP32[$335 >> 2] = $116; //@line 18314
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 18315
  HEAP8[$336 >> 0] = $118; //@line 18316
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 18317
  HEAP32[$337 >> 2] = $120; //@line 18318
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 18319
  HEAP32[$338 >> 2] = $122; //@line 18320
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 18321
  HEAP32[$339 >> 2] = $124; //@line 18322
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 18323
  HEAP8[$340 >> 0] = $126; //@line 18324
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 18325
  HEAP32[$341 >> 2] = $128; //@line 18326
  $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 18327
  HEAP32[$342 >> 2] = $130; //@line 18328
  $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 18329
  HEAP32[$343 >> 2] = $132; //@line 18330
  $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 18331
  HEAP32[$344 >> 2] = $134; //@line 18332
  sp = STACKTOP; //@line 18333
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$116 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 18341
  HEAP32[$128 >> 2] = $8; //@line 18342
  HEAP32[$130 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18363
  HEAP32[$4 >> 2] = 0; //@line 18364
  $385 = $$0$be + 6 << 24 >> 24; //@line 18365
  HEAP8[$22 >> 0] = HEAP8[$124 + ($$0$be + 5 & 255) >> 0] | 0; //@line 18369
  $391 = HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] | 0; //@line 18372
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(272) | 0; //@line 18373
  $392 = FUNCTION_TABLE_iii[$391 & 31]($110, $60) | 0; //@line 18374
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 18377
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 18378
   HEAP32[$393 >> 2] = $2; //@line 18379
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 18380
   HEAP32[$394 >> 2] = $4; //@line 18381
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 18382
   HEAP32[$395 >> 2] = $6; //@line 18383
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 18384
   HEAP32[$396 >> 2] = $8; //@line 18385
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 18386
   HEAP32[$397 >> 2] = $10; //@line 18387
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 18388
   HEAP32[$398 >> 2] = $12; //@line 18389
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 18390
   HEAP32[$399 >> 2] = $14; //@line 18391
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 18392
   HEAP32[$400 >> 2] = $16; //@line 18393
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 18394
   HEAP32[$401 >> 2] = $22; //@line 18395
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 18396
   HEAP32[$402 >> 2] = $20; //@line 18397
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 18398
   HEAP32[$403 >> 2] = $26; //@line 18399
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 18400
   HEAP32[$404 >> 2] = $24; //@line 18401
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 18402
   HEAP32[$405 >> 2] = $30; //@line 18403
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 18404
   HEAP32[$406 >> 2] = $28; //@line 18405
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 18406
   HEAP32[$407 >> 2] = $32; //@line 18407
   $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 18408
   HEAP32[$408 >> 2] = $34; //@line 18409
   $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 18410
   HEAP32[$409 >> 2] = $36; //@line 18411
   $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 18412
   HEAP32[$410 >> 2] = $38; //@line 18413
   $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 18414
   HEAP32[$411 >> 2] = $40; //@line 18415
   $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 18416
   HEAP32[$412 >> 2] = $42; //@line 18417
   $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 18418
   HEAP32[$413 >> 2] = $44; //@line 18419
   $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 18420
   HEAP32[$414 >> 2] = $46; //@line 18421
   $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 18422
   HEAP32[$415 >> 2] = $48; //@line 18423
   $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 18424
   HEAP32[$416 >> 2] = $50; //@line 18425
   $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 18426
   HEAP32[$417 >> 2] = $52; //@line 18427
   $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 18428
   HEAP8[$418 >> 0] = $385; //@line 18429
   $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 18430
   HEAP32[$419 >> 2] = $54; //@line 18431
   $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 18432
   HEAP32[$420 >> 2] = $56; //@line 18433
   $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 18434
   HEAP32[$421 >> 2] = $58; //@line 18435
   $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 18436
   HEAP32[$422 >> 2] = $60; //@line 18437
   $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 18438
   HEAP32[$423 >> 2] = $62; //@line 18439
   $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 18440
   HEAP32[$424 >> 2] = $64; //@line 18441
   $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 18442
   HEAP32[$425 >> 2] = $66; //@line 18443
   $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 18444
   HEAP32[$426 >> 2] = $68; //@line 18445
   $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 18446
   HEAP32[$427 >> 2] = $70; //@line 18447
   $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 18448
   HEAP32[$428 >> 2] = $72; //@line 18449
   $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 18450
   HEAP32[$429 >> 2] = $74; //@line 18451
   $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 18452
   HEAP32[$430 >> 2] = $76; //@line 18453
   $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 18454
   HEAP32[$431 >> 2] = $78; //@line 18455
   $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 18456
   HEAP32[$432 >> 2] = $80; //@line 18457
   $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 18458
   HEAP32[$433 >> 2] = $82; //@line 18459
   $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 18460
   HEAP32[$434 >> 2] = $84; //@line 18461
   $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 18462
   HEAP32[$435 >> 2] = $86; //@line 18463
   $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 18464
   HEAP32[$436 >> 2] = $88; //@line 18465
   $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 18466
   HEAP32[$437 >> 2] = $90; //@line 18467
   $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 18468
   HEAP32[$438 >> 2] = $92; //@line 18469
   $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 18470
   HEAP32[$439 >> 2] = $94; //@line 18471
   $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 18472
   HEAP32[$440 >> 2] = $96; //@line 18473
   $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 18474
   HEAP32[$441 >> 2] = $98; //@line 18475
   $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 18476
   HEAP32[$442 >> 2] = $100; //@line 18477
   $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 18478
   HEAP32[$443 >> 2] = $102; //@line 18479
   $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 18480
   HEAP32[$444 >> 2] = $104; //@line 18481
   $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 18482
   HEAP32[$445 >> 2] = $106; //@line 18483
   $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 18484
   HEAP32[$446 >> 2] = $108; //@line 18485
   $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 18486
   HEAP32[$447 >> 2] = $110; //@line 18487
   $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 18488
   HEAP32[$448 >> 2] = $112; //@line 18489
   $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 18490
   HEAP8[$449 >> 0] = $114; //@line 18491
   $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 18492
   HEAP32[$450 >> 2] = $116; //@line 18493
   $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 18494
   HEAP8[$451 >> 0] = $118; //@line 18495
   $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 18496
   HEAP32[$452 >> 2] = $120; //@line 18497
   $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 18498
   HEAP32[$453 >> 2] = $122; //@line 18499
   $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 18500
   HEAP32[$454 >> 2] = $124; //@line 18501
   $455 = $ReallocAsyncCtx3 + 252 | 0; //@line 18502
   HEAP8[$455 >> 0] = $126; //@line 18503
   $456 = $ReallocAsyncCtx3 + 256 | 0; //@line 18504
   HEAP32[$456 >> 2] = $128; //@line 18505
   $457 = $ReallocAsyncCtx3 + 260 | 0; //@line 18506
   HEAP32[$457 >> 2] = $130; //@line 18507
   $458 = $ReallocAsyncCtx3 + 264 | 0; //@line 18508
   HEAP32[$458 >> 2] = $132; //@line 18509
   $459 = $ReallocAsyncCtx3 + 268 | 0; //@line 18510
   HEAP32[$459 >> 2] = $134; //@line 18511
   sp = STACKTOP; //@line 18512
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 18516
  ___async_unwind = 0; //@line 18517
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 18518
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 18519
  HEAP32[$393 >> 2] = $2; //@line 18520
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 18521
  HEAP32[$394 >> 2] = $4; //@line 18522
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 18523
  HEAP32[$395 >> 2] = $6; //@line 18524
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 18525
  HEAP32[$396 >> 2] = $8; //@line 18526
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 18527
  HEAP32[$397 >> 2] = $10; //@line 18528
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 18529
  HEAP32[$398 >> 2] = $12; //@line 18530
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 18531
  HEAP32[$399 >> 2] = $14; //@line 18532
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 18533
  HEAP32[$400 >> 2] = $16; //@line 18534
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 18535
  HEAP32[$401 >> 2] = $22; //@line 18536
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 18537
  HEAP32[$402 >> 2] = $20; //@line 18538
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 18539
  HEAP32[$403 >> 2] = $26; //@line 18540
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 18541
  HEAP32[$404 >> 2] = $24; //@line 18542
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 18543
  HEAP32[$405 >> 2] = $30; //@line 18544
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 18545
  HEAP32[$406 >> 2] = $28; //@line 18546
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 18547
  HEAP32[$407 >> 2] = $32; //@line 18548
  $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 18549
  HEAP32[$408 >> 2] = $34; //@line 18550
  $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 18551
  HEAP32[$409 >> 2] = $36; //@line 18552
  $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 18553
  HEAP32[$410 >> 2] = $38; //@line 18554
  $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 18555
  HEAP32[$411 >> 2] = $40; //@line 18556
  $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 18557
  HEAP32[$412 >> 2] = $42; //@line 18558
  $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 18559
  HEAP32[$413 >> 2] = $44; //@line 18560
  $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 18561
  HEAP32[$414 >> 2] = $46; //@line 18562
  $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 18563
  HEAP32[$415 >> 2] = $48; //@line 18564
  $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 18565
  HEAP32[$416 >> 2] = $50; //@line 18566
  $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 18567
  HEAP32[$417 >> 2] = $52; //@line 18568
  $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 18569
  HEAP8[$418 >> 0] = $385; //@line 18570
  $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 18571
  HEAP32[$419 >> 2] = $54; //@line 18572
  $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 18573
  HEAP32[$420 >> 2] = $56; //@line 18574
  $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 18575
  HEAP32[$421 >> 2] = $58; //@line 18576
  $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 18577
  HEAP32[$422 >> 2] = $60; //@line 18578
  $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 18579
  HEAP32[$423 >> 2] = $62; //@line 18580
  $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 18581
  HEAP32[$424 >> 2] = $64; //@line 18582
  $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 18583
  HEAP32[$425 >> 2] = $66; //@line 18584
  $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 18585
  HEAP32[$426 >> 2] = $68; //@line 18586
  $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 18587
  HEAP32[$427 >> 2] = $70; //@line 18588
  $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 18589
  HEAP32[$428 >> 2] = $72; //@line 18590
  $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 18591
  HEAP32[$429 >> 2] = $74; //@line 18592
  $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 18593
  HEAP32[$430 >> 2] = $76; //@line 18594
  $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 18595
  HEAP32[$431 >> 2] = $78; //@line 18596
  $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 18597
  HEAP32[$432 >> 2] = $80; //@line 18598
  $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 18599
  HEAP32[$433 >> 2] = $82; //@line 18600
  $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 18601
  HEAP32[$434 >> 2] = $84; //@line 18602
  $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 18603
  HEAP32[$435 >> 2] = $86; //@line 18604
  $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 18605
  HEAP32[$436 >> 2] = $88; //@line 18606
  $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 18607
  HEAP32[$437 >> 2] = $90; //@line 18608
  $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 18609
  HEAP32[$438 >> 2] = $92; //@line 18610
  $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 18611
  HEAP32[$439 >> 2] = $94; //@line 18612
  $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 18613
  HEAP32[$440 >> 2] = $96; //@line 18614
  $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 18615
  HEAP32[$441 >> 2] = $98; //@line 18616
  $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 18617
  HEAP32[$442 >> 2] = $100; //@line 18618
  $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 18619
  HEAP32[$443 >> 2] = $102; //@line 18620
  $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 18621
  HEAP32[$444 >> 2] = $104; //@line 18622
  $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 18623
  HEAP32[$445 >> 2] = $106; //@line 18624
  $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 18625
  HEAP32[$446 >> 2] = $108; //@line 18626
  $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 18627
  HEAP32[$447 >> 2] = $110; //@line 18628
  $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 18629
  HEAP32[$448 >> 2] = $112; //@line 18630
  $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 18631
  HEAP8[$449 >> 0] = $114; //@line 18632
  $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 18633
  HEAP32[$450 >> 2] = $116; //@line 18634
  $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 18635
  HEAP8[$451 >> 0] = $118; //@line 18636
  $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 18637
  HEAP32[$452 >> 2] = $120; //@line 18638
  $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 18639
  HEAP32[$453 >> 2] = $122; //@line 18640
  $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 18641
  HEAP32[$454 >> 2] = $124; //@line 18642
  $455 = $ReallocAsyncCtx3 + 252 | 0; //@line 18643
  HEAP8[$455 >> 0] = $126; //@line 18644
  $456 = $ReallocAsyncCtx3 + 256 | 0; //@line 18645
  HEAP32[$456 >> 2] = $128; //@line 18646
  $457 = $ReallocAsyncCtx3 + 260 | 0; //@line 18647
  HEAP32[$457 >> 2] = $130; //@line 18648
  $458 = $ReallocAsyncCtx3 + 264 | 0; //@line 18649
  HEAP32[$458 >> 2] = $132; //@line 18650
  $459 = $ReallocAsyncCtx3 + 268 | 0; //@line 18651
  HEAP32[$459 >> 2] = $134; //@line 18652
  sp = STACKTOP; //@line 18653
  return;
 } else if ((label | 0) == 19) {
  $478 = $$0$be + 2 << 24 >> 24; //@line 18657
  $481 = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 18660
  HEAP8[$56 >> 0] = 0; //@line 18661
  $482 = $481 & 255; //@line 18662
  HEAP8[$64 >> 0] = $482 >>> 5 & 1; //@line 18666
  if ($482 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 18670
  }
  HEAP8[$74 >> 0] = $482 & 15; //@line 18674
  $491 = HEAP32[(HEAP32[$82 >> 2] | 0) + 44 >> 2] | 0; //@line 18677
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 18678
  $492 = FUNCTION_TABLE_iii[$491 & 31]($110, $26) | 0; //@line 18679
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 18682
   $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 18683
   HEAP32[$493 >> 2] = $2; //@line 18684
   $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 18685
   HEAP32[$494 >> 2] = $4; //@line 18686
   $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 18687
   HEAP32[$495 >> 2] = $6; //@line 18688
   $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 18689
   HEAP32[$496 >> 2] = $8; //@line 18690
   $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 18691
   HEAP32[$497 >> 2] = $10; //@line 18692
   $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 18693
   HEAP32[$498 >> 2] = $12; //@line 18694
   $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 18695
   HEAP32[$499 >> 2] = $14; //@line 18696
   $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 18697
   HEAP32[$500 >> 2] = $16; //@line 18698
   $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 18699
   HEAP32[$501 >> 2] = $22; //@line 18700
   $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 18701
   HEAP32[$502 >> 2] = $20; //@line 18702
   $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 18703
   HEAP32[$503 >> 2] = $26; //@line 18704
   $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 18705
   HEAP32[$504 >> 2] = $24; //@line 18706
   $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 18707
   HEAP32[$505 >> 2] = $30; //@line 18708
   $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 18709
   HEAP32[$506 >> 2] = $28; //@line 18710
   $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 18711
   HEAP32[$507 >> 2] = $32; //@line 18712
   $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 18713
   HEAP32[$508 >> 2] = $34; //@line 18714
   $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 18715
   HEAP32[$509 >> 2] = $36; //@line 18716
   $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 18717
   HEAP32[$510 >> 2] = $38; //@line 18718
   $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 18719
   HEAP32[$511 >> 2] = $40; //@line 18720
   $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 18721
   HEAP32[$512 >> 2] = $42; //@line 18722
   $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 18723
   HEAP32[$513 >> 2] = $44; //@line 18724
   $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 18725
   HEAP32[$514 >> 2] = $46; //@line 18726
   $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 18727
   HEAP32[$515 >> 2] = $48; //@line 18728
   $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 18729
   HEAP32[$516 >> 2] = $50; //@line 18730
   $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 18731
   HEAP32[$517 >> 2] = $52; //@line 18732
   $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 18733
   HEAP32[$518 >> 2] = $54; //@line 18734
   $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 18735
   HEAP8[$519 >> 0] = $478; //@line 18736
   $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 18737
   HEAP32[$520 >> 2] = $56; //@line 18738
   $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 18739
   HEAP32[$521 >> 2] = $58; //@line 18740
   $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 18741
   HEAP32[$522 >> 2] = $62; //@line 18742
   $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 18743
   HEAP32[$523 >> 2] = $60; //@line 18744
   $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 18745
   HEAP32[$524 >> 2] = $64; //@line 18746
   $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 18747
   HEAP32[$525 >> 2] = $66; //@line 18748
   $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 18749
   HEAP32[$526 >> 2] = $68; //@line 18750
   $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 18751
   HEAP32[$527 >> 2] = $70; //@line 18752
   $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 18753
   HEAP32[$528 >> 2] = $72; //@line 18754
   $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 18755
   HEAP32[$529 >> 2] = $74; //@line 18756
   $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 18757
   HEAP32[$530 >> 2] = $76; //@line 18758
   $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 18759
   HEAP32[$531 >> 2] = $78; //@line 18760
   $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 18761
   HEAP32[$532 >> 2] = $80; //@line 18762
   $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 18763
   HEAP32[$533 >> 2] = $82; //@line 18764
   $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 18765
   HEAP32[$534 >> 2] = $84; //@line 18766
   $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 18767
   HEAP32[$535 >> 2] = $86; //@line 18768
   $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 18769
   HEAP32[$536 >> 2] = $88; //@line 18770
   $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 18771
   HEAP32[$537 >> 2] = $90; //@line 18772
   $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 18773
   HEAP32[$538 >> 2] = $92; //@line 18774
   $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 18775
   HEAP32[$539 >> 2] = $94; //@line 18776
   $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 18777
   HEAP32[$540 >> 2] = $96; //@line 18778
   $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 18779
   HEAP32[$541 >> 2] = $98; //@line 18780
   $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 18781
   HEAP32[$542 >> 2] = $100; //@line 18782
   $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 18783
   HEAP32[$543 >> 2] = $102; //@line 18784
   $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 18785
   HEAP32[$544 >> 2] = $104; //@line 18786
   $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 18787
   HEAP32[$545 >> 2] = $106; //@line 18788
   $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 18789
   HEAP32[$546 >> 2] = $108; //@line 18790
   $547 = $ReallocAsyncCtx4 + 220 | 0; //@line 18791
   HEAP32[$547 >> 2] = $110; //@line 18792
   $548 = $ReallocAsyncCtx4 + 224 | 0; //@line 18793
   HEAP32[$548 >> 2] = $112; //@line 18794
   $549 = $ReallocAsyncCtx4 + 228 | 0; //@line 18795
   HEAP8[$549 >> 0] = $114; //@line 18796
   $550 = $ReallocAsyncCtx4 + 232 | 0; //@line 18797
   HEAP32[$550 >> 2] = $116; //@line 18798
   $551 = $ReallocAsyncCtx4 + 236 | 0; //@line 18799
   HEAP8[$551 >> 0] = $118; //@line 18800
   $552 = $ReallocAsyncCtx4 + 240 | 0; //@line 18801
   HEAP32[$552 >> 2] = $120; //@line 18802
   $553 = $ReallocAsyncCtx4 + 244 | 0; //@line 18803
   HEAP32[$553 >> 2] = $122; //@line 18804
   $554 = $ReallocAsyncCtx4 + 248 | 0; //@line 18805
   HEAP32[$554 >> 2] = $124; //@line 18806
   $555 = $ReallocAsyncCtx4 + 252 | 0; //@line 18807
   HEAP8[$555 >> 0] = $126; //@line 18808
   $556 = $ReallocAsyncCtx4 + 256 | 0; //@line 18809
   HEAP32[$556 >> 2] = $128; //@line 18810
   $557 = $ReallocAsyncCtx4 + 260 | 0; //@line 18811
   HEAP32[$557 >> 2] = $130; //@line 18812
   $558 = $ReallocAsyncCtx4 + 264 | 0; //@line 18813
   HEAP32[$558 >> 2] = $$096$be; //@line 18814
   $559 = $ReallocAsyncCtx4 + 268 | 0; //@line 18815
   HEAP32[$559 >> 2] = $132; //@line 18816
   $560 = $ReallocAsyncCtx4 + 272 | 0; //@line 18817
   HEAP32[$560 >> 2] = $134; //@line 18818
   sp = STACKTOP; //@line 18819
   return;
  }
  HEAP8[___async_retval >> 0] = $492 & 1; //@line 18824
  ___async_unwind = 0; //@line 18825
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 18826
  $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 18827
  HEAP32[$493 >> 2] = $2; //@line 18828
  $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 18829
  HEAP32[$494 >> 2] = $4; //@line 18830
  $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 18831
  HEAP32[$495 >> 2] = $6; //@line 18832
  $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 18833
  HEAP32[$496 >> 2] = $8; //@line 18834
  $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 18835
  HEAP32[$497 >> 2] = $10; //@line 18836
  $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 18837
  HEAP32[$498 >> 2] = $12; //@line 18838
  $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 18839
  HEAP32[$499 >> 2] = $14; //@line 18840
  $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 18841
  HEAP32[$500 >> 2] = $16; //@line 18842
  $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 18843
  HEAP32[$501 >> 2] = $22; //@line 18844
  $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 18845
  HEAP32[$502 >> 2] = $20; //@line 18846
  $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 18847
  HEAP32[$503 >> 2] = $26; //@line 18848
  $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 18849
  HEAP32[$504 >> 2] = $24; //@line 18850
  $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 18851
  HEAP32[$505 >> 2] = $30; //@line 18852
  $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 18853
  HEAP32[$506 >> 2] = $28; //@line 18854
  $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 18855
  HEAP32[$507 >> 2] = $32; //@line 18856
  $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 18857
  HEAP32[$508 >> 2] = $34; //@line 18858
  $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 18859
  HEAP32[$509 >> 2] = $36; //@line 18860
  $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 18861
  HEAP32[$510 >> 2] = $38; //@line 18862
  $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 18863
  HEAP32[$511 >> 2] = $40; //@line 18864
  $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 18865
  HEAP32[$512 >> 2] = $42; //@line 18866
  $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 18867
  HEAP32[$513 >> 2] = $44; //@line 18868
  $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 18869
  HEAP32[$514 >> 2] = $46; //@line 18870
  $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 18871
  HEAP32[$515 >> 2] = $48; //@line 18872
  $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 18873
  HEAP32[$516 >> 2] = $50; //@line 18874
  $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 18875
  HEAP32[$517 >> 2] = $52; //@line 18876
  $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 18877
  HEAP32[$518 >> 2] = $54; //@line 18878
  $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 18879
  HEAP8[$519 >> 0] = $478; //@line 18880
  $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 18881
  HEAP32[$520 >> 2] = $56; //@line 18882
  $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 18883
  HEAP32[$521 >> 2] = $58; //@line 18884
  $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 18885
  HEAP32[$522 >> 2] = $62; //@line 18886
  $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 18887
  HEAP32[$523 >> 2] = $60; //@line 18888
  $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 18889
  HEAP32[$524 >> 2] = $64; //@line 18890
  $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 18891
  HEAP32[$525 >> 2] = $66; //@line 18892
  $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 18893
  HEAP32[$526 >> 2] = $68; //@line 18894
  $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 18895
  HEAP32[$527 >> 2] = $70; //@line 18896
  $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 18897
  HEAP32[$528 >> 2] = $72; //@line 18898
  $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 18899
  HEAP32[$529 >> 2] = $74; //@line 18900
  $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 18901
  HEAP32[$530 >> 2] = $76; //@line 18902
  $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 18903
  HEAP32[$531 >> 2] = $78; //@line 18904
  $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 18905
  HEAP32[$532 >> 2] = $80; //@line 18906
  $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 18907
  HEAP32[$533 >> 2] = $82; //@line 18908
  $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 18909
  HEAP32[$534 >> 2] = $84; //@line 18910
  $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 18911
  HEAP32[$535 >> 2] = $86; //@line 18912
  $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 18913
  HEAP32[$536 >> 2] = $88; //@line 18914
  $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 18915
  HEAP32[$537 >> 2] = $90; //@line 18916
  $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 18917
  HEAP32[$538 >> 2] = $92; //@line 18918
  $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 18919
  HEAP32[$539 >> 2] = $94; //@line 18920
  $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 18921
  HEAP32[$540 >> 2] = $96; //@line 18922
  $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 18923
  HEAP32[$541 >> 2] = $98; //@line 18924
  $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 18925
  HEAP32[$542 >> 2] = $100; //@line 18926
  $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 18927
  HEAP32[$543 >> 2] = $102; //@line 18928
  $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 18929
  HEAP32[$544 >> 2] = $104; //@line 18930
  $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 18931
  HEAP32[$545 >> 2] = $106; //@line 18932
  $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 18933
  HEAP32[$546 >> 2] = $108; //@line 18934
  $547 = $ReallocAsyncCtx4 + 220 | 0; //@line 18935
  HEAP32[$547 >> 2] = $110; //@line 18936
  $548 = $ReallocAsyncCtx4 + 224 | 0; //@line 18937
  HEAP32[$548 >> 2] = $112; //@line 18938
  $549 = $ReallocAsyncCtx4 + 228 | 0; //@line 18939
  HEAP8[$549 >> 0] = $114; //@line 18940
  $550 = $ReallocAsyncCtx4 + 232 | 0; //@line 18941
  HEAP32[$550 >> 2] = $116; //@line 18942
  $551 = $ReallocAsyncCtx4 + 236 | 0; //@line 18943
  HEAP8[$551 >> 0] = $118; //@line 18944
  $552 = $ReallocAsyncCtx4 + 240 | 0; //@line 18945
  HEAP32[$552 >> 2] = $120; //@line 18946
  $553 = $ReallocAsyncCtx4 + 244 | 0; //@line 18947
  HEAP32[$553 >> 2] = $122; //@line 18948
  $554 = $ReallocAsyncCtx4 + 248 | 0; //@line 18949
  HEAP32[$554 >> 2] = $124; //@line 18950
  $555 = $ReallocAsyncCtx4 + 252 | 0; //@line 18951
  HEAP8[$555 >> 0] = $126; //@line 18952
  $556 = $ReallocAsyncCtx4 + 256 | 0; //@line 18953
  HEAP32[$556 >> 2] = $128; //@line 18954
  $557 = $ReallocAsyncCtx4 + 260 | 0; //@line 18955
  HEAP32[$557 >> 2] = $130; //@line 18956
  $558 = $ReallocAsyncCtx4 + 264 | 0; //@line 18957
  HEAP32[$558 >> 2] = $$096$be; //@line 18958
  $559 = $ReallocAsyncCtx4 + 268 | 0; //@line 18959
  HEAP32[$559 >> 2] = $132; //@line 18960
  $560 = $ReallocAsyncCtx4 + 272 | 0; //@line 18961
  HEAP32[$560 >> 2] = $134; //@line 18962
  sp = STACKTOP; //@line 18963
  return;
 } else if ((label | 0) == 24) {
  HEAP8[$102 >> 0] = HEAP8[$124 + ($137 & 255) >> 0] | 0; //@line 18971
  $578 = $$0$be + 5 << 24 >> 24; //@line 18984
  HEAP32[$108 >> 2] = (HEAPU8[$124 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$124 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$124 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18992
  $588 = HEAP32[(HEAP32[$120 >> 2] | 0) + 48 >> 2] | 0; //@line 18995
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 18996
  $589 = FUNCTION_TABLE_iii[$588 & 31]($110, $12) | 0; //@line 18997
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 19000
   $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 19001
   HEAP32[$590 >> 2] = $2; //@line 19002
   $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 19003
   HEAP32[$591 >> 2] = $4; //@line 19004
   $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 19005
   HEAP32[$592 >> 2] = $6; //@line 19006
   $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 19007
   HEAP32[$593 >> 2] = $8; //@line 19008
   $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 19009
   HEAP32[$594 >> 2] = $10; //@line 19010
   $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 19011
   HEAP32[$595 >> 2] = $12; //@line 19012
   $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 19013
   HEAP32[$596 >> 2] = $14; //@line 19014
   $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 19015
   HEAP32[$597 >> 2] = $16; //@line 19016
   $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 19017
   HEAP8[$598 >> 0] = $578; //@line 19018
   $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 19019
   HEAP32[$599 >> 2] = $20; //@line 19020
   $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 19021
   HEAP32[$600 >> 2] = $22; //@line 19022
   $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 19023
   HEAP32[$601 >> 2] = $24; //@line 19024
   $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 19025
   HEAP32[$602 >> 2] = $26; //@line 19026
   $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 19027
   HEAP32[$603 >> 2] = $28; //@line 19028
   $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 19029
   HEAP32[$604 >> 2] = $30; //@line 19030
   $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 19031
   HEAP32[$605 >> 2] = $32; //@line 19032
   $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 19033
   HEAP32[$606 >> 2] = $34; //@line 19034
   $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 19035
   HEAP32[$607 >> 2] = $36; //@line 19036
   $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 19037
   HEAP32[$608 >> 2] = $38; //@line 19038
   $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 19039
   HEAP32[$609 >> 2] = $40; //@line 19040
   $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 19041
   HEAP32[$610 >> 2] = $42; //@line 19042
   $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 19043
   HEAP32[$611 >> 2] = $44; //@line 19044
   $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 19045
   HEAP32[$612 >> 2] = $46; //@line 19046
   $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 19047
   HEAP32[$613 >> 2] = $48; //@line 19048
   $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 19049
   HEAP32[$614 >> 2] = $50; //@line 19050
   $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 19051
   HEAP32[$615 >> 2] = $52; //@line 19052
   $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 19053
   HEAP32[$616 >> 2] = $54; //@line 19054
   $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 19055
   HEAP32[$617 >> 2] = $56; //@line 19056
   $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 19057
   HEAP32[$618 >> 2] = $58; //@line 19058
   $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 19059
   HEAP32[$619 >> 2] = $60; //@line 19060
   $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 19061
   HEAP32[$620 >> 2] = $62; //@line 19062
   $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 19063
   HEAP32[$621 >> 2] = $64; //@line 19064
   $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 19065
   HEAP32[$622 >> 2] = $66; //@line 19066
   $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 19067
   HEAP32[$623 >> 2] = $68; //@line 19068
   $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 19069
   HEAP32[$624 >> 2] = $70; //@line 19070
   $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 19071
   HEAP32[$625 >> 2] = $72; //@line 19072
   $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 19073
   HEAP32[$626 >> 2] = $74; //@line 19074
   $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 19075
   HEAP32[$627 >> 2] = $76; //@line 19076
   $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 19077
   HEAP32[$628 >> 2] = $78; //@line 19078
   $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 19079
   HEAP32[$629 >> 2] = $80; //@line 19080
   $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 19081
   HEAP32[$630 >> 2] = $82; //@line 19082
   $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 19083
   HEAP32[$631 >> 2] = $84; //@line 19084
   $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 19085
   HEAP32[$632 >> 2] = $86; //@line 19086
   $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 19087
   HEAP32[$633 >> 2] = $88; //@line 19088
   $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 19089
   HEAP32[$634 >> 2] = $90; //@line 19090
   $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 19091
   HEAP32[$635 >> 2] = $92; //@line 19092
   $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 19093
   HEAP32[$636 >> 2] = $94; //@line 19094
   $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 19095
   HEAP32[$637 >> 2] = $96; //@line 19096
   $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 19097
   HEAP32[$638 >> 2] = $98; //@line 19098
   $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 19099
   HEAP32[$639 >> 2] = $100; //@line 19100
   $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 19101
   HEAP32[$640 >> 2] = $102; //@line 19102
   $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 19103
   HEAP32[$641 >> 2] = $104; //@line 19104
   $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 19105
   HEAP32[$642 >> 2] = $106; //@line 19106
   $643 = $ReallocAsyncCtx5 + 216 | 0; //@line 19107
   HEAP32[$643 >> 2] = $108; //@line 19108
   $644 = $ReallocAsyncCtx5 + 220 | 0; //@line 19109
   HEAP32[$644 >> 2] = $110; //@line 19110
   $645 = $ReallocAsyncCtx5 + 224 | 0; //@line 19111
   HEAP32[$645 >> 2] = $112; //@line 19112
   $646 = $ReallocAsyncCtx5 + 228 | 0; //@line 19113
   HEAP8[$646 >> 0] = $114; //@line 19114
   $647 = $ReallocAsyncCtx5 + 232 | 0; //@line 19115
   HEAP32[$647 >> 2] = $116; //@line 19116
   $648 = $ReallocAsyncCtx5 + 236 | 0; //@line 19117
   HEAP8[$648 >> 0] = $118; //@line 19118
   $649 = $ReallocAsyncCtx5 + 240 | 0; //@line 19119
   HEAP32[$649 >> 2] = $120; //@line 19120
   $650 = $ReallocAsyncCtx5 + 244 | 0; //@line 19121
   HEAP32[$650 >> 2] = $122; //@line 19122
   $651 = $ReallocAsyncCtx5 + 248 | 0; //@line 19123
   HEAP32[$651 >> 2] = $124; //@line 19124
   $652 = $ReallocAsyncCtx5 + 252 | 0; //@line 19125
   HEAP8[$652 >> 0] = $126; //@line 19126
   $653 = $ReallocAsyncCtx5 + 256 | 0; //@line 19127
   HEAP32[$653 >> 2] = $128; //@line 19128
   $654 = $ReallocAsyncCtx5 + 260 | 0; //@line 19129
   HEAP32[$654 >> 2] = $130; //@line 19130
   $655 = $ReallocAsyncCtx5 + 264 | 0; //@line 19131
   HEAP32[$655 >> 2] = $132; //@line 19132
   $656 = $ReallocAsyncCtx5 + 268 | 0; //@line 19133
   HEAP32[$656 >> 2] = $134; //@line 19134
   sp = STACKTOP; //@line 19135
   return;
  }
  HEAP8[___async_retval >> 0] = $589; //@line 19139
  ___async_unwind = 0; //@line 19140
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 19141
  $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 19142
  HEAP32[$590 >> 2] = $2; //@line 19143
  $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 19144
  HEAP32[$591 >> 2] = $4; //@line 19145
  $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 19146
  HEAP32[$592 >> 2] = $6; //@line 19147
  $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 19148
  HEAP32[$593 >> 2] = $8; //@line 19149
  $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 19150
  HEAP32[$594 >> 2] = $10; //@line 19151
  $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 19152
  HEAP32[$595 >> 2] = $12; //@line 19153
  $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 19154
  HEAP32[$596 >> 2] = $14; //@line 19155
  $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 19156
  HEAP32[$597 >> 2] = $16; //@line 19157
  $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 19158
  HEAP8[$598 >> 0] = $578; //@line 19159
  $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 19160
  HEAP32[$599 >> 2] = $20; //@line 19161
  $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 19162
  HEAP32[$600 >> 2] = $22; //@line 19163
  $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 19164
  HEAP32[$601 >> 2] = $24; //@line 19165
  $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 19166
  HEAP32[$602 >> 2] = $26; //@line 19167
  $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 19168
  HEAP32[$603 >> 2] = $28; //@line 19169
  $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 19170
  HEAP32[$604 >> 2] = $30; //@line 19171
  $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 19172
  HEAP32[$605 >> 2] = $32; //@line 19173
  $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 19174
  HEAP32[$606 >> 2] = $34; //@line 19175
  $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 19176
  HEAP32[$607 >> 2] = $36; //@line 19177
  $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 19178
  HEAP32[$608 >> 2] = $38; //@line 19179
  $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 19180
  HEAP32[$609 >> 2] = $40; //@line 19181
  $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 19182
  HEAP32[$610 >> 2] = $42; //@line 19183
  $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 19184
  HEAP32[$611 >> 2] = $44; //@line 19185
  $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 19186
  HEAP32[$612 >> 2] = $46; //@line 19187
  $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 19188
  HEAP32[$613 >> 2] = $48; //@line 19189
  $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 19190
  HEAP32[$614 >> 2] = $50; //@line 19191
  $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 19192
  HEAP32[$615 >> 2] = $52; //@line 19193
  $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 19194
  HEAP32[$616 >> 2] = $54; //@line 19195
  $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 19196
  HEAP32[$617 >> 2] = $56; //@line 19197
  $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 19198
  HEAP32[$618 >> 2] = $58; //@line 19199
  $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 19200
  HEAP32[$619 >> 2] = $60; //@line 19201
  $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 19202
  HEAP32[$620 >> 2] = $62; //@line 19203
  $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 19204
  HEAP32[$621 >> 2] = $64; //@line 19205
  $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 19206
  HEAP32[$622 >> 2] = $66; //@line 19207
  $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 19208
  HEAP32[$623 >> 2] = $68; //@line 19209
  $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 19210
  HEAP32[$624 >> 2] = $70; //@line 19211
  $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 19212
  HEAP32[$625 >> 2] = $72; //@line 19213
  $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 19214
  HEAP32[$626 >> 2] = $74; //@line 19215
  $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 19216
  HEAP32[$627 >> 2] = $76; //@line 19217
  $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 19218
  HEAP32[$628 >> 2] = $78; //@line 19219
  $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 19220
  HEAP32[$629 >> 2] = $80; //@line 19221
  $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 19222
  HEAP32[$630 >> 2] = $82; //@line 19223
  $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 19224
  HEAP32[$631 >> 2] = $84; //@line 19225
  $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 19226
  HEAP32[$632 >> 2] = $86; //@line 19227
  $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 19228
  HEAP32[$633 >> 2] = $88; //@line 19229
  $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 19230
  HEAP32[$634 >> 2] = $90; //@line 19231
  $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 19232
  HEAP32[$635 >> 2] = $92; //@line 19233
  $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 19234
  HEAP32[$636 >> 2] = $94; //@line 19235
  $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 19236
  HEAP32[$637 >> 2] = $96; //@line 19237
  $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 19238
  HEAP32[$638 >> 2] = $98; //@line 19239
  $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 19240
  HEAP32[$639 >> 2] = $100; //@line 19241
  $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 19242
  HEAP32[$640 >> 2] = $102; //@line 19243
  $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 19244
  HEAP32[$641 >> 2] = $104; //@line 19245
  $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 19246
  HEAP32[$642 >> 2] = $106; //@line 19247
  $643 = $ReallocAsyncCtx5 + 216 | 0; //@line 19248
  HEAP32[$643 >> 2] = $108; //@line 19249
  $644 = $ReallocAsyncCtx5 + 220 | 0; //@line 19250
  HEAP32[$644 >> 2] = $110; //@line 19251
  $645 = $ReallocAsyncCtx5 + 224 | 0; //@line 19252
  HEAP32[$645 >> 2] = $112; //@line 19253
  $646 = $ReallocAsyncCtx5 + 228 | 0; //@line 19254
  HEAP8[$646 >> 0] = $114; //@line 19255
  $647 = $ReallocAsyncCtx5 + 232 | 0; //@line 19256
  HEAP32[$647 >> 2] = $116; //@line 19257
  $648 = $ReallocAsyncCtx5 + 236 | 0; //@line 19258
  HEAP8[$648 >> 0] = $118; //@line 19259
  $649 = $ReallocAsyncCtx5 + 240 | 0; //@line 19260
  HEAP32[$649 >> 2] = $120; //@line 19261
  $650 = $ReallocAsyncCtx5 + 244 | 0; //@line 19262
  HEAP32[$650 >> 2] = $122; //@line 19263
  $651 = $ReallocAsyncCtx5 + 248 | 0; //@line 19264
  HEAP32[$651 >> 2] = $124; //@line 19265
  $652 = $ReallocAsyncCtx5 + 252 | 0; //@line 19266
  HEAP8[$652 >> 0] = $126; //@line 19267
  $653 = $ReallocAsyncCtx5 + 256 | 0; //@line 19268
  HEAP32[$653 >> 2] = $128; //@line 19269
  $654 = $ReallocAsyncCtx5 + 260 | 0; //@line 19270
  HEAP32[$654 >> 2] = $130; //@line 19271
  $655 = $ReallocAsyncCtx5 + 264 | 0; //@line 19272
  HEAP32[$655 >> 2] = $132; //@line 19273
  $656 = $ReallocAsyncCtx5 + 268 | 0; //@line 19274
  HEAP32[$656 >> 2] = $134; //@line 19275
  sp = STACKTOP; //@line 19276
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 19281
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7046
 STACKTOP = STACKTOP + 16 | 0; //@line 7047
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7047
 $1 = sp; //@line 7048
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7055
   $7 = $6 >>> 3; //@line 7056
   $8 = HEAP32[5806] | 0; //@line 7057
   $9 = $8 >>> $7; //@line 7058
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7064
    $16 = 23264 + ($14 << 1 << 2) | 0; //@line 7066
    $17 = $16 + 8 | 0; //@line 7067
    $18 = HEAP32[$17 >> 2] | 0; //@line 7068
    $19 = $18 + 8 | 0; //@line 7069
    $20 = HEAP32[$19 >> 2] | 0; //@line 7070
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5806] = $8 & ~(1 << $14); //@line 7077
     } else {
      if ((HEAP32[5810] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7082
      }
      $27 = $20 + 12 | 0; //@line 7085
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7089
       HEAP32[$17 >> 2] = $20; //@line 7090
       break;
      } else {
       _abort(); //@line 7093
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7098
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7101
    $34 = $18 + $30 + 4 | 0; //@line 7103
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7106
    $$0 = $19; //@line 7107
    STACKTOP = sp; //@line 7108
    return $$0 | 0; //@line 7108
   }
   $37 = HEAP32[5808] | 0; //@line 7110
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7116
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7119
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7122
     $49 = $47 >>> 12 & 16; //@line 7124
     $50 = $47 >>> $49; //@line 7125
     $52 = $50 >>> 5 & 8; //@line 7127
     $54 = $50 >>> $52; //@line 7129
     $56 = $54 >>> 2 & 4; //@line 7131
     $58 = $54 >>> $56; //@line 7133
     $60 = $58 >>> 1 & 2; //@line 7135
     $62 = $58 >>> $60; //@line 7137
     $64 = $62 >>> 1 & 1; //@line 7139
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7142
     $69 = 23264 + ($67 << 1 << 2) | 0; //@line 7144
     $70 = $69 + 8 | 0; //@line 7145
     $71 = HEAP32[$70 >> 2] | 0; //@line 7146
     $72 = $71 + 8 | 0; //@line 7147
     $73 = HEAP32[$72 >> 2] | 0; //@line 7148
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7154
       HEAP32[5806] = $77; //@line 7155
       $98 = $77; //@line 7156
      } else {
       if ((HEAP32[5810] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7161
       }
       $80 = $73 + 12 | 0; //@line 7164
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7168
        HEAP32[$70 >> 2] = $73; //@line 7169
        $98 = $8; //@line 7170
        break;
       } else {
        _abort(); //@line 7173
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7178
     $84 = $83 - $6 | 0; //@line 7179
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7182
     $87 = $71 + $6 | 0; //@line 7183
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 7186
     HEAP32[$71 + $83 >> 2] = $84; //@line 7188
     if ($37 | 0) {
      $92 = HEAP32[5811] | 0; //@line 7191
      $93 = $37 >>> 3; //@line 7192
      $95 = 23264 + ($93 << 1 << 2) | 0; //@line 7194
      $96 = 1 << $93; //@line 7195
      if (!($98 & $96)) {
       HEAP32[5806] = $98 | $96; //@line 7200
       $$0199 = $95; //@line 7202
       $$pre$phiZ2D = $95 + 8 | 0; //@line 7202
      } else {
       $101 = $95 + 8 | 0; //@line 7204
       $102 = HEAP32[$101 >> 2] | 0; //@line 7205
       if ((HEAP32[5810] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 7209
       } else {
        $$0199 = $102; //@line 7212
        $$pre$phiZ2D = $101; //@line 7212
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 7215
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 7217
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 7219
      HEAP32[$92 + 12 >> 2] = $95; //@line 7221
     }
     HEAP32[5808] = $84; //@line 7223
     HEAP32[5811] = $87; //@line 7224
     $$0 = $72; //@line 7225
     STACKTOP = sp; //@line 7226
     return $$0 | 0; //@line 7226
    }
    $108 = HEAP32[5807] | 0; //@line 7228
    if (!$108) {
     $$0197 = $6; //@line 7231
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 7235
     $114 = $112 >>> 12 & 16; //@line 7237
     $115 = $112 >>> $114; //@line 7238
     $117 = $115 >>> 5 & 8; //@line 7240
     $119 = $115 >>> $117; //@line 7242
     $121 = $119 >>> 2 & 4; //@line 7244
     $123 = $119 >>> $121; //@line 7246
     $125 = $123 >>> 1 & 2; //@line 7248
     $127 = $123 >>> $125; //@line 7250
     $129 = $127 >>> 1 & 1; //@line 7252
     $134 = HEAP32[23528 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 7257
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 7261
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7267
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 7270
      $$0193$lcssa$i = $138; //@line 7270
     } else {
      $$01926$i = $134; //@line 7272
      $$01935$i = $138; //@line 7272
      $146 = $143; //@line 7272
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 7277
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 7278
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 7279
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 7280
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7286
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 7289
        $$0193$lcssa$i = $$$0193$i; //@line 7289
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 7292
        $$01935$i = $$$0193$i; //@line 7292
       }
      }
     }
     $157 = HEAP32[5810] | 0; //@line 7296
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7299
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 7302
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7305
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 7309
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 7311
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 7315
       $176 = HEAP32[$175 >> 2] | 0; //@line 7316
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 7319
        $179 = HEAP32[$178 >> 2] | 0; //@line 7320
        if (!$179) {
         $$3$i = 0; //@line 7323
         break;
        } else {
         $$1196$i = $179; //@line 7326
         $$1198$i = $178; //@line 7326
        }
       } else {
        $$1196$i = $176; //@line 7329
        $$1198$i = $175; //@line 7329
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 7332
        $182 = HEAP32[$181 >> 2] | 0; //@line 7333
        if ($182 | 0) {
         $$1196$i = $182; //@line 7336
         $$1198$i = $181; //@line 7336
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 7339
        $185 = HEAP32[$184 >> 2] | 0; //@line 7340
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 7345
         $$1198$i = $184; //@line 7345
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 7350
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 7353
        $$3$i = $$1196$i; //@line 7354
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 7359
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 7362
       }
       $169 = $167 + 12 | 0; //@line 7365
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 7369
       }
       $172 = $164 + 8 | 0; //@line 7372
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 7376
        HEAP32[$172 >> 2] = $167; //@line 7377
        $$3$i = $164; //@line 7378
        break;
       } else {
        _abort(); //@line 7381
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 7390
       $191 = 23528 + ($190 << 2) | 0; //@line 7391
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 7396
         if (!$$3$i) {
          HEAP32[5807] = $108 & ~(1 << $190); //@line 7402
          break L73;
         }
        } else {
         if ((HEAP32[5810] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 7409
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 7417
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5810] | 0; //@line 7427
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 7430
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 7434
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 7436
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 7442
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 7446
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 7448
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 7454
       if ($214 | 0) {
        if ((HEAP32[5810] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 7460
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 7464
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 7466
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 7474
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 7477
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 7479
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 7482
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 7486
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 7489
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 7491
      if ($37 | 0) {
       $234 = HEAP32[5811] | 0; //@line 7494
       $235 = $37 >>> 3; //@line 7495
       $237 = 23264 + ($235 << 1 << 2) | 0; //@line 7497
       $238 = 1 << $235; //@line 7498
       if (!($8 & $238)) {
        HEAP32[5806] = $8 | $238; //@line 7503
        $$0189$i = $237; //@line 7505
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 7505
       } else {
        $242 = $237 + 8 | 0; //@line 7507
        $243 = HEAP32[$242 >> 2] | 0; //@line 7508
        if ((HEAP32[5810] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 7512
        } else {
         $$0189$i = $243; //@line 7515
         $$pre$phi$iZ2D = $242; //@line 7515
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 7518
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 7520
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 7522
       HEAP32[$234 + 12 >> 2] = $237; //@line 7524
      }
      HEAP32[5808] = $$0193$lcssa$i; //@line 7526
      HEAP32[5811] = $159; //@line 7527
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 7530
     STACKTOP = sp; //@line 7531
     return $$0 | 0; //@line 7531
    }
   } else {
    $$0197 = $6; //@line 7534
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 7539
   } else {
    $251 = $0 + 11 | 0; //@line 7541
    $252 = $251 & -8; //@line 7542
    $253 = HEAP32[5807] | 0; //@line 7543
    if (!$253) {
     $$0197 = $252; //@line 7546
    } else {
     $255 = 0 - $252 | 0; //@line 7548
     $256 = $251 >>> 8; //@line 7549
     if (!$256) {
      $$0358$i = 0; //@line 7552
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 7556
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 7560
       $262 = $256 << $261; //@line 7561
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 7564
       $267 = $262 << $265; //@line 7566
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 7569
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 7574
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 7580
      }
     }
     $282 = HEAP32[23528 + ($$0358$i << 2) >> 2] | 0; //@line 7584
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 7588
       $$3$i203 = 0; //@line 7588
       $$3350$i = $255; //@line 7588
       label = 81; //@line 7589
      } else {
       $$0342$i = 0; //@line 7596
       $$0347$i = $255; //@line 7596
       $$0353$i = $282; //@line 7596
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 7596
       $$0362$i = 0; //@line 7596
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 7601
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 7606
          $$435113$i = 0; //@line 7606
          $$435712$i = $$0353$i; //@line 7606
          label = 85; //@line 7607
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 7610
          $$1348$i = $292; //@line 7610
         }
        } else {
         $$1343$i = $$0342$i; //@line 7613
         $$1348$i = $$0347$i; //@line 7613
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 7616
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 7619
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 7623
        $302 = ($$0353$i | 0) == 0; //@line 7624
        if ($302) {
         $$2355$i = $$1363$i; //@line 7629
         $$3$i203 = $$1343$i; //@line 7629
         $$3350$i = $$1348$i; //@line 7629
         label = 81; //@line 7630
         break;
        } else {
         $$0342$i = $$1343$i; //@line 7633
         $$0347$i = $$1348$i; //@line 7633
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 7633
         $$0362$i = $$1363$i; //@line 7633
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 7643
       $309 = $253 & ($306 | 0 - $306); //@line 7646
       if (!$309) {
        $$0197 = $252; //@line 7649
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 7654
       $315 = $313 >>> 12 & 16; //@line 7656
       $316 = $313 >>> $315; //@line 7657
       $318 = $316 >>> 5 & 8; //@line 7659
       $320 = $316 >>> $318; //@line 7661
       $322 = $320 >>> 2 & 4; //@line 7663
       $324 = $320 >>> $322; //@line 7665
       $326 = $324 >>> 1 & 2; //@line 7667
       $328 = $324 >>> $326; //@line 7669
       $330 = $328 >>> 1 & 1; //@line 7671
       $$4$ph$i = 0; //@line 7677
       $$4357$ph$i = HEAP32[23528 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 7677
      } else {
       $$4$ph$i = $$3$i203; //@line 7679
       $$4357$ph$i = $$2355$i; //@line 7679
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 7683
       $$4351$lcssa$i = $$3350$i; //@line 7683
      } else {
       $$414$i = $$4$ph$i; //@line 7685
       $$435113$i = $$3350$i; //@line 7685
       $$435712$i = $$4357$ph$i; //@line 7685
       label = 85; //@line 7686
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 7691
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 7695
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 7696
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 7697
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 7698
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7704
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 7707
        $$4351$lcssa$i = $$$4351$i; //@line 7707
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 7710
        $$435113$i = $$$4351$i; //@line 7710
        label = 85; //@line 7711
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 7717
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5808] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5810] | 0; //@line 7723
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 7726
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 7729
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 7732
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 7736
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 7738
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 7742
         $371 = HEAP32[$370 >> 2] | 0; //@line 7743
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 7746
          $374 = HEAP32[$373 >> 2] | 0; //@line 7747
          if (!$374) {
           $$3372$i = 0; //@line 7750
           break;
          } else {
           $$1370$i = $374; //@line 7753
           $$1374$i = $373; //@line 7753
          }
         } else {
          $$1370$i = $371; //@line 7756
          $$1374$i = $370; //@line 7756
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 7759
          $377 = HEAP32[$376 >> 2] | 0; //@line 7760
          if ($377 | 0) {
           $$1370$i = $377; //@line 7763
           $$1374$i = $376; //@line 7763
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 7766
          $380 = HEAP32[$379 >> 2] | 0; //@line 7767
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 7772
           $$1374$i = $379; //@line 7772
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 7777
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 7780
          $$3372$i = $$1370$i; //@line 7781
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 7786
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 7789
         }
         $364 = $362 + 12 | 0; //@line 7792
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 7796
         }
         $367 = $359 + 8 | 0; //@line 7799
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 7803
          HEAP32[$367 >> 2] = $362; //@line 7804
          $$3372$i = $359; //@line 7805
          break;
         } else {
          _abort(); //@line 7808
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 7816
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 7819
         $386 = 23528 + ($385 << 2) | 0; //@line 7820
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 7825
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 7830
            HEAP32[5807] = $391; //@line 7831
            $475 = $391; //@line 7832
            break L164;
           }
          } else {
           if ((HEAP32[5810] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 7839
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 7847
            if (!$$3372$i) {
             $475 = $253; //@line 7850
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5810] | 0; //@line 7858
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 7861
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 7865
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 7867
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 7873
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 7877
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 7879
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 7885
         if (!$409) {
          $475 = $253; //@line 7888
         } else {
          if ((HEAP32[5810] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 7893
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 7897
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 7899
           $475 = $253; //@line 7900
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 7909
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 7912
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 7914
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 7917
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 7921
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 7924
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 7926
         $428 = $$4351$lcssa$i >>> 3; //@line 7927
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23264 + ($428 << 1 << 2) | 0; //@line 7931
          $432 = HEAP32[5806] | 0; //@line 7932
          $433 = 1 << $428; //@line 7933
          if (!($432 & $433)) {
           HEAP32[5806] = $432 | $433; //@line 7938
           $$0368$i = $431; //@line 7940
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 7940
          } else {
           $437 = $431 + 8 | 0; //@line 7942
           $438 = HEAP32[$437 >> 2] | 0; //@line 7943
           if ((HEAP32[5810] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 7947
           } else {
            $$0368$i = $438; //@line 7950
            $$pre$phi$i211Z2D = $437; //@line 7950
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 7953
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 7955
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 7957
          HEAP32[$354 + 12 >> 2] = $431; //@line 7959
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 7962
         if (!$444) {
          $$0361$i = 0; //@line 7965
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 7969
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 7973
           $450 = $444 << $449; //@line 7974
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 7977
           $455 = $450 << $453; //@line 7979
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 7982
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 7987
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 7993
          }
         }
         $469 = 23528 + ($$0361$i << 2) | 0; //@line 7996
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 7998
         $471 = $354 + 16 | 0; //@line 7999
         HEAP32[$471 + 4 >> 2] = 0; //@line 8001
         HEAP32[$471 >> 2] = 0; //@line 8002
         $473 = 1 << $$0361$i; //@line 8003
         if (!($475 & $473)) {
          HEAP32[5807] = $475 | $473; //@line 8008
          HEAP32[$469 >> 2] = $354; //@line 8009
          HEAP32[$354 + 24 >> 2] = $469; //@line 8011
          HEAP32[$354 + 12 >> 2] = $354; //@line 8013
          HEAP32[$354 + 8 >> 2] = $354; //@line 8015
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8024
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8024
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8031
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8035
          $494 = HEAP32[$492 >> 2] | 0; //@line 8037
          if (!$494) {
           label = 136; //@line 8040
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8043
           $$0345$i = $494; //@line 8043
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5810] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8050
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8053
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8055
           HEAP32[$354 + 12 >> 2] = $354; //@line 8057
           HEAP32[$354 + 8 >> 2] = $354; //@line 8059
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8064
          $502 = HEAP32[$501 >> 2] | 0; //@line 8065
          $503 = HEAP32[5810] | 0; //@line 8066
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8072
           HEAP32[$501 >> 2] = $354; //@line 8073
           HEAP32[$354 + 8 >> 2] = $502; //@line 8075
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8077
           HEAP32[$354 + 24 >> 2] = 0; //@line 8079
           break;
          } else {
           _abort(); //@line 8082
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8089
       STACKTOP = sp; //@line 8090
       return $$0 | 0; //@line 8090
      } else {
       $$0197 = $252; //@line 8092
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5808] | 0; //@line 8099
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8102
  $515 = HEAP32[5811] | 0; //@line 8103
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8106
   HEAP32[5811] = $517; //@line 8107
   HEAP32[5808] = $514; //@line 8108
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8111
   HEAP32[$515 + $512 >> 2] = $514; //@line 8113
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8116
  } else {
   HEAP32[5808] = 0; //@line 8118
   HEAP32[5811] = 0; //@line 8119
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8122
   $526 = $515 + $512 + 4 | 0; //@line 8124
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8127
  }
  $$0 = $515 + 8 | 0; //@line 8130
  STACKTOP = sp; //@line 8131
  return $$0 | 0; //@line 8131
 }
 $530 = HEAP32[5809] | 0; //@line 8133
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8136
  HEAP32[5809] = $532; //@line 8137
  $533 = HEAP32[5812] | 0; //@line 8138
  $534 = $533 + $$0197 | 0; //@line 8139
  HEAP32[5812] = $534; //@line 8140
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8143
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8146
  $$0 = $533 + 8 | 0; //@line 8148
  STACKTOP = sp; //@line 8149
  return $$0 | 0; //@line 8149
 }
 if (!(HEAP32[5924] | 0)) {
  HEAP32[5926] = 4096; //@line 8154
  HEAP32[5925] = 4096; //@line 8155
  HEAP32[5927] = -1; //@line 8156
  HEAP32[5928] = -1; //@line 8157
  HEAP32[5929] = 0; //@line 8158
  HEAP32[5917] = 0; //@line 8159
  HEAP32[5924] = $1 & -16 ^ 1431655768; //@line 8163
  $548 = 4096; //@line 8164
 } else {
  $548 = HEAP32[5926] | 0; //@line 8167
 }
 $545 = $$0197 + 48 | 0; //@line 8169
 $546 = $$0197 + 47 | 0; //@line 8170
 $547 = $548 + $546 | 0; //@line 8171
 $549 = 0 - $548 | 0; //@line 8172
 $550 = $547 & $549; //@line 8173
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8176
  STACKTOP = sp; //@line 8177
  return $$0 | 0; //@line 8177
 }
 $552 = HEAP32[5916] | 0; //@line 8179
 if ($552 | 0) {
  $554 = HEAP32[5914] | 0; //@line 8182
  $555 = $554 + $550 | 0; //@line 8183
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 8188
   STACKTOP = sp; //@line 8189
   return $$0 | 0; //@line 8189
  }
 }
 L244 : do {
  if (!(HEAP32[5917] & 4)) {
   $561 = HEAP32[5812] | 0; //@line 8197
   L246 : do {
    if (!$561) {
     label = 163; //@line 8201
    } else {
     $$0$i$i = 23672; //@line 8203
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 8205
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 8208
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 8217
      if (!$570) {
       label = 163; //@line 8220
       break L246;
      } else {
       $$0$i$i = $570; //@line 8223
      }
     }
     $595 = $547 - $530 & $549; //@line 8227
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 8230
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 8238
       } else {
        $$723947$i = $595; //@line 8240
        $$748$i = $597; //@line 8240
        label = 180; //@line 8241
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 8245
       $$2253$ph$i = $595; //@line 8245
       label = 171; //@line 8246
      }
     } else {
      $$2234243136$i = 0; //@line 8249
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 8255
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 8258
     } else {
      $574 = $572; //@line 8260
      $575 = HEAP32[5925] | 0; //@line 8261
      $576 = $575 + -1 | 0; //@line 8262
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 8270
      $584 = HEAP32[5914] | 0; //@line 8271
      $585 = $$$i + $584 | 0; //@line 8272
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[5916] | 0; //@line 8277
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 8284
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 8288
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 8291
        $$748$i = $572; //@line 8291
        label = 180; //@line 8292
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 8295
        $$2253$ph$i = $$$i; //@line 8295
        label = 171; //@line 8296
       }
      } else {
       $$2234243136$i = 0; //@line 8299
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 8306
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 8315
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 8318
       $$748$i = $$2247$ph$i; //@line 8318
       label = 180; //@line 8319
       break L244;
      }
     }
     $607 = HEAP32[5926] | 0; //@line 8323
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 8327
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 8330
      $$748$i = $$2247$ph$i; //@line 8330
      label = 180; //@line 8331
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 8337
      $$2234243136$i = 0; //@line 8338
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 8342
      $$748$i = $$2247$ph$i; //@line 8342
      label = 180; //@line 8343
      break L244;
     }
    }
   } while (0);
   HEAP32[5917] = HEAP32[5917] | 4; //@line 8350
   $$4236$i = $$2234243136$i; //@line 8351
   label = 178; //@line 8352
  } else {
   $$4236$i = 0; //@line 8354
   label = 178; //@line 8355
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 8361
   $621 = _sbrk(0) | 0; //@line 8362
   $627 = $621 - $620 | 0; //@line 8370
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 8372
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 8380
    $$748$i = $620; //@line 8380
    label = 180; //@line 8381
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[5914] | 0) + $$723947$i | 0; //@line 8387
  HEAP32[5914] = $633; //@line 8388
  if ($633 >>> 0 > (HEAP32[5915] | 0) >>> 0) {
   HEAP32[5915] = $633; //@line 8392
  }
  $636 = HEAP32[5812] | 0; //@line 8394
  do {
   if (!$636) {
    $638 = HEAP32[5810] | 0; //@line 8398
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5810] = $$748$i; //@line 8403
    }
    HEAP32[5918] = $$748$i; //@line 8405
    HEAP32[5919] = $$723947$i; //@line 8406
    HEAP32[5921] = 0; //@line 8407
    HEAP32[5815] = HEAP32[5924]; //@line 8409
    HEAP32[5814] = -1; //@line 8410
    HEAP32[5819] = 23264; //@line 8411
    HEAP32[5818] = 23264; //@line 8412
    HEAP32[5821] = 23272; //@line 8413
    HEAP32[5820] = 23272; //@line 8414
    HEAP32[5823] = 23280; //@line 8415
    HEAP32[5822] = 23280; //@line 8416
    HEAP32[5825] = 23288; //@line 8417
    HEAP32[5824] = 23288; //@line 8418
    HEAP32[5827] = 23296; //@line 8419
    HEAP32[5826] = 23296; //@line 8420
    HEAP32[5829] = 23304; //@line 8421
    HEAP32[5828] = 23304; //@line 8422
    HEAP32[5831] = 23312; //@line 8423
    HEAP32[5830] = 23312; //@line 8424
    HEAP32[5833] = 23320; //@line 8425
    HEAP32[5832] = 23320; //@line 8426
    HEAP32[5835] = 23328; //@line 8427
    HEAP32[5834] = 23328; //@line 8428
    HEAP32[5837] = 23336; //@line 8429
    HEAP32[5836] = 23336; //@line 8430
    HEAP32[5839] = 23344; //@line 8431
    HEAP32[5838] = 23344; //@line 8432
    HEAP32[5841] = 23352; //@line 8433
    HEAP32[5840] = 23352; //@line 8434
    HEAP32[5843] = 23360; //@line 8435
    HEAP32[5842] = 23360; //@line 8436
    HEAP32[5845] = 23368; //@line 8437
    HEAP32[5844] = 23368; //@line 8438
    HEAP32[5847] = 23376; //@line 8439
    HEAP32[5846] = 23376; //@line 8440
    HEAP32[5849] = 23384; //@line 8441
    HEAP32[5848] = 23384; //@line 8442
    HEAP32[5851] = 23392; //@line 8443
    HEAP32[5850] = 23392; //@line 8444
    HEAP32[5853] = 23400; //@line 8445
    HEAP32[5852] = 23400; //@line 8446
    HEAP32[5855] = 23408; //@line 8447
    HEAP32[5854] = 23408; //@line 8448
    HEAP32[5857] = 23416; //@line 8449
    HEAP32[5856] = 23416; //@line 8450
    HEAP32[5859] = 23424; //@line 8451
    HEAP32[5858] = 23424; //@line 8452
    HEAP32[5861] = 23432; //@line 8453
    HEAP32[5860] = 23432; //@line 8454
    HEAP32[5863] = 23440; //@line 8455
    HEAP32[5862] = 23440; //@line 8456
    HEAP32[5865] = 23448; //@line 8457
    HEAP32[5864] = 23448; //@line 8458
    HEAP32[5867] = 23456; //@line 8459
    HEAP32[5866] = 23456; //@line 8460
    HEAP32[5869] = 23464; //@line 8461
    HEAP32[5868] = 23464; //@line 8462
    HEAP32[5871] = 23472; //@line 8463
    HEAP32[5870] = 23472; //@line 8464
    HEAP32[5873] = 23480; //@line 8465
    HEAP32[5872] = 23480; //@line 8466
    HEAP32[5875] = 23488; //@line 8467
    HEAP32[5874] = 23488; //@line 8468
    HEAP32[5877] = 23496; //@line 8469
    HEAP32[5876] = 23496; //@line 8470
    HEAP32[5879] = 23504; //@line 8471
    HEAP32[5878] = 23504; //@line 8472
    HEAP32[5881] = 23512; //@line 8473
    HEAP32[5880] = 23512; //@line 8474
    $642 = $$723947$i + -40 | 0; //@line 8475
    $644 = $$748$i + 8 | 0; //@line 8477
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 8482
    $650 = $$748$i + $649 | 0; //@line 8483
    $651 = $642 - $649 | 0; //@line 8484
    HEAP32[5812] = $650; //@line 8485
    HEAP32[5809] = $651; //@line 8486
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 8489
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 8492
    HEAP32[5813] = HEAP32[5928]; //@line 8494
   } else {
    $$024367$i = 23672; //@line 8496
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 8498
     $658 = $$024367$i + 4 | 0; //@line 8499
     $659 = HEAP32[$658 >> 2] | 0; //@line 8500
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 8504
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 8508
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 8513
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 8527
       $673 = (HEAP32[5809] | 0) + $$723947$i | 0; //@line 8529
       $675 = $636 + 8 | 0; //@line 8531
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 8536
       $681 = $636 + $680 | 0; //@line 8537
       $682 = $673 - $680 | 0; //@line 8538
       HEAP32[5812] = $681; //@line 8539
       HEAP32[5809] = $682; //@line 8540
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 8543
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 8546
       HEAP32[5813] = HEAP32[5928]; //@line 8548
       break;
      }
     }
    }
    $688 = HEAP32[5810] | 0; //@line 8553
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5810] = $$748$i; //@line 8556
     $753 = $$748$i; //@line 8557
    } else {
     $753 = $688; //@line 8559
    }
    $690 = $$748$i + $$723947$i | 0; //@line 8561
    $$124466$i = 23672; //@line 8562
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 8567
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 8571
     if (!$694) {
      $$0$i$i$i = 23672; //@line 8574
      break;
     } else {
      $$124466$i = $694; //@line 8577
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 8586
      $700 = $$124466$i + 4 | 0; //@line 8587
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 8590
      $704 = $$748$i + 8 | 0; //@line 8592
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 8598
      $712 = $690 + 8 | 0; //@line 8600
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 8606
      $722 = $710 + $$0197 | 0; //@line 8610
      $723 = $718 - $710 - $$0197 | 0; //@line 8611
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 8614
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5809] | 0) + $723 | 0; //@line 8619
        HEAP32[5809] = $728; //@line 8620
        HEAP32[5812] = $722; //@line 8621
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 8624
       } else {
        if ((HEAP32[5811] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5808] | 0) + $723 | 0; //@line 8630
         HEAP32[5808] = $734; //@line 8631
         HEAP32[5811] = $722; //@line 8632
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 8635
         HEAP32[$722 + $734 >> 2] = $734; //@line 8637
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 8641
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 8645
         $743 = $739 >>> 3; //@line 8646
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 8651
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 8653
           $750 = 23264 + ($743 << 1 << 2) | 0; //@line 8655
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 8661
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 8670
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5806] = HEAP32[5806] & ~(1 << $743); //@line 8680
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 8687
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 8691
             }
             $764 = $748 + 8 | 0; //@line 8694
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 8698
              break;
             }
             _abort(); //@line 8701
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 8706
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 8707
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 8710
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 8712
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 8716
             $783 = $782 + 4 | 0; //@line 8717
             $784 = HEAP32[$783 >> 2] | 0; //@line 8718
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 8721
              if (!$786) {
               $$3$i$i = 0; //@line 8724
               break;
              } else {
               $$1291$i$i = $786; //@line 8727
               $$1293$i$i = $782; //@line 8727
              }
             } else {
              $$1291$i$i = $784; //@line 8730
              $$1293$i$i = $783; //@line 8730
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 8733
              $789 = HEAP32[$788 >> 2] | 0; //@line 8734
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 8737
               $$1293$i$i = $788; //@line 8737
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 8740
              $792 = HEAP32[$791 >> 2] | 0; //@line 8741
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 8746
               $$1293$i$i = $791; //@line 8746
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 8751
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 8754
              $$3$i$i = $$1291$i$i; //@line 8755
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 8760
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 8763
             }
             $776 = $774 + 12 | 0; //@line 8766
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 8770
             }
             $779 = $771 + 8 | 0; //@line 8773
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 8777
              HEAP32[$779 >> 2] = $774; //@line 8778
              $$3$i$i = $771; //@line 8779
              break;
             } else {
              _abort(); //@line 8782
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 8792
           $798 = 23528 + ($797 << 2) | 0; //@line 8793
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 8798
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5807] = HEAP32[5807] & ~(1 << $797); //@line 8807
             break L311;
            } else {
             if ((HEAP32[5810] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 8813
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 8821
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5810] | 0; //@line 8831
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 8834
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 8838
           $815 = $718 + 16 | 0; //@line 8839
           $816 = HEAP32[$815 >> 2] | 0; //@line 8840
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 8846
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 8850
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 8852
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 8858
           if (!$822) {
            break;
           }
           if ((HEAP32[5810] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 8866
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 8870
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 8872
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 8879
         $$0287$i$i = $742 + $723 | 0; //@line 8879
        } else {
         $$0$i17$i = $718; //@line 8881
         $$0287$i$i = $723; //@line 8881
        }
        $830 = $$0$i17$i + 4 | 0; //@line 8883
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 8886
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 8889
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 8891
        $836 = $$0287$i$i >>> 3; //@line 8892
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23264 + ($836 << 1 << 2) | 0; //@line 8896
         $840 = HEAP32[5806] | 0; //@line 8897
         $841 = 1 << $836; //@line 8898
         do {
          if (!($840 & $841)) {
           HEAP32[5806] = $840 | $841; //@line 8904
           $$0295$i$i = $839; //@line 8906
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 8906
          } else {
           $845 = $839 + 8 | 0; //@line 8908
           $846 = HEAP32[$845 >> 2] | 0; //@line 8909
           if ((HEAP32[5810] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 8913
            $$pre$phi$i19$iZ2D = $845; //@line 8913
            break;
           }
           _abort(); //@line 8916
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 8920
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 8922
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 8924
         HEAP32[$722 + 12 >> 2] = $839; //@line 8926
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 8929
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 8933
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 8937
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 8942
          $858 = $852 << $857; //@line 8943
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 8946
          $863 = $858 << $861; //@line 8948
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 8951
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 8956
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 8962
         }
        } while (0);
        $877 = 23528 + ($$0296$i$i << 2) | 0; //@line 8965
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 8967
        $879 = $722 + 16 | 0; //@line 8968
        HEAP32[$879 + 4 >> 2] = 0; //@line 8970
        HEAP32[$879 >> 2] = 0; //@line 8971
        $881 = HEAP32[5807] | 0; //@line 8972
        $882 = 1 << $$0296$i$i; //@line 8973
        if (!($881 & $882)) {
         HEAP32[5807] = $881 | $882; //@line 8978
         HEAP32[$877 >> 2] = $722; //@line 8979
         HEAP32[$722 + 24 >> 2] = $877; //@line 8981
         HEAP32[$722 + 12 >> 2] = $722; //@line 8983
         HEAP32[$722 + 8 >> 2] = $722; //@line 8985
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 8994
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 8994
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9001
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9005
         $902 = HEAP32[$900 >> 2] | 0; //@line 9007
         if (!$902) {
          label = 260; //@line 9010
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9013
          $$0289$i$i = $902; //@line 9013
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5810] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9020
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9023
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9025
          HEAP32[$722 + 12 >> 2] = $722; //@line 9027
          HEAP32[$722 + 8 >> 2] = $722; //@line 9029
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9034
         $910 = HEAP32[$909 >> 2] | 0; //@line 9035
         $911 = HEAP32[5810] | 0; //@line 9036
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9042
          HEAP32[$909 >> 2] = $722; //@line 9043
          HEAP32[$722 + 8 >> 2] = $910; //@line 9045
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9047
          HEAP32[$722 + 24 >> 2] = 0; //@line 9049
          break;
         } else {
          _abort(); //@line 9052
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9059
      STACKTOP = sp; //@line 9060
      return $$0 | 0; //@line 9060
     } else {
      $$0$i$i$i = 23672; //@line 9062
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9066
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9071
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9079
    }
    $927 = $923 + -47 | 0; //@line 9081
    $929 = $927 + 8 | 0; //@line 9083
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9089
    $936 = $636 + 16 | 0; //@line 9090
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9092
    $939 = $938 + 8 | 0; //@line 9093
    $940 = $938 + 24 | 0; //@line 9094
    $941 = $$723947$i + -40 | 0; //@line 9095
    $943 = $$748$i + 8 | 0; //@line 9097
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9102
    $949 = $$748$i + $948 | 0; //@line 9103
    $950 = $941 - $948 | 0; //@line 9104
    HEAP32[5812] = $949; //@line 9105
    HEAP32[5809] = $950; //@line 9106
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9109
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9112
    HEAP32[5813] = HEAP32[5928]; //@line 9114
    $956 = $938 + 4 | 0; //@line 9115
    HEAP32[$956 >> 2] = 27; //@line 9116
    HEAP32[$939 >> 2] = HEAP32[5918]; //@line 9117
    HEAP32[$939 + 4 >> 2] = HEAP32[5919]; //@line 9117
    HEAP32[$939 + 8 >> 2] = HEAP32[5920]; //@line 9117
    HEAP32[$939 + 12 >> 2] = HEAP32[5921]; //@line 9117
    HEAP32[5918] = $$748$i; //@line 9118
    HEAP32[5919] = $$723947$i; //@line 9119
    HEAP32[5921] = 0; //@line 9120
    HEAP32[5920] = $939; //@line 9121
    $958 = $940; //@line 9122
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9124
     HEAP32[$958 >> 2] = 7; //@line 9125
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9138
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9141
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9144
     HEAP32[$938 >> 2] = $964; //@line 9145
     $969 = $964 >>> 3; //@line 9146
     if ($964 >>> 0 < 256) {
      $972 = 23264 + ($969 << 1 << 2) | 0; //@line 9150
      $973 = HEAP32[5806] | 0; //@line 9151
      $974 = 1 << $969; //@line 9152
      if (!($973 & $974)) {
       HEAP32[5806] = $973 | $974; //@line 9157
       $$0211$i$i = $972; //@line 9159
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9159
      } else {
       $978 = $972 + 8 | 0; //@line 9161
       $979 = HEAP32[$978 >> 2] | 0; //@line 9162
       if ((HEAP32[5810] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9166
       } else {
        $$0211$i$i = $979; //@line 9169
        $$pre$phi$i$iZ2D = $978; //@line 9169
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9172
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9174
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9176
      HEAP32[$636 + 12 >> 2] = $972; //@line 9178
      break;
     }
     $985 = $964 >>> 8; //@line 9181
     if (!$985) {
      $$0212$i$i = 0; //@line 9184
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 9188
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 9192
       $991 = $985 << $990; //@line 9193
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 9196
       $996 = $991 << $994; //@line 9198
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 9201
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 9206
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 9212
      }
     }
     $1010 = 23528 + ($$0212$i$i << 2) | 0; //@line 9215
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 9217
     HEAP32[$636 + 20 >> 2] = 0; //@line 9219
     HEAP32[$936 >> 2] = 0; //@line 9220
     $1013 = HEAP32[5807] | 0; //@line 9221
     $1014 = 1 << $$0212$i$i; //@line 9222
     if (!($1013 & $1014)) {
      HEAP32[5807] = $1013 | $1014; //@line 9227
      HEAP32[$1010 >> 2] = $636; //@line 9228
      HEAP32[$636 + 24 >> 2] = $1010; //@line 9230
      HEAP32[$636 + 12 >> 2] = $636; //@line 9232
      HEAP32[$636 + 8 >> 2] = $636; //@line 9234
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 9243
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 9243
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 9250
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 9254
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 9256
      if (!$1034) {
       label = 286; //@line 9259
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 9262
       $$0207$i$i = $1034; //@line 9262
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5810] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 9269
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 9272
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 9274
       HEAP32[$636 + 12 >> 2] = $636; //@line 9276
       HEAP32[$636 + 8 >> 2] = $636; //@line 9278
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 9283
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 9284
      $1043 = HEAP32[5810] | 0; //@line 9285
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 9291
       HEAP32[$1041 >> 2] = $636; //@line 9292
       HEAP32[$636 + 8 >> 2] = $1042; //@line 9294
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 9296
       HEAP32[$636 + 24 >> 2] = 0; //@line 9298
       break;
      } else {
       _abort(); //@line 9301
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5809] | 0; //@line 9308
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 9311
   HEAP32[5809] = $1054; //@line 9312
   $1055 = HEAP32[5812] | 0; //@line 9313
   $1056 = $1055 + $$0197 | 0; //@line 9314
   HEAP32[5812] = $1056; //@line 9315
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 9318
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 9321
   $$0 = $1055 + 8 | 0; //@line 9323
   STACKTOP = sp; //@line 9324
   return $$0 | 0; //@line 9324
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 9328
 $$0 = 0; //@line 9329
 STACKTOP = sp; //@line 9330
 return $$0 | 0; //@line 9330
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_476($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy24 = 0, $$pre20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $124 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $170 = 0, $174 = 0, $178 = 0, $18 = 0, $183 = 0, $189 = 0, $190 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $220 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $243 = 0, $245 = 0, $246 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $340 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $351 = 0, $352 = 0, $354 = 0, $355 = 0, $356 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $368 = 0, $372 = 0, $373 = 0, $375 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $53 = 0, $6 = 0, $61 = 0, $64 = 0, $69 = 0, $73 = 0, $74 = 0, $8 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29355
 STACKTOP = STACKTOP + 16 | 0; //@line 29356
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29356
 $$byval_copy24 = sp + 8 | 0; //@line 29357
 $$byval_copy = sp; //@line 29358
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29360
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29362
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29364
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29366
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29368
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29370
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29372
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29374
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29376
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29378
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29380
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29382
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29384
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29386
 $29 = $2 + 944 | 0; //@line 29387
 $30 = HEAP8[$29 >> 0] | 0; //@line 29388
 $$pre20 = $2 + 968 | 0; //@line 29391
 if ($30 & 32) {
  $33 = HEAP32[$$pre20 >> 2] | 0; //@line 29393
  if ($33 & 64 | 0) {
   HEAP32[$$pre20 >> 2] = $33 & -66; //@line 29398
  }
  do {
   if (!($30 & 9)) {
    label = 9; //@line 29404
   } else {
    $39 = $2 + 288 | 0; //@line 29406
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 4 >> 2] | 0) != 2) {
     if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
      label = 9; //@line 29418
      break;
     }
    }
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 29424
    __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 29426
    $53 = HEAP8[$2 + 895 >> 0] | 0; //@line 29428
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 11 >> 0] = $53; //@line 29431
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 10 >> 0] = 0; //@line 29434
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 12 >> 2] = 0; //@line 29437
    $170 = $2 + 373 | 0; //@line 29439
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $61 = $2 + 373 | 0; //@line 29444
    if (!(HEAP8[$61 >> 0] | 0)) {
     $64 = HEAP8[$29 >> 0] | 0; //@line 29448
     if (!($64 & 9)) {
      $170 = $61; //@line 29452
     } else {
      if ($64 & 8) {
       $69 = $2 + 264 | 0; //@line 29457
       if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) >> 2] | 0)) {
        $73 = $2 + 897 | 0; //@line 29462
        $74 = HEAP8[$73 >> 0] | 0; //@line 29463
        HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) + 14 >> 0] = $74; //@line 29466
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) + 4 >> 2] | 0)) {
         HEAP32[$2 + 956 >> 2] = 0; //@line 29473
         HEAP8[$2 + 380 >> 0] = 0; //@line 29475
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 29478
         $170 = $61; //@line 29479
         break;
        }
        if ((HEAPU8[$73 >> 0] | 0) >= (HEAPU8[$2 + 896 >> 0] | 0)) {
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 29489
         $170 = $61; //@line 29490
         break;
        }
        HEAP8[$29 >> 0] = HEAP8[$29 >> 0] & -33; //@line 29495
        $94 = HEAP32[$2 + 1328 >> 2] | 0; //@line 29497
        HEAP32[$28 >> 2] = 460; //@line 29498
        HEAP32[$28 + 4 >> 2] = 0; //@line 29500
        $ReallocAsyncCtx12 = _emscripten_realloc_async_context(68) | 0; //@line 29501
        HEAP32[$$byval_copy >> 2] = HEAP32[$28 >> 2]; //@line 29502
        HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 29502
        $95 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($94, $2, $$byval_copy) | 0; //@line 29503
        if (___async) {
         HEAP32[$ReallocAsyncCtx12 >> 2] = 461; //@line 29506
         $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 29507
         HEAP32[$96 >> 2] = $29; //@line 29508
         $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 29509
         HEAP32[$97 >> 2] = $2; //@line 29510
         $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 29511
         HEAP32[$98 >> 2] = $28; //@line 29512
         $99 = $ReallocAsyncCtx12 + 16 | 0; //@line 29513
         HEAP32[$99 >> 2] = $$pre20; //@line 29514
         $100 = $ReallocAsyncCtx12 + 20 | 0; //@line 29515
         HEAP32[$100 >> 2] = $4; //@line 29516
         $101 = $ReallocAsyncCtx12 + 24 | 0; //@line 29517
         HEAP32[$101 >> 2] = $6; //@line 29518
         $102 = $ReallocAsyncCtx12 + 28 | 0; //@line 29519
         HEAP32[$102 >> 2] = $8; //@line 29520
         $103 = $ReallocAsyncCtx12 + 32 | 0; //@line 29521
         HEAP32[$103 >> 2] = $10; //@line 29522
         $104 = $ReallocAsyncCtx12 + 36 | 0; //@line 29523
         HEAP32[$104 >> 2] = $12; //@line 29524
         $105 = $ReallocAsyncCtx12 + 40 | 0; //@line 29525
         HEAP32[$105 >> 2] = $14; //@line 29526
         $106 = $ReallocAsyncCtx12 + 44 | 0; //@line 29527
         HEAP32[$106 >> 2] = $16; //@line 29528
         $107 = $ReallocAsyncCtx12 + 48 | 0; //@line 29529
         HEAP32[$107 >> 2] = $18; //@line 29530
         $108 = $ReallocAsyncCtx12 + 52 | 0; //@line 29531
         HEAP32[$108 >> 2] = $20; //@line 29532
         $109 = $ReallocAsyncCtx12 + 56 | 0; //@line 29533
         HEAP32[$109 >> 2] = $22; //@line 29534
         $110 = $ReallocAsyncCtx12 + 60 | 0; //@line 29535
         HEAP32[$110 >> 2] = $24; //@line 29536
         $111 = $ReallocAsyncCtx12 + 64 | 0; //@line 29537
         HEAP32[$111 >> 2] = $61; //@line 29538
         sp = STACKTOP; //@line 29539
         STACKTOP = sp; //@line 29540
         return;
        }
        HEAP32[___async_retval >> 2] = $95; //@line 29543
        ___async_unwind = 0; //@line 29544
        HEAP32[$ReallocAsyncCtx12 >> 2] = 461; //@line 29545
        $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 29546
        HEAP32[$96 >> 2] = $29; //@line 29547
        $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 29548
        HEAP32[$97 >> 2] = $2; //@line 29549
        $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 29550
        HEAP32[$98 >> 2] = $28; //@line 29551
        $99 = $ReallocAsyncCtx12 + 16 | 0; //@line 29552
        HEAP32[$99 >> 2] = $$pre20; //@line 29553
        $100 = $ReallocAsyncCtx12 + 20 | 0; //@line 29554
        HEAP32[$100 >> 2] = $4; //@line 29555
        $101 = $ReallocAsyncCtx12 + 24 | 0; //@line 29556
        HEAP32[$101 >> 2] = $6; //@line 29557
        $102 = $ReallocAsyncCtx12 + 28 | 0; //@line 29558
        HEAP32[$102 >> 2] = $8; //@line 29559
        $103 = $ReallocAsyncCtx12 + 32 | 0; //@line 29560
        HEAP32[$103 >> 2] = $10; //@line 29561
        $104 = $ReallocAsyncCtx12 + 36 | 0; //@line 29562
        HEAP32[$104 >> 2] = $12; //@line 29563
        $105 = $ReallocAsyncCtx12 + 40 | 0; //@line 29564
        HEAP32[$105 >> 2] = $14; //@line 29565
        $106 = $ReallocAsyncCtx12 + 44 | 0; //@line 29566
        HEAP32[$106 >> 2] = $16; //@line 29567
        $107 = $ReallocAsyncCtx12 + 48 | 0; //@line 29568
        HEAP32[$107 >> 2] = $18; //@line 29569
        $108 = $ReallocAsyncCtx12 + 52 | 0; //@line 29570
        HEAP32[$108 >> 2] = $20; //@line 29571
        $109 = $ReallocAsyncCtx12 + 56 | 0; //@line 29572
        HEAP32[$109 >> 2] = $22; //@line 29573
        $110 = $ReallocAsyncCtx12 + 60 | 0; //@line 29574
        HEAP32[$110 >> 2] = $24; //@line 29575
        $111 = $ReallocAsyncCtx12 + 64 | 0; //@line 29576
        HEAP32[$111 >> 2] = $61; //@line 29577
        sp = STACKTOP; //@line 29578
        STACKTOP = sp; //@line 29579
        return;
       }
      }
      $113 = $2 + 380 | 0; //@line 29582
      $118 = HEAP8[$29 >> 0] | 0; //@line 29587
      if (($118 & 2) == 0 ? (HEAPU8[$113 >> 0] | 0) < (HEAPU8[$2 + 1128 >> 0] | 0) : 0) {
       HEAP8[$29 >> 0] = $118 & -33; //@line 29593
       $137 = HEAP32[$2 + 1328 >> 2] | 0; //@line 29595
       HEAP32[$26 >> 2] = 460; //@line 29596
       HEAP32[$26 + 4 >> 2] = 0; //@line 29598
       $ReallocAsyncCtx11 = _emscripten_realloc_async_context(68) | 0; //@line 29599
       HEAP32[$$byval_copy24 >> 2] = HEAP32[$26 >> 2]; //@line 29600
       HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 29600
       $138 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($137, $2, $$byval_copy24) | 0; //@line 29601
       if (___async) {
        HEAP32[$ReallocAsyncCtx11 >> 2] = 463; //@line 29604
        $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 29605
        HEAP32[$139 >> 2] = $29; //@line 29606
        $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 29607
        HEAP32[$140 >> 2] = $2; //@line 29608
        $141 = $ReallocAsyncCtx11 + 12 | 0; //@line 29609
        HEAP32[$141 >> 2] = $$pre20; //@line 29610
        $142 = $ReallocAsyncCtx11 + 16 | 0; //@line 29611
        HEAP32[$142 >> 2] = $4; //@line 29612
        $143 = $ReallocAsyncCtx11 + 20 | 0; //@line 29613
        HEAP32[$143 >> 2] = $6; //@line 29614
        $144 = $ReallocAsyncCtx11 + 24 | 0; //@line 29615
        HEAP32[$144 >> 2] = $8; //@line 29616
        $145 = $ReallocAsyncCtx11 + 28 | 0; //@line 29617
        HEAP32[$145 >> 2] = $10; //@line 29618
        $146 = $ReallocAsyncCtx11 + 32 | 0; //@line 29619
        HEAP32[$146 >> 2] = $12; //@line 29620
        $147 = $ReallocAsyncCtx11 + 36 | 0; //@line 29621
        HEAP32[$147 >> 2] = $14; //@line 29622
        $148 = $ReallocAsyncCtx11 + 40 | 0; //@line 29623
        HEAP32[$148 >> 2] = $16; //@line 29624
        $149 = $ReallocAsyncCtx11 + 44 | 0; //@line 29625
        HEAP32[$149 >> 2] = $18; //@line 29626
        $150 = $ReallocAsyncCtx11 + 48 | 0; //@line 29627
        HEAP32[$150 >> 2] = $20; //@line 29628
        $151 = $ReallocAsyncCtx11 + 52 | 0; //@line 29629
        HEAP32[$151 >> 2] = $22; //@line 29630
        $152 = $ReallocAsyncCtx11 + 56 | 0; //@line 29631
        HEAP32[$152 >> 2] = $24; //@line 29632
        $153 = $ReallocAsyncCtx11 + 60 | 0; //@line 29633
        HEAP32[$153 >> 2] = $61; //@line 29634
        $154 = $ReallocAsyncCtx11 + 64 | 0; //@line 29635
        HEAP32[$154 >> 2] = $26; //@line 29636
        sp = STACKTOP; //@line 29637
        STACKTOP = sp; //@line 29638
        return;
       }
       HEAP32[___async_retval >> 2] = $138; //@line 29641
       ___async_unwind = 0; //@line 29642
       HEAP32[$ReallocAsyncCtx11 >> 2] = 463; //@line 29643
       $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 29644
       HEAP32[$139 >> 2] = $29; //@line 29645
       $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 29646
       HEAP32[$140 >> 2] = $2; //@line 29647
       $141 = $ReallocAsyncCtx11 + 12 | 0; //@line 29648
       HEAP32[$141 >> 2] = $$pre20; //@line 29649
       $142 = $ReallocAsyncCtx11 + 16 | 0; //@line 29650
       HEAP32[$142 >> 2] = $4; //@line 29651
       $143 = $ReallocAsyncCtx11 + 20 | 0; //@line 29652
       HEAP32[$143 >> 2] = $6; //@line 29653
       $144 = $ReallocAsyncCtx11 + 24 | 0; //@line 29654
       HEAP32[$144 >> 2] = $8; //@line 29655
       $145 = $ReallocAsyncCtx11 + 28 | 0; //@line 29656
       HEAP32[$145 >> 2] = $10; //@line 29657
       $146 = $ReallocAsyncCtx11 + 32 | 0; //@line 29658
       HEAP32[$146 >> 2] = $12; //@line 29659
       $147 = $ReallocAsyncCtx11 + 36 | 0; //@line 29660
       HEAP32[$147 >> 2] = $14; //@line 29661
       $148 = $ReallocAsyncCtx11 + 40 | 0; //@line 29662
       HEAP32[$148 >> 2] = $16; //@line 29663
       $149 = $ReallocAsyncCtx11 + 44 | 0; //@line 29664
       HEAP32[$149 >> 2] = $18; //@line 29665
       $150 = $ReallocAsyncCtx11 + 48 | 0; //@line 29666
       HEAP32[$150 >> 2] = $20; //@line 29667
       $151 = $ReallocAsyncCtx11 + 52 | 0; //@line 29668
       HEAP32[$151 >> 2] = $22; //@line 29669
       $152 = $ReallocAsyncCtx11 + 56 | 0; //@line 29670
       HEAP32[$152 >> 2] = $24; //@line 29671
       $153 = $ReallocAsyncCtx11 + 60 | 0; //@line 29672
       HEAP32[$153 >> 2] = $61; //@line 29673
       $154 = $ReallocAsyncCtx11 + 64 | 0; //@line 29674
       HEAP32[$154 >> 2] = $26; //@line 29675
       sp = STACKTOP; //@line 29676
       STACKTOP = sp; //@line 29677
       return;
      }
      if (!($118 & 2)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 29683
       $124 = $2 + 964 | 0; //@line 29684
       HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1; //@line 29687
      }
      HEAP8[$113 >> 0] = 0; //@line 29689
      if (!(HEAP8[$2 + 370 >> 0] | 0)) {
       $130 = $2 + 956 | 0; //@line 29694
       HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1; //@line 29697
      }
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 29701
      $170 = $61; //@line 29702
     }
    } else {
     $170 = $61; //@line 29705
    }
   }
  } while (0);
  do {
   if (HEAP8[$29 >> 0] & 2) {
    $159 = $2 + 288 | 0; //@line 29714
    if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($159) | 0) + 10 >> 0] | 0)) {
     if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
      break;
     }
    }
    HEAP8[$2 + 377 >> 0] = 0; //@line 29730
    HEAP8[$170 >> 0] = 0; //@line 29731
    if (!(HEAP8[$2 + 370 >> 0] | 0)) {
     $174 = $2 + 956 | 0; //@line 29736
     HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + 1; //@line 29739
    }
    $178 = HEAP8[$2 + 895 >> 0] | 0; //@line 29742
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($159) | 0) + 11 >> 0] = $178; //@line 29745
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 29748
   }
  } while (0);
  $183 = $2 + 377 | 0; //@line 29751
  if (HEAP8[$183 >> 0] | 0) {
   if (!(HEAP32[$$pre20 >> 2] & 16)) {
    HEAP8[$183 >> 0] = 0; //@line 29759
    $189 = $2 + 895 | 0; //@line 29760
    $190 = HEAP8[$189 >> 0] | 0; //@line 29761
    if (!(($190 & 255) < 9 ? ($190 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
     $220 = HEAP32[$2 >> 2] | 0; //@line 29768
     $223 = HEAP32[(HEAP32[$220 >> 2] | 0) + 16 >> 2] | 0; //@line 29771
     $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 29772
     FUNCTION_TABLE_vi[$223 & 1023]($220); //@line 29773
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 29776
      $224 = $ReallocAsyncCtx + 4 | 0; //@line 29777
      HEAP32[$224 >> 2] = $29; //@line 29778
      $225 = $ReallocAsyncCtx + 8 | 0; //@line 29779
      HEAP32[$225 >> 2] = $2; //@line 29780
      $226 = $ReallocAsyncCtx + 12 | 0; //@line 29781
      HEAP32[$226 >> 2] = $$pre20; //@line 29782
      $227 = $ReallocAsyncCtx + 16 | 0; //@line 29783
      HEAP32[$227 >> 2] = $4; //@line 29784
      $228 = $ReallocAsyncCtx + 20 | 0; //@line 29785
      HEAP32[$228 >> 2] = $6; //@line 29786
      $229 = $ReallocAsyncCtx + 24 | 0; //@line 29787
      HEAP32[$229 >> 2] = $8; //@line 29788
      $230 = $ReallocAsyncCtx + 28 | 0; //@line 29789
      HEAP32[$230 >> 2] = $10; //@line 29790
      $231 = $ReallocAsyncCtx + 32 | 0; //@line 29791
      HEAP32[$231 >> 2] = $12; //@line 29792
      $232 = $ReallocAsyncCtx + 36 | 0; //@line 29793
      HEAP32[$232 >> 2] = $22; //@line 29794
      $233 = $ReallocAsyncCtx + 40 | 0; //@line 29795
      HEAP32[$233 >> 2] = $24; //@line 29796
      $234 = $ReallocAsyncCtx + 44 | 0; //@line 29797
      HEAP32[$234 >> 2] = $14; //@line 29798
      $235 = $ReallocAsyncCtx + 48 | 0; //@line 29799
      HEAP32[$235 >> 2] = $16; //@line 29800
      $236 = $ReallocAsyncCtx + 52 | 0; //@line 29801
      HEAP32[$236 >> 2] = $18; //@line 29802
      $237 = $ReallocAsyncCtx + 56 | 0; //@line 29803
      HEAP32[$237 >> 2] = $20; //@line 29804
      $238 = $ReallocAsyncCtx + 60 | 0; //@line 29805
      HEAP32[$238 >> 2] = $170; //@line 29806
      $239 = $ReallocAsyncCtx + 64 | 0; //@line 29807
      HEAP32[$239 >> 2] = $189; //@line 29808
      sp = STACKTOP; //@line 29809
      STACKTOP = sp; //@line 29810
      return;
     }
     ___async_unwind = 0; //@line 29812
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 29813
     $224 = $ReallocAsyncCtx + 4 | 0; //@line 29814
     HEAP32[$224 >> 2] = $29; //@line 29815
     $225 = $ReallocAsyncCtx + 8 | 0; //@line 29816
     HEAP32[$225 >> 2] = $2; //@line 29817
     $226 = $ReallocAsyncCtx + 12 | 0; //@line 29818
     HEAP32[$226 >> 2] = $$pre20; //@line 29819
     $227 = $ReallocAsyncCtx + 16 | 0; //@line 29820
     HEAP32[$227 >> 2] = $4; //@line 29821
     $228 = $ReallocAsyncCtx + 20 | 0; //@line 29822
     HEAP32[$228 >> 2] = $6; //@line 29823
     $229 = $ReallocAsyncCtx + 24 | 0; //@line 29824
     HEAP32[$229 >> 2] = $8; //@line 29825
     $230 = $ReallocAsyncCtx + 28 | 0; //@line 29826
     HEAP32[$230 >> 2] = $10; //@line 29827
     $231 = $ReallocAsyncCtx + 32 | 0; //@line 29828
     HEAP32[$231 >> 2] = $12; //@line 29829
     $232 = $ReallocAsyncCtx + 36 | 0; //@line 29830
     HEAP32[$232 >> 2] = $22; //@line 29831
     $233 = $ReallocAsyncCtx + 40 | 0; //@line 29832
     HEAP32[$233 >> 2] = $24; //@line 29833
     $234 = $ReallocAsyncCtx + 44 | 0; //@line 29834
     HEAP32[$234 >> 2] = $14; //@line 29835
     $235 = $ReallocAsyncCtx + 48 | 0; //@line 29836
     HEAP32[$235 >> 2] = $16; //@line 29837
     $236 = $ReallocAsyncCtx + 52 | 0; //@line 29838
     HEAP32[$236 >> 2] = $18; //@line 29839
     $237 = $ReallocAsyncCtx + 56 | 0; //@line 29840
     HEAP32[$237 >> 2] = $20; //@line 29841
     $238 = $ReallocAsyncCtx + 60 | 0; //@line 29842
     HEAP32[$238 >> 2] = $170; //@line 29843
     $239 = $ReallocAsyncCtx + 64 | 0; //@line 29844
     HEAP32[$239 >> 2] = $189; //@line 29845
     sp = STACKTOP; //@line 29846
     STACKTOP = sp; //@line 29847
     return;
    }
    $195 = $190 + 1 << 24 >> 24; //@line 29849
    HEAP8[$189 >> 0] = $195; //@line 29850
    if ($195 & 1) {
     $199 = $2 + 1097 | 0; //@line 29855
     HEAP8[$199 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$199 >> 0] | 0) | 0; //@line 29858
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 29860
    $202 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 29861
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 29864
     $203 = $ReallocAsyncCtx9 + 4 | 0; //@line 29865
     HEAP32[$203 >> 2] = $29; //@line 29866
     $204 = $ReallocAsyncCtx9 + 8 | 0; //@line 29867
     HEAP32[$204 >> 2] = $2; //@line 29868
     $205 = $ReallocAsyncCtx9 + 12 | 0; //@line 29869
     HEAP32[$205 >> 2] = $$pre20; //@line 29870
     $206 = $ReallocAsyncCtx9 + 16 | 0; //@line 29871
     HEAP32[$206 >> 2] = $170; //@line 29872
     $207 = $ReallocAsyncCtx9 + 20 | 0; //@line 29873
     HEAP32[$207 >> 2] = $189; //@line 29874
     $208 = $ReallocAsyncCtx9 + 24 | 0; //@line 29875
     HEAP32[$208 >> 2] = $4; //@line 29876
     $209 = $ReallocAsyncCtx9 + 28 | 0; //@line 29877
     HEAP32[$209 >> 2] = $6; //@line 29878
     $210 = $ReallocAsyncCtx9 + 32 | 0; //@line 29879
     HEAP32[$210 >> 2] = $8; //@line 29880
     $211 = $ReallocAsyncCtx9 + 36 | 0; //@line 29881
     HEAP32[$211 >> 2] = $10; //@line 29882
     $212 = $ReallocAsyncCtx9 + 40 | 0; //@line 29883
     HEAP32[$212 >> 2] = $12; //@line 29884
     $213 = $ReallocAsyncCtx9 + 44 | 0; //@line 29885
     HEAP32[$213 >> 2] = $14; //@line 29886
     $214 = $ReallocAsyncCtx9 + 48 | 0; //@line 29887
     HEAP32[$214 >> 2] = $16; //@line 29888
     $215 = $ReallocAsyncCtx9 + 52 | 0; //@line 29889
     HEAP32[$215 >> 2] = $18; //@line 29890
     $216 = $ReallocAsyncCtx9 + 56 | 0; //@line 29891
     HEAP32[$216 >> 2] = $20; //@line 29892
     $217 = $ReallocAsyncCtx9 + 60 | 0; //@line 29893
     HEAP32[$217 >> 2] = $22; //@line 29894
     $218 = $ReallocAsyncCtx9 + 64 | 0; //@line 29895
     HEAP32[$218 >> 2] = $24; //@line 29896
     sp = STACKTOP; //@line 29897
     STACKTOP = sp; //@line 29898
     return;
    }
    HEAP32[___async_retval >> 2] = $202; //@line 29901
    ___async_unwind = 0; //@line 29902
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 29903
    $203 = $ReallocAsyncCtx9 + 4 | 0; //@line 29904
    HEAP32[$203 >> 2] = $29; //@line 29905
    $204 = $ReallocAsyncCtx9 + 8 | 0; //@line 29906
    HEAP32[$204 >> 2] = $2; //@line 29907
    $205 = $ReallocAsyncCtx9 + 12 | 0; //@line 29908
    HEAP32[$205 >> 2] = $$pre20; //@line 29909
    $206 = $ReallocAsyncCtx9 + 16 | 0; //@line 29910
    HEAP32[$206 >> 2] = $170; //@line 29911
    $207 = $ReallocAsyncCtx9 + 20 | 0; //@line 29912
    HEAP32[$207 >> 2] = $189; //@line 29913
    $208 = $ReallocAsyncCtx9 + 24 | 0; //@line 29914
    HEAP32[$208 >> 2] = $4; //@line 29915
    $209 = $ReallocAsyncCtx9 + 28 | 0; //@line 29916
    HEAP32[$209 >> 2] = $6; //@line 29917
    $210 = $ReallocAsyncCtx9 + 32 | 0; //@line 29918
    HEAP32[$210 >> 2] = $8; //@line 29919
    $211 = $ReallocAsyncCtx9 + 36 | 0; //@line 29920
    HEAP32[$211 >> 2] = $10; //@line 29921
    $212 = $ReallocAsyncCtx9 + 40 | 0; //@line 29922
    HEAP32[$212 >> 2] = $12; //@line 29923
    $213 = $ReallocAsyncCtx9 + 44 | 0; //@line 29924
    HEAP32[$213 >> 2] = $14; //@line 29925
    $214 = $ReallocAsyncCtx9 + 48 | 0; //@line 29926
    HEAP32[$214 >> 2] = $16; //@line 29927
    $215 = $ReallocAsyncCtx9 + 52 | 0; //@line 29928
    HEAP32[$215 >> 2] = $18; //@line 29929
    $216 = $ReallocAsyncCtx9 + 56 | 0; //@line 29930
    HEAP32[$216 >> 2] = $20; //@line 29931
    $217 = $ReallocAsyncCtx9 + 60 | 0; //@line 29932
    HEAP32[$217 >> 2] = $22; //@line 29933
    $218 = $ReallocAsyncCtx9 + 64 | 0; //@line 29934
    HEAP32[$218 >> 2] = $24; //@line 29935
    sp = STACKTOP; //@line 29936
    STACKTOP = sp; //@line 29937
    return;
   }
  }
 }
 $240 = HEAP32[$$pre20 >> 2] | 0; //@line 29941
 $243 = $240 & -3; //@line 29944
 if (!($240 & 2)) {
  $245 = $240; //@line 29946
 } else {
  HEAP32[$$pre20 >> 2] = $243; //@line 29948
  $245 = $243; //@line 29949
 }
 if ($245 | 0) {
  $330 = HEAP32[$22 >> 2] | 0; //@line 29953
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 29954
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($330, $24, 1e3); //@line 29955
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 29958
   $331 = $ReallocAsyncCtx8 + 4 | 0; //@line 29959
   HEAP32[$331 >> 2] = $29; //@line 29960
   $332 = $ReallocAsyncCtx8 + 8 | 0; //@line 29961
   HEAP32[$332 >> 2] = $2; //@line 29962
   $333 = $ReallocAsyncCtx8 + 12 | 0; //@line 29963
   HEAP32[$333 >> 2] = $4; //@line 29964
   $334 = $ReallocAsyncCtx8 + 16 | 0; //@line 29965
   HEAP32[$334 >> 2] = $6; //@line 29966
   $335 = $ReallocAsyncCtx8 + 20 | 0; //@line 29967
   HEAP32[$335 >> 2] = $8; //@line 29968
   $336 = $ReallocAsyncCtx8 + 24 | 0; //@line 29969
   HEAP32[$336 >> 2] = $10; //@line 29970
   $337 = $ReallocAsyncCtx8 + 28 | 0; //@line 29971
   HEAP32[$337 >> 2] = $12; //@line 29972
   sp = STACKTOP; //@line 29973
   STACKTOP = sp; //@line 29974
   return;
  }
  ___async_unwind = 0; //@line 29976
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 29977
  $331 = $ReallocAsyncCtx8 + 4 | 0; //@line 29978
  HEAP32[$331 >> 2] = $29; //@line 29979
  $332 = $ReallocAsyncCtx8 + 8 | 0; //@line 29980
  HEAP32[$332 >> 2] = $2; //@line 29981
  $333 = $ReallocAsyncCtx8 + 12 | 0; //@line 29982
  HEAP32[$333 >> 2] = $4; //@line 29983
  $334 = $ReallocAsyncCtx8 + 16 | 0; //@line 29984
  HEAP32[$334 >> 2] = $6; //@line 29985
  $335 = $ReallocAsyncCtx8 + 20 | 0; //@line 29986
  HEAP32[$335 >> 2] = $8; //@line 29987
  $336 = $ReallocAsyncCtx8 + 24 | 0; //@line 29988
  HEAP32[$336 >> 2] = $10; //@line 29989
  $337 = $ReallocAsyncCtx8 + 28 | 0; //@line 29990
  HEAP32[$337 >> 2] = $12; //@line 29991
  sp = STACKTOP; //@line 29992
  STACKTOP = sp; //@line 29993
  return;
 }
 $246 = HEAP8[$29 >> 0] | 0; //@line 29995
 if ($246 & 1) {
  HEAP8[$29 >> 0] = $246 & -2; //@line 30000
  $251 = HEAP32[$2 + 1324 >> 2] | 0; //@line 30002
  $253 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 30004
  $254 = $251 + 12 | 0; //@line 30005
  $255 = HEAP32[$254 >> 2] | 0; //@line 30006
  if (!$255) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 30009
   _mbed_assert_internal(15061, 15066, 1102); //@line 30010
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 30013
    $257 = $ReallocAsyncCtx18 + 4 | 0; //@line 30014
    HEAP32[$257 >> 2] = $29; //@line 30015
    $258 = $ReallocAsyncCtx18 + 8 | 0; //@line 30016
    HEAP32[$258 >> 2] = $251; //@line 30017
    $259 = $ReallocAsyncCtx18 + 12 | 0; //@line 30018
    HEAP32[$259 >> 2] = $253; //@line 30019
    $260 = $ReallocAsyncCtx18 + 16 | 0; //@line 30020
    HEAP32[$260 >> 2] = $2; //@line 30021
    $261 = $ReallocAsyncCtx18 + 20 | 0; //@line 30022
    HEAP32[$261 >> 2] = $4; //@line 30023
    $262 = $ReallocAsyncCtx18 + 24 | 0; //@line 30024
    HEAP32[$262 >> 2] = $6; //@line 30025
    $263 = $ReallocAsyncCtx18 + 28 | 0; //@line 30026
    HEAP32[$263 >> 2] = $8; //@line 30027
    $264 = $ReallocAsyncCtx18 + 32 | 0; //@line 30028
    HEAP32[$264 >> 2] = $10; //@line 30029
    $265 = $ReallocAsyncCtx18 + 36 | 0; //@line 30030
    HEAP32[$265 >> 2] = $12; //@line 30031
    $266 = $ReallocAsyncCtx18 + 40 | 0; //@line 30032
    HEAP32[$266 >> 2] = $14; //@line 30033
    $267 = $ReallocAsyncCtx18 + 44 | 0; //@line 30034
    HEAP32[$267 >> 2] = $16; //@line 30035
    $268 = $ReallocAsyncCtx18 + 48 | 0; //@line 30036
    HEAP32[$268 >> 2] = $18; //@line 30037
    $269 = $ReallocAsyncCtx18 + 52 | 0; //@line 30038
    HEAP32[$269 >> 2] = $20; //@line 30039
    $270 = $ReallocAsyncCtx18 + 56 | 0; //@line 30040
    HEAP32[$270 >> 2] = $254; //@line 30041
    sp = STACKTOP; //@line 30042
    STACKTOP = sp; //@line 30043
    return;
   }
   ___async_unwind = 0; //@line 30045
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 30046
   $257 = $ReallocAsyncCtx18 + 4 | 0; //@line 30047
   HEAP32[$257 >> 2] = $29; //@line 30048
   $258 = $ReallocAsyncCtx18 + 8 | 0; //@line 30049
   HEAP32[$258 >> 2] = $251; //@line 30050
   $259 = $ReallocAsyncCtx18 + 12 | 0; //@line 30051
   HEAP32[$259 >> 2] = $253; //@line 30052
   $260 = $ReallocAsyncCtx18 + 16 | 0; //@line 30053
   HEAP32[$260 >> 2] = $2; //@line 30054
   $261 = $ReallocAsyncCtx18 + 20 | 0; //@line 30055
   HEAP32[$261 >> 2] = $4; //@line 30056
   $262 = $ReallocAsyncCtx18 + 24 | 0; //@line 30057
   HEAP32[$262 >> 2] = $6; //@line 30058
   $263 = $ReallocAsyncCtx18 + 28 | 0; //@line 30059
   HEAP32[$263 >> 2] = $8; //@line 30060
   $264 = $ReallocAsyncCtx18 + 32 | 0; //@line 30061
   HEAP32[$264 >> 2] = $10; //@line 30062
   $265 = $ReallocAsyncCtx18 + 36 | 0; //@line 30063
   HEAP32[$265 >> 2] = $12; //@line 30064
   $266 = $ReallocAsyncCtx18 + 40 | 0; //@line 30065
   HEAP32[$266 >> 2] = $14; //@line 30066
   $267 = $ReallocAsyncCtx18 + 44 | 0; //@line 30067
   HEAP32[$267 >> 2] = $16; //@line 30068
   $268 = $ReallocAsyncCtx18 + 48 | 0; //@line 30069
   HEAP32[$268 >> 2] = $18; //@line 30070
   $269 = $ReallocAsyncCtx18 + 52 | 0; //@line 30071
   HEAP32[$269 >> 2] = $20; //@line 30072
   $270 = $ReallocAsyncCtx18 + 56 | 0; //@line 30073
   HEAP32[$270 >> 2] = $254; //@line 30074
   sp = STACKTOP; //@line 30075
   STACKTOP = sp; //@line 30076
   return;
  } else {
   $271 = HEAP32[$255 >> 2] | 0; //@line 30078
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 30079
   FUNCTION_TABLE_vii[$271 & 31]($251, $253); //@line 30080
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 30083
    $272 = $ReallocAsyncCtx2 + 4 | 0; //@line 30084
    HEAP32[$272 >> 2] = $29; //@line 30085
    $273 = $ReallocAsyncCtx2 + 8 | 0; //@line 30086
    HEAP32[$273 >> 2] = $2; //@line 30087
    $274 = $ReallocAsyncCtx2 + 12 | 0; //@line 30088
    HEAP32[$274 >> 2] = $4; //@line 30089
    $275 = $ReallocAsyncCtx2 + 16 | 0; //@line 30090
    HEAP32[$275 >> 2] = $6; //@line 30091
    $276 = $ReallocAsyncCtx2 + 20 | 0; //@line 30092
    HEAP32[$276 >> 2] = $8; //@line 30093
    $277 = $ReallocAsyncCtx2 + 24 | 0; //@line 30094
    HEAP32[$277 >> 2] = $10; //@line 30095
    $278 = $ReallocAsyncCtx2 + 28 | 0; //@line 30096
    HEAP32[$278 >> 2] = $12; //@line 30097
    $279 = $ReallocAsyncCtx2 + 32 | 0; //@line 30098
    HEAP32[$279 >> 2] = $14; //@line 30099
    $280 = $ReallocAsyncCtx2 + 36 | 0; //@line 30100
    HEAP32[$280 >> 2] = $16; //@line 30101
    $281 = $ReallocAsyncCtx2 + 40 | 0; //@line 30102
    HEAP32[$281 >> 2] = $18; //@line 30103
    $282 = $ReallocAsyncCtx2 + 44 | 0; //@line 30104
    HEAP32[$282 >> 2] = $20; //@line 30105
    sp = STACKTOP; //@line 30106
    STACKTOP = sp; //@line 30107
    return;
   }
   ___async_unwind = 0; //@line 30109
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 30110
   $272 = $ReallocAsyncCtx2 + 4 | 0; //@line 30111
   HEAP32[$272 >> 2] = $29; //@line 30112
   $273 = $ReallocAsyncCtx2 + 8 | 0; //@line 30113
   HEAP32[$273 >> 2] = $2; //@line 30114
   $274 = $ReallocAsyncCtx2 + 12 | 0; //@line 30115
   HEAP32[$274 >> 2] = $4; //@line 30116
   $275 = $ReallocAsyncCtx2 + 16 | 0; //@line 30117
   HEAP32[$275 >> 2] = $6; //@line 30118
   $276 = $ReallocAsyncCtx2 + 20 | 0; //@line 30119
   HEAP32[$276 >> 2] = $8; //@line 30120
   $277 = $ReallocAsyncCtx2 + 24 | 0; //@line 30121
   HEAP32[$277 >> 2] = $10; //@line 30122
   $278 = $ReallocAsyncCtx2 + 28 | 0; //@line 30123
   HEAP32[$278 >> 2] = $12; //@line 30124
   $279 = $ReallocAsyncCtx2 + 32 | 0; //@line 30125
   HEAP32[$279 >> 2] = $14; //@line 30126
   $280 = $ReallocAsyncCtx2 + 36 | 0; //@line 30127
   HEAP32[$280 >> 2] = $16; //@line 30128
   $281 = $ReallocAsyncCtx2 + 40 | 0; //@line 30129
   HEAP32[$281 >> 2] = $18; //@line 30130
   $282 = $ReallocAsyncCtx2 + 44 | 0; //@line 30131
   HEAP32[$282 >> 2] = $20; //@line 30132
   sp = STACKTOP; //@line 30133
   STACKTOP = sp; //@line 30134
   return;
  }
 }
 if ($246 & 8) {
  HEAP8[$29 >> 0] = $246 & -9; //@line 30141
  $287 = HEAP32[$2 + 1324 >> 2] | 0; //@line 30143
  $288 = $287 + 32 | 0; //@line 30144
  $290 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 30146
  $291 = $287 + 44 | 0; //@line 30147
  $292 = HEAP32[$291 >> 2] | 0; //@line 30148
  if (!$292) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 30151
   _mbed_assert_internal(15061, 15066, 1102); //@line 30152
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 30155
    $294 = $ReallocAsyncCtx17 + 4 | 0; //@line 30156
    HEAP32[$294 >> 2] = $29; //@line 30157
    $295 = $ReallocAsyncCtx17 + 8 | 0; //@line 30158
    HEAP32[$295 >> 2] = $2; //@line 30159
    $296 = $ReallocAsyncCtx17 + 12 | 0; //@line 30160
    HEAP32[$296 >> 2] = $291; //@line 30161
    $297 = $ReallocAsyncCtx17 + 16 | 0; //@line 30162
    HEAP32[$297 >> 2] = $4; //@line 30163
    $298 = $ReallocAsyncCtx17 + 20 | 0; //@line 30164
    HEAP32[$298 >> 2] = $6; //@line 30165
    $299 = $ReallocAsyncCtx17 + 24 | 0; //@line 30166
    HEAP32[$299 >> 2] = $8; //@line 30167
    $300 = $ReallocAsyncCtx17 + 28 | 0; //@line 30168
    HEAP32[$300 >> 2] = $10; //@line 30169
    $301 = $ReallocAsyncCtx17 + 32 | 0; //@line 30170
    HEAP32[$301 >> 2] = $12; //@line 30171
    $302 = $ReallocAsyncCtx17 + 36 | 0; //@line 30172
    HEAP32[$302 >> 2] = $14; //@line 30173
    $303 = $ReallocAsyncCtx17 + 40 | 0; //@line 30174
    HEAP32[$303 >> 2] = $16; //@line 30175
    $304 = $ReallocAsyncCtx17 + 44 | 0; //@line 30176
    HEAP32[$304 >> 2] = $18; //@line 30177
    $305 = $ReallocAsyncCtx17 + 48 | 0; //@line 30178
    HEAP32[$305 >> 2] = $20; //@line 30179
    $306 = $ReallocAsyncCtx17 + 52 | 0; //@line 30180
    HEAP32[$306 >> 2] = $288; //@line 30181
    $307 = $ReallocAsyncCtx17 + 56 | 0; //@line 30182
    HEAP32[$307 >> 2] = $290; //@line 30183
    sp = STACKTOP; //@line 30184
    STACKTOP = sp; //@line 30185
    return;
   }
   ___async_unwind = 0; //@line 30187
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 30188
   $294 = $ReallocAsyncCtx17 + 4 | 0; //@line 30189
   HEAP32[$294 >> 2] = $29; //@line 30190
   $295 = $ReallocAsyncCtx17 + 8 | 0; //@line 30191
   HEAP32[$295 >> 2] = $2; //@line 30192
   $296 = $ReallocAsyncCtx17 + 12 | 0; //@line 30193
   HEAP32[$296 >> 2] = $291; //@line 30194
   $297 = $ReallocAsyncCtx17 + 16 | 0; //@line 30195
   HEAP32[$297 >> 2] = $4; //@line 30196
   $298 = $ReallocAsyncCtx17 + 20 | 0; //@line 30197
   HEAP32[$298 >> 2] = $6; //@line 30198
   $299 = $ReallocAsyncCtx17 + 24 | 0; //@line 30199
   HEAP32[$299 >> 2] = $8; //@line 30200
   $300 = $ReallocAsyncCtx17 + 28 | 0; //@line 30201
   HEAP32[$300 >> 2] = $10; //@line 30202
   $301 = $ReallocAsyncCtx17 + 32 | 0; //@line 30203
   HEAP32[$301 >> 2] = $12; //@line 30204
   $302 = $ReallocAsyncCtx17 + 36 | 0; //@line 30205
   HEAP32[$302 >> 2] = $14; //@line 30206
   $303 = $ReallocAsyncCtx17 + 40 | 0; //@line 30207
   HEAP32[$303 >> 2] = $16; //@line 30208
   $304 = $ReallocAsyncCtx17 + 44 | 0; //@line 30209
   HEAP32[$304 >> 2] = $18; //@line 30210
   $305 = $ReallocAsyncCtx17 + 48 | 0; //@line 30211
   HEAP32[$305 >> 2] = $20; //@line 30212
   $306 = $ReallocAsyncCtx17 + 52 | 0; //@line 30213
   HEAP32[$306 >> 2] = $288; //@line 30214
   $307 = $ReallocAsyncCtx17 + 56 | 0; //@line 30215
   HEAP32[$307 >> 2] = $290; //@line 30216
   sp = STACKTOP; //@line 30217
   STACKTOP = sp; //@line 30218
   return;
  } else {
   $308 = HEAP32[$292 >> 2] | 0; //@line 30220
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 30221
   FUNCTION_TABLE_vii[$308 & 31]($288, $290); //@line 30222
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 30225
    $309 = $ReallocAsyncCtx3 + 4 | 0; //@line 30226
    HEAP32[$309 >> 2] = $29; //@line 30227
    $310 = $ReallocAsyncCtx3 + 8 | 0; //@line 30228
    HEAP32[$310 >> 2] = $2; //@line 30229
    $311 = $ReallocAsyncCtx3 + 12 | 0; //@line 30230
    HEAP32[$311 >> 2] = $4; //@line 30231
    $312 = $ReallocAsyncCtx3 + 16 | 0; //@line 30232
    HEAP32[$312 >> 2] = $6; //@line 30233
    $313 = $ReallocAsyncCtx3 + 20 | 0; //@line 30234
    HEAP32[$313 >> 2] = $8; //@line 30235
    $314 = $ReallocAsyncCtx3 + 24 | 0; //@line 30236
    HEAP32[$314 >> 2] = $10; //@line 30237
    $315 = $ReallocAsyncCtx3 + 28 | 0; //@line 30238
    HEAP32[$315 >> 2] = $12; //@line 30239
    $316 = $ReallocAsyncCtx3 + 32 | 0; //@line 30240
    HEAP32[$316 >> 2] = $14; //@line 30241
    $317 = $ReallocAsyncCtx3 + 36 | 0; //@line 30242
    HEAP32[$317 >> 2] = $16; //@line 30243
    $318 = $ReallocAsyncCtx3 + 40 | 0; //@line 30244
    HEAP32[$318 >> 2] = $18; //@line 30245
    $319 = $ReallocAsyncCtx3 + 44 | 0; //@line 30246
    HEAP32[$319 >> 2] = $20; //@line 30247
    sp = STACKTOP; //@line 30248
    STACKTOP = sp; //@line 30249
    return;
   }
   ___async_unwind = 0; //@line 30251
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 30252
   $309 = $ReallocAsyncCtx3 + 4 | 0; //@line 30253
   HEAP32[$309 >> 2] = $29; //@line 30254
   $310 = $ReallocAsyncCtx3 + 8 | 0; //@line 30255
   HEAP32[$310 >> 2] = $2; //@line 30256
   $311 = $ReallocAsyncCtx3 + 12 | 0; //@line 30257
   HEAP32[$311 >> 2] = $4; //@line 30258
   $312 = $ReallocAsyncCtx3 + 16 | 0; //@line 30259
   HEAP32[$312 >> 2] = $6; //@line 30260
   $313 = $ReallocAsyncCtx3 + 20 | 0; //@line 30261
   HEAP32[$313 >> 2] = $8; //@line 30262
   $314 = $ReallocAsyncCtx3 + 24 | 0; //@line 30263
   HEAP32[$314 >> 2] = $10; //@line 30264
   $315 = $ReallocAsyncCtx3 + 28 | 0; //@line 30265
   HEAP32[$315 >> 2] = $12; //@line 30266
   $316 = $ReallocAsyncCtx3 + 32 | 0; //@line 30267
   HEAP32[$316 >> 2] = $14; //@line 30268
   $317 = $ReallocAsyncCtx3 + 36 | 0; //@line 30269
   HEAP32[$317 >> 2] = $16; //@line 30270
   $318 = $ReallocAsyncCtx3 + 40 | 0; //@line 30271
   HEAP32[$318 >> 2] = $18; //@line 30272
   $319 = $ReallocAsyncCtx3 + 44 | 0; //@line 30273
   HEAP32[$319 >> 2] = $20; //@line 30274
   sp = STACKTOP; //@line 30275
   STACKTOP = sp; //@line 30276
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(12967, $14) | 0; //@line 30282
  _printf(13114, $18) | 0; //@line 30283
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 30284
  _putchar(10) | 0; //@line 30285
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 30288
   $322 = $ReallocAsyncCtx7 + 4 | 0; //@line 30289
   HEAP32[$322 >> 2] = $29; //@line 30290
   $323 = $ReallocAsyncCtx7 + 8 | 0; //@line 30291
   HEAP32[$323 >> 2] = $2; //@line 30292
   $324 = $ReallocAsyncCtx7 + 12 | 0; //@line 30293
   HEAP32[$324 >> 2] = $4; //@line 30294
   $325 = $ReallocAsyncCtx7 + 16 | 0; //@line 30295
   HEAP32[$325 >> 2] = $6; //@line 30296
   $326 = $ReallocAsyncCtx7 + 20 | 0; //@line 30297
   HEAP32[$326 >> 2] = $8; //@line 30298
   $327 = $ReallocAsyncCtx7 + 24 | 0; //@line 30299
   HEAP32[$327 >> 2] = $10; //@line 30300
   $328 = $ReallocAsyncCtx7 + 28 | 0; //@line 30301
   HEAP32[$328 >> 2] = $12; //@line 30302
   sp = STACKTOP; //@line 30303
   STACKTOP = sp; //@line 30304
   return;
  }
  ___async_unwind = 0; //@line 30306
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 30307
  $322 = $ReallocAsyncCtx7 + 4 | 0; //@line 30308
  HEAP32[$322 >> 2] = $29; //@line 30309
  $323 = $ReallocAsyncCtx7 + 8 | 0; //@line 30310
  HEAP32[$323 >> 2] = $2; //@line 30311
  $324 = $ReallocAsyncCtx7 + 12 | 0; //@line 30312
  HEAP32[$324 >> 2] = $4; //@line 30313
  $325 = $ReallocAsyncCtx7 + 16 | 0; //@line 30314
  HEAP32[$325 >> 2] = $6; //@line 30315
  $326 = $ReallocAsyncCtx7 + 20 | 0; //@line 30316
  HEAP32[$326 >> 2] = $8; //@line 30317
  $327 = $ReallocAsyncCtx7 + 24 | 0; //@line 30318
  HEAP32[$327 >> 2] = $10; //@line 30319
  $328 = $ReallocAsyncCtx7 + 28 | 0; //@line 30320
  HEAP32[$328 >> 2] = $12; //@line 30321
  sp = STACKTOP; //@line 30322
  STACKTOP = sp; //@line 30323
  return;
 }
 $329 = HEAP8[$29 >> 0] & -33; //@line 30326
 HEAP8[$29 >> 0] = $329; //@line 30327
 do {
  if (!($329 & 2)) {
   $368 = $329; //@line 30332
  } else {
   $340 = $329 & -3; //@line 30334
   HEAP8[$29 >> 0] = $340; //@line 30335
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(12967, $6) | 0; //@line 30340
    _printf(12994, $10) | 0; //@line 30341
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30342
    _putchar(10) | 0; //@line 30343
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 30346
     $344 = $ReallocAsyncCtx6 + 4 | 0; //@line 30347
     HEAP32[$344 >> 2] = $29; //@line 30348
     $345 = $ReallocAsyncCtx6 + 8 | 0; //@line 30349
     HEAP32[$345 >> 2] = $2; //@line 30350
     $346 = $ReallocAsyncCtx6 + 12 | 0; //@line 30351
     HEAP32[$346 >> 2] = $4; //@line 30352
     $347 = $ReallocAsyncCtx6 + 16 | 0; //@line 30353
     HEAP32[$347 >> 2] = $4; //@line 30354
     sp = STACKTOP; //@line 30355
     STACKTOP = sp; //@line 30356
     return;
    }
    ___async_unwind = 0; //@line 30358
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 30359
    $344 = $ReallocAsyncCtx6 + 4 | 0; //@line 30360
    HEAP32[$344 >> 2] = $29; //@line 30361
    $345 = $ReallocAsyncCtx6 + 8 | 0; //@line 30362
    HEAP32[$345 >> 2] = $2; //@line 30363
    $346 = $ReallocAsyncCtx6 + 12 | 0; //@line 30364
    HEAP32[$346 >> 2] = $4; //@line 30365
    $347 = $ReallocAsyncCtx6 + 16 | 0; //@line 30366
    HEAP32[$347 >> 2] = $4; //@line 30367
    sp = STACKTOP; //@line 30368
    STACKTOP = sp; //@line 30369
    return;
   }
   if ($340 & 4) {
    $366 = $340 & -5; //@line 30374
    HEAP8[$29 >> 0] = $366; //@line 30375
    $368 = $366; //@line 30376
    break;
   }
   $351 = HEAP32[$2 + 1324 >> 2] | 0; //@line 30380
   $352 = $351 + 16 | 0; //@line 30381
   $354 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 30383
   $355 = $351 + 28 | 0; //@line 30384
   $356 = HEAP32[$355 >> 2] | 0; //@line 30385
   if (!$356) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 30388
    _mbed_assert_internal(15061, 15066, 1102); //@line 30389
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 30392
     $358 = $ReallocAsyncCtx15 + 4 | 0; //@line 30393
     HEAP32[$358 >> 2] = $355; //@line 30394
     $359 = $ReallocAsyncCtx15 + 8 | 0; //@line 30395
     HEAP32[$359 >> 2] = $352; //@line 30396
     $360 = $ReallocAsyncCtx15 + 12 | 0; //@line 30397
     HEAP32[$360 >> 2] = $354; //@line 30398
     $361 = $ReallocAsyncCtx15 + 16 | 0; //@line 30399
     HEAP32[$361 >> 2] = $29; //@line 30400
     $362 = $ReallocAsyncCtx15 + 20 | 0; //@line 30401
     HEAP32[$362 >> 2] = $2; //@line 30402
     sp = STACKTOP; //@line 30403
     STACKTOP = sp; //@line 30404
     return;
    }
    ___async_unwind = 0; //@line 30406
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 30407
    $358 = $ReallocAsyncCtx15 + 4 | 0; //@line 30408
    HEAP32[$358 >> 2] = $355; //@line 30409
    $359 = $ReallocAsyncCtx15 + 8 | 0; //@line 30410
    HEAP32[$359 >> 2] = $352; //@line 30411
    $360 = $ReallocAsyncCtx15 + 12 | 0; //@line 30412
    HEAP32[$360 >> 2] = $354; //@line 30413
    $361 = $ReallocAsyncCtx15 + 16 | 0; //@line 30414
    HEAP32[$361 >> 2] = $29; //@line 30415
    $362 = $ReallocAsyncCtx15 + 20 | 0; //@line 30416
    HEAP32[$362 >> 2] = $2; //@line 30417
    sp = STACKTOP; //@line 30418
    STACKTOP = sp; //@line 30419
    return;
   } else {
    $363 = HEAP32[$356 >> 2] | 0; //@line 30421
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30422
    FUNCTION_TABLE_vii[$363 & 31]($352, $354); //@line 30423
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 30426
     $364 = $ReallocAsyncCtx4 + 4 | 0; //@line 30427
     HEAP32[$364 >> 2] = $29; //@line 30428
     $365 = $ReallocAsyncCtx4 + 8 | 0; //@line 30429
     HEAP32[$365 >> 2] = $2; //@line 30430
     sp = STACKTOP; //@line 30431
     STACKTOP = sp; //@line 30432
     return;
    }
    ___async_unwind = 0; //@line 30434
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 30435
    $364 = $ReallocAsyncCtx4 + 4 | 0; //@line 30436
    HEAP32[$364 >> 2] = $29; //@line 30437
    $365 = $ReallocAsyncCtx4 + 8 | 0; //@line 30438
    HEAP32[$365 >> 2] = $2; //@line 30439
    sp = STACKTOP; //@line 30440
    STACKTOP = sp; //@line 30441
    return;
   }
  }
 } while (0);
 if (!($368 & 16)) {
  STACKTOP = sp; //@line 30448
  return;
 }
 HEAP8[$29 >> 0] = $368 & -17; //@line 30451
 $372 = HEAP32[$2 + 1324 >> 2] | 0; //@line 30453
 $373 = $372 + 48 | 0; //@line 30454
 $375 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 30456
 $376 = $372 + 60 | 0; //@line 30457
 $377 = HEAP32[$376 >> 2] | 0; //@line 30458
 if (!$377) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 30461
  _mbed_assert_internal(15061, 15066, 1102); //@line 30462
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 30465
   $379 = $ReallocAsyncCtx14 + 4 | 0; //@line 30466
   HEAP32[$379 >> 2] = $376; //@line 30467
   $380 = $ReallocAsyncCtx14 + 8 | 0; //@line 30468
   HEAP32[$380 >> 2] = $373; //@line 30469
   $381 = $ReallocAsyncCtx14 + 12 | 0; //@line 30470
   HEAP32[$381 >> 2] = $375; //@line 30471
   sp = STACKTOP; //@line 30472
   STACKTOP = sp; //@line 30473
   return;
  }
  ___async_unwind = 0; //@line 30475
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 30476
  $379 = $ReallocAsyncCtx14 + 4 | 0; //@line 30477
  HEAP32[$379 >> 2] = $376; //@line 30478
  $380 = $ReallocAsyncCtx14 + 8 | 0; //@line 30479
  HEAP32[$380 >> 2] = $373; //@line 30480
  $381 = $ReallocAsyncCtx14 + 12 | 0; //@line 30481
  HEAP32[$381 >> 2] = $375; //@line 30482
  sp = STACKTOP; //@line 30483
  STACKTOP = sp; //@line 30484
  return;
 } else {
  $382 = HEAP32[$377 >> 2] | 0; //@line 30486
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30487
  FUNCTION_TABLE_vii[$382 & 31]($373, $375); //@line 30488
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 30491
   sp = STACKTOP; //@line 30492
   STACKTOP = sp; //@line 30493
   return;
  }
  ___async_unwind = 0; //@line 30495
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 30496
  sp = STACKTOP; //@line 30497
  STACKTOP = sp; //@line 30498
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0174 = 0, $$0174209 = 0, $$0174210 = 0, $$1$off0 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$3$off0204 = 0, $$3179 = 0, $$sink = 0, $$sink200 = 0, $$sink207 = 0, $110 = 0, $111 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $131 = 0, $132 = 0, $215 = 0, $225 = 0, $229 = 0, $236 = 0, $239 = 0, $258 = 0, $27 = 0, $28 = 0, $285 = 0, $29 = 0, $303 = 0, $305 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $339 = 0, $340 = 0, $341 = 0, $343 = 0, $37 = 0, $385 = 0, $425 = 0, $429 = 0, $431 = 0, $451 = 0, $454 = 0, $455 = 0, $465 = 0, $467 = 0, $468 = 0, $472 = 0, $473 = 0, $488 = 0, $490 = 0, $491 = 0, $492 = 0, $496 = 0, $5 = 0, $500 = 0, $505 = 0, $506 = 0, $508 = 0, $509 = 0, $537 = 0, $540 = 0, $541 = 0, $543 = 0, $544 = 0, $57 = 0, $584 = 0, $589 = 0, $590 = 0, $602 = 0, $603 = 0, $605 = 0, $606 = 0, $634 = 0, $640 = 0, $643 = 0, $654 = 0, $660 = 0, $666 = 0, $677 = 0, $686 = 0, $689 = 0, $82 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx102 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx50 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx95 = 0, $AsyncCtx99 = 0, $sext = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12019
 STACKTOP = STACKTOP + 80 | 0; //@line 12020
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 12020
 $vararg_buffer16 = sp + 64 | 0; //@line 12021
 $vararg_buffer14 = sp + 56 | 0; //@line 12022
 $vararg_buffer12 = sp + 48 | 0; //@line 12023
 $vararg_buffer10 = sp + 40 | 0; //@line 12024
 $vararg_buffer8 = sp + 32 | 0; //@line 12025
 $vararg_buffer6 = sp + 24 | 0; //@line 12026
 $vararg_buffer1 = sp + 8 | 0; //@line 12027
 $vararg_buffer = sp; //@line 12028
 _printf(12967, $vararg_buffer) | 0; //@line 12029
 $5 = $2 & 65535; //@line 12030
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 12033
 HEAP32[$vararg_buffer1 + 4 >> 2] = $5; //@line 12035
 HEAP32[$vararg_buffer1 + 8 >> 2] = $3 << 16 >> 16; //@line 12037
 HEAP32[$vararg_buffer1 + 12 >> 2] = $4 << 24 >> 24; //@line 12039
 _printf(13059, $vararg_buffer1) | 0; //@line 12040
 $AsyncCtx32 = _emscripten_alloc_async_context(80, sp) | 0; //@line 12041
 _putchar(10) | 0; //@line 12042
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 386; //@line 12045
  HEAP32[$AsyncCtx32 + 4 >> 2] = $0; //@line 12047
  HEAP8[$AsyncCtx32 + 8 >> 0] = $4; //@line 12049
  HEAP32[$AsyncCtx32 + 12 >> 2] = $vararg_buffer6; //@line 12051
  HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer6; //@line 12053
  HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer8; //@line 12055
  HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer8; //@line 12057
  HEAP32[$AsyncCtx32 + 28 >> 2] = $1; //@line 12059
  HEAP32[$AsyncCtx32 + 32 >> 2] = $5; //@line 12061
  HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer; //@line 12063
  HEAP32[$AsyncCtx32 + 40 >> 2] = $vararg_buffer1; //@line 12065
  HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer14; //@line 12067
  HEAP32[$AsyncCtx32 + 48 >> 2] = $vararg_buffer14; //@line 12069
  HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer16; //@line 12071
  HEAP32[$AsyncCtx32 + 56 >> 2] = $vararg_buffer16; //@line 12073
  HEAP16[$AsyncCtx32 + 60 >> 1] = $3; //@line 12075
  HEAP32[$AsyncCtx32 + 64 >> 2] = $vararg_buffer10; //@line 12077
  HEAP32[$AsyncCtx32 + 68 >> 2] = $vararg_buffer10; //@line 12079
  HEAP32[$AsyncCtx32 + 72 >> 2] = $vararg_buffer12; //@line 12081
  HEAP32[$AsyncCtx32 + 76 >> 2] = $vararg_buffer12; //@line 12083
  sp = STACKTOP; //@line 12084
  STACKTOP = sp; //@line 12085
  return;
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 12087
 HEAP32[$vararg_buffer >> 2] = 0; //@line 12088
 $27 = $0 + 912 | 0; //@line 12089
 $28 = $0 + 928 | 0; //@line 12090
 $29 = $0 + 288 | 0; //@line 12091
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 12094
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 20 >> 1] = $3; //@line 12097
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 22 >> 0] = $4; //@line 12100
 $37 = HEAP32[$0 + 364 >> 2] | 0; //@line 12102
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 24 >> 2] = $37; //@line 12105
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 9 >> 0] = 0; //@line 12108
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 8 >> 0] = 0; //@line 12111
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 11 >> 0] = 0; //@line 12114
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = 0; //@line 12117
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = 0; //@line 12120
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 18 >> 0] = 0; //@line 12123
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 28 >> 0] = 0; //@line 12126
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = 0; //@line 12129
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 0; //@line 12131
 $57 = HEAP32[$0 >> 2] | 0; //@line 12132
 $AsyncCtx79 = _emscripten_alloc_async_context(100, sp) | 0; //@line 12133
 __ZN7LoRaPHY18put_radio_to_sleepEv($57); //@line 12134
 if (___async) {
  HEAP32[$AsyncCtx79 >> 2] = 387; //@line 12137
  HEAP32[$AsyncCtx79 + 4 >> 2] = $0; //@line 12139
  HEAP32[$AsyncCtx79 + 8 >> 2] = $0; //@line 12141
  HEAP8[$AsyncCtx79 + 12 >> 0] = $4; //@line 12143
  HEAP32[$AsyncCtx79 + 16 >> 2] = $29; //@line 12145
  HEAP32[$AsyncCtx79 + 20 >> 2] = $vararg_buffer6; //@line 12147
  HEAP32[$AsyncCtx79 + 24 >> 2] = $vararg_buffer6; //@line 12149
  HEAP32[$AsyncCtx79 + 28 >> 2] = $vararg_buffer8; //@line 12151
  HEAP32[$AsyncCtx79 + 32 >> 2] = $vararg_buffer8; //@line 12153
  HEAP32[$AsyncCtx79 + 36 >> 2] = $1; //@line 12155
  HEAP32[$AsyncCtx79 + 40 >> 2] = $vararg_buffer; //@line 12157
  HEAP32[$AsyncCtx79 + 44 >> 2] = $vararg_buffer1; //@line 12159
  HEAP32[$AsyncCtx79 + 48 >> 2] = $27; //@line 12161
  HEAP32[$AsyncCtx79 + 52 >> 2] = $28; //@line 12163
  HEAP32[$AsyncCtx79 + 56 >> 2] = $5; //@line 12165
  HEAP32[$AsyncCtx79 + 60 >> 2] = $vararg_buffer; //@line 12167
  HEAP32[$AsyncCtx79 + 64 >> 2] = $vararg_buffer1; //@line 12169
  HEAP32[$AsyncCtx79 + 68 >> 2] = $vararg_buffer16; //@line 12171
  HEAP32[$AsyncCtx79 + 72 >> 2] = $vararg_buffer14; //@line 12173
  HEAP32[$AsyncCtx79 + 76 >> 2] = $vararg_buffer12; //@line 12175
  HEAP32[$AsyncCtx79 + 80 >> 2] = $vararg_buffer14; //@line 12177
  HEAP32[$AsyncCtx79 + 84 >> 2] = $vararg_buffer10; //@line 12179
  HEAP32[$AsyncCtx79 + 88 >> 2] = $vararg_buffer16; //@line 12181
  HEAP32[$AsyncCtx79 + 92 >> 2] = $vararg_buffer12; //@line 12183
  HEAP32[$AsyncCtx79 + 96 >> 2] = $vararg_buffer10; //@line 12185
  sp = STACKTOP; //@line 12186
  STACKTOP = sp; //@line 12187
  return;
 }
 _emscripten_free_async_context($AsyncCtx79 | 0); //@line 12189
 $82 = $0 + 356 | 0; //@line 12190
 $83 = HEAP32[$82 >> 2] | 0; //@line 12191
 $AsyncCtx102 = _emscripten_alloc_async_context(104, sp) | 0; //@line 12193
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($83, $0 + 1056 | 0); //@line 12194
 if (___async) {
  HEAP32[$AsyncCtx102 >> 2] = 388; //@line 12197
  HEAP32[$AsyncCtx102 + 4 >> 2] = $0; //@line 12199
  HEAP32[$AsyncCtx102 + 8 >> 2] = $0; //@line 12201
  HEAP8[$AsyncCtx102 + 12 >> 0] = $4; //@line 12203
  HEAP32[$AsyncCtx102 + 16 >> 2] = $29; //@line 12205
  HEAP32[$AsyncCtx102 + 20 >> 2] = $vararg_buffer6; //@line 12207
  HEAP32[$AsyncCtx102 + 24 >> 2] = $vararg_buffer6; //@line 12209
  HEAP32[$AsyncCtx102 + 28 >> 2] = $vararg_buffer8; //@line 12211
  HEAP32[$AsyncCtx102 + 32 >> 2] = $vararg_buffer8; //@line 12213
  HEAP32[$AsyncCtx102 + 36 >> 2] = $vararg_buffer; //@line 12215
  HEAP32[$AsyncCtx102 + 40 >> 2] = $vararg_buffer1; //@line 12217
  HEAP32[$AsyncCtx102 + 44 >> 2] = $82; //@line 12219
  HEAP32[$AsyncCtx102 + 48 >> 2] = $1; //@line 12221
  HEAP32[$AsyncCtx102 + 52 >> 2] = $27; //@line 12223
  HEAP32[$AsyncCtx102 + 56 >> 2] = $28; //@line 12225
  HEAP32[$AsyncCtx102 + 60 >> 2] = $5; //@line 12227
  HEAP32[$AsyncCtx102 + 64 >> 2] = $vararg_buffer; //@line 12229
  HEAP32[$AsyncCtx102 + 68 >> 2] = $vararg_buffer1; //@line 12231
  HEAP32[$AsyncCtx102 + 72 >> 2] = $vararg_buffer16; //@line 12233
  HEAP32[$AsyncCtx102 + 76 >> 2] = $vararg_buffer14; //@line 12235
  HEAP32[$AsyncCtx102 + 80 >> 2] = $vararg_buffer12; //@line 12237
  HEAP32[$AsyncCtx102 + 84 >> 2] = $vararg_buffer14; //@line 12239
  HEAP32[$AsyncCtx102 + 88 >> 2] = $vararg_buffer10; //@line 12241
  HEAP32[$AsyncCtx102 + 92 >> 2] = $vararg_buffer16; //@line 12243
  HEAP32[$AsyncCtx102 + 96 >> 2] = $vararg_buffer12; //@line 12245
  HEAP32[$AsyncCtx102 + 100 >> 2] = $vararg_buffer10; //@line 12247
  sp = STACKTOP; //@line 12248
  STACKTOP = sp; //@line 12249
  return;
 }
 _emscripten_free_async_context($AsyncCtx102 | 0); //@line 12251
 $110 = HEAP8[$1 >> 0] | 0; //@line 12252
 $trunc = ($110 & 255) >>> 5; //@line 12253
 L10 : do {
  switch ($trunc & 7) {
  case 1:
   {
    $111 = $0 + 372 | 0; //@line 12258
    if (HEAP8[$111 >> 0] | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12264
     $AsyncCtx60 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12265
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12266
     if (___async) {
      HEAP32[$AsyncCtx60 >> 2] = 389; //@line 12269
      HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer; //@line 12271
      HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer1; //@line 12273
      sp = STACKTOP; //@line 12274
      STACKTOP = sp; //@line 12275
      return;
     }
     _emscripten_free_async_context($AsyncCtx60 | 0); //@line 12277
     STACKTOP = sp; //@line 12278
     return;
    }
    $121 = $0 + 908 | 0; //@line 12283
    $123 = $0 + 638 | 0; //@line 12285
    $124 = $0 + 639 | 0; //@line 12286
    if (__Z18decrypt_join_framePKhtS0_Ph($1 + 1 | 0, $5 + 65535 & 65535, HEAP32[$121 >> 2] | 0, $124) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12292
     STACKTOP = sp; //@line 12293
     return;
    }
    HEAP8[$123 >> 0] = $110; //@line 12295
    $129 = $5 + -4 | 0; //@line 12296
    $131 = HEAP32[$121 >> 2] | 0; //@line 12298
    $AsyncCtx72 = _emscripten_alloc_async_context(64, sp) | 0; //@line 12299
    $132 = __Z22compute_join_frame_micPKhtS0_Pj($123, $129 & 65535, $131, $vararg_buffer) | 0; //@line 12300
    if (___async) {
     HEAP32[$AsyncCtx72 >> 2] = 390; //@line 12303
     HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 12305
     HEAP32[$AsyncCtx72 + 8 >> 2] = $129; //@line 12307
     HEAP32[$AsyncCtx72 + 12 >> 2] = $5; //@line 12309
     HEAP32[$AsyncCtx72 + 16 >> 2] = $vararg_buffer; //@line 12311
     HEAP32[$AsyncCtx72 + 20 >> 2] = $29; //@line 12313
     HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer; //@line 12315
     HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer1; //@line 12317
     HEAP32[$AsyncCtx72 + 32 >> 2] = $121; //@line 12319
     HEAP32[$AsyncCtx72 + 36 >> 2] = $124; //@line 12321
     HEAP32[$AsyncCtx72 + 40 >> 2] = $27; //@line 12323
     HEAP32[$AsyncCtx72 + 44 >> 2] = $28; //@line 12325
     HEAP32[$AsyncCtx72 + 48 >> 2] = $82; //@line 12327
     HEAP32[$AsyncCtx72 + 52 >> 2] = $vararg_buffer1; //@line 12329
     HEAP32[$AsyncCtx72 + 56 >> 2] = $0; //@line 12331
     HEAP32[$AsyncCtx72 + 60 >> 2] = $111; //@line 12333
     sp = STACKTOP; //@line 12334
     STACKTOP = sp; //@line 12335
     return;
    }
    _emscripten_free_async_context($AsyncCtx72 | 0); //@line 12337
    if ($132 | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12342
     STACKTOP = sp; //@line 12343
     return;
    }
    if ((HEAPU8[$5 + -3 + ($0 + 638) >> 0] << 8 | HEAPU8[$0 + 638 + $129 >> 0] | HEAPU8[$5 + -2 + ($0 + 638) >> 0] << 16 | HEAPU8[$5 + -1 + ($0 + 638) >> 0] << 24 | 0) != (HEAP32[$vararg_buffer >> 2] | 0)) {
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 12372
     break L10;
    }
    if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$121 >> 2] | 0, $124, HEAP16[$0 + 946 >> 1] | 0, $27, $28) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12383
     STACKTOP = sp; //@line 12384
     return;
    }
    HEAP32[$0 + 948 >> 2] = HEAPU8[$0 + 644 >> 0] << 16 | (HEAPU8[$0 + 643 >> 0] << 8 | HEAPU8[$0 + 642 >> 0]); //@line 12400
    HEAP32[$0 + 952 >> 2] = HEAPU8[$0 + 648 >> 0] << 24 | (HEAPU8[$0 + 647 >> 0] << 16 | (HEAPU8[$0 + 646 >> 0] << 8 | HEAPU8[$0 + 645 >> 0])); //@line 12420
    $215 = HEAP8[$0 + 649 >> 0] | 0; //@line 12422
    HEAP8[$0 + 1129 >> 0] = ($215 & 255) >>> 4 & 7; //@line 12428
    HEAP8[$0 + 1136 >> 0] = $215 & 15; //@line 12431
    $225 = HEAP8[$0 + 650 >> 0] & 15; //@line 12434
    $229 = $225 << 24 >> 24 == 0 ? 1e3 : ($225 & 255) * 1e3 | 0; //@line 12439
    HEAP32[$0 + 1112 >> 2] = $229; //@line 12440
    HEAP32[$0 + 1116 >> 2] = $229 + 1e3; //@line 12443
    HEAP32[$vararg_buffer1 >> 2] = $0 + 651; //@line 12445
    HEAP8[$vararg_buffer1 + 4 >> 0] = $5 + 239; //@line 12449
    $236 = HEAP32[$0 >> 2] | 0; //@line 12450
    $239 = HEAP32[(HEAP32[$236 >> 2] | 0) + 20 >> 2] | 0; //@line 12453
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12454
    FUNCTION_TABLE_vii[$239 & 31]($236, $vararg_buffer1); //@line 12455
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 391; //@line 12458
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12460
     HEAP32[$AsyncCtx + 8 >> 2] = $111; //@line 12462
     HEAP32[$AsyncCtx + 12 >> 2] = $82; //@line 12464
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 12466
     HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 12468
     sp = STACKTOP; //@line 12469
     STACKTOP = sp; //@line 12470
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 12472
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 12476
     HEAP8[$111 >> 0] = 1; //@line 12477
     break L10;
    }
    break;
   }
  case 3:
  case 5:
   {
    $258 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 10 >> 0] | 0, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0; //@line 12490
    $sext = ($5 << 16) + -851968 | 0; //@line 12492
    if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($258 & 255 | 0)) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12501
     $AsyncCtx56 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12502
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12503
     if (___async) {
      HEAP32[$AsyncCtx56 >> 2] = 392; //@line 12506
      HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer; //@line 12508
      HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer1; //@line 12510
      sp = STACKTOP; //@line 12511
      STACKTOP = sp; //@line 12512
      return;
     }
     _emscripten_free_async_context($AsyncCtx56 | 0); //@line 12514
     STACKTOP = sp; //@line 12515
     return;
    }
    $285 = HEAPU8[$1 + 2 >> 0] << 8 | HEAPU8[$1 + 1 >> 0] | HEAPU8[$1 + 3 >> 0] << 16 | HEAPU8[$1 + 4 >> 0] << 24; //@line 12534
    L52 : do {
     if (($285 | 0) == (HEAP32[$0 + 952 >> 2] | 0)) {
      $$1169 = 0; //@line 12541
      $$1171 = $28; //@line 12541
      $$1173 = $27; //@line 12541
      $$1175 = 0; //@line 12541
      $$sink207 = $0 + 960 | 0; //@line 12541
     } else {
      $$0174209 = HEAP32[$0 + 1208 >> 2] | 0; //@line 12544
      L55 : do {
       if ($$0174209 | 0) {
        $$0174210 = $$0174209; //@line 12548
        while (1) {
         if (($285 | 0) == (HEAP32[$$0174210 >> 2] | 0)) {
          break;
         }
         $$0174 = HEAP32[$$0174210 + 40 >> 2] | 0; //@line 12556
         if (!$$0174) {
          break L55;
         } else {
          $$0174210 = $$0174; //@line 12561
         }
        }
        $$1169 = 1; //@line 12567
        $$1171 = $$0174210 + 20 | 0; //@line 12567
        $$1173 = $$0174210 + 4 | 0; //@line 12567
        $$1175 = $$0174210; //@line 12567
        $$sink207 = $$0174210 + 36 | 0; //@line 12567
        break L52;
       }
      } while (0);
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 11; //@line 12573
      $AsyncCtx53 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12574
      __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12575
      if (___async) {
       HEAP32[$AsyncCtx53 >> 2] = 393; //@line 12578
       HEAP32[$AsyncCtx53 + 4 >> 2] = $vararg_buffer; //@line 12580
       HEAP32[$AsyncCtx53 + 8 >> 2] = $vararg_buffer1; //@line 12582
       sp = STACKTOP; //@line 12583
       STACKTOP = sp; //@line 12584
       return;
      }
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 12586
      STACKTOP = sp; //@line 12587
      return;
     }
    } while (0);
    $303 = HEAP32[$$sink207 >> 2] | 0; //@line 12590
    $305 = HEAP8[$1 + 5 >> 0] | 0; //@line 12592
    $314 = $305 & 15; //@line 12601
    $315 = $314 & 255; //@line 12602
    $316 = $315 + 8 | 0; //@line 12603
    $317 = $316 & 255; //@line 12604
    $318 = $5 + -4 | 0; //@line 12605
    $339 = HEAPU8[$1 + ($5 + -3) >> 0] << 8 | HEAPU8[$1 + $318 >> 0] | HEAPU8[$1 + ($5 + -2) >> 0] << 16 | HEAPU8[$1 + ($5 + -1) >> 0] << 24; //@line 12626
    $340 = (HEAPU8[$1 + 7 >> 0] << 8 | HEAPU8[$1 + 6 >> 0]) - $303 | 0; //@line 12627
    $341 = $340 & 65535; //@line 12628
    do {
     if ($341 >>> 0 < 32768) {
      $343 = $341 + $303 | 0; //@line 12632
      $AsyncCtx68 = _emscripten_alloc_async_context(148, sp) | 0; //@line 12634
      __Z11compute_micPKhtS0_jhjPj($1, $318 & 65535, $$1173, $285, 1, $343, $vararg_buffer) | 0; //@line 12635
      if (___async) {
       HEAP32[$AsyncCtx68 >> 2] = 394; //@line 12638
       HEAP32[$AsyncCtx68 + 4 >> 2] = $$1175; //@line 12640
       HEAP32[$AsyncCtx68 + 8 >> 2] = $318; //@line 12642
       HEAP32[$AsyncCtx68 + 12 >> 2] = $vararg_buffer8; //@line 12644
       HEAP32[$AsyncCtx68 + 16 >> 2] = $0; //@line 12646
       HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer6; //@line 12648
       HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer; //@line 12650
       HEAP8[$AsyncCtx68 + 28 >> 0] = $305; //@line 12652
       HEAP32[$AsyncCtx68 + 32 >> 2] = $285; //@line 12654
       HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer8; //@line 12656
       HEAP8[$AsyncCtx68 + 40 >> 0] = $317; //@line 12658
       HEAP32[$AsyncCtx68 + 44 >> 2] = $29; //@line 12660
       HEAP32[$AsyncCtx68 + 48 >> 2] = $316; //@line 12662
       HEAP32[$AsyncCtx68 + 52 >> 2] = $vararg_buffer16; //@line 12664
       HEAP8[$AsyncCtx68 + 56 >> 0] = $trunc; //@line 12666
       HEAP32[$AsyncCtx68 + 60 >> 2] = $315; //@line 12668
       HEAP8[$AsyncCtx68 + 64 >> 0] = $314; //@line 12670
       HEAP32[$AsyncCtx68 + 68 >> 2] = $vararg_buffer1; //@line 12672
       HEAP32[$AsyncCtx68 + 72 >> 2] = $vararg_buffer14; //@line 12674
       HEAP32[$AsyncCtx68 + 76 >> 2] = $vararg_buffer12; //@line 12676
       HEAP32[$AsyncCtx68 + 80 >> 2] = $vararg_buffer14; //@line 12678
       HEAP32[$AsyncCtx68 + 84 >> 2] = $339; //@line 12680
       HEAP32[$AsyncCtx68 + 88 >> 2] = $vararg_buffer10; //@line 12682
       HEAP32[$AsyncCtx68 + 92 >> 2] = $vararg_buffer16; //@line 12684
       HEAP32[$AsyncCtx68 + 96 >> 2] = $vararg_buffer6; //@line 12686
       HEAP32[$AsyncCtx68 + 100 >> 2] = $vararg_buffer12; //@line 12688
       HEAP32[$AsyncCtx68 + 104 >> 2] = $82; //@line 12690
       HEAP32[$AsyncCtx68 + 108 >> 2] = $vararg_buffer; //@line 12692
       HEAP32[$AsyncCtx68 + 112 >> 2] = $341; //@line 12694
       HEAP32[$AsyncCtx68 + 116 >> 2] = $vararg_buffer10; //@line 12696
       HEAP8[$AsyncCtx68 + 120 >> 0] = $$1169; //@line 12698
       HEAP32[$AsyncCtx68 + 124 >> 2] = $0; //@line 12700
       HEAP32[$AsyncCtx68 + 128 >> 2] = $1; //@line 12702
       HEAP32[$AsyncCtx68 + 132 >> 2] = $$1171; //@line 12704
       HEAP8[$AsyncCtx68 + 136 >> 0] = $4; //@line 12706
       HEAP32[$AsyncCtx68 + 140 >> 2] = $$1173; //@line 12708
       HEAP32[$AsyncCtx68 + 144 >> 2] = $343; //@line 12710
       sp = STACKTOP; //@line 12711
       STACKTOP = sp; //@line 12712
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx68 | 0); //@line 12714
       $$3179 = $343; //@line 12717
       $$sink200 = ($339 | 0) == (HEAP32[$vararg_buffer >> 2] | 0); //@line 12717
       break;
      }
     } else {
      $385 = $303 + 65536 + ($340 << 16 >> 16) | 0; //@line 12724
      $AsyncCtx64 = _emscripten_alloc_async_context(152, sp) | 0; //@line 12726
      __Z11compute_micPKhtS0_jhjPj($1, $318 & 65535, $$1173, $285, 1, $385, $vararg_buffer) | 0; //@line 12727
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 395; //@line 12730
       HEAP32[$AsyncCtx64 + 4 >> 2] = $$1175; //@line 12732
       HEAP32[$AsyncCtx64 + 8 >> 2] = $318; //@line 12734
       HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer8; //@line 12736
       HEAP32[$AsyncCtx64 + 16 >> 2] = $0; //@line 12738
       HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer6; //@line 12740
       HEAP32[$AsyncCtx64 + 24 >> 2] = $vararg_buffer; //@line 12742
       HEAP32[$AsyncCtx64 + 28 >> 2] = $385; //@line 12744
       HEAP8[$AsyncCtx64 + 32 >> 0] = $305; //@line 12746
       HEAP32[$AsyncCtx64 + 36 >> 2] = $285; //@line 12748
       HEAP32[$AsyncCtx64 + 40 >> 2] = $vararg_buffer8; //@line 12750
       HEAP8[$AsyncCtx64 + 44 >> 0] = $317; //@line 12752
       HEAP32[$AsyncCtx64 + 48 >> 2] = $29; //@line 12754
       HEAP32[$AsyncCtx64 + 52 >> 2] = $316; //@line 12756
       HEAP32[$AsyncCtx64 + 56 >> 2] = $vararg_buffer16; //@line 12758
       HEAP8[$AsyncCtx64 + 60 >> 0] = $trunc; //@line 12760
       HEAP32[$AsyncCtx64 + 64 >> 2] = $315; //@line 12762
       HEAP8[$AsyncCtx64 + 68 >> 0] = $314; //@line 12764
       HEAP32[$AsyncCtx64 + 72 >> 2] = $vararg_buffer1; //@line 12766
       HEAP32[$AsyncCtx64 + 76 >> 2] = $vararg_buffer14; //@line 12768
       HEAP32[$AsyncCtx64 + 80 >> 2] = $vararg_buffer12; //@line 12770
       HEAP32[$AsyncCtx64 + 84 >> 2] = $vararg_buffer14; //@line 12772
       HEAP32[$AsyncCtx64 + 88 >> 2] = $339; //@line 12774
       HEAP32[$AsyncCtx64 + 92 >> 2] = $vararg_buffer10; //@line 12776
       HEAP32[$AsyncCtx64 + 96 >> 2] = $vararg_buffer16; //@line 12778
       HEAP32[$AsyncCtx64 + 100 >> 2] = $vararg_buffer6; //@line 12780
       HEAP32[$AsyncCtx64 + 104 >> 2] = $303; //@line 12782
       HEAP32[$AsyncCtx64 + 108 >> 2] = $vararg_buffer12; //@line 12784
       HEAP32[$AsyncCtx64 + 112 >> 2] = $82; //@line 12786
       HEAP32[$AsyncCtx64 + 116 >> 2] = $vararg_buffer; //@line 12788
       HEAP32[$AsyncCtx64 + 120 >> 2] = $341; //@line 12790
       HEAP32[$AsyncCtx64 + 124 >> 2] = $vararg_buffer10; //@line 12792
       HEAP8[$AsyncCtx64 + 128 >> 0] = $$1169; //@line 12794
       HEAP32[$AsyncCtx64 + 132 >> 2] = $0; //@line 12796
       HEAP32[$AsyncCtx64 + 136 >> 2] = $1; //@line 12798
       HEAP32[$AsyncCtx64 + 140 >> 2] = $$1171; //@line 12800
       HEAP8[$AsyncCtx64 + 144 >> 0] = $4; //@line 12802
       HEAP32[$AsyncCtx64 + 148 >> 2] = $$1173; //@line 12804
       sp = STACKTOP; //@line 12805
       STACKTOP = sp; //@line 12806
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx64 | 0); //@line 12808
       $425 = ($339 | 0) == (HEAP32[$vararg_buffer >> 2] | 0); //@line 12810
       $$3179 = $425 ? $385 : $303; //@line 12812
       $$sink200 = $425; //@line 12812
       break;
      }
     }
    } while (0);
    $429 = $341 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$0 >> 2] | 0) | 0) & 65535) >>> 0; //@line 12820
    $431 = (__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 | 0; //@line 12822
    if (!$429) {
     HEAP32[$431 >> 2] = 10; //@line 12824
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12827
     $AsyncCtx50 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12828
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12829
     if (___async) {
      HEAP32[$AsyncCtx50 >> 2] = 396; //@line 12832
      HEAP32[$AsyncCtx50 + 4 >> 2] = $vararg_buffer; //@line 12834
      HEAP32[$AsyncCtx50 + 8 >> 2] = $vararg_buffer1; //@line 12836
      sp = STACKTOP; //@line 12837
      STACKTOP = sp; //@line 12838
      return;
     }
     _emscripten_free_async_context($AsyncCtx50 | 0); //@line 12840
     STACKTOP = sp; //@line 12841
     return;
    }
    if (!$$sink200) {
     HEAP32[$431 >> 2] = 12; //@line 12844
     $AsyncCtx40 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12845
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12846
     if (___async) {
      HEAP32[$AsyncCtx40 >> 2] = 407; //@line 12849
      HEAP32[$AsyncCtx40 + 4 >> 2] = $vararg_buffer; //@line 12851
      HEAP32[$AsyncCtx40 + 8 >> 2] = $vararg_buffer1; //@line 12853
      sp = STACKTOP; //@line 12854
      STACKTOP = sp; //@line 12855
      return;
     }
     _emscripten_free_async_context($AsyncCtx40 | 0); //@line 12857
     STACKTOP = sp; //@line 12858
     return;
    }
    HEAP32[$431 >> 2] = 0; //@line 12860
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 8 >> 0] = $$1169; //@line 12863
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 11 >> 0] = ($305 & 255) >>> 4 & 1; //@line 12868
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = 0; //@line 12871
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = 0; //@line 12874
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12877
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] = 0; //@line 12880
    HEAP32[$0 + 964 >> 2] = 0; //@line 12882
    $451 = $0 + 4 | 0; //@line 12883
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($451); //@line 12884
    do {
     if ($$1169 << 24 >> 24 == 1) {
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 2; //@line 12889
      $454 = $$1175 + 36 | 0; //@line 12890
      $455 = HEAP32[$454 >> 2] | 0; //@line 12891
      if (($455 | 0) != ($$3179 | 0) | ($455 | 0) == 0) {
       $$1$off0 = 0; //@line 12896
       $$sink = $454; //@line 12896
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 8; //@line 12900
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12903
       $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12904
       __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12905
       if (___async) {
        HEAP32[$AsyncCtx47 >> 2] = 397; //@line 12908
        HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer; //@line 12910
        HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer1; //@line 12912
        sp = STACKTOP; //@line 12913
        STACKTOP = sp; //@line 12914
        return;
       }
       _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12916
       STACKTOP = sp; //@line 12917
       return;
      }
     } else {
      $465 = $0 + 374 | 0; //@line 12921
      if ($trunc << 24 >> 24 == 5) {
       HEAP8[$465 >> 0] = 1; //@line 12923
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 1; //@line 12925
       $467 = $0 + 960 | 0; //@line 12926
       $468 = HEAP32[$467 >> 2] | 0; //@line 12927
       $$1$off0 = ($468 | 0) != 0 & ($468 | 0) == ($$3179 | 0); //@line 12931
       $$sink = $467; //@line 12931
       break;
      }
      HEAP8[$465 >> 0] = 0; //@line 12934
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 0; //@line 12936
      $472 = $0 + 960 | 0; //@line 12937
      $473 = HEAP32[$472 >> 2] | 0; //@line 12938
      if (($473 | 0) != ($$3179 | 0) | ($473 | 0) == 0) {
       $$1$off0 = 0; //@line 12943
       $$sink = $472; //@line 12943
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 8; //@line 12947
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12950
       $AsyncCtx44 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12951
       __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12952
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 398; //@line 12955
        HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer; //@line 12957
        HEAP32[$AsyncCtx44 + 8 >> 2] = $vararg_buffer1; //@line 12959
        sp = STACKTOP; //@line 12960
        STACKTOP = sp; //@line 12961
        return;
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 12963
       STACKTOP = sp; //@line 12964
       return;
      }
     }
    } while (0);
    HEAP32[$$sink >> 2] = $$3179; //@line 12968
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) >> 2] | 0) == 1) {
     if ($305 & 32) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($451); //@line 12976
     }
    } else {
     __ZN14LoRaMacCommand20clear_command_bufferEv($451); //@line 12979
    }
    do {
     if (($318 | 0) > ($316 | 0)) {
      $488 = $315 + 9 | 0; //@line 12984
      $490 = HEAP8[$1 + $316 >> 0] | 0; //@line 12986
      $491 = $318 - $488 | 0; //@line 12987
      $492 = $491 & 255; //@line 12988
      HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 9 >> 0] = $490; //@line 12991
      $496 = $314 << 24 >> 24 == 0; //@line 12993
      if (!($490 << 24 >> 24)) {
       if (!$496) {
        $$3$off0204 = 6; //@line 12996
        break;
       }
       $500 = $0 + 638 | 0; //@line 13002
       if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $488 | 0, $491 & 255, $$1173, $285, 1, $$3179, $500) | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 13008
       }
       $505 = $0 + 264 | 0; //@line 13010
       $506 = __ZN11LoRaMacMlme16get_confirmationEv($505) | 0; //@line 13011
       $508 = HEAP32[$0 >> 2] | 0; //@line 13013
       $AsyncCtx91 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13014
       $509 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $500, 0, $492, $4, $506, $0 + 1096 | 0, $508) | 0; //@line 13015
       if (___async) {
        HEAP32[$AsyncCtx91 >> 2] = 399; //@line 13018
        HEAP32[$AsyncCtx91 + 4 >> 2] = $451; //@line 13020
        HEAP32[$AsyncCtx91 + 8 >> 2] = $29; //@line 13022
        HEAP8[$AsyncCtx91 + 12 >> 0] = $$1$off0 & 1; //@line 13025
        HEAP32[$AsyncCtx91 + 16 >> 2] = $vararg_buffer6; //@line 13027
        HEAP32[$AsyncCtx91 + 20 >> 2] = $vararg_buffer6; //@line 13029
        HEAP32[$AsyncCtx91 + 24 >> 2] = $vararg_buffer8; //@line 13031
        HEAP32[$AsyncCtx91 + 28 >> 2] = $vararg_buffer8; //@line 13033
        HEAP32[$AsyncCtx91 + 32 >> 2] = $0; //@line 13035
        HEAP32[$AsyncCtx91 + 36 >> 2] = $vararg_buffer; //@line 13037
        HEAP32[$AsyncCtx91 + 40 >> 2] = $vararg_buffer1; //@line 13039
        HEAP32[$AsyncCtx91 + 44 >> 2] = $82; //@line 13041
        HEAP8[$AsyncCtx91 + 48 >> 0] = $305; //@line 13043
        HEAP32[$AsyncCtx91 + 52 >> 2] = $505; //@line 13045
        sp = STACKTOP; //@line 13046
        STACKTOP = sp; //@line 13047
        return;
       }
       _emscripten_free_async_context($AsyncCtx91 | 0); //@line 13049
       if ($509 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13054
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13056
         break;
        } else {
         label = 101; //@line 13059
         break;
        }
       }
       if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0)) {
        label = 100; //@line 13065
        break;
       }
       _printf(12967, $vararg_buffer6) | 0; //@line 13068
       _printf(13114, $vararg_buffer8) | 0; //@line 13069
       $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13070
       _putchar(10) | 0; //@line 13071
       if (___async) {
        HEAP32[$AsyncCtx28 >> 2] = 400; //@line 13074
        HEAP32[$AsyncCtx28 + 4 >> 2] = $505; //@line 13076
        HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 13078
        HEAP32[$AsyncCtx28 + 12 >> 2] = $451; //@line 13080
        HEAP8[$AsyncCtx28 + 16 >> 0] = $$1$off0 & 1; //@line 13083
        HEAP8[$AsyncCtx28 + 17 >> 0] = $305; //@line 13085
        HEAP32[$AsyncCtx28 + 20 >> 2] = $29; //@line 13087
        HEAP32[$AsyncCtx28 + 24 >> 2] = $82; //@line 13089
        HEAP32[$AsyncCtx28 + 28 >> 2] = $vararg_buffer; //@line 13091
        HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer1; //@line 13093
        sp = STACKTOP; //@line 13094
        STACKTOP = sp; //@line 13095
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx28 | 0); //@line 13097
        HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($505) | 0) >> 2] = 4; //@line 13099
        $537 = $0 + 944 | 0; //@line 13100
        HEAP8[$537 >> 0] = HEAP8[$537 >> 0] | 16; //@line 13103
        __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13104
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13106
         break;
        } else {
         label = 101; //@line 13109
         break;
        }
       }
      }
      do {
       if (!$496) {
        $540 = $0 + 264 | 0; //@line 13116
        $541 = __ZN11LoRaMacMlme16get_confirmationEv($540) | 0; //@line 13117
        $543 = HEAP32[$0 >> 2] | 0; //@line 13119
        $AsyncCtx87 = _emscripten_alloc_async_context(80, sp) | 0; //@line 13120
        $544 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $1, 8, $317, $4, $541, $0 + 1096 | 0, $543) | 0; //@line 13121
        if (___async) {
         HEAP32[$AsyncCtx87 >> 2] = 401; //@line 13124
         HEAP32[$AsyncCtx87 + 4 >> 2] = $29; //@line 13126
         HEAP32[$AsyncCtx87 + 8 >> 2] = $540; //@line 13128
         HEAP32[$AsyncCtx87 + 12 >> 2] = $0; //@line 13130
         HEAP32[$AsyncCtx87 + 16 >> 2] = $451; //@line 13132
         HEAP32[$AsyncCtx87 + 20 >> 2] = $82; //@line 13134
         HEAP32[$AsyncCtx87 + 24 >> 2] = $vararg_buffer; //@line 13136
         HEAP32[$AsyncCtx87 + 28 >> 2] = $vararg_buffer1; //@line 13138
         HEAP8[$AsyncCtx87 + 32 >> 0] = $305; //@line 13140
         HEAP32[$AsyncCtx87 + 36 >> 2] = $1; //@line 13142
         HEAP32[$AsyncCtx87 + 40 >> 2] = $488; //@line 13144
         HEAP32[$AsyncCtx87 + 44 >> 2] = $491; //@line 13146
         HEAP32[$AsyncCtx87 + 48 >> 2] = $$1171; //@line 13148
         HEAP32[$AsyncCtx87 + 52 >> 2] = $285; //@line 13150
         HEAP32[$AsyncCtx87 + 56 >> 2] = $$3179; //@line 13152
         HEAP8[$AsyncCtx87 + 60 >> 0] = $$1$off0 & 1; //@line 13155
         HEAP32[$AsyncCtx87 + 64 >> 2] = $vararg_buffer10; //@line 13157
         HEAP32[$AsyncCtx87 + 68 >> 2] = $vararg_buffer10; //@line 13159
         HEAP32[$AsyncCtx87 + 72 >> 2] = $vararg_buffer12; //@line 13161
         HEAP32[$AsyncCtx87 + 76 >> 2] = $vararg_buffer12; //@line 13163
         sp = STACKTOP; //@line 13164
         STACKTOP = sp; //@line 13165
         return;
        }
        _emscripten_free_async_context($AsyncCtx87 | 0); //@line 13167
        if ($544 | 0) {
         HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13172
         break;
        }
        if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0) {
         _printf(12967, $vararg_buffer10) | 0; //@line 13177
         _printf(13114, $vararg_buffer12) | 0; //@line 13178
         $AsyncCtx24 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13179
         _putchar(10) | 0; //@line 13180
         if (___async) {
          HEAP32[$AsyncCtx24 >> 2] = 402; //@line 13183
          HEAP32[$AsyncCtx24 + 4 >> 2] = $540; //@line 13185
          HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 13187
          HEAP32[$AsyncCtx24 + 12 >> 2] = $451; //@line 13189
          HEAP32[$AsyncCtx24 + 16 >> 2] = $82; //@line 13191
          HEAP32[$AsyncCtx24 + 20 >> 2] = $vararg_buffer; //@line 13193
          HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer1; //@line 13195
          HEAP8[$AsyncCtx24 + 28 >> 0] = $305; //@line 13197
          HEAP32[$AsyncCtx24 + 32 >> 2] = $29; //@line 13199
          HEAP32[$AsyncCtx24 + 36 >> 2] = $1; //@line 13201
          HEAP32[$AsyncCtx24 + 40 >> 2] = $488; //@line 13203
          HEAP32[$AsyncCtx24 + 44 >> 2] = $491; //@line 13205
          HEAP32[$AsyncCtx24 + 48 >> 2] = $$1171; //@line 13207
          HEAP32[$AsyncCtx24 + 52 >> 2] = $285; //@line 13209
          HEAP32[$AsyncCtx24 + 56 >> 2] = $$3179; //@line 13211
          HEAP8[$AsyncCtx24 + 60 >> 0] = $$1$off0 & 1; //@line 13214
          sp = STACKTOP; //@line 13215
          STACKTOP = sp; //@line 13216
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx24 | 0); //@line 13218
          HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($540) | 0) >> 2] = 4; //@line 13220
          $584 = $0 + 944 | 0; //@line 13221
          HEAP8[$584 >> 0] = HEAP8[$584 >> 0] | 16; //@line 13224
          __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13225
          break;
         }
        }
       }
      } while (0);
      $589 = $491 & 255; //@line 13233
      $590 = $0 + 638 | 0; //@line 13234
      if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $488 | 0, $589, $$1171, $285, 1, $$3179, $590) | 0) {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 13240
      }
      if ($$1$off0) {
       $$3$off0204 = 6; //@line 13243
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = $590; //@line 13247
       HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = $589; //@line 13250
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 18 >> 0] = 1; //@line 13253
       label = 101; //@line 13254
      }
     } else {
      if (!($314 << 24 >> 24)) {
       label = 100; //@line 13259
      } else {
       $602 = $0 + 264 | 0; //@line 13261
       $603 = __ZN11LoRaMacMlme16get_confirmationEv($602) | 0; //@line 13262
       $605 = HEAP32[$0 >> 2] | 0; //@line 13264
       $AsyncCtx83 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13265
       $606 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $1, 8, $317, $4, $603, $0 + 1096 | 0, $605) | 0; //@line 13266
       if (___async) {
        HEAP32[$AsyncCtx83 >> 2] = 403; //@line 13269
        HEAP32[$AsyncCtx83 + 4 >> 2] = $0; //@line 13271
        HEAP32[$AsyncCtx83 + 8 >> 2] = $vararg_buffer; //@line 13273
        HEAP32[$AsyncCtx83 + 12 >> 2] = $vararg_buffer1; //@line 13275
        HEAP32[$AsyncCtx83 + 16 >> 2] = $82; //@line 13277
        HEAP32[$AsyncCtx83 + 20 >> 2] = $vararg_buffer14; //@line 13279
        HEAP32[$AsyncCtx83 + 24 >> 2] = $vararg_buffer14; //@line 13281
        HEAP32[$AsyncCtx83 + 28 >> 2] = $vararg_buffer16; //@line 13283
        HEAP32[$AsyncCtx83 + 32 >> 2] = $vararg_buffer16; //@line 13285
        HEAP8[$AsyncCtx83 + 36 >> 0] = $$1$off0 & 1; //@line 13288
        HEAP32[$AsyncCtx83 + 40 >> 2] = $29; //@line 13290
        HEAP32[$AsyncCtx83 + 44 >> 2] = $451; //@line 13292
        HEAP8[$AsyncCtx83 + 48 >> 0] = $305; //@line 13294
        HEAP32[$AsyncCtx83 + 52 >> 2] = $602; //@line 13296
        sp = STACKTOP; //@line 13297
        STACKTOP = sp; //@line 13298
        return;
       }
       _emscripten_free_async_context($AsyncCtx83 | 0); //@line 13300
       if ($606 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13305
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13307
         break;
        } else {
         label = 101; //@line 13310
         break;
        }
       }
       if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0) {
        _printf(12967, $vararg_buffer14) | 0; //@line 13316
        _printf(13114, $vararg_buffer16) | 0; //@line 13317
        $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13318
        _putchar(10) | 0; //@line 13319
        if (___async) {
         HEAP32[$AsyncCtx20 >> 2] = 404; //@line 13322
         HEAP32[$AsyncCtx20 + 4 >> 2] = $602; //@line 13324
         HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 13326
         HEAP32[$AsyncCtx20 + 12 >> 2] = $451; //@line 13328
         HEAP8[$AsyncCtx20 + 16 >> 0] = $$1$off0 & 1; //@line 13331
         HEAP8[$AsyncCtx20 + 17 >> 0] = $305; //@line 13333
         HEAP32[$AsyncCtx20 + 20 >> 2] = $29; //@line 13335
         HEAP32[$AsyncCtx20 + 24 >> 2] = $82; //@line 13337
         HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer; //@line 13339
         HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer1; //@line 13341
         sp = STACKTOP; //@line 13342
         STACKTOP = sp; //@line 13343
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13345
         HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($602) | 0) >> 2] = 4; //@line 13347
         $634 = $0 + 944 | 0; //@line 13348
         HEAP8[$634 >> 0] = HEAP8[$634 >> 0] | 16; //@line 13351
         __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13352
         if ($$1$off0) {
          $$3$off0204 = 6; //@line 13354
          break;
         } else {
          label = 101; //@line 13357
          break;
         }
        }
       } else {
        label = 100; //@line 13362
       }
      }
     }
    } while (0);
    if ((label | 0) == 100) {
     if ($$1$off0) {
      $$3$off0204 = 6; //@line 13369
     } else {
      label = 101; //@line 13371
     }
    }
    do {
     if ((label | 0) == 101) {
      $640 = (__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 | 0; //@line 13379
      if ($305 & 32) {
       HEAP8[$640 >> 0] = 1; //@line 13381
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 28 >> 0] = 1; //@line 13384
       $643 = HEAP32[$82 >> 2] | 0; //@line 13385
       $AsyncCtx99 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13387
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($643, $0 + 1076 | 0); //@line 13388
       if (___async) {
        HEAP32[$AsyncCtx99 >> 2] = 405; //@line 13391
        HEAP32[$AsyncCtx99 + 4 >> 2] = $0; //@line 13393
        HEAP32[$AsyncCtx99 + 8 >> 2] = $82; //@line 13395
        HEAP32[$AsyncCtx99 + 12 >> 2] = $vararg_buffer; //@line 13397
        HEAP32[$AsyncCtx99 + 16 >> 2] = $vararg_buffer1; //@line 13399
        sp = STACKTOP; //@line 13400
        STACKTOP = sp; //@line 13401
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx99 | 0); //@line 13403
        $$3$off0204 = 2; //@line 13404
        break;
       }
      }
      HEAP8[$640 >> 0] = 0; //@line 13408
      if ((HEAPU8[$0 + 895 >> 0] | 0) > (HEAPU8[$0 + 894 >> 0] | 0)) {
       $654 = HEAP32[$82 >> 2] | 0; //@line 13415
       $AsyncCtx95 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13417
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($654, $0 + 1076 | 0); //@line 13418
       if (___async) {
        HEAP32[$AsyncCtx95 >> 2] = 406; //@line 13421
        HEAP32[$AsyncCtx95 + 4 >> 2] = $0; //@line 13423
        HEAP32[$AsyncCtx95 + 8 >> 2] = $82; //@line 13425
        HEAP32[$AsyncCtx95 + 12 >> 2] = $vararg_buffer; //@line 13427
        HEAP32[$AsyncCtx95 + 16 >> 2] = $vararg_buffer1; //@line 13429
        sp = STACKTOP; //@line 13430
        STACKTOP = sp; //@line 13431
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx95 | 0); //@line 13433
        $$3$off0204 = 2; //@line 13434
        break;
       }
      } else {
       $$3$off0204 = 2; //@line 13438
      }
     }
    } while (0);
    $660 = $0 + 944 | 0; //@line 13442
    HEAP8[$660 >> 0] = $$3$off0204 | HEAP8[$660 >> 0] & -7; //@line 13446
    break;
   }
  case 7:
   {
    $666 = $0 + 638 | 0; //@line 13450
    _memcpy($666 | 0, $1 + 1 | 0, $5 | 0) | 0; //@line 13452
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 3; //@line 13454
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 0; //@line 13457
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = $666; //@line 13460
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = $5 + 65535; //@line 13465
    $677 = $0 + 944 | 0; //@line 13466
    HEAP8[$677 >> 0] = HEAP8[$677 >> 0] | 2; //@line 13469
    break;
   }
  default:
   {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13475
    $AsyncCtx36 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13476
    __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 13477
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 408; //@line 13480
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 13482
     HEAP32[$AsyncCtx36 + 8 >> 2] = $82; //@line 13484
     HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer; //@line 13486
     HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer1; //@line 13488
     sp = STACKTOP; //@line 13489
     STACKTOP = sp; //@line 13490
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 13492
     break L10;
    }
   }
  }
 } while (0);
 $686 = $0 + 944 | 0; //@line 13498
 HEAP8[$686 >> 0] = HEAP8[$686 >> 0] | 32; //@line 13501
 $689 = HEAP32[$82 >> 2] | 0; //@line 13502
 $AsyncCtx76 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13504
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($689, $0 + 996 | 0, 1); //@line 13505
 if (___async) {
  HEAP32[$AsyncCtx76 >> 2] = 409; //@line 13508
  HEAP32[$AsyncCtx76 + 4 >> 2] = $vararg_buffer; //@line 13510
  HEAP32[$AsyncCtx76 + 8 >> 2] = $vararg_buffer1; //@line 13512
  sp = STACKTOP; //@line 13513
  STACKTOP = sp; //@line 13514
  return;
 }
 _emscripten_free_async_context($AsyncCtx76 | 0); //@line 13516
 STACKTOP = sp; //@line 13517
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_475($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28426
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28428
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28432
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28434
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28436
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28438
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28440
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28442
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28444
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28446
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28448
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28450
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28452
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28454
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28456
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28458
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx20 = _emscripten_realloc_async_context(68) | 0; //@line 28463
  _mbed_assert_internal(12851, 12860, 194); //@line 28464
  if (___async) {
   HEAP32[$ReallocAsyncCtx20 >> 2] = 462; //@line 28467
   $35 = $ReallocAsyncCtx20 + 4 | 0; //@line 28468
   HEAP32[$35 >> 2] = $2; //@line 28469
   $36 = $ReallocAsyncCtx20 + 8 | 0; //@line 28470
   HEAP32[$36 >> 2] = $4; //@line 28471
   $37 = $ReallocAsyncCtx20 + 12 | 0; //@line 28472
   HEAP32[$37 >> 2] = $6; //@line 28473
   $38 = $ReallocAsyncCtx20 + 16 | 0; //@line 28474
   HEAP32[$38 >> 2] = $8; //@line 28475
   $39 = $ReallocAsyncCtx20 + 20 | 0; //@line 28476
   HEAP32[$39 >> 2] = $10; //@line 28477
   $40 = $ReallocAsyncCtx20 + 24 | 0; //@line 28478
   HEAP32[$40 >> 2] = $12; //@line 28479
   $41 = $ReallocAsyncCtx20 + 28 | 0; //@line 28480
   HEAP32[$41 >> 2] = $14; //@line 28481
   $42 = $ReallocAsyncCtx20 + 32 | 0; //@line 28482
   HEAP32[$42 >> 2] = $16; //@line 28483
   $43 = $ReallocAsyncCtx20 + 36 | 0; //@line 28484
   HEAP32[$43 >> 2] = $18; //@line 28485
   $44 = $ReallocAsyncCtx20 + 40 | 0; //@line 28486
   HEAP32[$44 >> 2] = $20; //@line 28487
   $45 = $ReallocAsyncCtx20 + 44 | 0; //@line 28488
   HEAP32[$45 >> 2] = $22; //@line 28489
   $46 = $ReallocAsyncCtx20 + 48 | 0; //@line 28490
   HEAP32[$46 >> 2] = $24; //@line 28491
   $47 = $ReallocAsyncCtx20 + 52 | 0; //@line 28492
   HEAP32[$47 >> 2] = $26; //@line 28493
   $48 = $ReallocAsyncCtx20 + 56 | 0; //@line 28494
   HEAP32[$48 >> 2] = $28; //@line 28495
   $49 = $ReallocAsyncCtx20 + 60 | 0; //@line 28496
   HEAP32[$49 >> 2] = $30; //@line 28497
   $50 = $ReallocAsyncCtx20 + 64 | 0; //@line 28498
   HEAP32[$50 >> 2] = $32; //@line 28499
   sp = STACKTOP; //@line 28500
   return;
  }
  ___async_unwind = 0; //@line 28503
  HEAP32[$ReallocAsyncCtx20 >> 2] = 462; //@line 28504
  $35 = $ReallocAsyncCtx20 + 4 | 0; //@line 28505
  HEAP32[$35 >> 2] = $2; //@line 28506
  $36 = $ReallocAsyncCtx20 + 8 | 0; //@line 28507
  HEAP32[$36 >> 2] = $4; //@line 28508
  $37 = $ReallocAsyncCtx20 + 12 | 0; //@line 28509
  HEAP32[$37 >> 2] = $6; //@line 28510
  $38 = $ReallocAsyncCtx20 + 16 | 0; //@line 28511
  HEAP32[$38 >> 2] = $8; //@line 28512
  $39 = $ReallocAsyncCtx20 + 20 | 0; //@line 28513
  HEAP32[$39 >> 2] = $10; //@line 28514
  $40 = $ReallocAsyncCtx20 + 24 | 0; //@line 28515
  HEAP32[$40 >> 2] = $12; //@line 28516
  $41 = $ReallocAsyncCtx20 + 28 | 0; //@line 28517
  HEAP32[$41 >> 2] = $14; //@line 28518
  $42 = $ReallocAsyncCtx20 + 32 | 0; //@line 28519
  HEAP32[$42 >> 2] = $16; //@line 28520
  $43 = $ReallocAsyncCtx20 + 36 | 0; //@line 28521
  HEAP32[$43 >> 2] = $18; //@line 28522
  $44 = $ReallocAsyncCtx20 + 40 | 0; //@line 28523
  HEAP32[$44 >> 2] = $20; //@line 28524
  $45 = $ReallocAsyncCtx20 + 44 | 0; //@line 28525
  HEAP32[$45 >> 2] = $22; //@line 28526
  $46 = $ReallocAsyncCtx20 + 48 | 0; //@line 28527
  HEAP32[$46 >> 2] = $24; //@line 28528
  $47 = $ReallocAsyncCtx20 + 52 | 0; //@line 28529
  HEAP32[$47 >> 2] = $26; //@line 28530
  $48 = $ReallocAsyncCtx20 + 56 | 0; //@line 28531
  HEAP32[$48 >> 2] = $28; //@line 28532
  $49 = $ReallocAsyncCtx20 + 60 | 0; //@line 28533
  HEAP32[$49 >> 2] = $30; //@line 28534
  $50 = $ReallocAsyncCtx20 + 64 | 0; //@line 28535
  HEAP32[$50 >> 2] = $32; //@line 28536
  sp = STACKTOP; //@line 28537
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $54 = $4 + 288 | 0; //@line 28545
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 28561
   HEAP8[$32 >> 0] = 0; //@line 28562
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $68 = $4 + 956 | 0; //@line 28567
    HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1; //@line 28570
   }
   $72 = HEAP8[$4 + 895 >> 0] | 0; //@line 28573
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 11 >> 0] = $72; //@line 28576
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -2; //@line 28579
  }
 } while (0);
 $77 = $4 + 377 | 0; //@line 28582
 if (HEAP8[$77 >> 0] | 0) {
  if (!(HEAP32[$8 >> 2] & 16)) {
   HEAP8[$77 >> 0] = 0; //@line 28590
   $83 = $4 + 895 | 0; //@line 28591
   $84 = HEAP8[$83 >> 0] | 0; //@line 28592
   if (!(($84 & 255) < 9 ? ($84 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $114 = HEAP32[$4 >> 2] | 0; //@line 28599
    $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0; //@line 28602
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 28603
    FUNCTION_TABLE_vi[$117 & 1023]($114); //@line 28604
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 28607
     $118 = $ReallocAsyncCtx + 4 | 0; //@line 28608
     HEAP32[$118 >> 2] = $2; //@line 28609
     $119 = $ReallocAsyncCtx + 8 | 0; //@line 28610
     HEAP32[$119 >> 2] = $4; //@line 28611
     $120 = $ReallocAsyncCtx + 12 | 0; //@line 28612
     HEAP32[$120 >> 2] = $8; //@line 28613
     $121 = $ReallocAsyncCtx + 16 | 0; //@line 28614
     HEAP32[$121 >> 2] = $10; //@line 28615
     $122 = $ReallocAsyncCtx + 20 | 0; //@line 28616
     HEAP32[$122 >> 2] = $12; //@line 28617
     $123 = $ReallocAsyncCtx + 24 | 0; //@line 28618
     HEAP32[$123 >> 2] = $14; //@line 28619
     $124 = $ReallocAsyncCtx + 28 | 0; //@line 28620
     HEAP32[$124 >> 2] = $16; //@line 28621
     $125 = $ReallocAsyncCtx + 32 | 0; //@line 28622
     HEAP32[$125 >> 2] = $18; //@line 28623
     $126 = $ReallocAsyncCtx + 36 | 0; //@line 28624
     HEAP32[$126 >> 2] = $28; //@line 28625
     $127 = $ReallocAsyncCtx + 40 | 0; //@line 28626
     HEAP32[$127 >> 2] = $30; //@line 28627
     $128 = $ReallocAsyncCtx + 44 | 0; //@line 28628
     HEAP32[$128 >> 2] = $20; //@line 28629
     $129 = $ReallocAsyncCtx + 48 | 0; //@line 28630
     HEAP32[$129 >> 2] = $22; //@line 28631
     $130 = $ReallocAsyncCtx + 52 | 0; //@line 28632
     HEAP32[$130 >> 2] = $24; //@line 28633
     $131 = $ReallocAsyncCtx + 56 | 0; //@line 28634
     HEAP32[$131 >> 2] = $26; //@line 28635
     $132 = $ReallocAsyncCtx + 60 | 0; //@line 28636
     HEAP32[$132 >> 2] = $32; //@line 28637
     $133 = $ReallocAsyncCtx + 64 | 0; //@line 28638
     HEAP32[$133 >> 2] = $83; //@line 28639
     sp = STACKTOP; //@line 28640
     return;
    }
    ___async_unwind = 0; //@line 28643
    HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 28644
    $118 = $ReallocAsyncCtx + 4 | 0; //@line 28645
    HEAP32[$118 >> 2] = $2; //@line 28646
    $119 = $ReallocAsyncCtx + 8 | 0; //@line 28647
    HEAP32[$119 >> 2] = $4; //@line 28648
    $120 = $ReallocAsyncCtx + 12 | 0; //@line 28649
    HEAP32[$120 >> 2] = $8; //@line 28650
    $121 = $ReallocAsyncCtx + 16 | 0; //@line 28651
    HEAP32[$121 >> 2] = $10; //@line 28652
    $122 = $ReallocAsyncCtx + 20 | 0; //@line 28653
    HEAP32[$122 >> 2] = $12; //@line 28654
    $123 = $ReallocAsyncCtx + 24 | 0; //@line 28655
    HEAP32[$123 >> 2] = $14; //@line 28656
    $124 = $ReallocAsyncCtx + 28 | 0; //@line 28657
    HEAP32[$124 >> 2] = $16; //@line 28658
    $125 = $ReallocAsyncCtx + 32 | 0; //@line 28659
    HEAP32[$125 >> 2] = $18; //@line 28660
    $126 = $ReallocAsyncCtx + 36 | 0; //@line 28661
    HEAP32[$126 >> 2] = $28; //@line 28662
    $127 = $ReallocAsyncCtx + 40 | 0; //@line 28663
    HEAP32[$127 >> 2] = $30; //@line 28664
    $128 = $ReallocAsyncCtx + 44 | 0; //@line 28665
    HEAP32[$128 >> 2] = $20; //@line 28666
    $129 = $ReallocAsyncCtx + 48 | 0; //@line 28667
    HEAP32[$129 >> 2] = $22; //@line 28668
    $130 = $ReallocAsyncCtx + 52 | 0; //@line 28669
    HEAP32[$130 >> 2] = $24; //@line 28670
    $131 = $ReallocAsyncCtx + 56 | 0; //@line 28671
    HEAP32[$131 >> 2] = $26; //@line 28672
    $132 = $ReallocAsyncCtx + 60 | 0; //@line 28673
    HEAP32[$132 >> 2] = $32; //@line 28674
    $133 = $ReallocAsyncCtx + 64 | 0; //@line 28675
    HEAP32[$133 >> 2] = $83; //@line 28676
    sp = STACKTOP; //@line 28677
    return;
   }
   $89 = $84 + 1 << 24 >> 24; //@line 28680
   HEAP8[$83 >> 0] = $89; //@line 28681
   if ($89 & 1) {
    $93 = $4 + 1097 | 0; //@line 28686
    HEAP8[$93 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$93 >> 0] | 0) | 0; //@line 28689
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 28691
   $96 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 28692
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 28695
    $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 28696
    HEAP32[$97 >> 2] = $2; //@line 28697
    $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 28698
    HEAP32[$98 >> 2] = $4; //@line 28699
    $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 28700
    HEAP32[$99 >> 2] = $8; //@line 28701
    $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 28702
    HEAP32[$100 >> 2] = $32; //@line 28703
    $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 28704
    HEAP32[$101 >> 2] = $83; //@line 28705
    $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 28706
    HEAP32[$102 >> 2] = $10; //@line 28707
    $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 28708
    HEAP32[$103 >> 2] = $12; //@line 28709
    $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 28710
    HEAP32[$104 >> 2] = $14; //@line 28711
    $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 28712
    HEAP32[$105 >> 2] = $16; //@line 28713
    $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 28714
    HEAP32[$106 >> 2] = $18; //@line 28715
    $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 28716
    HEAP32[$107 >> 2] = $20; //@line 28717
    $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 28718
    HEAP32[$108 >> 2] = $22; //@line 28719
    $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 28720
    HEAP32[$109 >> 2] = $24; //@line 28721
    $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 28722
    HEAP32[$110 >> 2] = $26; //@line 28723
    $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 28724
    HEAP32[$111 >> 2] = $28; //@line 28725
    $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 28726
    HEAP32[$112 >> 2] = $30; //@line 28727
    sp = STACKTOP; //@line 28728
    return;
   }
   HEAP32[___async_retval >> 2] = $96; //@line 28732
   ___async_unwind = 0; //@line 28733
   HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 28734
   $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 28735
   HEAP32[$97 >> 2] = $2; //@line 28736
   $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 28737
   HEAP32[$98 >> 2] = $4; //@line 28738
   $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 28739
   HEAP32[$99 >> 2] = $8; //@line 28740
   $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 28741
   HEAP32[$100 >> 2] = $32; //@line 28742
   $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 28743
   HEAP32[$101 >> 2] = $83; //@line 28744
   $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 28745
   HEAP32[$102 >> 2] = $10; //@line 28746
   $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 28747
   HEAP32[$103 >> 2] = $12; //@line 28748
   $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 28749
   HEAP32[$104 >> 2] = $14; //@line 28750
   $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 28751
   HEAP32[$105 >> 2] = $16; //@line 28752
   $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 28753
   HEAP32[$106 >> 2] = $18; //@line 28754
   $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 28755
   HEAP32[$107 >> 2] = $20; //@line 28756
   $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 28757
   HEAP32[$108 >> 2] = $22; //@line 28758
   $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 28759
   HEAP32[$109 >> 2] = $24; //@line 28760
   $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 28761
   HEAP32[$110 >> 2] = $26; //@line 28762
   $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 28763
   HEAP32[$111 >> 2] = $28; //@line 28764
   $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 28765
   HEAP32[$112 >> 2] = $30; //@line 28766
   sp = STACKTOP; //@line 28767
   return;
  }
 }
 $134 = HEAP32[$8 >> 2] | 0; //@line 28771
 $137 = $134 & -3; //@line 28774
 if (!($134 & 2)) {
  $139 = $134; //@line 28776
 } else {
  HEAP32[$8 >> 2] = $137; //@line 28778
  $139 = $137; //@line 28779
 }
 if ($139 | 0) {
  $224 = HEAP32[$28 >> 2] | 0; //@line 28783
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 28784
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($224, $30, 1e3); //@line 28785
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 28788
   $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 28789
   HEAP32[$225 >> 2] = $2; //@line 28790
   $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 28791
   HEAP32[$226 >> 2] = $4; //@line 28792
   $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 28793
   HEAP32[$227 >> 2] = $10; //@line 28794
   $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 28795
   HEAP32[$228 >> 2] = $12; //@line 28796
   $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 28797
   HEAP32[$229 >> 2] = $14; //@line 28798
   $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 28799
   HEAP32[$230 >> 2] = $16; //@line 28800
   $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 28801
   HEAP32[$231 >> 2] = $18; //@line 28802
   sp = STACKTOP; //@line 28803
   return;
  }
  ___async_unwind = 0; //@line 28806
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 28807
  $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 28808
  HEAP32[$225 >> 2] = $2; //@line 28809
  $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 28810
  HEAP32[$226 >> 2] = $4; //@line 28811
  $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 28812
  HEAP32[$227 >> 2] = $10; //@line 28813
  $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 28814
  HEAP32[$228 >> 2] = $12; //@line 28815
  $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 28816
  HEAP32[$229 >> 2] = $14; //@line 28817
  $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 28818
  HEAP32[$230 >> 2] = $16; //@line 28819
  $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 28820
  HEAP32[$231 >> 2] = $18; //@line 28821
  sp = STACKTOP; //@line 28822
  return;
 }
 $140 = HEAP8[$2 >> 0] | 0; //@line 28825
 if ($140 & 1) {
  HEAP8[$2 >> 0] = $140 & -2; //@line 28830
  $145 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28832
  $147 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 28834
  $148 = $145 + 12 | 0; //@line 28835
  $149 = HEAP32[$148 >> 2] | 0; //@line 28836
  if (!$149) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 28839
   _mbed_assert_internal(15061, 15066, 1102); //@line 28840
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 28843
    $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 28844
    HEAP32[$151 >> 2] = $2; //@line 28845
    $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 28846
    HEAP32[$152 >> 2] = $145; //@line 28847
    $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 28848
    HEAP32[$153 >> 2] = $147; //@line 28849
    $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 28850
    HEAP32[$154 >> 2] = $4; //@line 28851
    $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 28852
    HEAP32[$155 >> 2] = $10; //@line 28853
    $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 28854
    HEAP32[$156 >> 2] = $12; //@line 28855
    $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 28856
    HEAP32[$157 >> 2] = $14; //@line 28857
    $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 28858
    HEAP32[$158 >> 2] = $16; //@line 28859
    $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 28860
    HEAP32[$159 >> 2] = $18; //@line 28861
    $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 28862
    HEAP32[$160 >> 2] = $20; //@line 28863
    $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 28864
    HEAP32[$161 >> 2] = $22; //@line 28865
    $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 28866
    HEAP32[$162 >> 2] = $24; //@line 28867
    $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 28868
    HEAP32[$163 >> 2] = $26; //@line 28869
    $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 28870
    HEAP32[$164 >> 2] = $148; //@line 28871
    sp = STACKTOP; //@line 28872
    return;
   }
   ___async_unwind = 0; //@line 28875
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 28876
   $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 28877
   HEAP32[$151 >> 2] = $2; //@line 28878
   $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 28879
   HEAP32[$152 >> 2] = $145; //@line 28880
   $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 28881
   HEAP32[$153 >> 2] = $147; //@line 28882
   $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 28883
   HEAP32[$154 >> 2] = $4; //@line 28884
   $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 28885
   HEAP32[$155 >> 2] = $10; //@line 28886
   $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 28887
   HEAP32[$156 >> 2] = $12; //@line 28888
   $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 28889
   HEAP32[$157 >> 2] = $14; //@line 28890
   $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 28891
   HEAP32[$158 >> 2] = $16; //@line 28892
   $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 28893
   HEAP32[$159 >> 2] = $18; //@line 28894
   $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 28895
   HEAP32[$160 >> 2] = $20; //@line 28896
   $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 28897
   HEAP32[$161 >> 2] = $22; //@line 28898
   $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 28899
   HEAP32[$162 >> 2] = $24; //@line 28900
   $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 28901
   HEAP32[$163 >> 2] = $26; //@line 28902
   $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 28903
   HEAP32[$164 >> 2] = $148; //@line 28904
   sp = STACKTOP; //@line 28905
   return;
  } else {
   $165 = HEAP32[$149 >> 2] | 0; //@line 28908
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 28909
   FUNCTION_TABLE_vii[$165 & 31]($145, $147); //@line 28910
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 28913
    $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 28914
    HEAP32[$166 >> 2] = $2; //@line 28915
    $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 28916
    HEAP32[$167 >> 2] = $4; //@line 28917
    $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 28918
    HEAP32[$168 >> 2] = $10; //@line 28919
    $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 28920
    HEAP32[$169 >> 2] = $12; //@line 28921
    $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 28922
    HEAP32[$170 >> 2] = $14; //@line 28923
    $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 28924
    HEAP32[$171 >> 2] = $16; //@line 28925
    $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 28926
    HEAP32[$172 >> 2] = $18; //@line 28927
    $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 28928
    HEAP32[$173 >> 2] = $20; //@line 28929
    $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 28930
    HEAP32[$174 >> 2] = $22; //@line 28931
    $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 28932
    HEAP32[$175 >> 2] = $24; //@line 28933
    $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 28934
    HEAP32[$176 >> 2] = $26; //@line 28935
    sp = STACKTOP; //@line 28936
    return;
   }
   ___async_unwind = 0; //@line 28939
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 28940
   $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 28941
   HEAP32[$166 >> 2] = $2; //@line 28942
   $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 28943
   HEAP32[$167 >> 2] = $4; //@line 28944
   $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 28945
   HEAP32[$168 >> 2] = $10; //@line 28946
   $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 28947
   HEAP32[$169 >> 2] = $12; //@line 28948
   $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 28949
   HEAP32[$170 >> 2] = $14; //@line 28950
   $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 28951
   HEAP32[$171 >> 2] = $16; //@line 28952
   $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 28953
   HEAP32[$172 >> 2] = $18; //@line 28954
   $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 28955
   HEAP32[$173 >> 2] = $20; //@line 28956
   $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 28957
   HEAP32[$174 >> 2] = $22; //@line 28958
   $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 28959
   HEAP32[$175 >> 2] = $24; //@line 28960
   $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 28961
   HEAP32[$176 >> 2] = $26; //@line 28962
   sp = STACKTOP; //@line 28963
   return;
  }
 }
 if ($140 & 8) {
  HEAP8[$2 >> 0] = $140 & -9; //@line 28971
  $181 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28973
  $182 = $181 + 32 | 0; //@line 28974
  $184 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 28976
  $185 = $181 + 44 | 0; //@line 28977
  $186 = HEAP32[$185 >> 2] | 0; //@line 28978
  if (!$186) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 28981
   _mbed_assert_internal(15061, 15066, 1102); //@line 28982
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 28985
    $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 28986
    HEAP32[$188 >> 2] = $2; //@line 28987
    $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 28988
    HEAP32[$189 >> 2] = $4; //@line 28989
    $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 28990
    HEAP32[$190 >> 2] = $185; //@line 28991
    $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 28992
    HEAP32[$191 >> 2] = $10; //@line 28993
    $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 28994
    HEAP32[$192 >> 2] = $12; //@line 28995
    $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 28996
    HEAP32[$193 >> 2] = $14; //@line 28997
    $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 28998
    HEAP32[$194 >> 2] = $16; //@line 28999
    $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 29000
    HEAP32[$195 >> 2] = $18; //@line 29001
    $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 29002
    HEAP32[$196 >> 2] = $20; //@line 29003
    $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 29004
    HEAP32[$197 >> 2] = $22; //@line 29005
    $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 29006
    HEAP32[$198 >> 2] = $24; //@line 29007
    $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 29008
    HEAP32[$199 >> 2] = $26; //@line 29009
    $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 29010
    HEAP32[$200 >> 2] = $182; //@line 29011
    $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 29012
    HEAP32[$201 >> 2] = $184; //@line 29013
    sp = STACKTOP; //@line 29014
    return;
   }
   ___async_unwind = 0; //@line 29017
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 29018
   $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 29019
   HEAP32[$188 >> 2] = $2; //@line 29020
   $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 29021
   HEAP32[$189 >> 2] = $4; //@line 29022
   $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 29023
   HEAP32[$190 >> 2] = $185; //@line 29024
   $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 29025
   HEAP32[$191 >> 2] = $10; //@line 29026
   $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 29027
   HEAP32[$192 >> 2] = $12; //@line 29028
   $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 29029
   HEAP32[$193 >> 2] = $14; //@line 29030
   $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 29031
   HEAP32[$194 >> 2] = $16; //@line 29032
   $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 29033
   HEAP32[$195 >> 2] = $18; //@line 29034
   $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 29035
   HEAP32[$196 >> 2] = $20; //@line 29036
   $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 29037
   HEAP32[$197 >> 2] = $22; //@line 29038
   $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 29039
   HEAP32[$198 >> 2] = $24; //@line 29040
   $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 29041
   HEAP32[$199 >> 2] = $26; //@line 29042
   $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 29043
   HEAP32[$200 >> 2] = $182; //@line 29044
   $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 29045
   HEAP32[$201 >> 2] = $184; //@line 29046
   sp = STACKTOP; //@line 29047
   return;
  } else {
   $202 = HEAP32[$186 >> 2] | 0; //@line 29050
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 29051
   FUNCTION_TABLE_vii[$202 & 31]($182, $184); //@line 29052
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 29055
    $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 29056
    HEAP32[$203 >> 2] = $2; //@line 29057
    $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 29058
    HEAP32[$204 >> 2] = $4; //@line 29059
    $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 29060
    HEAP32[$205 >> 2] = $10; //@line 29061
    $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 29062
    HEAP32[$206 >> 2] = $12; //@line 29063
    $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 29064
    HEAP32[$207 >> 2] = $14; //@line 29065
    $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 29066
    HEAP32[$208 >> 2] = $16; //@line 29067
    $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 29068
    HEAP32[$209 >> 2] = $18; //@line 29069
    $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 29070
    HEAP32[$210 >> 2] = $20; //@line 29071
    $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 29072
    HEAP32[$211 >> 2] = $22; //@line 29073
    $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 29074
    HEAP32[$212 >> 2] = $24; //@line 29075
    $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 29076
    HEAP32[$213 >> 2] = $26; //@line 29077
    sp = STACKTOP; //@line 29078
    return;
   }
   ___async_unwind = 0; //@line 29081
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 29082
   $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 29083
   HEAP32[$203 >> 2] = $2; //@line 29084
   $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 29085
   HEAP32[$204 >> 2] = $4; //@line 29086
   $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 29087
   HEAP32[$205 >> 2] = $10; //@line 29088
   $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 29089
   HEAP32[$206 >> 2] = $12; //@line 29090
   $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 29091
   HEAP32[$207 >> 2] = $14; //@line 29092
   $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 29093
   HEAP32[$208 >> 2] = $16; //@line 29094
   $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 29095
   HEAP32[$209 >> 2] = $18; //@line 29096
   $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 29097
   HEAP32[$210 >> 2] = $20; //@line 29098
   $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 29099
   HEAP32[$211 >> 2] = $22; //@line 29100
   $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 29101
   HEAP32[$212 >> 2] = $24; //@line 29102
   $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 29103
   HEAP32[$213 >> 2] = $26; //@line 29104
   sp = STACKTOP; //@line 29105
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $20) | 0; //@line 29112
  _printf(13114, $24) | 0; //@line 29113
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29114
  _putchar(10) | 0; //@line 29115
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 29118
   $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 29119
   HEAP32[$216 >> 2] = $2; //@line 29120
   $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 29121
   HEAP32[$217 >> 2] = $4; //@line 29122
   $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 29123
   HEAP32[$218 >> 2] = $10; //@line 29124
   $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 29125
   HEAP32[$219 >> 2] = $12; //@line 29126
   $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 29127
   HEAP32[$220 >> 2] = $14; //@line 29128
   $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 29129
   HEAP32[$221 >> 2] = $16; //@line 29130
   $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 29131
   HEAP32[$222 >> 2] = $18; //@line 29132
   sp = STACKTOP; //@line 29133
   return;
  }
  ___async_unwind = 0; //@line 29136
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 29137
  $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 29138
  HEAP32[$216 >> 2] = $2; //@line 29139
  $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 29140
  HEAP32[$217 >> 2] = $4; //@line 29141
  $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 29142
  HEAP32[$218 >> 2] = $10; //@line 29143
  $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 29144
  HEAP32[$219 >> 2] = $12; //@line 29145
  $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 29146
  HEAP32[$220 >> 2] = $14; //@line 29147
  $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 29148
  HEAP32[$221 >> 2] = $16; //@line 29149
  $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 29150
  HEAP32[$222 >> 2] = $18; //@line 29151
  sp = STACKTOP; //@line 29152
  return;
 }
 $223 = HEAP8[$2 >> 0] & -33; //@line 29156
 HEAP8[$2 >> 0] = $223; //@line 29157
 do {
  if (!($223 & 2)) {
   $262 = $223; //@line 29162
  } else {
   $234 = $223 & -3; //@line 29164
   HEAP8[$2 >> 0] = $234; //@line 29165
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $12) | 0; //@line 29170
    _printf(12994, $16) | 0; //@line 29171
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29172
    _putchar(10) | 0; //@line 29173
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 29176
     $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 29177
     HEAP32[$238 >> 2] = $2; //@line 29178
     $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 29179
     HEAP32[$239 >> 2] = $4; //@line 29180
     $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 29181
     HEAP32[$240 >> 2] = $10; //@line 29182
     $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 29183
     HEAP32[$241 >> 2] = $10; //@line 29184
     sp = STACKTOP; //@line 29185
     return;
    }
    ___async_unwind = 0; //@line 29188
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 29189
    $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 29190
    HEAP32[$238 >> 2] = $2; //@line 29191
    $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 29192
    HEAP32[$239 >> 2] = $4; //@line 29193
    $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 29194
    HEAP32[$240 >> 2] = $10; //@line 29195
    $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 29196
    HEAP32[$241 >> 2] = $10; //@line 29197
    sp = STACKTOP; //@line 29198
    return;
   }
   if ($234 & 4) {
    $260 = $234 & -5; //@line 29204
    HEAP8[$2 >> 0] = $260; //@line 29205
    $262 = $260; //@line 29206
    break;
   }
   $245 = HEAP32[$4 + 1324 >> 2] | 0; //@line 29210
   $246 = $245 + 16 | 0; //@line 29211
   $248 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 29213
   $249 = $245 + 28 | 0; //@line 29214
   $250 = HEAP32[$249 >> 2] | 0; //@line 29215
   if (!$250) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 29218
    _mbed_assert_internal(15061, 15066, 1102); //@line 29219
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 29222
     $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 29223
     HEAP32[$252 >> 2] = $249; //@line 29224
     $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 29225
     HEAP32[$253 >> 2] = $246; //@line 29226
     $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 29227
     HEAP32[$254 >> 2] = $248; //@line 29228
     $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 29229
     HEAP32[$255 >> 2] = $2; //@line 29230
     $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 29231
     HEAP32[$256 >> 2] = $4; //@line 29232
     sp = STACKTOP; //@line 29233
     return;
    }
    ___async_unwind = 0; //@line 29236
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 29237
    $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 29238
    HEAP32[$252 >> 2] = $249; //@line 29239
    $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 29240
    HEAP32[$253 >> 2] = $246; //@line 29241
    $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 29242
    HEAP32[$254 >> 2] = $248; //@line 29243
    $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 29244
    HEAP32[$255 >> 2] = $2; //@line 29245
    $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 29246
    HEAP32[$256 >> 2] = $4; //@line 29247
    sp = STACKTOP; //@line 29248
    return;
   } else {
    $257 = HEAP32[$250 >> 2] | 0; //@line 29251
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29252
    FUNCTION_TABLE_vii[$257 & 31]($246, $248); //@line 29253
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 29256
     $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 29257
     HEAP32[$258 >> 2] = $2; //@line 29258
     $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 29259
     HEAP32[$259 >> 2] = $4; //@line 29260
     sp = STACKTOP; //@line 29261
     return;
    }
    ___async_unwind = 0; //@line 29264
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 29265
    $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 29266
    HEAP32[$258 >> 2] = $2; //@line 29267
    $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 29268
    HEAP32[$259 >> 2] = $4; //@line 29269
    sp = STACKTOP; //@line 29270
    return;
   }
  }
 } while (0);
 if (!($262 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $262 & -17; //@line 29281
 $266 = HEAP32[$4 + 1324 >> 2] | 0; //@line 29283
 $267 = $266 + 48 | 0; //@line 29284
 $269 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 29286
 $270 = $266 + 60 | 0; //@line 29287
 $271 = HEAP32[$270 >> 2] | 0; //@line 29288
 if (!$271) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 29291
  _mbed_assert_internal(15061, 15066, 1102); //@line 29292
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 29295
   $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 29296
   HEAP32[$273 >> 2] = $270; //@line 29297
   $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 29298
   HEAP32[$274 >> 2] = $267; //@line 29299
   $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 29300
   HEAP32[$275 >> 2] = $269; //@line 29301
   sp = STACKTOP; //@line 29302
   return;
  }
  ___async_unwind = 0; //@line 29305
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 29306
  $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 29307
  HEAP32[$273 >> 2] = $270; //@line 29308
  $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 29309
  HEAP32[$274 >> 2] = $267; //@line 29310
  $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 29311
  HEAP32[$275 >> 2] = $269; //@line 29312
  sp = STACKTOP; //@line 29313
  return;
 } else {
  $276 = HEAP32[$271 >> 2] | 0; //@line 29316
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 29317
  FUNCTION_TABLE_vii[$276 & 31]($267, $269); //@line 29318
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 29321
   sp = STACKTOP; //@line 29322
   return;
  }
  ___async_unwind = 0; //@line 29325
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 29326
  sp = STACKTOP; //@line 29327
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_474($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27503
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27505
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27507
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27509
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27511
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27513
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27515
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27517
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27519
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27521
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27523
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27525
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27527
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27529
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27531
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27533
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27535
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(68) | 0; //@line 27540
  _mbed_assert_internal(12851, 12860, 194); //@line 27541
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 464; //@line 27544
   $35 = $ReallocAsyncCtx19 + 4 | 0; //@line 27545
   HEAP32[$35 >> 2] = $2; //@line 27546
   $36 = $ReallocAsyncCtx19 + 8 | 0; //@line 27547
   HEAP32[$36 >> 2] = $4; //@line 27548
   $37 = $ReallocAsyncCtx19 + 12 | 0; //@line 27549
   HEAP32[$37 >> 2] = $6; //@line 27550
   $38 = $ReallocAsyncCtx19 + 16 | 0; //@line 27551
   HEAP32[$38 >> 2] = $8; //@line 27552
   $39 = $ReallocAsyncCtx19 + 20 | 0; //@line 27553
   HEAP32[$39 >> 2] = $10; //@line 27554
   $40 = $ReallocAsyncCtx19 + 24 | 0; //@line 27555
   HEAP32[$40 >> 2] = $12; //@line 27556
   $41 = $ReallocAsyncCtx19 + 28 | 0; //@line 27557
   HEAP32[$41 >> 2] = $14; //@line 27558
   $42 = $ReallocAsyncCtx19 + 32 | 0; //@line 27559
   HEAP32[$42 >> 2] = $16; //@line 27560
   $43 = $ReallocAsyncCtx19 + 36 | 0; //@line 27561
   HEAP32[$43 >> 2] = $18; //@line 27562
   $44 = $ReallocAsyncCtx19 + 40 | 0; //@line 27563
   HEAP32[$44 >> 2] = $20; //@line 27564
   $45 = $ReallocAsyncCtx19 + 44 | 0; //@line 27565
   HEAP32[$45 >> 2] = $22; //@line 27566
   $46 = $ReallocAsyncCtx19 + 48 | 0; //@line 27567
   HEAP32[$46 >> 2] = $24; //@line 27568
   $47 = $ReallocAsyncCtx19 + 52 | 0; //@line 27569
   HEAP32[$47 >> 2] = $26; //@line 27570
   $48 = $ReallocAsyncCtx19 + 56 | 0; //@line 27571
   HEAP32[$48 >> 2] = $28; //@line 27572
   $49 = $ReallocAsyncCtx19 + 60 | 0; //@line 27573
   HEAP32[$49 >> 2] = $30; //@line 27574
   $50 = $ReallocAsyncCtx19 + 64 | 0; //@line 27575
   HEAP32[$50 >> 2] = $32; //@line 27576
   sp = STACKTOP; //@line 27577
   return;
  }
  ___async_unwind = 0; //@line 27580
  HEAP32[$ReallocAsyncCtx19 >> 2] = 464; //@line 27581
  $35 = $ReallocAsyncCtx19 + 4 | 0; //@line 27582
  HEAP32[$35 >> 2] = $2; //@line 27583
  $36 = $ReallocAsyncCtx19 + 8 | 0; //@line 27584
  HEAP32[$36 >> 2] = $4; //@line 27585
  $37 = $ReallocAsyncCtx19 + 12 | 0; //@line 27586
  HEAP32[$37 >> 2] = $6; //@line 27587
  $38 = $ReallocAsyncCtx19 + 16 | 0; //@line 27588
  HEAP32[$38 >> 2] = $8; //@line 27589
  $39 = $ReallocAsyncCtx19 + 20 | 0; //@line 27590
  HEAP32[$39 >> 2] = $10; //@line 27591
  $40 = $ReallocAsyncCtx19 + 24 | 0; //@line 27592
  HEAP32[$40 >> 2] = $12; //@line 27593
  $41 = $ReallocAsyncCtx19 + 28 | 0; //@line 27594
  HEAP32[$41 >> 2] = $14; //@line 27595
  $42 = $ReallocAsyncCtx19 + 32 | 0; //@line 27596
  HEAP32[$42 >> 2] = $16; //@line 27597
  $43 = $ReallocAsyncCtx19 + 36 | 0; //@line 27598
  HEAP32[$43 >> 2] = $18; //@line 27599
  $44 = $ReallocAsyncCtx19 + 40 | 0; //@line 27600
  HEAP32[$44 >> 2] = $20; //@line 27601
  $45 = $ReallocAsyncCtx19 + 44 | 0; //@line 27602
  HEAP32[$45 >> 2] = $22; //@line 27603
  $46 = $ReallocAsyncCtx19 + 48 | 0; //@line 27604
  HEAP32[$46 >> 2] = $24; //@line 27605
  $47 = $ReallocAsyncCtx19 + 52 | 0; //@line 27606
  HEAP32[$47 >> 2] = $26; //@line 27607
  $48 = $ReallocAsyncCtx19 + 56 | 0; //@line 27608
  HEAP32[$48 >> 2] = $28; //@line 27609
  $49 = $ReallocAsyncCtx19 + 60 | 0; //@line 27610
  HEAP32[$49 >> 2] = $30; //@line 27611
  $50 = $ReallocAsyncCtx19 + 64 | 0; //@line 27612
  HEAP32[$50 >> 2] = $32; //@line 27613
  sp = STACKTOP; //@line 27614
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $54 = $4 + 288 | 0; //@line 27622
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 27638
   HEAP8[$30 >> 0] = 0; //@line 27639
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $68 = $4 + 956 | 0; //@line 27644
    HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1; //@line 27647
   }
   $72 = HEAP8[$4 + 895 >> 0] | 0; //@line 27650
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 11 >> 0] = $72; //@line 27653
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 27656
  }
 } while (0);
 $77 = $4 + 377 | 0; //@line 27659
 if (HEAP8[$77 >> 0] | 0) {
  if (!(HEAP32[$6 >> 2] & 16)) {
   HEAP8[$77 >> 0] = 0; //@line 27667
   $83 = $4 + 895 | 0; //@line 27668
   $84 = HEAP8[$83 >> 0] | 0; //@line 27669
   if (!(($84 & 255) < 9 ? ($84 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $114 = HEAP32[$4 >> 2] | 0; //@line 27676
    $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0; //@line 27679
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 27680
    FUNCTION_TABLE_vi[$117 & 1023]($114); //@line 27681
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 27684
     $118 = $ReallocAsyncCtx + 4 | 0; //@line 27685
     HEAP32[$118 >> 2] = $2; //@line 27686
     $119 = $ReallocAsyncCtx + 8 | 0; //@line 27687
     HEAP32[$119 >> 2] = $4; //@line 27688
     $120 = $ReallocAsyncCtx + 12 | 0; //@line 27689
     HEAP32[$120 >> 2] = $6; //@line 27690
     $121 = $ReallocAsyncCtx + 16 | 0; //@line 27691
     HEAP32[$121 >> 2] = $8; //@line 27692
     $122 = $ReallocAsyncCtx + 20 | 0; //@line 27693
     HEAP32[$122 >> 2] = $10; //@line 27694
     $123 = $ReallocAsyncCtx + 24 | 0; //@line 27695
     HEAP32[$123 >> 2] = $12; //@line 27696
     $124 = $ReallocAsyncCtx + 28 | 0; //@line 27697
     HEAP32[$124 >> 2] = $14; //@line 27698
     $125 = $ReallocAsyncCtx + 32 | 0; //@line 27699
     HEAP32[$125 >> 2] = $16; //@line 27700
     $126 = $ReallocAsyncCtx + 36 | 0; //@line 27701
     HEAP32[$126 >> 2] = $26; //@line 27702
     $127 = $ReallocAsyncCtx + 40 | 0; //@line 27703
     HEAP32[$127 >> 2] = $28; //@line 27704
     $128 = $ReallocAsyncCtx + 44 | 0; //@line 27705
     HEAP32[$128 >> 2] = $18; //@line 27706
     $129 = $ReallocAsyncCtx + 48 | 0; //@line 27707
     HEAP32[$129 >> 2] = $20; //@line 27708
     $130 = $ReallocAsyncCtx + 52 | 0; //@line 27709
     HEAP32[$130 >> 2] = $22; //@line 27710
     $131 = $ReallocAsyncCtx + 56 | 0; //@line 27711
     HEAP32[$131 >> 2] = $24; //@line 27712
     $132 = $ReallocAsyncCtx + 60 | 0; //@line 27713
     HEAP32[$132 >> 2] = $30; //@line 27714
     $133 = $ReallocAsyncCtx + 64 | 0; //@line 27715
     HEAP32[$133 >> 2] = $83; //@line 27716
     sp = STACKTOP; //@line 27717
     return;
    }
    ___async_unwind = 0; //@line 27720
    HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 27721
    $118 = $ReallocAsyncCtx + 4 | 0; //@line 27722
    HEAP32[$118 >> 2] = $2; //@line 27723
    $119 = $ReallocAsyncCtx + 8 | 0; //@line 27724
    HEAP32[$119 >> 2] = $4; //@line 27725
    $120 = $ReallocAsyncCtx + 12 | 0; //@line 27726
    HEAP32[$120 >> 2] = $6; //@line 27727
    $121 = $ReallocAsyncCtx + 16 | 0; //@line 27728
    HEAP32[$121 >> 2] = $8; //@line 27729
    $122 = $ReallocAsyncCtx + 20 | 0; //@line 27730
    HEAP32[$122 >> 2] = $10; //@line 27731
    $123 = $ReallocAsyncCtx + 24 | 0; //@line 27732
    HEAP32[$123 >> 2] = $12; //@line 27733
    $124 = $ReallocAsyncCtx + 28 | 0; //@line 27734
    HEAP32[$124 >> 2] = $14; //@line 27735
    $125 = $ReallocAsyncCtx + 32 | 0; //@line 27736
    HEAP32[$125 >> 2] = $16; //@line 27737
    $126 = $ReallocAsyncCtx + 36 | 0; //@line 27738
    HEAP32[$126 >> 2] = $26; //@line 27739
    $127 = $ReallocAsyncCtx + 40 | 0; //@line 27740
    HEAP32[$127 >> 2] = $28; //@line 27741
    $128 = $ReallocAsyncCtx + 44 | 0; //@line 27742
    HEAP32[$128 >> 2] = $18; //@line 27743
    $129 = $ReallocAsyncCtx + 48 | 0; //@line 27744
    HEAP32[$129 >> 2] = $20; //@line 27745
    $130 = $ReallocAsyncCtx + 52 | 0; //@line 27746
    HEAP32[$130 >> 2] = $22; //@line 27747
    $131 = $ReallocAsyncCtx + 56 | 0; //@line 27748
    HEAP32[$131 >> 2] = $24; //@line 27749
    $132 = $ReallocAsyncCtx + 60 | 0; //@line 27750
    HEAP32[$132 >> 2] = $30; //@line 27751
    $133 = $ReallocAsyncCtx + 64 | 0; //@line 27752
    HEAP32[$133 >> 2] = $83; //@line 27753
    sp = STACKTOP; //@line 27754
    return;
   }
   $89 = $84 + 1 << 24 >> 24; //@line 27757
   HEAP8[$83 >> 0] = $89; //@line 27758
   if ($89 & 1) {
    $93 = $4 + 1097 | 0; //@line 27763
    HEAP8[$93 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$93 >> 0] | 0) | 0; //@line 27766
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 27768
   $96 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 27769
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 27772
    $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 27773
    HEAP32[$97 >> 2] = $2; //@line 27774
    $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 27775
    HEAP32[$98 >> 2] = $4; //@line 27776
    $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 27777
    HEAP32[$99 >> 2] = $6; //@line 27778
    $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 27779
    HEAP32[$100 >> 2] = $30; //@line 27780
    $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 27781
    HEAP32[$101 >> 2] = $83; //@line 27782
    $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 27783
    HEAP32[$102 >> 2] = $8; //@line 27784
    $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 27785
    HEAP32[$103 >> 2] = $10; //@line 27786
    $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 27787
    HEAP32[$104 >> 2] = $12; //@line 27788
    $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 27789
    HEAP32[$105 >> 2] = $14; //@line 27790
    $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 27791
    HEAP32[$106 >> 2] = $16; //@line 27792
    $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 27793
    HEAP32[$107 >> 2] = $18; //@line 27794
    $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 27795
    HEAP32[$108 >> 2] = $20; //@line 27796
    $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 27797
    HEAP32[$109 >> 2] = $22; //@line 27798
    $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 27799
    HEAP32[$110 >> 2] = $24; //@line 27800
    $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 27801
    HEAP32[$111 >> 2] = $26; //@line 27802
    $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 27803
    HEAP32[$112 >> 2] = $28; //@line 27804
    sp = STACKTOP; //@line 27805
    return;
   }
   HEAP32[___async_retval >> 2] = $96; //@line 27809
   ___async_unwind = 0; //@line 27810
   HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 27811
   $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 27812
   HEAP32[$97 >> 2] = $2; //@line 27813
   $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 27814
   HEAP32[$98 >> 2] = $4; //@line 27815
   $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 27816
   HEAP32[$99 >> 2] = $6; //@line 27817
   $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 27818
   HEAP32[$100 >> 2] = $30; //@line 27819
   $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 27820
   HEAP32[$101 >> 2] = $83; //@line 27821
   $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 27822
   HEAP32[$102 >> 2] = $8; //@line 27823
   $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 27824
   HEAP32[$103 >> 2] = $10; //@line 27825
   $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 27826
   HEAP32[$104 >> 2] = $12; //@line 27827
   $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 27828
   HEAP32[$105 >> 2] = $14; //@line 27829
   $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 27830
   HEAP32[$106 >> 2] = $16; //@line 27831
   $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 27832
   HEAP32[$107 >> 2] = $18; //@line 27833
   $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 27834
   HEAP32[$108 >> 2] = $20; //@line 27835
   $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 27836
   HEAP32[$109 >> 2] = $22; //@line 27837
   $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 27838
   HEAP32[$110 >> 2] = $24; //@line 27839
   $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 27840
   HEAP32[$111 >> 2] = $26; //@line 27841
   $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 27842
   HEAP32[$112 >> 2] = $28; //@line 27843
   sp = STACKTOP; //@line 27844
   return;
  }
 }
 $134 = HEAP32[$6 >> 2] | 0; //@line 27848
 $137 = $134 & -3; //@line 27851
 if (!($134 & 2)) {
  $139 = $134; //@line 27853
 } else {
  HEAP32[$6 >> 2] = $137; //@line 27855
  $139 = $137; //@line 27856
 }
 if ($139 | 0) {
  $224 = HEAP32[$26 >> 2] | 0; //@line 27860
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 27861
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($224, $28, 1e3); //@line 27862
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 27865
   $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 27866
   HEAP32[$225 >> 2] = $2; //@line 27867
   $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 27868
   HEAP32[$226 >> 2] = $4; //@line 27869
   $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 27870
   HEAP32[$227 >> 2] = $8; //@line 27871
   $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 27872
   HEAP32[$228 >> 2] = $10; //@line 27873
   $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 27874
   HEAP32[$229 >> 2] = $12; //@line 27875
   $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 27876
   HEAP32[$230 >> 2] = $14; //@line 27877
   $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 27878
   HEAP32[$231 >> 2] = $16; //@line 27879
   sp = STACKTOP; //@line 27880
   return;
  }
  ___async_unwind = 0; //@line 27883
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 27884
  $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 27885
  HEAP32[$225 >> 2] = $2; //@line 27886
  $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 27887
  HEAP32[$226 >> 2] = $4; //@line 27888
  $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 27889
  HEAP32[$227 >> 2] = $8; //@line 27890
  $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 27891
  HEAP32[$228 >> 2] = $10; //@line 27892
  $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 27893
  HEAP32[$229 >> 2] = $12; //@line 27894
  $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 27895
  HEAP32[$230 >> 2] = $14; //@line 27896
  $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 27897
  HEAP32[$231 >> 2] = $16; //@line 27898
  sp = STACKTOP; //@line 27899
  return;
 }
 $140 = HEAP8[$2 >> 0] | 0; //@line 27902
 if ($140 & 1) {
  HEAP8[$2 >> 0] = $140 & -2; //@line 27907
  $145 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27909
  $147 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 27911
  $148 = $145 + 12 | 0; //@line 27912
  $149 = HEAP32[$148 >> 2] | 0; //@line 27913
  if (!$149) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 27916
   _mbed_assert_internal(15061, 15066, 1102); //@line 27917
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 27920
    $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 27921
    HEAP32[$151 >> 2] = $2; //@line 27922
    $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 27923
    HEAP32[$152 >> 2] = $145; //@line 27924
    $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 27925
    HEAP32[$153 >> 2] = $147; //@line 27926
    $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 27927
    HEAP32[$154 >> 2] = $4; //@line 27928
    $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 27929
    HEAP32[$155 >> 2] = $8; //@line 27930
    $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 27931
    HEAP32[$156 >> 2] = $10; //@line 27932
    $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 27933
    HEAP32[$157 >> 2] = $12; //@line 27934
    $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 27935
    HEAP32[$158 >> 2] = $14; //@line 27936
    $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 27937
    HEAP32[$159 >> 2] = $16; //@line 27938
    $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 27939
    HEAP32[$160 >> 2] = $18; //@line 27940
    $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 27941
    HEAP32[$161 >> 2] = $20; //@line 27942
    $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 27943
    HEAP32[$162 >> 2] = $22; //@line 27944
    $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 27945
    HEAP32[$163 >> 2] = $24; //@line 27946
    $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 27947
    HEAP32[$164 >> 2] = $148; //@line 27948
    sp = STACKTOP; //@line 27949
    return;
   }
   ___async_unwind = 0; //@line 27952
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 27953
   $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 27954
   HEAP32[$151 >> 2] = $2; //@line 27955
   $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 27956
   HEAP32[$152 >> 2] = $145; //@line 27957
   $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 27958
   HEAP32[$153 >> 2] = $147; //@line 27959
   $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 27960
   HEAP32[$154 >> 2] = $4; //@line 27961
   $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 27962
   HEAP32[$155 >> 2] = $8; //@line 27963
   $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 27964
   HEAP32[$156 >> 2] = $10; //@line 27965
   $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 27966
   HEAP32[$157 >> 2] = $12; //@line 27967
   $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 27968
   HEAP32[$158 >> 2] = $14; //@line 27969
   $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 27970
   HEAP32[$159 >> 2] = $16; //@line 27971
   $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 27972
   HEAP32[$160 >> 2] = $18; //@line 27973
   $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 27974
   HEAP32[$161 >> 2] = $20; //@line 27975
   $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 27976
   HEAP32[$162 >> 2] = $22; //@line 27977
   $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 27978
   HEAP32[$163 >> 2] = $24; //@line 27979
   $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 27980
   HEAP32[$164 >> 2] = $148; //@line 27981
   sp = STACKTOP; //@line 27982
   return;
  } else {
   $165 = HEAP32[$149 >> 2] | 0; //@line 27985
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 27986
   FUNCTION_TABLE_vii[$165 & 31]($145, $147); //@line 27987
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 27990
    $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 27991
    HEAP32[$166 >> 2] = $2; //@line 27992
    $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 27993
    HEAP32[$167 >> 2] = $4; //@line 27994
    $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 27995
    HEAP32[$168 >> 2] = $8; //@line 27996
    $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 27997
    HEAP32[$169 >> 2] = $10; //@line 27998
    $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 27999
    HEAP32[$170 >> 2] = $12; //@line 28000
    $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 28001
    HEAP32[$171 >> 2] = $14; //@line 28002
    $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 28003
    HEAP32[$172 >> 2] = $16; //@line 28004
    $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 28005
    HEAP32[$173 >> 2] = $18; //@line 28006
    $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 28007
    HEAP32[$174 >> 2] = $20; //@line 28008
    $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 28009
    HEAP32[$175 >> 2] = $22; //@line 28010
    $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 28011
    HEAP32[$176 >> 2] = $24; //@line 28012
    sp = STACKTOP; //@line 28013
    return;
   }
   ___async_unwind = 0; //@line 28016
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 28017
   $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 28018
   HEAP32[$166 >> 2] = $2; //@line 28019
   $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 28020
   HEAP32[$167 >> 2] = $4; //@line 28021
   $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 28022
   HEAP32[$168 >> 2] = $8; //@line 28023
   $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 28024
   HEAP32[$169 >> 2] = $10; //@line 28025
   $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 28026
   HEAP32[$170 >> 2] = $12; //@line 28027
   $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 28028
   HEAP32[$171 >> 2] = $14; //@line 28029
   $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 28030
   HEAP32[$172 >> 2] = $16; //@line 28031
   $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 28032
   HEAP32[$173 >> 2] = $18; //@line 28033
   $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 28034
   HEAP32[$174 >> 2] = $20; //@line 28035
   $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 28036
   HEAP32[$175 >> 2] = $22; //@line 28037
   $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 28038
   HEAP32[$176 >> 2] = $24; //@line 28039
   sp = STACKTOP; //@line 28040
   return;
  }
 }
 if ($140 & 8) {
  HEAP8[$2 >> 0] = $140 & -9; //@line 28048
  $181 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28050
  $182 = $181 + 32 | 0; //@line 28051
  $184 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 28053
  $185 = $181 + 44 | 0; //@line 28054
  $186 = HEAP32[$185 >> 2] | 0; //@line 28055
  if (!$186) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 28058
   _mbed_assert_internal(15061, 15066, 1102); //@line 28059
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 28062
    $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 28063
    HEAP32[$188 >> 2] = $2; //@line 28064
    $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 28065
    HEAP32[$189 >> 2] = $4; //@line 28066
    $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 28067
    HEAP32[$190 >> 2] = $185; //@line 28068
    $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 28069
    HEAP32[$191 >> 2] = $8; //@line 28070
    $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 28071
    HEAP32[$192 >> 2] = $10; //@line 28072
    $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 28073
    HEAP32[$193 >> 2] = $12; //@line 28074
    $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 28075
    HEAP32[$194 >> 2] = $14; //@line 28076
    $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 28077
    HEAP32[$195 >> 2] = $16; //@line 28078
    $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 28079
    HEAP32[$196 >> 2] = $18; //@line 28080
    $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 28081
    HEAP32[$197 >> 2] = $20; //@line 28082
    $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 28083
    HEAP32[$198 >> 2] = $22; //@line 28084
    $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 28085
    HEAP32[$199 >> 2] = $24; //@line 28086
    $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 28087
    HEAP32[$200 >> 2] = $182; //@line 28088
    $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 28089
    HEAP32[$201 >> 2] = $184; //@line 28090
    sp = STACKTOP; //@line 28091
    return;
   }
   ___async_unwind = 0; //@line 28094
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 28095
   $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 28096
   HEAP32[$188 >> 2] = $2; //@line 28097
   $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 28098
   HEAP32[$189 >> 2] = $4; //@line 28099
   $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 28100
   HEAP32[$190 >> 2] = $185; //@line 28101
   $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 28102
   HEAP32[$191 >> 2] = $8; //@line 28103
   $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 28104
   HEAP32[$192 >> 2] = $10; //@line 28105
   $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 28106
   HEAP32[$193 >> 2] = $12; //@line 28107
   $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 28108
   HEAP32[$194 >> 2] = $14; //@line 28109
   $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 28110
   HEAP32[$195 >> 2] = $16; //@line 28111
   $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 28112
   HEAP32[$196 >> 2] = $18; //@line 28113
   $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 28114
   HEAP32[$197 >> 2] = $20; //@line 28115
   $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 28116
   HEAP32[$198 >> 2] = $22; //@line 28117
   $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 28118
   HEAP32[$199 >> 2] = $24; //@line 28119
   $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 28120
   HEAP32[$200 >> 2] = $182; //@line 28121
   $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 28122
   HEAP32[$201 >> 2] = $184; //@line 28123
   sp = STACKTOP; //@line 28124
   return;
  } else {
   $202 = HEAP32[$186 >> 2] | 0; //@line 28127
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 28128
   FUNCTION_TABLE_vii[$202 & 31]($182, $184); //@line 28129
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 28132
    $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 28133
    HEAP32[$203 >> 2] = $2; //@line 28134
    $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 28135
    HEAP32[$204 >> 2] = $4; //@line 28136
    $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 28137
    HEAP32[$205 >> 2] = $8; //@line 28138
    $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 28139
    HEAP32[$206 >> 2] = $10; //@line 28140
    $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 28141
    HEAP32[$207 >> 2] = $12; //@line 28142
    $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 28143
    HEAP32[$208 >> 2] = $14; //@line 28144
    $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 28145
    HEAP32[$209 >> 2] = $16; //@line 28146
    $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 28147
    HEAP32[$210 >> 2] = $18; //@line 28148
    $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 28149
    HEAP32[$211 >> 2] = $20; //@line 28150
    $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 28151
    HEAP32[$212 >> 2] = $22; //@line 28152
    $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 28153
    HEAP32[$213 >> 2] = $24; //@line 28154
    sp = STACKTOP; //@line 28155
    return;
   }
   ___async_unwind = 0; //@line 28158
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 28159
   $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 28160
   HEAP32[$203 >> 2] = $2; //@line 28161
   $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 28162
   HEAP32[$204 >> 2] = $4; //@line 28163
   $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 28164
   HEAP32[$205 >> 2] = $8; //@line 28165
   $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 28166
   HEAP32[$206 >> 2] = $10; //@line 28167
   $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 28168
   HEAP32[$207 >> 2] = $12; //@line 28169
   $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 28170
   HEAP32[$208 >> 2] = $14; //@line 28171
   $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 28172
   HEAP32[$209 >> 2] = $16; //@line 28173
   $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 28174
   HEAP32[$210 >> 2] = $18; //@line 28175
   $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 28176
   HEAP32[$211 >> 2] = $20; //@line 28177
   $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 28178
   HEAP32[$212 >> 2] = $22; //@line 28179
   $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 28180
   HEAP32[$213 >> 2] = $24; //@line 28181
   sp = STACKTOP; //@line 28182
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $18) | 0; //@line 28189
  _printf(13114, $22) | 0; //@line 28190
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 28191
  _putchar(10) | 0; //@line 28192
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 28195
   $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 28196
   HEAP32[$216 >> 2] = $2; //@line 28197
   $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 28198
   HEAP32[$217 >> 2] = $4; //@line 28199
   $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 28200
   HEAP32[$218 >> 2] = $8; //@line 28201
   $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 28202
   HEAP32[$219 >> 2] = $10; //@line 28203
   $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 28204
   HEAP32[$220 >> 2] = $12; //@line 28205
   $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 28206
   HEAP32[$221 >> 2] = $14; //@line 28207
   $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 28208
   HEAP32[$222 >> 2] = $16; //@line 28209
   sp = STACKTOP; //@line 28210
   return;
  }
  ___async_unwind = 0; //@line 28213
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 28214
  $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 28215
  HEAP32[$216 >> 2] = $2; //@line 28216
  $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 28217
  HEAP32[$217 >> 2] = $4; //@line 28218
  $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 28219
  HEAP32[$218 >> 2] = $8; //@line 28220
  $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 28221
  HEAP32[$219 >> 2] = $10; //@line 28222
  $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 28223
  HEAP32[$220 >> 2] = $12; //@line 28224
  $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 28225
  HEAP32[$221 >> 2] = $14; //@line 28226
  $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 28227
  HEAP32[$222 >> 2] = $16; //@line 28228
  sp = STACKTOP; //@line 28229
  return;
 }
 $223 = HEAP8[$2 >> 0] & -33; //@line 28233
 HEAP8[$2 >> 0] = $223; //@line 28234
 do {
  if (!($223 & 2)) {
   $262 = $223; //@line 28239
  } else {
   $234 = $223 & -3; //@line 28241
   HEAP8[$2 >> 0] = $234; //@line 28242
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $10) | 0; //@line 28247
    _printf(12994, $14) | 0; //@line 28248
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28249
    _putchar(10) | 0; //@line 28250
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 28253
     $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 28254
     HEAP32[$238 >> 2] = $2; //@line 28255
     $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 28256
     HEAP32[$239 >> 2] = $4; //@line 28257
     $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 28258
     HEAP32[$240 >> 2] = $8; //@line 28259
     $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 28260
     HEAP32[$241 >> 2] = $8; //@line 28261
     sp = STACKTOP; //@line 28262
     return;
    }
    ___async_unwind = 0; //@line 28265
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 28266
    $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 28267
    HEAP32[$238 >> 2] = $2; //@line 28268
    $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 28269
    HEAP32[$239 >> 2] = $4; //@line 28270
    $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 28271
    HEAP32[$240 >> 2] = $8; //@line 28272
    $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 28273
    HEAP32[$241 >> 2] = $8; //@line 28274
    sp = STACKTOP; //@line 28275
    return;
   }
   if ($234 & 4) {
    $260 = $234 & -5; //@line 28281
    HEAP8[$2 >> 0] = $260; //@line 28282
    $262 = $260; //@line 28283
    break;
   }
   $245 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28287
   $246 = $245 + 16 | 0; //@line 28288
   $248 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 28290
   $249 = $245 + 28 | 0; //@line 28291
   $250 = HEAP32[$249 >> 2] | 0; //@line 28292
   if (!$250) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 28295
    _mbed_assert_internal(15061, 15066, 1102); //@line 28296
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 28299
     $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 28300
     HEAP32[$252 >> 2] = $249; //@line 28301
     $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 28302
     HEAP32[$253 >> 2] = $246; //@line 28303
     $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 28304
     HEAP32[$254 >> 2] = $248; //@line 28305
     $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 28306
     HEAP32[$255 >> 2] = $2; //@line 28307
     $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 28308
     HEAP32[$256 >> 2] = $4; //@line 28309
     sp = STACKTOP; //@line 28310
     return;
    }
    ___async_unwind = 0; //@line 28313
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 28314
    $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 28315
    HEAP32[$252 >> 2] = $249; //@line 28316
    $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 28317
    HEAP32[$253 >> 2] = $246; //@line 28318
    $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 28319
    HEAP32[$254 >> 2] = $248; //@line 28320
    $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 28321
    HEAP32[$255 >> 2] = $2; //@line 28322
    $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 28323
    HEAP32[$256 >> 2] = $4; //@line 28324
    sp = STACKTOP; //@line 28325
    return;
   } else {
    $257 = HEAP32[$250 >> 2] | 0; //@line 28328
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28329
    FUNCTION_TABLE_vii[$257 & 31]($246, $248); //@line 28330
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 28333
     $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 28334
     HEAP32[$258 >> 2] = $2; //@line 28335
     $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 28336
     HEAP32[$259 >> 2] = $4; //@line 28337
     sp = STACKTOP; //@line 28338
     return;
    }
    ___async_unwind = 0; //@line 28341
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 28342
    $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 28343
    HEAP32[$258 >> 2] = $2; //@line 28344
    $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 28345
    HEAP32[$259 >> 2] = $4; //@line 28346
    sp = STACKTOP; //@line 28347
    return;
   }
  }
 } while (0);
 if (!($262 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $262 & -17; //@line 28358
 $266 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28360
 $267 = $266 + 48 | 0; //@line 28361
 $269 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 28363
 $270 = $266 + 60 | 0; //@line 28364
 $271 = HEAP32[$270 >> 2] | 0; //@line 28365
 if (!$271) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 28368
  _mbed_assert_internal(15061, 15066, 1102); //@line 28369
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 28372
   $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 28373
   HEAP32[$273 >> 2] = $270; //@line 28374
   $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 28375
   HEAP32[$274 >> 2] = $267; //@line 28376
   $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 28377
   HEAP32[$275 >> 2] = $269; //@line 28378
   sp = STACKTOP; //@line 28379
   return;
  }
  ___async_unwind = 0; //@line 28382
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 28383
  $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 28384
  HEAP32[$273 >> 2] = $270; //@line 28385
  $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 28386
  HEAP32[$274 >> 2] = $267; //@line 28387
  $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 28388
  HEAP32[$275 >> 2] = $269; //@line 28389
  sp = STACKTOP; //@line 28390
  return;
 } else {
  $276 = HEAP32[$271 >> 2] | 0; //@line 28393
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 28394
  FUNCTION_TABLE_vii[$276 & 31]($267, $269); //@line 28395
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 28398
   sp = STACKTOP; //@line 28399
   return;
  }
  ___async_unwind = 0; //@line 28402
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 28403
  sp = STACKTOP; //@line 28404
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy98 = 0, $$pre20 = 0, $1 = 0, $119 = 0, $124 = 0, $130 = 0, $136 = 0, $143 = 0, $144 = 0, $181 = 0, $19 = 0, $192 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $205 = 0, $211 = 0, $212 = 0, $217 = 0, $221 = 0, $224 = 0, $23 = 0, $244 = 0, $252 = 0, $256 = 0, $262 = 0, $265 = 0, $268 = 0, $288 = 0, $29 = 0, $291 = 0, $297 = 0, $3 = 0, $300 = 0, $303 = 0, $305 = 0, $306 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $331 = 0, $332 = 0, $345 = 0, $349 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $370 = 0, $371 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $407 = 0, $409 = 0, $418 = 0, $419 = 0, $429 = 0, $43 = 0, $432 = 0, $433 = 0, $435 = 0, $436 = 0, $437 = 0, $444 = 0, $445 = 0, $448 = 0, $449 = 0, $451 = 0, $455 = 0, $456 = 0, $458 = 0, $459 = 0, $460 = 0, $465 = 0, $466 = 0, $51 = 0, $54 = 0, $59 = 0, $63 = 0, $64 = 0, $84 = 0, $85 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14741
 STACKTOP = STACKTOP + 48 | 0; //@line 14742
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14742
 $$byval_copy98 = sp + 40 | 0; //@line 14743
 $vararg_buffer5 = sp + 24 | 0; //@line 14744
 $vararg_buffer3 = sp + 16 | 0; //@line 14745
 $vararg_buffer1 = sp + 8 | 0; //@line 14746
 $vararg_buffer = sp; //@line 14747
 $1 = sp + 32 | 0; //@line 14748
 $2 = $0 + 356 | 0; //@line 14749
 $3 = HEAP32[$2 >> 2] | 0; //@line 14750
 $4 = $0 + 996 | 0; //@line 14751
 $AsyncCtx48 = _emscripten_alloc_async_context(60, sp) | 0; //@line 14752
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $4); //@line 14753
 if (___async) {
  HEAP32[$AsyncCtx48 >> 2] = 459; //@line 14756
  HEAP32[$AsyncCtx48 + 4 >> 2] = $0; //@line 14758
  HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 14760
  HEAP32[$AsyncCtx48 + 12 >> 2] = $vararg_buffer3; //@line 14762
  HEAP32[$AsyncCtx48 + 16 >> 2] = $vararg_buffer3; //@line 14764
  HEAP32[$AsyncCtx48 + 20 >> 2] = $vararg_buffer5; //@line 14766
  HEAP32[$AsyncCtx48 + 24 >> 2] = $vararg_buffer5; //@line 14768
  HEAP32[$AsyncCtx48 + 28 >> 2] = $vararg_buffer; //@line 14770
  HEAP32[$AsyncCtx48 + 32 >> 2] = $vararg_buffer; //@line 14772
  HEAP32[$AsyncCtx48 + 36 >> 2] = $vararg_buffer1; //@line 14774
  HEAP32[$AsyncCtx48 + 40 >> 2] = $vararg_buffer1; //@line 14776
  HEAP32[$AsyncCtx48 + 44 >> 2] = $2; //@line 14778
  HEAP32[$AsyncCtx48 + 48 >> 2] = $4; //@line 14780
  HEAP32[$AsyncCtx48 + 52 >> 2] = $1; //@line 14782
  HEAP32[$AsyncCtx48 + 56 >> 2] = $1; //@line 14784
  sp = STACKTOP; //@line 14785
  STACKTOP = sp; //@line 14786
  return;
 }
 _emscripten_free_async_context($AsyncCtx48 | 0); //@line 14788
 $19 = $0 + 944 | 0; //@line 14789
 $20 = HEAP8[$19 >> 0] | 0; //@line 14790
 $$pre20 = $0 + 968 | 0; //@line 14793
 do {
  if ($20 & 32) {
   $23 = HEAP32[$$pre20 >> 2] | 0; //@line 14796
   if ($23 & 64 | 0) {
    HEAP32[$$pre20 >> 2] = $23 & -66; //@line 14801
   }
   do {
    if (!($20 & 9)) {
     label = 10; //@line 14807
    } else {
     $29 = $0 + 288 | 0; //@line 14809
     if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] | 0) != 2) {
      if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
       label = 10; //@line 14821
       break;
      }
     }
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14827
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14829
     $43 = HEAP8[$0 + 895 >> 0] | 0; //@line 14831
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 11 >> 0] = $43; //@line 14834
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 14837
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 12 >> 2] = 0; //@line 14840
     $192 = $0 + 373 | 0; //@line 14842
    }
   } while (0);
   do {
    if ((label | 0) == 10) {
     $51 = $0 + 373 | 0; //@line 14847
     if (!(HEAP8[$51 >> 0] | 0)) {
      $54 = HEAP8[$19 >> 0] | 0; //@line 14851
      if (!($54 & 9)) {
       $192 = $51; //@line 14855
      } else {
       if ($54 & 8) {
        $59 = $0 + 264 | 0; //@line 14860
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) >> 2] | 0)) {
         $63 = $0 + 897 | 0; //@line 14865
         $64 = HEAP8[$63 >> 0] | 0; //@line 14866
         HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) + 14 >> 0] = $64; //@line 14869
         if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) + 4 >> 2] | 0)) {
          HEAP32[$0 + 956 >> 2] = 0; //@line 14876
          HEAP8[$0 + 380 >> 0] = 0; //@line 14878
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14881
          $192 = $51; //@line 14882
          break;
         }
         if ((HEAPU8[$63 >> 0] | 0) >= (HEAPU8[$0 + 896 >> 0] | 0)) {
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14892
          $192 = $51; //@line 14893
          break;
         }
         HEAP8[$19 >> 0] = HEAP8[$19 >> 0] & -33; //@line 14898
         $84 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14900
         HEAP32[$1 >> 2] = 460; //@line 14901
         HEAP32[$1 + 4 >> 2] = 0; //@line 14903
         $AsyncCtx44 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14904
         HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 14905
         HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14905
         $85 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($84, $0, $$byval_copy98) | 0; //@line 14906
         if (___async) {
          HEAP32[$AsyncCtx44 >> 2] = 461; //@line 14909
          HEAP32[$AsyncCtx44 + 4 >> 2] = $19; //@line 14911
          HEAP32[$AsyncCtx44 + 8 >> 2] = $0; //@line 14913
          HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 14915
          HEAP32[$AsyncCtx44 + 16 >> 2] = $$pre20; //@line 14917
          HEAP32[$AsyncCtx44 + 20 >> 2] = $1; //@line 14919
          HEAP32[$AsyncCtx44 + 24 >> 2] = $vararg_buffer3; //@line 14921
          HEAP32[$AsyncCtx44 + 28 >> 2] = $vararg_buffer3; //@line 14923
          HEAP32[$AsyncCtx44 + 32 >> 2] = $vararg_buffer5; //@line 14925
          HEAP32[$AsyncCtx44 + 36 >> 2] = $vararg_buffer5; //@line 14927
          HEAP32[$AsyncCtx44 + 40 >> 2] = $vararg_buffer; //@line 14929
          HEAP32[$AsyncCtx44 + 44 >> 2] = $vararg_buffer; //@line 14931
          HEAP32[$AsyncCtx44 + 48 >> 2] = $vararg_buffer1; //@line 14933
          HEAP32[$AsyncCtx44 + 52 >> 2] = $vararg_buffer1; //@line 14935
          HEAP32[$AsyncCtx44 + 56 >> 2] = $2; //@line 14937
          HEAP32[$AsyncCtx44 + 60 >> 2] = $4; //@line 14939
          HEAP32[$AsyncCtx44 + 64 >> 2] = $51; //@line 14941
          sp = STACKTOP; //@line 14942
          STACKTOP = sp; //@line 14943
          return;
         }
         _emscripten_free_async_context($AsyncCtx44 | 0); //@line 14945
         do {
          if (!$85) {
           $AsyncCtx76 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14949
           _mbed_assert_internal(12851, 12860, 194); //@line 14950
           if (___async) {
            HEAP32[$AsyncCtx76 >> 2] = 462; //@line 14953
            HEAP32[$AsyncCtx76 + 4 >> 2] = $19; //@line 14955
            HEAP32[$AsyncCtx76 + 8 >> 2] = $0; //@line 14957
            HEAP32[$AsyncCtx76 + 12 >> 2] = $1; //@line 14959
            HEAP32[$AsyncCtx76 + 16 >> 2] = $$pre20; //@line 14961
            HEAP32[$AsyncCtx76 + 20 >> 2] = $1; //@line 14963
            HEAP32[$AsyncCtx76 + 24 >> 2] = $vararg_buffer3; //@line 14965
            HEAP32[$AsyncCtx76 + 28 >> 2] = $vararg_buffer3; //@line 14967
            HEAP32[$AsyncCtx76 + 32 >> 2] = $vararg_buffer5; //@line 14969
            HEAP32[$AsyncCtx76 + 36 >> 2] = $vararg_buffer5; //@line 14971
            HEAP32[$AsyncCtx76 + 40 >> 2] = $vararg_buffer; //@line 14973
            HEAP32[$AsyncCtx76 + 44 >> 2] = $vararg_buffer; //@line 14975
            HEAP32[$AsyncCtx76 + 48 >> 2] = $vararg_buffer1; //@line 14977
            HEAP32[$AsyncCtx76 + 52 >> 2] = $vararg_buffer1; //@line 14979
            HEAP32[$AsyncCtx76 + 56 >> 2] = $2; //@line 14981
            HEAP32[$AsyncCtx76 + 60 >> 2] = $4; //@line 14983
            HEAP32[$AsyncCtx76 + 64 >> 2] = $51; //@line 14985
            sp = STACKTOP; //@line 14986
            STACKTOP = sp; //@line 14987
            return;
           } else {
            _emscripten_free_async_context($AsyncCtx76 | 0); //@line 14989
            break;
           }
          }
         } while (0);
         $192 = $51; //@line 14994
         break;
        }
       }
       $119 = $0 + 380 | 0; //@line 14998
       $124 = HEAP8[$19 >> 0] | 0; //@line 15003
       if (!(($124 & 2) == 0 ? (HEAPU8[$119 >> 0] | 0) < (HEAPU8[$0 + 1128 >> 0] | 0) : 0)) {
        if (!($124 & 2)) {
         __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15012
         $130 = $0 + 964 | 0; //@line 15013
         HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1; //@line 15016
        }
        HEAP8[$119 >> 0] = 0; //@line 15018
        if (!(HEAP8[$0 + 370 >> 0] | 0)) {
         $136 = $0 + 956 | 0; //@line 15023
         HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1; //@line 15026
        }
        HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15030
        $192 = $51; //@line 15031
        break;
       }
       HEAP8[$19 >> 0] = $124 & -33; //@line 15035
       $143 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15037
       HEAP32[$1 >> 2] = 460; //@line 15038
       HEAP32[$1 + 4 >> 2] = 0; //@line 15040
       $AsyncCtx40 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15041
       HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 15042
       HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15042
       $144 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($143, $0, $$byval_copy98) | 0; //@line 15043
       if (___async) {
        HEAP32[$AsyncCtx40 >> 2] = 463; //@line 15046
        HEAP32[$AsyncCtx40 + 4 >> 2] = $19; //@line 15048
        HEAP32[$AsyncCtx40 + 8 >> 2] = $0; //@line 15050
        HEAP32[$AsyncCtx40 + 12 >> 2] = $$pre20; //@line 15052
        HEAP32[$AsyncCtx40 + 16 >> 2] = $1; //@line 15054
        HEAP32[$AsyncCtx40 + 20 >> 2] = $vararg_buffer3; //@line 15056
        HEAP32[$AsyncCtx40 + 24 >> 2] = $vararg_buffer3; //@line 15058
        HEAP32[$AsyncCtx40 + 28 >> 2] = $vararg_buffer5; //@line 15060
        HEAP32[$AsyncCtx40 + 32 >> 2] = $vararg_buffer5; //@line 15062
        HEAP32[$AsyncCtx40 + 36 >> 2] = $vararg_buffer; //@line 15064
        HEAP32[$AsyncCtx40 + 40 >> 2] = $vararg_buffer; //@line 15066
        HEAP32[$AsyncCtx40 + 44 >> 2] = $vararg_buffer1; //@line 15068
        HEAP32[$AsyncCtx40 + 48 >> 2] = $vararg_buffer1; //@line 15070
        HEAP32[$AsyncCtx40 + 52 >> 2] = $2; //@line 15072
        HEAP32[$AsyncCtx40 + 56 >> 2] = $4; //@line 15074
        HEAP32[$AsyncCtx40 + 60 >> 2] = $51; //@line 15076
        HEAP32[$AsyncCtx40 + 64 >> 2] = $1; //@line 15078
        sp = STACKTOP; //@line 15079
        STACKTOP = sp; //@line 15080
        return;
       }
       _emscripten_free_async_context($AsyncCtx40 | 0); //@line 15082
       do {
        if (!$144) {
         $AsyncCtx72 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15086
         _mbed_assert_internal(12851, 12860, 194); //@line 15087
         if (___async) {
          HEAP32[$AsyncCtx72 >> 2] = 464; //@line 15090
          HEAP32[$AsyncCtx72 + 4 >> 2] = $19; //@line 15092
          HEAP32[$AsyncCtx72 + 8 >> 2] = $0; //@line 15094
          HEAP32[$AsyncCtx72 + 12 >> 2] = $$pre20; //@line 15096
          HEAP32[$AsyncCtx72 + 16 >> 2] = $1; //@line 15098
          HEAP32[$AsyncCtx72 + 20 >> 2] = $vararg_buffer3; //@line 15100
          HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer3; //@line 15102
          HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer5; //@line 15104
          HEAP32[$AsyncCtx72 + 32 >> 2] = $vararg_buffer5; //@line 15106
          HEAP32[$AsyncCtx72 + 36 >> 2] = $vararg_buffer; //@line 15108
          HEAP32[$AsyncCtx72 + 40 >> 2] = $vararg_buffer; //@line 15110
          HEAP32[$AsyncCtx72 + 44 >> 2] = $vararg_buffer1; //@line 15112
          HEAP32[$AsyncCtx72 + 48 >> 2] = $vararg_buffer1; //@line 15114
          HEAP32[$AsyncCtx72 + 52 >> 2] = $2; //@line 15116
          HEAP32[$AsyncCtx72 + 56 >> 2] = $4; //@line 15118
          HEAP32[$AsyncCtx72 + 60 >> 2] = $51; //@line 15120
          HEAP32[$AsyncCtx72 + 64 >> 2] = $1; //@line 15122
          sp = STACKTOP; //@line 15123
          STACKTOP = sp; //@line 15124
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx72 | 0); //@line 15126
          break;
         }
        }
       } while (0);
       $192 = $51; //@line 15131
      }
     } else {
      $192 = $51; //@line 15134
     }
    }
   } while (0);
   do {
    if (HEAP8[$19 >> 0] & 2) {
     $181 = $0 + 288 | 0; //@line 15143
     if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($181) | 0) + 10 >> 0] | 0)) {
      if ((HEAPU8[$0 + 895 >> 0] | 0) <= (HEAPU8[$0 + 894 >> 0] | 0)) {
       break;
      }
     }
     HEAP8[$0 + 377 >> 0] = 0; //@line 15159
     HEAP8[$192 >> 0] = 0; //@line 15160
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $196 = $0 + 956 | 0; //@line 15165
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + 1; //@line 15168
     }
     $200 = HEAP8[$0 + 895 >> 0] | 0; //@line 15171
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($181) | 0) + 11 >> 0] = $200; //@line 15174
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15177
    }
   } while (0);
   $205 = $0 + 377 | 0; //@line 15180
   if (HEAP8[$205 >> 0] | 0) {
    if (!(HEAP32[$$pre20 >> 2] & 16)) {
     HEAP8[$205 >> 0] = 0; //@line 15188
     $211 = $0 + 895 | 0; //@line 15189
     $212 = HEAP8[$211 >> 0] | 0; //@line 15190
     if (!(($212 & 255) < 9 ? ($212 & 255) < (HEAPU8[$0 + 894 >> 0] | 0) : 0)) {
      $265 = HEAP32[$0 >> 2] | 0; //@line 15197
      $268 = HEAP32[(HEAP32[$265 >> 2] | 0) + 16 >> 2] | 0; //@line 15200
      $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 15201
      FUNCTION_TABLE_vi[$268 & 1023]($265); //@line 15202
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 466; //@line 15205
       HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15207
       HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15209
       HEAP32[$AsyncCtx + 12 >> 2] = $$pre20; //@line 15211
       HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15213
       HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer3; //@line 15215
       HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer3; //@line 15217
       HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer5; //@line 15219
       HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer5; //@line 15221
       HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 15223
       HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 15225
       HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer; //@line 15227
       HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer; //@line 15229
       HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer1; //@line 15231
       HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer1; //@line 15233
       HEAP32[$AsyncCtx + 60 >> 2] = $192; //@line 15235
       HEAP32[$AsyncCtx + 64 >> 2] = $211; //@line 15237
       sp = STACKTOP; //@line 15238
       STACKTOP = sp; //@line 15239
       return;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15241
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15244
      __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15246
      HEAP8[$192 >> 0] = 0; //@line 15247
      $288 = $0 + 288 | 0; //@line 15248
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($288) | 0) + 10 >> 0] = 0; //@line 15251
      $291 = HEAP8[$211 >> 0] | 0; //@line 15252
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($288) | 0) + 11 >> 0] = $291; //@line 15255
      if (HEAP8[$0 + 370 >> 0] | 0) {
       break;
      }
      $297 = $0 + 956 | 0; //@line 15262
      HEAP32[$297 >> 2] = (HEAP32[$297 >> 2] | 0) + 1; //@line 15265
      break;
     }
     $217 = $212 + 1 << 24 >> 24; //@line 15268
     HEAP8[$211 >> 0] = $217; //@line 15269
     if ($217 & 1) {
      $221 = $0 + 1097 | 0; //@line 15274
      HEAP8[$221 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$0 >> 2] | 0, HEAP8[$221 >> 0] | 0) | 0; //@line 15277
     }
     $AsyncCtx33 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15279
     $224 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15280
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 465; //@line 15283
      HEAP32[$AsyncCtx33 + 4 >> 2] = $19; //@line 15285
      HEAP32[$AsyncCtx33 + 8 >> 2] = $0; //@line 15287
      HEAP32[$AsyncCtx33 + 12 >> 2] = $$pre20; //@line 15289
      HEAP32[$AsyncCtx33 + 16 >> 2] = $192; //@line 15291
      HEAP32[$AsyncCtx33 + 20 >> 2] = $211; //@line 15293
      HEAP32[$AsyncCtx33 + 24 >> 2] = $1; //@line 15295
      HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer3; //@line 15297
      HEAP32[$AsyncCtx33 + 32 >> 2] = $vararg_buffer3; //@line 15299
      HEAP32[$AsyncCtx33 + 36 >> 2] = $vararg_buffer5; //@line 15301
      HEAP32[$AsyncCtx33 + 40 >> 2] = $vararg_buffer5; //@line 15303
      HEAP32[$AsyncCtx33 + 44 >> 2] = $vararg_buffer; //@line 15305
      HEAP32[$AsyncCtx33 + 48 >> 2] = $vararg_buffer; //@line 15307
      HEAP32[$AsyncCtx33 + 52 >> 2] = $vararg_buffer1; //@line 15309
      HEAP32[$AsyncCtx33 + 56 >> 2] = $vararg_buffer1; //@line 15311
      HEAP32[$AsyncCtx33 + 60 >> 2] = $2; //@line 15313
      HEAP32[$AsyncCtx33 + 64 >> 2] = $4; //@line 15315
      sp = STACKTOP; //@line 15316
      STACKTOP = sp; //@line 15317
      return;
     }
     _emscripten_free_async_context($AsyncCtx33 | 0); //@line 15319
     if (!$224) {
      HEAP8[$19 >> 0] = HEAP8[$19 >> 0] & -33; //@line 15324
      break;
     }
     $244 = $0 + 288 | 0; //@line 15327
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 4 >> 2] = 9; //@line 15330
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15332
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15335
     HEAP8[$192 >> 0] = 0; //@line 15336
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 10 >> 0] = 0; //@line 15339
     $252 = HEAP8[$211 >> 0] | 0; //@line 15340
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 11 >> 0] = $252; //@line 15343
     $256 = HEAP8[$0 + 1097 >> 0] | 0; //@line 15345
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 8 >> 0] = $256; //@line 15348
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $262 = $0 + 956 | 0; //@line 15353
      HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + 1; //@line 15356
     }
    }
   }
  }
 } while (0);
 $300 = HEAP32[$$pre20 >> 2] | 0; //@line 15362
 $303 = $300 & -3; //@line 15365
 if (!($300 & 2)) {
  $305 = $300; //@line 15367
 } else {
  HEAP32[$$pre20 >> 2] = $303; //@line 15369
  $305 = $303; //@line 15370
 }
 do {
  if (!$305) {
   $306 = HEAP8[$19 >> 0] | 0; //@line 15375
   do {
    if (!($306 & 1)) {
     $345 = $306; //@line 15380
    } else {
     HEAP8[$19 >> 0] = $306 & -2; //@line 15383
     $311 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15385
     $313 = __ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0; //@line 15387
     $314 = $311 + 12 | 0; //@line 15388
     $315 = HEAP32[$314 >> 2] | 0; //@line 15389
     do {
      if (!$315) {
       $AsyncCtx68 = _emscripten_alloc_async_context(60, sp) | 0; //@line 15393
       _mbed_assert_internal(15061, 15066, 1102); //@line 15394
       if (___async) {
        HEAP32[$AsyncCtx68 >> 2] = 467; //@line 15397
        HEAP32[$AsyncCtx68 + 4 >> 2] = $19; //@line 15399
        HEAP32[$AsyncCtx68 + 8 >> 2] = $311; //@line 15401
        HEAP32[$AsyncCtx68 + 12 >> 2] = $313; //@line 15403
        HEAP32[$AsyncCtx68 + 16 >> 2] = $0; //@line 15405
        HEAP32[$AsyncCtx68 + 20 >> 2] = $1; //@line 15407
        HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer3; //@line 15409
        HEAP32[$AsyncCtx68 + 28 >> 2] = $vararg_buffer3; //@line 15411
        HEAP32[$AsyncCtx68 + 32 >> 2] = $vararg_buffer5; //@line 15413
        HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer5; //@line 15415
        HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer; //@line 15417
        HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer; //@line 15419
        HEAP32[$AsyncCtx68 + 48 >> 2] = $vararg_buffer1; //@line 15421
        HEAP32[$AsyncCtx68 + 52 >> 2] = $vararg_buffer1; //@line 15423
        HEAP32[$AsyncCtx68 + 56 >> 2] = $314; //@line 15425
        sp = STACKTOP; //@line 15426
        STACKTOP = sp; //@line 15427
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx68 | 0); //@line 15429
        $332 = HEAP32[$314 >> 2] | 0; //@line 15431
        break;
       }
      } else {
       $332 = $315; //@line 15435
      }
     } while (0);
     $331 = HEAP32[$332 >> 2] | 0; //@line 15438
     $AsyncCtx8 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15439
     FUNCTION_TABLE_vii[$331 & 31]($311, $313); //@line 15440
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 468; //@line 15443
      HEAP32[$AsyncCtx8 + 4 >> 2] = $19; //@line 15445
      HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 15447
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 15449
      HEAP32[$AsyncCtx8 + 16 >> 2] = $vararg_buffer3; //@line 15451
      HEAP32[$AsyncCtx8 + 20 >> 2] = $vararg_buffer3; //@line 15453
      HEAP32[$AsyncCtx8 + 24 >> 2] = $vararg_buffer5; //@line 15455
      HEAP32[$AsyncCtx8 + 28 >> 2] = $vararg_buffer5; //@line 15457
      HEAP32[$AsyncCtx8 + 32 >> 2] = $vararg_buffer; //@line 15459
      HEAP32[$AsyncCtx8 + 36 >> 2] = $vararg_buffer; //@line 15461
      HEAP32[$AsyncCtx8 + 40 >> 2] = $vararg_buffer1; //@line 15463
      HEAP32[$AsyncCtx8 + 44 >> 2] = $vararg_buffer1; //@line 15465
      sp = STACKTOP; //@line 15466
      STACKTOP = sp; //@line 15467
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 15469
      $345 = HEAP8[$19 >> 0] | 0; //@line 15471
      break;
     }
    }
   } while (0);
   do {
    if ($345 & 8) {
     HEAP8[$19 >> 0] = $345 & -9; //@line 15481
     $349 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15483
     $350 = $349 + 32 | 0; //@line 15484
     $352 = __ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0; //@line 15486
     $353 = $349 + 44 | 0; //@line 15487
     $354 = HEAP32[$353 >> 2] | 0; //@line 15488
     do {
      if (!$354) {
       $AsyncCtx64 = _emscripten_alloc_async_context(60, sp) | 0; //@line 15492
       _mbed_assert_internal(15061, 15066, 1102); //@line 15493
       if (___async) {
        HEAP32[$AsyncCtx64 >> 2] = 469; //@line 15496
        HEAP32[$AsyncCtx64 + 4 >> 2] = $19; //@line 15498
        HEAP32[$AsyncCtx64 + 8 >> 2] = $0; //@line 15500
        HEAP32[$AsyncCtx64 + 12 >> 2] = $353; //@line 15502
        HEAP32[$AsyncCtx64 + 16 >> 2] = $1; //@line 15504
        HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer3; //@line 15506
        HEAP32[$AsyncCtx64 + 24 >> 2] = $vararg_buffer3; //@line 15508
        HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer5; //@line 15510
        HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer5; //@line 15512
        HEAP32[$AsyncCtx64 + 36 >> 2] = $vararg_buffer; //@line 15514
        HEAP32[$AsyncCtx64 + 40 >> 2] = $vararg_buffer; //@line 15516
        HEAP32[$AsyncCtx64 + 44 >> 2] = $vararg_buffer1; //@line 15518
        HEAP32[$AsyncCtx64 + 48 >> 2] = $vararg_buffer1; //@line 15520
        HEAP32[$AsyncCtx64 + 52 >> 2] = $350; //@line 15522
        HEAP32[$AsyncCtx64 + 56 >> 2] = $352; //@line 15524
        sp = STACKTOP; //@line 15525
        STACKTOP = sp; //@line 15526
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx64 | 0); //@line 15528
        $371 = HEAP32[$353 >> 2] | 0; //@line 15530
        break;
       }
      } else {
       $371 = $354; //@line 15534
      }
     } while (0);
     $370 = HEAP32[$371 >> 2] | 0; //@line 15537
     $AsyncCtx11 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15538
     FUNCTION_TABLE_vii[$370 & 31]($350, $352); //@line 15539
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 470; //@line 15542
      HEAP32[$AsyncCtx11 + 4 >> 2] = $19; //@line 15544
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15546
      HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 15548
      HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer3; //@line 15550
      HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer3; //@line 15552
      HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer5; //@line 15554
      HEAP32[$AsyncCtx11 + 28 >> 2] = $vararg_buffer5; //@line 15556
      HEAP32[$AsyncCtx11 + 32 >> 2] = $vararg_buffer; //@line 15558
      HEAP32[$AsyncCtx11 + 36 >> 2] = $vararg_buffer; //@line 15560
      HEAP32[$AsyncCtx11 + 40 >> 2] = $vararg_buffer1; //@line 15562
      HEAP32[$AsyncCtx11 + 44 >> 2] = $vararg_buffer1; //@line 15564
      sp = STACKTOP; //@line 15565
      STACKTOP = sp; //@line 15566
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15568
      break;
     }
    }
   } while (0);
   do {
    if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0 + 4 | 0) | 0) {
     _printf(12967, $vararg_buffer) | 0; //@line 15577
     _printf(13114, $vararg_buffer1) | 0; //@line 15578
     $AsyncCtx25 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15579
     _putchar(10) | 0; //@line 15580
     if (___async) {
      HEAP32[$AsyncCtx25 >> 2] = 471; //@line 15583
      HEAP32[$AsyncCtx25 + 4 >> 2] = $19; //@line 15585
      HEAP32[$AsyncCtx25 + 8 >> 2] = $0; //@line 15587
      HEAP32[$AsyncCtx25 + 12 >> 2] = $1; //@line 15589
      HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer3; //@line 15591
      HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer3; //@line 15593
      HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer5; //@line 15595
      HEAP32[$AsyncCtx25 + 28 >> 2] = $vararg_buffer5; //@line 15597
      sp = STACKTOP; //@line 15598
      STACKTOP = sp; //@line 15599
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx25 | 0); //@line 15601
      HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0) >> 2] = 4; //@line 15604
      $395 = HEAP8[$19 >> 0] | 16; //@line 15606
      HEAP8[$19 >> 0] = $395; //@line 15607
      $397 = $395; //@line 15608
      break;
     }
    } else {
     $397 = HEAP8[$19 >> 0] | 0; //@line 15613
    }
   } while (0);
   $396 = $397 & -33; //@line 15616
   HEAP8[$19 >> 0] = $396; //@line 15617
   $407 = $396; //@line 15618
  } else {
   $398 = HEAP32[$2 >> 2] | 0; //@line 15620
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15621
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($398, $4, 1e3); //@line 15622
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 472; //@line 15625
    HEAP32[$AsyncCtx29 + 4 >> 2] = $19; //@line 15627
    HEAP32[$AsyncCtx29 + 8 >> 2] = $0; //@line 15629
    HEAP32[$AsyncCtx29 + 12 >> 2] = $1; //@line 15631
    HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer3; //@line 15633
    HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer3; //@line 15635
    HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer5; //@line 15637
    HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer5; //@line 15639
    sp = STACKTOP; //@line 15640
    STACKTOP = sp; //@line 15641
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 15643
    $407 = HEAP8[$19 >> 0] | 0; //@line 15645
    break;
   }
  }
 } while (0);
 if (!($407 & 2)) {
  $451 = $407; //@line 15653
 } else {
  $409 = $407 & -3; //@line 15655
  HEAP8[$19 >> 0] = $409; //@line 15656
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 15661
   _printf(12994, $vararg_buffer5) | 0; //@line 15662
   $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15663
   _putchar(10) | 0; //@line 15664
   if (___async) {
    HEAP32[$AsyncCtx21 >> 2] = 473; //@line 15667
    HEAP32[$AsyncCtx21 + 4 >> 2] = $19; //@line 15669
    HEAP32[$AsyncCtx21 + 8 >> 2] = $0; //@line 15671
    HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 15673
    HEAP32[$AsyncCtx21 + 16 >> 2] = $1; //@line 15675
    sp = STACKTOP; //@line 15676
    STACKTOP = sp; //@line 15677
    return;
   }
   _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15679
   $418 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15681
   HEAP32[$1 >> 2] = 361; //@line 15682
   HEAP32[$1 + 4 >> 2] = 0; //@line 15684
   $AsyncCtx36 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15685
   HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 15686
   HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15686
   $419 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($418, $0, $$byval_copy98) | 0; //@line 15687
   if (___async) {
    HEAP32[$AsyncCtx36 >> 2] = 474; //@line 15690
    HEAP32[$AsyncCtx36 + 4 >> 2] = $19; //@line 15692
    HEAP32[$AsyncCtx36 + 8 >> 2] = $0; //@line 15694
    HEAP32[$AsyncCtx36 + 12 >> 2] = $1; //@line 15696
    sp = STACKTOP; //@line 15697
    STACKTOP = sp; //@line 15698
    return;
   }
   _emscripten_free_async_context($AsyncCtx36 | 0); //@line 15700
   do {
    if (!$419) {
     $AsyncCtx60 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15704
     _mbed_assert_internal(12851, 12860, 217); //@line 15705
     if (___async) {
      HEAP32[$AsyncCtx60 >> 2] = 475; //@line 15708
      HEAP32[$AsyncCtx60 + 4 >> 2] = $19; //@line 15710
      HEAP32[$AsyncCtx60 + 8 >> 2] = $0; //@line 15712
      HEAP32[$AsyncCtx60 + 12 >> 2] = $1; //@line 15714
      sp = STACKTOP; //@line 15715
      STACKTOP = sp; //@line 15716
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx60 | 0); //@line 15718
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 15724
   $429 = HEAP8[$19 >> 0] | 0; //@line 15726
  } else {
   $429 = $409; //@line 15728
  }
  do {
   if (!($429 & 4)) {
    $432 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15735
    $433 = $432 + 16 | 0; //@line 15736
    $435 = __ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0; //@line 15738
    $436 = $432 + 28 | 0; //@line 15739
    $437 = HEAP32[$436 >> 2] | 0; //@line 15740
    do {
     if (!$437) {
      $AsyncCtx56 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15744
      _mbed_assert_internal(15061, 15066, 1102); //@line 15745
      if (___async) {
       HEAP32[$AsyncCtx56 >> 2] = 476; //@line 15748
       HEAP32[$AsyncCtx56 + 4 >> 2] = $436; //@line 15750
       HEAP32[$AsyncCtx56 + 8 >> 2] = $433; //@line 15752
       HEAP32[$AsyncCtx56 + 12 >> 2] = $435; //@line 15754
       HEAP32[$AsyncCtx56 + 16 >> 2] = $19; //@line 15756
       HEAP32[$AsyncCtx56 + 20 >> 2] = $0; //@line 15758
       sp = STACKTOP; //@line 15759
       STACKTOP = sp; //@line 15760
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx56 | 0); //@line 15762
       $445 = HEAP32[$436 >> 2] | 0; //@line 15764
       break;
      }
     } else {
      $445 = $437; //@line 15768
     }
    } while (0);
    $444 = HEAP32[$445 >> 2] | 0; //@line 15771
    $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15772
    FUNCTION_TABLE_vii[$444 & 31]($433, $435); //@line 15773
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 477; //@line 15776
     HEAP32[$AsyncCtx14 + 4 >> 2] = $19; //@line 15778
     HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 15780
     sp = STACKTOP; //@line 15781
     STACKTOP = sp; //@line 15782
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15784
     $449 = HEAP8[$19 >> 0] | 0; //@line 15786
     break;
    }
   } else {
    $449 = $429; //@line 15790
   }
  } while (0);
  $448 = $449 & -5; //@line 15793
  HEAP8[$19 >> 0] = $448; //@line 15794
  $451 = $448; //@line 15795
 }
 if (!($451 & 16)) {
  STACKTOP = sp; //@line 15800
  return;
 }
 HEAP8[$19 >> 0] = $451 & -17; //@line 15803
 $455 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15805
 $456 = $455 + 48 | 0; //@line 15806
 $458 = __ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0; //@line 15808
 $459 = $455 + 60 | 0; //@line 15809
 $460 = HEAP32[$459 >> 2] | 0; //@line 15810
 do {
  if (!$460) {
   $AsyncCtx52 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15814
   _mbed_assert_internal(15061, 15066, 1102); //@line 15815
   if (___async) {
    HEAP32[$AsyncCtx52 >> 2] = 478; //@line 15818
    HEAP32[$AsyncCtx52 + 4 >> 2] = $459; //@line 15820
    HEAP32[$AsyncCtx52 + 8 >> 2] = $456; //@line 15822
    HEAP32[$AsyncCtx52 + 12 >> 2] = $458; //@line 15824
    sp = STACKTOP; //@line 15825
    STACKTOP = sp; //@line 15826
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx52 | 0); //@line 15828
    $466 = HEAP32[$459 >> 2] | 0; //@line 15830
    break;
   }
  } else {
   $466 = $460; //@line 15834
  }
 } while (0);
 $465 = HEAP32[$466 >> 2] | 0; //@line 15837
 $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15838
 FUNCTION_TABLE_vii[$465 & 31]($456, $458); //@line 15839
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 479; //@line 15842
  sp = STACKTOP; //@line 15843
  STACKTOP = sp; //@line 15844
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15846
 STACKTOP = sp; //@line 15847
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_483($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $50 = 0, $54 = 0, $59 = 0, $65 = 0, $66 = 0, $71 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31691
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31693
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31695
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31699
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31701
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31703
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31705
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31707
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31709
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31711
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31713
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31715
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31717
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31719
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31721
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31723
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $36 = $4 + 288 | 0; //@line 31729
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 31745
   HEAP8[$32 >> 0] = 0; //@line 31746
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $50 = $4 + 956 | 0; //@line 31751
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1; //@line 31754
   }
   $54 = HEAP8[$4 + 895 >> 0] | 0; //@line 31757
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $54; //@line 31760
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -2; //@line 31763
  }
 } while (0);
 $59 = $4 + 377 | 0; //@line 31766
 if (HEAP8[$59 >> 0] | 0) {
  if (!(HEAP32[$8 >> 2] & 16)) {
   HEAP8[$59 >> 0] = 0; //@line 31774
   $65 = $4 + 895 | 0; //@line 31775
   $66 = HEAP8[$65 >> 0] | 0; //@line 31776
   if (!(($66 & 255) < 9 ? ($66 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $96 = HEAP32[$4 >> 2] | 0; //@line 31783
    $99 = HEAP32[(HEAP32[$96 >> 2] | 0) + 16 >> 2] | 0; //@line 31786
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 31787
    FUNCTION_TABLE_vi[$99 & 1023]($96); //@line 31788
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 31791
     $100 = $ReallocAsyncCtx + 4 | 0; //@line 31792
     HEAP32[$100 >> 2] = $2; //@line 31793
     $101 = $ReallocAsyncCtx + 8 | 0; //@line 31794
     HEAP32[$101 >> 2] = $4; //@line 31795
     $102 = $ReallocAsyncCtx + 12 | 0; //@line 31796
     HEAP32[$102 >> 2] = $8; //@line 31797
     $103 = $ReallocAsyncCtx + 16 | 0; //@line 31798
     HEAP32[$103 >> 2] = $10; //@line 31799
     $104 = $ReallocAsyncCtx + 20 | 0; //@line 31800
     HEAP32[$104 >> 2] = $12; //@line 31801
     $105 = $ReallocAsyncCtx + 24 | 0; //@line 31802
     HEAP32[$105 >> 2] = $14; //@line 31803
     $106 = $ReallocAsyncCtx + 28 | 0; //@line 31804
     HEAP32[$106 >> 2] = $16; //@line 31805
     $107 = $ReallocAsyncCtx + 32 | 0; //@line 31806
     HEAP32[$107 >> 2] = $18; //@line 31807
     $108 = $ReallocAsyncCtx + 36 | 0; //@line 31808
     HEAP32[$108 >> 2] = $28; //@line 31809
     $109 = $ReallocAsyncCtx + 40 | 0; //@line 31810
     HEAP32[$109 >> 2] = $30; //@line 31811
     $110 = $ReallocAsyncCtx + 44 | 0; //@line 31812
     HEAP32[$110 >> 2] = $20; //@line 31813
     $111 = $ReallocAsyncCtx + 48 | 0; //@line 31814
     HEAP32[$111 >> 2] = $22; //@line 31815
     $112 = $ReallocAsyncCtx + 52 | 0; //@line 31816
     HEAP32[$112 >> 2] = $24; //@line 31817
     $113 = $ReallocAsyncCtx + 56 | 0; //@line 31818
     HEAP32[$113 >> 2] = $26; //@line 31819
     $114 = $ReallocAsyncCtx + 60 | 0; //@line 31820
     HEAP32[$114 >> 2] = $32; //@line 31821
     $115 = $ReallocAsyncCtx + 64 | 0; //@line 31822
     HEAP32[$115 >> 2] = $65; //@line 31823
     sp = STACKTOP; //@line 31824
     return;
    }
    ___async_unwind = 0; //@line 31827
    HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 31828
    $100 = $ReallocAsyncCtx + 4 | 0; //@line 31829
    HEAP32[$100 >> 2] = $2; //@line 31830
    $101 = $ReallocAsyncCtx + 8 | 0; //@line 31831
    HEAP32[$101 >> 2] = $4; //@line 31832
    $102 = $ReallocAsyncCtx + 12 | 0; //@line 31833
    HEAP32[$102 >> 2] = $8; //@line 31834
    $103 = $ReallocAsyncCtx + 16 | 0; //@line 31835
    HEAP32[$103 >> 2] = $10; //@line 31836
    $104 = $ReallocAsyncCtx + 20 | 0; //@line 31837
    HEAP32[$104 >> 2] = $12; //@line 31838
    $105 = $ReallocAsyncCtx + 24 | 0; //@line 31839
    HEAP32[$105 >> 2] = $14; //@line 31840
    $106 = $ReallocAsyncCtx + 28 | 0; //@line 31841
    HEAP32[$106 >> 2] = $16; //@line 31842
    $107 = $ReallocAsyncCtx + 32 | 0; //@line 31843
    HEAP32[$107 >> 2] = $18; //@line 31844
    $108 = $ReallocAsyncCtx + 36 | 0; //@line 31845
    HEAP32[$108 >> 2] = $28; //@line 31846
    $109 = $ReallocAsyncCtx + 40 | 0; //@line 31847
    HEAP32[$109 >> 2] = $30; //@line 31848
    $110 = $ReallocAsyncCtx + 44 | 0; //@line 31849
    HEAP32[$110 >> 2] = $20; //@line 31850
    $111 = $ReallocAsyncCtx + 48 | 0; //@line 31851
    HEAP32[$111 >> 2] = $22; //@line 31852
    $112 = $ReallocAsyncCtx + 52 | 0; //@line 31853
    HEAP32[$112 >> 2] = $24; //@line 31854
    $113 = $ReallocAsyncCtx + 56 | 0; //@line 31855
    HEAP32[$113 >> 2] = $26; //@line 31856
    $114 = $ReallocAsyncCtx + 60 | 0; //@line 31857
    HEAP32[$114 >> 2] = $32; //@line 31858
    $115 = $ReallocAsyncCtx + 64 | 0; //@line 31859
    HEAP32[$115 >> 2] = $65; //@line 31860
    sp = STACKTOP; //@line 31861
    return;
   }
   $71 = $66 + 1 << 24 >> 24; //@line 31864
   HEAP8[$65 >> 0] = $71; //@line 31865
   if ($71 & 1) {
    $75 = $4 + 1097 | 0; //@line 31870
    HEAP8[$75 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$75 >> 0] | 0) | 0; //@line 31873
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 31875
   $78 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 31876
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 31879
    $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 31880
    HEAP32[$79 >> 2] = $2; //@line 31881
    $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 31882
    HEAP32[$80 >> 2] = $4; //@line 31883
    $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 31884
    HEAP32[$81 >> 2] = $8; //@line 31885
    $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 31886
    HEAP32[$82 >> 2] = $32; //@line 31887
    $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 31888
    HEAP32[$83 >> 2] = $65; //@line 31889
    $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 31890
    HEAP32[$84 >> 2] = $10; //@line 31891
    $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 31892
    HEAP32[$85 >> 2] = $12; //@line 31893
    $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 31894
    HEAP32[$86 >> 2] = $14; //@line 31895
    $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 31896
    HEAP32[$87 >> 2] = $16; //@line 31897
    $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 31898
    HEAP32[$88 >> 2] = $18; //@line 31899
    $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 31900
    HEAP32[$89 >> 2] = $20; //@line 31901
    $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 31902
    HEAP32[$90 >> 2] = $22; //@line 31903
    $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 31904
    HEAP32[$91 >> 2] = $24; //@line 31905
    $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 31906
    HEAP32[$92 >> 2] = $26; //@line 31907
    $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 31908
    HEAP32[$93 >> 2] = $28; //@line 31909
    $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 31910
    HEAP32[$94 >> 2] = $30; //@line 31911
    sp = STACKTOP; //@line 31912
    return;
   }
   HEAP32[___async_retval >> 2] = $78; //@line 31916
   ___async_unwind = 0; //@line 31917
   HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 31918
   $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 31919
   HEAP32[$79 >> 2] = $2; //@line 31920
   $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 31921
   HEAP32[$80 >> 2] = $4; //@line 31922
   $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 31923
   HEAP32[$81 >> 2] = $8; //@line 31924
   $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 31925
   HEAP32[$82 >> 2] = $32; //@line 31926
   $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 31927
   HEAP32[$83 >> 2] = $65; //@line 31928
   $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 31929
   HEAP32[$84 >> 2] = $10; //@line 31930
   $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 31931
   HEAP32[$85 >> 2] = $12; //@line 31932
   $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 31933
   HEAP32[$86 >> 2] = $14; //@line 31934
   $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 31935
   HEAP32[$87 >> 2] = $16; //@line 31936
   $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 31937
   HEAP32[$88 >> 2] = $18; //@line 31938
   $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 31939
   HEAP32[$89 >> 2] = $20; //@line 31940
   $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 31941
   HEAP32[$90 >> 2] = $22; //@line 31942
   $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 31943
   HEAP32[$91 >> 2] = $24; //@line 31944
   $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 31945
   HEAP32[$92 >> 2] = $26; //@line 31946
   $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 31947
   HEAP32[$93 >> 2] = $28; //@line 31948
   $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 31949
   HEAP32[$94 >> 2] = $30; //@line 31950
   sp = STACKTOP; //@line 31951
   return;
  }
 }
 $116 = HEAP32[$8 >> 2] | 0; //@line 31955
 $119 = $116 & -3; //@line 31958
 if (!($116 & 2)) {
  $121 = $116; //@line 31960
 } else {
  HEAP32[$8 >> 2] = $119; //@line 31962
  $121 = $119; //@line 31963
 }
 if ($121 | 0) {
  $206 = HEAP32[$28 >> 2] | 0; //@line 31967
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 31968
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($206, $30, 1e3); //@line 31969
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 31972
   $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 31973
   HEAP32[$207 >> 2] = $2; //@line 31974
   $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 31975
   HEAP32[$208 >> 2] = $4; //@line 31976
   $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 31977
   HEAP32[$209 >> 2] = $10; //@line 31978
   $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 31979
   HEAP32[$210 >> 2] = $12; //@line 31980
   $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 31981
   HEAP32[$211 >> 2] = $14; //@line 31982
   $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 31983
   HEAP32[$212 >> 2] = $16; //@line 31984
   $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 31985
   HEAP32[$213 >> 2] = $18; //@line 31986
   sp = STACKTOP; //@line 31987
   return;
  }
  ___async_unwind = 0; //@line 31990
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 31991
  $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 31992
  HEAP32[$207 >> 2] = $2; //@line 31993
  $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 31994
  HEAP32[$208 >> 2] = $4; //@line 31995
  $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 31996
  HEAP32[$209 >> 2] = $10; //@line 31997
  $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 31998
  HEAP32[$210 >> 2] = $12; //@line 31999
  $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 32000
  HEAP32[$211 >> 2] = $14; //@line 32001
  $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 32002
  HEAP32[$212 >> 2] = $16; //@line 32003
  $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 32004
  HEAP32[$213 >> 2] = $18; //@line 32005
  sp = STACKTOP; //@line 32006
  return;
 }
 $122 = HEAP8[$2 >> 0] | 0; //@line 32009
 if ($122 & 1) {
  HEAP8[$2 >> 0] = $122 & -2; //@line 32014
  $127 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32016
  $129 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 32018
  $130 = $127 + 12 | 0; //@line 32019
  $131 = HEAP32[$130 >> 2] | 0; //@line 32020
  if (!$131) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 32023
   _mbed_assert_internal(15061, 15066, 1102); //@line 32024
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 32027
    $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 32028
    HEAP32[$133 >> 2] = $2; //@line 32029
    $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 32030
    HEAP32[$134 >> 2] = $127; //@line 32031
    $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 32032
    HEAP32[$135 >> 2] = $129; //@line 32033
    $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 32034
    HEAP32[$136 >> 2] = $4; //@line 32035
    $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 32036
    HEAP32[$137 >> 2] = $10; //@line 32037
    $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 32038
    HEAP32[$138 >> 2] = $12; //@line 32039
    $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 32040
    HEAP32[$139 >> 2] = $14; //@line 32041
    $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 32042
    HEAP32[$140 >> 2] = $16; //@line 32043
    $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 32044
    HEAP32[$141 >> 2] = $18; //@line 32045
    $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 32046
    HEAP32[$142 >> 2] = $20; //@line 32047
    $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 32048
    HEAP32[$143 >> 2] = $22; //@line 32049
    $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 32050
    HEAP32[$144 >> 2] = $24; //@line 32051
    $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 32052
    HEAP32[$145 >> 2] = $26; //@line 32053
    $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 32054
    HEAP32[$146 >> 2] = $130; //@line 32055
    sp = STACKTOP; //@line 32056
    return;
   }
   ___async_unwind = 0; //@line 32059
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 32060
   $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 32061
   HEAP32[$133 >> 2] = $2; //@line 32062
   $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 32063
   HEAP32[$134 >> 2] = $127; //@line 32064
   $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 32065
   HEAP32[$135 >> 2] = $129; //@line 32066
   $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 32067
   HEAP32[$136 >> 2] = $4; //@line 32068
   $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 32069
   HEAP32[$137 >> 2] = $10; //@line 32070
   $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 32071
   HEAP32[$138 >> 2] = $12; //@line 32072
   $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 32073
   HEAP32[$139 >> 2] = $14; //@line 32074
   $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 32075
   HEAP32[$140 >> 2] = $16; //@line 32076
   $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 32077
   HEAP32[$141 >> 2] = $18; //@line 32078
   $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 32079
   HEAP32[$142 >> 2] = $20; //@line 32080
   $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 32081
   HEAP32[$143 >> 2] = $22; //@line 32082
   $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 32083
   HEAP32[$144 >> 2] = $24; //@line 32084
   $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 32085
   HEAP32[$145 >> 2] = $26; //@line 32086
   $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 32087
   HEAP32[$146 >> 2] = $130; //@line 32088
   sp = STACKTOP; //@line 32089
   return;
  } else {
   $147 = HEAP32[$131 >> 2] | 0; //@line 32092
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 32093
   FUNCTION_TABLE_vii[$147 & 31]($127, $129); //@line 32094
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 32097
    $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 32098
    HEAP32[$148 >> 2] = $2; //@line 32099
    $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 32100
    HEAP32[$149 >> 2] = $4; //@line 32101
    $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 32102
    HEAP32[$150 >> 2] = $10; //@line 32103
    $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 32104
    HEAP32[$151 >> 2] = $12; //@line 32105
    $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 32106
    HEAP32[$152 >> 2] = $14; //@line 32107
    $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 32108
    HEAP32[$153 >> 2] = $16; //@line 32109
    $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 32110
    HEAP32[$154 >> 2] = $18; //@line 32111
    $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 32112
    HEAP32[$155 >> 2] = $20; //@line 32113
    $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 32114
    HEAP32[$156 >> 2] = $22; //@line 32115
    $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 32116
    HEAP32[$157 >> 2] = $24; //@line 32117
    $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 32118
    HEAP32[$158 >> 2] = $26; //@line 32119
    sp = STACKTOP; //@line 32120
    return;
   }
   ___async_unwind = 0; //@line 32123
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 32124
   $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 32125
   HEAP32[$148 >> 2] = $2; //@line 32126
   $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 32127
   HEAP32[$149 >> 2] = $4; //@line 32128
   $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 32129
   HEAP32[$150 >> 2] = $10; //@line 32130
   $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 32131
   HEAP32[$151 >> 2] = $12; //@line 32132
   $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 32133
   HEAP32[$152 >> 2] = $14; //@line 32134
   $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 32135
   HEAP32[$153 >> 2] = $16; //@line 32136
   $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 32137
   HEAP32[$154 >> 2] = $18; //@line 32138
   $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 32139
   HEAP32[$155 >> 2] = $20; //@line 32140
   $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 32141
   HEAP32[$156 >> 2] = $22; //@line 32142
   $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 32143
   HEAP32[$157 >> 2] = $24; //@line 32144
   $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 32145
   HEAP32[$158 >> 2] = $26; //@line 32146
   sp = STACKTOP; //@line 32147
   return;
  }
 }
 if ($122 & 8) {
  HEAP8[$2 >> 0] = $122 & -9; //@line 32155
  $163 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32157
  $164 = $163 + 32 | 0; //@line 32158
  $166 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 32160
  $167 = $163 + 44 | 0; //@line 32161
  $168 = HEAP32[$167 >> 2] | 0; //@line 32162
  if (!$168) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 32165
   _mbed_assert_internal(15061, 15066, 1102); //@line 32166
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 32169
    $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 32170
    HEAP32[$170 >> 2] = $2; //@line 32171
    $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 32172
    HEAP32[$171 >> 2] = $4; //@line 32173
    $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 32174
    HEAP32[$172 >> 2] = $167; //@line 32175
    $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 32176
    HEAP32[$173 >> 2] = $10; //@line 32177
    $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 32178
    HEAP32[$174 >> 2] = $12; //@line 32179
    $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 32180
    HEAP32[$175 >> 2] = $14; //@line 32181
    $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 32182
    HEAP32[$176 >> 2] = $16; //@line 32183
    $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 32184
    HEAP32[$177 >> 2] = $18; //@line 32185
    $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 32186
    HEAP32[$178 >> 2] = $20; //@line 32187
    $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 32188
    HEAP32[$179 >> 2] = $22; //@line 32189
    $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 32190
    HEAP32[$180 >> 2] = $24; //@line 32191
    $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 32192
    HEAP32[$181 >> 2] = $26; //@line 32193
    $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 32194
    HEAP32[$182 >> 2] = $164; //@line 32195
    $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 32196
    HEAP32[$183 >> 2] = $166; //@line 32197
    sp = STACKTOP; //@line 32198
    return;
   }
   ___async_unwind = 0; //@line 32201
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 32202
   $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 32203
   HEAP32[$170 >> 2] = $2; //@line 32204
   $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 32205
   HEAP32[$171 >> 2] = $4; //@line 32206
   $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 32207
   HEAP32[$172 >> 2] = $167; //@line 32208
   $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 32209
   HEAP32[$173 >> 2] = $10; //@line 32210
   $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 32211
   HEAP32[$174 >> 2] = $12; //@line 32212
   $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 32213
   HEAP32[$175 >> 2] = $14; //@line 32214
   $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 32215
   HEAP32[$176 >> 2] = $16; //@line 32216
   $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 32217
   HEAP32[$177 >> 2] = $18; //@line 32218
   $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 32219
   HEAP32[$178 >> 2] = $20; //@line 32220
   $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 32221
   HEAP32[$179 >> 2] = $22; //@line 32222
   $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 32223
   HEAP32[$180 >> 2] = $24; //@line 32224
   $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 32225
   HEAP32[$181 >> 2] = $26; //@line 32226
   $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 32227
   HEAP32[$182 >> 2] = $164; //@line 32228
   $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 32229
   HEAP32[$183 >> 2] = $166; //@line 32230
   sp = STACKTOP; //@line 32231
   return;
  } else {
   $184 = HEAP32[$168 >> 2] | 0; //@line 32234
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 32235
   FUNCTION_TABLE_vii[$184 & 31]($164, $166); //@line 32236
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 32239
    $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 32240
    HEAP32[$185 >> 2] = $2; //@line 32241
    $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 32242
    HEAP32[$186 >> 2] = $4; //@line 32243
    $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 32244
    HEAP32[$187 >> 2] = $10; //@line 32245
    $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 32246
    HEAP32[$188 >> 2] = $12; //@line 32247
    $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 32248
    HEAP32[$189 >> 2] = $14; //@line 32249
    $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 32250
    HEAP32[$190 >> 2] = $16; //@line 32251
    $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 32252
    HEAP32[$191 >> 2] = $18; //@line 32253
    $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 32254
    HEAP32[$192 >> 2] = $20; //@line 32255
    $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 32256
    HEAP32[$193 >> 2] = $22; //@line 32257
    $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 32258
    HEAP32[$194 >> 2] = $24; //@line 32259
    $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 32260
    HEAP32[$195 >> 2] = $26; //@line 32261
    sp = STACKTOP; //@line 32262
    return;
   }
   ___async_unwind = 0; //@line 32265
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 32266
   $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 32267
   HEAP32[$185 >> 2] = $2; //@line 32268
   $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 32269
   HEAP32[$186 >> 2] = $4; //@line 32270
   $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 32271
   HEAP32[$187 >> 2] = $10; //@line 32272
   $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 32273
   HEAP32[$188 >> 2] = $12; //@line 32274
   $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 32275
   HEAP32[$189 >> 2] = $14; //@line 32276
   $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 32277
   HEAP32[$190 >> 2] = $16; //@line 32278
   $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 32279
   HEAP32[$191 >> 2] = $18; //@line 32280
   $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 32281
   HEAP32[$192 >> 2] = $20; //@line 32282
   $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 32283
   HEAP32[$193 >> 2] = $22; //@line 32284
   $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 32285
   HEAP32[$194 >> 2] = $24; //@line 32286
   $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 32287
   HEAP32[$195 >> 2] = $26; //@line 32288
   sp = STACKTOP; //@line 32289
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $20) | 0; //@line 32296
  _printf(13114, $24) | 0; //@line 32297
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 32298
  _putchar(10) | 0; //@line 32299
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 32302
   $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 32303
   HEAP32[$198 >> 2] = $2; //@line 32304
   $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 32305
   HEAP32[$199 >> 2] = $4; //@line 32306
   $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 32307
   HEAP32[$200 >> 2] = $10; //@line 32308
   $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 32309
   HEAP32[$201 >> 2] = $12; //@line 32310
   $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 32311
   HEAP32[$202 >> 2] = $14; //@line 32312
   $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 32313
   HEAP32[$203 >> 2] = $16; //@line 32314
   $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 32315
   HEAP32[$204 >> 2] = $18; //@line 32316
   sp = STACKTOP; //@line 32317
   return;
  }
  ___async_unwind = 0; //@line 32320
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 32321
  $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 32322
  HEAP32[$198 >> 2] = $2; //@line 32323
  $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 32324
  HEAP32[$199 >> 2] = $4; //@line 32325
  $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 32326
  HEAP32[$200 >> 2] = $10; //@line 32327
  $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 32328
  HEAP32[$201 >> 2] = $12; //@line 32329
  $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 32330
  HEAP32[$202 >> 2] = $14; //@line 32331
  $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 32332
  HEAP32[$203 >> 2] = $16; //@line 32333
  $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 32334
  HEAP32[$204 >> 2] = $18; //@line 32335
  sp = STACKTOP; //@line 32336
  return;
 }
 $205 = HEAP8[$2 >> 0] & -33; //@line 32340
 HEAP8[$2 >> 0] = $205; //@line 32341
 do {
  if (!($205 & 2)) {
   $244 = $205; //@line 32346
  } else {
   $216 = $205 & -3; //@line 32348
   HEAP8[$2 >> 0] = $216; //@line 32349
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $12) | 0; //@line 32354
    _printf(12994, $16) | 0; //@line 32355
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 32356
    _putchar(10) | 0; //@line 32357
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 32360
     $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 32361
     HEAP32[$220 >> 2] = $2; //@line 32362
     $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 32363
     HEAP32[$221 >> 2] = $4; //@line 32364
     $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 32365
     HEAP32[$222 >> 2] = $10; //@line 32366
     $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 32367
     HEAP32[$223 >> 2] = $10; //@line 32368
     sp = STACKTOP; //@line 32369
     return;
    }
    ___async_unwind = 0; //@line 32372
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 32373
    $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 32374
    HEAP32[$220 >> 2] = $2; //@line 32375
    $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 32376
    HEAP32[$221 >> 2] = $4; //@line 32377
    $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 32378
    HEAP32[$222 >> 2] = $10; //@line 32379
    $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 32380
    HEAP32[$223 >> 2] = $10; //@line 32381
    sp = STACKTOP; //@line 32382
    return;
   }
   if ($216 & 4) {
    $242 = $216 & -5; //@line 32388
    HEAP8[$2 >> 0] = $242; //@line 32389
    $244 = $242; //@line 32390
    break;
   }
   $227 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32394
   $228 = $227 + 16 | 0; //@line 32395
   $230 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 32397
   $231 = $227 + 28 | 0; //@line 32398
   $232 = HEAP32[$231 >> 2] | 0; //@line 32399
   if (!$232) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 32402
    _mbed_assert_internal(15061, 15066, 1102); //@line 32403
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 32406
     $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 32407
     HEAP32[$234 >> 2] = $231; //@line 32408
     $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 32409
     HEAP32[$235 >> 2] = $228; //@line 32410
     $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 32411
     HEAP32[$236 >> 2] = $230; //@line 32412
     $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 32413
     HEAP32[$237 >> 2] = $2; //@line 32414
     $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 32415
     HEAP32[$238 >> 2] = $4; //@line 32416
     sp = STACKTOP; //@line 32417
     return;
    }
    ___async_unwind = 0; //@line 32420
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 32421
    $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 32422
    HEAP32[$234 >> 2] = $231; //@line 32423
    $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 32424
    HEAP32[$235 >> 2] = $228; //@line 32425
    $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 32426
    HEAP32[$236 >> 2] = $230; //@line 32427
    $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 32428
    HEAP32[$237 >> 2] = $2; //@line 32429
    $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 32430
    HEAP32[$238 >> 2] = $4; //@line 32431
    sp = STACKTOP; //@line 32432
    return;
   } else {
    $239 = HEAP32[$232 >> 2] | 0; //@line 32435
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 32436
    FUNCTION_TABLE_vii[$239 & 31]($228, $230); //@line 32437
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 32440
     $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 32441
     HEAP32[$240 >> 2] = $2; //@line 32442
     $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 32443
     HEAP32[$241 >> 2] = $4; //@line 32444
     sp = STACKTOP; //@line 32445
     return;
    }
    ___async_unwind = 0; //@line 32448
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 32449
    $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 32450
    HEAP32[$240 >> 2] = $2; //@line 32451
    $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 32452
    HEAP32[$241 >> 2] = $4; //@line 32453
    sp = STACKTOP; //@line 32454
    return;
   }
  }
 } while (0);
 if (!($244 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $244 & -17; //@line 32465
 $248 = HEAP32[$4 + 1324 >> 2] | 0; //@line 32467
 $249 = $248 + 48 | 0; //@line 32468
 $251 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 32470
 $252 = $248 + 60 | 0; //@line 32471
 $253 = HEAP32[$252 >> 2] | 0; //@line 32472
 if (!$253) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 32475
  _mbed_assert_internal(15061, 15066, 1102); //@line 32476
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 32479
   $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 32480
   HEAP32[$255 >> 2] = $252; //@line 32481
   $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 32482
   HEAP32[$256 >> 2] = $249; //@line 32483
   $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 32484
   HEAP32[$257 >> 2] = $251; //@line 32485
   sp = STACKTOP; //@line 32486
   return;
  }
  ___async_unwind = 0; //@line 32489
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 32490
  $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 32491
  HEAP32[$255 >> 2] = $252; //@line 32492
  $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 32493
  HEAP32[$256 >> 2] = $249; //@line 32494
  $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 32495
  HEAP32[$257 >> 2] = $251; //@line 32496
  sp = STACKTOP; //@line 32497
  return;
 } else {
  $258 = HEAP32[$253 >> 2] | 0; //@line 32500
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 32501
  FUNCTION_TABLE_vii[$258 & 31]($249, $251); //@line 32502
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 32505
   sp = STACKTOP; //@line 32506
   return;
  }
  ___async_unwind = 0; //@line 32509
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 32510
  sp = STACKTOP; //@line 32511
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_482($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $71 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 30850
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30852
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30854
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30856
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30858
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30860
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30862
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30864
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30866
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30868
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30870
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30872
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30874
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30876
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30878
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30880
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $36 = $4 + 288 | 0; //@line 30888
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 30904
   HEAP8[$30 >> 0] = 0; //@line 30905
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $50 = $4 + 956 | 0; //@line 30910
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1; //@line 30913
   }
   $54 = HEAP8[$4 + 895 >> 0] | 0; //@line 30916
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $54; //@line 30919
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 30922
  }
 } while (0);
 $59 = $4 + 377 | 0; //@line 30925
 if (HEAP8[$59 >> 0] | 0) {
  if (!(HEAP32[$6 >> 2] & 16)) {
   HEAP8[$59 >> 0] = 0; //@line 30933
   $65 = $4 + 895 | 0; //@line 30934
   $66 = HEAP8[$65 >> 0] | 0; //@line 30935
   if (!(($66 & 255) < 9 ? ($66 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $96 = HEAP32[$4 >> 2] | 0; //@line 30942
    $99 = HEAP32[(HEAP32[$96 >> 2] | 0) + 16 >> 2] | 0; //@line 30945
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 30946
    FUNCTION_TABLE_vi[$99 & 1023]($96); //@line 30947
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 30950
     $100 = $ReallocAsyncCtx + 4 | 0; //@line 30951
     HEAP32[$100 >> 2] = $2; //@line 30952
     $101 = $ReallocAsyncCtx + 8 | 0; //@line 30953
     HEAP32[$101 >> 2] = $4; //@line 30954
     $102 = $ReallocAsyncCtx + 12 | 0; //@line 30955
     HEAP32[$102 >> 2] = $6; //@line 30956
     $103 = $ReallocAsyncCtx + 16 | 0; //@line 30957
     HEAP32[$103 >> 2] = $8; //@line 30958
     $104 = $ReallocAsyncCtx + 20 | 0; //@line 30959
     HEAP32[$104 >> 2] = $10; //@line 30960
     $105 = $ReallocAsyncCtx + 24 | 0; //@line 30961
     HEAP32[$105 >> 2] = $12; //@line 30962
     $106 = $ReallocAsyncCtx + 28 | 0; //@line 30963
     HEAP32[$106 >> 2] = $14; //@line 30964
     $107 = $ReallocAsyncCtx + 32 | 0; //@line 30965
     HEAP32[$107 >> 2] = $16; //@line 30966
     $108 = $ReallocAsyncCtx + 36 | 0; //@line 30967
     HEAP32[$108 >> 2] = $26; //@line 30968
     $109 = $ReallocAsyncCtx + 40 | 0; //@line 30969
     HEAP32[$109 >> 2] = $28; //@line 30970
     $110 = $ReallocAsyncCtx + 44 | 0; //@line 30971
     HEAP32[$110 >> 2] = $18; //@line 30972
     $111 = $ReallocAsyncCtx + 48 | 0; //@line 30973
     HEAP32[$111 >> 2] = $20; //@line 30974
     $112 = $ReallocAsyncCtx + 52 | 0; //@line 30975
     HEAP32[$112 >> 2] = $22; //@line 30976
     $113 = $ReallocAsyncCtx + 56 | 0; //@line 30977
     HEAP32[$113 >> 2] = $24; //@line 30978
     $114 = $ReallocAsyncCtx + 60 | 0; //@line 30979
     HEAP32[$114 >> 2] = $30; //@line 30980
     $115 = $ReallocAsyncCtx + 64 | 0; //@line 30981
     HEAP32[$115 >> 2] = $65; //@line 30982
     sp = STACKTOP; //@line 30983
     return;
    }
    ___async_unwind = 0; //@line 30986
    HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 30987
    $100 = $ReallocAsyncCtx + 4 | 0; //@line 30988
    HEAP32[$100 >> 2] = $2; //@line 30989
    $101 = $ReallocAsyncCtx + 8 | 0; //@line 30990
    HEAP32[$101 >> 2] = $4; //@line 30991
    $102 = $ReallocAsyncCtx + 12 | 0; //@line 30992
    HEAP32[$102 >> 2] = $6; //@line 30993
    $103 = $ReallocAsyncCtx + 16 | 0; //@line 30994
    HEAP32[$103 >> 2] = $8; //@line 30995
    $104 = $ReallocAsyncCtx + 20 | 0; //@line 30996
    HEAP32[$104 >> 2] = $10; //@line 30997
    $105 = $ReallocAsyncCtx + 24 | 0; //@line 30998
    HEAP32[$105 >> 2] = $12; //@line 30999
    $106 = $ReallocAsyncCtx + 28 | 0; //@line 31000
    HEAP32[$106 >> 2] = $14; //@line 31001
    $107 = $ReallocAsyncCtx + 32 | 0; //@line 31002
    HEAP32[$107 >> 2] = $16; //@line 31003
    $108 = $ReallocAsyncCtx + 36 | 0; //@line 31004
    HEAP32[$108 >> 2] = $26; //@line 31005
    $109 = $ReallocAsyncCtx + 40 | 0; //@line 31006
    HEAP32[$109 >> 2] = $28; //@line 31007
    $110 = $ReallocAsyncCtx + 44 | 0; //@line 31008
    HEAP32[$110 >> 2] = $18; //@line 31009
    $111 = $ReallocAsyncCtx + 48 | 0; //@line 31010
    HEAP32[$111 >> 2] = $20; //@line 31011
    $112 = $ReallocAsyncCtx + 52 | 0; //@line 31012
    HEAP32[$112 >> 2] = $22; //@line 31013
    $113 = $ReallocAsyncCtx + 56 | 0; //@line 31014
    HEAP32[$113 >> 2] = $24; //@line 31015
    $114 = $ReallocAsyncCtx + 60 | 0; //@line 31016
    HEAP32[$114 >> 2] = $30; //@line 31017
    $115 = $ReallocAsyncCtx + 64 | 0; //@line 31018
    HEAP32[$115 >> 2] = $65; //@line 31019
    sp = STACKTOP; //@line 31020
    return;
   }
   $71 = $66 + 1 << 24 >> 24; //@line 31023
   HEAP8[$65 >> 0] = $71; //@line 31024
   if ($71 & 1) {
    $75 = $4 + 1097 | 0; //@line 31029
    HEAP8[$75 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$75 >> 0] | 0) | 0; //@line 31032
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 31034
   $78 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 31035
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 31038
    $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 31039
    HEAP32[$79 >> 2] = $2; //@line 31040
    $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 31041
    HEAP32[$80 >> 2] = $4; //@line 31042
    $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 31043
    HEAP32[$81 >> 2] = $6; //@line 31044
    $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 31045
    HEAP32[$82 >> 2] = $30; //@line 31046
    $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 31047
    HEAP32[$83 >> 2] = $65; //@line 31048
    $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 31049
    HEAP32[$84 >> 2] = $8; //@line 31050
    $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 31051
    HEAP32[$85 >> 2] = $10; //@line 31052
    $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 31053
    HEAP32[$86 >> 2] = $12; //@line 31054
    $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 31055
    HEAP32[$87 >> 2] = $14; //@line 31056
    $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 31057
    HEAP32[$88 >> 2] = $16; //@line 31058
    $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 31059
    HEAP32[$89 >> 2] = $18; //@line 31060
    $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 31061
    HEAP32[$90 >> 2] = $20; //@line 31062
    $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 31063
    HEAP32[$91 >> 2] = $22; //@line 31064
    $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 31065
    HEAP32[$92 >> 2] = $24; //@line 31066
    $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 31067
    HEAP32[$93 >> 2] = $26; //@line 31068
    $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 31069
    HEAP32[$94 >> 2] = $28; //@line 31070
    sp = STACKTOP; //@line 31071
    return;
   }
   HEAP32[___async_retval >> 2] = $78; //@line 31075
   ___async_unwind = 0; //@line 31076
   HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 31077
   $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 31078
   HEAP32[$79 >> 2] = $2; //@line 31079
   $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 31080
   HEAP32[$80 >> 2] = $4; //@line 31081
   $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 31082
   HEAP32[$81 >> 2] = $6; //@line 31083
   $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 31084
   HEAP32[$82 >> 2] = $30; //@line 31085
   $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 31086
   HEAP32[$83 >> 2] = $65; //@line 31087
   $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 31088
   HEAP32[$84 >> 2] = $8; //@line 31089
   $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 31090
   HEAP32[$85 >> 2] = $10; //@line 31091
   $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 31092
   HEAP32[$86 >> 2] = $12; //@line 31093
   $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 31094
   HEAP32[$87 >> 2] = $14; //@line 31095
   $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 31096
   HEAP32[$88 >> 2] = $16; //@line 31097
   $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 31098
   HEAP32[$89 >> 2] = $18; //@line 31099
   $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 31100
   HEAP32[$90 >> 2] = $20; //@line 31101
   $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 31102
   HEAP32[$91 >> 2] = $22; //@line 31103
   $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 31104
   HEAP32[$92 >> 2] = $24; //@line 31105
   $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 31106
   HEAP32[$93 >> 2] = $26; //@line 31107
   $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 31108
   HEAP32[$94 >> 2] = $28; //@line 31109
   sp = STACKTOP; //@line 31110
   return;
  }
 }
 $116 = HEAP32[$6 >> 2] | 0; //@line 31114
 $119 = $116 & -3; //@line 31117
 if (!($116 & 2)) {
  $121 = $116; //@line 31119
 } else {
  HEAP32[$6 >> 2] = $119; //@line 31121
  $121 = $119; //@line 31122
 }
 if ($121 | 0) {
  $206 = HEAP32[$26 >> 2] | 0; //@line 31126
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 31127
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($206, $28, 1e3); //@line 31128
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 31131
   $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 31132
   HEAP32[$207 >> 2] = $2; //@line 31133
   $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 31134
   HEAP32[$208 >> 2] = $4; //@line 31135
   $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 31136
   HEAP32[$209 >> 2] = $8; //@line 31137
   $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 31138
   HEAP32[$210 >> 2] = $10; //@line 31139
   $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 31140
   HEAP32[$211 >> 2] = $12; //@line 31141
   $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 31142
   HEAP32[$212 >> 2] = $14; //@line 31143
   $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 31144
   HEAP32[$213 >> 2] = $16; //@line 31145
   sp = STACKTOP; //@line 31146
   return;
  }
  ___async_unwind = 0; //@line 31149
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 31150
  $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 31151
  HEAP32[$207 >> 2] = $2; //@line 31152
  $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 31153
  HEAP32[$208 >> 2] = $4; //@line 31154
  $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 31155
  HEAP32[$209 >> 2] = $8; //@line 31156
  $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 31157
  HEAP32[$210 >> 2] = $10; //@line 31158
  $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 31159
  HEAP32[$211 >> 2] = $12; //@line 31160
  $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 31161
  HEAP32[$212 >> 2] = $14; //@line 31162
  $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 31163
  HEAP32[$213 >> 2] = $16; //@line 31164
  sp = STACKTOP; //@line 31165
  return;
 }
 $122 = HEAP8[$2 >> 0] | 0; //@line 31168
 if ($122 & 1) {
  HEAP8[$2 >> 0] = $122 & -2; //@line 31173
  $127 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31175
  $129 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 31177
  $130 = $127 + 12 | 0; //@line 31178
  $131 = HEAP32[$130 >> 2] | 0; //@line 31179
  if (!$131) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 31182
   _mbed_assert_internal(15061, 15066, 1102); //@line 31183
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 31186
    $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 31187
    HEAP32[$133 >> 2] = $2; //@line 31188
    $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 31189
    HEAP32[$134 >> 2] = $127; //@line 31190
    $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 31191
    HEAP32[$135 >> 2] = $129; //@line 31192
    $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 31193
    HEAP32[$136 >> 2] = $4; //@line 31194
    $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 31195
    HEAP32[$137 >> 2] = $8; //@line 31196
    $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 31197
    HEAP32[$138 >> 2] = $10; //@line 31198
    $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 31199
    HEAP32[$139 >> 2] = $12; //@line 31200
    $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 31201
    HEAP32[$140 >> 2] = $14; //@line 31202
    $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 31203
    HEAP32[$141 >> 2] = $16; //@line 31204
    $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 31205
    HEAP32[$142 >> 2] = $18; //@line 31206
    $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 31207
    HEAP32[$143 >> 2] = $20; //@line 31208
    $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 31209
    HEAP32[$144 >> 2] = $22; //@line 31210
    $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 31211
    HEAP32[$145 >> 2] = $24; //@line 31212
    $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 31213
    HEAP32[$146 >> 2] = $130; //@line 31214
    sp = STACKTOP; //@line 31215
    return;
   }
   ___async_unwind = 0; //@line 31218
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 31219
   $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 31220
   HEAP32[$133 >> 2] = $2; //@line 31221
   $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 31222
   HEAP32[$134 >> 2] = $127; //@line 31223
   $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 31224
   HEAP32[$135 >> 2] = $129; //@line 31225
   $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 31226
   HEAP32[$136 >> 2] = $4; //@line 31227
   $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 31228
   HEAP32[$137 >> 2] = $8; //@line 31229
   $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 31230
   HEAP32[$138 >> 2] = $10; //@line 31231
   $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 31232
   HEAP32[$139 >> 2] = $12; //@line 31233
   $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 31234
   HEAP32[$140 >> 2] = $14; //@line 31235
   $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 31236
   HEAP32[$141 >> 2] = $16; //@line 31237
   $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 31238
   HEAP32[$142 >> 2] = $18; //@line 31239
   $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 31240
   HEAP32[$143 >> 2] = $20; //@line 31241
   $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 31242
   HEAP32[$144 >> 2] = $22; //@line 31243
   $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 31244
   HEAP32[$145 >> 2] = $24; //@line 31245
   $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 31246
   HEAP32[$146 >> 2] = $130; //@line 31247
   sp = STACKTOP; //@line 31248
   return;
  } else {
   $147 = HEAP32[$131 >> 2] | 0; //@line 31251
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 31252
   FUNCTION_TABLE_vii[$147 & 31]($127, $129); //@line 31253
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 31256
    $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 31257
    HEAP32[$148 >> 2] = $2; //@line 31258
    $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 31259
    HEAP32[$149 >> 2] = $4; //@line 31260
    $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 31261
    HEAP32[$150 >> 2] = $8; //@line 31262
    $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 31263
    HEAP32[$151 >> 2] = $10; //@line 31264
    $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 31265
    HEAP32[$152 >> 2] = $12; //@line 31266
    $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 31267
    HEAP32[$153 >> 2] = $14; //@line 31268
    $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 31269
    HEAP32[$154 >> 2] = $16; //@line 31270
    $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 31271
    HEAP32[$155 >> 2] = $18; //@line 31272
    $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 31273
    HEAP32[$156 >> 2] = $20; //@line 31274
    $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 31275
    HEAP32[$157 >> 2] = $22; //@line 31276
    $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 31277
    HEAP32[$158 >> 2] = $24; //@line 31278
    sp = STACKTOP; //@line 31279
    return;
   }
   ___async_unwind = 0; //@line 31282
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 31283
   $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 31284
   HEAP32[$148 >> 2] = $2; //@line 31285
   $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 31286
   HEAP32[$149 >> 2] = $4; //@line 31287
   $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 31288
   HEAP32[$150 >> 2] = $8; //@line 31289
   $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 31290
   HEAP32[$151 >> 2] = $10; //@line 31291
   $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 31292
   HEAP32[$152 >> 2] = $12; //@line 31293
   $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 31294
   HEAP32[$153 >> 2] = $14; //@line 31295
   $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 31296
   HEAP32[$154 >> 2] = $16; //@line 31297
   $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 31298
   HEAP32[$155 >> 2] = $18; //@line 31299
   $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 31300
   HEAP32[$156 >> 2] = $20; //@line 31301
   $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 31302
   HEAP32[$157 >> 2] = $22; //@line 31303
   $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 31304
   HEAP32[$158 >> 2] = $24; //@line 31305
   sp = STACKTOP; //@line 31306
   return;
  }
 }
 if ($122 & 8) {
  HEAP8[$2 >> 0] = $122 & -9; //@line 31314
  $163 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31316
  $164 = $163 + 32 | 0; //@line 31317
  $166 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 31319
  $167 = $163 + 44 | 0; //@line 31320
  $168 = HEAP32[$167 >> 2] | 0; //@line 31321
  if (!$168) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 31324
   _mbed_assert_internal(15061, 15066, 1102); //@line 31325
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 31328
    $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 31329
    HEAP32[$170 >> 2] = $2; //@line 31330
    $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 31331
    HEAP32[$171 >> 2] = $4; //@line 31332
    $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 31333
    HEAP32[$172 >> 2] = $167; //@line 31334
    $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 31335
    HEAP32[$173 >> 2] = $8; //@line 31336
    $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 31337
    HEAP32[$174 >> 2] = $10; //@line 31338
    $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 31339
    HEAP32[$175 >> 2] = $12; //@line 31340
    $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 31341
    HEAP32[$176 >> 2] = $14; //@line 31342
    $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 31343
    HEAP32[$177 >> 2] = $16; //@line 31344
    $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 31345
    HEAP32[$178 >> 2] = $18; //@line 31346
    $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 31347
    HEAP32[$179 >> 2] = $20; //@line 31348
    $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 31349
    HEAP32[$180 >> 2] = $22; //@line 31350
    $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 31351
    HEAP32[$181 >> 2] = $24; //@line 31352
    $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 31353
    HEAP32[$182 >> 2] = $164; //@line 31354
    $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 31355
    HEAP32[$183 >> 2] = $166; //@line 31356
    sp = STACKTOP; //@line 31357
    return;
   }
   ___async_unwind = 0; //@line 31360
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 31361
   $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 31362
   HEAP32[$170 >> 2] = $2; //@line 31363
   $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 31364
   HEAP32[$171 >> 2] = $4; //@line 31365
   $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 31366
   HEAP32[$172 >> 2] = $167; //@line 31367
   $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 31368
   HEAP32[$173 >> 2] = $8; //@line 31369
   $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 31370
   HEAP32[$174 >> 2] = $10; //@line 31371
   $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 31372
   HEAP32[$175 >> 2] = $12; //@line 31373
   $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 31374
   HEAP32[$176 >> 2] = $14; //@line 31375
   $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 31376
   HEAP32[$177 >> 2] = $16; //@line 31377
   $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 31378
   HEAP32[$178 >> 2] = $18; //@line 31379
   $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 31380
   HEAP32[$179 >> 2] = $20; //@line 31381
   $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 31382
   HEAP32[$180 >> 2] = $22; //@line 31383
   $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 31384
   HEAP32[$181 >> 2] = $24; //@line 31385
   $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 31386
   HEAP32[$182 >> 2] = $164; //@line 31387
   $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 31388
   HEAP32[$183 >> 2] = $166; //@line 31389
   sp = STACKTOP; //@line 31390
   return;
  } else {
   $184 = HEAP32[$168 >> 2] | 0; //@line 31393
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 31394
   FUNCTION_TABLE_vii[$184 & 31]($164, $166); //@line 31395
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 31398
    $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 31399
    HEAP32[$185 >> 2] = $2; //@line 31400
    $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 31401
    HEAP32[$186 >> 2] = $4; //@line 31402
    $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 31403
    HEAP32[$187 >> 2] = $8; //@line 31404
    $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 31405
    HEAP32[$188 >> 2] = $10; //@line 31406
    $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 31407
    HEAP32[$189 >> 2] = $12; //@line 31408
    $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 31409
    HEAP32[$190 >> 2] = $14; //@line 31410
    $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 31411
    HEAP32[$191 >> 2] = $16; //@line 31412
    $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 31413
    HEAP32[$192 >> 2] = $18; //@line 31414
    $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 31415
    HEAP32[$193 >> 2] = $20; //@line 31416
    $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 31417
    HEAP32[$194 >> 2] = $22; //@line 31418
    $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 31419
    HEAP32[$195 >> 2] = $24; //@line 31420
    sp = STACKTOP; //@line 31421
    return;
   }
   ___async_unwind = 0; //@line 31424
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 31425
   $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 31426
   HEAP32[$185 >> 2] = $2; //@line 31427
   $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 31428
   HEAP32[$186 >> 2] = $4; //@line 31429
   $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 31430
   HEAP32[$187 >> 2] = $8; //@line 31431
   $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 31432
   HEAP32[$188 >> 2] = $10; //@line 31433
   $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 31434
   HEAP32[$189 >> 2] = $12; //@line 31435
   $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 31436
   HEAP32[$190 >> 2] = $14; //@line 31437
   $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 31438
   HEAP32[$191 >> 2] = $16; //@line 31439
   $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 31440
   HEAP32[$192 >> 2] = $18; //@line 31441
   $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 31442
   HEAP32[$193 >> 2] = $20; //@line 31443
   $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 31444
   HEAP32[$194 >> 2] = $22; //@line 31445
   $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 31446
   HEAP32[$195 >> 2] = $24; //@line 31447
   sp = STACKTOP; //@line 31448
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $18) | 0; //@line 31455
  _printf(13114, $22) | 0; //@line 31456
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 31457
  _putchar(10) | 0; //@line 31458
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 31461
   $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 31462
   HEAP32[$198 >> 2] = $2; //@line 31463
   $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 31464
   HEAP32[$199 >> 2] = $4; //@line 31465
   $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 31466
   HEAP32[$200 >> 2] = $8; //@line 31467
   $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 31468
   HEAP32[$201 >> 2] = $10; //@line 31469
   $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 31470
   HEAP32[$202 >> 2] = $12; //@line 31471
   $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 31472
   HEAP32[$203 >> 2] = $14; //@line 31473
   $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 31474
   HEAP32[$204 >> 2] = $16; //@line 31475
   sp = STACKTOP; //@line 31476
   return;
  }
  ___async_unwind = 0; //@line 31479
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 31480
  $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 31481
  HEAP32[$198 >> 2] = $2; //@line 31482
  $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 31483
  HEAP32[$199 >> 2] = $4; //@line 31484
  $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 31485
  HEAP32[$200 >> 2] = $8; //@line 31486
  $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 31487
  HEAP32[$201 >> 2] = $10; //@line 31488
  $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 31489
  HEAP32[$202 >> 2] = $12; //@line 31490
  $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 31491
  HEAP32[$203 >> 2] = $14; //@line 31492
  $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 31493
  HEAP32[$204 >> 2] = $16; //@line 31494
  sp = STACKTOP; //@line 31495
  return;
 }
 $205 = HEAP8[$2 >> 0] & -33; //@line 31499
 HEAP8[$2 >> 0] = $205; //@line 31500
 do {
  if (!($205 & 2)) {
   $244 = $205; //@line 31505
  } else {
   $216 = $205 & -3; //@line 31507
   HEAP8[$2 >> 0] = $216; //@line 31508
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $10) | 0; //@line 31513
    _printf(12994, $14) | 0; //@line 31514
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31515
    _putchar(10) | 0; //@line 31516
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 31519
     $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 31520
     HEAP32[$220 >> 2] = $2; //@line 31521
     $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 31522
     HEAP32[$221 >> 2] = $4; //@line 31523
     $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 31524
     HEAP32[$222 >> 2] = $8; //@line 31525
     $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 31526
     HEAP32[$223 >> 2] = $8; //@line 31527
     sp = STACKTOP; //@line 31528
     return;
    }
    ___async_unwind = 0; //@line 31531
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 31532
    $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 31533
    HEAP32[$220 >> 2] = $2; //@line 31534
    $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 31535
    HEAP32[$221 >> 2] = $4; //@line 31536
    $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 31537
    HEAP32[$222 >> 2] = $8; //@line 31538
    $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 31539
    HEAP32[$223 >> 2] = $8; //@line 31540
    sp = STACKTOP; //@line 31541
    return;
   }
   if ($216 & 4) {
    $242 = $216 & -5; //@line 31547
    HEAP8[$2 >> 0] = $242; //@line 31548
    $244 = $242; //@line 31549
    break;
   }
   $227 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31553
   $228 = $227 + 16 | 0; //@line 31554
   $230 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 31556
   $231 = $227 + 28 | 0; //@line 31557
   $232 = HEAP32[$231 >> 2] | 0; //@line 31558
   if (!$232) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 31561
    _mbed_assert_internal(15061, 15066, 1102); //@line 31562
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 31565
     $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 31566
     HEAP32[$234 >> 2] = $231; //@line 31567
     $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 31568
     HEAP32[$235 >> 2] = $228; //@line 31569
     $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 31570
     HEAP32[$236 >> 2] = $230; //@line 31571
     $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 31572
     HEAP32[$237 >> 2] = $2; //@line 31573
     $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 31574
     HEAP32[$238 >> 2] = $4; //@line 31575
     sp = STACKTOP; //@line 31576
     return;
    }
    ___async_unwind = 0; //@line 31579
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 31580
    $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 31581
    HEAP32[$234 >> 2] = $231; //@line 31582
    $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 31583
    HEAP32[$235 >> 2] = $228; //@line 31584
    $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 31585
    HEAP32[$236 >> 2] = $230; //@line 31586
    $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 31587
    HEAP32[$237 >> 2] = $2; //@line 31588
    $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 31589
    HEAP32[$238 >> 2] = $4; //@line 31590
    sp = STACKTOP; //@line 31591
    return;
   } else {
    $239 = HEAP32[$232 >> 2] | 0; //@line 31594
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 31595
    FUNCTION_TABLE_vii[$239 & 31]($228, $230); //@line 31596
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 31599
     $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 31600
     HEAP32[$240 >> 2] = $2; //@line 31601
     $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 31602
     HEAP32[$241 >> 2] = $4; //@line 31603
     sp = STACKTOP; //@line 31604
     return;
    }
    ___async_unwind = 0; //@line 31607
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 31608
    $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 31609
    HEAP32[$240 >> 2] = $2; //@line 31610
    $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 31611
    HEAP32[$241 >> 2] = $4; //@line 31612
    sp = STACKTOP; //@line 31613
    return;
   }
  }
 } while (0);
 if (!($244 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $244 & -17; //@line 31624
 $248 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31626
 $249 = $248 + 48 | 0; //@line 31627
 $251 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 31629
 $252 = $248 + 60 | 0; //@line 31630
 $253 = HEAP32[$252 >> 2] | 0; //@line 31631
 if (!$253) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 31634
  _mbed_assert_internal(15061, 15066, 1102); //@line 31635
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 31638
   $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 31639
   HEAP32[$255 >> 2] = $252; //@line 31640
   $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 31641
   HEAP32[$256 >> 2] = $249; //@line 31642
   $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 31643
   HEAP32[$257 >> 2] = $251; //@line 31644
   sp = STACKTOP; //@line 31645
   return;
  }
  ___async_unwind = 0; //@line 31648
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 31649
  $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 31650
  HEAP32[$255 >> 2] = $252; //@line 31651
  $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 31652
  HEAP32[$256 >> 2] = $249; //@line 31653
  $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 31654
  HEAP32[$257 >> 2] = $251; //@line 31655
  sp = STACKTOP; //@line 31656
  return;
 } else {
  $258 = HEAP32[$253 >> 2] | 0; //@line 31659
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31660
  FUNCTION_TABLE_vii[$258 & 31]($249, $251); //@line 31661
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 31664
   sp = STACKTOP; //@line 31665
   return;
  }
  ___async_unwind = 0; //@line 31668
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 31669
  sp = STACKTOP; //@line 31670
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i104 = 0, $$0$i108 = 0, $$0$i98 = 0, $$0116 = 0, $$095113 = 0, $$096$be = 0, $$096$lcssa = 0, $$096115 = 0, $$1$lcssa = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $182 = 0, $19 = 0, $20 = 0, $201 = 0, $21 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $286 = 0, $287 = 0, $29 = 0, $298 = 0, $299 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $336 = 0, $34 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $412 = 0, $413 = 0, $42 = 0, $423 = 0, $427 = 0, $43 = 0, $431 = 0, $434 = 0, $44 = 0, $440 = 0, $443 = 0, $444 = 0, $45 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $49 = 0, $531 = 0, $553 = 0, $563 = 0, $564 = 0, $60 = 0, $61 = 0, $633 = 0, $643 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20776
 STACKTOP = STACKTOP + 32 | 0; //@line 20777
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 20777
 $8 = sp + 12 | 0; //@line 20778
 $9 = sp; //@line 20779
 $10 = sp + 26 | 0; //@line 20780
 $11 = sp + 25 | 0; //@line 20781
 $12 = sp + 24 | 0; //@line 20782
 $13 = $3 & 255; //@line 20783
 if (($2 & 255) >= ($3 & 255)) {
  $$096$lcssa = 0; //@line 20786
  STACKTOP = sp; //@line 20787
  return $$096$lcssa | 0; //@line 20787
 }
 $15 = $5 + 4 | 0; //@line 20789
 $16 = $5 + 12 | 0; //@line 20790
 $17 = $5 + 13 | 0; //@line 20791
 $18 = $8 + 4 | 0; //@line 20792
 $19 = $6 + 60 | 0; //@line 20793
 $20 = $8 + 6 | 0; //@line 20794
 $21 = $6 + 44 | 0; //@line 20795
 $22 = $8 + 5 | 0; //@line 20796
 $23 = $6 + 1 | 0; //@line 20797
 $24 = $8 + 7 | 0; //@line 20798
 $25 = $8 + 8 | 0; //@line 20799
 $26 = $6 + 32 | 0; //@line 20800
 $27 = $8 + 9 | 0; //@line 20801
 $28 = $0 + 3 | 0; //@line 20802
 $29 = $0 + 2 | 0; //@line 20803
 $30 = $6 + 56 | 0; //@line 20804
 $31 = $6 + 58 | 0; //@line 20805
 $32 = $8 + 1 | 0; //@line 20806
 $33 = $8 + 4 | 0; //@line 20807
 $34 = $6 + 40 | 0; //@line 20808
 $35 = $6 + 36 | 0; //@line 20809
 $36 = $6 + 33 | 0; //@line 20810
 $37 = $0 + 1 | 0; //@line 20811
 $38 = $8 + 4 | 0; //@line 20812
 $39 = $9 + 4 | 0; //@line 20813
 $40 = $9 + 8 | 0; //@line 20814
 $41 = $6 + 16 | 0; //@line 20815
 $42 = $6 + 20 | 0; //@line 20816
 $43 = $8 + 1 | 0; //@line 20817
 $44 = $8 + 2 | 0; //@line 20818
 $45 = $6 + 45 | 0; //@line 20819
 $46 = $6 + 48 | 0; //@line 20820
 $47 = $8 + 4 | 0; //@line 20821
 $$0116 = $2; //@line 20822
 $$096115 = 0; //@line 20822
 L4 : while (1) {
  $49 = $$0116 + 1 << 24 >> 24; //@line 20825
  switch (HEAP8[$1 + ($$0116 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 20830
    HEAP8[$16 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20835
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0116 + 2 & 255) >> 0] | 0; //@line 20840
    $$0$be = $$0116 + 3 << 24 >> 24; //@line 20841
    $$096$be = $$096115; //@line 20841
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 20845
    HEAP8[$10 >> 0] = 0; //@line 20846
    HEAP8[$11 >> 0] = 0; //@line 20847
    HEAP8[$12 >> 0] = 0; //@line 20848
    $60 = $49 & 255; //@line 20849
    $61 = $60 + -1 | 0; //@line 20850
    HEAP32[$8 >> 2] = $1 + $61; //@line 20852
    HEAP8[$18 >> 0] = $13 - $61; //@line 20855
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 20857
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 20859
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 20861
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 20863
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 20865
    $72 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 20868
    $AsyncCtx = _emscripten_alloc_async_context(276, sp) | 0; //@line 20869
    $73 = FUNCTION_TABLE_iiiiiii[$72 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 20870
    if (___async) {
     label = 6; //@line 20873
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20876
    if (($73 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 20881
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 20883
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 20885
    }
    $147 = HEAP8[$12 >> 0] | 0; //@line 20887
    if (($147 & 255) > 4) {
     $div = ($147 & 255) / 5 | 0; //@line 20890
     $151 = (-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0; //@line 20895
     $$095113 = 0; //@line 20896
     $157 = HEAP8[$29 >> 0] | 0; //@line 20896
     while (1) {
      $156 = $157 & 255; //@line 20898
      if (($151 | 0) > ($156 | 0)) {
       $160 = $157 + 2 << 24 >> 24; //@line 20902
       HEAP8[$0 + 4 + $156 >> 0] = 3; //@line 20906
       HEAP8[$29 >> 0] = $160; //@line 20907
       HEAP8[($157 + 1 & 255) + ($0 + 4) >> 0] = $73; //@line 20908
       HEAP8[$0 >> 0] = 1; //@line 20909
       $$0$i = 0; //@line 20910
       $643 = $160; //@line 20910
      } else {
       $$0$i = -1e3; //@line 20912
       $643 = $157; //@line 20912
      }
      $$095113 = $$095113 + 1 << 24 >> 24; //@line 20914
      if (($$095113 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 20919
       break;
      } else {
       $157 = $643; //@line 20917
      }
     }
    } else {
     $$1$lcssa = $$096115; //@line 20924
    }
    $$0$be = $60 + 255 + ($147 & 255) & 255; //@line 20930
    $$096$be = $$1$lcssa; //@line 20930
    break;
   }
  case 4:
   {
    $166 = $$0116 + 2 << 24 >> 24; //@line 20934
    $169 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20937
    HEAP8[$30 >> 0] = $169; //@line 20938
    HEAP16[$31 >> 1] = 1 << ($169 & 255); //@line 20942
    $174 = HEAP8[$29 >> 0] | 0; //@line 20944
    if (($174 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $174 + 1 << 24 >> 24; //@line 20951
     HEAP8[($174 & 255) + ($0 + 4) >> 0] = 4; //@line 20952
     HEAP8[$0 >> 0] = 1; //@line 20953
     $$0$be = $166; //@line 20954
     $$096$be = 0; //@line 20954
    } else {
     $$0$be = $166; //@line 20956
     $$096$be = -1e3; //@line 20956
    }
    break;
   }
  case 5:
   {
    $182 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20963
    HEAP8[$32 >> 0] = ($182 & 255) >>> 4 & 7; //@line 20968
    HEAP8[$8 >> 0] = $182 & 15; //@line 20970
    $201 = $$0116 + 5 << 24 >> 24; //@line 20984
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 20992
    $211 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 20995
    $AsyncCtx3 = _emscripten_alloc_async_context(272, sp) | 0; //@line 20996
    $212 = FUNCTION_TABLE_iii[$211 & 31]($7, $8) | 0; //@line 20997
    if (___async) {
     label = 18; //@line 21000
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21003
    if (($212 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 21008
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 21010
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 21012
    }
    $286 = HEAP8[$29 >> 0] | 0; //@line 21015
    $287 = $286 & 255; //@line 21016
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($287 | 0)) {
     HEAP8[$0 + 4 + $287 >> 0] = 5; //@line 21024
     HEAP8[$29 >> 0] = $286 + 2 << 24 >> 24; //@line 21026
     HEAP8[($286 + 1 & 255) + ($0 + 4) >> 0] = $212; //@line 21029
     HEAP8[$37 >> 0] = 1; //@line 21030
     HEAP8[$0 >> 0] = 1; //@line 21031
     $$0$i104 = 0; //@line 21032
    } else {
     $$0$i104 = -1e3; //@line 21034
    }
    $$0$be = $201; //@line 21036
    $$096$be = $$0$i104; //@line 21036
    break;
   }
  case 6:
   {
    $298 = HEAP8[$29 >> 0] | 0; //@line 21041
    $299 = $298 & 255; //@line 21042
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -2 | 0) > ($299 | 0)) {
     HEAP8[$0 + 4 + $299 >> 0] = 6; //@line 21050
     HEAP8[($298 + 1 & 255) + ($0 + 4) >> 0] = -1; //@line 21054
     HEAP8[$29 >> 0] = $298 + 3 << 24 >> 24; //@line 21056
     HEAP8[($298 + 2 & 255) + ($0 + 4) >> 0] = $4; //@line 21059
     HEAP8[$0 >> 0] = 1; //@line 21060
     $$0$be = $49; //@line 21061
     $$096$be = 0; //@line 21061
    } else {
     $$0$be = $49; //@line 21063
     $$096$be = -1e3; //@line 21063
    }
    break;
   }
  case 7:
   {
    HEAP8[$38 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21072
    HEAP32[$8 >> 2] = $9; //@line 21073
    HEAP32[$9 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 21094
    HEAP32[$39 >> 2] = 0; //@line 21095
    $336 = $$0116 + 6 << 24 >> 24; //@line 21096
    HEAP8[$40 >> 0] = HEAP8[$1 + ($$0116 + 5 & 255) >> 0] | 0; //@line 21100
    $342 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 21103
    $AsyncCtx7 = _emscripten_alloc_async_context(272, sp) | 0; //@line 21104
    $343 = FUNCTION_TABLE_iii[$342 & 31]($7, $8) | 0; //@line 21105
    if (___async) {
     label = 27; //@line 21108
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21111
    $412 = HEAP8[$29 >> 0] | 0; //@line 21113
    $413 = $412 & 255; //@line 21114
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($413 | 0)) {
     HEAP8[$0 + 4 + $413 >> 0] = 7; //@line 21125
     HEAP8[$29 >> 0] = $412 + 2 << 24 >> 24; //@line 21126
     HEAP8[($412 + 1 & 255) + ($0 + 4) >> 0] = $343; //@line 21127
     HEAP8[$0 >> 0] = 1; //@line 21128
     $$0$i108 = 0; //@line 21129
    } else {
     $$0$i108 = -1e3; //@line 21131
    }
    $$0$be = $336; //@line 21133
    $$096$be = $$0$i108; //@line 21133
    break;
   }
  case 8:
   {
    $423 = $$0116 + 2 << 24 >> 24; //@line 21137
    $427 = HEAP8[$1 + ($49 & 255) >> 0] & 15; //@line 21141
    $431 = ($427 + ($427 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 21146
    HEAP32[$41 >> 2] = $431; //@line 21147
    HEAP32[$42 >> 2] = $431 + 1e3; //@line 21149
    $434 = HEAP8[$29 >> 0] | 0; //@line 21151
    if (($434 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $434 + 1 << 24 >> 24; //@line 21158
     HEAP8[($434 & 255) + ($0 + 4) >> 0] = 8; //@line 21159
     HEAP8[$37 >> 0] = 1; //@line 21160
     HEAP8[$0 >> 0] = 1; //@line 21161
     $$0$be = $423; //@line 21162
     $$096$be = 0; //@line 21162
    } else {
     $$0$be = $423; //@line 21164
     $$096$be = -1e3; //@line 21164
    }
    break;
   }
  case 9:
   {
    $440 = $$0116 + 2 << 24 >> 24; //@line 21169
    $443 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21172
    HEAP8[$8 >> 0] = 0; //@line 21173
    $444 = $443 & 255; //@line 21174
    HEAP8[$43 >> 0] = $444 >>> 5 & 1; //@line 21178
    if ($444 & 16 | 0) {
     HEAP8[$8 >> 0] = 1; //@line 21182
    }
    HEAP8[$44 >> 0] = $444 & 15; //@line 21186
    $453 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 21189
    $AsyncCtx11 = _emscripten_alloc_async_context(276, sp) | 0; //@line 21190
    $454 = FUNCTION_TABLE_iii[$453 & 31]($7, $8) | 0; //@line 21191
    if (___async) {
     label = 36; //@line 21194
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21197
    if ($454) {
     HEAP8[$21 >> 0] = HEAP8[$8 >> 0] | 0; //@line 21200
     HEAP8[$45 >> 0] = HEAP8[$43 >> 0] | 0; //@line 21202
     HEAPF32[$46 >> 2] = +(HEAPU8[13572 + (HEAPU8[$44 >> 0] | 0) >> 0] | 0); //@line 21208
     $531 = HEAP8[$29 >> 0] | 0; //@line 21210
     if (($531 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
      HEAP8[$29 >> 0] = $531 + 1 << 24 >> 24; //@line 21217
      HEAP8[($531 & 255) + ($0 + 4) >> 0] = 9; //@line 21218
      HEAP8[$0 >> 0] = 1; //@line 21219
      $$2 = 0; //@line 21220
     } else {
      $$2 = -1e3; //@line 21222
     }
    } else {
     $$2 = $$096115; //@line 21225
    }
    $$0$be = $440; //@line 21227
    $$096$be = $$2; //@line 21227
    break;
   }
  case 10:
   {
    HEAP8[$8 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21235
    $553 = $$0116 + 5 << 24 >> 24; //@line 21248
    HEAP32[$47 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 21256
    $563 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 21259
    $AsyncCtx15 = _emscripten_alloc_async_context(272, sp) | 0; //@line 21260
    $564 = FUNCTION_TABLE_iii[$563 & 31]($7, $8) | 0; //@line 21261
    if (___async) {
     label = 42; //@line 21264
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 21267
    $633 = HEAP8[$29 >> 0] | 0; //@line 21269
    if (($633 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[($633 & 255) + ($0 + 4) >> 0] = 10; //@line 21276
     HEAP8[$29 >> 0] = $633 + 2 << 24 >> 24; //@line 21278
     HEAP8[($633 + 1 & 255) + ($0 + 4) >> 0] = $564; //@line 21281
     HEAP8[$37 >> 0] = 1; //@line 21282
     HEAP8[$0 >> 0] = 1; //@line 21283
     $$0$i98 = 0; //@line 21284
    } else {
     $$0$i98 = -1e3; //@line 21286
    }
    $$0$be = $553; //@line 21288
    $$096$be = $$0$i98; //@line 21288
    break;
   }
  default:
   {
    $$0$be = $49; //@line 21292
    $$096$be = -1013; //@line 21292
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0116 = $$0$be; //@line 21297
   $$096115 = $$096$be; //@line 21297
  } else {
   $$096$lcssa = $$096$be; //@line 21299
   label = 47; //@line 21300
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 590; //@line 21305
  HEAP32[$AsyncCtx + 4 >> 2] = $30; //@line 21307
  HEAP32[$AsyncCtx + 8 >> 2] = $39; //@line 21309
  HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 21311
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 21313
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 21315
  HEAP32[$AsyncCtx + 24 >> 2] = $8; //@line 21317
  HEAP32[$AsyncCtx + 28 >> 2] = $31; //@line 21319
  HEAP32[$AsyncCtx + 32 >> 2] = $8; //@line 21321
  HEAP32[$AsyncCtx + 36 >> 2] = $40; //@line 21323
  HEAP32[$AsyncCtx + 40 >> 2] = $29; //@line 21325
  HEAP32[$AsyncCtx + 44 >> 2] = $8; //@line 21327
  HEAP32[$AsyncCtx + 48 >> 2] = $8; //@line 21329
  HEAP32[$AsyncCtx + 52 >> 2] = $7; //@line 21331
  HEAP32[$AsyncCtx + 56 >> 2] = $8; //@line 21333
  HEAP32[$AsyncCtx + 60 >> 2] = $28; //@line 21335
  HEAP32[$AsyncCtx + 64 >> 2] = $17; //@line 21337
  HEAP32[$AsyncCtx + 68 >> 2] = $32; //@line 21339
  HEAP32[$AsyncCtx + 72 >> 2] = $41; //@line 21341
  HEAP32[$AsyncCtx + 76 >> 2] = $7; //@line 21343
  HEAP32[$AsyncCtx + 80 >> 2] = $12; //@line 21345
  HEAP32[$AsyncCtx + 84 >> 2] = $16; //@line 21347
  HEAP32[$AsyncCtx + 88 >> 2] = $33; //@line 21349
  HEAP32[$AsyncCtx + 92 >> 2] = $27; //@line 21351
  HEAP32[$AsyncCtx + 96 >> 2] = $60; //@line 21353
  HEAP32[$AsyncCtx + 100 >> 2] = $8; //@line 21355
  HEAP32[$AsyncCtx + 104 >> 2] = $7; //@line 21357
  HEAP32[$AsyncCtx + 108 >> 2] = $42; //@line 21359
  HEAP32[$AsyncCtx + 112 >> 2] = $8; //@line 21361
  HEAP32[$AsyncCtx + 116 >> 2] = $15; //@line 21363
  HEAP32[$AsyncCtx + 120 >> 2] = $8; //@line 21365
  HEAP32[$AsyncCtx + 124 >> 2] = $26; //@line 21367
  HEAP32[$AsyncCtx + 128 >> 2] = $43; //@line 21369
  HEAP32[$AsyncCtx + 132 >> 2] = $34; //@line 21371
  HEAP32[$AsyncCtx + 136 >> 2] = $10; //@line 21373
  HEAP32[$AsyncCtx + 140 >> 2] = $25; //@line 21375
  HEAP32[$AsyncCtx + 144 >> 2] = $11; //@line 21377
  HEAP32[$AsyncCtx + 148 >> 2] = $44; //@line 21379
  HEAP32[$AsyncCtx + 152 >> 2] = $6; //@line 21381
  HEAP32[$AsyncCtx + 156 >> 2] = $35; //@line 21383
  HEAP32[$AsyncCtx + 160 >> 2] = $13; //@line 21385
  HEAP32[$AsyncCtx + 164 >> 2] = $7; //@line 21387
  HEAP32[$AsyncCtx + 168 >> 2] = $8; //@line 21389
  HEAP32[$AsyncCtx + 172 >> 2] = $24; //@line 21391
  HEAP32[$AsyncCtx + 176 >> 2] = $36; //@line 21393
  HEAP32[$AsyncCtx + 180 >> 2] = $45; //@line 21395
  HEAP32[$AsyncCtx + 184 >> 2] = $37; //@line 21397
  HEAP32[$AsyncCtx + 188 >> 2] = $0; //@line 21399
  HEAP32[$AsyncCtx + 192 >> 2] = $46; //@line 21401
  HEAP32[$AsyncCtx + 196 >> 2] = $23; //@line 21403
  HEAP32[$AsyncCtx + 200 >> 2] = $8; //@line 21405
  HEAP32[$AsyncCtx + 204 >> 2] = $8; //@line 21407
  HEAP32[$AsyncCtx + 208 >> 2] = $22; //@line 21409
  HEAP32[$AsyncCtx + 212 >> 2] = $9; //@line 21411
  HEAP32[$AsyncCtx + 216 >> 2] = $47; //@line 21413
  HEAP32[$AsyncCtx + 220 >> 2] = $7; //@line 21415
  HEAP32[$AsyncCtx + 224 >> 2] = $21; //@line 21417
  HEAP8[$AsyncCtx + 228 >> 0] = $4; //@line 21419
  HEAP32[$AsyncCtx + 232 >> 2] = $38; //@line 21421
  HEAP8[$AsyncCtx + 236 >> 0] = $3; //@line 21423
  HEAP32[$AsyncCtx + 240 >> 2] = $7; //@line 21425
  HEAP32[$AsyncCtx + 244 >> 2] = $20; //@line 21427
  HEAP32[$AsyncCtx + 248 >> 2] = $1; //@line 21429
  HEAP8[$AsyncCtx + 252 >> 0] = $2; //@line 21431
  HEAP32[$AsyncCtx + 256 >> 2] = $8; //@line 21433
  HEAP32[$AsyncCtx + 260 >> 2] = $9; //@line 21435
  HEAP32[$AsyncCtx + 264 >> 2] = $$096115; //@line 21437
  HEAP32[$AsyncCtx + 268 >> 2] = $19; //@line 21439
  HEAP32[$AsyncCtx + 272 >> 2] = $9; //@line 21441
  sp = STACKTOP; //@line 21442
  STACKTOP = sp; //@line 21443
  return 0; //@line 21443
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 591; //@line 21446
  HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 21448
  HEAP32[$AsyncCtx3 + 8 >> 2] = $39; //@line 21450
  HEAP32[$AsyncCtx3 + 12 >> 2] = $18; //@line 21452
  HEAP32[$AsyncCtx3 + 16 >> 2] = $9; //@line 21454
  HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 21456
  HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 21458
  HEAP32[$AsyncCtx3 + 28 >> 2] = $31; //@line 21460
  HEAP32[$AsyncCtx3 + 32 >> 2] = $8; //@line 21462
  HEAP32[$AsyncCtx3 + 36 >> 2] = $40; //@line 21464
  HEAP32[$AsyncCtx3 + 40 >> 2] = $29; //@line 21466
  HEAP32[$AsyncCtx3 + 44 >> 2] = $8; //@line 21468
  HEAP32[$AsyncCtx3 + 48 >> 2] = $8; //@line 21470
  HEAP32[$AsyncCtx3 + 52 >> 2] = $7; //@line 21472
  HEAP32[$AsyncCtx3 + 56 >> 2] = $8; //@line 21474
  HEAP32[$AsyncCtx3 + 60 >> 2] = $28; //@line 21476
  HEAP32[$AsyncCtx3 + 64 >> 2] = $17; //@line 21478
  HEAP32[$AsyncCtx3 + 68 >> 2] = $32; //@line 21480
  HEAP32[$AsyncCtx3 + 72 >> 2] = $41; //@line 21482
  HEAP32[$AsyncCtx3 + 76 >> 2] = $7; //@line 21484
  HEAP32[$AsyncCtx3 + 80 >> 2] = $12; //@line 21486
  HEAP32[$AsyncCtx3 + 84 >> 2] = $16; //@line 21488
  HEAP32[$AsyncCtx3 + 88 >> 2] = $33; //@line 21490
  HEAP32[$AsyncCtx3 + 92 >> 2] = $27; //@line 21492
  HEAP32[$AsyncCtx3 + 96 >> 2] = $42; //@line 21494
  HEAP32[$AsyncCtx3 + 100 >> 2] = $8; //@line 21496
  HEAP32[$AsyncCtx3 + 104 >> 2] = $7; //@line 21498
  HEAP32[$AsyncCtx3 + 108 >> 2] = $8; //@line 21500
  HEAP32[$AsyncCtx3 + 112 >> 2] = $15; //@line 21502
  HEAP32[$AsyncCtx3 + 116 >> 2] = $8; //@line 21504
  HEAP32[$AsyncCtx3 + 120 >> 2] = $26; //@line 21506
  HEAP32[$AsyncCtx3 + 124 >> 2] = $43; //@line 21508
  HEAP32[$AsyncCtx3 + 128 >> 2] = $34; //@line 21510
  HEAP32[$AsyncCtx3 + 132 >> 2] = $10; //@line 21512
  HEAP32[$AsyncCtx3 + 136 >> 2] = $25; //@line 21514
  HEAP32[$AsyncCtx3 + 140 >> 2] = $11; //@line 21516
  HEAP8[$AsyncCtx3 + 144 >> 0] = $201; //@line 21518
  HEAP32[$AsyncCtx3 + 148 >> 2] = $44; //@line 21520
  HEAP32[$AsyncCtx3 + 152 >> 2] = $6; //@line 21522
  HEAP32[$AsyncCtx3 + 156 >> 2] = $35; //@line 21524
  HEAP32[$AsyncCtx3 + 160 >> 2] = $13; //@line 21526
  HEAP32[$AsyncCtx3 + 164 >> 2] = $7; //@line 21528
  HEAP32[$AsyncCtx3 + 168 >> 2] = $8; //@line 21530
  HEAP32[$AsyncCtx3 + 172 >> 2] = $24; //@line 21532
  HEAP32[$AsyncCtx3 + 176 >> 2] = $36; //@line 21534
  HEAP32[$AsyncCtx3 + 180 >> 2] = $45; //@line 21536
  HEAP32[$AsyncCtx3 + 184 >> 2] = $37; //@line 21538
  HEAP32[$AsyncCtx3 + 188 >> 2] = $0; //@line 21540
  HEAP32[$AsyncCtx3 + 192 >> 2] = $46; //@line 21542
  HEAP32[$AsyncCtx3 + 196 >> 2] = $23; //@line 21544
  HEAP32[$AsyncCtx3 + 200 >> 2] = $8; //@line 21546
  HEAP32[$AsyncCtx3 + 204 >> 2] = $8; //@line 21548
  HEAP32[$AsyncCtx3 + 208 >> 2] = $22; //@line 21550
  HEAP32[$AsyncCtx3 + 212 >> 2] = $9; //@line 21552
  HEAP32[$AsyncCtx3 + 216 >> 2] = $47; //@line 21554
  HEAP32[$AsyncCtx3 + 220 >> 2] = $7; //@line 21556
  HEAP32[$AsyncCtx3 + 224 >> 2] = $21; //@line 21558
  HEAP8[$AsyncCtx3 + 228 >> 0] = $4; //@line 21560
  HEAP32[$AsyncCtx3 + 232 >> 2] = $38; //@line 21562
  HEAP8[$AsyncCtx3 + 236 >> 0] = $3; //@line 21564
  HEAP32[$AsyncCtx3 + 240 >> 2] = $7; //@line 21566
  HEAP32[$AsyncCtx3 + 244 >> 2] = $20; //@line 21568
  HEAP32[$AsyncCtx3 + 248 >> 2] = $1; //@line 21570
  HEAP8[$AsyncCtx3 + 252 >> 0] = $2; //@line 21572
  HEAP32[$AsyncCtx3 + 256 >> 2] = $8; //@line 21574
  HEAP32[$AsyncCtx3 + 260 >> 2] = $9; //@line 21576
  HEAP32[$AsyncCtx3 + 264 >> 2] = $19; //@line 21578
  HEAP32[$AsyncCtx3 + 268 >> 2] = $9; //@line 21580
  sp = STACKTOP; //@line 21581
  STACKTOP = sp; //@line 21582
  return 0; //@line 21582
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx7 >> 2] = 592; //@line 21585
  HEAP32[$AsyncCtx7 + 4 >> 2] = $30; //@line 21587
  HEAP32[$AsyncCtx7 + 8 >> 2] = $39; //@line 21589
  HEAP32[$AsyncCtx7 + 12 >> 2] = $18; //@line 21591
  HEAP32[$AsyncCtx7 + 16 >> 2] = $9; //@line 21593
  HEAP32[$AsyncCtx7 + 20 >> 2] = $0; //@line 21595
  HEAP32[$AsyncCtx7 + 24 >> 2] = $8; //@line 21597
  HEAP32[$AsyncCtx7 + 28 >> 2] = $31; //@line 21599
  HEAP32[$AsyncCtx7 + 32 >> 2] = $8; //@line 21601
  HEAP32[$AsyncCtx7 + 36 >> 2] = $40; //@line 21603
  HEAP32[$AsyncCtx7 + 40 >> 2] = $29; //@line 21605
  HEAP32[$AsyncCtx7 + 44 >> 2] = $8; //@line 21607
  HEAP32[$AsyncCtx7 + 48 >> 2] = $8; //@line 21609
  HEAP32[$AsyncCtx7 + 52 >> 2] = $7; //@line 21611
  HEAP32[$AsyncCtx7 + 56 >> 2] = $8; //@line 21613
  HEAP32[$AsyncCtx7 + 60 >> 2] = $28; //@line 21615
  HEAP32[$AsyncCtx7 + 64 >> 2] = $17; //@line 21617
  HEAP32[$AsyncCtx7 + 68 >> 2] = $32; //@line 21619
  HEAP32[$AsyncCtx7 + 72 >> 2] = $41; //@line 21621
  HEAP32[$AsyncCtx7 + 76 >> 2] = $7; //@line 21623
  HEAP32[$AsyncCtx7 + 80 >> 2] = $12; //@line 21625
  HEAP32[$AsyncCtx7 + 84 >> 2] = $16; //@line 21627
  HEAP32[$AsyncCtx7 + 88 >> 2] = $33; //@line 21629
  HEAP32[$AsyncCtx7 + 92 >> 2] = $27; //@line 21631
  HEAP32[$AsyncCtx7 + 96 >> 2] = $42; //@line 21633
  HEAP32[$AsyncCtx7 + 100 >> 2] = $8; //@line 21635
  HEAP8[$AsyncCtx7 + 104 >> 0] = $336; //@line 21637
  HEAP32[$AsyncCtx7 + 108 >> 2] = $7; //@line 21639
  HEAP32[$AsyncCtx7 + 112 >> 2] = $8; //@line 21641
  HEAP32[$AsyncCtx7 + 116 >> 2] = $15; //@line 21643
  HEAP32[$AsyncCtx7 + 120 >> 2] = $8; //@line 21645
  HEAP32[$AsyncCtx7 + 124 >> 2] = $26; //@line 21647
  HEAP32[$AsyncCtx7 + 128 >> 2] = $43; //@line 21649
  HEAP32[$AsyncCtx7 + 132 >> 2] = $34; //@line 21651
  HEAP32[$AsyncCtx7 + 136 >> 2] = $10; //@line 21653
  HEAP32[$AsyncCtx7 + 140 >> 2] = $25; //@line 21655
  HEAP32[$AsyncCtx7 + 144 >> 2] = $11; //@line 21657
  HEAP32[$AsyncCtx7 + 148 >> 2] = $44; //@line 21659
  HEAP32[$AsyncCtx7 + 152 >> 2] = $6; //@line 21661
  HEAP32[$AsyncCtx7 + 156 >> 2] = $35; //@line 21663
  HEAP32[$AsyncCtx7 + 160 >> 2] = $13; //@line 21665
  HEAP32[$AsyncCtx7 + 164 >> 2] = $7; //@line 21667
  HEAP32[$AsyncCtx7 + 168 >> 2] = $8; //@line 21669
  HEAP32[$AsyncCtx7 + 172 >> 2] = $24; //@line 21671
  HEAP32[$AsyncCtx7 + 176 >> 2] = $36; //@line 21673
  HEAP32[$AsyncCtx7 + 180 >> 2] = $45; //@line 21675
  HEAP32[$AsyncCtx7 + 184 >> 2] = $37; //@line 21677
  HEAP32[$AsyncCtx7 + 188 >> 2] = $0; //@line 21679
  HEAP32[$AsyncCtx7 + 192 >> 2] = $46; //@line 21681
  HEAP32[$AsyncCtx7 + 196 >> 2] = $23; //@line 21683
  HEAP32[$AsyncCtx7 + 200 >> 2] = $8; //@line 21685
  HEAP32[$AsyncCtx7 + 204 >> 2] = $8; //@line 21687
  HEAP32[$AsyncCtx7 + 208 >> 2] = $22; //@line 21689
  HEAP32[$AsyncCtx7 + 212 >> 2] = $9; //@line 21691
  HEAP32[$AsyncCtx7 + 216 >> 2] = $47; //@line 21693
  HEAP32[$AsyncCtx7 + 220 >> 2] = $7; //@line 21695
  HEAP32[$AsyncCtx7 + 224 >> 2] = $21; //@line 21697
  HEAP8[$AsyncCtx7 + 228 >> 0] = $4; //@line 21699
  HEAP32[$AsyncCtx7 + 232 >> 2] = $38; //@line 21701
  HEAP8[$AsyncCtx7 + 236 >> 0] = $3; //@line 21703
  HEAP32[$AsyncCtx7 + 240 >> 2] = $7; //@line 21705
  HEAP32[$AsyncCtx7 + 244 >> 2] = $20; //@line 21707
  HEAP32[$AsyncCtx7 + 248 >> 2] = $1; //@line 21709
  HEAP8[$AsyncCtx7 + 252 >> 0] = $2; //@line 21711
  HEAP32[$AsyncCtx7 + 256 >> 2] = $8; //@line 21713
  HEAP32[$AsyncCtx7 + 260 >> 2] = $9; //@line 21715
  HEAP32[$AsyncCtx7 + 264 >> 2] = $19; //@line 21717
  HEAP32[$AsyncCtx7 + 268 >> 2] = $9; //@line 21719
  sp = STACKTOP; //@line 21720
  STACKTOP = sp; //@line 21721
  return 0; //@line 21721
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx11 >> 2] = 593; //@line 21724
  HEAP32[$AsyncCtx11 + 4 >> 2] = $30; //@line 21726
  HEAP32[$AsyncCtx11 + 8 >> 2] = $39; //@line 21728
  HEAP32[$AsyncCtx11 + 12 >> 2] = $18; //@line 21730
  HEAP32[$AsyncCtx11 + 16 >> 2] = $9; //@line 21732
  HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 21734
  HEAP32[$AsyncCtx11 + 24 >> 2] = $8; //@line 21736
  HEAP32[$AsyncCtx11 + 28 >> 2] = $31; //@line 21738
  HEAP32[$AsyncCtx11 + 32 >> 2] = $8; //@line 21740
  HEAP32[$AsyncCtx11 + 36 >> 2] = $40; //@line 21742
  HEAP32[$AsyncCtx11 + 40 >> 2] = $29; //@line 21744
  HEAP32[$AsyncCtx11 + 44 >> 2] = $8; //@line 21746
  HEAP32[$AsyncCtx11 + 48 >> 2] = $8; //@line 21748
  HEAP32[$AsyncCtx11 + 52 >> 2] = $7; //@line 21750
  HEAP32[$AsyncCtx11 + 56 >> 2] = $8; //@line 21752
  HEAP32[$AsyncCtx11 + 60 >> 2] = $28; //@line 21754
  HEAP32[$AsyncCtx11 + 64 >> 2] = $17; //@line 21756
  HEAP32[$AsyncCtx11 + 68 >> 2] = $32; //@line 21758
  HEAP32[$AsyncCtx11 + 72 >> 2] = $41; //@line 21760
  HEAP32[$AsyncCtx11 + 76 >> 2] = $7; //@line 21762
  HEAP32[$AsyncCtx11 + 80 >> 2] = $12; //@line 21764
  HEAP32[$AsyncCtx11 + 84 >> 2] = $16; //@line 21766
  HEAP32[$AsyncCtx11 + 88 >> 2] = $33; //@line 21768
  HEAP32[$AsyncCtx11 + 92 >> 2] = $27; //@line 21770
  HEAP32[$AsyncCtx11 + 96 >> 2] = $42; //@line 21772
  HEAP32[$AsyncCtx11 + 100 >> 2] = $8; //@line 21774
  HEAP32[$AsyncCtx11 + 104 >> 2] = $7; //@line 21776
  HEAP8[$AsyncCtx11 + 108 >> 0] = $440; //@line 21778
  HEAP32[$AsyncCtx11 + 112 >> 2] = $8; //@line 21780
  HEAP32[$AsyncCtx11 + 116 >> 2] = $15; //@line 21782
  HEAP32[$AsyncCtx11 + 120 >> 2] = $26; //@line 21784
  HEAP32[$AsyncCtx11 + 124 >> 2] = $8; //@line 21786
  HEAP32[$AsyncCtx11 + 128 >> 2] = $43; //@line 21788
  HEAP32[$AsyncCtx11 + 132 >> 2] = $34; //@line 21790
  HEAP32[$AsyncCtx11 + 136 >> 2] = $10; //@line 21792
  HEAP32[$AsyncCtx11 + 140 >> 2] = $25; //@line 21794
  HEAP32[$AsyncCtx11 + 144 >> 2] = $11; //@line 21796
  HEAP32[$AsyncCtx11 + 148 >> 2] = $44; //@line 21798
  HEAP32[$AsyncCtx11 + 152 >> 2] = $6; //@line 21800
  HEAP32[$AsyncCtx11 + 156 >> 2] = $35; //@line 21802
  HEAP32[$AsyncCtx11 + 160 >> 2] = $13; //@line 21804
  HEAP32[$AsyncCtx11 + 164 >> 2] = $7; //@line 21806
  HEAP32[$AsyncCtx11 + 168 >> 2] = $8; //@line 21808
  HEAP32[$AsyncCtx11 + 172 >> 2] = $24; //@line 21810
  HEAP32[$AsyncCtx11 + 176 >> 2] = $36; //@line 21812
  HEAP32[$AsyncCtx11 + 180 >> 2] = $45; //@line 21814
  HEAP32[$AsyncCtx11 + 184 >> 2] = $37; //@line 21816
  HEAP32[$AsyncCtx11 + 188 >> 2] = $0; //@line 21818
  HEAP32[$AsyncCtx11 + 192 >> 2] = $46; //@line 21820
  HEAP32[$AsyncCtx11 + 196 >> 2] = $23; //@line 21822
  HEAP32[$AsyncCtx11 + 200 >> 2] = $8; //@line 21824
  HEAP32[$AsyncCtx11 + 204 >> 2] = $8; //@line 21826
  HEAP32[$AsyncCtx11 + 208 >> 2] = $22; //@line 21828
  HEAP32[$AsyncCtx11 + 212 >> 2] = $9; //@line 21830
  HEAP32[$AsyncCtx11 + 216 >> 2] = $47; //@line 21832
  HEAP32[$AsyncCtx11 + 220 >> 2] = $7; //@line 21834
  HEAP32[$AsyncCtx11 + 224 >> 2] = $21; //@line 21836
  HEAP8[$AsyncCtx11 + 228 >> 0] = $4; //@line 21838
  HEAP32[$AsyncCtx11 + 232 >> 2] = $38; //@line 21840
  HEAP8[$AsyncCtx11 + 236 >> 0] = $3; //@line 21842
  HEAP32[$AsyncCtx11 + 240 >> 2] = $7; //@line 21844
  HEAP32[$AsyncCtx11 + 244 >> 2] = $20; //@line 21846
  HEAP32[$AsyncCtx11 + 248 >> 2] = $1; //@line 21848
  HEAP8[$AsyncCtx11 + 252 >> 0] = $2; //@line 21850
  HEAP32[$AsyncCtx11 + 256 >> 2] = $8; //@line 21852
  HEAP32[$AsyncCtx11 + 260 >> 2] = $9; //@line 21854
  HEAP32[$AsyncCtx11 + 264 >> 2] = $$096115; //@line 21856
  HEAP32[$AsyncCtx11 + 268 >> 2] = $19; //@line 21858
  HEAP32[$AsyncCtx11 + 272 >> 2] = $9; //@line 21860
  sp = STACKTOP; //@line 21861
  STACKTOP = sp; //@line 21862
  return 0; //@line 21862
 } else if ((label | 0) == 42) {
  HEAP32[$AsyncCtx15 >> 2] = 594; //@line 21865
  HEAP32[$AsyncCtx15 + 4 >> 2] = $30; //@line 21867
  HEAP32[$AsyncCtx15 + 8 >> 2] = $39; //@line 21869
  HEAP32[$AsyncCtx15 + 12 >> 2] = $18; //@line 21871
  HEAP32[$AsyncCtx15 + 16 >> 2] = $9; //@line 21873
  HEAP32[$AsyncCtx15 + 20 >> 2] = $0; //@line 21875
  HEAP32[$AsyncCtx15 + 24 >> 2] = $8; //@line 21877
  HEAP32[$AsyncCtx15 + 28 >> 2] = $31; //@line 21879
  HEAP32[$AsyncCtx15 + 32 >> 2] = $8; //@line 21881
  HEAP8[$AsyncCtx15 + 36 >> 0] = $553; //@line 21883
  HEAP32[$AsyncCtx15 + 40 >> 2] = $29; //@line 21885
  HEAP32[$AsyncCtx15 + 44 >> 2] = $40; //@line 21887
  HEAP32[$AsyncCtx15 + 48 >> 2] = $8; //@line 21889
  HEAP32[$AsyncCtx15 + 52 >> 2] = $8; //@line 21891
  HEAP32[$AsyncCtx15 + 56 >> 2] = $8; //@line 21893
  HEAP32[$AsyncCtx15 + 60 >> 2] = $7; //@line 21895
  HEAP32[$AsyncCtx15 + 64 >> 2] = $28; //@line 21897
  HEAP32[$AsyncCtx15 + 68 >> 2] = $17; //@line 21899
  HEAP32[$AsyncCtx15 + 72 >> 2] = $32; //@line 21901
  HEAP32[$AsyncCtx15 + 76 >> 2] = $41; //@line 21903
  HEAP32[$AsyncCtx15 + 80 >> 2] = $7; //@line 21905
  HEAP32[$AsyncCtx15 + 84 >> 2] = $12; //@line 21907
  HEAP32[$AsyncCtx15 + 88 >> 2] = $16; //@line 21909
  HEAP32[$AsyncCtx15 + 92 >> 2] = $33; //@line 21911
  HEAP32[$AsyncCtx15 + 96 >> 2] = $27; //@line 21913
  HEAP32[$AsyncCtx15 + 100 >> 2] = $42; //@line 21915
  HEAP32[$AsyncCtx15 + 104 >> 2] = $8; //@line 21917
  HEAP32[$AsyncCtx15 + 108 >> 2] = $7; //@line 21919
  HEAP32[$AsyncCtx15 + 112 >> 2] = $8; //@line 21921
  HEAP32[$AsyncCtx15 + 116 >> 2] = $15; //@line 21923
  HEAP32[$AsyncCtx15 + 120 >> 2] = $8; //@line 21925
  HEAP32[$AsyncCtx15 + 124 >> 2] = $26; //@line 21927
  HEAP32[$AsyncCtx15 + 128 >> 2] = $43; //@line 21929
  HEAP32[$AsyncCtx15 + 132 >> 2] = $34; //@line 21931
  HEAP32[$AsyncCtx15 + 136 >> 2] = $10; //@line 21933
  HEAP32[$AsyncCtx15 + 140 >> 2] = $25; //@line 21935
  HEAP32[$AsyncCtx15 + 144 >> 2] = $11; //@line 21937
  HEAP32[$AsyncCtx15 + 148 >> 2] = $44; //@line 21939
  HEAP32[$AsyncCtx15 + 152 >> 2] = $6; //@line 21941
  HEAP32[$AsyncCtx15 + 156 >> 2] = $35; //@line 21943
  HEAP32[$AsyncCtx15 + 160 >> 2] = $13; //@line 21945
  HEAP32[$AsyncCtx15 + 164 >> 2] = $7; //@line 21947
  HEAP32[$AsyncCtx15 + 168 >> 2] = $8; //@line 21949
  HEAP32[$AsyncCtx15 + 172 >> 2] = $24; //@line 21951
  HEAP32[$AsyncCtx15 + 176 >> 2] = $36; //@line 21953
  HEAP32[$AsyncCtx15 + 180 >> 2] = $45; //@line 21955
  HEAP32[$AsyncCtx15 + 184 >> 2] = $37; //@line 21957
  HEAP32[$AsyncCtx15 + 188 >> 2] = $0; //@line 21959
  HEAP32[$AsyncCtx15 + 192 >> 2] = $46; //@line 21961
  HEAP32[$AsyncCtx15 + 196 >> 2] = $23; //@line 21963
  HEAP32[$AsyncCtx15 + 200 >> 2] = $8; //@line 21965
  HEAP32[$AsyncCtx15 + 204 >> 2] = $8; //@line 21967
  HEAP32[$AsyncCtx15 + 208 >> 2] = $22; //@line 21969
  HEAP32[$AsyncCtx15 + 212 >> 2] = $9; //@line 21971
  HEAP32[$AsyncCtx15 + 216 >> 2] = $47; //@line 21973
  HEAP32[$AsyncCtx15 + 220 >> 2] = $7; //@line 21975
  HEAP32[$AsyncCtx15 + 224 >> 2] = $21; //@line 21977
  HEAP8[$AsyncCtx15 + 228 >> 0] = $4; //@line 21979
  HEAP32[$AsyncCtx15 + 232 >> 2] = $38; //@line 21981
  HEAP8[$AsyncCtx15 + 236 >> 0] = $3; //@line 21983
  HEAP32[$AsyncCtx15 + 240 >> 2] = $7; //@line 21985
  HEAP32[$AsyncCtx15 + 244 >> 2] = $20; //@line 21987
  HEAP32[$AsyncCtx15 + 248 >> 2] = $1; //@line 21989
  HEAP8[$AsyncCtx15 + 252 >> 0] = $2; //@line 21991
  HEAP32[$AsyncCtx15 + 256 >> 2] = $8; //@line 21993
  HEAP32[$AsyncCtx15 + 260 >> 2] = $9; //@line 21995
  HEAP32[$AsyncCtx15 + 264 >> 2] = $19; //@line 21997
  HEAP32[$AsyncCtx15 + 268 >> 2] = $9; //@line 21999
  sp = STACKTOP; //@line 22000
  STACKTOP = sp; //@line 22001
  return 0; //@line 22001
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 22004
  return $$096$lcssa | 0; //@line 22004
 }
 return 0; //@line 22006
}
function __ZN12LoRaWANStack18lora_state_machineEv($0) {
 $0 = $0 | 0;
 var $$029 = 0, $$1 = 0, $1 = 0, $102 = 0, $104 = 0, $110 = 0, $111 = 0, $115 = 0, $118 = 0, $125 = 0, $126 = 0, $168 = 0, $169 = 0, $173 = 0, $175 = 0, $181 = 0, $182 = 0, $186 = 0, $189 = 0, $194 = 0, $197 = 0, $2 = 0, $215 = 0, $216 = 0, $220 = 0, $222 = 0, $229 = 0, $230 = 0, $235 = 0, $238 = 0, $250 = 0, $251 = 0, $255 = 0, $257 = 0, $265 = 0, $266 = 0, $272 = 0, $275 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $71 = 0, $92 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx100 = 0, $AsyncCtx103 = 0, $AsyncCtx106 = 0, $AsyncCtx110 = 0, $AsyncCtx114 = 0, $AsyncCtx118 = 0, $AsyncCtx12 = 0, $AsyncCtx122 = 0, $AsyncCtx126 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx94 = 0, $AsyncCtx97 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 7343
 STACKTOP = STACKTOP + 160 | 0; //@line 7344
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 7344
 $vararg_buffer9 = sp + 56 | 0; //@line 7345
 $vararg_buffer7 = sp + 48 | 0; //@line 7346
 $vararg_buffer5 = sp + 40 | 0; //@line 7347
 $vararg_buffer3 = sp + 32 | 0; //@line 7348
 $vararg_buffer1 = sp + 8 | 0; //@line 7349
 $1 = sp + 144 | 0; //@line 7351
 $2 = sp + 128 | 0; //@line 7352
 $3 = sp + 112 | 0; //@line 7353
 $4 = sp + 96 | 0; //@line 7354
 $5 = sp + 80 | 0; //@line 7355
 $6 = sp + 64 | 0; //@line 7356
 _printf(12139, sp) | 0; //@line 7357
 $7 = $0 + 1876 | 0; //@line 7358
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$7 >> 2]; //@line 7360
 _printf(12152, $vararg_buffer1) | 0; //@line 7361
 $AsyncCtx52 = _emscripten_alloc_async_context(76, sp) | 0; //@line 7362
 _putchar(10) | 0; //@line 7363
 if (___async) {
  HEAP32[$AsyncCtx52 >> 2] = 238; //@line 7366
  HEAP32[$AsyncCtx52 + 4 >> 2] = $7; //@line 7368
  HEAP32[$AsyncCtx52 + 8 >> 2] = $1; //@line 7370
  HEAP32[$AsyncCtx52 + 12 >> 2] = $0; //@line 7372
  HEAP32[$AsyncCtx52 + 16 >> 2] = $4; //@line 7374
  HEAP32[$AsyncCtx52 + 20 >> 2] = $2; //@line 7376
  HEAP32[$AsyncCtx52 + 24 >> 2] = $3; //@line 7378
  HEAP32[$AsyncCtx52 + 28 >> 2] = $1; //@line 7380
  HEAP32[$AsyncCtx52 + 32 >> 2] = $6; //@line 7382
  HEAP32[$AsyncCtx52 + 36 >> 2] = $vararg_buffer7; //@line 7384
  HEAP32[$AsyncCtx52 + 40 >> 2] = $vararg_buffer7; //@line 7386
  HEAP32[$AsyncCtx52 + 44 >> 2] = $vararg_buffer9; //@line 7388
  HEAP32[$AsyncCtx52 + 48 >> 2] = $vararg_buffer9; //@line 7390
  HEAP32[$AsyncCtx52 + 52 >> 2] = $5; //@line 7392
  HEAP32[$AsyncCtx52 + 56 >> 2] = $vararg_buffer3; //@line 7394
  HEAP32[$AsyncCtx52 + 60 >> 2] = $vararg_buffer3; //@line 7396
  HEAP32[$AsyncCtx52 + 64 >> 2] = $vararg_buffer5; //@line 7398
  HEAP32[$AsyncCtx52 + 68 >> 2] = $vararg_buffer5; //@line 7400
  HEAP32[$AsyncCtx52 + 72 >> 2] = $vararg_buffer1; //@line 7402
  sp = STACKTOP; //@line 7403
  STACKTOP = sp; //@line 7404
  return 0; //@line 7404
 }
 _emscripten_free_async_context($AsyncCtx52 | 0); //@line 7406
 switch (HEAP32[$7 >> 2] | 0) {
 case 7:
  {
   $28 = $0 + 4 | 0; //@line 7410
   $AsyncCtx87 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7411
   __ZN7LoRaMac19remove_channel_planEv($28) | 0; //@line 7412
   if (___async) {
    HEAP32[$AsyncCtx87 >> 2] = 239; //@line 7415
    HEAP32[$AsyncCtx87 + 4 >> 2] = $2; //@line 7417
    HEAP32[$AsyncCtx87 + 8 >> 2] = $1; //@line 7419
    HEAP32[$AsyncCtx87 + 12 >> 2] = $0; //@line 7421
    HEAP32[$AsyncCtx87 + 16 >> 2] = $28; //@line 7423
    HEAP32[$AsyncCtx87 + 20 >> 2] = $1; //@line 7425
    sp = STACKTOP; //@line 7426
    STACKTOP = sp; //@line 7427
    return 0; //@line 7427
   }
   _emscripten_free_async_context($AsyncCtx87 | 0); //@line 7429
   $AsyncCtx83 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7430
   __ZN7LoRaMac10disconnectEv($28); //@line 7431
   if (___async) {
    HEAP32[$AsyncCtx83 >> 2] = 240; //@line 7434
    HEAP32[$AsyncCtx83 + 4 >> 2] = $1; //@line 7436
    HEAP32[$AsyncCtx83 + 8 >> 2] = $28; //@line 7438
    HEAP32[$AsyncCtx83 + 12 >> 2] = $0; //@line 7440
    HEAP32[$AsyncCtx83 + 16 >> 2] = $1; //@line 7442
    HEAP32[$AsyncCtx83 + 20 >> 2] = $2; //@line 7444
    sp = STACKTOP; //@line 7445
    STACKTOP = sp; //@line 7446
    return 0; //@line 7446
   }
   _emscripten_free_async_context($AsyncCtx83 | 0); //@line 7448
   HEAP32[$1 >> 2] = 1; //@line 7449
   HEAP8[$1 + 4 >> 0] = 0; //@line 7451
   $AsyncCtx79 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7452
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($28, $1) | 0; //@line 7453
   if (___async) {
    HEAP32[$AsyncCtx79 >> 2] = 241; //@line 7456
    HEAP32[$AsyncCtx79 + 4 >> 2] = $0; //@line 7458
    HEAP32[$AsyncCtx79 + 8 >> 2] = $1; //@line 7460
    HEAP32[$AsyncCtx79 + 12 >> 2] = $2; //@line 7462
    sp = STACKTOP; //@line 7463
    STACKTOP = sp; //@line 7464
    return 0; //@line 7464
   }
   _emscripten_free_async_context($AsyncCtx79 | 0); //@line 7466
   HEAP8[$0 + 1964 >> 0] = 0; //@line 7469
   HEAP32[$0 + 2256 >> 2] = 0; //@line 7471
   HEAP8[$0 + 2236 >> 0] = 0; //@line 7473
   HEAP16[$0 + 2282 >> 1] = 0; //@line 7475
   HEAP16[$0 + 2260 >> 1] = 0; //@line 7477
   HEAP8[$0 + 1932 >> 0] = 0; //@line 7479
   $50 = $0 + 1892 | 0; //@line 7480
   _memset($0 + 1975 | 0, 0, 259) | 0; //@line 7481
   $51 = HEAP32[$50 >> 2] | 0; //@line 7482
   if (!$51) {
    $$1 = -1011; //@line 7485
    STACKTOP = sp; //@line 7486
    return $$1 | 0; //@line 7486
   }
   $55 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7490
   $57 = HEAP32[$51 + 4 >> 2] | 0; //@line 7492
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7493
   FUNCTION_TABLE_vii[$57 & 31]($2, $0 + 1880 | 0); //@line 7494
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 242; //@line 7497
    HEAP32[$AsyncCtx + 4 >> 2] = $50; //@line 7499
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7501
    HEAP32[$AsyncCtx + 12 >> 2] = $55; //@line 7503
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7505
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 7507
    sp = STACKTOP; //@line 7508
    STACKTOP = sp; //@line 7509
    return 0; //@line 7509
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7511
   $63 = $2 + 12 | 0; //@line 7513
   HEAP32[$63 >> 2] = HEAP32[$50 >> 2]; //@line 7514
   $AsyncCtx106 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7515
   $64 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($55, $2, 1) | 0; //@line 7516
   if (___async) {
    HEAP32[$AsyncCtx106 >> 2] = 243; //@line 7519
    HEAP32[$AsyncCtx106 + 4 >> 2] = $63; //@line 7521
    HEAP32[$AsyncCtx106 + 8 >> 2] = $2; //@line 7523
    HEAP32[$AsyncCtx106 + 12 >> 2] = $1; //@line 7525
    sp = STACKTOP; //@line 7526
    STACKTOP = sp; //@line 7527
    return 0; //@line 7527
   }
   _emscripten_free_async_context($AsyncCtx106 | 0); //@line 7529
   $68 = HEAP32[$63 >> 2] | 0; //@line 7530
   do {
    if ($68 | 0) {
     $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 7535
     $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7536
     FUNCTION_TABLE_vi[$71 & 1023]($2); //@line 7537
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 244; //@line 7540
      HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 7542
      HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 7544
      sp = STACKTOP; //@line 7545
      STACKTOP = sp; //@line 7546
      return 0; //@line 7546
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7548
      break;
     }
    }
   } while (0);
   if ($64 | 0) {
    $$1 = -1011; //@line 7555
    STACKTOP = sp; //@line 7556
    return $$1 | 0; //@line 7556
   }
   $AsyncCtx126 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7558
   _mbed_assert_internal(12851, 11935, 1141); //@line 7559
   if (___async) {
    HEAP32[$AsyncCtx126 >> 2] = 245; //@line 7562
    HEAP32[$AsyncCtx126 + 4 >> 2] = $1; //@line 7564
    sp = STACKTOP; //@line 7565
    STACKTOP = sp; //@line 7566
    return 0; //@line 7566
   }
   _emscripten_free_async_context($AsyncCtx126 | 0); //@line 7568
   $$1 = -1011; //@line 7569
   STACKTOP = sp; //@line 7570
   return $$1 | 0; //@line 7570
  }
 case 1:
  {
   $$1 = 0; //@line 7574
   STACKTOP = sp; //@line 7575
   return $$1 | 0; //@line 7575
  }
 case 2:
  {
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 7583
    STACKTOP = sp; //@line 7584
    return $$1 | 0; //@line 7584
   }
   HEAP32[$vararg_buffer1 >> 2] = 0; //@line 7586
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 7590
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 7594
   HEAP32[$vararg_buffer1 + 12 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 7598
   HEAP8[$vararg_buffer1 + 16 >> 0] = HEAP8[$0 + 1952 >> 0] | 0; //@line 7602
   $AsyncCtx91 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7604
   $92 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $vararg_buffer1) | 0; //@line 7605
   if (___async) {
    HEAP32[$AsyncCtx91 >> 2] = 246; //@line 7608
    HEAP32[$AsyncCtx91 + 4 >> 2] = $vararg_buffer1; //@line 7610
    HEAP32[$AsyncCtx91 + 8 >> 2] = $1; //@line 7612
    sp = STACKTOP; //@line 7613
    STACKTOP = sp; //@line 7614
    return 0; //@line 7614
   }
   _emscripten_free_async_context($AsyncCtx91 | 0); //@line 7616
   $$1 = ($92 | 0) == 0 ? -1016 : $92; //@line 7619
   STACKTOP = sp; //@line 7620
   return $$1 | 0; //@line 7620
  }
 case 4:
  {
   HEAP8[$0 + 1932 >> 0] = 1; //@line 7625
   $97 = $0 + 1892 | 0; //@line 7626
   $98 = HEAP32[$97 >> 2] | 0; //@line 7627
   if (!$98) {
    $$1 = 0; //@line 7630
    STACKTOP = sp; //@line 7631
    return $$1 | 0; //@line 7631
   }
   $102 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7635
   $104 = HEAP32[$98 + 4 >> 2] | 0; //@line 7637
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7638
   FUNCTION_TABLE_vii[$104 & 31]($3, $0 + 1880 | 0); //@line 7639
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 247; //@line 7642
    HEAP32[$AsyncCtx15 + 4 >> 2] = $97; //@line 7644
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 7646
    HEAP32[$AsyncCtx15 + 12 >> 2] = $102; //@line 7648
    HEAP32[$AsyncCtx15 + 16 >> 2] = $3; //@line 7650
    HEAP32[$AsyncCtx15 + 20 >> 2] = $1; //@line 7652
    sp = STACKTOP; //@line 7653
    STACKTOP = sp; //@line 7654
    return 0; //@line 7654
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7656
   $110 = $3 + 12 | 0; //@line 7658
   HEAP32[$110 >> 2] = HEAP32[$97 >> 2]; //@line 7659
   $AsyncCtx103 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7660
   $111 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($102, $3, 0) | 0; //@line 7661
   if (___async) {
    HEAP32[$AsyncCtx103 >> 2] = 248; //@line 7664
    HEAP32[$AsyncCtx103 + 4 >> 2] = $110; //@line 7666
    HEAP32[$AsyncCtx103 + 8 >> 2] = $3; //@line 7668
    HEAP32[$AsyncCtx103 + 12 >> 2] = $1; //@line 7670
    sp = STACKTOP; //@line 7671
    STACKTOP = sp; //@line 7672
    return 0; //@line 7672
   }
   _emscripten_free_async_context($AsyncCtx103 | 0); //@line 7674
   $115 = HEAP32[$110 >> 2] | 0; //@line 7675
   do {
    if ($115 | 0) {
     $118 = HEAP32[$115 + 8 >> 2] | 0; //@line 7680
     $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7681
     FUNCTION_TABLE_vi[$118 & 1023]($3); //@line 7682
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 249; //@line 7685
      HEAP32[$AsyncCtx19 + 4 >> 2] = $111; //@line 7687
      HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 7689
      sp = STACKTOP; //@line 7690
      STACKTOP = sp; //@line 7691
      return 0; //@line 7691
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7693
      break;
     }
    }
   } while (0);
   if ($111 | 0) {
    $$1 = 0; //@line 7700
    STACKTOP = sp; //@line 7701
    return $$1 | 0; //@line 7701
   }
   $AsyncCtx122 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7703
   _mbed_assert_internal(12851, 11935, 1186); //@line 7704
   if (___async) {
    HEAP32[$AsyncCtx122 >> 2] = 250; //@line 7707
    HEAP32[$AsyncCtx122 + 4 >> 2] = $1; //@line 7709
    sp = STACKTOP; //@line 7710
    STACKTOP = sp; //@line 7711
    return 0; //@line 7711
   }
   _emscripten_free_async_context($AsyncCtx122 | 0); //@line 7713
   $$1 = 0; //@line 7714
   STACKTOP = sp; //@line 7715
   return $$1 | 0; //@line 7715
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3; //@line 7719
   $125 = $1 + 4 | 0; //@line 7722
   HEAP32[$125 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 7723
   $126 = $0 + 4 | 0; //@line 7724
   $AsyncCtx76 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7725
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7726
   if (___async) {
    HEAP32[$AsyncCtx76 >> 2] = 251; //@line 7729
    HEAP32[$AsyncCtx76 + 4 >> 2] = $0; //@line 7731
    HEAP32[$AsyncCtx76 + 8 >> 2] = $4; //@line 7733
    HEAP32[$AsyncCtx76 + 12 >> 2] = $1; //@line 7735
    HEAP32[$AsyncCtx76 + 16 >> 2] = $1; //@line 7737
    HEAP32[$AsyncCtx76 + 20 >> 2] = $125; //@line 7739
    HEAP32[$AsyncCtx76 + 24 >> 2] = $126; //@line 7741
    HEAP32[$AsyncCtx76 + 28 >> 2] = $1; //@line 7743
    HEAP32[$AsyncCtx76 + 32 >> 2] = $125; //@line 7745
    sp = STACKTOP; //@line 7746
    STACKTOP = sp; //@line 7747
    return 0; //@line 7747
   }
   _emscripten_free_async_context($AsyncCtx76 | 0); //@line 7749
   HEAP32[$1 >> 2] = 4; //@line 7750
   HEAP32[$125 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 7753
   $AsyncCtx72 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7754
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7755
   if (___async) {
    HEAP32[$AsyncCtx72 >> 2] = 252; //@line 7758
    HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 7760
    HEAP32[$AsyncCtx72 + 8 >> 2] = $4; //@line 7762
    HEAP32[$AsyncCtx72 + 12 >> 2] = $1; //@line 7764
    HEAP32[$AsyncCtx72 + 16 >> 2] = $1; //@line 7766
    HEAP32[$AsyncCtx72 + 20 >> 2] = $125; //@line 7768
    HEAP32[$AsyncCtx72 + 24 >> 2] = $126; //@line 7770
    HEAP32[$AsyncCtx72 + 28 >> 2] = $1; //@line 7772
    HEAP32[$AsyncCtx72 + 32 >> 2] = $125; //@line 7774
    sp = STACKTOP; //@line 7775
    STACKTOP = sp; //@line 7776
    return 0; //@line 7776
   }
   _emscripten_free_async_context($AsyncCtx72 | 0); //@line 7778
   HEAP32[$1 >> 2] = 5; //@line 7779
   HEAP32[$125 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 7782
   $AsyncCtx68 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7783
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7784
   if (___async) {
    HEAP32[$AsyncCtx68 >> 2] = 253; //@line 7787
    HEAP32[$AsyncCtx68 + 4 >> 2] = $0; //@line 7789
    HEAP32[$AsyncCtx68 + 8 >> 2] = $4; //@line 7791
    HEAP32[$AsyncCtx68 + 12 >> 2] = $1; //@line 7793
    HEAP32[$AsyncCtx68 + 16 >> 2] = $1; //@line 7795
    HEAP32[$AsyncCtx68 + 20 >> 2] = $125; //@line 7797
    HEAP32[$AsyncCtx68 + 24 >> 2] = $126; //@line 7799
    HEAP32[$AsyncCtx68 + 28 >> 2] = $1; //@line 7801
    HEAP32[$AsyncCtx68 + 32 >> 2] = $125; //@line 7803
    sp = STACKTOP; //@line 7804
    STACKTOP = sp; //@line 7805
    return 0; //@line 7805
   }
   _emscripten_free_async_context($AsyncCtx68 | 0); //@line 7807
   HEAP32[$1 >> 2] = 6; //@line 7808
   HEAP32[$125 >> 2] = HEAP32[$0 + 1952 >> 2]; //@line 7811
   $AsyncCtx64 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7812
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7813
   if (___async) {
    HEAP32[$AsyncCtx64 >> 2] = 254; //@line 7816
    HEAP32[$AsyncCtx64 + 4 >> 2] = $1; //@line 7818
    HEAP32[$AsyncCtx64 + 8 >> 2] = $125; //@line 7820
    HEAP32[$AsyncCtx64 + 12 >> 2] = $126; //@line 7822
    HEAP32[$AsyncCtx64 + 16 >> 2] = $1; //@line 7824
    HEAP32[$AsyncCtx64 + 20 >> 2] = $0; //@line 7826
    HEAP32[$AsyncCtx64 + 24 >> 2] = $1; //@line 7828
    HEAP32[$AsyncCtx64 + 28 >> 2] = $4; //@line 7830
    sp = STACKTOP; //@line 7831
    STACKTOP = sp; //@line 7832
    return 0; //@line 7832
   }
   _emscripten_free_async_context($AsyncCtx64 | 0); //@line 7834
   HEAP32[$1 >> 2] = 1; //@line 7835
   HEAP8[$125 >> 0] = 1; //@line 7836
   $AsyncCtx60 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7837
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7838
   if (___async) {
    HEAP32[$AsyncCtx60 >> 2] = 255; //@line 7841
    HEAP32[$AsyncCtx60 + 4 >> 2] = $0; //@line 7843
    HEAP32[$AsyncCtx60 + 8 >> 2] = $1; //@line 7845
    HEAP32[$AsyncCtx60 + 12 >> 2] = $4; //@line 7847
    sp = STACKTOP; //@line 7848
    STACKTOP = sp; //@line 7849
    return 0; //@line 7849
   }
   _emscripten_free_async_context($AsyncCtx60 | 0); //@line 7851
   HEAP8[$0 + 1932 >> 0] = 1; //@line 7853
   $168 = $0 + 1892 | 0; //@line 7854
   $169 = HEAP32[$168 >> 2] | 0; //@line 7855
   if (!$169) {
    $$1 = 0; //@line 7858
    STACKTOP = sp; //@line 7859
    return $$1 | 0; //@line 7859
   }
   $173 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7863
   $175 = HEAP32[$169 + 4 >> 2] | 0; //@line 7865
   $AsyncCtx22 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7866
   FUNCTION_TABLE_vii[$175 & 31]($4, $0 + 1880 | 0); //@line 7867
   if (___async) {
    HEAP32[$AsyncCtx22 >> 2] = 256; //@line 7870
    HEAP32[$AsyncCtx22 + 4 >> 2] = $168; //@line 7872
    HEAP32[$AsyncCtx22 + 8 >> 2] = $4; //@line 7874
    HEAP32[$AsyncCtx22 + 12 >> 2] = $173; //@line 7876
    HEAP32[$AsyncCtx22 + 16 >> 2] = $4; //@line 7878
    HEAP32[$AsyncCtx22 + 20 >> 2] = $1; //@line 7880
    sp = STACKTOP; //@line 7881
    STACKTOP = sp; //@line 7882
    return 0; //@line 7882
   }
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7884
   $181 = $4 + 12 | 0; //@line 7886
   HEAP32[$181 >> 2] = HEAP32[$168 >> 2]; //@line 7887
   $AsyncCtx100 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7888
   $182 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($173, $4, 0) | 0; //@line 7889
   if (___async) {
    HEAP32[$AsyncCtx100 >> 2] = 257; //@line 7892
    HEAP32[$AsyncCtx100 + 4 >> 2] = $181; //@line 7894
    HEAP32[$AsyncCtx100 + 8 >> 2] = $4; //@line 7896
    HEAP32[$AsyncCtx100 + 12 >> 2] = $1; //@line 7898
    sp = STACKTOP; //@line 7899
    STACKTOP = sp; //@line 7900
    return 0; //@line 7900
   }
   _emscripten_free_async_context($AsyncCtx100 | 0); //@line 7902
   $186 = HEAP32[$181 >> 2] | 0; //@line 7903
   do {
    if ($186 | 0) {
     $189 = HEAP32[$186 + 8 >> 2] | 0; //@line 7908
     $AsyncCtx26 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7909
     FUNCTION_TABLE_vi[$189 & 1023]($4); //@line 7910
     if (___async) {
      HEAP32[$AsyncCtx26 >> 2] = 258; //@line 7913
      HEAP32[$AsyncCtx26 + 4 >> 2] = $182; //@line 7915
      HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 7917
      sp = STACKTOP; //@line 7918
      STACKTOP = sp; //@line 7919
      return 0; //@line 7919
     } else {
      _emscripten_free_async_context($AsyncCtx26 | 0); //@line 7921
      break;
     }
    }
   } while (0);
   if ($182 | 0) {
    $$1 = 0; //@line 7928
    STACKTOP = sp; //@line 7929
    return $$1 | 0; //@line 7929
   }
   $AsyncCtx118 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7931
   _mbed_assert_internal(12851, 11935, 1223); //@line 7932
   if (___async) {
    HEAP32[$AsyncCtx118 >> 2] = 259; //@line 7935
    HEAP32[$AsyncCtx118 + 4 >> 2] = $1; //@line 7937
    sp = STACKTOP; //@line 7938
    STACKTOP = sp; //@line 7939
    return 0; //@line 7939
   }
   _emscripten_free_async_context($AsyncCtx118 | 0); //@line 7941
   $$1 = 0; //@line 7942
   STACKTOP = sp; //@line 7943
   return $$1 | 0; //@line 7943
  }
 case 5:
  {
   $194 = $0 + 1964 | 0; //@line 7947
   L111 : do {
    if (!(HEAP8[$194 >> 0] | 0)) {
     HEAP8[$194 >> 0] = 1; //@line 7952
     $AsyncCtx56 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7953
     $197 = __ZN12LoRaWANStack17send_frame_to_macEv($0) | 0; //@line 7954
     if (___async) {
      HEAP32[$AsyncCtx56 >> 2] = 260; //@line 7957
      HEAP32[$AsyncCtx56 + 4 >> 2] = $5; //@line 7959
      HEAP32[$AsyncCtx56 + 8 >> 2] = $7; //@line 7961
      HEAP32[$AsyncCtx56 + 12 >> 2] = $1; //@line 7963
      HEAP32[$AsyncCtx56 + 16 >> 2] = $0; //@line 7965
      HEAP32[$AsyncCtx56 + 20 >> 2] = $6; //@line 7967
      HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer7; //@line 7969
      HEAP32[$AsyncCtx56 + 28 >> 2] = $vararg_buffer7; //@line 7971
      HEAP32[$AsyncCtx56 + 32 >> 2] = $vararg_buffer9; //@line 7973
      HEAP32[$AsyncCtx56 + 36 >> 2] = $vararg_buffer9; //@line 7975
      HEAP32[$AsyncCtx56 + 40 >> 2] = $vararg_buffer3; //@line 7977
      HEAP32[$AsyncCtx56 + 44 >> 2] = $vararg_buffer3; //@line 7979
      HEAP32[$AsyncCtx56 + 48 >> 2] = $vararg_buffer5; //@line 7981
      HEAP32[$AsyncCtx56 + 52 >> 2] = $vararg_buffer5; //@line 7983
      sp = STACKTOP; //@line 7984
      STACKTOP = sp; //@line 7985
      return 0; //@line 7985
     }
     _emscripten_free_async_context($AsyncCtx56 | 0); //@line 7987
     switch ($197 | 0) {
     case 0:
      {
       $$029 = 0; //@line 7990
       break L111;
       break;
      }
     case -1014:
      {
       _printf(11887, $vararg_buffer3) | 0; //@line 7995
       _printf(12174, $vararg_buffer5) | 0; //@line 7996
       $AsyncCtx48 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7997
       _putchar(10) | 0; //@line 7998
       if (___async) {
        HEAP32[$AsyncCtx48 >> 2] = 261; //@line 8001
        HEAP32[$AsyncCtx48 + 4 >> 2] = $0; //@line 8003
        HEAP32[$AsyncCtx48 + 8 >> 2] = $7; //@line 8005
        HEAP32[$AsyncCtx48 + 12 >> 2] = $5; //@line 8007
        HEAP32[$AsyncCtx48 + 16 >> 2] = $1; //@line 8009
        sp = STACKTOP; //@line 8010
        STACKTOP = sp; //@line 8011
        return 0; //@line 8011
       }
       _emscripten_free_async_context($AsyncCtx48 | 0); //@line 8013
       $215 = $0 + 1892 | 0; //@line 8014
       $216 = HEAP32[$215 >> 2] | 0; //@line 8015
       if (!$216) {
        $$029 = -1014; //@line 8018
        break L111;
       }
       $220 = HEAP32[$0 + 2288 >> 2] | 0; //@line 8023
       $222 = HEAP32[$216 + 4 >> 2] | 0; //@line 8025
       $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8026
       FUNCTION_TABLE_vii[$222 & 31]($5, $0 + 1880 | 0); //@line 8027
       if (___async) {
        HEAP32[$AsyncCtx29 >> 2] = 262; //@line 8030
        HEAP32[$AsyncCtx29 + 4 >> 2] = $215; //@line 8032
        HEAP32[$AsyncCtx29 + 8 >> 2] = $5; //@line 8034
        HEAP32[$AsyncCtx29 + 12 >> 2] = $220; //@line 8036
        HEAP32[$AsyncCtx29 + 16 >> 2] = $5; //@line 8038
        HEAP32[$AsyncCtx29 + 20 >> 2] = $7; //@line 8040
        HEAP32[$AsyncCtx29 + 24 >> 2] = $1; //@line 8042
        sp = STACKTOP; //@line 8043
        STACKTOP = sp; //@line 8044
        return 0; //@line 8044
       }
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 8046
       $229 = $5 + 12 | 0; //@line 8048
       HEAP32[$229 >> 2] = HEAP32[$215 >> 2]; //@line 8049
       $AsyncCtx97 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8050
       $230 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($220, $5, 5) | 0; //@line 8051
       if (___async) {
        HEAP32[$AsyncCtx97 >> 2] = 263; //@line 8054
        HEAP32[$AsyncCtx97 + 4 >> 2] = $229; //@line 8056
        HEAP32[$AsyncCtx97 + 8 >> 2] = $5; //@line 8058
        HEAP32[$AsyncCtx97 + 12 >> 2] = $7; //@line 8060
        HEAP32[$AsyncCtx97 + 16 >> 2] = $1; //@line 8062
        sp = STACKTOP; //@line 8063
        STACKTOP = sp; //@line 8064
        return 0; //@line 8064
       }
       _emscripten_free_async_context($AsyncCtx97 | 0); //@line 8066
       $235 = HEAP32[$229 >> 2] | 0; //@line 8067
       do {
        if ($235 | 0) {
         $238 = HEAP32[$235 + 8 >> 2] | 0; //@line 8072
         $AsyncCtx33 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8073
         FUNCTION_TABLE_vi[$238 & 1023]($5); //@line 8074
         if (___async) {
          HEAP32[$AsyncCtx33 >> 2] = 264; //@line 8077
          HEAP32[$AsyncCtx33 + 4 >> 2] = $230; //@line 8079
          HEAP32[$AsyncCtx33 + 8 >> 2] = $7; //@line 8081
          HEAP32[$AsyncCtx33 + 12 >> 2] = $1; //@line 8083
          sp = STACKTOP; //@line 8084
          STACKTOP = sp; //@line 8085
          return 0; //@line 8085
         } else {
          _emscripten_free_async_context($AsyncCtx33 | 0); //@line 8087
          break;
         }
        }
       } while (0);
       if ($230 | 0) {
        $$029 = -1014; //@line 8094
        break L111;
       }
       $AsyncCtx114 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8097
       _mbed_assert_internal(12851, 11935, 1243); //@line 8098
       if (___async) {
        HEAP32[$AsyncCtx114 >> 2] = 265; //@line 8101
        HEAP32[$AsyncCtx114 + 4 >> 2] = $7; //@line 8103
        HEAP32[$AsyncCtx114 + 8 >> 2] = $1; //@line 8105
        sp = STACKTOP; //@line 8106
        STACKTOP = sp; //@line 8107
        return 0; //@line 8107
       } else {
        _emscripten_free_async_context($AsyncCtx114 | 0); //@line 8109
        $$029 = -1014; //@line 8110
        break L111;
       }
       break;
      }
     default:
      {
       _printf(11887, $vararg_buffer7) | 0; //@line 8116
       _printf(12209, $vararg_buffer9) | 0; //@line 8117
       $AsyncCtx44 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8118
       _putchar(10) | 0; //@line 8119
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 266; //@line 8122
        HEAP32[$AsyncCtx44 + 4 >> 2] = $0; //@line 8124
        HEAP32[$AsyncCtx44 + 8 >> 2] = $197; //@line 8126
        HEAP32[$AsyncCtx44 + 12 >> 2] = $7; //@line 8128
        HEAP32[$AsyncCtx44 + 16 >> 2] = $6; //@line 8130
        HEAP32[$AsyncCtx44 + 20 >> 2] = $1; //@line 8132
        sp = STACKTOP; //@line 8133
        STACKTOP = sp; //@line 8134
        return 0; //@line 8134
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 8136
       $250 = $0 + 1892 | 0; //@line 8137
       $251 = HEAP32[$250 >> 2] | 0; //@line 8138
       if (!$251) {
        $$029 = $197; //@line 8141
        break L111;
       }
       $255 = HEAP32[$0 + 2288 >> 2] | 0; //@line 8146
       $257 = HEAP32[$251 + 4 >> 2] | 0; //@line 8148
       $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8149
       FUNCTION_TABLE_vii[$257 & 31]($6, $0 + 1880 | 0); //@line 8150
       if (___async) {
        HEAP32[$AsyncCtx36 >> 2] = 267; //@line 8153
        HEAP32[$AsyncCtx36 + 4 >> 2] = $250; //@line 8155
        HEAP32[$AsyncCtx36 + 8 >> 2] = $6; //@line 8157
        HEAP32[$AsyncCtx36 + 12 >> 2] = $255; //@line 8159
        HEAP32[$AsyncCtx36 + 16 >> 2] = $6; //@line 8161
        HEAP32[$AsyncCtx36 + 20 >> 2] = $197; //@line 8163
        HEAP32[$AsyncCtx36 + 24 >> 2] = $7; //@line 8165
        HEAP32[$AsyncCtx36 + 28 >> 2] = $1; //@line 8167
        sp = STACKTOP; //@line 8168
        STACKTOP = sp; //@line 8169
        return 0; //@line 8169
       }
       _emscripten_free_async_context($AsyncCtx36 | 0); //@line 8171
       $265 = $6 + 12 | 0; //@line 8173
       HEAP32[$265 >> 2] = HEAP32[$250 >> 2]; //@line 8174
       $AsyncCtx94 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8175
       $266 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($255, $6, 6) | 0; //@line 8176
       if (___async) {
        HEAP32[$AsyncCtx94 >> 2] = 268; //@line 8179
        HEAP32[$AsyncCtx94 + 4 >> 2] = $265; //@line 8181
        HEAP32[$AsyncCtx94 + 8 >> 2] = $6; //@line 8183
        HEAP32[$AsyncCtx94 + 12 >> 2] = $197; //@line 8185
        HEAP32[$AsyncCtx94 + 16 >> 2] = $7; //@line 8187
        HEAP32[$AsyncCtx94 + 20 >> 2] = $1; //@line 8189
        sp = STACKTOP; //@line 8190
        STACKTOP = sp; //@line 8191
        return 0; //@line 8191
       }
       _emscripten_free_async_context($AsyncCtx94 | 0); //@line 8193
       $272 = HEAP32[$265 >> 2] | 0; //@line 8194
       do {
        if ($272 | 0) {
         $275 = HEAP32[$272 + 8 >> 2] | 0; //@line 8199
         $AsyncCtx40 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8200
         FUNCTION_TABLE_vi[$275 & 1023]($6); //@line 8201
         if (___async) {
          HEAP32[$AsyncCtx40 >> 2] = 269; //@line 8204
          HEAP32[$AsyncCtx40 + 4 >> 2] = $266; //@line 8206
          HEAP32[$AsyncCtx40 + 8 >> 2] = $197; //@line 8208
          HEAP32[$AsyncCtx40 + 12 >> 2] = $7; //@line 8210
          HEAP32[$AsyncCtx40 + 16 >> 2] = $1; //@line 8212
          sp = STACKTOP; //@line 8213
          STACKTOP = sp; //@line 8214
          return 0; //@line 8214
         } else {
          _emscripten_free_async_context($AsyncCtx40 | 0); //@line 8216
          break;
         }
        }
       } while (0);
       if ($266 | 0) {
        $$029 = $197; //@line 8223
        break L111;
       }
       $AsyncCtx110 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8226
       _mbed_assert_internal(12851, 11935, 1251); //@line 8227
       if (___async) {
        HEAP32[$AsyncCtx110 >> 2] = 270; //@line 8230
        HEAP32[$AsyncCtx110 + 4 >> 2] = $197; //@line 8232
        HEAP32[$AsyncCtx110 + 8 >> 2] = $7; //@line 8234
        HEAP32[$AsyncCtx110 + 12 >> 2] = $1; //@line 8236
        sp = STACKTOP; //@line 8237
        STACKTOP = sp; //@line 8238
        return 0; //@line 8238
       } else {
        _emscripten_free_async_context($AsyncCtx110 | 0); //@line 8240
        $$029 = $197; //@line 8241
        break L111;
       }
      }
     }
    } else {
     $$029 = 0; //@line 8247
    }
   } while (0);
   HEAP32[$7 >> 2] = 6; //@line 8250
   $$1 = $$029; //@line 8251
   STACKTOP = sp; //@line 8252
   return $$1 | 0; //@line 8252
  }
 case 6:
  {
   $$1 = -1018; //@line 8256
   STACKTOP = sp; //@line 8257
   return $$1 | 0; //@line 8257
  }
 case 0:
  {
   $$1 = -1011; //@line 8261
   STACKTOP = sp; //@line 8262
   return $$1 | 0; //@line 8262
  }
 default:
  {
   $$1 = -1002; //@line 8266
   STACKTOP = sp; //@line 8267
   return $$1 | 0; //@line 8267
  }
 }
 return 0; //@line 8270
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_60($0) {
 $0 = $0 | 0;
 var $$0174 = 0, $$0174209 = 0, $$0174210 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$sink207 = 0, $10 = 0, $105 = 0, $106 = 0, $12 = 0, $124 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $144 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $272 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $97 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx6 = 0, $sext = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 25141
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25143
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25145
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 25147
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25149
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25151
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25153
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25155
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25157
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25159
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25161
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25163
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25165
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25167
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25169
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25171
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25173
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25175
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 25177
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25179
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25181
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25183
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 25185
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 25187
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 25189
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 25191
 $51 = HEAP8[$24 >> 0] | 0; //@line 25192
 $trunc = ($51 & 255) >>> 5; //@line 25193
 switch ($trunc & 7) {
 case 1:
  {
   $52 = $2 + 372 | 0; //@line 25197
   if (HEAP8[$52 >> 0] | 0) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 1; //@line 25203
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 25204
    __ZN7LoRaMac21prepare_rx_done_abortEv($2); //@line 25205
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 389; //@line 25208
     $57 = $ReallocAsyncCtx13 + 4 | 0; //@line 25209
     HEAP32[$57 >> 2] = $18; //@line 25210
     $58 = $ReallocAsyncCtx13 + 8 | 0; //@line 25211
     HEAP32[$58 >> 2] = $20; //@line 25212
     sp = STACKTOP; //@line 25213
     return;
    }
    ___async_unwind = 0; //@line 25216
    HEAP32[$ReallocAsyncCtx13 >> 2] = 389; //@line 25217
    $57 = $ReallocAsyncCtx13 + 4 | 0; //@line 25218
    HEAP32[$57 >> 2] = $18; //@line 25219
    $58 = $ReallocAsyncCtx13 + 8 | 0; //@line 25220
    HEAP32[$58 >> 2] = $20; //@line 25221
    sp = STACKTOP; //@line 25222
    return;
   }
   $62 = $2 + 908 | 0; //@line 25228
   $64 = $2 + 638 | 0; //@line 25230
   $65 = $2 + 639 | 0; //@line 25231
   if (__Z18decrypt_join_framePKhtS0_Ph($24 + 1 | 0, $30 + 65535 & 65535, HEAP32[$62 >> 2] | 0, $65) | 0) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 13; //@line 25237
    return;
   }
   HEAP8[$64 >> 0] = $51; //@line 25240
   $70 = $30 + -4 | 0; //@line 25241
   $72 = HEAP32[$62 >> 2] | 0; //@line 25243
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(64) | 0; //@line 25244
   $73 = __Z22compute_join_frame_micPKhtS0_Pj($64, $70 & 65535, $72, $32) | 0; //@line 25245
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 390; //@line 25248
    $74 = $ReallocAsyncCtx16 + 4 | 0; //@line 25249
    HEAP32[$74 >> 2] = $2; //@line 25250
    $75 = $ReallocAsyncCtx16 + 8 | 0; //@line 25251
    HEAP32[$75 >> 2] = $70; //@line 25252
    $76 = $ReallocAsyncCtx16 + 12 | 0; //@line 25253
    HEAP32[$76 >> 2] = $30; //@line 25254
    $77 = $ReallocAsyncCtx16 + 16 | 0; //@line 25255
    HEAP32[$77 >> 2] = $32; //@line 25256
    $78 = $ReallocAsyncCtx16 + 20 | 0; //@line 25257
    HEAP32[$78 >> 2] = $8; //@line 25258
    $79 = $ReallocAsyncCtx16 + 24 | 0; //@line 25259
    HEAP32[$79 >> 2] = $18; //@line 25260
    $80 = $ReallocAsyncCtx16 + 28 | 0; //@line 25261
    HEAP32[$80 >> 2] = $20; //@line 25262
    $81 = $ReallocAsyncCtx16 + 32 | 0; //@line 25263
    HEAP32[$81 >> 2] = $62; //@line 25264
    $82 = $ReallocAsyncCtx16 + 36 | 0; //@line 25265
    HEAP32[$82 >> 2] = $65; //@line 25266
    $83 = $ReallocAsyncCtx16 + 40 | 0; //@line 25267
    HEAP32[$83 >> 2] = $26; //@line 25268
    $84 = $ReallocAsyncCtx16 + 44 | 0; //@line 25269
    HEAP32[$84 >> 2] = $28; //@line 25270
    $85 = $ReallocAsyncCtx16 + 48 | 0; //@line 25271
    HEAP32[$85 >> 2] = $22; //@line 25272
    $86 = $ReallocAsyncCtx16 + 52 | 0; //@line 25273
    HEAP32[$86 >> 2] = $34; //@line 25274
    $87 = $ReallocAsyncCtx16 + 56 | 0; //@line 25275
    HEAP32[$87 >> 2] = $4; //@line 25276
    $88 = $ReallocAsyncCtx16 + 60 | 0; //@line 25277
    HEAP32[$88 >> 2] = $52; //@line 25278
    sp = STACKTOP; //@line 25279
    return;
   }
   HEAP32[___async_retval >> 2] = $73; //@line 25283
   ___async_unwind = 0; //@line 25284
   HEAP32[$ReallocAsyncCtx16 >> 2] = 390; //@line 25285
   $74 = $ReallocAsyncCtx16 + 4 | 0; //@line 25286
   HEAP32[$74 >> 2] = $2; //@line 25287
   $75 = $ReallocAsyncCtx16 + 8 | 0; //@line 25288
   HEAP32[$75 >> 2] = $70; //@line 25289
   $76 = $ReallocAsyncCtx16 + 12 | 0; //@line 25290
   HEAP32[$76 >> 2] = $30; //@line 25291
   $77 = $ReallocAsyncCtx16 + 16 | 0; //@line 25292
   HEAP32[$77 >> 2] = $32; //@line 25293
   $78 = $ReallocAsyncCtx16 + 20 | 0; //@line 25294
   HEAP32[$78 >> 2] = $8; //@line 25295
   $79 = $ReallocAsyncCtx16 + 24 | 0; //@line 25296
   HEAP32[$79 >> 2] = $18; //@line 25297
   $80 = $ReallocAsyncCtx16 + 28 | 0; //@line 25298
   HEAP32[$80 >> 2] = $20; //@line 25299
   $81 = $ReallocAsyncCtx16 + 32 | 0; //@line 25300
   HEAP32[$81 >> 2] = $62; //@line 25301
   $82 = $ReallocAsyncCtx16 + 36 | 0; //@line 25302
   HEAP32[$82 >> 2] = $65; //@line 25303
   $83 = $ReallocAsyncCtx16 + 40 | 0; //@line 25304
   HEAP32[$83 >> 2] = $26; //@line 25305
   $84 = $ReallocAsyncCtx16 + 44 | 0; //@line 25306
   HEAP32[$84 >> 2] = $28; //@line 25307
   $85 = $ReallocAsyncCtx16 + 48 | 0; //@line 25308
   HEAP32[$85 >> 2] = $22; //@line 25309
   $86 = $ReallocAsyncCtx16 + 52 | 0; //@line 25310
   HEAP32[$86 >> 2] = $34; //@line 25311
   $87 = $ReallocAsyncCtx16 + 56 | 0; //@line 25312
   HEAP32[$87 >> 2] = $4; //@line 25313
   $88 = $ReallocAsyncCtx16 + 60 | 0; //@line 25314
   HEAP32[$88 >> 2] = $52; //@line 25315
   sp = STACKTOP; //@line 25316
   return;
  }
 case 3:
 case 5:
  {
   $90 = HEAP32[$4 >> 2] | 0; //@line 25321
   $97 = __ZN7LoRaPHY15get_max_payloadEhb($90, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 10 >> 0] | 0, (HEAP8[$2 + 369 >> 0] | 0) != 0) | 0; //@line 25328
   $sext = ($30 << 16) + -851968 | 0; //@line 25330
   if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($97 & 255 | 0)) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 1; //@line 25339
    $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 25340
    __ZN7LoRaMac21prepare_rx_done_abortEv($2); //@line 25341
    if (___async) {
     HEAP32[$ReallocAsyncCtx12 >> 2] = 392; //@line 25344
     $105 = $ReallocAsyncCtx12 + 4 | 0; //@line 25345
     HEAP32[$105 >> 2] = $18; //@line 25346
     $106 = $ReallocAsyncCtx12 + 8 | 0; //@line 25347
     HEAP32[$106 >> 2] = $20; //@line 25348
     sp = STACKTOP; //@line 25349
     return;
    }
    ___async_unwind = 0; //@line 25352
    HEAP32[$ReallocAsyncCtx12 >> 2] = 392; //@line 25353
    $105 = $ReallocAsyncCtx12 + 4 | 0; //@line 25354
    HEAP32[$105 >> 2] = $18; //@line 25355
    $106 = $ReallocAsyncCtx12 + 8 | 0; //@line 25356
    HEAP32[$106 >> 2] = $20; //@line 25357
    sp = STACKTOP; //@line 25358
    return;
   }
   $124 = HEAPU8[$24 + 2 >> 0] << 8 | HEAPU8[$24 + 1 >> 0] | HEAPU8[$24 + 3 >> 0] << 16 | HEAPU8[$24 + 4 >> 0] << 24; //@line 25378
   L32 : do {
    if (($124 | 0) == (HEAP32[$2 + 952 >> 2] | 0)) {
     $$1169 = 0; //@line 25385
     $$1171 = $28; //@line 25385
     $$1173 = $26; //@line 25385
     $$1175 = 0; //@line 25385
     $$sink207 = $2 + 960 | 0; //@line 25385
    } else {
     $$0174209 = HEAP32[$2 + 1208 >> 2] | 0; //@line 25388
     L35 : do {
      if ($$0174209 | 0) {
       $$0174210 = $$0174209; //@line 25392
       while (1) {
        if (($124 | 0) == (HEAP32[$$0174210 >> 2] | 0)) {
         break;
        }
        $$0174 = HEAP32[$$0174210 + 40 >> 2] | 0; //@line 25400
        if (!$$0174) {
         break L35;
        } else {
         $$0174210 = $$0174; //@line 25405
        }
       }
       $$1169 = 1; //@line 25411
       $$1171 = $$0174210 + 20 | 0; //@line 25411
       $$1173 = $$0174210 + 4 | 0; //@line 25411
       $$1175 = $$0174210; //@line 25411
       $$sink207 = $$0174210 + 36 | 0; //@line 25411
       break L32;
      }
     } while (0);
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 11; //@line 25417
     $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 25418
     __ZN7LoRaMac21prepare_rx_done_abortEv($2); //@line 25419
     if (___async) {
      HEAP32[$ReallocAsyncCtx11 >> 2] = 393; //@line 25422
      $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 25423
      HEAP32[$139 >> 2] = $18; //@line 25424
      $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 25425
      HEAP32[$140 >> 2] = $20; //@line 25426
      sp = STACKTOP; //@line 25427
      return;
     }
     ___async_unwind = 0; //@line 25430
     HEAP32[$ReallocAsyncCtx11 >> 2] = 393; //@line 25431
     $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 25432
     HEAP32[$139 >> 2] = $18; //@line 25433
     $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 25434
     HEAP32[$140 >> 2] = $20; //@line 25435
     sp = STACKTOP; //@line 25436
     return;
    }
   } while (0);
   $142 = HEAP32[$$sink207 >> 2] | 0; //@line 25440
   $144 = HEAP8[$24 + 5 >> 0] | 0; //@line 25442
   $153 = $144 & 15; //@line 25451
   $154 = $153 & 255; //@line 25452
   $155 = $154 + 8 | 0; //@line 25453
   $156 = $155 & 255; //@line 25454
   $157 = $30 + -4 | 0; //@line 25455
   $178 = HEAPU8[$24 + ($30 + -3) >> 0] << 8 | HEAPU8[$24 + $157 >> 0] | HEAPU8[$24 + ($30 + -2) >> 0] << 16 | HEAPU8[$24 + ($30 + -1) >> 0] << 24; //@line 25476
   $179 = (HEAPU8[$24 + 7 >> 0] << 8 | HEAPU8[$24 + 6 >> 0]) - $142 | 0; //@line 25477
   $180 = $179 & 65535; //@line 25478
   if ($180 >>> 0 < 32768) {
    $182 = $180 + $142 | 0; //@line 25481
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(148) | 0; //@line 25483
    __Z11compute_micPKhtS0_jhjPj($24, $157 & 65535, $$1173, $124, 1, $182, $32) | 0; //@line 25484
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 394; //@line 25487
     $184 = $ReallocAsyncCtx15 + 4 | 0; //@line 25488
     HEAP32[$184 >> 2] = $$1175; //@line 25489
     $185 = $ReallocAsyncCtx15 + 8 | 0; //@line 25490
     HEAP32[$185 >> 2] = $157; //@line 25491
     $186 = $ReallocAsyncCtx15 + 12 | 0; //@line 25492
     HEAP32[$186 >> 2] = $16; //@line 25493
     $187 = $ReallocAsyncCtx15 + 16 | 0; //@line 25494
     HEAP32[$187 >> 2] = $4; //@line 25495
     $188 = $ReallocAsyncCtx15 + 20 | 0; //@line 25496
     HEAP32[$188 >> 2] = $12; //@line 25497
     $189 = $ReallocAsyncCtx15 + 24 | 0; //@line 25498
     HEAP32[$189 >> 2] = $18; //@line 25499
     $190 = $ReallocAsyncCtx15 + 28 | 0; //@line 25500
     HEAP8[$190 >> 0] = $144; //@line 25501
     $191 = $ReallocAsyncCtx15 + 32 | 0; //@line 25502
     HEAP32[$191 >> 2] = $124; //@line 25503
     $192 = $ReallocAsyncCtx15 + 36 | 0; //@line 25504
     HEAP32[$192 >> 2] = $14; //@line 25505
     $193 = $ReallocAsyncCtx15 + 40 | 0; //@line 25506
     HEAP8[$193 >> 0] = $156; //@line 25507
     $194 = $ReallocAsyncCtx15 + 44 | 0; //@line 25508
     HEAP32[$194 >> 2] = $8; //@line 25509
     $195 = $ReallocAsyncCtx15 + 48 | 0; //@line 25510
     HEAP32[$195 >> 2] = $155; //@line 25511
     $196 = $ReallocAsyncCtx15 + 52 | 0; //@line 25512
     HEAP32[$196 >> 2] = $36; //@line 25513
     $197 = $ReallocAsyncCtx15 + 56 | 0; //@line 25514
     HEAP8[$197 >> 0] = $trunc; //@line 25515
     $198 = $ReallocAsyncCtx15 + 60 | 0; //@line 25516
     HEAP32[$198 >> 2] = $154; //@line 25517
     $199 = $ReallocAsyncCtx15 + 64 | 0; //@line 25518
     HEAP8[$199 >> 0] = $153; //@line 25519
     $200 = $ReallocAsyncCtx15 + 68 | 0; //@line 25520
     HEAP32[$200 >> 2] = $20; //@line 25521
     $201 = $ReallocAsyncCtx15 + 72 | 0; //@line 25522
     HEAP32[$201 >> 2] = $38; //@line 25523
     $202 = $ReallocAsyncCtx15 + 76 | 0; //@line 25524
     HEAP32[$202 >> 2] = $40; //@line 25525
     $203 = $ReallocAsyncCtx15 + 80 | 0; //@line 25526
     HEAP32[$203 >> 2] = $42; //@line 25527
     $204 = $ReallocAsyncCtx15 + 84 | 0; //@line 25528
     HEAP32[$204 >> 2] = $178; //@line 25529
     $205 = $ReallocAsyncCtx15 + 88 | 0; //@line 25530
     HEAP32[$205 >> 2] = $44; //@line 25531
     $206 = $ReallocAsyncCtx15 + 92 | 0; //@line 25532
     HEAP32[$206 >> 2] = $46; //@line 25533
     $207 = $ReallocAsyncCtx15 + 96 | 0; //@line 25534
     HEAP32[$207 >> 2] = $10; //@line 25535
     $208 = $ReallocAsyncCtx15 + 100 | 0; //@line 25536
     HEAP32[$208 >> 2] = $48; //@line 25537
     $209 = $ReallocAsyncCtx15 + 104 | 0; //@line 25538
     HEAP32[$209 >> 2] = $22; //@line 25539
     $210 = $ReallocAsyncCtx15 + 108 | 0; //@line 25540
     HEAP32[$210 >> 2] = $32; //@line 25541
     $211 = $ReallocAsyncCtx15 + 112 | 0; //@line 25542
     HEAP32[$211 >> 2] = $180; //@line 25543
     $212 = $ReallocAsyncCtx15 + 116 | 0; //@line 25544
     HEAP32[$212 >> 2] = $50; //@line 25545
     $213 = $ReallocAsyncCtx15 + 120 | 0; //@line 25546
     HEAP8[$213 >> 0] = $$1169; //@line 25547
     $214 = $ReallocAsyncCtx15 + 124 | 0; //@line 25548
     HEAP32[$214 >> 2] = $2; //@line 25549
     $215 = $ReallocAsyncCtx15 + 128 | 0; //@line 25550
     HEAP32[$215 >> 2] = $24; //@line 25551
     $216 = $ReallocAsyncCtx15 + 132 | 0; //@line 25552
     HEAP32[$216 >> 2] = $$1171; //@line 25553
     $217 = $ReallocAsyncCtx15 + 136 | 0; //@line 25554
     HEAP8[$217 >> 0] = $6; //@line 25555
     $218 = $ReallocAsyncCtx15 + 140 | 0; //@line 25556
     HEAP32[$218 >> 2] = $$1173; //@line 25557
     $219 = $ReallocAsyncCtx15 + 144 | 0; //@line 25558
     HEAP32[$219 >> 2] = $182; //@line 25559
     sp = STACKTOP; //@line 25560
     return;
    }
    ___async_unwind = 0; //@line 25563
    HEAP32[$ReallocAsyncCtx15 >> 2] = 394; //@line 25564
    $184 = $ReallocAsyncCtx15 + 4 | 0; //@line 25565
    HEAP32[$184 >> 2] = $$1175; //@line 25566
    $185 = $ReallocAsyncCtx15 + 8 | 0; //@line 25567
    HEAP32[$185 >> 2] = $157; //@line 25568
    $186 = $ReallocAsyncCtx15 + 12 | 0; //@line 25569
    HEAP32[$186 >> 2] = $16; //@line 25570
    $187 = $ReallocAsyncCtx15 + 16 | 0; //@line 25571
    HEAP32[$187 >> 2] = $4; //@line 25572
    $188 = $ReallocAsyncCtx15 + 20 | 0; //@line 25573
    HEAP32[$188 >> 2] = $12; //@line 25574
    $189 = $ReallocAsyncCtx15 + 24 | 0; //@line 25575
    HEAP32[$189 >> 2] = $18; //@line 25576
    $190 = $ReallocAsyncCtx15 + 28 | 0; //@line 25577
    HEAP8[$190 >> 0] = $144; //@line 25578
    $191 = $ReallocAsyncCtx15 + 32 | 0; //@line 25579
    HEAP32[$191 >> 2] = $124; //@line 25580
    $192 = $ReallocAsyncCtx15 + 36 | 0; //@line 25581
    HEAP32[$192 >> 2] = $14; //@line 25582
    $193 = $ReallocAsyncCtx15 + 40 | 0; //@line 25583
    HEAP8[$193 >> 0] = $156; //@line 25584
    $194 = $ReallocAsyncCtx15 + 44 | 0; //@line 25585
    HEAP32[$194 >> 2] = $8; //@line 25586
    $195 = $ReallocAsyncCtx15 + 48 | 0; //@line 25587
    HEAP32[$195 >> 2] = $155; //@line 25588
    $196 = $ReallocAsyncCtx15 + 52 | 0; //@line 25589
    HEAP32[$196 >> 2] = $36; //@line 25590
    $197 = $ReallocAsyncCtx15 + 56 | 0; //@line 25591
    HEAP8[$197 >> 0] = $trunc; //@line 25592
    $198 = $ReallocAsyncCtx15 + 60 | 0; //@line 25593
    HEAP32[$198 >> 2] = $154; //@line 25594
    $199 = $ReallocAsyncCtx15 + 64 | 0; //@line 25595
    HEAP8[$199 >> 0] = $153; //@line 25596
    $200 = $ReallocAsyncCtx15 + 68 | 0; //@line 25597
    HEAP32[$200 >> 2] = $20; //@line 25598
    $201 = $ReallocAsyncCtx15 + 72 | 0; //@line 25599
    HEAP32[$201 >> 2] = $38; //@line 25600
    $202 = $ReallocAsyncCtx15 + 76 | 0; //@line 25601
    HEAP32[$202 >> 2] = $40; //@line 25602
    $203 = $ReallocAsyncCtx15 + 80 | 0; //@line 25603
    HEAP32[$203 >> 2] = $42; //@line 25604
    $204 = $ReallocAsyncCtx15 + 84 | 0; //@line 25605
    HEAP32[$204 >> 2] = $178; //@line 25606
    $205 = $ReallocAsyncCtx15 + 88 | 0; //@line 25607
    HEAP32[$205 >> 2] = $44; //@line 25608
    $206 = $ReallocAsyncCtx15 + 92 | 0; //@line 25609
    HEAP32[$206 >> 2] = $46; //@line 25610
    $207 = $ReallocAsyncCtx15 + 96 | 0; //@line 25611
    HEAP32[$207 >> 2] = $10; //@line 25612
    $208 = $ReallocAsyncCtx15 + 100 | 0; //@line 25613
    HEAP32[$208 >> 2] = $48; //@line 25614
    $209 = $ReallocAsyncCtx15 + 104 | 0; //@line 25615
    HEAP32[$209 >> 2] = $22; //@line 25616
    $210 = $ReallocAsyncCtx15 + 108 | 0; //@line 25617
    HEAP32[$210 >> 2] = $32; //@line 25618
    $211 = $ReallocAsyncCtx15 + 112 | 0; //@line 25619
    HEAP32[$211 >> 2] = $180; //@line 25620
    $212 = $ReallocAsyncCtx15 + 116 | 0; //@line 25621
    HEAP32[$212 >> 2] = $50; //@line 25622
    $213 = $ReallocAsyncCtx15 + 120 | 0; //@line 25623
    HEAP8[$213 >> 0] = $$1169; //@line 25624
    $214 = $ReallocAsyncCtx15 + 124 | 0; //@line 25625
    HEAP32[$214 >> 2] = $2; //@line 25626
    $215 = $ReallocAsyncCtx15 + 128 | 0; //@line 25627
    HEAP32[$215 >> 2] = $24; //@line 25628
    $216 = $ReallocAsyncCtx15 + 132 | 0; //@line 25629
    HEAP32[$216 >> 2] = $$1171; //@line 25630
    $217 = $ReallocAsyncCtx15 + 136 | 0; //@line 25631
    HEAP8[$217 >> 0] = $6; //@line 25632
    $218 = $ReallocAsyncCtx15 + 140 | 0; //@line 25633
    HEAP32[$218 >> 2] = $$1173; //@line 25634
    $219 = $ReallocAsyncCtx15 + 144 | 0; //@line 25635
    HEAP32[$219 >> 2] = $182; //@line 25636
    sp = STACKTOP; //@line 25637
    return;
   } else {
    $222 = $142 + 65536 + ($179 << 16 >> 16) | 0; //@line 25643
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(152) | 0; //@line 25645
    __Z11compute_micPKhtS0_jhjPj($24, $157 & 65535, $$1173, $124, 1, $222, $32) | 0; //@line 25646
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 395; //@line 25649
     $224 = $ReallocAsyncCtx14 + 4 | 0; //@line 25650
     HEAP32[$224 >> 2] = $$1175; //@line 25651
     $225 = $ReallocAsyncCtx14 + 8 | 0; //@line 25652
     HEAP32[$225 >> 2] = $157; //@line 25653
     $226 = $ReallocAsyncCtx14 + 12 | 0; //@line 25654
     HEAP32[$226 >> 2] = $16; //@line 25655
     $227 = $ReallocAsyncCtx14 + 16 | 0; //@line 25656
     HEAP32[$227 >> 2] = $4; //@line 25657
     $228 = $ReallocAsyncCtx14 + 20 | 0; //@line 25658
     HEAP32[$228 >> 2] = $12; //@line 25659
     $229 = $ReallocAsyncCtx14 + 24 | 0; //@line 25660
     HEAP32[$229 >> 2] = $18; //@line 25661
     $230 = $ReallocAsyncCtx14 + 28 | 0; //@line 25662
     HEAP32[$230 >> 2] = $222; //@line 25663
     $231 = $ReallocAsyncCtx14 + 32 | 0; //@line 25664
     HEAP8[$231 >> 0] = $144; //@line 25665
     $232 = $ReallocAsyncCtx14 + 36 | 0; //@line 25666
     HEAP32[$232 >> 2] = $124; //@line 25667
     $233 = $ReallocAsyncCtx14 + 40 | 0; //@line 25668
     HEAP32[$233 >> 2] = $14; //@line 25669
     $234 = $ReallocAsyncCtx14 + 44 | 0; //@line 25670
     HEAP8[$234 >> 0] = $156; //@line 25671
     $235 = $ReallocAsyncCtx14 + 48 | 0; //@line 25672
     HEAP32[$235 >> 2] = $8; //@line 25673
     $236 = $ReallocAsyncCtx14 + 52 | 0; //@line 25674
     HEAP32[$236 >> 2] = $155; //@line 25675
     $237 = $ReallocAsyncCtx14 + 56 | 0; //@line 25676
     HEAP32[$237 >> 2] = $36; //@line 25677
     $238 = $ReallocAsyncCtx14 + 60 | 0; //@line 25678
     HEAP8[$238 >> 0] = $trunc; //@line 25679
     $239 = $ReallocAsyncCtx14 + 64 | 0; //@line 25680
     HEAP32[$239 >> 2] = $154; //@line 25681
     $240 = $ReallocAsyncCtx14 + 68 | 0; //@line 25682
     HEAP8[$240 >> 0] = $153; //@line 25683
     $241 = $ReallocAsyncCtx14 + 72 | 0; //@line 25684
     HEAP32[$241 >> 2] = $20; //@line 25685
     $242 = $ReallocAsyncCtx14 + 76 | 0; //@line 25686
     HEAP32[$242 >> 2] = $38; //@line 25687
     $243 = $ReallocAsyncCtx14 + 80 | 0; //@line 25688
     HEAP32[$243 >> 2] = $40; //@line 25689
     $244 = $ReallocAsyncCtx14 + 84 | 0; //@line 25690
     HEAP32[$244 >> 2] = $42; //@line 25691
     $245 = $ReallocAsyncCtx14 + 88 | 0; //@line 25692
     HEAP32[$245 >> 2] = $178; //@line 25693
     $246 = $ReallocAsyncCtx14 + 92 | 0; //@line 25694
     HEAP32[$246 >> 2] = $44; //@line 25695
     $247 = $ReallocAsyncCtx14 + 96 | 0; //@line 25696
     HEAP32[$247 >> 2] = $46; //@line 25697
     $248 = $ReallocAsyncCtx14 + 100 | 0; //@line 25698
     HEAP32[$248 >> 2] = $10; //@line 25699
     $249 = $ReallocAsyncCtx14 + 104 | 0; //@line 25700
     HEAP32[$249 >> 2] = $142; //@line 25701
     $250 = $ReallocAsyncCtx14 + 108 | 0; //@line 25702
     HEAP32[$250 >> 2] = $48; //@line 25703
     $251 = $ReallocAsyncCtx14 + 112 | 0; //@line 25704
     HEAP32[$251 >> 2] = $22; //@line 25705
     $252 = $ReallocAsyncCtx14 + 116 | 0; //@line 25706
     HEAP32[$252 >> 2] = $32; //@line 25707
     $253 = $ReallocAsyncCtx14 + 120 | 0; //@line 25708
     HEAP32[$253 >> 2] = $180; //@line 25709
     $254 = $ReallocAsyncCtx14 + 124 | 0; //@line 25710
     HEAP32[$254 >> 2] = $50; //@line 25711
     $255 = $ReallocAsyncCtx14 + 128 | 0; //@line 25712
     HEAP8[$255 >> 0] = $$1169; //@line 25713
     $256 = $ReallocAsyncCtx14 + 132 | 0; //@line 25714
     HEAP32[$256 >> 2] = $2; //@line 25715
     $257 = $ReallocAsyncCtx14 + 136 | 0; //@line 25716
     HEAP32[$257 >> 2] = $24; //@line 25717
     $258 = $ReallocAsyncCtx14 + 140 | 0; //@line 25718
     HEAP32[$258 >> 2] = $$1171; //@line 25719
     $259 = $ReallocAsyncCtx14 + 144 | 0; //@line 25720
     HEAP8[$259 >> 0] = $6; //@line 25721
     $260 = $ReallocAsyncCtx14 + 148 | 0; //@line 25722
     HEAP32[$260 >> 2] = $$1173; //@line 25723
     sp = STACKTOP; //@line 25724
     return;
    }
    ___async_unwind = 0; //@line 25727
    HEAP32[$ReallocAsyncCtx14 >> 2] = 395; //@line 25728
    $224 = $ReallocAsyncCtx14 + 4 | 0; //@line 25729
    HEAP32[$224 >> 2] = $$1175; //@line 25730
    $225 = $ReallocAsyncCtx14 + 8 | 0; //@line 25731
    HEAP32[$225 >> 2] = $157; //@line 25732
    $226 = $ReallocAsyncCtx14 + 12 | 0; //@line 25733
    HEAP32[$226 >> 2] = $16; //@line 25734
    $227 = $ReallocAsyncCtx14 + 16 | 0; //@line 25735
    HEAP32[$227 >> 2] = $4; //@line 25736
    $228 = $ReallocAsyncCtx14 + 20 | 0; //@line 25737
    HEAP32[$228 >> 2] = $12; //@line 25738
    $229 = $ReallocAsyncCtx14 + 24 | 0; //@line 25739
    HEAP32[$229 >> 2] = $18; //@line 25740
    $230 = $ReallocAsyncCtx14 + 28 | 0; //@line 25741
    HEAP32[$230 >> 2] = $222; //@line 25742
    $231 = $ReallocAsyncCtx14 + 32 | 0; //@line 25743
    HEAP8[$231 >> 0] = $144; //@line 25744
    $232 = $ReallocAsyncCtx14 + 36 | 0; //@line 25745
    HEAP32[$232 >> 2] = $124; //@line 25746
    $233 = $ReallocAsyncCtx14 + 40 | 0; //@line 25747
    HEAP32[$233 >> 2] = $14; //@line 25748
    $234 = $ReallocAsyncCtx14 + 44 | 0; //@line 25749
    HEAP8[$234 >> 0] = $156; //@line 25750
    $235 = $ReallocAsyncCtx14 + 48 | 0; //@line 25751
    HEAP32[$235 >> 2] = $8; //@line 25752
    $236 = $ReallocAsyncCtx14 + 52 | 0; //@line 25753
    HEAP32[$236 >> 2] = $155; //@line 25754
    $237 = $ReallocAsyncCtx14 + 56 | 0; //@line 25755
    HEAP32[$237 >> 2] = $36; //@line 25756
    $238 = $ReallocAsyncCtx14 + 60 | 0; //@line 25757
    HEAP8[$238 >> 0] = $trunc; //@line 25758
    $239 = $ReallocAsyncCtx14 + 64 | 0; //@line 25759
    HEAP32[$239 >> 2] = $154; //@line 25760
    $240 = $ReallocAsyncCtx14 + 68 | 0; //@line 25761
    HEAP8[$240 >> 0] = $153; //@line 25762
    $241 = $ReallocAsyncCtx14 + 72 | 0; //@line 25763
    HEAP32[$241 >> 2] = $20; //@line 25764
    $242 = $ReallocAsyncCtx14 + 76 | 0; //@line 25765
    HEAP32[$242 >> 2] = $38; //@line 25766
    $243 = $ReallocAsyncCtx14 + 80 | 0; //@line 25767
    HEAP32[$243 >> 2] = $40; //@line 25768
    $244 = $ReallocAsyncCtx14 + 84 | 0; //@line 25769
    HEAP32[$244 >> 2] = $42; //@line 25770
    $245 = $ReallocAsyncCtx14 + 88 | 0; //@line 25771
    HEAP32[$245 >> 2] = $178; //@line 25772
    $246 = $ReallocAsyncCtx14 + 92 | 0; //@line 25773
    HEAP32[$246 >> 2] = $44; //@line 25774
    $247 = $ReallocAsyncCtx14 + 96 | 0; //@line 25775
    HEAP32[$247 >> 2] = $46; //@line 25776
    $248 = $ReallocAsyncCtx14 + 100 | 0; //@line 25777
    HEAP32[$248 >> 2] = $10; //@line 25778
    $249 = $ReallocAsyncCtx14 + 104 | 0; //@line 25779
    HEAP32[$249 >> 2] = $142; //@line 25780
    $250 = $ReallocAsyncCtx14 + 108 | 0; //@line 25781
    HEAP32[$250 >> 2] = $48; //@line 25782
    $251 = $ReallocAsyncCtx14 + 112 | 0; //@line 25783
    HEAP32[$251 >> 2] = $22; //@line 25784
    $252 = $ReallocAsyncCtx14 + 116 | 0; //@line 25785
    HEAP32[$252 >> 2] = $32; //@line 25786
    $253 = $ReallocAsyncCtx14 + 120 | 0; //@line 25787
    HEAP32[$253 >> 2] = $180; //@line 25788
    $254 = $ReallocAsyncCtx14 + 124 | 0; //@line 25789
    HEAP32[$254 >> 2] = $50; //@line 25790
    $255 = $ReallocAsyncCtx14 + 128 | 0; //@line 25791
    HEAP8[$255 >> 0] = $$1169; //@line 25792
    $256 = $ReallocAsyncCtx14 + 132 | 0; //@line 25793
    HEAP32[$256 >> 2] = $2; //@line 25794
    $257 = $ReallocAsyncCtx14 + 136 | 0; //@line 25795
    HEAP32[$257 >> 2] = $24; //@line 25796
    $258 = $ReallocAsyncCtx14 + 140 | 0; //@line 25797
    HEAP32[$258 >> 2] = $$1171; //@line 25798
    $259 = $ReallocAsyncCtx14 + 144 | 0; //@line 25799
    HEAP8[$259 >> 0] = $6; //@line 25800
    $260 = $ReallocAsyncCtx14 + 148 | 0; //@line 25801
    HEAP32[$260 >> 2] = $$1173; //@line 25802
    sp = STACKTOP; //@line 25803
    return;
   }
   break;
  }
 case 7:
  {
   $261 = $2 + 638 | 0; //@line 25809
   _memcpy($261 | 0, $24 + 1 | 0, $30 | 0) | 0; //@line 25811
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) >> 2] = 3; //@line 25813
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 0; //@line 25816
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 12 >> 2] = $261; //@line 25819
   HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 16 >> 1] = $30 + 65535; //@line 25824
   $272 = $2 + 944 | 0; //@line 25825
   HEAP8[$272 >> 0] = HEAP8[$272 >> 0] | 2; //@line 25828
   $281 = $2 + 944 | 0; //@line 25829
   HEAP8[$281 >> 0] = HEAP8[$281 >> 0] | 32; //@line 25832
   $284 = HEAP32[$22 >> 2] | 0; //@line 25833
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 25835
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($284, $2 + 996 | 0, 1); //@line 25836
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 25839
    $286 = $ReallocAsyncCtx17 + 4 | 0; //@line 25840
    HEAP32[$286 >> 2] = $18; //@line 25841
    $287 = $ReallocAsyncCtx17 + 8 | 0; //@line 25842
    HEAP32[$287 >> 2] = $20; //@line 25843
    sp = STACKTOP; //@line 25844
    return;
   }
   ___async_unwind = 0; //@line 25847
   HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 25848
   $286 = $ReallocAsyncCtx17 + 4 | 0; //@line 25849
   HEAP32[$286 >> 2] = $18; //@line 25850
   $287 = $ReallocAsyncCtx17 + 8 | 0; //@line 25851
   HEAP32[$287 >> 2] = $20; //@line 25852
   sp = STACKTOP; //@line 25853
   return;
  }
 default:
  {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($8) | 0) + 4 >> 2] = 1; //@line 25860
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25861
   __ZN7LoRaMac21prepare_rx_done_abortEv($2); //@line 25862
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 408; //@line 25865
    $277 = $ReallocAsyncCtx6 + 4 | 0; //@line 25866
    HEAP32[$277 >> 2] = $2; //@line 25867
    $278 = $ReallocAsyncCtx6 + 8 | 0; //@line 25868
    HEAP32[$278 >> 2] = $22; //@line 25869
    $279 = $ReallocAsyncCtx6 + 12 | 0; //@line 25870
    HEAP32[$279 >> 2] = $18; //@line 25871
    $280 = $ReallocAsyncCtx6 + 16 | 0; //@line 25872
    HEAP32[$280 >> 2] = $20; //@line 25873
    sp = STACKTOP; //@line 25874
    return;
   }
   ___async_unwind = 0; //@line 25877
   HEAP32[$ReallocAsyncCtx6 >> 2] = 408; //@line 25878
   $277 = $ReallocAsyncCtx6 + 4 | 0; //@line 25879
   HEAP32[$277 >> 2] = $2; //@line 25880
   $278 = $ReallocAsyncCtx6 + 8 | 0; //@line 25881
   HEAP32[$278 >> 2] = $22; //@line 25882
   $279 = $ReallocAsyncCtx6 + 12 | 0; //@line 25883
   HEAP32[$279 >> 2] = $18; //@line 25884
   $280 = $ReallocAsyncCtx6 + 16 | 0; //@line 25885
   HEAP32[$280 >> 2] = $20; //@line 25886
   sp = STACKTOP; //@line 25887
   return;
  }
 }
}
function _equeue_dispatch__async_cb_12($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$065 = 0, $$06790 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$sink$in$i$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $54 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 18513
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 18516
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18518
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18520
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18522
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18524
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18526
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18528
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18530
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18532
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18534
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18536
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18538
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18540
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18542
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18544
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18546
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18548
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18550
 _equeue_mutex_lock($10); //@line 18551
 HEAP8[$32 >> 0] = (HEAPU8[$32 >> 0] | 0) + 1; //@line 18556
 if (((HEAP32[$26 >> 2] | 0) - $30 | 0) < 1) {
  HEAP32[$26 >> 2] = $30; //@line 18561
 }
 $44 = HEAP32[$18 >> 2] | 0; //@line 18563
 HEAP32[$20 >> 2] = $44; //@line 18564
 $45 = $44; //@line 18565
 L6 : do {
  if (!$44) {
   $$04055$i = $14; //@line 18569
   $54 = $45; //@line 18569
   label = 8; //@line 18570
  } else {
   $$04063$i = $14; //@line 18572
   $48 = $45; //@line 18572
   do {
    if (((HEAP32[$48 + 20 >> 2] | 0) - $30 | 0) >= 1) {
     $$04055$i = $$04063$i; //@line 18579
     $54 = $48; //@line 18579
     label = 8; //@line 18580
     break L6;
    }
    $$04063$i = $48 + 8 | 0; //@line 18583
    $48 = HEAP32[$$04063$i >> 2] | 0; //@line 18584
   } while (($48 | 0) != 0);
   HEAP32[$22 >> 2] = 0; //@line 18592
   $$0405571$i = $$04063$i; //@line 18593
  }
 } while (0);
 if ((label | 0) == 8) {
  HEAP32[$22 >> 2] = $54; //@line 18597
  if (!$54) {
   $$0405571$i = $$04055$i; //@line 18600
  } else {
   HEAP32[$54 + 16 >> 2] = $22; //@line 18603
   $$0405571$i = $$04055$i; //@line 18604
  }
 }
 HEAP32[$$0405571$i >> 2] = 0; //@line 18607
 _equeue_mutex_unlock($10); //@line 18608
 $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = HEAP32[$14 >> 2] | 0; //@line 18609
 L15 : do {
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72; //@line 18614
   $$04258$i = $14; //@line 18614
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 18616
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 18617
    $$03956$i = 0; //@line 18618
    $$057$i = $$04159$i$looptemp; //@line 18618
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 18621
     $63 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 18623
     if (!$63) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 18628
      $$057$i = $63; //@line 18628
      $$03956$i = $$03956$i$phi; //@line 18628
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 18631
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = HEAP32[$14 >> 2] | 0; //@line 18639
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 | 0) {
    $$06790 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73; //@line 18642
    while (1) {
     $66 = $$06790 + 8 | 0; //@line 18644
     $67 = HEAP32[$66 >> 2] | 0; //@line 18645
     $69 = HEAP32[$$06790 + 32 >> 2] | 0; //@line 18647
     if ($69 | 0) {
      label = 17; //@line 18650
      break;
     }
     $93 = HEAP32[$$06790 + 24 >> 2] | 0; //@line 18654
     if (($93 | 0) > -1) {
      label = 21; //@line 18657
      break;
     }
     $117 = $$06790 + 4 | 0; //@line 18661
     $118 = HEAP8[$117 >> 0] | 0; //@line 18662
     HEAP8[$117 >> 0] = (($118 + 1 & 255) << HEAP32[$36 >> 2] | 0) == 0 ? 1 : ($118 & 255) + 1 & 255; //@line 18671
     $127 = HEAP32[$$06790 + 28 >> 2] | 0; //@line 18673
     if ($127 | 0) {
      label = 25; //@line 18676
      break;
     }
     _equeue_mutex_lock($6); //@line 18679
     $150 = HEAP32[$4 >> 2] | 0; //@line 18680
     L28 : do {
      if (!$150) {
       $$02329$i$i = $4; //@line 18684
       label = 34; //@line 18685
      } else {
       $152 = HEAP32[$$06790 >> 2] | 0; //@line 18687
       $$025$i$i = $4; //@line 18688
       $154 = $150; //@line 18688
       while (1) {
        $153 = HEAP32[$154 >> 2] | 0; //@line 18690
        if ($153 >>> 0 >= $152 >>> 0) {
         break;
        }
        $156 = $154 + 8 | 0; //@line 18695
        $157 = HEAP32[$156 >> 2] | 0; //@line 18696
        if (!$157) {
         $$02329$i$i = $156; //@line 18699
         label = 34; //@line 18700
         break L28;
        } else {
         $$025$i$i = $156; //@line 18703
         $154 = $157; //@line 18703
        }
       }
       if (($153 | 0) == ($152 | 0)) {
        HEAP32[$$06790 + 12 >> 2] = $154; //@line 18709
        $$02330$i$i = $$025$i$i; //@line 18712
        $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 18712
       } else {
        $$02329$i$i = $$025$i$i; //@line 18714
        label = 34; //@line 18715
       }
      }
     } while (0);
     if ((label | 0) == 34) {
      label = 0; //@line 18720
      HEAP32[$$06790 + 12 >> 2] = 0; //@line 18722
      $$02330$i$i = $$02329$i$i; //@line 18723
      $$sink$in$i$i = $$02329$i$i; //@line 18723
     }
     HEAP32[$66 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 18726
     HEAP32[$$02330$i$i >> 2] = $$06790; //@line 18727
     _equeue_mutex_unlock($6); //@line 18728
     if (!$67) {
      break L15;
     } else {
      $$06790 = $67; //@line 18733
     }
    }
    if ((label | 0) == 17) {
     $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 18738
     FUNCTION_TABLE_vi[$69 & 1023]($$06790 + 36 | 0); //@line 18739
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 18742
      $72 = $ReallocAsyncCtx + 4 | 0; //@line 18743
      HEAP32[$72 >> 2] = $67; //@line 18744
      $73 = $ReallocAsyncCtx + 8 | 0; //@line 18745
      $$expand_i1_val = $2 & 1; //@line 18746
      HEAP8[$73 >> 0] = $$expand_i1_val; //@line 18747
      $74 = $ReallocAsyncCtx + 12 | 0; //@line 18748
      HEAP32[$74 >> 2] = $4; //@line 18749
      $75 = $ReallocAsyncCtx + 16 | 0; //@line 18750
      HEAP32[$75 >> 2] = $$06790; //@line 18751
      $76 = $ReallocAsyncCtx + 20 | 0; //@line 18752
      HEAP32[$76 >> 2] = $66; //@line 18753
      $77 = $ReallocAsyncCtx + 24 | 0; //@line 18754
      HEAP32[$77 >> 2] = $6; //@line 18755
      $78 = $ReallocAsyncCtx + 28 | 0; //@line 18756
      HEAP32[$78 >> 2] = $14; //@line 18757
      $79 = $ReallocAsyncCtx + 32 | 0; //@line 18758
      HEAP32[$79 >> 2] = $12; //@line 18759
      $80 = $ReallocAsyncCtx + 36 | 0; //@line 18760
      HEAP32[$80 >> 2] = $10; //@line 18761
      $81 = $ReallocAsyncCtx + 40 | 0; //@line 18762
      HEAP32[$81 >> 2] = $22; //@line 18763
      $82 = $ReallocAsyncCtx + 44 | 0; //@line 18764
      HEAP32[$82 >> 2] = $16; //@line 18765
      $83 = $ReallocAsyncCtx + 48 | 0; //@line 18766
      HEAP32[$83 >> 2] = $18; //@line 18767
      $84 = $ReallocAsyncCtx + 52 | 0; //@line 18768
      HEAP32[$84 >> 2] = $20; //@line 18769
      $85 = $ReallocAsyncCtx + 56 | 0; //@line 18770
      HEAP32[$85 >> 2] = $24; //@line 18771
      $86 = $ReallocAsyncCtx + 60 | 0; //@line 18772
      HEAP32[$86 >> 2] = $8; //@line 18773
      $87 = $ReallocAsyncCtx + 64 | 0; //@line 18774
      HEAP32[$87 >> 2] = $28; //@line 18775
      $88 = $ReallocAsyncCtx + 68 | 0; //@line 18776
      HEAP32[$88 >> 2] = $26; //@line 18777
      $89 = $ReallocAsyncCtx + 72 | 0; //@line 18778
      HEAP32[$89 >> 2] = $32; //@line 18779
      $90 = $ReallocAsyncCtx + 76 | 0; //@line 18780
      HEAP32[$90 >> 2] = $34; //@line 18781
      $91 = $ReallocAsyncCtx + 80 | 0; //@line 18782
      HEAP32[$91 >> 2] = $36; //@line 18783
      sp = STACKTOP; //@line 18784
      return;
     }
     ___async_unwind = 0; //@line 18787
     HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 18788
     $72 = $ReallocAsyncCtx + 4 | 0; //@line 18789
     HEAP32[$72 >> 2] = $67; //@line 18790
     $73 = $ReallocAsyncCtx + 8 | 0; //@line 18791
     $$expand_i1_val = $2 & 1; //@line 18792
     HEAP8[$73 >> 0] = $$expand_i1_val; //@line 18793
     $74 = $ReallocAsyncCtx + 12 | 0; //@line 18794
     HEAP32[$74 >> 2] = $4; //@line 18795
     $75 = $ReallocAsyncCtx + 16 | 0; //@line 18796
     HEAP32[$75 >> 2] = $$06790; //@line 18797
     $76 = $ReallocAsyncCtx + 20 | 0; //@line 18798
     HEAP32[$76 >> 2] = $66; //@line 18799
     $77 = $ReallocAsyncCtx + 24 | 0; //@line 18800
     HEAP32[$77 >> 2] = $6; //@line 18801
     $78 = $ReallocAsyncCtx + 28 | 0; //@line 18802
     HEAP32[$78 >> 2] = $14; //@line 18803
     $79 = $ReallocAsyncCtx + 32 | 0; //@line 18804
     HEAP32[$79 >> 2] = $12; //@line 18805
     $80 = $ReallocAsyncCtx + 36 | 0; //@line 18806
     HEAP32[$80 >> 2] = $10; //@line 18807
     $81 = $ReallocAsyncCtx + 40 | 0; //@line 18808
     HEAP32[$81 >> 2] = $22; //@line 18809
     $82 = $ReallocAsyncCtx + 44 | 0; //@line 18810
     HEAP32[$82 >> 2] = $16; //@line 18811
     $83 = $ReallocAsyncCtx + 48 | 0; //@line 18812
     HEAP32[$83 >> 2] = $18; //@line 18813
     $84 = $ReallocAsyncCtx + 52 | 0; //@line 18814
     HEAP32[$84 >> 2] = $20; //@line 18815
     $85 = $ReallocAsyncCtx + 56 | 0; //@line 18816
     HEAP32[$85 >> 2] = $24; //@line 18817
     $86 = $ReallocAsyncCtx + 60 | 0; //@line 18818
     HEAP32[$86 >> 2] = $8; //@line 18819
     $87 = $ReallocAsyncCtx + 64 | 0; //@line 18820
     HEAP32[$87 >> 2] = $28; //@line 18821
     $88 = $ReallocAsyncCtx + 68 | 0; //@line 18822
     HEAP32[$88 >> 2] = $26; //@line 18823
     $89 = $ReallocAsyncCtx + 72 | 0; //@line 18824
     HEAP32[$89 >> 2] = $32; //@line 18825
     $90 = $ReallocAsyncCtx + 76 | 0; //@line 18826
     HEAP32[$90 >> 2] = $34; //@line 18827
     $91 = $ReallocAsyncCtx + 80 | 0; //@line 18828
     HEAP32[$91 >> 2] = $36; //@line 18829
     sp = STACKTOP; //@line 18830
     return;
    } else if ((label | 0) == 21) {
     $95 = $$06790 + 20 | 0; //@line 18834
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $93; //@line 18837
     $98 = _equeue_tick() | 0; //@line 18838
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 18839
     _equeue_enqueue($24, $$06790, $98) | 0; //@line 18840
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 18843
      $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 18844
      HEAP32[$99 >> 2] = $67; //@line 18845
      $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 18846
      $$expand_i1_val9 = $2 & 1; //@line 18847
      HEAP8[$100 >> 0] = $$expand_i1_val9; //@line 18848
      $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 18849
      HEAP32[$101 >> 2] = $4; //@line 18850
      $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 18851
      HEAP32[$102 >> 2] = $6; //@line 18852
      $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 18853
      HEAP32[$103 >> 2] = $8; //@line 18854
      $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 18855
      HEAP32[$104 >> 2] = $10; //@line 18856
      $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 18857
      HEAP32[$105 >> 2] = $12; //@line 18858
      $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 18859
      HEAP32[$106 >> 2] = $14; //@line 18860
      $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 18861
      HEAP32[$107 >> 2] = $22; //@line 18862
      $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 18863
      HEAP32[$108 >> 2] = $16; //@line 18864
      $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 18865
      HEAP32[$109 >> 2] = $18; //@line 18866
      $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 18867
      HEAP32[$110 >> 2] = $20; //@line 18868
      $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 18869
      HEAP32[$111 >> 2] = $24; //@line 18870
      $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 18871
      HEAP32[$112 >> 2] = $28; //@line 18872
      $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 18873
      HEAP32[$113 >> 2] = $26; //@line 18874
      $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 18875
      HEAP32[$114 >> 2] = $32; //@line 18876
      $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 18877
      HEAP32[$115 >> 2] = $34; //@line 18878
      $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 18879
      HEAP32[$116 >> 2] = $36; //@line 18880
      sp = STACKTOP; //@line 18881
      return;
     }
     ___async_unwind = 0; //@line 18884
     HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 18885
     $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 18886
     HEAP32[$99 >> 2] = $67; //@line 18887
     $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 18888
     $$expand_i1_val9 = $2 & 1; //@line 18889
     HEAP8[$100 >> 0] = $$expand_i1_val9; //@line 18890
     $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 18891
     HEAP32[$101 >> 2] = $4; //@line 18892
     $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 18893
     HEAP32[$102 >> 2] = $6; //@line 18894
     $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 18895
     HEAP32[$103 >> 2] = $8; //@line 18896
     $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 18897
     HEAP32[$104 >> 2] = $10; //@line 18898
     $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 18899
     HEAP32[$105 >> 2] = $12; //@line 18900
     $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 18901
     HEAP32[$106 >> 2] = $14; //@line 18902
     $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 18903
     HEAP32[$107 >> 2] = $22; //@line 18904
     $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 18905
     HEAP32[$108 >> 2] = $16; //@line 18906
     $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 18907
     HEAP32[$109 >> 2] = $18; //@line 18908
     $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 18909
     HEAP32[$110 >> 2] = $20; //@line 18910
     $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 18911
     HEAP32[$111 >> 2] = $24; //@line 18912
     $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 18913
     HEAP32[$112 >> 2] = $28; //@line 18914
     $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 18915
     HEAP32[$113 >> 2] = $26; //@line 18916
     $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 18917
     HEAP32[$114 >> 2] = $32; //@line 18918
     $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 18919
     HEAP32[$115 >> 2] = $34; //@line 18920
     $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 18921
     HEAP32[$116 >> 2] = $36; //@line 18922
     sp = STACKTOP; //@line 18923
     return;
    } else if ((label | 0) == 25) {
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 18928
     FUNCTION_TABLE_vi[$127 & 1023]($$06790 + 36 | 0); //@line 18929
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 18932
      $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 18933
      HEAP32[$130 >> 2] = $67; //@line 18934
      $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 18935
      $$expand_i1_val11 = $2 & 1; //@line 18936
      HEAP8[$131 >> 0] = $$expand_i1_val11; //@line 18937
      $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 18938
      HEAP32[$132 >> 2] = $4; //@line 18939
      $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 18940
      HEAP32[$133 >> 2] = $$06790; //@line 18941
      $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 18942
      HEAP32[$134 >> 2] = $66; //@line 18943
      $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 18944
      HEAP32[$135 >> 2] = $6; //@line 18945
      $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 18946
      HEAP32[$136 >> 2] = $14; //@line 18947
      $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 18948
      HEAP32[$137 >> 2] = $12; //@line 18949
      $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 18950
      HEAP32[$138 >> 2] = $10; //@line 18951
      $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 18952
      HEAP32[$139 >> 2] = $22; //@line 18953
      $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 18954
      HEAP32[$140 >> 2] = $16; //@line 18955
      $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 18956
      HEAP32[$141 >> 2] = $18; //@line 18957
      $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 18958
      HEAP32[$142 >> 2] = $20; //@line 18959
      $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 18960
      HEAP32[$143 >> 2] = $24; //@line 18961
      $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 18962
      HEAP32[$144 >> 2] = $8; //@line 18963
      $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 18964
      HEAP32[$145 >> 2] = $28; //@line 18965
      $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 18966
      HEAP32[$146 >> 2] = $26; //@line 18967
      $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 18968
      HEAP32[$147 >> 2] = $32; //@line 18969
      $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 18970
      HEAP32[$148 >> 2] = $34; //@line 18971
      $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 18972
      HEAP32[$149 >> 2] = $36; //@line 18973
      sp = STACKTOP; //@line 18974
      return;
     }
     ___async_unwind = 0; //@line 18977
     HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 18978
     $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 18979
     HEAP32[$130 >> 2] = $67; //@line 18980
     $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 18981
     $$expand_i1_val11 = $2 & 1; //@line 18982
     HEAP8[$131 >> 0] = $$expand_i1_val11; //@line 18983
     $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 18984
     HEAP32[$132 >> 2] = $4; //@line 18985
     $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 18986
     HEAP32[$133 >> 2] = $$06790; //@line 18987
     $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 18988
     HEAP32[$134 >> 2] = $66; //@line 18989
     $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 18990
     HEAP32[$135 >> 2] = $6; //@line 18991
     $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 18992
     HEAP32[$136 >> 2] = $14; //@line 18993
     $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 18994
     HEAP32[$137 >> 2] = $12; //@line 18995
     $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 18996
     HEAP32[$138 >> 2] = $10; //@line 18997
     $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 18998
     HEAP32[$139 >> 2] = $22; //@line 18999
     $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 19000
     HEAP32[$140 >> 2] = $16; //@line 19001
     $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 19002
     HEAP32[$141 >> 2] = $18; //@line 19003
     $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 19004
     HEAP32[$142 >> 2] = $20; //@line 19005
     $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 19006
     HEAP32[$143 >> 2] = $24; //@line 19007
     $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 19008
     HEAP32[$144 >> 2] = $8; //@line 19009
     $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 19010
     HEAP32[$145 >> 2] = $28; //@line 19011
     $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 19012
     HEAP32[$146 >> 2] = $26; //@line 19013
     $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 19014
     HEAP32[$147 >> 2] = $32; //@line 19015
     $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 19016
     HEAP32[$148 >> 2] = $34; //@line 19017
     $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 19018
     HEAP32[$149 >> 2] = $36; //@line 19019
     sp = STACKTOP; //@line 19020
     return;
    }
   }
  }
 } while (0);
 $165 = _equeue_tick() | 0; //@line 19026
 if ($2) {
  $166 = $28 - $165 | 0; //@line 19028
  if (($166 | 0) < 1) {
   $168 = $24 + 40 | 0; //@line 19031
   if (HEAP32[$168 >> 2] | 0) {
    _equeue_mutex_lock($10); //@line 19035
    $171 = HEAP32[$168 >> 2] | 0; //@line 19036
    if ($171 | 0) {
     $173 = HEAP32[$22 >> 2] | 0; //@line 19039
     if ($173 | 0) {
      $176 = HEAP32[$24 + 44 >> 2] | 0; //@line 19043
      $179 = (HEAP32[$173 + 20 >> 2] | 0) - $165 | 0; //@line 19046
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19050
      FUNCTION_TABLE_vii[$171 & 31]($176, $179 & ~($179 >> 31)); //@line 19051
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 19054
       $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 19055
       HEAP32[$183 >> 2] = $8; //@line 19056
       $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 19057
       HEAP32[$184 >> 2] = $10; //@line 19058
       $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 19059
       HEAP32[$185 >> 2] = $12; //@line 19060
       sp = STACKTOP; //@line 19061
       return;
      }
      ___async_unwind = 0; //@line 19064
      HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 19065
      $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 19066
      HEAP32[$183 >> 2] = $8; //@line 19067
      $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 19068
      HEAP32[$184 >> 2] = $10; //@line 19069
      $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 19070
      HEAP32[$185 >> 2] = $12; //@line 19071
      sp = STACKTOP; //@line 19072
      return;
     }
    }
    HEAP8[$8 >> 0] = 1; //@line 19076
    _equeue_mutex_unlock($10); //@line 19077
   }
   HEAP8[$12 >> 0] = 0; //@line 19079
   return;
  } else {
   $$065 = $166; //@line 19082
  }
 } else {
  $$065 = -1; //@line 19085
 }
 _equeue_mutex_lock($10); //@line 19087
 $186 = HEAP32[$22 >> 2] | 0; //@line 19088
 if (!$186) {
  $$2 = $$065; //@line 19091
 } else {
  $190 = (HEAP32[$186 + 20 >> 2] | 0) - $165 | 0; //@line 19095
  $193 = $190 & ~($190 >> 31); //@line 19098
  $$2 = $193 >>> 0 < $$065 >>> 0 ? $193 : $$065; //@line 19101
 }
 _equeue_mutex_unlock($10); //@line 19103
 _equeue_sema_wait($34, $$2) | 0; //@line 19104
 do {
  if (HEAP8[$12 >> 0] | 0) {
   _equeue_mutex_lock($10); //@line 19109
   if (!(HEAP8[$12 >> 0] | 0)) {
    _equeue_mutex_unlock($10); //@line 19113
    break;
   }
   HEAP8[$12 >> 0] = 0; //@line 19116
   _equeue_mutex_unlock($10); //@line 19117
   return;
  }
 } while (0);
 $199 = _equeue_tick() | 0; //@line 19121
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 19122
 _wait_ms(20); //@line 19123
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 19126
  $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 19127
  $$expand_i1_val13 = $2 & 1; //@line 19128
  HEAP8[$200 >> 0] = $$expand_i1_val13; //@line 19129
  $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 19130
  HEAP32[$201 >> 2] = $4; //@line 19131
  $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 19132
  HEAP32[$202 >> 2] = $6; //@line 19133
  $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 19134
  HEAP32[$203 >> 2] = $8; //@line 19135
  $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 19136
  HEAP32[$204 >> 2] = $10; //@line 19137
  $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 19138
  HEAP32[$205 >> 2] = $12; //@line 19139
  $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 19140
  HEAP32[$206 >> 2] = $14; //@line 19141
  $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 19142
  HEAP32[$207 >> 2] = $16; //@line 19143
  $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 19144
  HEAP32[$208 >> 2] = $18; //@line 19145
  $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 19146
  HEAP32[$209 >> 2] = $20; //@line 19147
  $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 19148
  HEAP32[$210 >> 2] = $22; //@line 19149
  $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 19150
  HEAP32[$211 >> 2] = $24; //@line 19151
  $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 19152
  HEAP32[$212 >> 2] = $26; //@line 19153
  $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 19154
  HEAP32[$213 >> 2] = $28; //@line 19155
  $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 19156
  HEAP32[$214 >> 2] = $199; //@line 19157
  $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 19158
  HEAP32[$215 >> 2] = $32; //@line 19159
  $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 19160
  HEAP32[$216 >> 2] = $34; //@line 19161
  $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 19162
  HEAP32[$217 >> 2] = $36; //@line 19163
  sp = STACKTOP; //@line 19164
  return;
 }
 ___async_unwind = 0; //@line 19167
 HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 19168
 $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 19169
 $$expand_i1_val13 = $2 & 1; //@line 19170
 HEAP8[$200 >> 0] = $$expand_i1_val13; //@line 19171
 $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 19172
 HEAP32[$201 >> 2] = $4; //@line 19173
 $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 19174
 HEAP32[$202 >> 2] = $6; //@line 19175
 $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 19176
 HEAP32[$203 >> 2] = $8; //@line 19177
 $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 19178
 HEAP32[$204 >> 2] = $10; //@line 19179
 $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 19180
 HEAP32[$205 >> 2] = $12; //@line 19181
 $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 19182
 HEAP32[$206 >> 2] = $14; //@line 19183
 $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 19184
 HEAP32[$207 >> 2] = $16; //@line 19185
 $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 19186
 HEAP32[$208 >> 2] = $18; //@line 19187
 $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 19188
 HEAP32[$209 >> 2] = $20; //@line 19189
 $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 19190
 HEAP32[$210 >> 2] = $22; //@line 19191
 $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 19192
 HEAP32[$211 >> 2] = $24; //@line 19193
 $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 19194
 HEAP32[$212 >> 2] = $26; //@line 19195
 $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 19196
 HEAP32[$213 >> 2] = $28; //@line 19197
 $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 19198
 HEAP32[$214 >> 2] = $199; //@line 19199
 $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 19200
 HEAP32[$215 >> 2] = $32; //@line 19201
 $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 19202
 HEAP32[$216 >> 2] = $34; //@line 19203
 $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 19204
 HEAP32[$217 >> 2] = $36; //@line 19205
 sp = STACKTOP; //@line 19206
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_50($0) {
 $0 = $0 | 0;
 var $$$1177 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val29 = 0, $$1$off0$expand_i1_val31 = 0, $$3$off0204 = 0, $$sink = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $139 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $151 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $269 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $48 = 0, $50 = 0, $54 = 0, $56 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22564
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22566
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22568
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22570
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22572
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22574
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22576
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 22580
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22582
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22584
 $22 = HEAP8[$0 + 44 >> 0] | 0; //@line 22586
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22588
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22590
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22592
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 22594
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22596
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 22598
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22600
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22602
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22604
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 22606
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 22610
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 22612
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 22614
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 22618
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 22620
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 22624
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 22626
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 22628
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 22630
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 22632
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 22634
 $72 = HEAP8[$0 + 144 >> 0] | 0; //@line 22636
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 22638
 $76 = (HEAP32[$0 + 88 >> 2] | 0) == (HEAP32[HEAP32[$0 + 116 >> 2] >> 2] | 0); //@line 22640
 $$$1177 = $76 ? HEAP32[$0 + 28 >> 2] | 0 : HEAP32[$0 + 104 >> 2] | 0; //@line 22641
 $80 = $60 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$8 >> 2] | 0) | 0) & 65535) >>> 0; //@line 22645
 $82 = (__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 4 | 0; //@line 22647
 if (!$80) {
  HEAP32[$82 >> 2] = 10; //@line 22649
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 32 >> 2] = $$$1177; //@line 22652
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 22653
  __ZN7LoRaMac21prepare_rx_done_abortEv($66); //@line 22654
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 396; //@line 22657
   $85 = $ReallocAsyncCtx10 + 4 | 0; //@line 22658
   HEAP32[$85 >> 2] = $12; //@line 22659
   $86 = $ReallocAsyncCtx10 + 8 | 0; //@line 22660
   HEAP32[$86 >> 2] = $36; //@line 22661
   sp = STACKTOP; //@line 22662
   return;
  }
  ___async_unwind = 0; //@line 22665
  HEAP32[$ReallocAsyncCtx10 >> 2] = 396; //@line 22666
  $85 = $ReallocAsyncCtx10 + 4 | 0; //@line 22667
  HEAP32[$85 >> 2] = $12; //@line 22668
  $86 = $ReallocAsyncCtx10 + 8 | 0; //@line 22669
  HEAP32[$86 >> 2] = $36; //@line 22670
  sp = STACKTOP; //@line 22671
  return;
 }
 if (!$76) {
  HEAP32[$82 >> 2] = 12; //@line 22675
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 22676
  __ZN7LoRaMac21prepare_rx_done_abortEv($66); //@line 22677
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 407; //@line 22680
   $261 = $ReallocAsyncCtx7 + 4 | 0; //@line 22681
   HEAP32[$261 >> 2] = $12; //@line 22682
   $262 = $ReallocAsyncCtx7 + 8 | 0; //@line 22683
   HEAP32[$262 >> 2] = $36; //@line 22684
   sp = STACKTOP; //@line 22685
   return;
  }
  ___async_unwind = 0; //@line 22688
  HEAP32[$ReallocAsyncCtx7 >> 2] = 407; //@line 22689
  $261 = $ReallocAsyncCtx7 + 4 | 0; //@line 22690
  HEAP32[$261 >> 2] = $12; //@line 22691
  $262 = $ReallocAsyncCtx7 + 8 | 0; //@line 22692
  HEAP32[$262 >> 2] = $36; //@line 22693
  sp = STACKTOP; //@line 22694
  return;
 }
 HEAP32[$82 >> 2] = 0; //@line 22697
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 8 >> 0] = $64; //@line 22700
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 11 >> 0] = ($16 & 255) >>> 4 & 1; //@line 22705
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 12 >> 2] = 0; //@line 22708
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 16 >> 1] = 0; //@line 22711
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 32 >> 2] = $$$1177; //@line 22714
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($24) | 0) + 4 >> 2] = 0; //@line 22717
 HEAP32[$66 + 964 >> 2] = 0; //@line 22719
 $102 = $66 + 4 | 0; //@line 22720
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($102); //@line 22721
 do {
  if ($64 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) >> 2] = 2; //@line 22726
   $105 = $2 + 36 | 0; //@line 22727
   $106 = HEAP32[$105 >> 2] | 0; //@line 22728
   if (($106 | 0) != ($$$1177 | 0) | ($106 | 0) == 0) {
    $$1$off0 = 0; //@line 22733
    $$sink = $105; //@line 22733
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 4 >> 2] = 8; //@line 22737
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 32 >> 2] = $$$1177; //@line 22740
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 22741
    __ZN7LoRaMac21prepare_rx_done_abortEv($66); //@line 22742
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 397; //@line 22745
     $113 = $ReallocAsyncCtx9 + 4 | 0; //@line 22746
     HEAP32[$113 >> 2] = $12; //@line 22747
     $114 = $ReallocAsyncCtx9 + 8 | 0; //@line 22748
     HEAP32[$114 >> 2] = $36; //@line 22749
     sp = STACKTOP; //@line 22750
     return;
    }
    ___async_unwind = 0; //@line 22753
    HEAP32[$ReallocAsyncCtx9 >> 2] = 397; //@line 22754
    $113 = $ReallocAsyncCtx9 + 4 | 0; //@line 22755
    HEAP32[$113 >> 2] = $12; //@line 22756
    $114 = $ReallocAsyncCtx9 + 8 | 0; //@line 22757
    HEAP32[$114 >> 2] = $36; //@line 22758
    sp = STACKTOP; //@line 22759
    return;
   }
  } else {
   $116 = $66 + 374 | 0; //@line 22764
   if ($30 << 24 >> 24 == 5) {
    HEAP8[$116 >> 0] = 1; //@line 22766
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) >> 2] = 1; //@line 22768
    $118 = $66 + 960 | 0; //@line 22769
    $119 = HEAP32[$118 >> 2] | 0; //@line 22770
    $$1$off0 = ($119 | 0) != 0 & ($119 | 0) == ($$$1177 | 0); //@line 22774
    $$sink = $118; //@line 22774
    break;
   }
   HEAP8[$116 >> 0] = 0; //@line 22777
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) >> 2] = 0; //@line 22779
   $123 = $66 + 960 | 0; //@line 22780
   $124 = HEAP32[$123 >> 2] | 0; //@line 22781
   if (($124 | 0) != ($$$1177 | 0) | ($124 | 0) == 0) {
    $$1$off0 = 0; //@line 22786
    $$sink = $123; //@line 22786
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 4 >> 2] = 8; //@line 22790
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 32 >> 2] = $$$1177; //@line 22793
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 22794
    __ZN7LoRaMac21prepare_rx_done_abortEv($66); //@line 22795
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 398; //@line 22798
     $131 = $ReallocAsyncCtx8 + 4 | 0; //@line 22799
     HEAP32[$131 >> 2] = $12; //@line 22800
     $132 = $ReallocAsyncCtx8 + 8 | 0; //@line 22801
     HEAP32[$132 >> 2] = $36; //@line 22802
     sp = STACKTOP; //@line 22803
     return;
    }
    ___async_unwind = 0; //@line 22806
    HEAP32[$ReallocAsyncCtx8 >> 2] = 398; //@line 22807
    $131 = $ReallocAsyncCtx8 + 4 | 0; //@line 22808
    HEAP32[$131 >> 2] = $12; //@line 22809
    $132 = $ReallocAsyncCtx8 + 8 | 0; //@line 22810
    HEAP32[$132 >> 2] = $36; //@line 22811
    sp = STACKTOP; //@line 22812
    return;
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $$$1177; //@line 22817
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($24) | 0) >> 2] | 0) == 1) {
  if ($16 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($102); //@line 22825
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($102); //@line 22828
 }
 do {
  if (($4 | 0) > ($26 | 0)) {
   $139 = $32 + 9 | 0; //@line 22833
   $141 = HEAP8[$68 + $26 >> 0] | 0; //@line 22835
   $142 = $4 - $139 | 0; //@line 22836
   $143 = $142 & 255; //@line 22837
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 9 >> 0] = $141; //@line 22840
   $147 = $34 << 24 >> 24 == 0; //@line 22842
   if (!($141 << 24 >> 24)) {
    if (!$147) {
     $$3$off0204 = 6; //@line 22845
     break;
    }
    $151 = $66 + 638 | 0; //@line 22851
    if (__Z15decrypt_payloadPKhtS0_jhjPh($68 + $139 | 0, $142 & 255, $74, $18, 1, $$$1177, $151) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 4 >> 2] = 13; //@line 22857
    }
    $156 = $66 + 264 | 0; //@line 22859
    $157 = __ZN11LoRaMacMlme16get_confirmationEv($156) | 0; //@line 22860
    $159 = HEAP32[$8 >> 2] | 0; //@line 22862
    $ReallocAsyncCtx21 = _emscripten_realloc_async_context(56) | 0; //@line 22863
    $160 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $151, 0, $143, $72, $157, $66 + 1096 | 0, $159) | 0; //@line 22864
    if (___async) {
     HEAP32[$ReallocAsyncCtx21 >> 2] = 399; //@line 22867
     $161 = $ReallocAsyncCtx21 + 4 | 0; //@line 22868
     HEAP32[$161 >> 2] = $102; //@line 22869
     $162 = $ReallocAsyncCtx21 + 8 | 0; //@line 22870
     HEAP32[$162 >> 2] = $24; //@line 22871
     $163 = $ReallocAsyncCtx21 + 12 | 0; //@line 22872
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 22873
     HEAP8[$163 >> 0] = $$1$off0$expand_i1_val; //@line 22874
     $164 = $ReallocAsyncCtx21 + 16 | 0; //@line 22875
     HEAP32[$164 >> 2] = $50; //@line 22876
     $165 = $ReallocAsyncCtx21 + 20 | 0; //@line 22877
     HEAP32[$165 >> 2] = $10; //@line 22878
     $166 = $ReallocAsyncCtx21 + 24 | 0; //@line 22879
     HEAP32[$166 >> 2] = $20; //@line 22880
     $167 = $ReallocAsyncCtx21 + 28 | 0; //@line 22881
     HEAP32[$167 >> 2] = $6; //@line 22882
     $168 = $ReallocAsyncCtx21 + 32 | 0; //@line 22883
     HEAP32[$168 >> 2] = $66; //@line 22884
     $169 = $ReallocAsyncCtx21 + 36 | 0; //@line 22885
     HEAP32[$169 >> 2] = $12; //@line 22886
     $170 = $ReallocAsyncCtx21 + 40 | 0; //@line 22887
     HEAP32[$170 >> 2] = $36; //@line 22888
     $171 = $ReallocAsyncCtx21 + 44 | 0; //@line 22889
     HEAP32[$171 >> 2] = $56; //@line 22890
     $172 = $ReallocAsyncCtx21 + 48 | 0; //@line 22891
     HEAP8[$172 >> 0] = $16; //@line 22892
     $173 = $ReallocAsyncCtx21 + 52 | 0; //@line 22893
     HEAP32[$173 >> 2] = $156; //@line 22894
     sp = STACKTOP; //@line 22895
     return;
    }
    HEAP32[___async_retval >> 2] = $160; //@line 22899
    ___async_unwind = 0; //@line 22900
    HEAP32[$ReallocAsyncCtx21 >> 2] = 399; //@line 22901
    $161 = $ReallocAsyncCtx21 + 4 | 0; //@line 22902
    HEAP32[$161 >> 2] = $102; //@line 22903
    $162 = $ReallocAsyncCtx21 + 8 | 0; //@line 22904
    HEAP32[$162 >> 2] = $24; //@line 22905
    $163 = $ReallocAsyncCtx21 + 12 | 0; //@line 22906
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 22907
    HEAP8[$163 >> 0] = $$1$off0$expand_i1_val; //@line 22908
    $164 = $ReallocAsyncCtx21 + 16 | 0; //@line 22909
    HEAP32[$164 >> 2] = $50; //@line 22910
    $165 = $ReallocAsyncCtx21 + 20 | 0; //@line 22911
    HEAP32[$165 >> 2] = $10; //@line 22912
    $166 = $ReallocAsyncCtx21 + 24 | 0; //@line 22913
    HEAP32[$166 >> 2] = $20; //@line 22914
    $167 = $ReallocAsyncCtx21 + 28 | 0; //@line 22915
    HEAP32[$167 >> 2] = $6; //@line 22916
    $168 = $ReallocAsyncCtx21 + 32 | 0; //@line 22917
    HEAP32[$168 >> 2] = $66; //@line 22918
    $169 = $ReallocAsyncCtx21 + 36 | 0; //@line 22919
    HEAP32[$169 >> 2] = $12; //@line 22920
    $170 = $ReallocAsyncCtx21 + 40 | 0; //@line 22921
    HEAP32[$170 >> 2] = $36; //@line 22922
    $171 = $ReallocAsyncCtx21 + 44 | 0; //@line 22923
    HEAP32[$171 >> 2] = $56; //@line 22924
    $172 = $ReallocAsyncCtx21 + 48 | 0; //@line 22925
    HEAP8[$172 >> 0] = $16; //@line 22926
    $173 = $ReallocAsyncCtx21 + 52 | 0; //@line 22927
    HEAP32[$173 >> 2] = $156; //@line 22928
    sp = STACKTOP; //@line 22929
    return;
   }
   if ($147) {
    $202 = $142 & 255; //@line 22935
    $203 = $66 + 638 | 0; //@line 22936
    if (__Z15decrypt_payloadPKhtS0_jhjPh($68 + $139 | 0, $202, $70, $18, 1, $$$1177, $203) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 4 >> 2] = 13; //@line 22942
    }
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 22945
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 12 >> 2] = $203; //@line 22950
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 16 >> 1] = $202; //@line 22953
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 18 >> 0] = 1; //@line 22956
    label = 44; //@line 22957
    break;
   } else {
    $175 = $66 + 264 | 0; //@line 22960
    $176 = __ZN11LoRaMacMlme16get_confirmationEv($175) | 0; //@line 22961
    $178 = HEAP32[$8 >> 2] | 0; //@line 22963
    $ReallocAsyncCtx20 = _emscripten_realloc_async_context(80) | 0; //@line 22964
    $179 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $68, 8, $22, $72, $176, $66 + 1096 | 0, $178) | 0; //@line 22965
    if (___async) {
     HEAP32[$ReallocAsyncCtx20 >> 2] = 401; //@line 22968
     $180 = $ReallocAsyncCtx20 + 4 | 0; //@line 22969
     HEAP32[$180 >> 2] = $24; //@line 22970
     $181 = $ReallocAsyncCtx20 + 8 | 0; //@line 22971
     HEAP32[$181 >> 2] = $175; //@line 22972
     $182 = $ReallocAsyncCtx20 + 12 | 0; //@line 22973
     HEAP32[$182 >> 2] = $66; //@line 22974
     $183 = $ReallocAsyncCtx20 + 16 | 0; //@line 22975
     HEAP32[$183 >> 2] = $102; //@line 22976
     $184 = $ReallocAsyncCtx20 + 20 | 0; //@line 22977
     HEAP32[$184 >> 2] = $56; //@line 22978
     $185 = $ReallocAsyncCtx20 + 24 | 0; //@line 22979
     HEAP32[$185 >> 2] = $12; //@line 22980
     $186 = $ReallocAsyncCtx20 + 28 | 0; //@line 22981
     HEAP32[$186 >> 2] = $36; //@line 22982
     $187 = $ReallocAsyncCtx20 + 32 | 0; //@line 22983
     HEAP8[$187 >> 0] = $16; //@line 22984
     $188 = $ReallocAsyncCtx20 + 36 | 0; //@line 22985
     HEAP32[$188 >> 2] = $68; //@line 22986
     $189 = $ReallocAsyncCtx20 + 40 | 0; //@line 22987
     HEAP32[$189 >> 2] = $139; //@line 22988
     $190 = $ReallocAsyncCtx20 + 44 | 0; //@line 22989
     HEAP32[$190 >> 2] = $142; //@line 22990
     $191 = $ReallocAsyncCtx20 + 48 | 0; //@line 22991
     HEAP32[$191 >> 2] = $70; //@line 22992
     $192 = $ReallocAsyncCtx20 + 52 | 0; //@line 22993
     HEAP32[$192 >> 2] = $18; //@line 22994
     $193 = $ReallocAsyncCtx20 + 56 | 0; //@line 22995
     HEAP32[$193 >> 2] = $$$1177; //@line 22996
     $194 = $ReallocAsyncCtx20 + 60 | 0; //@line 22997
     $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 22998
     HEAP8[$194 >> 0] = $$1$off0$expand_i1_val29; //@line 22999
     $195 = $ReallocAsyncCtx20 + 64 | 0; //@line 23000
     HEAP32[$195 >> 2] = $62; //@line 23001
     $196 = $ReallocAsyncCtx20 + 68 | 0; //@line 23002
     HEAP32[$196 >> 2] = $46; //@line 23003
     $197 = $ReallocAsyncCtx20 + 72 | 0; //@line 23004
     HEAP32[$197 >> 2] = $54; //@line 23005
     $198 = $ReallocAsyncCtx20 + 76 | 0; //@line 23006
     HEAP32[$198 >> 2] = $40; //@line 23007
     sp = STACKTOP; //@line 23008
     return;
    }
    HEAP32[___async_retval >> 2] = $179; //@line 23012
    ___async_unwind = 0; //@line 23013
    HEAP32[$ReallocAsyncCtx20 >> 2] = 401; //@line 23014
    $180 = $ReallocAsyncCtx20 + 4 | 0; //@line 23015
    HEAP32[$180 >> 2] = $24; //@line 23016
    $181 = $ReallocAsyncCtx20 + 8 | 0; //@line 23017
    HEAP32[$181 >> 2] = $175; //@line 23018
    $182 = $ReallocAsyncCtx20 + 12 | 0; //@line 23019
    HEAP32[$182 >> 2] = $66; //@line 23020
    $183 = $ReallocAsyncCtx20 + 16 | 0; //@line 23021
    HEAP32[$183 >> 2] = $102; //@line 23022
    $184 = $ReallocAsyncCtx20 + 20 | 0; //@line 23023
    HEAP32[$184 >> 2] = $56; //@line 23024
    $185 = $ReallocAsyncCtx20 + 24 | 0; //@line 23025
    HEAP32[$185 >> 2] = $12; //@line 23026
    $186 = $ReallocAsyncCtx20 + 28 | 0; //@line 23027
    HEAP32[$186 >> 2] = $36; //@line 23028
    $187 = $ReallocAsyncCtx20 + 32 | 0; //@line 23029
    HEAP8[$187 >> 0] = $16; //@line 23030
    $188 = $ReallocAsyncCtx20 + 36 | 0; //@line 23031
    HEAP32[$188 >> 2] = $68; //@line 23032
    $189 = $ReallocAsyncCtx20 + 40 | 0; //@line 23033
    HEAP32[$189 >> 2] = $139; //@line 23034
    $190 = $ReallocAsyncCtx20 + 44 | 0; //@line 23035
    HEAP32[$190 >> 2] = $142; //@line 23036
    $191 = $ReallocAsyncCtx20 + 48 | 0; //@line 23037
    HEAP32[$191 >> 2] = $70; //@line 23038
    $192 = $ReallocAsyncCtx20 + 52 | 0; //@line 23039
    HEAP32[$192 >> 2] = $18; //@line 23040
    $193 = $ReallocAsyncCtx20 + 56 | 0; //@line 23041
    HEAP32[$193 >> 2] = $$$1177; //@line 23042
    $194 = $ReallocAsyncCtx20 + 60 | 0; //@line 23043
    $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 23044
    HEAP8[$194 >> 0] = $$1$off0$expand_i1_val29; //@line 23045
    $195 = $ReallocAsyncCtx20 + 64 | 0; //@line 23046
    HEAP32[$195 >> 2] = $62; //@line 23047
    $196 = $ReallocAsyncCtx20 + 68 | 0; //@line 23048
    HEAP32[$196 >> 2] = $46; //@line 23049
    $197 = $ReallocAsyncCtx20 + 72 | 0; //@line 23050
    HEAP32[$197 >> 2] = $54; //@line 23051
    $198 = $ReallocAsyncCtx20 + 76 | 0; //@line 23052
    HEAP32[$198 >> 2] = $40; //@line 23053
    sp = STACKTOP; //@line 23054
    return;
   }
  } else {
   if (!($34 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 23061
     break;
    } else {
     label = 44; //@line 23064
     break;
    }
   }
   $215 = $66 + 264 | 0; //@line 23068
   $216 = __ZN11LoRaMacMlme16get_confirmationEv($215) | 0; //@line 23069
   $218 = HEAP32[$8 >> 2] | 0; //@line 23071
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(56) | 0; //@line 23072
   $219 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $68, 8, $22, $72, $216, $66 + 1096 | 0, $218) | 0; //@line 23073
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 403; //@line 23076
    $220 = $ReallocAsyncCtx19 + 4 | 0; //@line 23077
    HEAP32[$220 >> 2] = $66; //@line 23078
    $221 = $ReallocAsyncCtx19 + 8 | 0; //@line 23079
    HEAP32[$221 >> 2] = $12; //@line 23080
    $222 = $ReallocAsyncCtx19 + 12 | 0; //@line 23081
    HEAP32[$222 >> 2] = $36; //@line 23082
    $223 = $ReallocAsyncCtx19 + 16 | 0; //@line 23083
    HEAP32[$223 >> 2] = $56; //@line 23084
    $224 = $ReallocAsyncCtx19 + 20 | 0; //@line 23085
    HEAP32[$224 >> 2] = $42; //@line 23086
    $225 = $ReallocAsyncCtx19 + 24 | 0; //@line 23087
    HEAP32[$225 >> 2] = $38; //@line 23088
    $226 = $ReallocAsyncCtx19 + 28 | 0; //@line 23089
    HEAP32[$226 >> 2] = $48; //@line 23090
    $227 = $ReallocAsyncCtx19 + 32 | 0; //@line 23091
    HEAP32[$227 >> 2] = $28; //@line 23092
    $228 = $ReallocAsyncCtx19 + 36 | 0; //@line 23093
    $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 23094
    HEAP8[$228 >> 0] = $$1$off0$expand_i1_val31; //@line 23095
    $229 = $ReallocAsyncCtx19 + 40 | 0; //@line 23096
    HEAP32[$229 >> 2] = $24; //@line 23097
    $230 = $ReallocAsyncCtx19 + 44 | 0; //@line 23098
    HEAP32[$230 >> 2] = $102; //@line 23099
    $231 = $ReallocAsyncCtx19 + 48 | 0; //@line 23100
    HEAP8[$231 >> 0] = $16; //@line 23101
    $232 = $ReallocAsyncCtx19 + 52 | 0; //@line 23102
    HEAP32[$232 >> 2] = $215; //@line 23103
    sp = STACKTOP; //@line 23104
    return;
   }
   HEAP32[___async_retval >> 2] = $219; //@line 23108
   ___async_unwind = 0; //@line 23109
   HEAP32[$ReallocAsyncCtx19 >> 2] = 403; //@line 23110
   $220 = $ReallocAsyncCtx19 + 4 | 0; //@line 23111
   HEAP32[$220 >> 2] = $66; //@line 23112
   $221 = $ReallocAsyncCtx19 + 8 | 0; //@line 23113
   HEAP32[$221 >> 2] = $12; //@line 23114
   $222 = $ReallocAsyncCtx19 + 12 | 0; //@line 23115
   HEAP32[$222 >> 2] = $36; //@line 23116
   $223 = $ReallocAsyncCtx19 + 16 | 0; //@line 23117
   HEAP32[$223 >> 2] = $56; //@line 23118
   $224 = $ReallocAsyncCtx19 + 20 | 0; //@line 23119
   HEAP32[$224 >> 2] = $42; //@line 23120
   $225 = $ReallocAsyncCtx19 + 24 | 0; //@line 23121
   HEAP32[$225 >> 2] = $38; //@line 23122
   $226 = $ReallocAsyncCtx19 + 28 | 0; //@line 23123
   HEAP32[$226 >> 2] = $48; //@line 23124
   $227 = $ReallocAsyncCtx19 + 32 | 0; //@line 23125
   HEAP32[$227 >> 2] = $28; //@line 23126
   $228 = $ReallocAsyncCtx19 + 36 | 0; //@line 23127
   $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 23128
   HEAP8[$228 >> 0] = $$1$off0$expand_i1_val31; //@line 23129
   $229 = $ReallocAsyncCtx19 + 40 | 0; //@line 23130
   HEAP32[$229 >> 2] = $24; //@line 23131
   $230 = $ReallocAsyncCtx19 + 44 | 0; //@line 23132
   HEAP32[$230 >> 2] = $102; //@line 23133
   $231 = $ReallocAsyncCtx19 + 48 | 0; //@line 23134
   HEAP8[$231 >> 0] = $16; //@line 23135
   $232 = $ReallocAsyncCtx19 + 52 | 0; //@line 23136
   HEAP32[$232 >> 2] = $215; //@line 23137
   sp = STACKTOP; //@line 23138
   return;
  }
 } while (0);
 if ((label | 0) == 44) {
  $237 = (__ZN11LoRaMacMcps16get_confirmationEv($24) | 0) + 10 | 0; //@line 23146
  if ($16 & 32) {
   HEAP8[$237 >> 0] = 1; //@line 23148
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($24) | 0) + 28 >> 0] = 1; //@line 23151
   $240 = HEAP32[$56 >> 2] | 0; //@line 23152
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 23154
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($240, $66 + 1076 | 0); //@line 23155
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 23158
    $242 = $ReallocAsyncCtx23 + 4 | 0; //@line 23159
    HEAP32[$242 >> 2] = $66; //@line 23160
    $243 = $ReallocAsyncCtx23 + 8 | 0; //@line 23161
    HEAP32[$243 >> 2] = $56; //@line 23162
    $244 = $ReallocAsyncCtx23 + 12 | 0; //@line 23163
    HEAP32[$244 >> 2] = $12; //@line 23164
    $245 = $ReallocAsyncCtx23 + 16 | 0; //@line 23165
    HEAP32[$245 >> 2] = $36; //@line 23166
    sp = STACKTOP; //@line 23167
    return;
   }
   ___async_unwind = 0; //@line 23170
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 23171
   $242 = $ReallocAsyncCtx23 + 4 | 0; //@line 23172
   HEAP32[$242 >> 2] = $66; //@line 23173
   $243 = $ReallocAsyncCtx23 + 8 | 0; //@line 23174
   HEAP32[$243 >> 2] = $56; //@line 23175
   $244 = $ReallocAsyncCtx23 + 12 | 0; //@line 23176
   HEAP32[$244 >> 2] = $12; //@line 23177
   $245 = $ReallocAsyncCtx23 + 16 | 0; //@line 23178
   HEAP32[$245 >> 2] = $36; //@line 23179
   sp = STACKTOP; //@line 23180
   return;
  }
  HEAP8[$237 >> 0] = 0; //@line 23183
  if ((HEAPU8[$66 + 895 >> 0] | 0) > (HEAPU8[$66 + 894 >> 0] | 0)) {
   $251 = HEAP32[$56 >> 2] | 0; //@line 23190
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 23192
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($251, $66 + 1076 | 0); //@line 23193
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 23196
    $253 = $ReallocAsyncCtx22 + 4 | 0; //@line 23197
    HEAP32[$253 >> 2] = $66; //@line 23198
    $254 = $ReallocAsyncCtx22 + 8 | 0; //@line 23199
    HEAP32[$254 >> 2] = $56; //@line 23200
    $255 = $ReallocAsyncCtx22 + 12 | 0; //@line 23201
    HEAP32[$255 >> 2] = $12; //@line 23202
    $256 = $ReallocAsyncCtx22 + 16 | 0; //@line 23203
    HEAP32[$256 >> 2] = $36; //@line 23204
    sp = STACKTOP; //@line 23205
    return;
   }
   ___async_unwind = 0; //@line 23208
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 23209
   $253 = $ReallocAsyncCtx22 + 4 | 0; //@line 23210
   HEAP32[$253 >> 2] = $66; //@line 23211
   $254 = $ReallocAsyncCtx22 + 8 | 0; //@line 23212
   HEAP32[$254 >> 2] = $56; //@line 23213
   $255 = $ReallocAsyncCtx22 + 12 | 0; //@line 23214
   HEAP32[$255 >> 2] = $12; //@line 23215
   $256 = $ReallocAsyncCtx22 + 16 | 0; //@line 23216
   HEAP32[$256 >> 2] = $36; //@line 23217
   sp = STACKTOP; //@line 23218
   return;
  } else {
   $$3$off0204 = 2; //@line 23221
  }
 }
 $257 = $66 + 944 | 0; //@line 23224
 HEAP8[$257 >> 0] = $$3$off0204 | HEAP8[$257 >> 0] & -7; //@line 23228
 $263 = $66 + 944 | 0; //@line 23229
 HEAP8[$263 >> 0] = HEAP8[$263 >> 0] | 32; //@line 23232
 $266 = HEAP32[$56 >> 2] | 0; //@line 23233
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 23235
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($266, $66 + 996 | 0, 1); //@line 23236
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 23239
  $268 = $ReallocAsyncCtx17 + 4 | 0; //@line 23240
  HEAP32[$268 >> 2] = $12; //@line 23241
  $269 = $ReallocAsyncCtx17 + 8 | 0; //@line 23242
  HEAP32[$269 >> 2] = $36; //@line 23243
  sp = STACKTOP; //@line 23244
  return;
 }
 ___async_unwind = 0; //@line 23247
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 23248
 $268 = $ReallocAsyncCtx17 + 4 | 0; //@line 23249
 HEAP32[$268 >> 2] = $12; //@line 23250
 $269 = $ReallocAsyncCtx17 + 8 | 0; //@line 23251
 HEAP32[$269 >> 2] = $36; //@line 23252
 sp = STACKTOP; //@line 23253
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_51($0) {
 $0 = $0 | 0;
 var $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val29 = 0, $$1$off0$expand_i1_val31 = 0, $$3$off0204 = 0, $$sink = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $129 = 0, $130 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $149 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $235 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $266 = 0, $267 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23273
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23275
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23277
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23279
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23281
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23283
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23285
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 23287
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23289
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23291
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 23293
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23295
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23297
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23299
 $28 = HEAP8[$0 + 56 >> 0] | 0; //@line 23301
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23303
 $32 = HEAP8[$0 + 64 >> 0] | 0; //@line 23305
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23307
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23309
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 23311
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 23313
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 23317
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 23319
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 23321
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 23323
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 23325
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 23329
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 23331
 $60 = HEAP8[$0 + 120 >> 0] | 0; //@line 23333
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 23335
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 23337
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 23339
 $68 = HEAP8[$0 + 136 >> 0] | 0; //@line 23341
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 23343
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 23345
 $74 = (HEAP32[$0 + 84 >> 2] | 0) == (HEAP32[HEAP32[$0 + 108 >> 2] >> 2] | 0); //@line 23347
 $78 = $56 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$8 >> 2] | 0) | 0) & 65535) >>> 0; //@line 23351
 $80 = (__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 4 | 0; //@line 23353
 if (!$78) {
  HEAP32[$80 >> 2] = 10; //@line 23355
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 32 >> 2] = $72; //@line 23358
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 23359
  __ZN7LoRaMac21prepare_rx_done_abortEv($62); //@line 23360
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 396; //@line 23363
   $83 = $ReallocAsyncCtx10 + 4 | 0; //@line 23364
   HEAP32[$83 >> 2] = $12; //@line 23365
   $84 = $ReallocAsyncCtx10 + 8 | 0; //@line 23366
   HEAP32[$84 >> 2] = $34; //@line 23367
   sp = STACKTOP; //@line 23368
   return;
  }
  ___async_unwind = 0; //@line 23371
  HEAP32[$ReallocAsyncCtx10 >> 2] = 396; //@line 23372
  $83 = $ReallocAsyncCtx10 + 4 | 0; //@line 23373
  HEAP32[$83 >> 2] = $12; //@line 23374
  $84 = $ReallocAsyncCtx10 + 8 | 0; //@line 23375
  HEAP32[$84 >> 2] = $34; //@line 23376
  sp = STACKTOP; //@line 23377
  return;
 }
 if (!$74) {
  HEAP32[$80 >> 2] = 12; //@line 23381
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 23382
  __ZN7LoRaMac21prepare_rx_done_abortEv($62); //@line 23383
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 407; //@line 23386
   $259 = $ReallocAsyncCtx7 + 4 | 0; //@line 23387
   HEAP32[$259 >> 2] = $12; //@line 23388
   $260 = $ReallocAsyncCtx7 + 8 | 0; //@line 23389
   HEAP32[$260 >> 2] = $34; //@line 23390
   sp = STACKTOP; //@line 23391
   return;
  }
  ___async_unwind = 0; //@line 23394
  HEAP32[$ReallocAsyncCtx7 >> 2] = 407; //@line 23395
  $259 = $ReallocAsyncCtx7 + 4 | 0; //@line 23396
  HEAP32[$259 >> 2] = $12; //@line 23397
  $260 = $ReallocAsyncCtx7 + 8 | 0; //@line 23398
  HEAP32[$260 >> 2] = $34; //@line 23399
  sp = STACKTOP; //@line 23400
  return;
 }
 HEAP32[$80 >> 2] = 0; //@line 23403
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 8 >> 0] = $60; //@line 23406
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 11 >> 0] = ($14 & 255) >>> 4 & 1; //@line 23411
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 12 >> 2] = 0; //@line 23414
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 16 >> 1] = 0; //@line 23417
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 32 >> 2] = $72; //@line 23420
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($22) | 0) + 4 >> 2] = 0; //@line 23423
 HEAP32[$62 + 964 >> 2] = 0; //@line 23425
 $100 = $62 + 4 | 0; //@line 23426
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($100); //@line 23427
 do {
  if ($60 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) >> 2] = 2; //@line 23432
   $103 = $2 + 36 | 0; //@line 23433
   $104 = HEAP32[$103 >> 2] | 0; //@line 23434
   if (($104 | 0) != ($72 | 0) | ($104 | 0) == 0) {
    $$1$off0 = 0; //@line 23439
    $$sink = $103; //@line 23439
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 4 >> 2] = 8; //@line 23443
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 32 >> 2] = $72; //@line 23446
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 23447
    __ZN7LoRaMac21prepare_rx_done_abortEv($62); //@line 23448
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 397; //@line 23451
     $111 = $ReallocAsyncCtx9 + 4 | 0; //@line 23452
     HEAP32[$111 >> 2] = $12; //@line 23453
     $112 = $ReallocAsyncCtx9 + 8 | 0; //@line 23454
     HEAP32[$112 >> 2] = $34; //@line 23455
     sp = STACKTOP; //@line 23456
     return;
    }
    ___async_unwind = 0; //@line 23459
    HEAP32[$ReallocAsyncCtx9 >> 2] = 397; //@line 23460
    $111 = $ReallocAsyncCtx9 + 4 | 0; //@line 23461
    HEAP32[$111 >> 2] = $12; //@line 23462
    $112 = $ReallocAsyncCtx9 + 8 | 0; //@line 23463
    HEAP32[$112 >> 2] = $34; //@line 23464
    sp = STACKTOP; //@line 23465
    return;
   }
  } else {
   $114 = $62 + 374 | 0; //@line 23470
   if ($28 << 24 >> 24 == 5) {
    HEAP8[$114 >> 0] = 1; //@line 23472
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) >> 2] = 1; //@line 23474
    $116 = $62 + 960 | 0; //@line 23475
    $117 = HEAP32[$116 >> 2] | 0; //@line 23476
    $$1$off0 = ($117 | 0) != 0 & ($117 | 0) == ($72 | 0); //@line 23480
    $$sink = $116; //@line 23480
    break;
   }
   HEAP8[$114 >> 0] = 0; //@line 23483
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) >> 2] = 0; //@line 23485
   $121 = $62 + 960 | 0; //@line 23486
   $122 = HEAP32[$121 >> 2] | 0; //@line 23487
   if (($122 | 0) != ($72 | 0) | ($122 | 0) == 0) {
    $$1$off0 = 0; //@line 23492
    $$sink = $121; //@line 23492
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 4 >> 2] = 8; //@line 23496
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 32 >> 2] = $72; //@line 23499
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 23500
    __ZN7LoRaMac21prepare_rx_done_abortEv($62); //@line 23501
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 398; //@line 23504
     $129 = $ReallocAsyncCtx8 + 4 | 0; //@line 23505
     HEAP32[$129 >> 2] = $12; //@line 23506
     $130 = $ReallocAsyncCtx8 + 8 | 0; //@line 23507
     HEAP32[$130 >> 2] = $34; //@line 23508
     sp = STACKTOP; //@line 23509
     return;
    }
    ___async_unwind = 0; //@line 23512
    HEAP32[$ReallocAsyncCtx8 >> 2] = 398; //@line 23513
    $129 = $ReallocAsyncCtx8 + 4 | 0; //@line 23514
    HEAP32[$129 >> 2] = $12; //@line 23515
    $130 = $ReallocAsyncCtx8 + 8 | 0; //@line 23516
    HEAP32[$130 >> 2] = $34; //@line 23517
    sp = STACKTOP; //@line 23518
    return;
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $72; //@line 23523
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($22) | 0) >> 2] | 0) == 1) {
  if ($14 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($100); //@line 23531
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($100); //@line 23534
 }
 do {
  if (($4 | 0) > ($24 | 0)) {
   $137 = $30 + 9 | 0; //@line 23539
   $139 = HEAP8[$64 + $24 >> 0] | 0; //@line 23541
   $140 = $4 - $137 | 0; //@line 23542
   $141 = $140 & 255; //@line 23543
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 9 >> 0] = $139; //@line 23546
   $145 = $32 << 24 >> 24 == 0; //@line 23548
   if (!($139 << 24 >> 24)) {
    if (!$145) {
     $$3$off0204 = 6; //@line 23551
     break;
    }
    $149 = $62 + 638 | 0; //@line 23557
    if (__Z15decrypt_payloadPKhtS0_jhjPh($64 + $137 | 0, $140 & 255, $70, $16, 1, $72, $149) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 4 >> 2] = 13; //@line 23563
    }
    $154 = $62 + 264 | 0; //@line 23565
    $155 = __ZN11LoRaMacMlme16get_confirmationEv($154) | 0; //@line 23566
    $157 = HEAP32[$8 >> 2] | 0; //@line 23568
    $ReallocAsyncCtx21 = _emscripten_realloc_async_context(56) | 0; //@line 23569
    $158 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $149, 0, $141, $68, $155, $62 + 1096 | 0, $157) | 0; //@line 23570
    if (___async) {
     HEAP32[$ReallocAsyncCtx21 >> 2] = 399; //@line 23573
     $159 = $ReallocAsyncCtx21 + 4 | 0; //@line 23574
     HEAP32[$159 >> 2] = $100; //@line 23575
     $160 = $ReallocAsyncCtx21 + 8 | 0; //@line 23576
     HEAP32[$160 >> 2] = $22; //@line 23577
     $161 = $ReallocAsyncCtx21 + 12 | 0; //@line 23578
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 23579
     HEAP8[$161 >> 0] = $$1$off0$expand_i1_val; //@line 23580
     $162 = $ReallocAsyncCtx21 + 16 | 0; //@line 23581
     HEAP32[$162 >> 2] = $48; //@line 23582
     $163 = $ReallocAsyncCtx21 + 20 | 0; //@line 23583
     HEAP32[$163 >> 2] = $10; //@line 23584
     $164 = $ReallocAsyncCtx21 + 24 | 0; //@line 23585
     HEAP32[$164 >> 2] = $18; //@line 23586
     $165 = $ReallocAsyncCtx21 + 28 | 0; //@line 23587
     HEAP32[$165 >> 2] = $6; //@line 23588
     $166 = $ReallocAsyncCtx21 + 32 | 0; //@line 23589
     HEAP32[$166 >> 2] = $62; //@line 23590
     $167 = $ReallocAsyncCtx21 + 36 | 0; //@line 23591
     HEAP32[$167 >> 2] = $12; //@line 23592
     $168 = $ReallocAsyncCtx21 + 40 | 0; //@line 23593
     HEAP32[$168 >> 2] = $34; //@line 23594
     $169 = $ReallocAsyncCtx21 + 44 | 0; //@line 23595
     HEAP32[$169 >> 2] = $52; //@line 23596
     $170 = $ReallocAsyncCtx21 + 48 | 0; //@line 23597
     HEAP8[$170 >> 0] = $14; //@line 23598
     $171 = $ReallocAsyncCtx21 + 52 | 0; //@line 23599
     HEAP32[$171 >> 2] = $154; //@line 23600
     sp = STACKTOP; //@line 23601
     return;
    }
    HEAP32[___async_retval >> 2] = $158; //@line 23605
    ___async_unwind = 0; //@line 23606
    HEAP32[$ReallocAsyncCtx21 >> 2] = 399; //@line 23607
    $159 = $ReallocAsyncCtx21 + 4 | 0; //@line 23608
    HEAP32[$159 >> 2] = $100; //@line 23609
    $160 = $ReallocAsyncCtx21 + 8 | 0; //@line 23610
    HEAP32[$160 >> 2] = $22; //@line 23611
    $161 = $ReallocAsyncCtx21 + 12 | 0; //@line 23612
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 23613
    HEAP8[$161 >> 0] = $$1$off0$expand_i1_val; //@line 23614
    $162 = $ReallocAsyncCtx21 + 16 | 0; //@line 23615
    HEAP32[$162 >> 2] = $48; //@line 23616
    $163 = $ReallocAsyncCtx21 + 20 | 0; //@line 23617
    HEAP32[$163 >> 2] = $10; //@line 23618
    $164 = $ReallocAsyncCtx21 + 24 | 0; //@line 23619
    HEAP32[$164 >> 2] = $18; //@line 23620
    $165 = $ReallocAsyncCtx21 + 28 | 0; //@line 23621
    HEAP32[$165 >> 2] = $6; //@line 23622
    $166 = $ReallocAsyncCtx21 + 32 | 0; //@line 23623
    HEAP32[$166 >> 2] = $62; //@line 23624
    $167 = $ReallocAsyncCtx21 + 36 | 0; //@line 23625
    HEAP32[$167 >> 2] = $12; //@line 23626
    $168 = $ReallocAsyncCtx21 + 40 | 0; //@line 23627
    HEAP32[$168 >> 2] = $34; //@line 23628
    $169 = $ReallocAsyncCtx21 + 44 | 0; //@line 23629
    HEAP32[$169 >> 2] = $52; //@line 23630
    $170 = $ReallocAsyncCtx21 + 48 | 0; //@line 23631
    HEAP8[$170 >> 0] = $14; //@line 23632
    $171 = $ReallocAsyncCtx21 + 52 | 0; //@line 23633
    HEAP32[$171 >> 2] = $154; //@line 23634
    sp = STACKTOP; //@line 23635
    return;
   }
   if ($145) {
    $200 = $140 & 255; //@line 23641
    $201 = $62 + 638 | 0; //@line 23642
    if (__Z15decrypt_payloadPKhtS0_jhjPh($64 + $137 | 0, $200, $66, $16, 1, $72, $201) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 4 >> 2] = 13; //@line 23648
    }
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 23651
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 12 >> 2] = $201; //@line 23656
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 16 >> 1] = $200; //@line 23659
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 18 >> 0] = 1; //@line 23662
    label = 44; //@line 23663
    break;
   } else {
    $173 = $62 + 264 | 0; //@line 23666
    $174 = __ZN11LoRaMacMlme16get_confirmationEv($173) | 0; //@line 23667
    $176 = HEAP32[$8 >> 2] | 0; //@line 23669
    $ReallocAsyncCtx20 = _emscripten_realloc_async_context(80) | 0; //@line 23670
    $177 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $64, 8, $20, $68, $174, $62 + 1096 | 0, $176) | 0; //@line 23671
    if (___async) {
     HEAP32[$ReallocAsyncCtx20 >> 2] = 401; //@line 23674
     $178 = $ReallocAsyncCtx20 + 4 | 0; //@line 23675
     HEAP32[$178 >> 2] = $22; //@line 23676
     $179 = $ReallocAsyncCtx20 + 8 | 0; //@line 23677
     HEAP32[$179 >> 2] = $173; //@line 23678
     $180 = $ReallocAsyncCtx20 + 12 | 0; //@line 23679
     HEAP32[$180 >> 2] = $62; //@line 23680
     $181 = $ReallocAsyncCtx20 + 16 | 0; //@line 23681
     HEAP32[$181 >> 2] = $100; //@line 23682
     $182 = $ReallocAsyncCtx20 + 20 | 0; //@line 23683
     HEAP32[$182 >> 2] = $52; //@line 23684
     $183 = $ReallocAsyncCtx20 + 24 | 0; //@line 23685
     HEAP32[$183 >> 2] = $12; //@line 23686
     $184 = $ReallocAsyncCtx20 + 28 | 0; //@line 23687
     HEAP32[$184 >> 2] = $34; //@line 23688
     $185 = $ReallocAsyncCtx20 + 32 | 0; //@line 23689
     HEAP8[$185 >> 0] = $14; //@line 23690
     $186 = $ReallocAsyncCtx20 + 36 | 0; //@line 23691
     HEAP32[$186 >> 2] = $64; //@line 23692
     $187 = $ReallocAsyncCtx20 + 40 | 0; //@line 23693
     HEAP32[$187 >> 2] = $137; //@line 23694
     $188 = $ReallocAsyncCtx20 + 44 | 0; //@line 23695
     HEAP32[$188 >> 2] = $140; //@line 23696
     $189 = $ReallocAsyncCtx20 + 48 | 0; //@line 23697
     HEAP32[$189 >> 2] = $66; //@line 23698
     $190 = $ReallocAsyncCtx20 + 52 | 0; //@line 23699
     HEAP32[$190 >> 2] = $16; //@line 23700
     $191 = $ReallocAsyncCtx20 + 56 | 0; //@line 23701
     HEAP32[$191 >> 2] = $72; //@line 23702
     $192 = $ReallocAsyncCtx20 + 60 | 0; //@line 23703
     $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 23704
     HEAP8[$192 >> 0] = $$1$off0$expand_i1_val29; //@line 23705
     $193 = $ReallocAsyncCtx20 + 64 | 0; //@line 23706
     HEAP32[$193 >> 2] = $58; //@line 23707
     $194 = $ReallocAsyncCtx20 + 68 | 0; //@line 23708
     HEAP32[$194 >> 2] = $44; //@line 23709
     $195 = $ReallocAsyncCtx20 + 72 | 0; //@line 23710
     HEAP32[$195 >> 2] = $50; //@line 23711
     $196 = $ReallocAsyncCtx20 + 76 | 0; //@line 23712
     HEAP32[$196 >> 2] = $38; //@line 23713
     sp = STACKTOP; //@line 23714
     return;
    }
    HEAP32[___async_retval >> 2] = $177; //@line 23718
    ___async_unwind = 0; //@line 23719
    HEAP32[$ReallocAsyncCtx20 >> 2] = 401; //@line 23720
    $178 = $ReallocAsyncCtx20 + 4 | 0; //@line 23721
    HEAP32[$178 >> 2] = $22; //@line 23722
    $179 = $ReallocAsyncCtx20 + 8 | 0; //@line 23723
    HEAP32[$179 >> 2] = $173; //@line 23724
    $180 = $ReallocAsyncCtx20 + 12 | 0; //@line 23725
    HEAP32[$180 >> 2] = $62; //@line 23726
    $181 = $ReallocAsyncCtx20 + 16 | 0; //@line 23727
    HEAP32[$181 >> 2] = $100; //@line 23728
    $182 = $ReallocAsyncCtx20 + 20 | 0; //@line 23729
    HEAP32[$182 >> 2] = $52; //@line 23730
    $183 = $ReallocAsyncCtx20 + 24 | 0; //@line 23731
    HEAP32[$183 >> 2] = $12; //@line 23732
    $184 = $ReallocAsyncCtx20 + 28 | 0; //@line 23733
    HEAP32[$184 >> 2] = $34; //@line 23734
    $185 = $ReallocAsyncCtx20 + 32 | 0; //@line 23735
    HEAP8[$185 >> 0] = $14; //@line 23736
    $186 = $ReallocAsyncCtx20 + 36 | 0; //@line 23737
    HEAP32[$186 >> 2] = $64; //@line 23738
    $187 = $ReallocAsyncCtx20 + 40 | 0; //@line 23739
    HEAP32[$187 >> 2] = $137; //@line 23740
    $188 = $ReallocAsyncCtx20 + 44 | 0; //@line 23741
    HEAP32[$188 >> 2] = $140; //@line 23742
    $189 = $ReallocAsyncCtx20 + 48 | 0; //@line 23743
    HEAP32[$189 >> 2] = $66; //@line 23744
    $190 = $ReallocAsyncCtx20 + 52 | 0; //@line 23745
    HEAP32[$190 >> 2] = $16; //@line 23746
    $191 = $ReallocAsyncCtx20 + 56 | 0; //@line 23747
    HEAP32[$191 >> 2] = $72; //@line 23748
    $192 = $ReallocAsyncCtx20 + 60 | 0; //@line 23749
    $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 23750
    HEAP8[$192 >> 0] = $$1$off0$expand_i1_val29; //@line 23751
    $193 = $ReallocAsyncCtx20 + 64 | 0; //@line 23752
    HEAP32[$193 >> 2] = $58; //@line 23753
    $194 = $ReallocAsyncCtx20 + 68 | 0; //@line 23754
    HEAP32[$194 >> 2] = $44; //@line 23755
    $195 = $ReallocAsyncCtx20 + 72 | 0; //@line 23756
    HEAP32[$195 >> 2] = $50; //@line 23757
    $196 = $ReallocAsyncCtx20 + 76 | 0; //@line 23758
    HEAP32[$196 >> 2] = $38; //@line 23759
    sp = STACKTOP; //@line 23760
    return;
   }
  } else {
   if (!($32 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 23767
     break;
    } else {
     label = 44; //@line 23770
     break;
    }
   }
   $213 = $62 + 264 | 0; //@line 23774
   $214 = __ZN11LoRaMacMlme16get_confirmationEv($213) | 0; //@line 23775
   $216 = HEAP32[$8 >> 2] | 0; //@line 23777
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(56) | 0; //@line 23778
   $217 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $64, 8, $20, $68, $214, $62 + 1096 | 0, $216) | 0; //@line 23779
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 403; //@line 23782
    $218 = $ReallocAsyncCtx19 + 4 | 0; //@line 23783
    HEAP32[$218 >> 2] = $62; //@line 23784
    $219 = $ReallocAsyncCtx19 + 8 | 0; //@line 23785
    HEAP32[$219 >> 2] = $12; //@line 23786
    $220 = $ReallocAsyncCtx19 + 12 | 0; //@line 23787
    HEAP32[$220 >> 2] = $34; //@line 23788
    $221 = $ReallocAsyncCtx19 + 16 | 0; //@line 23789
    HEAP32[$221 >> 2] = $52; //@line 23790
    $222 = $ReallocAsyncCtx19 + 20 | 0; //@line 23791
    HEAP32[$222 >> 2] = $40; //@line 23792
    $223 = $ReallocAsyncCtx19 + 24 | 0; //@line 23793
    HEAP32[$223 >> 2] = $36; //@line 23794
    $224 = $ReallocAsyncCtx19 + 28 | 0; //@line 23795
    HEAP32[$224 >> 2] = $46; //@line 23796
    $225 = $ReallocAsyncCtx19 + 32 | 0; //@line 23797
    HEAP32[$225 >> 2] = $26; //@line 23798
    $226 = $ReallocAsyncCtx19 + 36 | 0; //@line 23799
    $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 23800
    HEAP8[$226 >> 0] = $$1$off0$expand_i1_val31; //@line 23801
    $227 = $ReallocAsyncCtx19 + 40 | 0; //@line 23802
    HEAP32[$227 >> 2] = $22; //@line 23803
    $228 = $ReallocAsyncCtx19 + 44 | 0; //@line 23804
    HEAP32[$228 >> 2] = $100; //@line 23805
    $229 = $ReallocAsyncCtx19 + 48 | 0; //@line 23806
    HEAP8[$229 >> 0] = $14; //@line 23807
    $230 = $ReallocAsyncCtx19 + 52 | 0; //@line 23808
    HEAP32[$230 >> 2] = $213; //@line 23809
    sp = STACKTOP; //@line 23810
    return;
   }
   HEAP32[___async_retval >> 2] = $217; //@line 23814
   ___async_unwind = 0; //@line 23815
   HEAP32[$ReallocAsyncCtx19 >> 2] = 403; //@line 23816
   $218 = $ReallocAsyncCtx19 + 4 | 0; //@line 23817
   HEAP32[$218 >> 2] = $62; //@line 23818
   $219 = $ReallocAsyncCtx19 + 8 | 0; //@line 23819
   HEAP32[$219 >> 2] = $12; //@line 23820
   $220 = $ReallocAsyncCtx19 + 12 | 0; //@line 23821
   HEAP32[$220 >> 2] = $34; //@line 23822
   $221 = $ReallocAsyncCtx19 + 16 | 0; //@line 23823
   HEAP32[$221 >> 2] = $52; //@line 23824
   $222 = $ReallocAsyncCtx19 + 20 | 0; //@line 23825
   HEAP32[$222 >> 2] = $40; //@line 23826
   $223 = $ReallocAsyncCtx19 + 24 | 0; //@line 23827
   HEAP32[$223 >> 2] = $36; //@line 23828
   $224 = $ReallocAsyncCtx19 + 28 | 0; //@line 23829
   HEAP32[$224 >> 2] = $46; //@line 23830
   $225 = $ReallocAsyncCtx19 + 32 | 0; //@line 23831
   HEAP32[$225 >> 2] = $26; //@line 23832
   $226 = $ReallocAsyncCtx19 + 36 | 0; //@line 23833
   $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 23834
   HEAP8[$226 >> 0] = $$1$off0$expand_i1_val31; //@line 23835
   $227 = $ReallocAsyncCtx19 + 40 | 0; //@line 23836
   HEAP32[$227 >> 2] = $22; //@line 23837
   $228 = $ReallocAsyncCtx19 + 44 | 0; //@line 23838
   HEAP32[$228 >> 2] = $100; //@line 23839
   $229 = $ReallocAsyncCtx19 + 48 | 0; //@line 23840
   HEAP8[$229 >> 0] = $14; //@line 23841
   $230 = $ReallocAsyncCtx19 + 52 | 0; //@line 23842
   HEAP32[$230 >> 2] = $213; //@line 23843
   sp = STACKTOP; //@line 23844
   return;
  }
 } while (0);
 if ((label | 0) == 44) {
  $235 = (__ZN11LoRaMacMcps16get_confirmationEv($22) | 0) + 10 | 0; //@line 23852
  if ($14 & 32) {
   HEAP8[$235 >> 0] = 1; //@line 23854
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 28 >> 0] = 1; //@line 23857
   $238 = HEAP32[$52 >> 2] | 0; //@line 23858
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 23860
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($238, $62 + 1076 | 0); //@line 23861
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 23864
    $240 = $ReallocAsyncCtx23 + 4 | 0; //@line 23865
    HEAP32[$240 >> 2] = $62; //@line 23866
    $241 = $ReallocAsyncCtx23 + 8 | 0; //@line 23867
    HEAP32[$241 >> 2] = $52; //@line 23868
    $242 = $ReallocAsyncCtx23 + 12 | 0; //@line 23869
    HEAP32[$242 >> 2] = $12; //@line 23870
    $243 = $ReallocAsyncCtx23 + 16 | 0; //@line 23871
    HEAP32[$243 >> 2] = $34; //@line 23872
    sp = STACKTOP; //@line 23873
    return;
   }
   ___async_unwind = 0; //@line 23876
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 23877
   $240 = $ReallocAsyncCtx23 + 4 | 0; //@line 23878
   HEAP32[$240 >> 2] = $62; //@line 23879
   $241 = $ReallocAsyncCtx23 + 8 | 0; //@line 23880
   HEAP32[$241 >> 2] = $52; //@line 23881
   $242 = $ReallocAsyncCtx23 + 12 | 0; //@line 23882
   HEAP32[$242 >> 2] = $12; //@line 23883
   $243 = $ReallocAsyncCtx23 + 16 | 0; //@line 23884
   HEAP32[$243 >> 2] = $34; //@line 23885
   sp = STACKTOP; //@line 23886
   return;
  }
  HEAP8[$235 >> 0] = 0; //@line 23889
  if ((HEAPU8[$62 + 895 >> 0] | 0) > (HEAPU8[$62 + 894 >> 0] | 0)) {
   $249 = HEAP32[$52 >> 2] | 0; //@line 23896
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 23898
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($249, $62 + 1076 | 0); //@line 23899
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 23902
    $251 = $ReallocAsyncCtx22 + 4 | 0; //@line 23903
    HEAP32[$251 >> 2] = $62; //@line 23904
    $252 = $ReallocAsyncCtx22 + 8 | 0; //@line 23905
    HEAP32[$252 >> 2] = $52; //@line 23906
    $253 = $ReallocAsyncCtx22 + 12 | 0; //@line 23907
    HEAP32[$253 >> 2] = $12; //@line 23908
    $254 = $ReallocAsyncCtx22 + 16 | 0; //@line 23909
    HEAP32[$254 >> 2] = $34; //@line 23910
    sp = STACKTOP; //@line 23911
    return;
   }
   ___async_unwind = 0; //@line 23914
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 23915
   $251 = $ReallocAsyncCtx22 + 4 | 0; //@line 23916
   HEAP32[$251 >> 2] = $62; //@line 23917
   $252 = $ReallocAsyncCtx22 + 8 | 0; //@line 23918
   HEAP32[$252 >> 2] = $52; //@line 23919
   $253 = $ReallocAsyncCtx22 + 12 | 0; //@line 23920
   HEAP32[$253 >> 2] = $12; //@line 23921
   $254 = $ReallocAsyncCtx22 + 16 | 0; //@line 23922
   HEAP32[$254 >> 2] = $34; //@line 23923
   sp = STACKTOP; //@line 23924
   return;
  } else {
   $$3$off0204 = 2; //@line 23927
  }
 }
 $255 = $62 + 944 | 0; //@line 23930
 HEAP8[$255 >> 0] = $$3$off0204 | HEAP8[$255 >> 0] & -7; //@line 23934
 $261 = $62 + 944 | 0; //@line 23935
 HEAP8[$261 >> 0] = HEAP8[$261 >> 0] | 32; //@line 23938
 $264 = HEAP32[$52 >> 2] | 0; //@line 23939
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 23941
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($264, $62 + 996 | 0, 1); //@line 23942
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 23945
  $266 = $ReallocAsyncCtx17 + 4 | 0; //@line 23946
  HEAP32[$266 >> 2] = $12; //@line 23947
  $267 = $ReallocAsyncCtx17 + 8 | 0; //@line 23948
  HEAP32[$267 >> 2] = $34; //@line 23949
  sp = STACKTOP; //@line 23950
  return;
 }
 ___async_unwind = 0; //@line 23953
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 23954
 $266 = $ReallocAsyncCtx17 + 4 | 0; //@line 23955
 HEAP32[$266 >> 2] = $12; //@line 23956
 $267 = $ReallocAsyncCtx17 + 8 | 0; //@line 23957
 HEAP32[$267 >> 2] = $34; //@line 23958
 sp = STACKTOP; //@line 23959
 return;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12974
 STACKTOP = STACKTOP + 560 | 0; //@line 12975
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 12975
 $6 = sp + 8 | 0; //@line 12976
 $7 = sp; //@line 12977
 $8 = sp + 524 | 0; //@line 12978
 $9 = $8; //@line 12979
 $10 = sp + 512 | 0; //@line 12980
 HEAP32[$7 >> 2] = 0; //@line 12981
 $11 = $10 + 12 | 0; //@line 12982
 ___DOUBLE_BITS_677($1) | 0; //@line 12983
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 12988
  $$0520 = 1; //@line 12988
  $$0521 = 16386; //@line 12988
 } else {
  $$0471 = $1; //@line 12999
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 12999
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 16387 : 16392 : 16389; //@line 12999
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13001
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13010
   $31 = $$0520 + 3 | 0; //@line 13015
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13017
   _out_670($0, $$0521, $$0520); //@line 13018
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 16413 : 16417 : $27 ? 16405 : 16409, 3); //@line 13019
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13021
   $$sink560 = $31; //@line 13022
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13025
   $36 = $35 != 0.0; //@line 13026
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13030
   }
   $39 = $5 | 32; //@line 13032
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13035
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13038
    $44 = $$0520 | 2; //@line 13039
    $46 = 12 - $3 | 0; //@line 13041
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13046
     } else {
      $$0509585 = 8.0; //@line 13048
      $$1508586 = $46; //@line 13048
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13050
       $$0509585 = $$0509585 * 16.0; //@line 13051
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13066
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 13071
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 13076
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 13079
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13082
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 13085
     HEAP8[$68 >> 0] = 48; //@line 13086
     $$0511 = $68; //@line 13087
    } else {
     $$0511 = $66; //@line 13089
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 13096
    $76 = $$0511 + -2 | 0; //@line 13099
    HEAP8[$76 >> 0] = $5 + 15; //@line 13100
    $77 = ($3 | 0) < 1; //@line 13101
    $79 = ($4 & 8 | 0) == 0; //@line 13103
    $$0523 = $8; //@line 13104
    $$2473 = $$1472; //@line 13104
    while (1) {
     $80 = ~~$$2473; //@line 13106
     $86 = $$0523 + 1 | 0; //@line 13112
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[16421 + $80 >> 0]; //@line 13113
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 13116
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 13125
      } else {
       HEAP8[$86 >> 0] = 46; //@line 13128
       $$1524 = $$0523 + 2 | 0; //@line 13129
      }
     } else {
      $$1524 = $86; //@line 13132
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 13136
     }
    }
    $$pre693 = $$1524; //@line 13142
    if (!$3) {
     label = 24; //@line 13144
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 13152
      $$sink = $3 + 2 | 0; //@line 13152
     } else {
      label = 24; //@line 13154
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 13158
     $$pre$phi691Z2D = $101; //@line 13159
     $$sink = $101; //@line 13159
    }
    $104 = $11 - $76 | 0; //@line 13163
    $106 = $104 + $44 + $$sink | 0; //@line 13165
    _pad_676($0, 32, $2, $106, $4); //@line 13166
    _out_670($0, $$0521$, $44); //@line 13167
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 13169
    _out_670($0, $8, $$pre$phi691Z2D); //@line 13170
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 13172
    _out_670($0, $76, $104); //@line 13173
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 13175
    $$sink560 = $106; //@line 13176
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 13180
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 13184
    HEAP32[$7 >> 2] = $113; //@line 13185
    $$3 = $35 * 268435456.0; //@line 13186
    $$pr = $113; //@line 13186
   } else {
    $$3 = $35; //@line 13189
    $$pr = HEAP32[$7 >> 2] | 0; //@line 13189
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 13193
   $$0498 = $$561; //@line 13194
   $$4 = $$3; //@line 13194
   do {
    $116 = ~~$$4 >>> 0; //@line 13196
    HEAP32[$$0498 >> 2] = $116; //@line 13197
    $$0498 = $$0498 + 4 | 0; //@line 13198
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 13201
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 13211
    $$1499662 = $$0498; //@line 13211
    $124 = $$pr; //@line 13211
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 13214
     $$0488655 = $$1499662 + -4 | 0; //@line 13215
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 13218
     } else {
      $$0488657 = $$0488655; //@line 13220
      $$0497656 = 0; //@line 13220
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 13223
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 13225
       $131 = tempRet0; //@line 13226
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13227
       HEAP32[$$0488657 >> 2] = $132; //@line 13229
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13230
       $$0488657 = $$0488657 + -4 | 0; //@line 13232
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 13242
      } else {
       $138 = $$1482663 + -4 | 0; //@line 13244
       HEAP32[$138 >> 2] = $$0497656; //@line 13245
       $$2483$ph = $138; //@line 13246
      }
     }
     $$2500 = $$1499662; //@line 13249
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 13255
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 13259
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 13265
     HEAP32[$7 >> 2] = $144; //@line 13266
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 13269
      $$1499662 = $$2500; //@line 13269
      $124 = $144; //@line 13269
     } else {
      $$1482$lcssa = $$2483$ph; //@line 13271
      $$1499$lcssa = $$2500; //@line 13271
      $$pr566 = $144; //@line 13271
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 13276
    $$1499$lcssa = $$0498; //@line 13276
    $$pr566 = $$pr; //@line 13276
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 13282
    $150 = ($39 | 0) == 102; //@line 13283
    $$3484650 = $$1482$lcssa; //@line 13284
    $$3501649 = $$1499$lcssa; //@line 13284
    $152 = $$pr566; //@line 13284
    while (1) {
     $151 = 0 - $152 | 0; //@line 13286
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 13288
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 13292
      $161 = 1e9 >>> $154; //@line 13293
      $$0487644 = 0; //@line 13294
      $$1489643 = $$3484650; //@line 13294
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 13296
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 13300
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 13301
       $$1489643 = $$1489643 + 4 | 0; //@line 13302
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13313
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 13316
       $$4502 = $$3501649; //@line 13316
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 13319
       $$$3484700 = $$$3484; //@line 13320
       $$4502 = $$3501649 + 4 | 0; //@line 13320
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13327
      $$4502 = $$3501649; //@line 13327
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 13329
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 13336
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 13338
     HEAP32[$7 >> 2] = $152; //@line 13339
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 13344
      $$3501$lcssa = $$$4502; //@line 13344
      break;
     } else {
      $$3484650 = $$$3484700; //@line 13342
      $$3501649 = $$$4502; //@line 13342
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 13349
    $$3501$lcssa = $$1499$lcssa; //@line 13349
   }
   $185 = $$561; //@line 13352
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 13357
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 13358
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 13361
    } else {
     $$0514639 = $189; //@line 13363
     $$0530638 = 10; //@line 13363
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 13365
      $193 = $$0514639 + 1 | 0; //@line 13366
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 13369
       break;
      } else {
       $$0514639 = $193; //@line 13372
      }
     }
    }
   } else {
    $$1515 = 0; //@line 13377
   }
   $198 = ($39 | 0) == 103; //@line 13382
   $199 = ($$540 | 0) != 0; //@line 13383
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 13386
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 13395
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 13398
    $213 = ($209 | 0) % 9 | 0; //@line 13399
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 13402
     $$1531632 = 10; //@line 13402
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 13405
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 13408
       $$1531632 = $215; //@line 13408
      } else {
       $$1531$lcssa = $215; //@line 13410
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 13415
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 13417
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 13418
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 13421
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 13424
     $$4518 = $$1515; //@line 13424
     $$8 = $$3484$lcssa; //@line 13424
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 13429
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 13430
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 13435
     if (!$$0520) {
      $$1467 = $$$564; //@line 13438
      $$1469 = $$543; //@line 13438
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 13441
      $$1467 = $230 ? -$$$564 : $$$564; //@line 13446
      $$1469 = $230 ? -$$543 : $$543; //@line 13446
     }
     $233 = $217 - $218 | 0; //@line 13448
     HEAP32[$212 >> 2] = $233; //@line 13449
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 13453
      HEAP32[$212 >> 2] = $236; //@line 13454
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 13457
       $$sink547625 = $212; //@line 13457
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 13459
        HEAP32[$$sink547625 >> 2] = 0; //@line 13460
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 13463
         HEAP32[$240 >> 2] = 0; //@line 13464
         $$6 = $240; //@line 13465
        } else {
         $$6 = $$5486626; //@line 13467
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 13470
        HEAP32[$238 >> 2] = $242; //@line 13471
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 13474
         $$sink547625 = $238; //@line 13474
        } else {
         $$5486$lcssa = $$6; //@line 13476
         $$sink547$lcssa = $238; //@line 13476
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 13481
       $$sink547$lcssa = $212; //@line 13481
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 13486
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 13487
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 13490
       $$4518 = $247; //@line 13490
       $$8 = $$5486$lcssa; //@line 13490
      } else {
       $$2516621 = $247; //@line 13492
       $$2532620 = 10; //@line 13492
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 13494
        $251 = $$2516621 + 1 | 0; //@line 13495
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 13498
         $$4518 = $251; //@line 13498
         $$8 = $$5486$lcssa; //@line 13498
         break;
        } else {
         $$2516621 = $251; //@line 13501
        }
       }
      }
     } else {
      $$4492 = $212; //@line 13506
      $$4518 = $$1515; //@line 13506
      $$8 = $$3484$lcssa; //@line 13506
     }
    }
    $253 = $$4492 + 4 | 0; //@line 13509
    $$5519$ph = $$4518; //@line 13512
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 13512
    $$9$ph = $$8; //@line 13512
   } else {
    $$5519$ph = $$1515; //@line 13514
    $$7505$ph = $$3501$lcssa; //@line 13514
    $$9$ph = $$3484$lcssa; //@line 13514
   }
   $$7505 = $$7505$ph; //@line 13516
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 13520
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 13523
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 13527
    } else {
     $$lcssa675 = 1; //@line 13529
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 13533
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 13538
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 13546
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 13546
     } else {
      $$0479 = $5 + -2 | 0; //@line 13550
      $$2476 = $$540$ + -1 | 0; //@line 13550
     }
     $267 = $4 & 8; //@line 13552
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 13557
       if (!$270) {
        $$2529 = 9; //@line 13560
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 13565
         $$3533616 = 10; //@line 13565
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 13567
          $275 = $$1528617 + 1 | 0; //@line 13568
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 13574
           break;
          } else {
           $$1528617 = $275; //@line 13572
          }
         }
        } else {
         $$2529 = 0; //@line 13579
        }
       }
      } else {
       $$2529 = 9; //@line 13583
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 13591
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 13593
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 13595
       $$1480 = $$0479; //@line 13598
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 13598
       $$pre$phi698Z2D = 0; //@line 13598
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 13602
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 13604
       $$1480 = $$0479; //@line 13607
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 13607
       $$pre$phi698Z2D = 0; //@line 13607
       break;
      }
     } else {
      $$1480 = $$0479; //@line 13611
      $$3477 = $$2476; //@line 13611
      $$pre$phi698Z2D = $267; //@line 13611
     }
    } else {
     $$1480 = $5; //@line 13615
     $$3477 = $$540; //@line 13615
     $$pre$phi698Z2D = $4 & 8; //@line 13615
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 13618
   $294 = ($292 | 0) != 0 & 1; //@line 13620
   $296 = ($$1480 | 32 | 0) == 102; //@line 13622
   if ($296) {
    $$2513 = 0; //@line 13626
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 13626
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 13629
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13632
    $304 = $11; //@line 13633
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 13638
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 13640
      HEAP8[$308 >> 0] = 48; //@line 13641
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 13646
      } else {
       $$1512$lcssa = $308; //@line 13648
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 13653
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 13660
    $318 = $$1512$lcssa + -2 | 0; //@line 13662
    HEAP8[$318 >> 0] = $$1480; //@line 13663
    $$2513 = $318; //@line 13666
    $$pn = $304 - $318 | 0; //@line 13666
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 13671
   _pad_676($0, 32, $2, $323, $4); //@line 13672
   _out_670($0, $$0521, $$0520); //@line 13673
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 13675
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 13678
    $326 = $8 + 9 | 0; //@line 13679
    $327 = $326; //@line 13680
    $328 = $8 + 8 | 0; //@line 13681
    $$5493600 = $$0496$$9; //@line 13682
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 13685
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 13690
       $$1465 = $328; //@line 13691
      } else {
       $$1465 = $330; //@line 13693
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 13700
       $$0464597 = $330; //@line 13701
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 13703
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 13706
        } else {
         $$1465 = $335; //@line 13708
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 13713
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 13718
     $$5493600 = $$5493600 + 4 | 0; //@line 13719
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 16437, 1); //@line 13729
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 13735
     $$6494592 = $$5493600; //@line 13735
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 13738
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 13743
       $$0463587 = $347; //@line 13744
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 13746
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 13749
        } else {
         $$0463$lcssa = $351; //@line 13751
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 13756
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 13760
      $$6494592 = $$6494592 + 4 | 0; //@line 13761
      $356 = $$4478593 + -9 | 0; //@line 13762
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 13769
       break;
      } else {
       $$4478593 = $356; //@line 13767
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 13774
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 13777
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 13780
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 13783
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 13784
     $365 = $363; //@line 13785
     $366 = 0 - $9 | 0; //@line 13786
     $367 = $8 + 8 | 0; //@line 13787
     $$5605 = $$3477; //@line 13788
     $$7495604 = $$9$ph; //@line 13788
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 13791
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 13794
       $$0 = $367; //@line 13795
      } else {
       $$0 = $369; //@line 13797
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 13802
        _out_670($0, $$0, 1); //@line 13803
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 13807
         break;
        }
        _out_670($0, 16437, 1); //@line 13810
        $$2 = $375; //@line 13811
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 13815
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 13820
        $$1601 = $$0; //@line 13821
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 13823
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 13826
         } else {
          $$2 = $373; //@line 13828
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 13835
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 13838
      $381 = $$5605 - $378 | 0; //@line 13839
      $$7495604 = $$7495604 + 4 | 0; //@line 13840
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 13847
       break;
      } else {
       $$5605 = $381; //@line 13845
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 13852
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 13855
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 13859
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 13862
   $$sink560 = $323; //@line 13863
  }
 } while (0);
 STACKTOP = sp; //@line 13868
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 13868
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_472($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $4 = 0, $45 = 0, $49 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 26682
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26684
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26688
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26690
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26692
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26694
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26696
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26698
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26700
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26702
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26704
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26706
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26708
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26710
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26712
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26714
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] & -33; //@line 26721
 } else {
  $37 = $4 + 288 | 0; //@line 26723
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 4 >> 2] = 9; //@line 26726
  __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 26728
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 26731
  HEAP8[$8 >> 0] = 0; //@line 26732
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 10 >> 0] = 0; //@line 26735
  $45 = HEAP8[$10 >> 0] | 0; //@line 26736
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 11 >> 0] = $45; //@line 26739
  $49 = HEAP8[$4 + 1097 >> 0] | 0; //@line 26741
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 8 >> 0] = $49; //@line 26744
  if (!(HEAP8[$4 + 370 >> 0] | 0)) {
   $55 = $4 + 956 | 0; //@line 26749
   HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1; //@line 26752
  }
 }
 $58 = HEAP32[$6 >> 2] | 0; //@line 26755
 $61 = $58 & -3; //@line 26758
 if (!($58 & 2)) {
  $63 = $58; //@line 26760
 } else {
  HEAP32[$6 >> 2] = $61; //@line 26762
  $63 = $61; //@line 26763
 }
 if ($63 | 0) {
  $148 = HEAP32[$30 >> 2] | 0; //@line 26767
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 26768
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($148, $32, 1e3); //@line 26769
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 26772
   $149 = $ReallocAsyncCtx8 + 4 | 0; //@line 26773
   HEAP32[$149 >> 2] = $2; //@line 26774
   $150 = $ReallocAsyncCtx8 + 8 | 0; //@line 26775
   HEAP32[$150 >> 2] = $4; //@line 26776
   $151 = $ReallocAsyncCtx8 + 12 | 0; //@line 26777
   HEAP32[$151 >> 2] = $12; //@line 26778
   $152 = $ReallocAsyncCtx8 + 16 | 0; //@line 26779
   HEAP32[$152 >> 2] = $14; //@line 26780
   $153 = $ReallocAsyncCtx8 + 20 | 0; //@line 26781
   HEAP32[$153 >> 2] = $16; //@line 26782
   $154 = $ReallocAsyncCtx8 + 24 | 0; //@line 26783
   HEAP32[$154 >> 2] = $18; //@line 26784
   $155 = $ReallocAsyncCtx8 + 28 | 0; //@line 26785
   HEAP32[$155 >> 2] = $20; //@line 26786
   sp = STACKTOP; //@line 26787
   return;
  }
  ___async_unwind = 0; //@line 26790
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 26791
  $149 = $ReallocAsyncCtx8 + 4 | 0; //@line 26792
  HEAP32[$149 >> 2] = $2; //@line 26793
  $150 = $ReallocAsyncCtx8 + 8 | 0; //@line 26794
  HEAP32[$150 >> 2] = $4; //@line 26795
  $151 = $ReallocAsyncCtx8 + 12 | 0; //@line 26796
  HEAP32[$151 >> 2] = $12; //@line 26797
  $152 = $ReallocAsyncCtx8 + 16 | 0; //@line 26798
  HEAP32[$152 >> 2] = $14; //@line 26799
  $153 = $ReallocAsyncCtx8 + 20 | 0; //@line 26800
  HEAP32[$153 >> 2] = $16; //@line 26801
  $154 = $ReallocAsyncCtx8 + 24 | 0; //@line 26802
  HEAP32[$154 >> 2] = $18; //@line 26803
  $155 = $ReallocAsyncCtx8 + 28 | 0; //@line 26804
  HEAP32[$155 >> 2] = $20; //@line 26805
  sp = STACKTOP; //@line 26806
  return;
 }
 $64 = HEAP8[$2 >> 0] | 0; //@line 26809
 if ($64 & 1) {
  HEAP8[$2 >> 0] = $64 & -2; //@line 26814
  $69 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26816
  $71 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 26818
  $72 = $69 + 12 | 0; //@line 26819
  $73 = HEAP32[$72 >> 2] | 0; //@line 26820
  if (!$73) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 26823
   _mbed_assert_internal(15061, 15066, 1102); //@line 26824
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 26827
    $75 = $ReallocAsyncCtx18 + 4 | 0; //@line 26828
    HEAP32[$75 >> 2] = $2; //@line 26829
    $76 = $ReallocAsyncCtx18 + 8 | 0; //@line 26830
    HEAP32[$76 >> 2] = $69; //@line 26831
    $77 = $ReallocAsyncCtx18 + 12 | 0; //@line 26832
    HEAP32[$77 >> 2] = $71; //@line 26833
    $78 = $ReallocAsyncCtx18 + 16 | 0; //@line 26834
    HEAP32[$78 >> 2] = $4; //@line 26835
    $79 = $ReallocAsyncCtx18 + 20 | 0; //@line 26836
    HEAP32[$79 >> 2] = $12; //@line 26837
    $80 = $ReallocAsyncCtx18 + 24 | 0; //@line 26838
    HEAP32[$80 >> 2] = $14; //@line 26839
    $81 = $ReallocAsyncCtx18 + 28 | 0; //@line 26840
    HEAP32[$81 >> 2] = $16; //@line 26841
    $82 = $ReallocAsyncCtx18 + 32 | 0; //@line 26842
    HEAP32[$82 >> 2] = $18; //@line 26843
    $83 = $ReallocAsyncCtx18 + 36 | 0; //@line 26844
    HEAP32[$83 >> 2] = $20; //@line 26845
    $84 = $ReallocAsyncCtx18 + 40 | 0; //@line 26846
    HEAP32[$84 >> 2] = $22; //@line 26847
    $85 = $ReallocAsyncCtx18 + 44 | 0; //@line 26848
    HEAP32[$85 >> 2] = $24; //@line 26849
    $86 = $ReallocAsyncCtx18 + 48 | 0; //@line 26850
    HEAP32[$86 >> 2] = $26; //@line 26851
    $87 = $ReallocAsyncCtx18 + 52 | 0; //@line 26852
    HEAP32[$87 >> 2] = $28; //@line 26853
    $88 = $ReallocAsyncCtx18 + 56 | 0; //@line 26854
    HEAP32[$88 >> 2] = $72; //@line 26855
    sp = STACKTOP; //@line 26856
    return;
   }
   ___async_unwind = 0; //@line 26859
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 26860
   $75 = $ReallocAsyncCtx18 + 4 | 0; //@line 26861
   HEAP32[$75 >> 2] = $2; //@line 26862
   $76 = $ReallocAsyncCtx18 + 8 | 0; //@line 26863
   HEAP32[$76 >> 2] = $69; //@line 26864
   $77 = $ReallocAsyncCtx18 + 12 | 0; //@line 26865
   HEAP32[$77 >> 2] = $71; //@line 26866
   $78 = $ReallocAsyncCtx18 + 16 | 0; //@line 26867
   HEAP32[$78 >> 2] = $4; //@line 26868
   $79 = $ReallocAsyncCtx18 + 20 | 0; //@line 26869
   HEAP32[$79 >> 2] = $12; //@line 26870
   $80 = $ReallocAsyncCtx18 + 24 | 0; //@line 26871
   HEAP32[$80 >> 2] = $14; //@line 26872
   $81 = $ReallocAsyncCtx18 + 28 | 0; //@line 26873
   HEAP32[$81 >> 2] = $16; //@line 26874
   $82 = $ReallocAsyncCtx18 + 32 | 0; //@line 26875
   HEAP32[$82 >> 2] = $18; //@line 26876
   $83 = $ReallocAsyncCtx18 + 36 | 0; //@line 26877
   HEAP32[$83 >> 2] = $20; //@line 26878
   $84 = $ReallocAsyncCtx18 + 40 | 0; //@line 26879
   HEAP32[$84 >> 2] = $22; //@line 26880
   $85 = $ReallocAsyncCtx18 + 44 | 0; //@line 26881
   HEAP32[$85 >> 2] = $24; //@line 26882
   $86 = $ReallocAsyncCtx18 + 48 | 0; //@line 26883
   HEAP32[$86 >> 2] = $26; //@line 26884
   $87 = $ReallocAsyncCtx18 + 52 | 0; //@line 26885
   HEAP32[$87 >> 2] = $28; //@line 26886
   $88 = $ReallocAsyncCtx18 + 56 | 0; //@line 26887
   HEAP32[$88 >> 2] = $72; //@line 26888
   sp = STACKTOP; //@line 26889
   return;
  } else {
   $89 = HEAP32[$73 >> 2] | 0; //@line 26892
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 26893
   FUNCTION_TABLE_vii[$89 & 31]($69, $71); //@line 26894
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 26897
    $90 = $ReallocAsyncCtx2 + 4 | 0; //@line 26898
    HEAP32[$90 >> 2] = $2; //@line 26899
    $91 = $ReallocAsyncCtx2 + 8 | 0; //@line 26900
    HEAP32[$91 >> 2] = $4; //@line 26901
    $92 = $ReallocAsyncCtx2 + 12 | 0; //@line 26902
    HEAP32[$92 >> 2] = $12; //@line 26903
    $93 = $ReallocAsyncCtx2 + 16 | 0; //@line 26904
    HEAP32[$93 >> 2] = $14; //@line 26905
    $94 = $ReallocAsyncCtx2 + 20 | 0; //@line 26906
    HEAP32[$94 >> 2] = $16; //@line 26907
    $95 = $ReallocAsyncCtx2 + 24 | 0; //@line 26908
    HEAP32[$95 >> 2] = $18; //@line 26909
    $96 = $ReallocAsyncCtx2 + 28 | 0; //@line 26910
    HEAP32[$96 >> 2] = $20; //@line 26911
    $97 = $ReallocAsyncCtx2 + 32 | 0; //@line 26912
    HEAP32[$97 >> 2] = $22; //@line 26913
    $98 = $ReallocAsyncCtx2 + 36 | 0; //@line 26914
    HEAP32[$98 >> 2] = $24; //@line 26915
    $99 = $ReallocAsyncCtx2 + 40 | 0; //@line 26916
    HEAP32[$99 >> 2] = $26; //@line 26917
    $100 = $ReallocAsyncCtx2 + 44 | 0; //@line 26918
    HEAP32[$100 >> 2] = $28; //@line 26919
    sp = STACKTOP; //@line 26920
    return;
   }
   ___async_unwind = 0; //@line 26923
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 26924
   $90 = $ReallocAsyncCtx2 + 4 | 0; //@line 26925
   HEAP32[$90 >> 2] = $2; //@line 26926
   $91 = $ReallocAsyncCtx2 + 8 | 0; //@line 26927
   HEAP32[$91 >> 2] = $4; //@line 26928
   $92 = $ReallocAsyncCtx2 + 12 | 0; //@line 26929
   HEAP32[$92 >> 2] = $12; //@line 26930
   $93 = $ReallocAsyncCtx2 + 16 | 0; //@line 26931
   HEAP32[$93 >> 2] = $14; //@line 26932
   $94 = $ReallocAsyncCtx2 + 20 | 0; //@line 26933
   HEAP32[$94 >> 2] = $16; //@line 26934
   $95 = $ReallocAsyncCtx2 + 24 | 0; //@line 26935
   HEAP32[$95 >> 2] = $18; //@line 26936
   $96 = $ReallocAsyncCtx2 + 28 | 0; //@line 26937
   HEAP32[$96 >> 2] = $20; //@line 26938
   $97 = $ReallocAsyncCtx2 + 32 | 0; //@line 26939
   HEAP32[$97 >> 2] = $22; //@line 26940
   $98 = $ReallocAsyncCtx2 + 36 | 0; //@line 26941
   HEAP32[$98 >> 2] = $24; //@line 26942
   $99 = $ReallocAsyncCtx2 + 40 | 0; //@line 26943
   HEAP32[$99 >> 2] = $26; //@line 26944
   $100 = $ReallocAsyncCtx2 + 44 | 0; //@line 26945
   HEAP32[$100 >> 2] = $28; //@line 26946
   sp = STACKTOP; //@line 26947
   return;
  }
 }
 if ($64 & 8) {
  HEAP8[$2 >> 0] = $64 & -9; //@line 26955
  $105 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26957
  $106 = $105 + 32 | 0; //@line 26958
  $108 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 26960
  $109 = $105 + 44 | 0; //@line 26961
  $110 = HEAP32[$109 >> 2] | 0; //@line 26962
  if (!$110) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 26965
   _mbed_assert_internal(15061, 15066, 1102); //@line 26966
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 26969
    $112 = $ReallocAsyncCtx17 + 4 | 0; //@line 26970
    HEAP32[$112 >> 2] = $2; //@line 26971
    $113 = $ReallocAsyncCtx17 + 8 | 0; //@line 26972
    HEAP32[$113 >> 2] = $4; //@line 26973
    $114 = $ReallocAsyncCtx17 + 12 | 0; //@line 26974
    HEAP32[$114 >> 2] = $109; //@line 26975
    $115 = $ReallocAsyncCtx17 + 16 | 0; //@line 26976
    HEAP32[$115 >> 2] = $12; //@line 26977
    $116 = $ReallocAsyncCtx17 + 20 | 0; //@line 26978
    HEAP32[$116 >> 2] = $14; //@line 26979
    $117 = $ReallocAsyncCtx17 + 24 | 0; //@line 26980
    HEAP32[$117 >> 2] = $16; //@line 26981
    $118 = $ReallocAsyncCtx17 + 28 | 0; //@line 26982
    HEAP32[$118 >> 2] = $18; //@line 26983
    $119 = $ReallocAsyncCtx17 + 32 | 0; //@line 26984
    HEAP32[$119 >> 2] = $20; //@line 26985
    $120 = $ReallocAsyncCtx17 + 36 | 0; //@line 26986
    HEAP32[$120 >> 2] = $22; //@line 26987
    $121 = $ReallocAsyncCtx17 + 40 | 0; //@line 26988
    HEAP32[$121 >> 2] = $24; //@line 26989
    $122 = $ReallocAsyncCtx17 + 44 | 0; //@line 26990
    HEAP32[$122 >> 2] = $26; //@line 26991
    $123 = $ReallocAsyncCtx17 + 48 | 0; //@line 26992
    HEAP32[$123 >> 2] = $28; //@line 26993
    $124 = $ReallocAsyncCtx17 + 52 | 0; //@line 26994
    HEAP32[$124 >> 2] = $106; //@line 26995
    $125 = $ReallocAsyncCtx17 + 56 | 0; //@line 26996
    HEAP32[$125 >> 2] = $108; //@line 26997
    sp = STACKTOP; //@line 26998
    return;
   }
   ___async_unwind = 0; //@line 27001
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 27002
   $112 = $ReallocAsyncCtx17 + 4 | 0; //@line 27003
   HEAP32[$112 >> 2] = $2; //@line 27004
   $113 = $ReallocAsyncCtx17 + 8 | 0; //@line 27005
   HEAP32[$113 >> 2] = $4; //@line 27006
   $114 = $ReallocAsyncCtx17 + 12 | 0; //@line 27007
   HEAP32[$114 >> 2] = $109; //@line 27008
   $115 = $ReallocAsyncCtx17 + 16 | 0; //@line 27009
   HEAP32[$115 >> 2] = $12; //@line 27010
   $116 = $ReallocAsyncCtx17 + 20 | 0; //@line 27011
   HEAP32[$116 >> 2] = $14; //@line 27012
   $117 = $ReallocAsyncCtx17 + 24 | 0; //@line 27013
   HEAP32[$117 >> 2] = $16; //@line 27014
   $118 = $ReallocAsyncCtx17 + 28 | 0; //@line 27015
   HEAP32[$118 >> 2] = $18; //@line 27016
   $119 = $ReallocAsyncCtx17 + 32 | 0; //@line 27017
   HEAP32[$119 >> 2] = $20; //@line 27018
   $120 = $ReallocAsyncCtx17 + 36 | 0; //@line 27019
   HEAP32[$120 >> 2] = $22; //@line 27020
   $121 = $ReallocAsyncCtx17 + 40 | 0; //@line 27021
   HEAP32[$121 >> 2] = $24; //@line 27022
   $122 = $ReallocAsyncCtx17 + 44 | 0; //@line 27023
   HEAP32[$122 >> 2] = $26; //@line 27024
   $123 = $ReallocAsyncCtx17 + 48 | 0; //@line 27025
   HEAP32[$123 >> 2] = $28; //@line 27026
   $124 = $ReallocAsyncCtx17 + 52 | 0; //@line 27027
   HEAP32[$124 >> 2] = $106; //@line 27028
   $125 = $ReallocAsyncCtx17 + 56 | 0; //@line 27029
   HEAP32[$125 >> 2] = $108; //@line 27030
   sp = STACKTOP; //@line 27031
   return;
  } else {
   $126 = HEAP32[$110 >> 2] | 0; //@line 27034
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 27035
   FUNCTION_TABLE_vii[$126 & 31]($106, $108); //@line 27036
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 27039
    $127 = $ReallocAsyncCtx3 + 4 | 0; //@line 27040
    HEAP32[$127 >> 2] = $2; //@line 27041
    $128 = $ReallocAsyncCtx3 + 8 | 0; //@line 27042
    HEAP32[$128 >> 2] = $4; //@line 27043
    $129 = $ReallocAsyncCtx3 + 12 | 0; //@line 27044
    HEAP32[$129 >> 2] = $12; //@line 27045
    $130 = $ReallocAsyncCtx3 + 16 | 0; //@line 27046
    HEAP32[$130 >> 2] = $14; //@line 27047
    $131 = $ReallocAsyncCtx3 + 20 | 0; //@line 27048
    HEAP32[$131 >> 2] = $16; //@line 27049
    $132 = $ReallocAsyncCtx3 + 24 | 0; //@line 27050
    HEAP32[$132 >> 2] = $18; //@line 27051
    $133 = $ReallocAsyncCtx3 + 28 | 0; //@line 27052
    HEAP32[$133 >> 2] = $20; //@line 27053
    $134 = $ReallocAsyncCtx3 + 32 | 0; //@line 27054
    HEAP32[$134 >> 2] = $22; //@line 27055
    $135 = $ReallocAsyncCtx3 + 36 | 0; //@line 27056
    HEAP32[$135 >> 2] = $24; //@line 27057
    $136 = $ReallocAsyncCtx3 + 40 | 0; //@line 27058
    HEAP32[$136 >> 2] = $26; //@line 27059
    $137 = $ReallocAsyncCtx3 + 44 | 0; //@line 27060
    HEAP32[$137 >> 2] = $28; //@line 27061
    sp = STACKTOP; //@line 27062
    return;
   }
   ___async_unwind = 0; //@line 27065
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 27066
   $127 = $ReallocAsyncCtx3 + 4 | 0; //@line 27067
   HEAP32[$127 >> 2] = $2; //@line 27068
   $128 = $ReallocAsyncCtx3 + 8 | 0; //@line 27069
   HEAP32[$128 >> 2] = $4; //@line 27070
   $129 = $ReallocAsyncCtx3 + 12 | 0; //@line 27071
   HEAP32[$129 >> 2] = $12; //@line 27072
   $130 = $ReallocAsyncCtx3 + 16 | 0; //@line 27073
   HEAP32[$130 >> 2] = $14; //@line 27074
   $131 = $ReallocAsyncCtx3 + 20 | 0; //@line 27075
   HEAP32[$131 >> 2] = $16; //@line 27076
   $132 = $ReallocAsyncCtx3 + 24 | 0; //@line 27077
   HEAP32[$132 >> 2] = $18; //@line 27078
   $133 = $ReallocAsyncCtx3 + 28 | 0; //@line 27079
   HEAP32[$133 >> 2] = $20; //@line 27080
   $134 = $ReallocAsyncCtx3 + 32 | 0; //@line 27081
   HEAP32[$134 >> 2] = $22; //@line 27082
   $135 = $ReallocAsyncCtx3 + 36 | 0; //@line 27083
   HEAP32[$135 >> 2] = $24; //@line 27084
   $136 = $ReallocAsyncCtx3 + 40 | 0; //@line 27085
   HEAP32[$136 >> 2] = $26; //@line 27086
   $137 = $ReallocAsyncCtx3 + 44 | 0; //@line 27087
   HEAP32[$137 >> 2] = $28; //@line 27088
   sp = STACKTOP; //@line 27089
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $22) | 0; //@line 27096
  _printf(13114, $26) | 0; //@line 27097
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 27098
  _putchar(10) | 0; //@line 27099
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 27102
   $140 = $ReallocAsyncCtx7 + 4 | 0; //@line 27103
   HEAP32[$140 >> 2] = $2; //@line 27104
   $141 = $ReallocAsyncCtx7 + 8 | 0; //@line 27105
   HEAP32[$141 >> 2] = $4; //@line 27106
   $142 = $ReallocAsyncCtx7 + 12 | 0; //@line 27107
   HEAP32[$142 >> 2] = $12; //@line 27108
   $143 = $ReallocAsyncCtx7 + 16 | 0; //@line 27109
   HEAP32[$143 >> 2] = $14; //@line 27110
   $144 = $ReallocAsyncCtx7 + 20 | 0; //@line 27111
   HEAP32[$144 >> 2] = $16; //@line 27112
   $145 = $ReallocAsyncCtx7 + 24 | 0; //@line 27113
   HEAP32[$145 >> 2] = $18; //@line 27114
   $146 = $ReallocAsyncCtx7 + 28 | 0; //@line 27115
   HEAP32[$146 >> 2] = $20; //@line 27116
   sp = STACKTOP; //@line 27117
   return;
  }
  ___async_unwind = 0; //@line 27120
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 27121
  $140 = $ReallocAsyncCtx7 + 4 | 0; //@line 27122
  HEAP32[$140 >> 2] = $2; //@line 27123
  $141 = $ReallocAsyncCtx7 + 8 | 0; //@line 27124
  HEAP32[$141 >> 2] = $4; //@line 27125
  $142 = $ReallocAsyncCtx7 + 12 | 0; //@line 27126
  HEAP32[$142 >> 2] = $12; //@line 27127
  $143 = $ReallocAsyncCtx7 + 16 | 0; //@line 27128
  HEAP32[$143 >> 2] = $14; //@line 27129
  $144 = $ReallocAsyncCtx7 + 20 | 0; //@line 27130
  HEAP32[$144 >> 2] = $16; //@line 27131
  $145 = $ReallocAsyncCtx7 + 24 | 0; //@line 27132
  HEAP32[$145 >> 2] = $18; //@line 27133
  $146 = $ReallocAsyncCtx7 + 28 | 0; //@line 27134
  HEAP32[$146 >> 2] = $20; //@line 27135
  sp = STACKTOP; //@line 27136
  return;
 }
 $147 = HEAP8[$2 >> 0] & -33; //@line 27140
 HEAP8[$2 >> 0] = $147; //@line 27141
 do {
  if (!($147 & 2)) {
   $186 = $147; //@line 27146
  } else {
   $158 = $147 & -3; //@line 27148
   HEAP8[$2 >> 0] = $158; //@line 27149
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $14) | 0; //@line 27154
    _printf(12994, $18) | 0; //@line 27155
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27156
    _putchar(10) | 0; //@line 27157
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 27160
     $162 = $ReallocAsyncCtx6 + 4 | 0; //@line 27161
     HEAP32[$162 >> 2] = $2; //@line 27162
     $163 = $ReallocAsyncCtx6 + 8 | 0; //@line 27163
     HEAP32[$163 >> 2] = $4; //@line 27164
     $164 = $ReallocAsyncCtx6 + 12 | 0; //@line 27165
     HEAP32[$164 >> 2] = $12; //@line 27166
     $165 = $ReallocAsyncCtx6 + 16 | 0; //@line 27167
     HEAP32[$165 >> 2] = $12; //@line 27168
     sp = STACKTOP; //@line 27169
     return;
    }
    ___async_unwind = 0; //@line 27172
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 27173
    $162 = $ReallocAsyncCtx6 + 4 | 0; //@line 27174
    HEAP32[$162 >> 2] = $2; //@line 27175
    $163 = $ReallocAsyncCtx6 + 8 | 0; //@line 27176
    HEAP32[$163 >> 2] = $4; //@line 27177
    $164 = $ReallocAsyncCtx6 + 12 | 0; //@line 27178
    HEAP32[$164 >> 2] = $12; //@line 27179
    $165 = $ReallocAsyncCtx6 + 16 | 0; //@line 27180
    HEAP32[$165 >> 2] = $12; //@line 27181
    sp = STACKTOP; //@line 27182
    return;
   }
   if ($158 & 4) {
    $184 = $158 & -5; //@line 27188
    HEAP8[$2 >> 0] = $184; //@line 27189
    $186 = $184; //@line 27190
    break;
   }
   $169 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27194
   $170 = $169 + 16 | 0; //@line 27195
   $172 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 27197
   $173 = $169 + 28 | 0; //@line 27198
   $174 = HEAP32[$173 >> 2] | 0; //@line 27199
   if (!$174) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 27202
    _mbed_assert_internal(15061, 15066, 1102); //@line 27203
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 27206
     $176 = $ReallocAsyncCtx15 + 4 | 0; //@line 27207
     HEAP32[$176 >> 2] = $173; //@line 27208
     $177 = $ReallocAsyncCtx15 + 8 | 0; //@line 27209
     HEAP32[$177 >> 2] = $170; //@line 27210
     $178 = $ReallocAsyncCtx15 + 12 | 0; //@line 27211
     HEAP32[$178 >> 2] = $172; //@line 27212
     $179 = $ReallocAsyncCtx15 + 16 | 0; //@line 27213
     HEAP32[$179 >> 2] = $2; //@line 27214
     $180 = $ReallocAsyncCtx15 + 20 | 0; //@line 27215
     HEAP32[$180 >> 2] = $4; //@line 27216
     sp = STACKTOP; //@line 27217
     return;
    }
    ___async_unwind = 0; //@line 27220
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 27221
    $176 = $ReallocAsyncCtx15 + 4 | 0; //@line 27222
    HEAP32[$176 >> 2] = $173; //@line 27223
    $177 = $ReallocAsyncCtx15 + 8 | 0; //@line 27224
    HEAP32[$177 >> 2] = $170; //@line 27225
    $178 = $ReallocAsyncCtx15 + 12 | 0; //@line 27226
    HEAP32[$178 >> 2] = $172; //@line 27227
    $179 = $ReallocAsyncCtx15 + 16 | 0; //@line 27228
    HEAP32[$179 >> 2] = $2; //@line 27229
    $180 = $ReallocAsyncCtx15 + 20 | 0; //@line 27230
    HEAP32[$180 >> 2] = $4; //@line 27231
    sp = STACKTOP; //@line 27232
    return;
   } else {
    $181 = HEAP32[$174 >> 2] | 0; //@line 27235
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27236
    FUNCTION_TABLE_vii[$181 & 31]($170, $172); //@line 27237
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 27240
     $182 = $ReallocAsyncCtx4 + 4 | 0; //@line 27241
     HEAP32[$182 >> 2] = $2; //@line 27242
     $183 = $ReallocAsyncCtx4 + 8 | 0; //@line 27243
     HEAP32[$183 >> 2] = $4; //@line 27244
     sp = STACKTOP; //@line 27245
     return;
    }
    ___async_unwind = 0; //@line 27248
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 27249
    $182 = $ReallocAsyncCtx4 + 4 | 0; //@line 27250
    HEAP32[$182 >> 2] = $2; //@line 27251
    $183 = $ReallocAsyncCtx4 + 8 | 0; //@line 27252
    HEAP32[$183 >> 2] = $4; //@line 27253
    sp = STACKTOP; //@line 27254
    return;
   }
  }
 } while (0);
 if (!($186 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $186 & -17; //@line 27265
 $190 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27267
 $191 = $190 + 48 | 0; //@line 27268
 $193 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 27270
 $194 = $190 + 60 | 0; //@line 27271
 $195 = HEAP32[$194 >> 2] | 0; //@line 27272
 if (!$195) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 27275
  _mbed_assert_internal(15061, 15066, 1102); //@line 27276
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 27279
   $197 = $ReallocAsyncCtx14 + 4 | 0; //@line 27280
   HEAP32[$197 >> 2] = $194; //@line 27281
   $198 = $ReallocAsyncCtx14 + 8 | 0; //@line 27282
   HEAP32[$198 >> 2] = $191; //@line 27283
   $199 = $ReallocAsyncCtx14 + 12 | 0; //@line 27284
   HEAP32[$199 >> 2] = $193; //@line 27285
   sp = STACKTOP; //@line 27286
   return;
  }
  ___async_unwind = 0; //@line 27289
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 27290
  $197 = $ReallocAsyncCtx14 + 4 | 0; //@line 27291
  HEAP32[$197 >> 2] = $194; //@line 27292
  $198 = $ReallocAsyncCtx14 + 8 | 0; //@line 27293
  HEAP32[$198 >> 2] = $191; //@line 27294
  $199 = $ReallocAsyncCtx14 + 12 | 0; //@line 27295
  HEAP32[$199 >> 2] = $193; //@line 27296
  sp = STACKTOP; //@line 27297
  return;
 } else {
  $200 = HEAP32[$195 >> 2] | 0; //@line 27300
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27301
  FUNCTION_TABLE_vii[$200 & 31]($191, $193); //@line 27302
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 27305
   sp = STACKTOP; //@line 27306
   return;
  }
  ___async_unwind = 0; //@line 27309
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 27310
  sp = STACKTOP; //@line 27311
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $51 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24884
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24886
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24888
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24890
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24892
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24894
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24896
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24898
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24900
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24902
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24904
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24906
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24908
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24910
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24912
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24914
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24916
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 24919
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 24921
 HEAP8[$30 >> 0] = 0; //@line 24922
 $36 = $4 + 288 | 0; //@line 24923
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] = 0; //@line 24926
 $39 = HEAP8[$32 >> 0] | 0; //@line 24927
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $39; //@line 24930
 if (!(HEAP8[$4 + 370 >> 0] | 0)) {
  $45 = $4 + 956 | 0; //@line 24935
  HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1; //@line 24938
 }
 $48 = HEAP32[$6 >> 2] | 0; //@line 24940
 $51 = $48 & -3; //@line 24943
 if (!($48 & 2)) {
  $53 = $48; //@line 24945
 } else {
  HEAP32[$6 >> 2] = $51; //@line 24947
  $53 = $51; //@line 24948
 }
 if ($53 | 0) {
  $138 = HEAP32[$18 >> 2] | 0; //@line 24952
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 24953
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($138, $20, 1e3); //@line 24954
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 24957
   $139 = $ReallocAsyncCtx8 + 4 | 0; //@line 24958
   HEAP32[$139 >> 2] = $2; //@line 24959
   $140 = $ReallocAsyncCtx8 + 8 | 0; //@line 24960
   HEAP32[$140 >> 2] = $4; //@line 24961
   $141 = $ReallocAsyncCtx8 + 12 | 0; //@line 24962
   HEAP32[$141 >> 2] = $8; //@line 24963
   $142 = $ReallocAsyncCtx8 + 16 | 0; //@line 24964
   HEAP32[$142 >> 2] = $10; //@line 24965
   $143 = $ReallocAsyncCtx8 + 20 | 0; //@line 24966
   HEAP32[$143 >> 2] = $12; //@line 24967
   $144 = $ReallocAsyncCtx8 + 24 | 0; //@line 24968
   HEAP32[$144 >> 2] = $14; //@line 24969
   $145 = $ReallocAsyncCtx8 + 28 | 0; //@line 24970
   HEAP32[$145 >> 2] = $16; //@line 24971
   sp = STACKTOP; //@line 24972
   return;
  }
  ___async_unwind = 0; //@line 24975
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 24976
  $139 = $ReallocAsyncCtx8 + 4 | 0; //@line 24977
  HEAP32[$139 >> 2] = $2; //@line 24978
  $140 = $ReallocAsyncCtx8 + 8 | 0; //@line 24979
  HEAP32[$140 >> 2] = $4; //@line 24980
  $141 = $ReallocAsyncCtx8 + 12 | 0; //@line 24981
  HEAP32[$141 >> 2] = $8; //@line 24982
  $142 = $ReallocAsyncCtx8 + 16 | 0; //@line 24983
  HEAP32[$142 >> 2] = $10; //@line 24984
  $143 = $ReallocAsyncCtx8 + 20 | 0; //@line 24985
  HEAP32[$143 >> 2] = $12; //@line 24986
  $144 = $ReallocAsyncCtx8 + 24 | 0; //@line 24987
  HEAP32[$144 >> 2] = $14; //@line 24988
  $145 = $ReallocAsyncCtx8 + 28 | 0; //@line 24989
  HEAP32[$145 >> 2] = $16; //@line 24990
  sp = STACKTOP; //@line 24991
  return;
 }
 $54 = HEAP8[$2 >> 0] | 0; //@line 24994
 if ($54 & 1) {
  HEAP8[$2 >> 0] = $54 & -2; //@line 24999
  $59 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25001
  $61 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 25003
  $62 = $59 + 12 | 0; //@line 25004
  $63 = HEAP32[$62 >> 2] | 0; //@line 25005
  if (!$63) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 25008
   _mbed_assert_internal(15061, 15066, 1102); //@line 25009
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 25012
    $65 = $ReallocAsyncCtx18 + 4 | 0; //@line 25013
    HEAP32[$65 >> 2] = $2; //@line 25014
    $66 = $ReallocAsyncCtx18 + 8 | 0; //@line 25015
    HEAP32[$66 >> 2] = $59; //@line 25016
    $67 = $ReallocAsyncCtx18 + 12 | 0; //@line 25017
    HEAP32[$67 >> 2] = $61; //@line 25018
    $68 = $ReallocAsyncCtx18 + 16 | 0; //@line 25019
    HEAP32[$68 >> 2] = $4; //@line 25020
    $69 = $ReallocAsyncCtx18 + 20 | 0; //@line 25021
    HEAP32[$69 >> 2] = $8; //@line 25022
    $70 = $ReallocAsyncCtx18 + 24 | 0; //@line 25023
    HEAP32[$70 >> 2] = $10; //@line 25024
    $71 = $ReallocAsyncCtx18 + 28 | 0; //@line 25025
    HEAP32[$71 >> 2] = $12; //@line 25026
    $72 = $ReallocAsyncCtx18 + 32 | 0; //@line 25027
    HEAP32[$72 >> 2] = $14; //@line 25028
    $73 = $ReallocAsyncCtx18 + 36 | 0; //@line 25029
    HEAP32[$73 >> 2] = $16; //@line 25030
    $74 = $ReallocAsyncCtx18 + 40 | 0; //@line 25031
    HEAP32[$74 >> 2] = $22; //@line 25032
    $75 = $ReallocAsyncCtx18 + 44 | 0; //@line 25033
    HEAP32[$75 >> 2] = $24; //@line 25034
    $76 = $ReallocAsyncCtx18 + 48 | 0; //@line 25035
    HEAP32[$76 >> 2] = $26; //@line 25036
    $77 = $ReallocAsyncCtx18 + 52 | 0; //@line 25037
    HEAP32[$77 >> 2] = $28; //@line 25038
    $78 = $ReallocAsyncCtx18 + 56 | 0; //@line 25039
    HEAP32[$78 >> 2] = $62; //@line 25040
    sp = STACKTOP; //@line 25041
    return;
   }
   ___async_unwind = 0; //@line 25044
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 25045
   $65 = $ReallocAsyncCtx18 + 4 | 0; //@line 25046
   HEAP32[$65 >> 2] = $2; //@line 25047
   $66 = $ReallocAsyncCtx18 + 8 | 0; //@line 25048
   HEAP32[$66 >> 2] = $59; //@line 25049
   $67 = $ReallocAsyncCtx18 + 12 | 0; //@line 25050
   HEAP32[$67 >> 2] = $61; //@line 25051
   $68 = $ReallocAsyncCtx18 + 16 | 0; //@line 25052
   HEAP32[$68 >> 2] = $4; //@line 25053
   $69 = $ReallocAsyncCtx18 + 20 | 0; //@line 25054
   HEAP32[$69 >> 2] = $8; //@line 25055
   $70 = $ReallocAsyncCtx18 + 24 | 0; //@line 25056
   HEAP32[$70 >> 2] = $10; //@line 25057
   $71 = $ReallocAsyncCtx18 + 28 | 0; //@line 25058
   HEAP32[$71 >> 2] = $12; //@line 25059
   $72 = $ReallocAsyncCtx18 + 32 | 0; //@line 25060
   HEAP32[$72 >> 2] = $14; //@line 25061
   $73 = $ReallocAsyncCtx18 + 36 | 0; //@line 25062
   HEAP32[$73 >> 2] = $16; //@line 25063
   $74 = $ReallocAsyncCtx18 + 40 | 0; //@line 25064
   HEAP32[$74 >> 2] = $22; //@line 25065
   $75 = $ReallocAsyncCtx18 + 44 | 0; //@line 25066
   HEAP32[$75 >> 2] = $24; //@line 25067
   $76 = $ReallocAsyncCtx18 + 48 | 0; //@line 25068
   HEAP32[$76 >> 2] = $26; //@line 25069
   $77 = $ReallocAsyncCtx18 + 52 | 0; //@line 25070
   HEAP32[$77 >> 2] = $28; //@line 25071
   $78 = $ReallocAsyncCtx18 + 56 | 0; //@line 25072
   HEAP32[$78 >> 2] = $62; //@line 25073
   sp = STACKTOP; //@line 25074
   return;
  } else {
   $79 = HEAP32[$63 >> 2] | 0; //@line 25077
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 25078
   FUNCTION_TABLE_vii[$79 & 31]($59, $61); //@line 25079
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 25082
    $80 = $ReallocAsyncCtx2 + 4 | 0; //@line 25083
    HEAP32[$80 >> 2] = $2; //@line 25084
    $81 = $ReallocAsyncCtx2 + 8 | 0; //@line 25085
    HEAP32[$81 >> 2] = $4; //@line 25086
    $82 = $ReallocAsyncCtx2 + 12 | 0; //@line 25087
    HEAP32[$82 >> 2] = $8; //@line 25088
    $83 = $ReallocAsyncCtx2 + 16 | 0; //@line 25089
    HEAP32[$83 >> 2] = $10; //@line 25090
    $84 = $ReallocAsyncCtx2 + 20 | 0; //@line 25091
    HEAP32[$84 >> 2] = $12; //@line 25092
    $85 = $ReallocAsyncCtx2 + 24 | 0; //@line 25093
    HEAP32[$85 >> 2] = $14; //@line 25094
    $86 = $ReallocAsyncCtx2 + 28 | 0; //@line 25095
    HEAP32[$86 >> 2] = $16; //@line 25096
    $87 = $ReallocAsyncCtx2 + 32 | 0; //@line 25097
    HEAP32[$87 >> 2] = $22; //@line 25098
    $88 = $ReallocAsyncCtx2 + 36 | 0; //@line 25099
    HEAP32[$88 >> 2] = $24; //@line 25100
    $89 = $ReallocAsyncCtx2 + 40 | 0; //@line 25101
    HEAP32[$89 >> 2] = $26; //@line 25102
    $90 = $ReallocAsyncCtx2 + 44 | 0; //@line 25103
    HEAP32[$90 >> 2] = $28; //@line 25104
    sp = STACKTOP; //@line 25105
    return;
   }
   ___async_unwind = 0; //@line 25108
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 25109
   $80 = $ReallocAsyncCtx2 + 4 | 0; //@line 25110
   HEAP32[$80 >> 2] = $2; //@line 25111
   $81 = $ReallocAsyncCtx2 + 8 | 0; //@line 25112
   HEAP32[$81 >> 2] = $4; //@line 25113
   $82 = $ReallocAsyncCtx2 + 12 | 0; //@line 25114
   HEAP32[$82 >> 2] = $8; //@line 25115
   $83 = $ReallocAsyncCtx2 + 16 | 0; //@line 25116
   HEAP32[$83 >> 2] = $10; //@line 25117
   $84 = $ReallocAsyncCtx2 + 20 | 0; //@line 25118
   HEAP32[$84 >> 2] = $12; //@line 25119
   $85 = $ReallocAsyncCtx2 + 24 | 0; //@line 25120
   HEAP32[$85 >> 2] = $14; //@line 25121
   $86 = $ReallocAsyncCtx2 + 28 | 0; //@line 25122
   HEAP32[$86 >> 2] = $16; //@line 25123
   $87 = $ReallocAsyncCtx2 + 32 | 0; //@line 25124
   HEAP32[$87 >> 2] = $22; //@line 25125
   $88 = $ReallocAsyncCtx2 + 36 | 0; //@line 25126
   HEAP32[$88 >> 2] = $24; //@line 25127
   $89 = $ReallocAsyncCtx2 + 40 | 0; //@line 25128
   HEAP32[$89 >> 2] = $26; //@line 25129
   $90 = $ReallocAsyncCtx2 + 44 | 0; //@line 25130
   HEAP32[$90 >> 2] = $28; //@line 25131
   sp = STACKTOP; //@line 25132
   return;
  }
 }
 if ($54 & 8) {
  HEAP8[$2 >> 0] = $54 & -9; //@line 25140
  $95 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25142
  $96 = $95 + 32 | 0; //@line 25143
  $98 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 25145
  $99 = $95 + 44 | 0; //@line 25146
  $100 = HEAP32[$99 >> 2] | 0; //@line 25147
  if (!$100) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 25150
   _mbed_assert_internal(15061, 15066, 1102); //@line 25151
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 25154
    $102 = $ReallocAsyncCtx17 + 4 | 0; //@line 25155
    HEAP32[$102 >> 2] = $2; //@line 25156
    $103 = $ReallocAsyncCtx17 + 8 | 0; //@line 25157
    HEAP32[$103 >> 2] = $4; //@line 25158
    $104 = $ReallocAsyncCtx17 + 12 | 0; //@line 25159
    HEAP32[$104 >> 2] = $99; //@line 25160
    $105 = $ReallocAsyncCtx17 + 16 | 0; //@line 25161
    HEAP32[$105 >> 2] = $8; //@line 25162
    $106 = $ReallocAsyncCtx17 + 20 | 0; //@line 25163
    HEAP32[$106 >> 2] = $10; //@line 25164
    $107 = $ReallocAsyncCtx17 + 24 | 0; //@line 25165
    HEAP32[$107 >> 2] = $12; //@line 25166
    $108 = $ReallocAsyncCtx17 + 28 | 0; //@line 25167
    HEAP32[$108 >> 2] = $14; //@line 25168
    $109 = $ReallocAsyncCtx17 + 32 | 0; //@line 25169
    HEAP32[$109 >> 2] = $16; //@line 25170
    $110 = $ReallocAsyncCtx17 + 36 | 0; //@line 25171
    HEAP32[$110 >> 2] = $22; //@line 25172
    $111 = $ReallocAsyncCtx17 + 40 | 0; //@line 25173
    HEAP32[$111 >> 2] = $24; //@line 25174
    $112 = $ReallocAsyncCtx17 + 44 | 0; //@line 25175
    HEAP32[$112 >> 2] = $26; //@line 25176
    $113 = $ReallocAsyncCtx17 + 48 | 0; //@line 25177
    HEAP32[$113 >> 2] = $28; //@line 25178
    $114 = $ReallocAsyncCtx17 + 52 | 0; //@line 25179
    HEAP32[$114 >> 2] = $96; //@line 25180
    $115 = $ReallocAsyncCtx17 + 56 | 0; //@line 25181
    HEAP32[$115 >> 2] = $98; //@line 25182
    sp = STACKTOP; //@line 25183
    return;
   }
   ___async_unwind = 0; //@line 25186
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 25187
   $102 = $ReallocAsyncCtx17 + 4 | 0; //@line 25188
   HEAP32[$102 >> 2] = $2; //@line 25189
   $103 = $ReallocAsyncCtx17 + 8 | 0; //@line 25190
   HEAP32[$103 >> 2] = $4; //@line 25191
   $104 = $ReallocAsyncCtx17 + 12 | 0; //@line 25192
   HEAP32[$104 >> 2] = $99; //@line 25193
   $105 = $ReallocAsyncCtx17 + 16 | 0; //@line 25194
   HEAP32[$105 >> 2] = $8; //@line 25195
   $106 = $ReallocAsyncCtx17 + 20 | 0; //@line 25196
   HEAP32[$106 >> 2] = $10; //@line 25197
   $107 = $ReallocAsyncCtx17 + 24 | 0; //@line 25198
   HEAP32[$107 >> 2] = $12; //@line 25199
   $108 = $ReallocAsyncCtx17 + 28 | 0; //@line 25200
   HEAP32[$108 >> 2] = $14; //@line 25201
   $109 = $ReallocAsyncCtx17 + 32 | 0; //@line 25202
   HEAP32[$109 >> 2] = $16; //@line 25203
   $110 = $ReallocAsyncCtx17 + 36 | 0; //@line 25204
   HEAP32[$110 >> 2] = $22; //@line 25205
   $111 = $ReallocAsyncCtx17 + 40 | 0; //@line 25206
   HEAP32[$111 >> 2] = $24; //@line 25207
   $112 = $ReallocAsyncCtx17 + 44 | 0; //@line 25208
   HEAP32[$112 >> 2] = $26; //@line 25209
   $113 = $ReallocAsyncCtx17 + 48 | 0; //@line 25210
   HEAP32[$113 >> 2] = $28; //@line 25211
   $114 = $ReallocAsyncCtx17 + 52 | 0; //@line 25212
   HEAP32[$114 >> 2] = $96; //@line 25213
   $115 = $ReallocAsyncCtx17 + 56 | 0; //@line 25214
   HEAP32[$115 >> 2] = $98; //@line 25215
   sp = STACKTOP; //@line 25216
   return;
  } else {
   $116 = HEAP32[$100 >> 2] | 0; //@line 25219
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 25220
   FUNCTION_TABLE_vii[$116 & 31]($96, $98); //@line 25221
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 25224
    $117 = $ReallocAsyncCtx3 + 4 | 0; //@line 25225
    HEAP32[$117 >> 2] = $2; //@line 25226
    $118 = $ReallocAsyncCtx3 + 8 | 0; //@line 25227
    HEAP32[$118 >> 2] = $4; //@line 25228
    $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 25229
    HEAP32[$119 >> 2] = $8; //@line 25230
    $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 25231
    HEAP32[$120 >> 2] = $10; //@line 25232
    $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 25233
    HEAP32[$121 >> 2] = $12; //@line 25234
    $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 25235
    HEAP32[$122 >> 2] = $14; //@line 25236
    $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 25237
    HEAP32[$123 >> 2] = $16; //@line 25238
    $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 25239
    HEAP32[$124 >> 2] = $22; //@line 25240
    $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 25241
    HEAP32[$125 >> 2] = $24; //@line 25242
    $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 25243
    HEAP32[$126 >> 2] = $26; //@line 25244
    $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 25245
    HEAP32[$127 >> 2] = $28; //@line 25246
    sp = STACKTOP; //@line 25247
    return;
   }
   ___async_unwind = 0; //@line 25250
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 25251
   $117 = $ReallocAsyncCtx3 + 4 | 0; //@line 25252
   HEAP32[$117 >> 2] = $2; //@line 25253
   $118 = $ReallocAsyncCtx3 + 8 | 0; //@line 25254
   HEAP32[$118 >> 2] = $4; //@line 25255
   $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 25256
   HEAP32[$119 >> 2] = $8; //@line 25257
   $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 25258
   HEAP32[$120 >> 2] = $10; //@line 25259
   $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 25260
   HEAP32[$121 >> 2] = $12; //@line 25261
   $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 25262
   HEAP32[$122 >> 2] = $14; //@line 25263
   $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 25264
   HEAP32[$123 >> 2] = $16; //@line 25265
   $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 25266
   HEAP32[$124 >> 2] = $22; //@line 25267
   $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 25268
   HEAP32[$125 >> 2] = $24; //@line 25269
   $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 25270
   HEAP32[$126 >> 2] = $26; //@line 25271
   $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 25272
   HEAP32[$127 >> 2] = $28; //@line 25273
   sp = STACKTOP; //@line 25274
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $22) | 0; //@line 25281
  _printf(13114, $26) | 0; //@line 25282
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 25283
  _putchar(10) | 0; //@line 25284
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 25287
   $130 = $ReallocAsyncCtx7 + 4 | 0; //@line 25288
   HEAP32[$130 >> 2] = $2; //@line 25289
   $131 = $ReallocAsyncCtx7 + 8 | 0; //@line 25290
   HEAP32[$131 >> 2] = $4; //@line 25291
   $132 = $ReallocAsyncCtx7 + 12 | 0; //@line 25292
   HEAP32[$132 >> 2] = $8; //@line 25293
   $133 = $ReallocAsyncCtx7 + 16 | 0; //@line 25294
   HEAP32[$133 >> 2] = $10; //@line 25295
   $134 = $ReallocAsyncCtx7 + 20 | 0; //@line 25296
   HEAP32[$134 >> 2] = $12; //@line 25297
   $135 = $ReallocAsyncCtx7 + 24 | 0; //@line 25298
   HEAP32[$135 >> 2] = $14; //@line 25299
   $136 = $ReallocAsyncCtx7 + 28 | 0; //@line 25300
   HEAP32[$136 >> 2] = $16; //@line 25301
   sp = STACKTOP; //@line 25302
   return;
  }
  ___async_unwind = 0; //@line 25305
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 25306
  $130 = $ReallocAsyncCtx7 + 4 | 0; //@line 25307
  HEAP32[$130 >> 2] = $2; //@line 25308
  $131 = $ReallocAsyncCtx7 + 8 | 0; //@line 25309
  HEAP32[$131 >> 2] = $4; //@line 25310
  $132 = $ReallocAsyncCtx7 + 12 | 0; //@line 25311
  HEAP32[$132 >> 2] = $8; //@line 25312
  $133 = $ReallocAsyncCtx7 + 16 | 0; //@line 25313
  HEAP32[$133 >> 2] = $10; //@line 25314
  $134 = $ReallocAsyncCtx7 + 20 | 0; //@line 25315
  HEAP32[$134 >> 2] = $12; //@line 25316
  $135 = $ReallocAsyncCtx7 + 24 | 0; //@line 25317
  HEAP32[$135 >> 2] = $14; //@line 25318
  $136 = $ReallocAsyncCtx7 + 28 | 0; //@line 25319
  HEAP32[$136 >> 2] = $16; //@line 25320
  sp = STACKTOP; //@line 25321
  return;
 }
 $137 = HEAP8[$2 >> 0] & -33; //@line 25325
 HEAP8[$2 >> 0] = $137; //@line 25326
 do {
  if (!($137 & 2)) {
   $176 = $137; //@line 25331
  } else {
   $148 = $137 & -3; //@line 25333
   HEAP8[$2 >> 0] = $148; //@line 25334
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $10) | 0; //@line 25339
    _printf(12994, $14) | 0; //@line 25340
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25341
    _putchar(10) | 0; //@line 25342
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 25345
     $152 = $ReallocAsyncCtx6 + 4 | 0; //@line 25346
     HEAP32[$152 >> 2] = $2; //@line 25347
     $153 = $ReallocAsyncCtx6 + 8 | 0; //@line 25348
     HEAP32[$153 >> 2] = $4; //@line 25349
     $154 = $ReallocAsyncCtx6 + 12 | 0; //@line 25350
     HEAP32[$154 >> 2] = $8; //@line 25351
     $155 = $ReallocAsyncCtx6 + 16 | 0; //@line 25352
     HEAP32[$155 >> 2] = $8; //@line 25353
     sp = STACKTOP; //@line 25354
     return;
    }
    ___async_unwind = 0; //@line 25357
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 25358
    $152 = $ReallocAsyncCtx6 + 4 | 0; //@line 25359
    HEAP32[$152 >> 2] = $2; //@line 25360
    $153 = $ReallocAsyncCtx6 + 8 | 0; //@line 25361
    HEAP32[$153 >> 2] = $4; //@line 25362
    $154 = $ReallocAsyncCtx6 + 12 | 0; //@line 25363
    HEAP32[$154 >> 2] = $8; //@line 25364
    $155 = $ReallocAsyncCtx6 + 16 | 0; //@line 25365
    HEAP32[$155 >> 2] = $8; //@line 25366
    sp = STACKTOP; //@line 25367
    return;
   }
   if ($148 & 4) {
    $174 = $148 & -5; //@line 25373
    HEAP8[$2 >> 0] = $174; //@line 25374
    $176 = $174; //@line 25375
    break;
   }
   $159 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25379
   $160 = $159 + 16 | 0; //@line 25380
   $162 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 25382
   $163 = $159 + 28 | 0; //@line 25383
   $164 = HEAP32[$163 >> 2] | 0; //@line 25384
   if (!$164) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 25387
    _mbed_assert_internal(15061, 15066, 1102); //@line 25388
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 25391
     $166 = $ReallocAsyncCtx15 + 4 | 0; //@line 25392
     HEAP32[$166 >> 2] = $163; //@line 25393
     $167 = $ReallocAsyncCtx15 + 8 | 0; //@line 25394
     HEAP32[$167 >> 2] = $160; //@line 25395
     $168 = $ReallocAsyncCtx15 + 12 | 0; //@line 25396
     HEAP32[$168 >> 2] = $162; //@line 25397
     $169 = $ReallocAsyncCtx15 + 16 | 0; //@line 25398
     HEAP32[$169 >> 2] = $2; //@line 25399
     $170 = $ReallocAsyncCtx15 + 20 | 0; //@line 25400
     HEAP32[$170 >> 2] = $4; //@line 25401
     sp = STACKTOP; //@line 25402
     return;
    }
    ___async_unwind = 0; //@line 25405
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 25406
    $166 = $ReallocAsyncCtx15 + 4 | 0; //@line 25407
    HEAP32[$166 >> 2] = $163; //@line 25408
    $167 = $ReallocAsyncCtx15 + 8 | 0; //@line 25409
    HEAP32[$167 >> 2] = $160; //@line 25410
    $168 = $ReallocAsyncCtx15 + 12 | 0; //@line 25411
    HEAP32[$168 >> 2] = $162; //@line 25412
    $169 = $ReallocAsyncCtx15 + 16 | 0; //@line 25413
    HEAP32[$169 >> 2] = $2; //@line 25414
    $170 = $ReallocAsyncCtx15 + 20 | 0; //@line 25415
    HEAP32[$170 >> 2] = $4; //@line 25416
    sp = STACKTOP; //@line 25417
    return;
   } else {
    $171 = HEAP32[$164 >> 2] | 0; //@line 25420
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25421
    FUNCTION_TABLE_vii[$171 & 31]($160, $162); //@line 25422
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 25425
     $172 = $ReallocAsyncCtx4 + 4 | 0; //@line 25426
     HEAP32[$172 >> 2] = $2; //@line 25427
     $173 = $ReallocAsyncCtx4 + 8 | 0; //@line 25428
     HEAP32[$173 >> 2] = $4; //@line 25429
     sp = STACKTOP; //@line 25430
     return;
    }
    ___async_unwind = 0; //@line 25433
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 25434
    $172 = $ReallocAsyncCtx4 + 4 | 0; //@line 25435
    HEAP32[$172 >> 2] = $2; //@line 25436
    $173 = $ReallocAsyncCtx4 + 8 | 0; //@line 25437
    HEAP32[$173 >> 2] = $4; //@line 25438
    sp = STACKTOP; //@line 25439
    return;
   }
  }
 } while (0);
 if (!($176 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $176 & -17; //@line 25450
 $180 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25452
 $181 = $180 + 48 | 0; //@line 25453
 $183 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 25455
 $184 = $180 + 60 | 0; //@line 25456
 $185 = HEAP32[$184 >> 2] | 0; //@line 25457
 if (!$185) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25460
  _mbed_assert_internal(15061, 15066, 1102); //@line 25461
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 25464
   $187 = $ReallocAsyncCtx14 + 4 | 0; //@line 25465
   HEAP32[$187 >> 2] = $184; //@line 25466
   $188 = $ReallocAsyncCtx14 + 8 | 0; //@line 25467
   HEAP32[$188 >> 2] = $181; //@line 25468
   $189 = $ReallocAsyncCtx14 + 12 | 0; //@line 25469
   HEAP32[$189 >> 2] = $183; //@line 25470
   sp = STACKTOP; //@line 25471
   return;
  }
  ___async_unwind = 0; //@line 25474
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 25475
  $187 = $ReallocAsyncCtx14 + 4 | 0; //@line 25476
  HEAP32[$187 >> 2] = $184; //@line 25477
  $188 = $ReallocAsyncCtx14 + 8 | 0; //@line 25478
  HEAP32[$188 >> 2] = $181; //@line 25479
  $189 = $ReallocAsyncCtx14 + 12 | 0; //@line 25480
  HEAP32[$189 >> 2] = $183; //@line 25481
  sp = STACKTOP; //@line 25482
  return;
 } else {
  $190 = HEAP32[$185 >> 2] | 0; //@line 25485
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25486
  FUNCTION_TABLE_vii[$190 & 31]($181, $183); //@line 25487
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 25490
   sp = STACKTOP; //@line 25491
   return;
  }
  ___async_unwind = 0; //@line 25494
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 25495
  sp = STACKTOP; //@line 25496
  return;
 }
}
function _equeue_dispatch__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$06790$reg2mem$0 = 0, $$06790$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16634
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 16639
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16641
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16647
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16649
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16651
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16653
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16655
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16657
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16659
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16661
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16663
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16665
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16667
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16669
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16671
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16673
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16675
 $$06790$reg2mem$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 16676
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 16676
 $$reg2mem24$0 = HEAP32[$0 + 20 >> 2] | 0; //@line 16676
 while (1) {
  $68 = HEAP32[$$06790$reg2mem$0 + 24 >> 2] | 0; //@line 16679
  if (($68 | 0) > -1) {
   label = 8; //@line 16682
   break;
  }
  $92 = $$06790$reg2mem$0 + 4 | 0; //@line 16686
  $93 = HEAP8[$92 >> 0] | 0; //@line 16687
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$40 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 16696
  $102 = HEAP32[$$06790$reg2mem$0 + 28 >> 2] | 0; //@line 16698
  if ($102 | 0) {
   label = 12; //@line 16701
   break;
  }
  _equeue_mutex_lock($12); //@line 16704
  $125 = HEAP32[$6 >> 2] | 0; //@line 16705
  L6 : do {
   if (!$125) {
    $$02329$i$i = $6; //@line 16709
    label = 21; //@line 16710
   } else {
    $127 = HEAP32[$$06790$reg2mem$0 >> 2] | 0; //@line 16712
    $$025$i$i = $6; //@line 16713
    $129 = $125; //@line 16713
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 16715
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 16720
     $132 = HEAP32[$131 >> 2] | 0; //@line 16721
     if (!$132) {
      $$02329$i$i = $131; //@line 16724
      label = 21; //@line 16725
      break L6;
     } else {
      $$025$i$i = $131; //@line 16728
      $129 = $132; //@line 16728
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06790$reg2mem$0 + 12 >> 2] = $129; //@line 16734
     $$02330$i$i = $$025$i$i; //@line 16737
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 16737
    } else {
     $$02329$i$i = $$025$i$i; //@line 16739
     label = 21; //@line 16740
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 16745
   HEAP32[$$06790$reg2mem$0 + 12 >> 2] = 0; //@line 16747
   $$02330$i$i = $$02329$i$i; //@line 16748
   $$sink$in$i$i = $$02329$i$i; //@line 16748
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 16751
  HEAP32[$$02330$i$i >> 2] = $$06790$reg2mem$0; //@line 16752
  _equeue_mutex_unlock($12); //@line 16753
  if (!$$reg2mem$0) {
   label = 24; //@line 16756
   break;
  }
  $41 = $$reg2mem$0 + 8 | 0; //@line 16759
  $42 = HEAP32[$41 >> 2] | 0; //@line 16760
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 16762
  if (!$44) {
   $$06790$reg2mem$0$phi = $$reg2mem$0; //@line 16765
   $$reg2mem$0 = $42; //@line 16765
   $$reg2mem24$0 = $41; //@line 16765
   $$06790$reg2mem$0 = $$06790$reg2mem$0$phi; //@line 16765
  } else {
   label = 3; //@line 16767
   break;
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 16773
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 16774
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 16777
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 16778
   HEAP32[$47 >> 2] = $42; //@line 16779
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 16780
   $$expand_i1_val = $4 & 1; //@line 16781
   HEAP8[$48 >> 0] = $$expand_i1_val; //@line 16782
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 16783
   HEAP32[$49 >> 2] = $6; //@line 16784
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 16785
   HEAP32[$50 >> 2] = $$reg2mem$0; //@line 16786
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 16787
   HEAP32[$51 >> 2] = $41; //@line 16788
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 16789
   HEAP32[$52 >> 2] = $12; //@line 16790
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 16791
   HEAP32[$53 >> 2] = $14; //@line 16792
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 16793
   HEAP32[$54 >> 2] = $16; //@line 16794
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 16795
   HEAP32[$55 >> 2] = $18; //@line 16796
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 16797
   HEAP32[$56 >> 2] = $20; //@line 16798
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 16799
   HEAP32[$57 >> 2] = $22; //@line 16800
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 16801
   HEAP32[$58 >> 2] = $24; //@line 16802
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 16803
   HEAP32[$59 >> 2] = $26; //@line 16804
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 16805
   HEAP32[$60 >> 2] = $28; //@line 16806
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 16807
   HEAP32[$61 >> 2] = $30; //@line 16808
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 16809
   HEAP32[$62 >> 2] = $32; //@line 16810
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 16811
   HEAP32[$63 >> 2] = $34; //@line 16812
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 16813
   HEAP32[$64 >> 2] = $36; //@line 16814
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 16815
   HEAP32[$65 >> 2] = $38; //@line 16816
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 16817
   HEAP32[$66 >> 2] = $40; //@line 16818
   sp = STACKTOP; //@line 16819
   return;
  }
  ___async_unwind = 0; //@line 16822
  HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 16823
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 16824
  HEAP32[$47 >> 2] = $42; //@line 16825
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 16826
  $$expand_i1_val = $4 & 1; //@line 16827
  HEAP8[$48 >> 0] = $$expand_i1_val; //@line 16828
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 16829
  HEAP32[$49 >> 2] = $6; //@line 16830
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 16831
  HEAP32[$50 >> 2] = $$reg2mem$0; //@line 16832
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 16833
  HEAP32[$51 >> 2] = $41; //@line 16834
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 16835
  HEAP32[$52 >> 2] = $12; //@line 16836
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 16837
  HEAP32[$53 >> 2] = $14; //@line 16838
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 16839
  HEAP32[$54 >> 2] = $16; //@line 16840
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 16841
  HEAP32[$55 >> 2] = $18; //@line 16842
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 16843
  HEAP32[$56 >> 2] = $20; //@line 16844
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 16845
  HEAP32[$57 >> 2] = $22; //@line 16846
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 16847
  HEAP32[$58 >> 2] = $24; //@line 16848
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 16849
  HEAP32[$59 >> 2] = $26; //@line 16850
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 16851
  HEAP32[$60 >> 2] = $28; //@line 16852
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 16853
  HEAP32[$61 >> 2] = $30; //@line 16854
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 16855
  HEAP32[$62 >> 2] = $32; //@line 16856
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 16857
  HEAP32[$63 >> 2] = $34; //@line 16858
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 16859
  HEAP32[$64 >> 2] = $36; //@line 16860
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 16861
  HEAP32[$65 >> 2] = $38; //@line 16862
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 16863
  HEAP32[$66 >> 2] = $40; //@line 16864
  sp = STACKTOP; //@line 16865
  return;
 } else if ((label | 0) == 8) {
  $70 = $$06790$reg2mem$0 + 20 | 0; //@line 16869
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 16872
  $73 = _equeue_tick() | 0; //@line 16873
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 16874
  _equeue_enqueue($28, $$06790$reg2mem$0, $73) | 0; //@line 16875
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 16878
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 16879
   HEAP32[$74 >> 2] = $$reg2mem$0; //@line 16880
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 16881
   $$expand_i1_val31 = $4 & 1; //@line 16882
   HEAP8[$75 >> 0] = $$expand_i1_val31; //@line 16883
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 16884
   HEAP32[$76 >> 2] = $6; //@line 16885
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 16886
   HEAP32[$77 >> 2] = $12; //@line 16887
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 16888
   HEAP32[$78 >> 2] = $30; //@line 16889
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 16890
   HEAP32[$79 >> 2] = $18; //@line 16891
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 16892
   HEAP32[$80 >> 2] = $16; //@line 16893
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 16894
   HEAP32[$81 >> 2] = $14; //@line 16895
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 16896
   HEAP32[$82 >> 2] = $20; //@line 16897
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 16898
   HEAP32[$83 >> 2] = $22; //@line 16899
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 16900
   HEAP32[$84 >> 2] = $24; //@line 16901
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 16902
   HEAP32[$85 >> 2] = $26; //@line 16903
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 16904
   HEAP32[$86 >> 2] = $28; //@line 16905
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 16906
   HEAP32[$87 >> 2] = $32; //@line 16907
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 16908
   HEAP32[$88 >> 2] = $34; //@line 16909
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 16910
   HEAP32[$89 >> 2] = $36; //@line 16911
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 16912
   HEAP32[$90 >> 2] = $38; //@line 16913
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 16914
   HEAP32[$91 >> 2] = $40; //@line 16915
   sp = STACKTOP; //@line 16916
   return;
  }
  ___async_unwind = 0; //@line 16919
  HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 16920
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 16921
  HEAP32[$74 >> 2] = $$reg2mem$0; //@line 16922
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 16923
  $$expand_i1_val31 = $4 & 1; //@line 16924
  HEAP8[$75 >> 0] = $$expand_i1_val31; //@line 16925
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 16926
  HEAP32[$76 >> 2] = $6; //@line 16927
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 16928
  HEAP32[$77 >> 2] = $12; //@line 16929
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 16930
  HEAP32[$78 >> 2] = $30; //@line 16931
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 16932
  HEAP32[$79 >> 2] = $18; //@line 16933
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 16934
  HEAP32[$80 >> 2] = $16; //@line 16935
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 16936
  HEAP32[$81 >> 2] = $14; //@line 16937
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 16938
  HEAP32[$82 >> 2] = $20; //@line 16939
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 16940
  HEAP32[$83 >> 2] = $22; //@line 16941
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 16942
  HEAP32[$84 >> 2] = $24; //@line 16943
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 16944
  HEAP32[$85 >> 2] = $26; //@line 16945
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 16946
  HEAP32[$86 >> 2] = $28; //@line 16947
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 16948
  HEAP32[$87 >> 2] = $32; //@line 16949
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 16950
  HEAP32[$88 >> 2] = $34; //@line 16951
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 16952
  HEAP32[$89 >> 2] = $36; //@line 16953
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 16954
  HEAP32[$90 >> 2] = $38; //@line 16955
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 16956
  HEAP32[$91 >> 2] = $40; //@line 16957
  sp = STACKTOP; //@line 16958
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 16963
  FUNCTION_TABLE_vi[$102 & 1023]($$06790$reg2mem$0 + 36 | 0); //@line 16964
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 16967
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 16968
   HEAP32[$105 >> 2] = $$reg2mem$0; //@line 16969
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 16970
   $$expand_i1_val33 = $4 & 1; //@line 16971
   HEAP8[$106 >> 0] = $$expand_i1_val33; //@line 16972
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 16973
   HEAP32[$107 >> 2] = $6; //@line 16974
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 16975
   HEAP32[$108 >> 2] = $$06790$reg2mem$0; //@line 16976
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 16977
   HEAP32[$109 >> 2] = $$reg2mem24$0; //@line 16978
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 16979
   HEAP32[$110 >> 2] = $12; //@line 16980
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 16981
   HEAP32[$111 >> 2] = $14; //@line 16982
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 16983
   HEAP32[$112 >> 2] = $16; //@line 16984
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 16985
   HEAP32[$113 >> 2] = $18; //@line 16986
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 16987
   HEAP32[$114 >> 2] = $20; //@line 16988
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 16989
   HEAP32[$115 >> 2] = $22; //@line 16990
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 16991
   HEAP32[$116 >> 2] = $24; //@line 16992
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 16993
   HEAP32[$117 >> 2] = $26; //@line 16994
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 16995
   HEAP32[$118 >> 2] = $28; //@line 16996
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 16997
   HEAP32[$119 >> 2] = $30; //@line 16998
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 16999
   HEAP32[$120 >> 2] = $32; //@line 17000
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 17001
   HEAP32[$121 >> 2] = $34; //@line 17002
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 17003
   HEAP32[$122 >> 2] = $36; //@line 17004
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 17005
   HEAP32[$123 >> 2] = $38; //@line 17006
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 17007
   HEAP32[$124 >> 2] = $40; //@line 17008
   sp = STACKTOP; //@line 17009
   return;
  }
  ___async_unwind = 0; //@line 17012
  HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 17013
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 17014
  HEAP32[$105 >> 2] = $$reg2mem$0; //@line 17015
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 17016
  $$expand_i1_val33 = $4 & 1; //@line 17017
  HEAP8[$106 >> 0] = $$expand_i1_val33; //@line 17018
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 17019
  HEAP32[$107 >> 2] = $6; //@line 17020
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 17021
  HEAP32[$108 >> 2] = $$06790$reg2mem$0; //@line 17022
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 17023
  HEAP32[$109 >> 2] = $$reg2mem24$0; //@line 17024
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 17025
  HEAP32[$110 >> 2] = $12; //@line 17026
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 17027
  HEAP32[$111 >> 2] = $14; //@line 17028
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 17029
  HEAP32[$112 >> 2] = $16; //@line 17030
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 17031
  HEAP32[$113 >> 2] = $18; //@line 17032
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 17033
  HEAP32[$114 >> 2] = $20; //@line 17034
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 17035
  HEAP32[$115 >> 2] = $22; //@line 17036
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 17037
  HEAP32[$116 >> 2] = $24; //@line 17038
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 17039
  HEAP32[$117 >> 2] = $26; //@line 17040
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 17041
  HEAP32[$118 >> 2] = $28; //@line 17042
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 17043
  HEAP32[$119 >> 2] = $30; //@line 17044
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 17045
  HEAP32[$120 >> 2] = $32; //@line 17046
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 17047
  HEAP32[$121 >> 2] = $34; //@line 17048
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 17049
  HEAP32[$122 >> 2] = $36; //@line 17050
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 17051
  HEAP32[$123 >> 2] = $38; //@line 17052
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 17053
  HEAP32[$124 >> 2] = $40; //@line 17054
  sp = STACKTOP; //@line 17055
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 17059
  if ($4) {
   $141 = $32 - $140 | 0; //@line 17061
   if (($141 | 0) < 1) {
    $143 = $28 + 40 | 0; //@line 17064
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($18); //@line 17068
     $146 = HEAP32[$143 >> 2] | 0; //@line 17069
     if ($146 | 0) {
      $148 = HEAP32[$20 >> 2] | 0; //@line 17072
      if ($148 | 0) {
       $151 = HEAP32[$28 + 44 >> 2] | 0; //@line 17076
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 17079
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 17083
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 17084
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 17087
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 17088
        HEAP32[$158 >> 2] = $30; //@line 17089
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 17090
        HEAP32[$159 >> 2] = $18; //@line 17091
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 17092
        HEAP32[$160 >> 2] = $16; //@line 17093
        sp = STACKTOP; //@line 17094
        return;
       }
       ___async_unwind = 0; //@line 17097
       HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 17098
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 17099
       HEAP32[$158 >> 2] = $30; //@line 17100
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 17101
       HEAP32[$159 >> 2] = $18; //@line 17102
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 17103
       HEAP32[$160 >> 2] = $16; //@line 17104
       sp = STACKTOP; //@line 17105
       return;
      }
     }
     HEAP8[$30 >> 0] = 1; //@line 17109
     _equeue_mutex_unlock($18); //@line 17110
    }
    HEAP8[$16 >> 0] = 0; //@line 17112
    return;
   } else {
    $$065 = $141; //@line 17115
   }
  } else {
   $$065 = -1; //@line 17118
  }
  _equeue_mutex_lock($18); //@line 17120
  $161 = HEAP32[$20 >> 2] | 0; //@line 17121
  if (!$161) {
   $$2 = $$065; //@line 17124
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 17128
   $168 = $165 & ~($165 >> 31); //@line 17131
   $$2 = $168 >>> 0 < $$065 >>> 0 ? $168 : $$065; //@line 17134
  }
  _equeue_mutex_unlock($18); //@line 17136
  _equeue_sema_wait($38, $$2) | 0; //@line 17137
  do {
   if (HEAP8[$16 >> 0] | 0) {
    _equeue_mutex_lock($18); //@line 17142
    if (!(HEAP8[$16 >> 0] | 0)) {
     _equeue_mutex_unlock($18); //@line 17146
     break;
    }
    HEAP8[$16 >> 0] = 0; //@line 17149
    _equeue_mutex_unlock($18); //@line 17150
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 17154
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 17155
  _wait_ms(20); //@line 17156
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 17159
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 17160
   $$expand_i1_val35 = $4 & 1; //@line 17161
   HEAP8[$175 >> 0] = $$expand_i1_val35; //@line 17162
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 17163
   HEAP32[$176 >> 2] = $6; //@line 17164
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 17165
   HEAP32[$177 >> 2] = $12; //@line 17166
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 17167
   HEAP32[$178 >> 2] = $30; //@line 17168
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 17169
   HEAP32[$179 >> 2] = $18; //@line 17170
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 17171
   HEAP32[$180 >> 2] = $16; //@line 17172
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 17173
   HEAP32[$181 >> 2] = $14; //@line 17174
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 17175
   HEAP32[$182 >> 2] = $22; //@line 17176
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 17177
   HEAP32[$183 >> 2] = $24; //@line 17178
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 17179
   HEAP32[$184 >> 2] = $26; //@line 17180
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 17181
   HEAP32[$185 >> 2] = $20; //@line 17182
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 17183
   HEAP32[$186 >> 2] = $28; //@line 17184
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 17185
   HEAP32[$187 >> 2] = $34; //@line 17186
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 17187
   HEAP32[$188 >> 2] = $32; //@line 17188
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 17189
   HEAP32[$189 >> 2] = $174; //@line 17190
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 17191
   HEAP32[$190 >> 2] = $36; //@line 17192
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 17193
   HEAP32[$191 >> 2] = $38; //@line 17194
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 17195
   HEAP32[$192 >> 2] = $40; //@line 17196
   sp = STACKTOP; //@line 17197
   return;
  }
  ___async_unwind = 0; //@line 17200
  HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 17201
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 17202
  $$expand_i1_val35 = $4 & 1; //@line 17203
  HEAP8[$175 >> 0] = $$expand_i1_val35; //@line 17204
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 17205
  HEAP32[$176 >> 2] = $6; //@line 17206
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 17207
  HEAP32[$177 >> 2] = $12; //@line 17208
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 17209
  HEAP32[$178 >> 2] = $30; //@line 17210
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 17211
  HEAP32[$179 >> 2] = $18; //@line 17212
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 17213
  HEAP32[$180 >> 2] = $16; //@line 17214
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 17215
  HEAP32[$181 >> 2] = $14; //@line 17216
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 17217
  HEAP32[$182 >> 2] = $22; //@line 17218
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 17219
  HEAP32[$183 >> 2] = $24; //@line 17220
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 17221
  HEAP32[$184 >> 2] = $26; //@line 17222
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 17223
  HEAP32[$185 >> 2] = $20; //@line 17224
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 17225
  HEAP32[$186 >> 2] = $28; //@line 17226
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 17227
  HEAP32[$187 >> 2] = $34; //@line 17228
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 17229
  HEAP32[$188 >> 2] = $32; //@line 17230
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 17231
  HEAP32[$189 >> 2] = $174; //@line 17232
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 17233
  HEAP32[$190 >> 2] = $36; //@line 17234
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 17235
  HEAP32[$191 >> 2] = $38; //@line 17236
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 17237
  HEAP32[$192 >> 2] = $40; //@line 17238
  sp = STACKTOP; //@line 17239
  return;
 }
}
function _equeue_dispatch__async_cb_9($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$06790$reg2mem$0 = 0, $$06790$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17257
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 17262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17264
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17270
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17272
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17274
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17276
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17278
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17280
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17282
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17284
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17286
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17288
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17290
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17292
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17294
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17296
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17298
 $$06790$reg2mem$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 17299
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 17299
 $$reg2mem24$0 = HEAP32[$0 + 20 >> 2] | 0; //@line 17299
 while (1) {
  _equeue_mutex_lock($12); //@line 17301
  $125 = HEAP32[$6 >> 2] | 0; //@line 17302
  L4 : do {
   if (!$125) {
    $$02329$i$i = $6; //@line 17306
    label = 21; //@line 17307
   } else {
    $127 = HEAP32[$$06790$reg2mem$0 >> 2] | 0; //@line 17309
    $$025$i$i = $6; //@line 17310
    $129 = $125; //@line 17310
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 17312
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 17317
     $132 = HEAP32[$131 >> 2] | 0; //@line 17318
     if (!$132) {
      $$02329$i$i = $131; //@line 17321
      label = 21; //@line 17322
      break L4;
     } else {
      $$025$i$i = $131; //@line 17325
      $129 = $132; //@line 17325
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06790$reg2mem$0 + 12 >> 2] = $129; //@line 17331
     $$02330$i$i = $$025$i$i; //@line 17334
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 17334
    } else {
     $$02329$i$i = $$025$i$i; //@line 17336
     label = 21; //@line 17337
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 17342
   HEAP32[$$06790$reg2mem$0 + 12 >> 2] = 0; //@line 17344
   $$02330$i$i = $$02329$i$i; //@line 17345
   $$sink$in$i$i = $$02329$i$i; //@line 17345
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 17348
  HEAP32[$$02330$i$i >> 2] = $$06790$reg2mem$0; //@line 17349
  _equeue_mutex_unlock($12); //@line 17350
  if (!$$reg2mem$0) {
   label = 24; //@line 17353
   break;
  }
  $$reg2mem24$0 = $$reg2mem$0 + 8 | 0; //@line 17356
  $42 = HEAP32[$$reg2mem24$0 >> 2] | 0; //@line 17357
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 17359
  if ($44 | 0) {
   label = 3; //@line 17362
   break;
  }
  $68 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 17366
  if (($68 | 0) > -1) {
   label = 7; //@line 17369
   break;
  }
  $92 = $$reg2mem$0 + 4 | 0; //@line 17373
  $93 = HEAP8[$92 >> 0] | 0; //@line 17374
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$40 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 17383
  $102 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 17385
  if ($102 | 0) {
   label = 11; //@line 17390
   break;
  } else {
   $$06790$reg2mem$0$phi = $$reg2mem$0; //@line 17388
   $$reg2mem$0 = $42; //@line 17388
   $$06790$reg2mem$0 = $$06790$reg2mem$0$phi; //@line 17388
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 17396
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 17397
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 17400
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 17401
   HEAP32[$47 >> 2] = $42; //@line 17402
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 17403
   $$expand_i1_val = $4 & 1; //@line 17404
   HEAP8[$48 >> 0] = $$expand_i1_val; //@line 17405
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 17406
   HEAP32[$49 >> 2] = $6; //@line 17407
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 17408
   HEAP32[$50 >> 2] = $$reg2mem$0; //@line 17409
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 17410
   HEAP32[$51 >> 2] = $$reg2mem24$0; //@line 17411
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 17412
   HEAP32[$52 >> 2] = $12; //@line 17413
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 17414
   HEAP32[$53 >> 2] = $14; //@line 17415
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 17416
   HEAP32[$54 >> 2] = $16; //@line 17417
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 17418
   HEAP32[$55 >> 2] = $18; //@line 17419
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 17420
   HEAP32[$56 >> 2] = $20; //@line 17421
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 17422
   HEAP32[$57 >> 2] = $22; //@line 17423
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 17424
   HEAP32[$58 >> 2] = $24; //@line 17425
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 17426
   HEAP32[$59 >> 2] = $26; //@line 17427
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 17428
   HEAP32[$60 >> 2] = $28; //@line 17429
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 17430
   HEAP32[$61 >> 2] = $30; //@line 17431
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 17432
   HEAP32[$62 >> 2] = $32; //@line 17433
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 17434
   HEAP32[$63 >> 2] = $34; //@line 17435
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 17436
   HEAP32[$64 >> 2] = $36; //@line 17437
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 17438
   HEAP32[$65 >> 2] = $38; //@line 17439
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 17440
   HEAP32[$66 >> 2] = $40; //@line 17441
   sp = STACKTOP; //@line 17442
   return;
  }
  ___async_unwind = 0; //@line 17445
  HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 17446
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 17447
  HEAP32[$47 >> 2] = $42; //@line 17448
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 17449
  $$expand_i1_val = $4 & 1; //@line 17450
  HEAP8[$48 >> 0] = $$expand_i1_val; //@line 17451
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 17452
  HEAP32[$49 >> 2] = $6; //@line 17453
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 17454
  HEAP32[$50 >> 2] = $$reg2mem$0; //@line 17455
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 17456
  HEAP32[$51 >> 2] = $$reg2mem24$0; //@line 17457
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 17458
  HEAP32[$52 >> 2] = $12; //@line 17459
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 17460
  HEAP32[$53 >> 2] = $14; //@line 17461
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 17462
  HEAP32[$54 >> 2] = $16; //@line 17463
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 17464
  HEAP32[$55 >> 2] = $18; //@line 17465
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 17466
  HEAP32[$56 >> 2] = $20; //@line 17467
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 17468
  HEAP32[$57 >> 2] = $22; //@line 17469
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 17470
  HEAP32[$58 >> 2] = $24; //@line 17471
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 17472
  HEAP32[$59 >> 2] = $26; //@line 17473
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 17474
  HEAP32[$60 >> 2] = $28; //@line 17475
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 17476
  HEAP32[$61 >> 2] = $30; //@line 17477
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 17478
  HEAP32[$62 >> 2] = $32; //@line 17479
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 17480
  HEAP32[$63 >> 2] = $34; //@line 17481
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 17482
  HEAP32[$64 >> 2] = $36; //@line 17483
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 17484
  HEAP32[$65 >> 2] = $38; //@line 17485
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 17486
  HEAP32[$66 >> 2] = $40; //@line 17487
  sp = STACKTOP; //@line 17488
  return;
 } else if ((label | 0) == 7) {
  $70 = $$reg2mem$0 + 20 | 0; //@line 17492
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 17495
  $73 = _equeue_tick() | 0; //@line 17496
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 17497
  _equeue_enqueue($28, $$reg2mem$0, $73) | 0; //@line 17498
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 17501
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 17502
   HEAP32[$74 >> 2] = $42; //@line 17503
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 17504
   $$expand_i1_val31 = $4 & 1; //@line 17505
   HEAP8[$75 >> 0] = $$expand_i1_val31; //@line 17506
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 17507
   HEAP32[$76 >> 2] = $6; //@line 17508
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 17509
   HEAP32[$77 >> 2] = $12; //@line 17510
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 17511
   HEAP32[$78 >> 2] = $30; //@line 17512
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 17513
   HEAP32[$79 >> 2] = $18; //@line 17514
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 17515
   HEAP32[$80 >> 2] = $16; //@line 17516
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 17517
   HEAP32[$81 >> 2] = $14; //@line 17518
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 17519
   HEAP32[$82 >> 2] = $20; //@line 17520
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 17521
   HEAP32[$83 >> 2] = $22; //@line 17522
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 17523
   HEAP32[$84 >> 2] = $24; //@line 17524
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 17525
   HEAP32[$85 >> 2] = $26; //@line 17526
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 17527
   HEAP32[$86 >> 2] = $28; //@line 17528
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 17529
   HEAP32[$87 >> 2] = $32; //@line 17530
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 17531
   HEAP32[$88 >> 2] = $34; //@line 17532
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 17533
   HEAP32[$89 >> 2] = $36; //@line 17534
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 17535
   HEAP32[$90 >> 2] = $38; //@line 17536
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 17537
   HEAP32[$91 >> 2] = $40; //@line 17538
   sp = STACKTOP; //@line 17539
   return;
  }
  ___async_unwind = 0; //@line 17542
  HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 17543
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 17544
  HEAP32[$74 >> 2] = $42; //@line 17545
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 17546
  $$expand_i1_val31 = $4 & 1; //@line 17547
  HEAP8[$75 >> 0] = $$expand_i1_val31; //@line 17548
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 17549
  HEAP32[$76 >> 2] = $6; //@line 17550
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 17551
  HEAP32[$77 >> 2] = $12; //@line 17552
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 17553
  HEAP32[$78 >> 2] = $30; //@line 17554
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 17555
  HEAP32[$79 >> 2] = $18; //@line 17556
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 17557
  HEAP32[$80 >> 2] = $16; //@line 17558
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 17559
  HEAP32[$81 >> 2] = $14; //@line 17560
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 17561
  HEAP32[$82 >> 2] = $20; //@line 17562
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 17563
  HEAP32[$83 >> 2] = $22; //@line 17564
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 17565
  HEAP32[$84 >> 2] = $24; //@line 17566
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 17567
  HEAP32[$85 >> 2] = $26; //@line 17568
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 17569
  HEAP32[$86 >> 2] = $28; //@line 17570
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 17571
  HEAP32[$87 >> 2] = $32; //@line 17572
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 17573
  HEAP32[$88 >> 2] = $34; //@line 17574
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 17575
  HEAP32[$89 >> 2] = $36; //@line 17576
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 17577
  HEAP32[$90 >> 2] = $38; //@line 17578
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 17579
  HEAP32[$91 >> 2] = $40; //@line 17580
  sp = STACKTOP; //@line 17581
  return;
 } else if ((label | 0) == 11) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 17586
  FUNCTION_TABLE_vi[$102 & 1023]($$reg2mem$0 + 36 | 0); //@line 17587
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 17590
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 17591
   HEAP32[$105 >> 2] = $42; //@line 17592
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 17593
   $$expand_i1_val33 = $4 & 1; //@line 17594
   HEAP8[$106 >> 0] = $$expand_i1_val33; //@line 17595
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 17596
   HEAP32[$107 >> 2] = $6; //@line 17597
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 17598
   HEAP32[$108 >> 2] = $$reg2mem$0; //@line 17599
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 17600
   HEAP32[$109 >> 2] = $$reg2mem24$0; //@line 17601
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 17602
   HEAP32[$110 >> 2] = $12; //@line 17603
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 17604
   HEAP32[$111 >> 2] = $14; //@line 17605
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 17606
   HEAP32[$112 >> 2] = $16; //@line 17607
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 17608
   HEAP32[$113 >> 2] = $18; //@line 17609
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 17610
   HEAP32[$114 >> 2] = $20; //@line 17611
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 17612
   HEAP32[$115 >> 2] = $22; //@line 17613
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 17614
   HEAP32[$116 >> 2] = $24; //@line 17615
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 17616
   HEAP32[$117 >> 2] = $26; //@line 17617
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 17618
   HEAP32[$118 >> 2] = $28; //@line 17619
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 17620
   HEAP32[$119 >> 2] = $30; //@line 17621
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 17622
   HEAP32[$120 >> 2] = $32; //@line 17623
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 17624
   HEAP32[$121 >> 2] = $34; //@line 17625
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 17626
   HEAP32[$122 >> 2] = $36; //@line 17627
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 17628
   HEAP32[$123 >> 2] = $38; //@line 17629
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 17630
   HEAP32[$124 >> 2] = $40; //@line 17631
   sp = STACKTOP; //@line 17632
   return;
  }
  ___async_unwind = 0; //@line 17635
  HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 17636
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 17637
  HEAP32[$105 >> 2] = $42; //@line 17638
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 17639
  $$expand_i1_val33 = $4 & 1; //@line 17640
  HEAP8[$106 >> 0] = $$expand_i1_val33; //@line 17641
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 17642
  HEAP32[$107 >> 2] = $6; //@line 17643
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 17644
  HEAP32[$108 >> 2] = $$reg2mem$0; //@line 17645
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 17646
  HEAP32[$109 >> 2] = $$reg2mem24$0; //@line 17647
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 17648
  HEAP32[$110 >> 2] = $12; //@line 17649
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 17650
  HEAP32[$111 >> 2] = $14; //@line 17651
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 17652
  HEAP32[$112 >> 2] = $16; //@line 17653
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 17654
  HEAP32[$113 >> 2] = $18; //@line 17655
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 17656
  HEAP32[$114 >> 2] = $20; //@line 17657
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 17658
  HEAP32[$115 >> 2] = $22; //@line 17659
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 17660
  HEAP32[$116 >> 2] = $24; //@line 17661
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 17662
  HEAP32[$117 >> 2] = $26; //@line 17663
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 17664
  HEAP32[$118 >> 2] = $28; //@line 17665
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 17666
  HEAP32[$119 >> 2] = $30; //@line 17667
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 17668
  HEAP32[$120 >> 2] = $32; //@line 17669
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 17670
  HEAP32[$121 >> 2] = $34; //@line 17671
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 17672
  HEAP32[$122 >> 2] = $36; //@line 17673
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 17674
  HEAP32[$123 >> 2] = $38; //@line 17675
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 17676
  HEAP32[$124 >> 2] = $40; //@line 17677
  sp = STACKTOP; //@line 17678
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 17682
  if ($4) {
   $141 = $32 - $140 | 0; //@line 17684
   if (($141 | 0) < 1) {
    $143 = $28 + 40 | 0; //@line 17687
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($18); //@line 17691
     $146 = HEAP32[$143 >> 2] | 0; //@line 17692
     if ($146 | 0) {
      $148 = HEAP32[$20 >> 2] | 0; //@line 17695
      if ($148 | 0) {
       $151 = HEAP32[$28 + 44 >> 2] | 0; //@line 17699
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 17702
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 17706
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 17707
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 17710
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 17711
        HEAP32[$158 >> 2] = $30; //@line 17712
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 17713
        HEAP32[$159 >> 2] = $18; //@line 17714
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 17715
        HEAP32[$160 >> 2] = $16; //@line 17716
        sp = STACKTOP; //@line 17717
        return;
       }
       ___async_unwind = 0; //@line 17720
       HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 17721
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 17722
       HEAP32[$158 >> 2] = $30; //@line 17723
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 17724
       HEAP32[$159 >> 2] = $18; //@line 17725
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 17726
       HEAP32[$160 >> 2] = $16; //@line 17727
       sp = STACKTOP; //@line 17728
       return;
      }
     }
     HEAP8[$30 >> 0] = 1; //@line 17732
     _equeue_mutex_unlock($18); //@line 17733
    }
    HEAP8[$16 >> 0] = 0; //@line 17735
    return;
   } else {
    $$065 = $141; //@line 17738
   }
  } else {
   $$065 = -1; //@line 17741
  }
  _equeue_mutex_lock($18); //@line 17743
  $161 = HEAP32[$20 >> 2] | 0; //@line 17744
  if (!$161) {
   $$2 = $$065; //@line 17747
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 17751
   $168 = $165 & ~($165 >> 31); //@line 17754
   $$2 = $168 >>> 0 < $$065 >>> 0 ? $168 : $$065; //@line 17757
  }
  _equeue_mutex_unlock($18); //@line 17759
  _equeue_sema_wait($38, $$2) | 0; //@line 17760
  do {
   if (HEAP8[$16 >> 0] | 0) {
    _equeue_mutex_lock($18); //@line 17765
    if (!(HEAP8[$16 >> 0] | 0)) {
     _equeue_mutex_unlock($18); //@line 17769
     break;
    }
    HEAP8[$16 >> 0] = 0; //@line 17772
    _equeue_mutex_unlock($18); //@line 17773
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 17777
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 17778
  _wait_ms(20); //@line 17779
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 17782
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 17783
   $$expand_i1_val35 = $4 & 1; //@line 17784
   HEAP8[$175 >> 0] = $$expand_i1_val35; //@line 17785
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 17786
   HEAP32[$176 >> 2] = $6; //@line 17787
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 17788
   HEAP32[$177 >> 2] = $12; //@line 17789
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 17790
   HEAP32[$178 >> 2] = $30; //@line 17791
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 17792
   HEAP32[$179 >> 2] = $18; //@line 17793
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 17794
   HEAP32[$180 >> 2] = $16; //@line 17795
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 17796
   HEAP32[$181 >> 2] = $14; //@line 17797
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 17798
   HEAP32[$182 >> 2] = $22; //@line 17799
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 17800
   HEAP32[$183 >> 2] = $24; //@line 17801
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 17802
   HEAP32[$184 >> 2] = $26; //@line 17803
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 17804
   HEAP32[$185 >> 2] = $20; //@line 17805
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 17806
   HEAP32[$186 >> 2] = $28; //@line 17807
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 17808
   HEAP32[$187 >> 2] = $34; //@line 17809
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 17810
   HEAP32[$188 >> 2] = $32; //@line 17811
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 17812
   HEAP32[$189 >> 2] = $174; //@line 17813
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 17814
   HEAP32[$190 >> 2] = $36; //@line 17815
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 17816
   HEAP32[$191 >> 2] = $38; //@line 17817
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 17818
   HEAP32[$192 >> 2] = $40; //@line 17819
   sp = STACKTOP; //@line 17820
   return;
  }
  ___async_unwind = 0; //@line 17823
  HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 17824
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 17825
  $$expand_i1_val35 = $4 & 1; //@line 17826
  HEAP8[$175 >> 0] = $$expand_i1_val35; //@line 17827
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 17828
  HEAP32[$176 >> 2] = $6; //@line 17829
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 17830
  HEAP32[$177 >> 2] = $12; //@line 17831
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 17832
  HEAP32[$178 >> 2] = $30; //@line 17833
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 17834
  HEAP32[$179 >> 2] = $18; //@line 17835
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 17836
  HEAP32[$180 >> 2] = $16; //@line 17837
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 17838
  HEAP32[$181 >> 2] = $14; //@line 17839
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 17840
  HEAP32[$182 >> 2] = $22; //@line 17841
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 17842
  HEAP32[$183 >> 2] = $24; //@line 17843
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 17844
  HEAP32[$184 >> 2] = $26; //@line 17845
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 17846
  HEAP32[$185 >> 2] = $20; //@line 17847
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 17848
  HEAP32[$186 >> 2] = $28; //@line 17849
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 17850
  HEAP32[$187 >> 2] = $34; //@line 17851
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 17852
  HEAP32[$188 >> 2] = $32; //@line 17853
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 17854
  HEAP32[$189 >> 2] = $174; //@line 17855
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 17856
  HEAP32[$190 >> 2] = $36; //@line 17857
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 17858
  HEAP32[$191 >> 2] = $38; //@line 17859
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 17860
  HEAP32[$192 >> 2] = $40; //@line 17861
  sp = STACKTOP; //@line 17862
  return;
 }
}
function _equeue_dispatch__async_cb_11($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$reg2mem$0 = 0, $$sink$in$i$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $147 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17894
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 17899
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17901
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17903
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17905
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17907
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17909
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17911
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17913
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17915
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17917
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17919
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17921
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17923
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17925
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17927
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17929
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17931
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 17932
 while (1) {
  if (!$$reg2mem$0) {
   label = 24; //@line 17936
   break;
  }
  $37 = $$reg2mem$0 + 8 | 0; //@line 17939
  $38 = HEAP32[$37 >> 2] | 0; //@line 17940
  $40 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 17942
  if ($40 | 0) {
   label = 3; //@line 17945
   break;
  }
  $64 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 17949
  if (($64 | 0) > -1) {
   label = 7; //@line 17952
   break;
  }
  $88 = $$reg2mem$0 + 4 | 0; //@line 17956
  $89 = HEAP8[$88 >> 0] | 0; //@line 17957
  HEAP8[$88 >> 0] = (($89 + 1 & 255) << HEAP32[$36 >> 2] | 0) == 0 ? 1 : ($89 & 255) + 1 & 255; //@line 17966
  $98 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 17968
  if ($98 | 0) {
   label = 12; //@line 17971
   break;
  }
  _equeue_mutex_lock($8); //@line 17974
  $121 = HEAP32[$6 >> 2] | 0; //@line 17975
  L8 : do {
   if (!$121) {
    $$02329$i$i = $6; //@line 17979
    label = 21; //@line 17980
   } else {
    $123 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 17982
    $$025$i$i = $6; //@line 17983
    $125 = $121; //@line 17983
    while (1) {
     $124 = HEAP32[$125 >> 2] | 0; //@line 17985
     if ($124 >>> 0 >= $123 >>> 0) {
      break;
     }
     $127 = $125 + 8 | 0; //@line 17990
     $128 = HEAP32[$127 >> 2] | 0; //@line 17991
     if (!$128) {
      $$02329$i$i = $127; //@line 17994
      label = 21; //@line 17995
      break L8;
     } else {
      $$025$i$i = $127; //@line 17998
      $125 = $128; //@line 17998
     }
    }
    if (($124 | 0) == ($123 | 0)) {
     HEAP32[$$reg2mem$0 + 12 >> 2] = $125; //@line 18004
     $$02330$i$i = $$025$i$i; //@line 18007
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 18007
    } else {
     $$02329$i$i = $$025$i$i; //@line 18009
     label = 21; //@line 18010
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 18015
   HEAP32[$$reg2mem$0 + 12 >> 2] = 0; //@line 18017
   $$02330$i$i = $$02329$i$i; //@line 18018
   $$sink$in$i$i = $$02329$i$i; //@line 18018
  }
  HEAP32[$37 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 18021
  HEAP32[$$02330$i$i >> 2] = $$reg2mem$0; //@line 18022
  _equeue_mutex_unlock($8); //@line 18023
  $$reg2mem$0 = $38; //@line 18024
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 18028
  FUNCTION_TABLE_vi[$40 & 1023]($$reg2mem$0 + 36 | 0); //@line 18029
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 18032
   $43 = $ReallocAsyncCtx + 4 | 0; //@line 18033
   HEAP32[$43 >> 2] = $38; //@line 18034
   $44 = $ReallocAsyncCtx + 8 | 0; //@line 18035
   $$expand_i1_val = $4 & 1; //@line 18036
   HEAP8[$44 >> 0] = $$expand_i1_val; //@line 18037
   $45 = $ReallocAsyncCtx + 12 | 0; //@line 18038
   HEAP32[$45 >> 2] = $6; //@line 18039
   $46 = $ReallocAsyncCtx + 16 | 0; //@line 18040
   HEAP32[$46 >> 2] = $$reg2mem$0; //@line 18041
   $47 = $ReallocAsyncCtx + 20 | 0; //@line 18042
   HEAP32[$47 >> 2] = $37; //@line 18043
   $48 = $ReallocAsyncCtx + 24 | 0; //@line 18044
   HEAP32[$48 >> 2] = $8; //@line 18045
   $49 = $ReallocAsyncCtx + 28 | 0; //@line 18046
   HEAP32[$49 >> 2] = $16; //@line 18047
   $50 = $ReallocAsyncCtx + 32 | 0; //@line 18048
   HEAP32[$50 >> 2] = $14; //@line 18049
   $51 = $ReallocAsyncCtx + 36 | 0; //@line 18050
   HEAP32[$51 >> 2] = $12; //@line 18051
   $52 = $ReallocAsyncCtx + 40 | 0; //@line 18052
   HEAP32[$52 >> 2] = $18; //@line 18053
   $53 = $ReallocAsyncCtx + 44 | 0; //@line 18054
   HEAP32[$53 >> 2] = $20; //@line 18055
   $54 = $ReallocAsyncCtx + 48 | 0; //@line 18056
   HEAP32[$54 >> 2] = $22; //@line 18057
   $55 = $ReallocAsyncCtx + 52 | 0; //@line 18058
   HEAP32[$55 >> 2] = $24; //@line 18059
   $56 = $ReallocAsyncCtx + 56 | 0; //@line 18060
   HEAP32[$56 >> 2] = $26; //@line 18061
   $57 = $ReallocAsyncCtx + 60 | 0; //@line 18062
   HEAP32[$57 >> 2] = $10; //@line 18063
   $58 = $ReallocAsyncCtx + 64 | 0; //@line 18064
   HEAP32[$58 >> 2] = $28; //@line 18065
   $59 = $ReallocAsyncCtx + 68 | 0; //@line 18066
   HEAP32[$59 >> 2] = $30; //@line 18067
   $60 = $ReallocAsyncCtx + 72 | 0; //@line 18068
   HEAP32[$60 >> 2] = $32; //@line 18069
   $61 = $ReallocAsyncCtx + 76 | 0; //@line 18070
   HEAP32[$61 >> 2] = $34; //@line 18071
   $62 = $ReallocAsyncCtx + 80 | 0; //@line 18072
   HEAP32[$62 >> 2] = $36; //@line 18073
   sp = STACKTOP; //@line 18074
   return;
  }
  ___async_unwind = 0; //@line 18077
  HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 18078
  $43 = $ReallocAsyncCtx + 4 | 0; //@line 18079
  HEAP32[$43 >> 2] = $38; //@line 18080
  $44 = $ReallocAsyncCtx + 8 | 0; //@line 18081
  $$expand_i1_val = $4 & 1; //@line 18082
  HEAP8[$44 >> 0] = $$expand_i1_val; //@line 18083
  $45 = $ReallocAsyncCtx + 12 | 0; //@line 18084
  HEAP32[$45 >> 2] = $6; //@line 18085
  $46 = $ReallocAsyncCtx + 16 | 0; //@line 18086
  HEAP32[$46 >> 2] = $$reg2mem$0; //@line 18087
  $47 = $ReallocAsyncCtx + 20 | 0; //@line 18088
  HEAP32[$47 >> 2] = $37; //@line 18089
  $48 = $ReallocAsyncCtx + 24 | 0; //@line 18090
  HEAP32[$48 >> 2] = $8; //@line 18091
  $49 = $ReallocAsyncCtx + 28 | 0; //@line 18092
  HEAP32[$49 >> 2] = $16; //@line 18093
  $50 = $ReallocAsyncCtx + 32 | 0; //@line 18094
  HEAP32[$50 >> 2] = $14; //@line 18095
  $51 = $ReallocAsyncCtx + 36 | 0; //@line 18096
  HEAP32[$51 >> 2] = $12; //@line 18097
  $52 = $ReallocAsyncCtx + 40 | 0; //@line 18098
  HEAP32[$52 >> 2] = $18; //@line 18099
  $53 = $ReallocAsyncCtx + 44 | 0; //@line 18100
  HEAP32[$53 >> 2] = $20; //@line 18101
  $54 = $ReallocAsyncCtx + 48 | 0; //@line 18102
  HEAP32[$54 >> 2] = $22; //@line 18103
  $55 = $ReallocAsyncCtx + 52 | 0; //@line 18104
  HEAP32[$55 >> 2] = $24; //@line 18105
  $56 = $ReallocAsyncCtx + 56 | 0; //@line 18106
  HEAP32[$56 >> 2] = $26; //@line 18107
  $57 = $ReallocAsyncCtx + 60 | 0; //@line 18108
  HEAP32[$57 >> 2] = $10; //@line 18109
  $58 = $ReallocAsyncCtx + 64 | 0; //@line 18110
  HEAP32[$58 >> 2] = $28; //@line 18111
  $59 = $ReallocAsyncCtx + 68 | 0; //@line 18112
  HEAP32[$59 >> 2] = $30; //@line 18113
  $60 = $ReallocAsyncCtx + 72 | 0; //@line 18114
  HEAP32[$60 >> 2] = $32; //@line 18115
  $61 = $ReallocAsyncCtx + 76 | 0; //@line 18116
  HEAP32[$61 >> 2] = $34; //@line 18117
  $62 = $ReallocAsyncCtx + 80 | 0; //@line 18118
  HEAP32[$62 >> 2] = $36; //@line 18119
  sp = STACKTOP; //@line 18120
  return;
 } else if ((label | 0) == 7) {
  $66 = $$reg2mem$0 + 20 | 0; //@line 18124
  HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $64; //@line 18127
  $69 = _equeue_tick() | 0; //@line 18128
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 18129
  _equeue_enqueue($26, $$reg2mem$0, $69) | 0; //@line 18130
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 18133
   $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 18134
   HEAP32[$70 >> 2] = $38; //@line 18135
   $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 18136
   $$expand_i1_val12 = $4 & 1; //@line 18137
   HEAP8[$71 >> 0] = $$expand_i1_val12; //@line 18138
   $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 18139
   HEAP32[$72 >> 2] = $6; //@line 18140
   $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 18141
   HEAP32[$73 >> 2] = $8; //@line 18142
   $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 18143
   HEAP32[$74 >> 2] = $10; //@line 18144
   $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 18145
   HEAP32[$75 >> 2] = $12; //@line 18146
   $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 18147
   HEAP32[$76 >> 2] = $14; //@line 18148
   $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 18149
   HEAP32[$77 >> 2] = $16; //@line 18150
   $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 18151
   HEAP32[$78 >> 2] = $18; //@line 18152
   $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 18153
   HEAP32[$79 >> 2] = $20; //@line 18154
   $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 18155
   HEAP32[$80 >> 2] = $22; //@line 18156
   $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 18157
   HEAP32[$81 >> 2] = $24; //@line 18158
   $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 18159
   HEAP32[$82 >> 2] = $26; //@line 18160
   $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 18161
   HEAP32[$83 >> 2] = $28; //@line 18162
   $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 18163
   HEAP32[$84 >> 2] = $30; //@line 18164
   $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 18165
   HEAP32[$85 >> 2] = $32; //@line 18166
   $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 18167
   HEAP32[$86 >> 2] = $34; //@line 18168
   $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 18169
   HEAP32[$87 >> 2] = $36; //@line 18170
   sp = STACKTOP; //@line 18171
   return;
  }
  ___async_unwind = 0; //@line 18174
  HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 18175
  $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 18176
  HEAP32[$70 >> 2] = $38; //@line 18177
  $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 18178
  $$expand_i1_val12 = $4 & 1; //@line 18179
  HEAP8[$71 >> 0] = $$expand_i1_val12; //@line 18180
  $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 18181
  HEAP32[$72 >> 2] = $6; //@line 18182
  $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 18183
  HEAP32[$73 >> 2] = $8; //@line 18184
  $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 18185
  HEAP32[$74 >> 2] = $10; //@line 18186
  $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 18187
  HEAP32[$75 >> 2] = $12; //@line 18188
  $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 18189
  HEAP32[$76 >> 2] = $14; //@line 18190
  $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 18191
  HEAP32[$77 >> 2] = $16; //@line 18192
  $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 18193
  HEAP32[$78 >> 2] = $18; //@line 18194
  $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 18195
  HEAP32[$79 >> 2] = $20; //@line 18196
  $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 18197
  HEAP32[$80 >> 2] = $22; //@line 18198
  $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 18199
  HEAP32[$81 >> 2] = $24; //@line 18200
  $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 18201
  HEAP32[$82 >> 2] = $26; //@line 18202
  $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 18203
  HEAP32[$83 >> 2] = $28; //@line 18204
  $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 18205
  HEAP32[$84 >> 2] = $30; //@line 18206
  $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 18207
  HEAP32[$85 >> 2] = $32; //@line 18208
  $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 18209
  HEAP32[$86 >> 2] = $34; //@line 18210
  $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 18211
  HEAP32[$87 >> 2] = $36; //@line 18212
  sp = STACKTOP; //@line 18213
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 18218
  FUNCTION_TABLE_vi[$98 & 1023]($$reg2mem$0 + 36 | 0); //@line 18219
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 18222
   $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 18223
   HEAP32[$101 >> 2] = $38; //@line 18224
   $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 18225
   $$expand_i1_val14 = $4 & 1; //@line 18226
   HEAP8[$102 >> 0] = $$expand_i1_val14; //@line 18227
   $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 18228
   HEAP32[$103 >> 2] = $6; //@line 18229
   $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 18230
   HEAP32[$104 >> 2] = $$reg2mem$0; //@line 18231
   $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 18232
   HEAP32[$105 >> 2] = $37; //@line 18233
   $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 18234
   HEAP32[$106 >> 2] = $8; //@line 18235
   $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 18236
   HEAP32[$107 >> 2] = $16; //@line 18237
   $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 18238
   HEAP32[$108 >> 2] = $14; //@line 18239
   $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 18240
   HEAP32[$109 >> 2] = $12; //@line 18241
   $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 18242
   HEAP32[$110 >> 2] = $18; //@line 18243
   $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 18244
   HEAP32[$111 >> 2] = $20; //@line 18245
   $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 18246
   HEAP32[$112 >> 2] = $22; //@line 18247
   $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 18248
   HEAP32[$113 >> 2] = $24; //@line 18249
   $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 18250
   HEAP32[$114 >> 2] = $26; //@line 18251
   $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 18252
   HEAP32[$115 >> 2] = $10; //@line 18253
   $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 18254
   HEAP32[$116 >> 2] = $28; //@line 18255
   $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 18256
   HEAP32[$117 >> 2] = $30; //@line 18257
   $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 18258
   HEAP32[$118 >> 2] = $32; //@line 18259
   $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 18260
   HEAP32[$119 >> 2] = $34; //@line 18261
   $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 18262
   HEAP32[$120 >> 2] = $36; //@line 18263
   sp = STACKTOP; //@line 18264
   return;
  }
  ___async_unwind = 0; //@line 18267
  HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 18268
  $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 18269
  HEAP32[$101 >> 2] = $38; //@line 18270
  $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 18271
  $$expand_i1_val14 = $4 & 1; //@line 18272
  HEAP8[$102 >> 0] = $$expand_i1_val14; //@line 18273
  $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 18274
  HEAP32[$103 >> 2] = $6; //@line 18275
  $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 18276
  HEAP32[$104 >> 2] = $$reg2mem$0; //@line 18277
  $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 18278
  HEAP32[$105 >> 2] = $37; //@line 18279
  $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 18280
  HEAP32[$106 >> 2] = $8; //@line 18281
  $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 18282
  HEAP32[$107 >> 2] = $16; //@line 18283
  $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 18284
  HEAP32[$108 >> 2] = $14; //@line 18285
  $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 18286
  HEAP32[$109 >> 2] = $12; //@line 18287
  $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 18288
  HEAP32[$110 >> 2] = $18; //@line 18289
  $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 18290
  HEAP32[$111 >> 2] = $20; //@line 18291
  $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 18292
  HEAP32[$112 >> 2] = $22; //@line 18293
  $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 18294
  HEAP32[$113 >> 2] = $24; //@line 18295
  $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 18296
  HEAP32[$114 >> 2] = $26; //@line 18297
  $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 18298
  HEAP32[$115 >> 2] = $10; //@line 18299
  $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 18300
  HEAP32[$116 >> 2] = $28; //@line 18301
  $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 18302
  HEAP32[$117 >> 2] = $30; //@line 18303
  $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 18304
  HEAP32[$118 >> 2] = $32; //@line 18305
  $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 18306
  HEAP32[$119 >> 2] = $34; //@line 18307
  $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 18308
  HEAP32[$120 >> 2] = $36; //@line 18309
  sp = STACKTOP; //@line 18310
  return;
 } else if ((label | 0) == 24) {
  $136 = _equeue_tick() | 0; //@line 18314
  if ($4) {
   $137 = $28 - $136 | 0; //@line 18316
   if (($137 | 0) < 1) {
    $139 = $26 + 40 | 0; //@line 18319
    if (HEAP32[$139 >> 2] | 0) {
     _equeue_mutex_lock($12); //@line 18323
     $142 = HEAP32[$139 >> 2] | 0; //@line 18324
     if ($142 | 0) {
      $144 = HEAP32[$18 >> 2] | 0; //@line 18327
      if ($144 | 0) {
       $147 = HEAP32[$26 + 44 >> 2] | 0; //@line 18331
       $150 = (HEAP32[$144 + 20 >> 2] | 0) - $136 | 0; //@line 18334
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 18338
       FUNCTION_TABLE_vii[$142 & 31]($147, $150 & ~($150 >> 31)); //@line 18339
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 18342
        $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 18343
        HEAP32[$154 >> 2] = $10; //@line 18344
        $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 18345
        HEAP32[$155 >> 2] = $12; //@line 18346
        $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 18347
        HEAP32[$156 >> 2] = $14; //@line 18348
        sp = STACKTOP; //@line 18349
        return;
       }
       ___async_unwind = 0; //@line 18352
       HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 18353
       $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 18354
       HEAP32[$154 >> 2] = $10; //@line 18355
       $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 18356
       HEAP32[$155 >> 2] = $12; //@line 18357
       $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 18358
       HEAP32[$156 >> 2] = $14; //@line 18359
       sp = STACKTOP; //@line 18360
       return;
      }
     }
     HEAP8[$10 >> 0] = 1; //@line 18364
     _equeue_mutex_unlock($12); //@line 18365
    }
    HEAP8[$14 >> 0] = 0; //@line 18367
    return;
   } else {
    $$065 = $137; //@line 18370
   }
  } else {
   $$065 = -1; //@line 18373
  }
  _equeue_mutex_lock($12); //@line 18375
  $157 = HEAP32[$18 >> 2] | 0; //@line 18376
  if (!$157) {
   $$2 = $$065; //@line 18379
  } else {
   $161 = (HEAP32[$157 + 20 >> 2] | 0) - $136 | 0; //@line 18383
   $164 = $161 & ~($161 >> 31); //@line 18386
   $$2 = $164 >>> 0 < $$065 >>> 0 ? $164 : $$065; //@line 18389
  }
  _equeue_mutex_unlock($12); //@line 18391
  _equeue_sema_wait($34, $$2) | 0; //@line 18392
  do {
   if (HEAP8[$14 >> 0] | 0) {
    _equeue_mutex_lock($12); //@line 18397
    if (!(HEAP8[$14 >> 0] | 0)) {
     _equeue_mutex_unlock($12); //@line 18401
     break;
    }
    HEAP8[$14 >> 0] = 0; //@line 18404
    _equeue_mutex_unlock($12); //@line 18405
    return;
   }
  } while (0);
  $170 = _equeue_tick() | 0; //@line 18409
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 18410
  _wait_ms(20); //@line 18411
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 18414
   $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 18415
   $$expand_i1_val16 = $4 & 1; //@line 18416
   HEAP8[$171 >> 0] = $$expand_i1_val16; //@line 18417
   $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 18418
   HEAP32[$172 >> 2] = $6; //@line 18419
   $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 18420
   HEAP32[$173 >> 2] = $8; //@line 18421
   $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 18422
   HEAP32[$174 >> 2] = $10; //@line 18423
   $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 18424
   HEAP32[$175 >> 2] = $12; //@line 18425
   $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 18426
   HEAP32[$176 >> 2] = $14; //@line 18427
   $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 18428
   HEAP32[$177 >> 2] = $16; //@line 18429
   $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 18430
   HEAP32[$178 >> 2] = $20; //@line 18431
   $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 18432
   HEAP32[$179 >> 2] = $22; //@line 18433
   $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 18434
   HEAP32[$180 >> 2] = $24; //@line 18435
   $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 18436
   HEAP32[$181 >> 2] = $18; //@line 18437
   $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 18438
   HEAP32[$182 >> 2] = $26; //@line 18439
   $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 18440
   HEAP32[$183 >> 2] = $30; //@line 18441
   $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 18442
   HEAP32[$184 >> 2] = $28; //@line 18443
   $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 18444
   HEAP32[$185 >> 2] = $170; //@line 18445
   $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 18446
   HEAP32[$186 >> 2] = $32; //@line 18447
   $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 18448
   HEAP32[$187 >> 2] = $34; //@line 18449
   $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 18450
   HEAP32[$188 >> 2] = $36; //@line 18451
   sp = STACKTOP; //@line 18452
   return;
  }
  ___async_unwind = 0; //@line 18455
  HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 18456
  $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 18457
  $$expand_i1_val16 = $4 & 1; //@line 18458
  HEAP8[$171 >> 0] = $$expand_i1_val16; //@line 18459
  $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 18460
  HEAP32[$172 >> 2] = $6; //@line 18461
  $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 18462
  HEAP32[$173 >> 2] = $8; //@line 18463
  $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 18464
  HEAP32[$174 >> 2] = $10; //@line 18465
  $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 18466
  HEAP32[$175 >> 2] = $12; //@line 18467
  $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 18468
  HEAP32[$176 >> 2] = $14; //@line 18469
  $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 18470
  HEAP32[$177 >> 2] = $16; //@line 18471
  $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 18472
  HEAP32[$178 >> 2] = $20; //@line 18473
  $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 18474
  HEAP32[$179 >> 2] = $22; //@line 18475
  $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 18476
  HEAP32[$180 >> 2] = $24; //@line 18477
  $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 18478
  HEAP32[$181 >> 2] = $18; //@line 18479
  $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 18480
  HEAP32[$182 >> 2] = $26; //@line 18481
  $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 18482
  HEAP32[$183 >> 2] = $30; //@line 18483
  $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 18484
  HEAP32[$184 >> 2] = $28; //@line 18485
  $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 18486
  HEAP32[$185 >> 2] = $170; //@line 18487
  $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 18488
  HEAP32[$186 >> 2] = $32; //@line 18489
  $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 18490
  HEAP32[$187 >> 2] = $34; //@line 18491
  $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 18492
  HEAP32[$188 >> 2] = $36; //@line 18493
  sp = STACKTOP; //@line 18494
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 11546
 STACKTOP = STACKTOP + 64 | 0; //@line 11547
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 11547
 $5 = sp + 16 | 0; //@line 11548
 $6 = sp; //@line 11549
 $7 = sp + 24 | 0; //@line 11550
 $8 = sp + 8 | 0; //@line 11551
 $9 = sp + 20 | 0; //@line 11552
 HEAP32[$5 >> 2] = $1; //@line 11553
 $10 = ($0 | 0) != 0; //@line 11554
 $11 = $7 + 40 | 0; //@line 11555
 $12 = $11; //@line 11556
 $13 = $7 + 39 | 0; //@line 11557
 $14 = $8 + 4 | 0; //@line 11558
 $$0243 = 0; //@line 11559
 $$0247 = 0; //@line 11559
 $$0269 = 0; //@line 11559
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 11568
     $$1248 = -1; //@line 11569
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 11573
     break;
    }
   } else {
    $$1248 = $$0247; //@line 11577
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 11580
  $21 = HEAP8[$20 >> 0] | 0; //@line 11581
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 11584
   break;
  } else {
   $23 = $21; //@line 11587
   $25 = $20; //@line 11587
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 11592
     $27 = $25; //@line 11592
     label = 9; //@line 11593
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 11598
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 11605
   HEAP32[$5 >> 2] = $24; //@line 11606
   $23 = HEAP8[$24 >> 0] | 0; //@line 11608
   $25 = $24; //@line 11608
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 11613
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 11618
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 11621
     $27 = $27 + 2 | 0; //@line 11622
     HEAP32[$5 >> 2] = $27; //@line 11623
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 11630
      break;
     } else {
      $$0249303 = $30; //@line 11627
      label = 9; //@line 11628
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 11638
  if ($10) {
   _out_670($0, $20, $36); //@line 11640
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 11644
   $$0247 = $$1248; //@line 11644
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 11652
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 11653
  if ($43) {
   $$0253 = -1; //@line 11655
   $$1270 = $$0269; //@line 11655
   $$sink = 1; //@line 11655
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 11665
    $$1270 = 1; //@line 11665
    $$sink = 3; //@line 11665
   } else {
    $$0253 = -1; //@line 11667
    $$1270 = $$0269; //@line 11667
    $$sink = 1; //@line 11667
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 11670
  HEAP32[$5 >> 2] = $51; //@line 11671
  $52 = HEAP8[$51 >> 0] | 0; //@line 11672
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 11674
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 11681
   $$lcssa291 = $52; //@line 11681
   $$lcssa292 = $51; //@line 11681
  } else {
   $$0262309 = 0; //@line 11683
   $60 = $52; //@line 11683
   $65 = $51; //@line 11683
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 11688
    $64 = $65 + 1 | 0; //@line 11689
    HEAP32[$5 >> 2] = $64; //@line 11690
    $66 = HEAP8[$64 >> 0] | 0; //@line 11691
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 11693
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 11700
     $$lcssa291 = $66; //@line 11700
     $$lcssa292 = $64; //@line 11700
     break;
    } else {
     $$0262309 = $63; //@line 11703
     $60 = $66; //@line 11703
     $65 = $64; //@line 11703
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 11715
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 11717
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 11722
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 11727
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 11739
     $$2271 = 1; //@line 11739
     $storemerge274 = $79 + 3 | 0; //@line 11739
    } else {
     label = 23; //@line 11741
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 11745
    if ($$1270 | 0) {
     $$0 = -1; //@line 11748
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11763
     $106 = HEAP32[$105 >> 2] | 0; //@line 11764
     HEAP32[$2 >> 2] = $105 + 4; //@line 11766
     $363 = $106; //@line 11767
    } else {
     $363 = 0; //@line 11769
    }
    $$0259 = $363; //@line 11773
    $$2271 = 0; //@line 11773
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 11773
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 11775
   $109 = ($$0259 | 0) < 0; //@line 11776
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 11781
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 11781
   $$3272 = $$2271; //@line 11781
   $115 = $storemerge274; //@line 11781
  } else {
   $112 = _getint_671($5) | 0; //@line 11783
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 11786
    break;
   }
   $$1260 = $112; //@line 11790
   $$1263 = $$0262$lcssa; //@line 11790
   $$3272 = $$1270; //@line 11790
   $115 = HEAP32[$5 >> 2] | 0; //@line 11790
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 11801
     $156 = _getint_671($5) | 0; //@line 11802
     $$0254 = $156; //@line 11804
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 11804
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 11813
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 11818
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 11823
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 11830
      $144 = $125 + 4 | 0; //@line 11834
      HEAP32[$5 >> 2] = $144; //@line 11835
      $$0254 = $140; //@line 11836
      $$pre345 = $144; //@line 11836
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 11842
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11857
     $152 = HEAP32[$151 >> 2] | 0; //@line 11858
     HEAP32[$2 >> 2] = $151 + 4; //@line 11860
     $364 = $152; //@line 11861
    } else {
     $364 = 0; //@line 11863
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 11866
    HEAP32[$5 >> 2] = $154; //@line 11867
    $$0254 = $364; //@line 11868
    $$pre345 = $154; //@line 11868
   } else {
    $$0254 = -1; //@line 11870
    $$pre345 = $115; //@line 11870
   }
  } while (0);
  $$0252 = 0; //@line 11873
  $158 = $$pre345; //@line 11873
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 11880
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 11883
   HEAP32[$5 >> 2] = $158; //@line 11884
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (15905 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 11889
   $168 = $167 & 255; //@line 11890
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 11894
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 11901
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 11905
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 11909
     break L1;
    } else {
     label = 50; //@line 11912
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 11917
     $176 = $3 + ($$0253 << 3) | 0; //@line 11919
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 11924
     $182 = $6; //@line 11925
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 11927
     HEAP32[$182 + 4 >> 2] = $181; //@line 11930
     label = 50; //@line 11931
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 11935
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 11938
    $187 = HEAP32[$5 >> 2] | 0; //@line 11940
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 11944
   if ($10) {
    $187 = $158; //@line 11946
   } else {
    $$0243 = 0; //@line 11948
    $$0247 = $$1248; //@line 11948
    $$0269 = $$3272; //@line 11948
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 11954
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 11960
  $196 = $$1263 & -65537; //@line 11963
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 11964
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 11972
       $$0243 = 0; //@line 11973
       $$0247 = $$1248; //@line 11973
       $$0269 = $$3272; //@line 11973
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 11979
       $$0243 = 0; //@line 11980
       $$0247 = $$1248; //@line 11980
       $$0269 = $$3272; //@line 11980
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 11988
       HEAP32[$208 >> 2] = $$1248; //@line 11990
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 11993
       $$0243 = 0; //@line 11994
       $$0247 = $$1248; //@line 11994
       $$0269 = $$3272; //@line 11994
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12001
       $$0243 = 0; //@line 12002
       $$0247 = $$1248; //@line 12002
       $$0269 = $$3272; //@line 12002
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12009
       $$0243 = 0; //@line 12010
       $$0247 = $$1248; //@line 12010
       $$0269 = $$3272; //@line 12010
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12016
       $$0243 = 0; //@line 12017
       $$0247 = $$1248; //@line 12017
       $$0269 = $$3272; //@line 12017
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12025
       HEAP32[$220 >> 2] = $$1248; //@line 12027
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12030
       $$0243 = 0; //@line 12031
       $$0247 = $$1248; //@line 12031
       $$0269 = $$3272; //@line 12031
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12036
       $$0247 = $$1248; //@line 12036
       $$0269 = $$3272; //@line 12036
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12046
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12046
     $$3265 = $$1263$ | 8; //@line 12046
     label = 62; //@line 12047
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12051
     $$1255 = $$0254; //@line 12051
     $$3265 = $$1263$; //@line 12051
     label = 62; //@line 12052
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12056
     $244 = HEAP32[$242 >> 2] | 0; //@line 12058
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12061
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12062
     $252 = $12 - $248 | 0; //@line 12066
     $$0228 = $248; //@line 12071
     $$1233 = 0; //@line 12071
     $$1238 = 16369; //@line 12071
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 12071
     $$4266 = $$1263$; //@line 12071
     $281 = $244; //@line 12071
     $283 = $247; //@line 12071
     label = 68; //@line 12072
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 12076
     $258 = HEAP32[$256 >> 2] | 0; //@line 12078
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 12081
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 12084
      $264 = tempRet0; //@line 12085
      $265 = $6; //@line 12086
      HEAP32[$265 >> 2] = $263; //@line 12088
      HEAP32[$265 + 4 >> 2] = $264; //@line 12091
      $$0232 = 1; //@line 12092
      $$0237 = 16369; //@line 12092
      $275 = $263; //@line 12092
      $276 = $264; //@line 12092
      label = 67; //@line 12093
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 12105
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 16369 : 16371 : 16370; //@line 12105
      $275 = $258; //@line 12105
      $276 = $261; //@line 12105
      label = 67; //@line 12106
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 12112
     $$0232 = 0; //@line 12118
     $$0237 = 16369; //@line 12118
     $275 = HEAP32[$197 >> 2] | 0; //@line 12118
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 12118
     label = 67; //@line 12119
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 12130
     $$2 = $13; //@line 12131
     $$2234 = 0; //@line 12131
     $$2239 = 16369; //@line 12131
     $$2251 = $11; //@line 12131
     $$5 = 1; //@line 12131
     $$6268 = $196; //@line 12131
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 12138
     label = 72; //@line 12139
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 12143
     $$1 = $302 | 0 ? $302 : 16379; //@line 12146
     label = 72; //@line 12147
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 12157
     HEAP32[$14 >> 2] = 0; //@line 12158
     HEAP32[$6 >> 2] = $8; //@line 12159
     $$4258354 = -1; //@line 12160
     $365 = $8; //@line 12160
     label = 76; //@line 12161
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 12165
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 12168
      $$0240$lcssa356 = 0; //@line 12169
      label = 85; //@line 12170
     } else {
      $$4258354 = $$0254; //@line 12172
      $365 = $$pre348; //@line 12172
      label = 76; //@line 12173
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 12180
     $$0247 = $$1248; //@line 12180
     $$0269 = $$3272; //@line 12180
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 12185
     $$2234 = 0; //@line 12185
     $$2239 = 16369; //@line 12185
     $$2251 = $11; //@line 12185
     $$5 = $$0254; //@line 12185
     $$6268 = $$1263$; //@line 12185
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 12191
    $227 = $6; //@line 12192
    $229 = HEAP32[$227 >> 2] | 0; //@line 12194
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 12197
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 12199
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 12205
    $$0228 = $234; //@line 12210
    $$1233 = $or$cond278 ? 0 : 2; //@line 12210
    $$1238 = $or$cond278 ? 16369 : 16369 + ($$1236 >> 4) | 0; //@line 12210
    $$2256 = $$1255; //@line 12210
    $$4266 = $$3265; //@line 12210
    $281 = $229; //@line 12210
    $283 = $232; //@line 12210
    label = 68; //@line 12211
   } else if ((label | 0) == 67) {
    label = 0; //@line 12214
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 12216
    $$1233 = $$0232; //@line 12216
    $$1238 = $$0237; //@line 12216
    $$2256 = $$0254; //@line 12216
    $$4266 = $$1263$; //@line 12216
    $281 = $275; //@line 12216
    $283 = $276; //@line 12216
    label = 68; //@line 12217
   } else if ((label | 0) == 72) {
    label = 0; //@line 12220
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 12221
    $306 = ($305 | 0) == 0; //@line 12222
    $$2 = $$1; //@line 12229
    $$2234 = 0; //@line 12229
    $$2239 = 16369; //@line 12229
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 12229
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 12229
    $$6268 = $196; //@line 12229
   } else if ((label | 0) == 76) {
    label = 0; //@line 12232
    $$0229316 = $365; //@line 12233
    $$0240315 = 0; //@line 12233
    $$1244314 = 0; //@line 12233
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 12235
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 12238
      $$2245 = $$1244314; //@line 12238
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 12241
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 12247
      $$2245 = $320; //@line 12247
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 12251
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 12254
      $$0240315 = $325; //@line 12254
      $$1244314 = $320; //@line 12254
     } else {
      $$0240$lcssa = $325; //@line 12256
      $$2245 = $320; //@line 12256
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 12262
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 12265
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 12268
     label = 85; //@line 12269
    } else {
     $$1230327 = $365; //@line 12271
     $$1241326 = 0; //@line 12271
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 12273
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12276
       label = 85; //@line 12277
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 12280
      $$1241326 = $331 + $$1241326 | 0; //@line 12281
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12284
       label = 85; //@line 12285
       break L97;
      }
      _out_670($0, $9, $331); //@line 12289
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12294
       label = 85; //@line 12295
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 12292
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 12303
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 12309
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 12311
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 12316
   $$2 = $or$cond ? $$0228 : $11; //@line 12321
   $$2234 = $$1233; //@line 12321
   $$2239 = $$1238; //@line 12321
   $$2251 = $11; //@line 12321
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 12321
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 12321
  } else if ((label | 0) == 85) {
   label = 0; //@line 12324
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 12326
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 12329
   $$0247 = $$1248; //@line 12329
   $$0269 = $$3272; //@line 12329
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 12334
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 12336
  $345 = $$$5 + $$2234 | 0; //@line 12337
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 12339
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 12340
  _out_670($0, $$2239, $$2234); //@line 12341
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 12343
  _pad_676($0, 48, $$$5, $343, 0); //@line 12344
  _out_670($0, $$2, $343); //@line 12345
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 12347
  $$0243 = $$2261; //@line 12348
  $$0247 = $$1248; //@line 12348
  $$0269 = $$3272; //@line 12348
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 12356
    } else {
     $$2242302 = 1; //@line 12358
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 12361
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 12364
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 12368
      $356 = $$2242302 + 1 | 0; //@line 12369
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 12372
      } else {
       $$2242$lcssa = $356; //@line 12374
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 12380
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 12386
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 12392
       } else {
        $$0 = 1; //@line 12394
        break;
       }
      }
     } else {
      $$0 = 1; //@line 12399
     }
    }
   } else {
    $$0 = $$1248; //@line 12403
   }
  }
 } while (0);
 STACKTOP = sp; //@line 12407
 return $$0 | 0; //@line 12407
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_22($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20051
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20055
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20057
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20059
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20061
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20063
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20065
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20067
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20069
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20071
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20073
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20075
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20077
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20079
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20081
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20083
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20085
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20087
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20089
 HEAP8[$14 + 688 >> 0] = 1; //@line 20091
 if (HEAP8[$36 >> 0] | 0) {
  HEAP8[$36 >> 0] = 0; //@line 20095
  $42 = $14 + 1112 | 0; //@line 20096
  $43 = $4 + 12 | 0; //@line 20097
  HEAP32[$4 >> 2] = 69; //@line 20098
  HEAP32[$4 + 4 >> 2] = 0; //@line 20100
  HEAP32[$4 + 8 >> 2] = $14; //@line 20102
  HEAP32[$43 >> 2] = 648; //@line 20103
  $44 = $14 + 1152 | 0; //@line 20104
  do {
   if (($44 | 0) != ($4 | 0)) {
    $46 = $14 + 1164 | 0; //@line 20108
    $47 = HEAP32[$46 >> 2] | 0; //@line 20109
    if ($47 | 0) {
     $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 20113
     $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 20114
     FUNCTION_TABLE_vi[$50 & 1023]($44); //@line 20115
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 70; //@line 20118
      $51 = $ReallocAsyncCtx + 4 | 0; //@line 20119
      HEAP32[$51 >> 2] = $43; //@line 20120
      $52 = $ReallocAsyncCtx + 8 | 0; //@line 20121
      HEAP32[$52 >> 2] = $46; //@line 20122
      $53 = $ReallocAsyncCtx + 12 | 0; //@line 20123
      HEAP32[$53 >> 2] = $44; //@line 20124
      $54 = $ReallocAsyncCtx + 16 | 0; //@line 20125
      HEAP32[$54 >> 2] = $4; //@line 20126
      $55 = $ReallocAsyncCtx + 20 | 0; //@line 20127
      HEAP32[$55 >> 2] = $42; //@line 20128
      sp = STACKTOP; //@line 20129
      return;
     }
     ___async_unwind = 0; //@line 20132
     HEAP32[$ReallocAsyncCtx >> 2] = 70; //@line 20133
     $51 = $ReallocAsyncCtx + 4 | 0; //@line 20134
     HEAP32[$51 >> 2] = $43; //@line 20135
     $52 = $ReallocAsyncCtx + 8 | 0; //@line 20136
     HEAP32[$52 >> 2] = $46; //@line 20137
     $53 = $ReallocAsyncCtx + 12 | 0; //@line 20138
     HEAP32[$53 >> 2] = $44; //@line 20139
     $54 = $ReallocAsyncCtx + 16 | 0; //@line 20140
     HEAP32[$54 >> 2] = $4; //@line 20141
     $55 = $ReallocAsyncCtx + 20 | 0; //@line 20142
     HEAP32[$55 >> 2] = $42; //@line 20143
     sp = STACKTOP; //@line 20144
     return;
    }
    $56 = HEAP32[$43 >> 2] | 0; //@line 20147
    if (!$56) {
     HEAP32[$46 >> 2] = 0; //@line 20150
     break;
    }
    $59 = HEAP32[$56 + 4 >> 2] | 0; //@line 20154
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 20155
    FUNCTION_TABLE_vii[$59 & 31]($44, $4); //@line 20156
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 20159
     $60 = $ReallocAsyncCtx2 + 4 | 0; //@line 20160
     HEAP32[$60 >> 2] = $43; //@line 20161
     $61 = $ReallocAsyncCtx2 + 8 | 0; //@line 20162
     HEAP32[$61 >> 2] = $46; //@line 20163
     $62 = $ReallocAsyncCtx2 + 12 | 0; //@line 20164
     HEAP32[$62 >> 2] = $42; //@line 20165
     $63 = $ReallocAsyncCtx2 + 16 | 0; //@line 20166
     HEAP32[$63 >> 2] = $4; //@line 20167
     sp = STACKTOP; //@line 20168
     return;
    }
    ___async_unwind = 0; //@line 20171
    HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 20172
    $60 = $ReallocAsyncCtx2 + 4 | 0; //@line 20173
    HEAP32[$60 >> 2] = $43; //@line 20174
    $61 = $ReallocAsyncCtx2 + 8 | 0; //@line 20175
    HEAP32[$61 >> 2] = $46; //@line 20176
    $62 = $ReallocAsyncCtx2 + 12 | 0; //@line 20177
    HEAP32[$62 >> 2] = $42; //@line 20178
    $63 = $ReallocAsyncCtx2 + 16 | 0; //@line 20179
    HEAP32[$63 >> 2] = $4; //@line 20180
    sp = STACKTOP; //@line 20181
    return;
   }
  } while (0);
  __ZN4mbed6Ticker5setupEy($42, 2e5, 0); //@line 20185
  $64 = HEAP32[$43 >> 2] | 0; //@line 20186
  if (!$64) {
   return;
  }
  $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 20192
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20193
  FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 20194
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 20197
   sp = STACKTOP; //@line 20198
   return;
  }
  ___async_unwind = 0; //@line 20201
  HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 20202
  sp = STACKTOP; //@line 20203
  return;
 }
 if ($38 | 0) {
  $69 = $14 + 1112 | 0; //@line 20208
  $70 = $2 + 12 | 0; //@line 20209
  HEAP32[$2 >> 2] = 73; //@line 20210
  HEAP32[$2 + 4 >> 2] = 0; //@line 20212
  HEAP32[$2 + 8 >> 2] = $14; //@line 20214
  HEAP32[$70 >> 2] = 648; //@line 20215
  $71 = ___muldi3($38 | 0, 0, 1e3, 0) | 0; //@line 20216
  $72 = tempRet0; //@line 20217
  $73 = $14 + 1152 | 0; //@line 20218
  do {
   if (($73 | 0) != ($2 | 0)) {
    $75 = $14 + 1164 | 0; //@line 20222
    $76 = HEAP32[$75 >> 2] | 0; //@line 20223
    if ($76 | 0) {
     $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 20227
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(96) | 0; //@line 20228
     FUNCTION_TABLE_vi[$79 & 1023]($73); //@line 20229
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 74; //@line 20232
      $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 20233
      HEAP32[$80 >> 2] = $75; //@line 20234
      $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 20235
      HEAP32[$81 >> 2] = $70; //@line 20236
      $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 20237
      HEAP32[$82 >> 2] = $73; //@line 20238
      $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 20239
      HEAP32[$83 >> 2] = $2; //@line 20240
      $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 20241
      HEAP32[$84 >> 2] = $69; //@line 20242
      $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 20243
      $86 = $85; //@line 20244
      $87 = $86; //@line 20245
      HEAP32[$87 >> 2] = $71; //@line 20246
      $88 = $86 + 4 | 0; //@line 20247
      $89 = $88; //@line 20248
      HEAP32[$89 >> 2] = $72; //@line 20249
      $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 20250
      HEAP32[$90 >> 2] = $6; //@line 20251
      $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 20252
      HEAP32[$91 >> 2] = $8; //@line 20253
      $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 20254
      HEAP32[$92 >> 2] = $10; //@line 20255
      $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 20256
      HEAP32[$93 >> 2] = $12; //@line 20257
      $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 20258
      HEAP32[$94 >> 2] = $14; //@line 20259
      $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 20260
      HEAP32[$95 >> 2] = $16; //@line 20261
      $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 20262
      HEAP32[$96 >> 2] = $18; //@line 20263
      $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 20264
      HEAP32[$97 >> 2] = $20; //@line 20265
      $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 20266
      HEAP32[$98 >> 2] = $22; //@line 20267
      $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 20268
      HEAP32[$99 >> 2] = $24; //@line 20269
      $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 20270
      HEAP32[$100 >> 2] = $26; //@line 20271
      $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 20272
      HEAP32[$101 >> 2] = $28; //@line 20273
      $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 20274
      HEAP32[$102 >> 2] = $30; //@line 20275
      $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 20276
      HEAP32[$103 >> 2] = $32; //@line 20277
      $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 20278
      HEAP32[$104 >> 2] = $34; //@line 20279
      sp = STACKTOP; //@line 20280
      return;
     }
     ___async_unwind = 0; //@line 20283
     HEAP32[$ReallocAsyncCtx4 >> 2] = 74; //@line 20284
     $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 20285
     HEAP32[$80 >> 2] = $75; //@line 20286
     $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 20287
     HEAP32[$81 >> 2] = $70; //@line 20288
     $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 20289
     HEAP32[$82 >> 2] = $73; //@line 20290
     $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 20291
     HEAP32[$83 >> 2] = $2; //@line 20292
     $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 20293
     HEAP32[$84 >> 2] = $69; //@line 20294
     $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 20295
     $86 = $85; //@line 20296
     $87 = $86; //@line 20297
     HEAP32[$87 >> 2] = $71; //@line 20298
     $88 = $86 + 4 | 0; //@line 20299
     $89 = $88; //@line 20300
     HEAP32[$89 >> 2] = $72; //@line 20301
     $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 20302
     HEAP32[$90 >> 2] = $6; //@line 20303
     $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 20304
     HEAP32[$91 >> 2] = $8; //@line 20305
     $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 20306
     HEAP32[$92 >> 2] = $10; //@line 20307
     $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 20308
     HEAP32[$93 >> 2] = $12; //@line 20309
     $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 20310
     HEAP32[$94 >> 2] = $14; //@line 20311
     $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 20312
     HEAP32[$95 >> 2] = $16; //@line 20313
     $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 20314
     HEAP32[$96 >> 2] = $18; //@line 20315
     $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 20316
     HEAP32[$97 >> 2] = $20; //@line 20317
     $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 20318
     HEAP32[$98 >> 2] = $22; //@line 20319
     $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 20320
     HEAP32[$99 >> 2] = $24; //@line 20321
     $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 20322
     HEAP32[$100 >> 2] = $26; //@line 20323
     $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 20324
     HEAP32[$101 >> 2] = $28; //@line 20325
     $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 20326
     HEAP32[$102 >> 2] = $30; //@line 20327
     $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 20328
     HEAP32[$103 >> 2] = $32; //@line 20329
     $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 20330
     HEAP32[$104 >> 2] = $34; //@line 20331
     sp = STACKTOP; //@line 20332
     return;
    }
    $105 = HEAP32[$70 >> 2] | 0; //@line 20335
    if (!$105) {
     HEAP32[$75 >> 2] = 0; //@line 20338
     break;
    }
    $108 = HEAP32[$105 + 4 >> 2] | 0; //@line 20342
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 20343
    FUNCTION_TABLE_vii[$108 & 31]($73, $2); //@line 20344
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 20347
     $109 = $ReallocAsyncCtx5 + 4 | 0; //@line 20348
     HEAP32[$109 >> 2] = $75; //@line 20349
     $110 = $ReallocAsyncCtx5 + 8 | 0; //@line 20350
     HEAP32[$110 >> 2] = $2; //@line 20351
     $111 = $ReallocAsyncCtx5 + 12 | 0; //@line 20352
     HEAP32[$111 >> 2] = $69; //@line 20353
     $112 = $ReallocAsyncCtx5 + 16 | 0; //@line 20354
     $113 = $112; //@line 20355
     $114 = $113; //@line 20356
     HEAP32[$114 >> 2] = $71; //@line 20357
     $115 = $113 + 4 | 0; //@line 20358
     $116 = $115; //@line 20359
     HEAP32[$116 >> 2] = $72; //@line 20360
     $117 = $ReallocAsyncCtx5 + 24 | 0; //@line 20361
     HEAP32[$117 >> 2] = $70; //@line 20362
     $118 = $ReallocAsyncCtx5 + 28 | 0; //@line 20363
     HEAP32[$118 >> 2] = $6; //@line 20364
     $119 = $ReallocAsyncCtx5 + 32 | 0; //@line 20365
     HEAP32[$119 >> 2] = $8; //@line 20366
     $120 = $ReallocAsyncCtx5 + 36 | 0; //@line 20367
     HEAP32[$120 >> 2] = $10; //@line 20368
     $121 = $ReallocAsyncCtx5 + 40 | 0; //@line 20369
     HEAP32[$121 >> 2] = $12; //@line 20370
     $122 = $ReallocAsyncCtx5 + 44 | 0; //@line 20371
     HEAP32[$122 >> 2] = $14; //@line 20372
     $123 = $ReallocAsyncCtx5 + 48 | 0; //@line 20373
     HEAP32[$123 >> 2] = $16; //@line 20374
     $124 = $ReallocAsyncCtx5 + 52 | 0; //@line 20375
     HEAP32[$124 >> 2] = $18; //@line 20376
     $125 = $ReallocAsyncCtx5 + 56 | 0; //@line 20377
     HEAP32[$125 >> 2] = $20; //@line 20378
     $126 = $ReallocAsyncCtx5 + 60 | 0; //@line 20379
     HEAP32[$126 >> 2] = $22; //@line 20380
     $127 = $ReallocAsyncCtx5 + 64 | 0; //@line 20381
     HEAP32[$127 >> 2] = $24; //@line 20382
     $128 = $ReallocAsyncCtx5 + 68 | 0; //@line 20383
     HEAP32[$128 >> 2] = $26; //@line 20384
     $129 = $ReallocAsyncCtx5 + 72 | 0; //@line 20385
     HEAP32[$129 >> 2] = $28; //@line 20386
     $130 = $ReallocAsyncCtx5 + 76 | 0; //@line 20387
     HEAP32[$130 >> 2] = $30; //@line 20388
     $131 = $ReallocAsyncCtx5 + 80 | 0; //@line 20389
     HEAP32[$131 >> 2] = $32; //@line 20390
     $132 = $ReallocAsyncCtx5 + 84 | 0; //@line 20391
     HEAP32[$132 >> 2] = $34; //@line 20392
     sp = STACKTOP; //@line 20393
     return;
    }
    ___async_unwind = 0; //@line 20396
    HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 20397
    $109 = $ReallocAsyncCtx5 + 4 | 0; //@line 20398
    HEAP32[$109 >> 2] = $75; //@line 20399
    $110 = $ReallocAsyncCtx5 + 8 | 0; //@line 20400
    HEAP32[$110 >> 2] = $2; //@line 20401
    $111 = $ReallocAsyncCtx5 + 12 | 0; //@line 20402
    HEAP32[$111 >> 2] = $69; //@line 20403
    $112 = $ReallocAsyncCtx5 + 16 | 0; //@line 20404
    $113 = $112; //@line 20405
    $114 = $113; //@line 20406
    HEAP32[$114 >> 2] = $71; //@line 20407
    $115 = $113 + 4 | 0; //@line 20408
    $116 = $115; //@line 20409
    HEAP32[$116 >> 2] = $72; //@line 20410
    $117 = $ReallocAsyncCtx5 + 24 | 0; //@line 20411
    HEAP32[$117 >> 2] = $70; //@line 20412
    $118 = $ReallocAsyncCtx5 + 28 | 0; //@line 20413
    HEAP32[$118 >> 2] = $6; //@line 20414
    $119 = $ReallocAsyncCtx5 + 32 | 0; //@line 20415
    HEAP32[$119 >> 2] = $8; //@line 20416
    $120 = $ReallocAsyncCtx5 + 36 | 0; //@line 20417
    HEAP32[$120 >> 2] = $10; //@line 20418
    $121 = $ReallocAsyncCtx5 + 40 | 0; //@line 20419
    HEAP32[$121 >> 2] = $12; //@line 20420
    $122 = $ReallocAsyncCtx5 + 44 | 0; //@line 20421
    HEAP32[$122 >> 2] = $14; //@line 20422
    $123 = $ReallocAsyncCtx5 + 48 | 0; //@line 20423
    HEAP32[$123 >> 2] = $16; //@line 20424
    $124 = $ReallocAsyncCtx5 + 52 | 0; //@line 20425
    HEAP32[$124 >> 2] = $18; //@line 20426
    $125 = $ReallocAsyncCtx5 + 56 | 0; //@line 20427
    HEAP32[$125 >> 2] = $20; //@line 20428
    $126 = $ReallocAsyncCtx5 + 60 | 0; //@line 20429
    HEAP32[$126 >> 2] = $22; //@line 20430
    $127 = $ReallocAsyncCtx5 + 64 | 0; //@line 20431
    HEAP32[$127 >> 2] = $24; //@line 20432
    $128 = $ReallocAsyncCtx5 + 68 | 0; //@line 20433
    HEAP32[$128 >> 2] = $26; //@line 20434
    $129 = $ReallocAsyncCtx5 + 72 | 0; //@line 20435
    HEAP32[$129 >> 2] = $28; //@line 20436
    $130 = $ReallocAsyncCtx5 + 76 | 0; //@line 20437
    HEAP32[$130 >> 2] = $30; //@line 20438
    $131 = $ReallocAsyncCtx5 + 80 | 0; //@line 20439
    HEAP32[$131 >> 2] = $32; //@line 20440
    $132 = $ReallocAsyncCtx5 + 84 | 0; //@line 20441
    HEAP32[$132 >> 2] = $34; //@line 20442
    sp = STACKTOP; //@line 20443
    return;
   }
  } while (0);
  __ZN4mbed6Ticker5setupEy($69, $71, $72); //@line 20447
  $133 = HEAP32[$70 >> 2] | 0; //@line 20448
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 20452
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 20453
   FUNCTION_TABLE_vi[$136 & 1023]($2); //@line 20454
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 20457
    $137 = $ReallocAsyncCtx6 + 4 | 0; //@line 20458
    HEAP32[$137 >> 2] = $6; //@line 20459
    $138 = $ReallocAsyncCtx6 + 8 | 0; //@line 20460
    HEAP32[$138 >> 2] = $8; //@line 20461
    $139 = $ReallocAsyncCtx6 + 12 | 0; //@line 20462
    HEAP32[$139 >> 2] = $10; //@line 20463
    $140 = $ReallocAsyncCtx6 + 16 | 0; //@line 20464
    HEAP32[$140 >> 2] = $12; //@line 20465
    $141 = $ReallocAsyncCtx6 + 20 | 0; //@line 20466
    HEAP32[$141 >> 2] = $14; //@line 20467
    $142 = $ReallocAsyncCtx6 + 24 | 0; //@line 20468
    HEAP32[$142 >> 2] = $16; //@line 20469
    $143 = $ReallocAsyncCtx6 + 28 | 0; //@line 20470
    HEAP32[$143 >> 2] = $18; //@line 20471
    $144 = $ReallocAsyncCtx6 + 32 | 0; //@line 20472
    HEAP32[$144 >> 2] = $20; //@line 20473
    $145 = $ReallocAsyncCtx6 + 36 | 0; //@line 20474
    HEAP32[$145 >> 2] = $22; //@line 20475
    $146 = $ReallocAsyncCtx6 + 40 | 0; //@line 20476
    HEAP32[$146 >> 2] = $24; //@line 20477
    $147 = $ReallocAsyncCtx6 + 44 | 0; //@line 20478
    HEAP32[$147 >> 2] = $26; //@line 20479
    $148 = $ReallocAsyncCtx6 + 48 | 0; //@line 20480
    HEAP32[$148 >> 2] = $28; //@line 20481
    $149 = $ReallocAsyncCtx6 + 52 | 0; //@line 20482
    HEAP32[$149 >> 2] = $30; //@line 20483
    $150 = $ReallocAsyncCtx6 + 56 | 0; //@line 20484
    HEAP32[$150 >> 2] = $32; //@line 20485
    $151 = $ReallocAsyncCtx6 + 60 | 0; //@line 20486
    HEAP32[$151 >> 2] = $34; //@line 20487
    sp = STACKTOP; //@line 20488
    return;
   }
   ___async_unwind = 0; //@line 20491
   HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 20492
   $137 = $ReallocAsyncCtx6 + 4 | 0; //@line 20493
   HEAP32[$137 >> 2] = $6; //@line 20494
   $138 = $ReallocAsyncCtx6 + 8 | 0; //@line 20495
   HEAP32[$138 >> 2] = $8; //@line 20496
   $139 = $ReallocAsyncCtx6 + 12 | 0; //@line 20497
   HEAP32[$139 >> 2] = $10; //@line 20498
   $140 = $ReallocAsyncCtx6 + 16 | 0; //@line 20499
   HEAP32[$140 >> 2] = $12; //@line 20500
   $141 = $ReallocAsyncCtx6 + 20 | 0; //@line 20501
   HEAP32[$141 >> 2] = $14; //@line 20502
   $142 = $ReallocAsyncCtx6 + 24 | 0; //@line 20503
   HEAP32[$142 >> 2] = $16; //@line 20504
   $143 = $ReallocAsyncCtx6 + 28 | 0; //@line 20505
   HEAP32[$143 >> 2] = $18; //@line 20506
   $144 = $ReallocAsyncCtx6 + 32 | 0; //@line 20507
   HEAP32[$144 >> 2] = $20; //@line 20508
   $145 = $ReallocAsyncCtx6 + 36 | 0; //@line 20509
   HEAP32[$145 >> 2] = $22; //@line 20510
   $146 = $ReallocAsyncCtx6 + 40 | 0; //@line 20511
   HEAP32[$146 >> 2] = $24; //@line 20512
   $147 = $ReallocAsyncCtx6 + 44 | 0; //@line 20513
   HEAP32[$147 >> 2] = $26; //@line 20514
   $148 = $ReallocAsyncCtx6 + 48 | 0; //@line 20515
   HEAP32[$148 >> 2] = $28; //@line 20516
   $149 = $ReallocAsyncCtx6 + 52 | 0; //@line 20517
   HEAP32[$149 >> 2] = $30; //@line 20518
   $150 = $ReallocAsyncCtx6 + 56 | 0; //@line 20519
   HEAP32[$150 >> 2] = $32; //@line 20520
   $151 = $ReallocAsyncCtx6 + 60 | 0; //@line 20521
   HEAP32[$151 >> 2] = $34; //@line 20522
   sp = STACKTOP; //@line 20523
   return;
  }
 }
 $154 = (HEAP8[$14 + 770 >> 0] | 0) == 0; //@line 20529
 _printf(10904, $16) | 0; //@line 20530
 if ($154) {
  HEAP32[$32 >> 2] = 6; //@line 20532
  _printf(10970, $32) | 0; //@line 20533
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 20534
  _putchar(10) | 0; //@line 20535
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 20538
   $160 = $ReallocAsyncCtx8 + 4 | 0; //@line 20539
   HEAP32[$160 >> 2] = $14; //@line 20540
   $161 = $ReallocAsyncCtx8 + 8 | 0; //@line 20541
   HEAP32[$161 >> 2] = $24; //@line 20542
   $162 = $ReallocAsyncCtx8 + 12 | 0; //@line 20543
   HEAP32[$162 >> 2] = $26; //@line 20544
   $163 = $ReallocAsyncCtx8 + 16 | 0; //@line 20545
   HEAP32[$163 >> 2] = $28; //@line 20546
   $164 = $ReallocAsyncCtx8 + 20 | 0; //@line 20547
   HEAP32[$164 >> 2] = $30; //@line 20548
   sp = STACKTOP; //@line 20549
   return;
  }
  ___async_unwind = 0; //@line 20552
  HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 20553
  $160 = $ReallocAsyncCtx8 + 4 | 0; //@line 20554
  HEAP32[$160 >> 2] = $14; //@line 20555
  $161 = $ReallocAsyncCtx8 + 8 | 0; //@line 20556
  HEAP32[$161 >> 2] = $24; //@line 20557
  $162 = $ReallocAsyncCtx8 + 12 | 0; //@line 20558
  HEAP32[$162 >> 2] = $26; //@line 20559
  $163 = $ReallocAsyncCtx8 + 16 | 0; //@line 20560
  HEAP32[$163 >> 2] = $28; //@line 20561
  $164 = $ReallocAsyncCtx8 + 20 | 0; //@line 20562
  HEAP32[$164 >> 2] = $30; //@line 20563
  sp = STACKTOP; //@line 20564
  return;
 } else {
  HEAP32[$20 >> 2] = 5; //@line 20567
  _printf(10970, $20) | 0; //@line 20568
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 20569
  _putchar(10) | 0; //@line 20570
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 20573
   $155 = $ReallocAsyncCtx10 + 4 | 0; //@line 20574
   HEAP32[$155 >> 2] = $14; //@line 20575
   $156 = $ReallocAsyncCtx10 + 8 | 0; //@line 20576
   HEAP32[$156 >> 2] = $6; //@line 20577
   $157 = $ReallocAsyncCtx10 + 12 | 0; //@line 20578
   HEAP32[$157 >> 2] = $8; //@line 20579
   $158 = $ReallocAsyncCtx10 + 16 | 0; //@line 20580
   HEAP32[$158 >> 2] = $10; //@line 20581
   $159 = $ReallocAsyncCtx10 + 20 | 0; //@line 20582
   HEAP32[$159 >> 2] = $12; //@line 20583
   sp = STACKTOP; //@line 20584
   return;
  }
  ___async_unwind = 0; //@line 20587
  HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 20588
  $155 = $ReallocAsyncCtx10 + 4 | 0; //@line 20589
  HEAP32[$155 >> 2] = $14; //@line 20590
  $156 = $ReallocAsyncCtx10 + 8 | 0; //@line 20591
  HEAP32[$156 >> 2] = $6; //@line 20592
  $157 = $ReallocAsyncCtx10 + 12 | 0; //@line 20593
  HEAP32[$157 >> 2] = $8; //@line 20594
  $158 = $ReallocAsyncCtx10 + 16 | 0; //@line 20595
  HEAP32[$158 >> 2] = $10; //@line 20596
  $159 = $ReallocAsyncCtx10 + 20 | 0; //@line 20597
  HEAP32[$159 >> 2] = $12; //@line 20598
  sp = STACKTOP; //@line 20599
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $162 = 0, $175 = 0, $195 = 0, $32 = 0, $58 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx55 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1653
 STACKTOP = STACKTOP + 128 | 0; //@line 1654
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 1654
 $vararg_buffer23 = sp + 112 | 0; //@line 1655
 $vararg_buffer21 = sp + 104 | 0; //@line 1656
 $vararg_buffer19 = sp + 96 | 0; //@line 1657
 $vararg_buffer17 = sp + 88 | 0; //@line 1658
 $vararg_buffer14 = sp + 56 | 0; //@line 1659
 $vararg_buffer12 = sp + 48 | 0; //@line 1660
 $vararg_buffer9 = sp + 40 | 0; //@line 1661
 $vararg_buffer7 = sp + 32 | 0; //@line 1662
 $vararg_buffer5 = sp + 24 | 0; //@line 1663
 $vararg_buffer3 = sp + 16 | 0; //@line 1664
 _printf(10904, sp) | 0; //@line 1667
 _printf(11057, sp + 8 | 0) | 0; //@line 1668
 $AsyncCtx49 = _emscripten_alloc_async_context(108, sp) | 0; //@line 1669
 _putchar(10) | 0; //@line 1670
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 91; //@line 1673
  HEAP32[$AsyncCtx49 + 4 >> 2] = $vararg_buffer14; //@line 1675
  HEAP32[$AsyncCtx49 + 8 >> 2] = $0; //@line 1677
  HEAP32[$AsyncCtx49 + 12 >> 2] = $4; //@line 1679
  HEAP32[$AsyncCtx49 + 16 >> 2] = $vararg_buffer17; //@line 1681
  HEAP32[$AsyncCtx49 + 20 >> 2] = $vararg_buffer17; //@line 1683
  HEAP32[$AsyncCtx49 + 24 >> 2] = $vararg_buffer19; //@line 1685
  HEAP32[$AsyncCtx49 + 28 >> 2] = $vararg_buffer19; //@line 1687
  HEAP16[$AsyncCtx49 + 32 >> 1] = $3; //@line 1689
  HEAP32[$AsyncCtx49 + 36 >> 2] = $vararg_buffer12; //@line 1691
  HEAP32[$AsyncCtx49 + 40 >> 2] = $vararg_buffer12; //@line 1693
  HEAP32[$AsyncCtx49 + 44 >> 2] = $vararg_buffer14; //@line 1695
  HEAP32[$AsyncCtx49 + 48 >> 2] = $vararg_buffer14; //@line 1697
  HEAP32[$AsyncCtx49 + 52 >> 2] = $vararg_buffer21; //@line 1699
  HEAP32[$AsyncCtx49 + 56 >> 2] = $vararg_buffer21; //@line 1701
  HEAP32[$AsyncCtx49 + 60 >> 2] = $vararg_buffer23; //@line 1703
  HEAP32[$AsyncCtx49 + 64 >> 2] = $vararg_buffer23; //@line 1705
  HEAP32[$AsyncCtx49 + 68 >> 2] = $vararg_buffer7; //@line 1707
  HEAP32[$AsyncCtx49 + 72 >> 2] = $vararg_buffer7; //@line 1709
  HEAP32[$AsyncCtx49 + 76 >> 2] = $vararg_buffer9; //@line 1711
  HEAP32[$AsyncCtx49 + 80 >> 2] = $vararg_buffer9; //@line 1713
  HEAP32[$AsyncCtx49 + 84 >> 2] = $2; //@line 1715
  HEAP32[$AsyncCtx49 + 88 >> 2] = $1; //@line 1717
  HEAP32[$AsyncCtx49 + 92 >> 2] = $vararg_buffer3; //@line 1719
  HEAP32[$AsyncCtx49 + 96 >> 2] = $vararg_buffer3; //@line 1721
  HEAP32[$AsyncCtx49 + 100 >> 2] = $vararg_buffer5; //@line 1723
  HEAP32[$AsyncCtx49 + 104 >> 2] = $vararg_buffer5; //@line 1725
  sp = STACKTOP; //@line 1726
  STACKTOP = sp; //@line 1727
  return 0; //@line 1727
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 1729
 $32 = $0 + 689 | 0; //@line 1731
 HEAP8[$32 >> 0] = $1; //@line 1732
 _printf(10904, $vararg_buffer3) | 0; //@line 1733
 HEAP32[$vararg_buffer5 >> 2] = HEAPU8[$32 >> 0]; //@line 1736
 _printf(11079, $vararg_buffer5) | 0; //@line 1737
 $AsyncCtx45 = _emscripten_alloc_async_context(88, sp) | 0; //@line 1738
 _putchar(10) | 0; //@line 1739
 if (___async) {
  HEAP32[$AsyncCtx45 >> 2] = 92; //@line 1742
  HEAP32[$AsyncCtx45 + 4 >> 2] = $vararg_buffer14; //@line 1744
  HEAP32[$AsyncCtx45 + 8 >> 2] = $0; //@line 1746
  HEAP32[$AsyncCtx45 + 12 >> 2] = $4; //@line 1748
  HEAP32[$AsyncCtx45 + 16 >> 2] = $vararg_buffer17; //@line 1750
  HEAP32[$AsyncCtx45 + 20 >> 2] = $vararg_buffer17; //@line 1752
  HEAP32[$AsyncCtx45 + 24 >> 2] = $vararg_buffer19; //@line 1754
  HEAP32[$AsyncCtx45 + 28 >> 2] = $vararg_buffer19; //@line 1756
  HEAP16[$AsyncCtx45 + 32 >> 1] = $3; //@line 1758
  HEAP32[$AsyncCtx45 + 36 >> 2] = $vararg_buffer12; //@line 1760
  HEAP32[$AsyncCtx45 + 40 >> 2] = $vararg_buffer12; //@line 1762
  HEAP32[$AsyncCtx45 + 44 >> 2] = $vararg_buffer14; //@line 1764
  HEAP32[$AsyncCtx45 + 48 >> 2] = $vararg_buffer14; //@line 1766
  HEAP32[$AsyncCtx45 + 52 >> 2] = $vararg_buffer21; //@line 1768
  HEAP32[$AsyncCtx45 + 56 >> 2] = $vararg_buffer21; //@line 1770
  HEAP32[$AsyncCtx45 + 60 >> 2] = $vararg_buffer23; //@line 1772
  HEAP32[$AsyncCtx45 + 64 >> 2] = $vararg_buffer23; //@line 1774
  HEAP32[$AsyncCtx45 + 68 >> 2] = $vararg_buffer7; //@line 1776
  HEAP32[$AsyncCtx45 + 72 >> 2] = $vararg_buffer7; //@line 1778
  HEAP32[$AsyncCtx45 + 76 >> 2] = $vararg_buffer9; //@line 1780
  HEAP32[$AsyncCtx45 + 80 >> 2] = $vararg_buffer9; //@line 1782
  HEAP32[$AsyncCtx45 + 84 >> 2] = $2; //@line 1784
  sp = STACKTOP; //@line 1785
  STACKTOP = sp; //@line 1786
  return 0; //@line 1786
 }
 _emscripten_free_async_context($AsyncCtx45 | 0); //@line 1788
 $58 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1791
 $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 1792
 FUNCTION_TABLE_vii[$58 & 31]($0, $2); //@line 1793
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 93; //@line 1796
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer14; //@line 1798
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1800
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 1802
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer17; //@line 1804
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer17; //@line 1806
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer19; //@line 1808
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer19; //@line 1810
  HEAP16[$AsyncCtx + 32 >> 1] = $3; //@line 1812
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer12; //@line 1814
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer12; //@line 1816
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer14; //@line 1818
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer14; //@line 1820
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer21; //@line 1822
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer21; //@line 1824
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer23; //@line 1826
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer23; //@line 1828
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer7; //@line 1830
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer7; //@line 1832
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer9; //@line 1834
  HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer9; //@line 1836
  sp = STACKTOP; //@line 1837
  STACKTOP = sp; //@line 1838
  return 0; //@line 1838
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1840
 _printf(10904, $vararg_buffer7) | 0; //@line 1841
 HEAP32[$vararg_buffer9 >> 2] = 5; //@line 1842
 _printf(10970, $vararg_buffer9) | 0; //@line 1843
 $AsyncCtx41 = _emscripten_alloc_async_context(68, sp) | 0; //@line 1844
 _putchar(10) | 0; //@line 1845
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 94; //@line 1848
  HEAP32[$AsyncCtx41 + 4 >> 2] = $vararg_buffer14; //@line 1850
  HEAP32[$AsyncCtx41 + 8 >> 2] = $4; //@line 1852
  HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer21; //@line 1854
  HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer21; //@line 1856
  HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer23; //@line 1858
  HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer23; //@line 1860
  HEAP32[$AsyncCtx41 + 28 >> 2] = $0; //@line 1862
  HEAP32[$AsyncCtx41 + 32 >> 2] = $vararg_buffer17; //@line 1864
  HEAP32[$AsyncCtx41 + 36 >> 2] = $vararg_buffer17; //@line 1866
  HEAP32[$AsyncCtx41 + 40 >> 2] = $vararg_buffer19; //@line 1868
  HEAP32[$AsyncCtx41 + 44 >> 2] = $vararg_buffer19; //@line 1870
  HEAP16[$AsyncCtx41 + 48 >> 1] = $3; //@line 1872
  HEAP32[$AsyncCtx41 + 52 >> 2] = $vararg_buffer12; //@line 1874
  HEAP32[$AsyncCtx41 + 56 >> 2] = $vararg_buffer12; //@line 1876
  HEAP32[$AsyncCtx41 + 60 >> 2] = $vararg_buffer14; //@line 1878
  HEAP32[$AsyncCtx41 + 64 >> 2] = $vararg_buffer14; //@line 1880
  sp = STACKTOP; //@line 1881
  STACKTOP = sp; //@line 1882
  return 0; //@line 1882
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 1884
 $AsyncCtx52 = _emscripten_alloc_async_context(68, sp) | 0; //@line 1885
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1886
 if (___async) {
  HEAP32[$AsyncCtx52 >> 2] = 95; //@line 1889
  HEAP32[$AsyncCtx52 + 4 >> 2] = $vararg_buffer14; //@line 1891
  HEAP32[$AsyncCtx52 + 8 >> 2] = $4; //@line 1893
  HEAP32[$AsyncCtx52 + 12 >> 2] = $vararg_buffer21; //@line 1895
  HEAP32[$AsyncCtx52 + 16 >> 2] = $vararg_buffer21; //@line 1897
  HEAP32[$AsyncCtx52 + 20 >> 2] = $vararg_buffer23; //@line 1899
  HEAP32[$AsyncCtx52 + 24 >> 2] = $vararg_buffer23; //@line 1901
  HEAP32[$AsyncCtx52 + 28 >> 2] = $0; //@line 1903
  HEAP32[$AsyncCtx52 + 32 >> 2] = $vararg_buffer17; //@line 1905
  HEAP32[$AsyncCtx52 + 36 >> 2] = $vararg_buffer17; //@line 1907
  HEAP32[$AsyncCtx52 + 40 >> 2] = $vararg_buffer19; //@line 1909
  HEAP32[$AsyncCtx52 + 44 >> 2] = $vararg_buffer19; //@line 1911
  HEAP16[$AsyncCtx52 + 48 >> 1] = $3; //@line 1913
  HEAP32[$AsyncCtx52 + 52 >> 2] = $vararg_buffer12; //@line 1915
  HEAP32[$AsyncCtx52 + 56 >> 2] = $vararg_buffer12; //@line 1917
  HEAP32[$AsyncCtx52 + 60 >> 2] = $vararg_buffer14; //@line 1919
  HEAP32[$AsyncCtx52 + 64 >> 2] = $vararg_buffer14; //@line 1921
  sp = STACKTOP; //@line 1922
  STACKTOP = sp; //@line 1923
  return 0; //@line 1923
 }
 _emscripten_free_async_context($AsyncCtx52 | 0); //@line 1925
 _printf(10904, $vararg_buffer12) | 0; //@line 1926
 HEAP32[$vararg_buffer14 >> 2] = 5; //@line 1927
 _printf(10999, $vararg_buffer14) | 0; //@line 1928
 $AsyncCtx37 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1929
 _putchar(10) | 0; //@line 1930
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 96; //@line 1933
  HEAP32[$AsyncCtx37 + 4 >> 2] = $vararg_buffer14; //@line 1935
  HEAP32[$AsyncCtx37 + 8 >> 2] = $4; //@line 1937
  HEAP32[$AsyncCtx37 + 12 >> 2] = $vararg_buffer21; //@line 1939
  HEAP32[$AsyncCtx37 + 16 >> 2] = $vararg_buffer21; //@line 1941
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer23; //@line 1943
  HEAP32[$AsyncCtx37 + 24 >> 2] = $vararg_buffer23; //@line 1945
  HEAP32[$AsyncCtx37 + 28 >> 2] = $0; //@line 1947
  HEAP32[$AsyncCtx37 + 32 >> 2] = $vararg_buffer17; //@line 1949
  HEAP32[$AsyncCtx37 + 36 >> 2] = $vararg_buffer17; //@line 1951
  HEAP32[$AsyncCtx37 + 40 >> 2] = $vararg_buffer19; //@line 1953
  HEAP32[$AsyncCtx37 + 44 >> 2] = $vararg_buffer19; //@line 1955
  HEAP16[$AsyncCtx37 + 48 >> 1] = $3; //@line 1957
  sp = STACKTOP; //@line 1958
  STACKTOP = sp; //@line 1959
  return 0; //@line 1959
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 1961
 $AsyncCtx68 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1962
 _wait_ms(1); //@line 1963
 if (___async) {
  HEAP32[$AsyncCtx68 >> 2] = 97; //@line 1966
  HEAP32[$AsyncCtx68 + 4 >> 2] = $vararg_buffer14; //@line 1968
  HEAP32[$AsyncCtx68 + 8 >> 2] = $4; //@line 1970
  HEAP32[$AsyncCtx68 + 12 >> 2] = $vararg_buffer21; //@line 1972
  HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer21; //@line 1974
  HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer23; //@line 1976
  HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer23; //@line 1978
  HEAP32[$AsyncCtx68 + 28 >> 2] = $0; //@line 1980
  HEAP32[$AsyncCtx68 + 32 >> 2] = $vararg_buffer17; //@line 1982
  HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer17; //@line 1984
  HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer19; //@line 1986
  HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer19; //@line 1988
  HEAP16[$AsyncCtx68 + 48 >> 1] = $3; //@line 1990
  sp = STACKTOP; //@line 1991
  STACKTOP = sp; //@line 1992
  return 0; //@line 1992
 }
 _emscripten_free_async_context($AsyncCtx68 | 0); //@line 1994
 $AsyncCtx55 = _emscripten_alloc_async_context(56, sp) | 0; //@line 1995
 __ZN4mbed5TimerC2Ev($vararg_buffer14); //@line 1996
 if (___async) {
  HEAP32[$AsyncCtx55 >> 2] = 98; //@line 1999
  HEAP32[$AsyncCtx55 + 4 >> 2] = $vararg_buffer14; //@line 2001
  HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer14; //@line 2003
  HEAP32[$AsyncCtx55 + 12 >> 2] = $4; //@line 2005
  HEAP32[$AsyncCtx55 + 16 >> 2] = $vararg_buffer21; //@line 2007
  HEAP32[$AsyncCtx55 + 20 >> 2] = $vararg_buffer21; //@line 2009
  HEAP32[$AsyncCtx55 + 24 >> 2] = $vararg_buffer23; //@line 2011
  HEAP32[$AsyncCtx55 + 28 >> 2] = $vararg_buffer23; //@line 2013
  HEAP32[$AsyncCtx55 + 32 >> 2] = $0; //@line 2015
  HEAP32[$AsyncCtx55 + 36 >> 2] = $vararg_buffer17; //@line 2017
  HEAP32[$AsyncCtx55 + 40 >> 2] = $vararg_buffer17; //@line 2019
  HEAP32[$AsyncCtx55 + 44 >> 2] = $vararg_buffer19; //@line 2021
  HEAP32[$AsyncCtx55 + 48 >> 2] = $vararg_buffer19; //@line 2023
  HEAP16[$AsyncCtx55 + 52 >> 1] = $3; //@line 2025
  sp = STACKTOP; //@line 2026
  STACKTOP = sp; //@line 2027
  return 0; //@line 2027
 }
 _emscripten_free_async_context($AsyncCtx55 | 0); //@line 2029
 $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 2030
 __ZN4mbed5Timer5startEv($vararg_buffer14); //@line 2031
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 99; //@line 2034
  HEAP16[$AsyncCtx58 + 4 >> 1] = $3; //@line 2036
  HEAP32[$AsyncCtx58 + 8 >> 2] = $vararg_buffer14; //@line 2038
  HEAP32[$AsyncCtx58 + 12 >> 2] = $4; //@line 2040
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer21; //@line 2042
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer21; //@line 2044
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer23; //@line 2046
  HEAP32[$AsyncCtx58 + 28 >> 2] = $vararg_buffer23; //@line 2048
  HEAP32[$AsyncCtx58 + 32 >> 2] = $0; //@line 2050
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer14; //@line 2052
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer17; //@line 2054
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer17; //@line 2056
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer19; //@line 2058
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer19; //@line 2060
  sp = STACKTOP; //@line 2061
  STACKTOP = sp; //@line 2062
  return 0; //@line 2062
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 2064
 L28 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx64 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2068
   $162 = __ZN4mbed5Timer7read_msEv($vararg_buffer14) | 0; //@line 2069
   if (___async) {
    HEAP32[$AsyncCtx64 >> 2] = 100; //@line 2072
    HEAP32[$AsyncCtx64 + 4 >> 2] = $4; //@line 2074
    HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer17; //@line 2076
    HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer17; //@line 2078
    HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer19; //@line 2080
    HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer19; //@line 2082
    HEAP32[$AsyncCtx64 + 24 >> 2] = $0; //@line 2084
    HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer14; //@line 2086
    HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer14; //@line 2088
    sp = STACKTOP; //@line 2089
    STACKTOP = sp; //@line 2090
    return 0; //@line 2090
   }
   _emscripten_free_async_context($AsyncCtx64 | 0); //@line 2092
   if (($162 | 0) < ($4 | 0)) {
    _printf(10904, $vararg_buffer17) | 0; //@line 2095
    _printf(11092, $vararg_buffer19) | 0; //@line 2096
    $AsyncCtx34 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2097
    _putchar(10) | 0; //@line 2098
    if (___async) {
     HEAP32[$AsyncCtx34 >> 2] = 101; //@line 2101
     HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 2103
     HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer14; //@line 2105
     HEAP32[$AsyncCtx34 + 12 >> 2] = $vararg_buffer14; //@line 2107
     sp = STACKTOP; //@line 2108
     STACKTOP = sp; //@line 2109
     return 0; //@line 2109
    } else {
     _emscripten_free_async_context($AsyncCtx34 | 0); //@line 2111
     $$0$off0 = 0; //@line 2112
     break;
    }
   } else {
    $$0$off0 = 1; //@line 2116
   }
  } else {
   while (1) {
    $AsyncCtx61 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2120
    $175 = __ZN4mbed5Timer7read_msEv($vararg_buffer14) | 0; //@line 2121
    if (___async) {
     label = 27; //@line 2124
     break;
    }
    _emscripten_free_async_context($AsyncCtx61 | 0); //@line 2127
    if (($175 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 2130
     break L28;
    }
    _printf(10904, $vararg_buffer21) | 0; //@line 2133
    _printf(11092, $vararg_buffer23) | 0; //@line 2134
    $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2135
    _putchar(10) | 0; //@line 2136
    if (___async) {
     label = 30; //@line 2139
     break;
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2142
   }
   if ((label | 0) == 27) {
    HEAP32[$AsyncCtx61 >> 2] = 102; //@line 2145
    HEAP32[$AsyncCtx61 + 4 >> 2] = $4; //@line 2147
    HEAP32[$AsyncCtx61 + 8 >> 2] = $vararg_buffer21; //@line 2149
    HEAP32[$AsyncCtx61 + 12 >> 2] = $vararg_buffer21; //@line 2151
    HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer23; //@line 2153
    HEAP32[$AsyncCtx61 + 20 >> 2] = $vararg_buffer23; //@line 2155
    HEAP32[$AsyncCtx61 + 24 >> 2] = $0; //@line 2157
    HEAP32[$AsyncCtx61 + 28 >> 2] = $vararg_buffer14; //@line 2159
    HEAP32[$AsyncCtx61 + 32 >> 2] = $vararg_buffer14; //@line 2161
    sp = STACKTOP; //@line 2162
    STACKTOP = sp; //@line 2163
    return 0; //@line 2163
   } else if ((label | 0) == 30) {
    HEAP32[$AsyncCtx30 >> 2] = 103; //@line 2166
    HEAP32[$AsyncCtx30 + 4 >> 2] = $vararg_buffer14; //@line 2168
    HEAP32[$AsyncCtx30 + 8 >> 2] = $4; //@line 2170
    HEAP32[$AsyncCtx30 + 12 >> 2] = $vararg_buffer21; //@line 2172
    HEAP32[$AsyncCtx30 + 16 >> 2] = $vararg_buffer21; //@line 2174
    HEAP32[$AsyncCtx30 + 20 >> 2] = $vararg_buffer23; //@line 2176
    HEAP32[$AsyncCtx30 + 24 >> 2] = $vararg_buffer23; //@line 2178
    HEAP32[$AsyncCtx30 + 28 >> 2] = $0; //@line 2180
    HEAP32[$AsyncCtx30 + 32 >> 2] = $vararg_buffer14; //@line 2182
    sp = STACKTOP; //@line 2183
    STACKTOP = sp; //@line 2184
    return 0; //@line 2184
   }
  }
 } while (0);
 $195 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2190
 $AsyncCtx27 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2191
 FUNCTION_TABLE_vi[$195 & 1023]($0); //@line 2192
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 104; //@line 2195
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer14; //@line 2197
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer14; //@line 2199
  HEAP8[$AsyncCtx27 + 12 >> 0] = $$0$off0 & 1; //@line 2202
  sp = STACKTOP; //@line 2203
  STACKTOP = sp; //@line 2204
  return 0; //@line 2204
 } else {
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 2206
  __ZN4mbed5TimerD2Ev($vararg_buffer14); //@line 2207
  STACKTOP = sp; //@line 2208
  return $$0$off0 | 0; //@line 2208
 }
 return 0; //@line 2210
}
function __ZN12LoRaWANStack9handle_txEhPKhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0 = 0, $$0$i43 = 0, $$1 = 0, $123 = 0, $130 = 0, $154 = 0, $155 = 0, $156 = 0, $191 = 0, $196 = 0, $205 = 0, $220 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx66 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9091
 STACKTOP = STACKTOP + 128 | 0; //@line 9092
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 9092
 $vararg_buffer31 = sp + 112 | 0; //@line 9093
 $vararg_buffer29 = sp + 104 | 0; //@line 9094
 $vararg_buffer25 = sp + 96 | 0; //@line 9095
 $vararg_buffer23 = sp + 88 | 0; //@line 9096
 $vararg_buffer19 = sp + 80 | 0; //@line 9097
 $vararg_buffer17 = sp + 72 | 0; //@line 9098
 $vararg_buffer15 = sp + 64 | 0; //@line 9099
 $vararg_buffer13 = sp + 56 | 0; //@line 9100
 $vararg_buffer11 = sp + 48 | 0; //@line 9101
 $vararg_buffer9 = sp + 40 | 0; //@line 9102
 $vararg_buffer6 = sp + 32 | 0; //@line 9103
 $vararg_buffer4 = sp + 24 | 0; //@line 9104
 $vararg_buffer1 = sp + 8 | 0; //@line 9105
 _printf(12139, sp) | 0; //@line 9107
 $4 = $0 + 1932 | 0; //@line 9108
 $7 = $0 + 1964 | 0; //@line 9111
 $9 = HEAPU8[$7 >> 0] | 0; //@line 9113
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$4 >> 0]; //@line 9114
 HEAP32[$vararg_buffer1 + 4 >> 2] = $9; //@line 9116
 _printf(12306, $vararg_buffer1) | 0; //@line 9117
 $AsyncCtx55 = _emscripten_alloc_async_context(136, sp) | 0; //@line 9118
 _putchar(10) | 0; //@line 9119
 if (___async) {
  HEAP32[$AsyncCtx55 >> 2] = 298; //@line 9122
  HEAP8[$AsyncCtx55 + 4 >> 0] = $trunc; //@line 9124
  HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer19; //@line 9126
  HEAP8[$AsyncCtx55 + 12 >> 0] = $1; //@line 9128
  HEAP32[$AsyncCtx55 + 16 >> 2] = $vararg_buffer23; //@line 9130
  HEAP32[$AsyncCtx55 + 20 >> 2] = $2; //@line 9132
  HEAP16[$AsyncCtx55 + 24 >> 1] = $3; //@line 9134
  HEAP32[$AsyncCtx55 + 28 >> 2] = $vararg_buffer17; //@line 9136
  HEAP32[$AsyncCtx55 + 32 >> 2] = $vararg_buffer9; //@line 9138
  HEAP32[$AsyncCtx55 + 36 >> 2] = $vararg_buffer9; //@line 9140
  HEAP32[$AsyncCtx55 + 40 >> 2] = $vararg_buffer23; //@line 9142
  HEAP32[$AsyncCtx55 + 44 >> 2] = $0; //@line 9144
  HEAP32[$AsyncCtx55 + 48 >> 2] = $vararg_buffer25; //@line 9146
  HEAP32[$AsyncCtx55 + 52 >> 2] = $vararg_buffer31; //@line 9148
  HEAP32[$AsyncCtx55 + 56 >> 2] = $vararg_buffer11; //@line 9150
  HEAP32[$AsyncCtx55 + 60 >> 2] = $vararg_buffer31; //@line 9152
  HEAP32[$AsyncCtx55 + 64 >> 2] = $vararg_buffer11; //@line 9154
  HEAP32[$AsyncCtx55 + 68 >> 2] = $vararg_buffer13; //@line 9156
  HEAP32[$AsyncCtx55 + 72 >> 2] = $vararg_buffer19; //@line 9158
  HEAP32[$AsyncCtx55 + 76 >> 2] = $7; //@line 9160
  HEAP32[$AsyncCtx55 + 80 >> 2] = $vararg_buffer29; //@line 9162
  HEAP32[$AsyncCtx55 + 84 >> 2] = $vararg_buffer1; //@line 9164
  HEAP32[$AsyncCtx55 + 88 >> 2] = $vararg_buffer15; //@line 9166
  HEAP32[$AsyncCtx55 + 92 >> 2] = $vararg_buffer6; //@line 9168
  HEAP32[$AsyncCtx55 + 96 >> 2] = $4; //@line 9170
  HEAP32[$AsyncCtx55 + 100 >> 2] = $vararg_buffer25; //@line 9172
  HEAP32[$AsyncCtx55 + 104 >> 2] = $vararg_buffer6; //@line 9174
  HEAP32[$AsyncCtx55 + 108 >> 2] = $vararg_buffer6; //@line 9176
  HEAP32[$AsyncCtx55 + 112 >> 2] = $vararg_buffer29; //@line 9178
  HEAP32[$AsyncCtx55 + 116 >> 2] = $vararg_buffer15; //@line 9180
  HEAP32[$AsyncCtx55 + 120 >> 2] = $vararg_buffer13; //@line 9182
  HEAP32[$AsyncCtx55 + 124 >> 2] = $vararg_buffer17; //@line 9184
  HEAP32[$AsyncCtx55 + 128 >> 2] = $vararg_buffer4; //@line 9186
  HEAP32[$AsyncCtx55 + 132 >> 2] = $vararg_buffer4; //@line 9188
  sp = STACKTOP; //@line 9189
  STACKTOP = sp; //@line 9190
  return 0; //@line 9190
 }
 _emscripten_free_async_context($AsyncCtx55 | 0); //@line 9192
 if (!(HEAP8[$4 >> 0] | 0)) {
  $$1 = -1017; //@line 9196
  STACKTOP = sp; //@line 9197
  return $$1 | 0; //@line 9197
 }
 if (HEAP8[$7 >> 0] | 0) {
  $$1 = -1001; //@line 9202
  STACKTOP = sp; //@line 9203
  return $$1 | 0; //@line 9203
 }
 $48 = $3 << 16 >> 16 == 0; //@line 9206
 if (!(($2 | 0) != 0 | $48)) {
  $$1 = -1003; //@line 9209
  STACKTOP = sp; //@line 9210
  return $$1 | 0; //@line 9210
 }
 HEAP32[$vararg_buffer1 >> 2] = 1; //@line 9212
 $49 = $0 + 4 | 0; //@line 9213
 $AsyncCtx63 = _emscripten_alloc_async_context(140, sp) | 0; //@line 9214
 $50 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($49, $vararg_buffer1) | 0; //@line 9215
 if (___async) {
  HEAP32[$AsyncCtx63 >> 2] = 299; //@line 9218
  HEAP8[$AsyncCtx63 + 4 >> 0] = $trunc; //@line 9220
  HEAP32[$AsyncCtx63 + 8 >> 2] = $vararg_buffer19; //@line 9222
  HEAP8[$AsyncCtx63 + 12 >> 0] = $1; //@line 9224
  HEAP32[$AsyncCtx63 + 16 >> 2] = $vararg_buffer23; //@line 9226
  HEAP32[$AsyncCtx63 + 20 >> 2] = $2; //@line 9228
  HEAP16[$AsyncCtx63 + 24 >> 1] = $3; //@line 9230
  HEAP32[$AsyncCtx63 + 28 >> 2] = $vararg_buffer17; //@line 9232
  HEAP32[$AsyncCtx63 + 32 >> 2] = $vararg_buffer9; //@line 9234
  HEAP32[$AsyncCtx63 + 36 >> 2] = $vararg_buffer9; //@line 9236
  HEAP32[$AsyncCtx63 + 40 >> 2] = $vararg_buffer23; //@line 9238
  HEAP32[$AsyncCtx63 + 44 >> 2] = $0; //@line 9240
  HEAP32[$AsyncCtx63 + 48 >> 2] = $vararg_buffer25; //@line 9242
  HEAP32[$AsyncCtx63 + 52 >> 2] = $vararg_buffer31; //@line 9244
  HEAP32[$AsyncCtx63 + 56 >> 2] = $vararg_buffer11; //@line 9246
  HEAP32[$AsyncCtx63 + 60 >> 2] = $vararg_buffer31; //@line 9248
  HEAP32[$AsyncCtx63 + 64 >> 2] = $vararg_buffer11; //@line 9250
  HEAP32[$AsyncCtx63 + 68 >> 2] = $vararg_buffer13; //@line 9252
  HEAP32[$AsyncCtx63 + 72 >> 2] = $vararg_buffer1; //@line 9254
  HEAP32[$AsyncCtx63 + 76 >> 2] = $vararg_buffer19; //@line 9256
  HEAP32[$AsyncCtx63 + 80 >> 2] = $vararg_buffer29; //@line 9258
  HEAP32[$AsyncCtx63 + 84 >> 2] = $vararg_buffer1; //@line 9260
  HEAP32[$AsyncCtx63 + 88 >> 2] = $vararg_buffer15; //@line 9262
  HEAP32[$AsyncCtx63 + 92 >> 2] = $vararg_buffer6; //@line 9264
  HEAP8[$AsyncCtx63 + 96 >> 0] = $48 & 1; //@line 9267
  HEAP32[$AsyncCtx63 + 100 >> 2] = $vararg_buffer25; //@line 9269
  HEAP32[$AsyncCtx63 + 104 >> 2] = $vararg_buffer6; //@line 9271
  HEAP32[$AsyncCtx63 + 108 >> 2] = $vararg_buffer6; //@line 9273
  HEAP32[$AsyncCtx63 + 112 >> 2] = $49; //@line 9275
  HEAP32[$AsyncCtx63 + 116 >> 2] = $vararg_buffer29; //@line 9277
  HEAP32[$AsyncCtx63 + 120 >> 2] = $vararg_buffer15; //@line 9279
  HEAP32[$AsyncCtx63 + 124 >> 2] = $vararg_buffer13; //@line 9281
  HEAP32[$AsyncCtx63 + 128 >> 2] = $vararg_buffer17; //@line 9283
  HEAP32[$AsyncCtx63 + 132 >> 2] = $vararg_buffer4; //@line 9285
  HEAP32[$AsyncCtx63 + 136 >> 2] = $vararg_buffer4; //@line 9287
  sp = STACKTOP; //@line 9288
  STACKTOP = sp; //@line 9289
  return 0; //@line 9289
 }
 _emscripten_free_async_context($AsyncCtx63 | 0); //@line 9291
 _printf(12139, $vararg_buffer4) | 0; //@line 9292
 HEAP32[$vararg_buffer6 >> 2] = $50; //@line 9293
 _printf(12359, $vararg_buffer6) | 0; //@line 9294
 $AsyncCtx51 = _emscripten_alloc_async_context(120, sp) | 0; //@line 9295
 _putchar(10) | 0; //@line 9296
 if (___async) {
  HEAP32[$AsyncCtx51 >> 2] = 300; //@line 9299
  HEAP32[$AsyncCtx51 + 4 >> 2] = $vararg_buffer29; //@line 9301
  HEAP32[$AsyncCtx51 + 8 >> 2] = $vararg_buffer29; //@line 9303
  HEAP32[$AsyncCtx51 + 12 >> 2] = $vararg_buffer31; //@line 9305
  HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer31; //@line 9307
  HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer1; //@line 9309
  HEAP32[$AsyncCtx51 + 24 >> 2] = $0; //@line 9311
  HEAP8[$AsyncCtx51 + 28 >> 0] = $1; //@line 9313
  HEAP8[$AsyncCtx51 + 29 >> 0] = $trunc; //@line 9315
  HEAP32[$AsyncCtx51 + 32 >> 2] = $vararg_buffer13; //@line 9317
  HEAP32[$AsyncCtx51 + 36 >> 2] = $vararg_buffer13; //@line 9319
  HEAP32[$AsyncCtx51 + 40 >> 2] = $vararg_buffer15; //@line 9321
  HEAP32[$AsyncCtx51 + 44 >> 2] = $vararg_buffer15; //@line 9323
  HEAP32[$AsyncCtx51 + 48 >> 2] = $vararg_buffer9; //@line 9325
  HEAP32[$AsyncCtx51 + 52 >> 2] = $vararg_buffer9; //@line 9327
  HEAP32[$AsyncCtx51 + 56 >> 2] = $vararg_buffer11; //@line 9329
  HEAP32[$AsyncCtx51 + 60 >> 2] = $vararg_buffer11; //@line 9331
  HEAP32[$AsyncCtx51 + 64 >> 2] = $2; //@line 9333
  HEAP32[$AsyncCtx51 + 68 >> 2] = $vararg_buffer23; //@line 9335
  HEAP32[$AsyncCtx51 + 72 >> 2] = $vararg_buffer23; //@line 9337
  HEAP32[$AsyncCtx51 + 76 >> 2] = $vararg_buffer25; //@line 9339
  HEAP32[$AsyncCtx51 + 80 >> 2] = $vararg_buffer25; //@line 9341
  HEAP32[$AsyncCtx51 + 84 >> 2] = $vararg_buffer1; //@line 9343
  HEAP32[$AsyncCtx51 + 88 >> 2] = $50; //@line 9345
  HEAP32[$AsyncCtx51 + 92 >> 2] = $vararg_buffer6; //@line 9347
  HEAP16[$AsyncCtx51 + 96 >> 1] = $3; //@line 9349
  HEAP8[$AsyncCtx51 + 98 >> 0] = $48 & 1; //@line 9352
  HEAP32[$AsyncCtx51 + 100 >> 2] = $49; //@line 9354
  HEAP32[$AsyncCtx51 + 104 >> 2] = $vararg_buffer17; //@line 9356
  HEAP32[$AsyncCtx51 + 108 >> 2] = $vararg_buffer17; //@line 9358
  HEAP32[$AsyncCtx51 + 112 >> 2] = $vararg_buffer19; //@line 9360
  HEAP32[$AsyncCtx51 + 116 >> 2] = $vararg_buffer19; //@line 9362
  sp = STACKTOP; //@line 9363
  STACKTOP = sp; //@line 9364
  return 0; //@line 9364
 }
 _emscripten_free_async_context($AsyncCtx51 | 0); //@line 9366
 if (!$50) {
  if (!(HEAP8[$vararg_buffer1 + 4 >> 0] | 0)) {
   $$0 = -1009; //@line 9373
  } else {
   label = 12; //@line 9375
  }
 } else {
  label = 12; //@line 9378
 }
 do {
  if ((label | 0) == 12) {
   if (($1 + -1 & 255) >= 223) {
    _printf(11887, $vararg_buffer9) | 0; //@line 9385
    _printf(12376, $vararg_buffer11) | 0; //@line 9386
    $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9387
    _putchar(10) | 0; //@line 9388
    if (___async) {
     HEAP32[$AsyncCtx47 >> 2] = 301; //@line 9391
     HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer1; //@line 9393
     sp = STACKTOP; //@line 9394
     STACKTOP = sp; //@line 9395
     return 0; //@line 9395
    } else {
     _emscripten_free_async_context($AsyncCtx47 | 0); //@line 9397
     $$0 = -1015; //@line 9398
     break;
    }
   }
   $123 = $0 + 2285 | 0; //@line 9402
   HEAP8[$123 >> 0] = $1; //@line 9403
   if ($trunc << 24 >> 24 == 0 | ($trunc & 15) == 3) {
    _printf(11887, $vararg_buffer13) | 0; //@line 9409
    _printf(12413, $vararg_buffer15) | 0; //@line 9410
    $AsyncCtx44 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9411
    _putchar(10) | 0; //@line 9412
    if (___async) {
     HEAP32[$AsyncCtx44 >> 2] = 302; //@line 9415
     HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer1; //@line 9417
     sp = STACKTOP; //@line 9418
     STACKTOP = sp; //@line 9419
     return 0; //@line 9419
    } else {
     _emscripten_free_async_context($AsyncCtx44 | 0); //@line 9421
     $$0 = -1003; //@line 9422
     break;
    }
   }
   HEAP8[$0 + 1965 >> 0] = $1; //@line 9427
   $AsyncCtx59 = _emscripten_alloc_async_context(84, sp) | 0; //@line 9429
   $130 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($49, $3 & 255, $vararg_buffer6) | 0; //@line 9430
   if (___async) {
    HEAP32[$AsyncCtx59 >> 2] = 303; //@line 9433
    HEAP32[$AsyncCtx59 + 4 >> 2] = $vararg_buffer29; //@line 9435
    HEAP32[$AsyncCtx59 + 8 >> 2] = $vararg_buffer29; //@line 9437
    HEAP32[$AsyncCtx59 + 12 >> 2] = $vararg_buffer31; //@line 9439
    HEAP32[$AsyncCtx59 + 16 >> 2] = $vararg_buffer31; //@line 9441
    HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer1; //@line 9443
    HEAP32[$AsyncCtx59 + 24 >> 2] = $0; //@line 9445
    HEAP32[$AsyncCtx59 + 28 >> 2] = $2; //@line 9447
    HEAP8[$AsyncCtx59 + 32 >> 0] = $trunc; //@line 9449
    HEAP32[$AsyncCtx59 + 36 >> 2] = $vararg_buffer23; //@line 9451
    HEAP32[$AsyncCtx59 + 40 >> 2] = $vararg_buffer23; //@line 9453
    HEAP32[$AsyncCtx59 + 44 >> 2] = $vararg_buffer25; //@line 9455
    HEAP32[$AsyncCtx59 + 48 >> 2] = $vararg_buffer25; //@line 9457
    HEAP32[$AsyncCtx59 + 52 >> 2] = $123; //@line 9459
    HEAP32[$AsyncCtx59 + 56 >> 2] = $vararg_buffer6; //@line 9461
    HEAP32[$AsyncCtx59 + 60 >> 2] = $vararg_buffer6; //@line 9463
    HEAP16[$AsyncCtx59 + 64 >> 1] = $3; //@line 9465
    HEAP8[$AsyncCtx59 + 66 >> 0] = $48 & 1; //@line 9468
    HEAP32[$AsyncCtx59 + 68 >> 2] = $vararg_buffer17; //@line 9470
    HEAP32[$AsyncCtx59 + 72 >> 2] = $vararg_buffer17; //@line 9472
    HEAP32[$AsyncCtx59 + 76 >> 2] = $vararg_buffer19; //@line 9474
    HEAP32[$AsyncCtx59 + 80 >> 2] = $vararg_buffer19; //@line 9476
    sp = STACKTOP; //@line 9477
    STACKTOP = sp; //@line 9478
    return 0; //@line 9478
   }
   _emscripten_free_async_context($AsyncCtx59 | 0); //@line 9480
   $154 = ($130 | 0) == -1010 ? HEAP8[$vararg_buffer6 >> 0] | 0 : HEAP8[$vararg_buffer6 + 1 >> 0] | 0; //@line 9485
   $$0$i43 = $154 & 255; //@line 9486
   $155 = $154 & 255; //@line 9487
   $156 = $3 & 65535; //@line 9488
   do {
    if (($$0$i43 & 65535) < ($3 & 65535)) {
     _printf(12139, $vararg_buffer17) | 0; //@line 9492
     HEAP32[$vararg_buffer19 >> 2] = $156; //@line 9493
     HEAP32[$vararg_buffer19 + 4 >> 2] = $155; //@line 9495
     _printf(12473, $vararg_buffer19) | 0; //@line 9496
     $AsyncCtx40 = _emscripten_alloc_async_context(68, sp) | 0; //@line 9497
     _putchar(10) | 0; //@line 9498
     if (___async) {
      HEAP32[$AsyncCtx40 >> 2] = 304; //@line 9501
      HEAP32[$AsyncCtx40 + 4 >> 2] = $156; //@line 9503
      HEAP32[$AsyncCtx40 + 8 >> 2] = $155; //@line 9505
      HEAP32[$AsyncCtx40 + 12 >> 2] = $0; //@line 9507
      HEAP16[$AsyncCtx40 + 16 >> 1] = $$0$i43; //@line 9509
      HEAP32[$AsyncCtx40 + 20 >> 2] = $2; //@line 9511
      HEAP8[$AsyncCtx40 + 24 >> 0] = $trunc; //@line 9513
      HEAP32[$AsyncCtx40 + 28 >> 2] = $vararg_buffer23; //@line 9515
      HEAP32[$AsyncCtx40 + 32 >> 2] = $vararg_buffer23; //@line 9517
      HEAP32[$AsyncCtx40 + 36 >> 2] = $vararg_buffer25; //@line 9519
      HEAP32[$AsyncCtx40 + 40 >> 2] = $vararg_buffer25; //@line 9521
      HEAP32[$AsyncCtx40 + 44 >> 2] = $123; //@line 9523
      HEAP32[$AsyncCtx40 + 48 >> 2] = $vararg_buffer29; //@line 9525
      HEAP32[$AsyncCtx40 + 52 >> 2] = $vararg_buffer29; //@line 9527
      HEAP32[$AsyncCtx40 + 56 >> 2] = $vararg_buffer31; //@line 9529
      HEAP32[$AsyncCtx40 + 60 >> 2] = $vararg_buffer31; //@line 9531
      HEAP32[$AsyncCtx40 + 64 >> 2] = $vararg_buffer1; //@line 9533
      sp = STACKTOP; //@line 9534
      STACKTOP = sp; //@line 9535
      return 0; //@line 9535
     } else {
      _emscripten_free_async_context($AsyncCtx40 | 0); //@line 9537
      HEAP16[$0 + 2232 >> 1] = $156 - $155; //@line 9541
      HEAP16[$0 + 2230 >> 1] = $$0$i43; //@line 9543
      _memcpy($0 + 1975 | 0, $2 | 0, $155 | 0) | 0; //@line 9545
      break;
     }
    } else {
     HEAP16[$0 + 2230 >> 1] = $3; //@line 9550
     HEAP16[$0 + 2232 >> 1] = 0; //@line 9552
     if (!$48) {
      _memcpy($0 + 1975 | 0, $2 | 0, $156 | 0) | 0; //@line 9555
     }
    }
   } while (0);
   switch ($trunc & 15) {
   case 9:
   case 5:
   case 1:
    {
     HEAP32[$0 + 1968 >> 2] = 0; //@line 9563
     HEAP8[$0 + 1972 >> 0] = HEAP8[$123 >> 0] | 0; //@line 9566
     switch ($trunc & 15) {
     case 6:
     case 2:
      {
       label = 30; //@line 9570
       break;
      }
     default:
      {}
     }
     break;
    }
   case 10:
   case 6:
   case 2:
    {
     label = 30; //@line 9579
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 30) {
    HEAP32[$0 + 1968 >> 2] = 1; //@line 9587
    HEAP8[$0 + 1972 >> 0] = HEAP8[$123 >> 0] | 0; //@line 9590
    HEAP8[$0 + 1974 >> 0] = HEAP8[$0 + 2284 >> 0] | 0; //@line 9594
   }
   _printf(12139, $vararg_buffer23) | 0; //@line 9596
   $191 = $0 + 2230 | 0; //@line 9597
   $196 = HEAPU16[$0 + 2232 >> 1] | 0; //@line 9602
   HEAP32[$vararg_buffer25 >> 2] = HEAPU16[$191 >> 1]; //@line 9603
   HEAP32[$vararg_buffer25 + 4 >> 2] = $196; //@line 9605
   _printf(12528, $vararg_buffer25) | 0; //@line 9606
   $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9607
   _putchar(10) | 0; //@line 9608
   if (___async) {
    HEAP32[$AsyncCtx36 >> 2] = 305; //@line 9611
    HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 9613
    HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer29; //@line 9615
    HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer29; //@line 9617
    HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer31; //@line 9619
    HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer31; //@line 9621
    HEAP32[$AsyncCtx36 + 24 >> 2] = $191; //@line 9623
    HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer1; //@line 9625
    sp = STACKTOP; //@line 9626
    STACKTOP = sp; //@line 9627
    return 0; //@line 9627
   }
   _emscripten_free_async_context($AsyncCtx36 | 0); //@line 9629
   HEAP32[$0 + 1876 >> 2] = 5; //@line 9631
   $AsyncCtx66 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9632
   $205 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9633
   if (___async) {
    HEAP32[$AsyncCtx66 >> 2] = 306; //@line 9636
    HEAP32[$AsyncCtx66 + 4 >> 2] = $vararg_buffer29; //@line 9638
    HEAP32[$AsyncCtx66 + 8 >> 2] = $vararg_buffer29; //@line 9640
    HEAP32[$AsyncCtx66 + 12 >> 2] = $vararg_buffer31; //@line 9642
    HEAP32[$AsyncCtx66 + 16 >> 2] = $vararg_buffer31; //@line 9644
    HEAP32[$AsyncCtx66 + 20 >> 2] = $191; //@line 9646
    HEAP32[$AsyncCtx66 + 24 >> 2] = $vararg_buffer1; //@line 9648
    sp = STACKTOP; //@line 9649
    STACKTOP = sp; //@line 9650
    return 0; //@line 9650
   }
   _emscripten_free_async_context($AsyncCtx66 | 0); //@line 9652
   _printf(12139, $vararg_buffer29) | 0; //@line 9653
   HEAP32[$vararg_buffer31 >> 2] = $205; //@line 9654
   _printf(12554, $vararg_buffer31) | 0; //@line 9655
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9656
   _putchar(10) | 0; //@line 9657
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 307; //@line 9660
    HEAP32[$AsyncCtx + 4 >> 2] = $205; //@line 9662
    HEAP32[$AsyncCtx + 8 >> 2] = $191; //@line 9664
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9666
    sp = STACKTOP; //@line 9667
    STACKTOP = sp; //@line 9668
    return 0; //@line 9668
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9670
   if (!$205) {
    $220 = HEAPU16[$191 >> 1] | 0; //@line 9675
   } else {
    $220 = $205 << 16 >> 16; //@line 9679
   }
   $$0 = $220 & 65535; //@line 9682
  }
 } while (0);
 $$1 = $$0; //@line 9685
 STACKTOP = sp; //@line 9686
 return $$1 | 0; //@line 9686
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $108 = 0, $11 = 0, $126 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $14 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $179 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $2 = 0, $20 = 0, $215 = 0, $216 = 0, $218 = 0, $240 = 0, $258 = 0, $261 = 0, $270 = 0, $272 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 16108
 STACKTOP = STACKTOP + 80 | 0; //@line 16109
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 16109
 $vararg_buffer10 = sp + 40 | 0; //@line 16110
 $vararg_buffer8 = sp + 32 | 0; //@line 16111
 $vararg_buffer6 = sp + 24 | 0; //@line 16112
 $vararg_buffer4 = sp + 16 | 0; //@line 16113
 $vararg_buffer1 = sp + 8 | 0; //@line 16114
 $vararg_buffer = sp; //@line 16115
 $1 = sp + 60 | 0; //@line 16116
 $2 = sp + 56 | 0; //@line 16117
 $3 = sp + 44 | 0; //@line 16118
 HEAP32[$2 >> 2] = 0; //@line 16119
 switch (HEAP8[$0 + 1152 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 984 | 0; //@line 16124
   HEAP32[$6 >> 2] = 0; //@line 16125
   $$pre$phiZ2D = $6; //@line 16126
   break;
  }
 case -1:
  {
   $$1 = -1011; //@line 16130
   STACKTOP = sp; //@line 16131
   return $$1 | 0; //@line 16131
  }
 default:
  {
   $$pre$phiZ2D = $0 + 984 | 0; //@line 16136
  }
 }
 $8 = HEAP8[$0 + 379 >> 0] | 0; //@line 16140
 $9 = $0 + 372 | 0; //@line 16141
 HEAP8[$1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16143
 $11 = $0 + 375 | 0; //@line 16144
 HEAP8[$11 >> 0] = 1; //@line 16145
 HEAP8[$1 + 2 >> 0] = 1; //@line 16147
 HEAP8[$1 + 3 >> 0] = $8; //@line 16149
 $14 = $0 + 356 | 0; //@line 16150
 HEAP32[$1 + 4 >> 2] = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$0 + 988 >> 2] | 0) | 0; //@line 16156
 $20 = $0 + 992 | 0; //@line 16157
 HEAP32[$1 + 8 >> 2] = HEAP32[$20 >> 2]; //@line 16160
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 376 >> 0] | 0; //@line 16164
 __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s(HEAP32[$0 >> 2] | 0, $1); //@line 16166
 $28 = HEAP32[$20 >> 2] | 0; //@line 16168
 $34 = (Math_imul($28, HEAPU16[$0 + 1154 >> 1] | 0) | 0) + ((HEAP32[$$pre$phiZ2D >> 2] | 0) - $28) | 0; //@line 16174
 HEAP32[$$pre$phiZ2D >> 2] = $34; //@line 16175
 HEAP32[$3 >> 2] = $34; //@line 16176
 $35 = $0 + 1097 | 0; //@line 16177
 $37 = $3 + 8 | 0; //@line 16179
 HEAP8[$37 >> 0] = HEAP8[$35 >> 0] | 0; //@line 16180
 HEAP8[$11 >> 0] = 1; //@line 16181
 HEAP8[$3 + 10 >> 0] = 1; //@line 16183
 HEAP8[$3 + 9 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16186
 HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 980 >> 2]; //@line 16190
 $44 = HEAP32[$0 >> 2] | 0; //@line 16191
 $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 16194
 $48 = $0 + 378 | 0; //@line 16195
 $AsyncCtx = _emscripten_alloc_async_context(100, sp) | 0; //@line 16196
 $49 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 16197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 486; //@line 16200
  HEAP32[$AsyncCtx + 4 >> 2] = $9; //@line 16202
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16204
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16206
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 16208
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16210
  HEAP32[$AsyncCtx + 24 >> 2] = $48; //@line 16212
  HEAP32[$AsyncCtx + 28 >> 2] = $37; //@line 16214
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer1; //@line 16216
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 16218
  HEAP32[$AsyncCtx + 40 >> 2] = $35; //@line 16220
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 16222
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 16224
  HEAP32[$AsyncCtx + 52 >> 2] = $$pre$phiZ2D; //@line 16226
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer8; //@line 16228
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer8; //@line 16230
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer10; //@line 16232
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer10; //@line 16234
  HEAP32[$AsyncCtx + 72 >> 2] = $3; //@line 16236
  HEAP32[$AsyncCtx + 76 >> 2] = $2; //@line 16238
  HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer4; //@line 16240
  HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer4; //@line 16242
  HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer6; //@line 16244
  HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer6; //@line 16246
  HEAP32[$AsyncCtx + 96 >> 2] = $14; //@line 16248
  sp = STACKTOP; //@line 16249
  STACKTOP = sp; //@line 16250
  return 0; //@line 16250
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16252
 L9 : do {
  if (!$49) {
   while (1) {
    $75 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16257
    HEAP8[$35 >> 0] = $75; //@line 16258
    HEAP8[$37 >> 0] = $75; //@line 16259
    $76 = HEAP32[$0 >> 2] | 0; //@line 16260
    $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 56 >> 2] | 0; //@line 16263
    $AsyncCtx14 = _emscripten_alloc_async_context(100, sp) | 0; //@line 16264
    $80 = FUNCTION_TABLE_iiiiii[$79 & 7]($76, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 16265
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16270
    if ($80) {
     break L9;
    }
   }
   HEAP32[$AsyncCtx14 >> 2] = 487; //@line 16275
   HEAP32[$AsyncCtx14 + 4 >> 2] = $9; //@line 16277
   HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 16279
   HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 16281
   HEAP32[$AsyncCtx14 + 16 >> 2] = $vararg_buffer; //@line 16283
   HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer; //@line 16285
   HEAP32[$AsyncCtx14 + 24 >> 2] = $48; //@line 16287
   HEAP32[$AsyncCtx14 + 28 >> 2] = $37; //@line 16289
   HEAP32[$AsyncCtx14 + 32 >> 2] = $vararg_buffer1; //@line 16291
   HEAP32[$AsyncCtx14 + 36 >> 2] = $vararg_buffer1; //@line 16293
   HEAP32[$AsyncCtx14 + 40 >> 2] = $35; //@line 16295
   HEAP32[$AsyncCtx14 + 44 >> 2] = $3; //@line 16297
   HEAP32[$AsyncCtx14 + 48 >> 2] = $2; //@line 16299
   HEAP32[$AsyncCtx14 + 52 >> 2] = $$pre$phiZ2D; //@line 16301
   HEAP32[$AsyncCtx14 + 56 >> 2] = $vararg_buffer8; //@line 16303
   HEAP32[$AsyncCtx14 + 60 >> 2] = $vararg_buffer8; //@line 16305
   HEAP32[$AsyncCtx14 + 64 >> 2] = $vararg_buffer10; //@line 16307
   HEAP32[$AsyncCtx14 + 68 >> 2] = $vararg_buffer10; //@line 16309
   HEAP32[$AsyncCtx14 + 72 >> 2] = $3; //@line 16311
   HEAP32[$AsyncCtx14 + 76 >> 2] = $2; //@line 16313
   HEAP32[$AsyncCtx14 + 80 >> 2] = $vararg_buffer4; //@line 16315
   HEAP32[$AsyncCtx14 + 84 >> 2] = $vararg_buffer4; //@line 16317
   HEAP32[$AsyncCtx14 + 88 >> 2] = $vararg_buffer6; //@line 16319
   HEAP32[$AsyncCtx14 + 92 >> 2] = $vararg_buffer6; //@line 16321
   HEAP32[$AsyncCtx14 + 96 >> 2] = $14; //@line 16323
   sp = STACKTOP; //@line 16324
   STACKTOP = sp; //@line 16325
   return 0; //@line 16325
  }
 } while (0);
 _printf(13253, $vararg_buffer) | 0; //@line 16328
 $108 = HEAP8[$37 >> 0] | 0; //@line 16332
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$48 >> 0]; //@line 16333
 HEAP32[$vararg_buffer1 + 4 >> 2] = $108; //@line 16335
 _printf(13266, $vararg_buffer1) | 0; //@line 16336
 $AsyncCtx35 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16337
 _putchar(10) | 0; //@line 16338
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 488; //@line 16341
  HEAP32[$AsyncCtx35 + 4 >> 2] = $9; //@line 16343
  HEAP32[$AsyncCtx35 + 8 >> 2] = $14; //@line 16345
  HEAP32[$AsyncCtx35 + 12 >> 2] = $0; //@line 16347
  HEAP32[$AsyncCtx35 + 16 >> 2] = $2; //@line 16349
  HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 16351
  HEAP32[$AsyncCtx35 + 24 >> 2] = $2; //@line 16353
  HEAP32[$AsyncCtx35 + 28 >> 2] = $0; //@line 16355
  HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer8; //@line 16357
  HEAP32[$AsyncCtx35 + 36 >> 2] = $vararg_buffer8; //@line 16359
  HEAP32[$AsyncCtx35 + 40 >> 2] = $vararg_buffer10; //@line 16361
  HEAP32[$AsyncCtx35 + 44 >> 2] = $vararg_buffer10; //@line 16363
  HEAP32[$AsyncCtx35 + 48 >> 2] = $35; //@line 16365
  HEAP32[$AsyncCtx35 + 52 >> 2] = $vararg_buffer4; //@line 16367
  HEAP32[$AsyncCtx35 + 56 >> 2] = $vararg_buffer4; //@line 16369
  HEAP32[$AsyncCtx35 + 60 >> 2] = $vararg_buffer6; //@line 16371
  HEAP32[$AsyncCtx35 + 64 >> 2] = $vararg_buffer6; //@line 16373
  HEAP32[$AsyncCtx35 + 68 >> 2] = $48; //@line 16375
  sp = STACKTOP; //@line 16376
  STACKTOP = sp; //@line 16377
  return 0; //@line 16377
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 16379
 $126 = HEAP32[$0 >> 2] | 0; //@line 16380
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 72 >> 2] | 0; //@line 16383
 $130 = HEAP8[$35 >> 0] | 0; //@line 16384
 $132 = HEAP8[$0 + 1129 >> 0] | 0; //@line 16386
 $AsyncCtx17 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16387
 $133 = FUNCTION_TABLE_iiii[$129 & 15]($126, $130, $132) | 0; //@line 16388
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 489; //@line 16391
  HEAP32[$AsyncCtx17 + 4 >> 2] = $9; //@line 16393
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 16395
  HEAP32[$AsyncCtx17 + 12 >> 2] = $0; //@line 16397
  HEAP32[$AsyncCtx17 + 16 >> 2] = $vararg_buffer8; //@line 16399
  HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer8; //@line 16401
  HEAP32[$AsyncCtx17 + 24 >> 2] = $2; //@line 16403
  HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer10; //@line 16405
  HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer10; //@line 16407
  HEAP32[$AsyncCtx17 + 36 >> 2] = $3; //@line 16409
  HEAP32[$AsyncCtx17 + 40 >> 2] = $2; //@line 16411
  HEAP32[$AsyncCtx17 + 44 >> 2] = $35; //@line 16413
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer4; //@line 16415
  HEAP32[$AsyncCtx17 + 52 >> 2] = $vararg_buffer4; //@line 16417
  HEAP32[$AsyncCtx17 + 56 >> 2] = $vararg_buffer6; //@line 16419
  HEAP32[$AsyncCtx17 + 60 >> 2] = $vararg_buffer6; //@line 16421
  HEAP32[$AsyncCtx17 + 64 >> 2] = $48; //@line 16423
  HEAP32[$AsyncCtx17 + 68 >> 2] = $14; //@line 16425
  sp = STACKTOP; //@line 16426
  STACKTOP = sp; //@line 16427
  return 0; //@line 16427
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16429
 $151 = HEAP32[$0 >> 2] | 0; //@line 16430
 $154 = HEAP32[(HEAP32[$151 >> 2] | 0) + 28 >> 2] | 0; //@line 16433
 $155 = $0 + 1104 | 0; //@line 16434
 $156 = HEAP8[$155 >> 0] | 0; //@line 16435
 $157 = $0 + 1100 | 0; //@line 16436
 $158 = HEAP32[$157 >> 2] | 0; //@line 16437
 $AsyncCtx20 = _emscripten_alloc_async_context(80, sp) | 0; //@line 16439
 FUNCTION_TABLE_viiiii[$154 & 7]($151, $133, $156, $158, $0 + 1160 | 0); //@line 16440
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 490; //@line 16443
  HEAP32[$AsyncCtx20 + 4 >> 2] = $9; //@line 16445
  HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 16447
  HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 16449
  HEAP32[$AsyncCtx20 + 16 >> 2] = $vararg_buffer8; //@line 16451
  HEAP32[$AsyncCtx20 + 20 >> 2] = $vararg_buffer8; //@line 16453
  HEAP32[$AsyncCtx20 + 24 >> 2] = $2; //@line 16455
  HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer10; //@line 16457
  HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer10; //@line 16459
  HEAP32[$AsyncCtx20 + 36 >> 2] = $3; //@line 16461
  HEAP32[$AsyncCtx20 + 40 >> 2] = $2; //@line 16463
  HEAP32[$AsyncCtx20 + 44 >> 2] = $35; //@line 16465
  HEAP32[$AsyncCtx20 + 48 >> 2] = $vararg_buffer4; //@line 16467
  HEAP32[$AsyncCtx20 + 52 >> 2] = $vararg_buffer4; //@line 16469
  HEAP32[$AsyncCtx20 + 56 >> 2] = $vararg_buffer6; //@line 16471
  HEAP32[$AsyncCtx20 + 60 >> 2] = $vararg_buffer6; //@line 16473
  HEAP32[$AsyncCtx20 + 64 >> 2] = $48; //@line 16475
  HEAP32[$AsyncCtx20 + 68 >> 2] = $155; //@line 16477
  HEAP32[$AsyncCtx20 + 72 >> 2] = $157; //@line 16479
  HEAP32[$AsyncCtx20 + 76 >> 2] = $14; //@line 16481
  sp = STACKTOP; //@line 16482
  STACKTOP = sp; //@line 16483
  return 0; //@line 16483
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16485
 $179 = HEAP32[$0 >> 2] | 0; //@line 16486
 $182 = HEAP32[(HEAP32[$179 >> 2] | 0) + 28 >> 2] | 0; //@line 16489
 $184 = HEAP8[$0 + 1136 >> 0] | 0; //@line 16491
 $185 = HEAP8[$155 >> 0] | 0; //@line 16492
 $186 = HEAP32[$157 >> 2] | 0; //@line 16493
 $AsyncCtx23 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16495
 FUNCTION_TABLE_viiiii[$182 & 7]($179, $184, $185, $186, $0 + 1184 | 0); //@line 16496
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 491; //@line 16499
  HEAP32[$AsyncCtx23 + 4 >> 2] = $9; //@line 16501
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 16503
  HEAP32[$AsyncCtx23 + 12 >> 2] = $35; //@line 16505
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer4; //@line 16507
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer4; //@line 16509
  HEAP32[$AsyncCtx23 + 24 >> 2] = $vararg_buffer6; //@line 16511
  HEAP32[$AsyncCtx23 + 28 >> 2] = $vararg_buffer6; //@line 16513
  HEAP32[$AsyncCtx23 + 32 >> 2] = $0; //@line 16515
  HEAP32[$AsyncCtx23 + 36 >> 2] = $3; //@line 16517
  HEAP32[$AsyncCtx23 + 40 >> 2] = $2; //@line 16519
  HEAP32[$AsyncCtx23 + 44 >> 2] = $2; //@line 16521
  HEAP32[$AsyncCtx23 + 48 >> 2] = $48; //@line 16523
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer8; //@line 16525
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer8; //@line 16527
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 16529
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer10; //@line 16531
  HEAP32[$AsyncCtx23 + 68 >> 2] = $14; //@line 16533
  sp = STACKTOP; //@line 16534
  STACKTOP = sp; //@line 16535
  return 0; //@line 16535
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 16537
 do {
  if (!(HEAP8[$9 >> 0] | 0)) {
   HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1120 >> 2] | 0); //@line 16548
   $$sink = $0 + 1124 | 0; //@line 16550
  } else {
   $215 = HEAP8[$0 + 893 >> 0] | 0; //@line 16553
   $216 = HEAP8[$35 >> 0] | 0; //@line 16554
   $218 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 4 | 0) | 0; //@line 16556
   _printf(12967, $vararg_buffer4) | 0; //@line 16557
   _printf(13293, $vararg_buffer6) | 0; //@line 16558
   $AsyncCtx31 = _emscripten_alloc_async_context(52, sp) | 0; //@line 16559
   _putchar(10) | 0; //@line 16560
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 492; //@line 16563
    HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 16565
    HEAP32[$AsyncCtx31 + 8 >> 2] = $0; //@line 16567
    HEAP8[$AsyncCtx31 + 12 >> 0] = $216; //@line 16569
    HEAP8[$AsyncCtx31 + 13 >> 0] = $215; //@line 16571
    HEAP8[$AsyncCtx31 + 14 >> 0] = $218; //@line 16573
    HEAP32[$AsyncCtx31 + 16 >> 2] = $3; //@line 16575
    HEAP32[$AsyncCtx31 + 20 >> 2] = $2; //@line 16577
    HEAP32[$AsyncCtx31 + 24 >> 2] = $2; //@line 16579
    HEAP32[$AsyncCtx31 + 28 >> 2] = $48; //@line 16581
    HEAP32[$AsyncCtx31 + 32 >> 2] = $vararg_buffer8; //@line 16583
    HEAP32[$AsyncCtx31 + 36 >> 2] = $vararg_buffer8; //@line 16585
    HEAP32[$AsyncCtx31 + 40 >> 2] = $vararg_buffer10; //@line 16587
    HEAP32[$AsyncCtx31 + 44 >> 2] = $vararg_buffer10; //@line 16589
    HEAP32[$AsyncCtx31 + 48 >> 2] = $14; //@line 16591
    sp = STACKTOP; //@line 16592
    STACKTOP = sp; //@line 16593
    return 0; //@line 16593
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 16595
   $240 = ($218 & 255) + ($215 & 255) | 0; //@line 16603
   if ($240 >>> 0 < 256 & $240 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $216, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1112 >> 2] | 0); //@line 16615
    $$sink = $0 + 1116 | 0; //@line 16617
    break;
   } else {
    $$1 = -1010; //@line 16620
    STACKTOP = sp; //@line 16621
    return $$1 | 0; //@line 16621
   }
  }
 } while (0);
 HEAP32[$0 + 976 >> 2] = (HEAP32[$0 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 16630
 if (!(HEAP32[$2 >> 2] | 0)) {
  $258 = HEAP8[$48 >> 0] | 0; //@line 16634
  $AsyncCtx42 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16635
  __ZN7LoRaMac21send_frame_on_channelEh($0, $258) | 0; //@line 16636
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 493; //@line 16639
   HEAP32[$AsyncCtx42 + 4 >> 2] = $3; //@line 16641
   HEAP32[$AsyncCtx42 + 8 >> 2] = $2; //@line 16643
   sp = STACKTOP; //@line 16644
   STACKTOP = sp; //@line 16645
   return 0; //@line 16645
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 16647
  $$1 = 0; //@line 16648
  STACKTOP = sp; //@line 16649
  return $$1 | 0; //@line 16649
 }
 $261 = $0 + 968 | 0; //@line 16651
 HEAP32[$261 >> 2] = HEAP32[$261 >> 2] | 16; //@line 16654
 _printf(13253, $vararg_buffer8) | 0; //@line 16655
 HEAP32[$vararg_buffer10 >> 2] = HEAP32[$2 >> 2]; //@line 16657
 _printf(13317, $vararg_buffer10) | 0; //@line 16658
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16659
 _putchar(10) | 0; //@line 16660
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 494; //@line 16663
  HEAP32[$AsyncCtx27 + 4 >> 2] = $14; //@line 16665
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 16667
  HEAP32[$AsyncCtx27 + 12 >> 2] = $2; //@line 16669
  HEAP32[$AsyncCtx27 + 16 >> 2] = $3; //@line 16671
  HEAP32[$AsyncCtx27 + 20 >> 2] = $2; //@line 16673
  sp = STACKTOP; //@line 16674
  STACKTOP = sp; //@line 16675
  return 0; //@line 16675
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 16677
 $270 = HEAP32[$14 >> 2] | 0; //@line 16678
 $272 = HEAP32[$2 >> 2] | 0; //@line 16680
 $AsyncCtx38 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16681
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($270, $0 + 1016 | 0, $272); //@line 16682
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 495; //@line 16685
  HEAP32[$AsyncCtx38 + 4 >> 2] = $3; //@line 16687
  HEAP32[$AsyncCtx38 + 8 >> 2] = $2; //@line 16689
  sp = STACKTOP; //@line 16690
  STACKTOP = sp; //@line 16691
  return 0; //@line 16691
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 16693
 $$1 = 0; //@line 16694
 STACKTOP = sp; //@line 16695
 return $$1 | 0; //@line 16695
}
function __ZN7LoRaMac22get_phy_event_handlersEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i21 = 0, $$pre$i$i34 = 0, $$pre$i$i50 = 0, $$pre$i$i66 = 0, $$pre119 = 0, $$pre120 = 0, $$pre121 = 0, $$pre122 = 0, $1 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $138 = 0, $139 = 0, $149 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $162 = 0, $170 = 0, $171 = 0, $179 = 0, $180 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $64 = 0, $76 = 0, $77 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19329
 STACKTOP = STACKTOP + 16 | 0; //@line 19330
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19330
 $1 = sp; //@line 19331
 $2 = $1 + 12 | 0; //@line 19332
 HEAP32[$1 >> 2] = 566; //@line 19333
 HEAP32[$1 + 4 >> 2] = 0; //@line 19335
 HEAP32[$1 + 8 >> 2] = $0; //@line 19337
 HEAP32[$2 >> 2] = 848; //@line 19338
 $3 = $0 + 1212 | 0; //@line 19339
 do {
  if (($3 | 0) == ($1 | 0)) {
   $35 = 848; //@line 19343
   label = 10; //@line 19344
  } else {
   $5 = $0 + 1224 | 0; //@line 19346
   $6 = HEAP32[$5 >> 2] | 0; //@line 19347
   if (!$6) {
    $21 = 848; //@line 19350
   } else {
    $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19353
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 19354
    FUNCTION_TABLE_vi[$9 & 1023]($3); //@line 19355
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 567; //@line 19358
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 19360
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 19362
     HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 19364
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 19366
     HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 19368
     HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 19370
     HEAP32[$AsyncCtx + 28 >> 2] = $5; //@line 19372
     HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 19374
     HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 19376
     sp = STACKTOP; //@line 19377
     STACKTOP = sp; //@line 19378
     return 0; //@line 19378
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19380
    $$pre = HEAP32[$2 >> 2] | 0; //@line 19381
    if (!$$pre) {
     HEAP32[$5 >> 2] = 0; //@line 19384
     break;
    } else {
     $21 = $$pre; //@line 19387
    }
   }
   $22 = HEAP32[$21 + 4 >> 2] | 0; //@line 19391
   $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19392
   FUNCTION_TABLE_vii[$22 & 31]($3, $1); //@line 19393
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 568; //@line 19396
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 19398
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19400
    HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 19402
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 19404
    HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 19406
    HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 19408
    HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 19410
    HEAP32[$AsyncCtx2 + 32 >> 2] = $1; //@line 19412
    HEAP32[$AsyncCtx2 + 36 >> 2] = $1; //@line 19414
    sp = STACKTOP; //@line 19415
    STACKTOP = sp; //@line 19416
    return 0; //@line 19416
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19418
    $$pre$i$i = HEAP32[$2 >> 2] | 0; //@line 19419
    HEAP32[$5 >> 2] = $$pre$i$i; //@line 19421
    if (!$$pre$i$i) {
     break;
    } else {
     $35 = $$pre$i$i; //@line 19426
     label = 10; //@line 19427
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $36 = HEAP32[$35 + 8 >> 2] | 0; //@line 19436
   $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19437
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 19438
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 569; //@line 19441
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 19443
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 19445
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 19447
    HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 19449
    HEAP32[$AsyncCtx5 + 20 >> 2] = $3; //@line 19451
    HEAP32[$AsyncCtx5 + 24 >> 2] = $1; //@line 19453
    HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 19455
    sp = STACKTOP; //@line 19456
    STACKTOP = sp; //@line 19457
    return 0; //@line 19457
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19459
    break;
   }
  }
 } while (0);
 $44 = $1 + 12 | 0; //@line 19464
 HEAP32[$1 >> 2] = 7; //@line 19465
 HEAP32[$1 + 4 >> 2] = 0; //@line 19467
 HEAP32[$1 + 8 >> 2] = $0; //@line 19469
 HEAP32[$44 >> 2] = 860; //@line 19470
 $45 = $0 + 1244 | 0; //@line 19471
 do {
  if (($45 | 0) == ($1 | 0)) {
   $76 = 860; //@line 19475
   label = 22; //@line 19476
  } else {
   $47 = $0 + 1256 | 0; //@line 19478
   $48 = HEAP32[$47 >> 2] | 0; //@line 19479
   if (!$48) {
    $63 = 860; //@line 19482
   } else {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 19485
    $AsyncCtx8 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19486
    FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 19487
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 570; //@line 19490
     HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 19492
     HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 19494
     HEAP32[$AsyncCtx8 + 12 >> 2] = $0; //@line 19496
     HEAP32[$AsyncCtx8 + 16 >> 2] = $47; //@line 19498
     HEAP32[$AsyncCtx8 + 20 >> 2] = $45; //@line 19500
     HEAP32[$AsyncCtx8 + 24 >> 2] = $3; //@line 19502
     HEAP32[$AsyncCtx8 + 28 >> 2] = $44; //@line 19504
     HEAP32[$AsyncCtx8 + 32 >> 2] = $1; //@line 19506
     HEAP32[$AsyncCtx8 + 36 >> 2] = $1; //@line 19508
     sp = STACKTOP; //@line 19509
     STACKTOP = sp; //@line 19510
     return 0; //@line 19510
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 19512
    $$pre119 = HEAP32[$44 >> 2] | 0; //@line 19513
    if (!$$pre119) {
     HEAP32[$47 >> 2] = 0; //@line 19516
     break;
    } else {
     $63 = $$pre119; //@line 19519
    }
   }
   $64 = HEAP32[$63 + 4 >> 2] | 0; //@line 19523
   $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19524
   FUNCTION_TABLE_vii[$64 & 31]($45, $1); //@line 19525
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 571; //@line 19528
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 19530
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 19532
    HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 19534
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 19536
    HEAP32[$AsyncCtx11 + 20 >> 2] = $44; //@line 19538
    HEAP32[$AsyncCtx11 + 24 >> 2] = $47; //@line 19540
    HEAP32[$AsyncCtx11 + 28 >> 2] = $1; //@line 19542
    HEAP32[$AsyncCtx11 + 32 >> 2] = $1; //@line 19544
    sp = STACKTOP; //@line 19545
    STACKTOP = sp; //@line 19546
    return 0; //@line 19546
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19548
    $$pre$i$i21 = HEAP32[$44 >> 2] | 0; //@line 19549
    HEAP32[$47 >> 2] = $$pre$i$i21; //@line 19551
    if (!$$pre$i$i21) {
     break;
    } else {
     $76 = $$pre$i$i21; //@line 19556
     label = 22; //@line 19557
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $77 = HEAP32[$76 + 8 >> 2] | 0; //@line 19566
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19567
   FUNCTION_TABLE_vi[$77 & 1023]($1); //@line 19568
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 572; //@line 19571
    HEAP32[$AsyncCtx14 + 4 >> 2] = $1; //@line 19573
    HEAP32[$AsyncCtx14 + 8 >> 2] = $1; //@line 19575
    HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 19577
    HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 19579
    HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 19581
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 19583
    sp = STACKTOP; //@line 19584
    STACKTOP = sp; //@line 19585
    return 0; //@line 19585
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 19587
    break;
   }
  }
 } while (0);
 $84 = $1 + 12 | 0; //@line 19592
 HEAP32[$1 >> 2] = 573; //@line 19593
 HEAP32[$1 + 4 >> 2] = 0; //@line 19595
 HEAP32[$1 + 8 >> 2] = $0; //@line 19597
 HEAP32[$84 >> 2] = 848; //@line 19598
 $85 = $0 + 1276 | 0; //@line 19599
 do {
  if (($85 | 0) == ($1 | 0)) {
   $114 = 848; //@line 19603
   label = 34; //@line 19604
  } else {
   $87 = $0 + 1288 | 0; //@line 19606
   $88 = HEAP32[$87 >> 2] | 0; //@line 19607
   if (!$88) {
    $102 = 848; //@line 19610
   } else {
    $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 19613
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19614
    FUNCTION_TABLE_vi[$91 & 1023]($85); //@line 19615
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 574; //@line 19618
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 19620
     HEAP32[$AsyncCtx17 + 8 >> 2] = $87; //@line 19622
     HEAP32[$AsyncCtx17 + 12 >> 2] = $85; //@line 19624
     HEAP32[$AsyncCtx17 + 16 >> 2] = $84; //@line 19626
     HEAP32[$AsyncCtx17 + 20 >> 2] = $3; //@line 19628
     HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 19630
     HEAP32[$AsyncCtx17 + 28 >> 2] = $0; //@line 19632
     HEAP32[$AsyncCtx17 + 32 >> 2] = $1; //@line 19634
     sp = STACKTOP; //@line 19635
     STACKTOP = sp; //@line 19636
     return 0; //@line 19636
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 19638
    $$pre120 = HEAP32[$84 >> 2] | 0; //@line 19639
    if (!$$pre120) {
     HEAP32[$87 >> 2] = 0; //@line 19642
     break;
    } else {
     $102 = $$pre120; //@line 19645
    }
   }
   $103 = HEAP32[$102 + 4 >> 2] | 0; //@line 19649
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19650
   FUNCTION_TABLE_vii[$103 & 31]($85, $1); //@line 19651
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 575; //@line 19654
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 19656
    HEAP32[$AsyncCtx20 + 8 >> 2] = $3; //@line 19658
    HEAP32[$AsyncCtx20 + 12 >> 2] = $1; //@line 19660
    HEAP32[$AsyncCtx20 + 16 >> 2] = $0; //@line 19662
    HEAP32[$AsyncCtx20 + 20 >> 2] = $84; //@line 19664
    HEAP32[$AsyncCtx20 + 24 >> 2] = $87; //@line 19666
    HEAP32[$AsyncCtx20 + 28 >> 2] = $1; //@line 19668
    sp = STACKTOP; //@line 19669
    STACKTOP = sp; //@line 19670
    return 0; //@line 19670
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19672
    $$pre$i$i34 = HEAP32[$84 >> 2] | 0; //@line 19673
    HEAP32[$87 >> 2] = $$pre$i$i34; //@line 19675
    if (!$$pre$i$i34) {
     break;
    } else {
     $114 = $$pre$i$i34; //@line 19680
     label = 34; //@line 19681
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $115 = HEAP32[$114 + 8 >> 2] | 0; //@line 19690
   $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19691
   FUNCTION_TABLE_vi[$115 & 1023]($1); //@line 19692
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 576; //@line 19695
    HEAP32[$AsyncCtx23 + 4 >> 2] = $3; //@line 19697
    HEAP32[$AsyncCtx23 + 8 >> 2] = $1; //@line 19699
    HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 19701
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 19703
    HEAP32[$AsyncCtx23 + 20 >> 2] = $1; //@line 19705
    sp = STACKTOP; //@line 19706
    STACKTOP = sp; //@line 19707
    return 0; //@line 19707
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 19709
    break;
   }
  }
 } while (0);
 $121 = $1 + 12 | 0; //@line 19714
 HEAP32[$1 >> 2] = 577; //@line 19715
 HEAP32[$1 + 4 >> 2] = 0; //@line 19717
 HEAP32[$1 + 8 >> 2] = $0; //@line 19719
 HEAP32[$121 >> 2] = 848; //@line 19720
 $122 = $0 + 1228 | 0; //@line 19721
 do {
  if (($122 | 0) == ($1 | 0)) {
   $149 = 848; //@line 19725
   label = 46; //@line 19726
  } else {
   $124 = $0 + 1240 | 0; //@line 19728
   $125 = HEAP32[$124 >> 2] | 0; //@line 19729
   if (!$125) {
    $138 = 848; //@line 19732
   } else {
    $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 19735
    $AsyncCtx26 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19736
    FUNCTION_TABLE_vi[$128 & 1023]($122); //@line 19737
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 578; //@line 19740
     HEAP32[$AsyncCtx26 + 4 >> 2] = $3; //@line 19742
     HEAP32[$AsyncCtx26 + 8 >> 2] = $121; //@line 19744
     HEAP32[$AsyncCtx26 + 12 >> 2] = $124; //@line 19746
     HEAP32[$AsyncCtx26 + 16 >> 2] = $1; //@line 19748
     HEAP32[$AsyncCtx26 + 20 >> 2] = $1; //@line 19750
     HEAP32[$AsyncCtx26 + 24 >> 2] = $0; //@line 19752
     HEAP32[$AsyncCtx26 + 28 >> 2] = $122; //@line 19754
     sp = STACKTOP; //@line 19755
     STACKTOP = sp; //@line 19756
     return 0; //@line 19756
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 19758
    $$pre121 = HEAP32[$121 >> 2] | 0; //@line 19759
    if (!$$pre121) {
     HEAP32[$124 >> 2] = 0; //@line 19762
     break;
    } else {
     $138 = $$pre121; //@line 19765
    }
   }
   $139 = HEAP32[$138 + 4 >> 2] | 0; //@line 19769
   $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19770
   FUNCTION_TABLE_vii[$139 & 31]($122, $1); //@line 19771
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 579; //@line 19774
    HEAP32[$AsyncCtx29 + 4 >> 2] = $3; //@line 19776
    HEAP32[$AsyncCtx29 + 8 >> 2] = $121; //@line 19778
    HEAP32[$AsyncCtx29 + 12 >> 2] = $124; //@line 19780
    HEAP32[$AsyncCtx29 + 16 >> 2] = $1; //@line 19782
    HEAP32[$AsyncCtx29 + 20 >> 2] = $1; //@line 19784
    HEAP32[$AsyncCtx29 + 24 >> 2] = $0; //@line 19786
    sp = STACKTOP; //@line 19787
    STACKTOP = sp; //@line 19788
    return 0; //@line 19788
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 19790
    $$pre$i$i50 = HEAP32[$121 >> 2] | 0; //@line 19791
    HEAP32[$124 >> 2] = $$pre$i$i50; //@line 19793
    if (!$$pre$i$i50) {
     break;
    } else {
     $149 = $$pre$i$i50; //@line 19798
     label = 46; //@line 19799
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $150 = HEAP32[$149 + 8 >> 2] | 0; //@line 19808
   $AsyncCtx32 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19809
   FUNCTION_TABLE_vi[$150 & 1023]($1); //@line 19810
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 580; //@line 19813
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 19815
    HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 19817
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 19819
    HEAP32[$AsyncCtx32 + 16 >> 2] = $3; //@line 19821
    sp = STACKTOP; //@line 19822
    STACKTOP = sp; //@line 19823
    return 0; //@line 19823
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 19825
    break;
   }
  }
 } while (0);
 $155 = $1 + 12 | 0; //@line 19830
 HEAP32[$1 >> 2] = 581; //@line 19831
 HEAP32[$1 + 4 >> 2] = 0; //@line 19833
 HEAP32[$1 + 8 >> 2] = $0; //@line 19835
 HEAP32[$155 >> 2] = 848; //@line 19836
 $156 = $0 + 1260 | 0; //@line 19837
 if (($156 | 0) == ($1 | 0)) {
  $179 = 848; //@line 19840
 } else {
  $158 = $0 + 1272 | 0; //@line 19842
  $159 = HEAP32[$158 >> 2] | 0; //@line 19843
  if (!$159) {
   $170 = 848; //@line 19846
  } else {
   $162 = HEAP32[$159 + 8 >> 2] | 0; //@line 19849
   $AsyncCtx35 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19850
   FUNCTION_TABLE_vi[$162 & 1023]($156); //@line 19851
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 582; //@line 19854
    HEAP32[$AsyncCtx35 + 4 >> 2] = $155; //@line 19856
    HEAP32[$AsyncCtx35 + 8 >> 2] = $158; //@line 19858
    HEAP32[$AsyncCtx35 + 12 >> 2] = $156; //@line 19860
    HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 19862
    HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 19864
    sp = STACKTOP; //@line 19865
    STACKTOP = sp; //@line 19866
    return 0; //@line 19866
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 19868
   $$pre122 = HEAP32[$155 >> 2] | 0; //@line 19869
   if (!$$pre122) {
    HEAP32[$158 >> 2] = 0; //@line 19872
    STACKTOP = sp; //@line 19873
    return $3 | 0; //@line 19873
   } else {
    $170 = $$pre122; //@line 19875
   }
  }
  $171 = HEAP32[$170 + 4 >> 2] | 0; //@line 19879
  $AsyncCtx38 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19880
  FUNCTION_TABLE_vii[$171 & 31]($156, $1); //@line 19881
  if (___async) {
   HEAP32[$AsyncCtx38 >> 2] = 583; //@line 19884
   HEAP32[$AsyncCtx38 + 4 >> 2] = $155; //@line 19886
   HEAP32[$AsyncCtx38 + 8 >> 2] = $158; //@line 19888
   HEAP32[$AsyncCtx38 + 12 >> 2] = $1; //@line 19890
   HEAP32[$AsyncCtx38 + 16 >> 2] = $3; //@line 19892
   sp = STACKTOP; //@line 19893
   STACKTOP = sp; //@line 19894
   return 0; //@line 19894
  }
  _emscripten_free_async_context($AsyncCtx38 | 0); //@line 19896
  $$pre$i$i66 = HEAP32[$155 >> 2] | 0; //@line 19897
  HEAP32[$158 >> 2] = $$pre$i$i66; //@line 19899
  if (!$$pre$i$i66) {
   STACKTOP = sp; //@line 19902
   return $3 | 0; //@line 19902
  } else {
   $179 = $$pre$i$i66; //@line 19904
  }
 }
 $180 = HEAP32[$179 + 8 >> 2] | 0; //@line 19908
 $AsyncCtx41 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19909
 FUNCTION_TABLE_vi[$180 & 1023]($1); //@line 19910
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 584; //@line 19913
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 19915
  HEAP32[$AsyncCtx41 + 8 >> 2] = $3; //@line 19917
  sp = STACKTOP; //@line 19918
  STACKTOP = sp; //@line 19919
  return 0; //@line 19919
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 19921
 STACKTOP = sp; //@line 19922
 return $3 | 0; //@line 19922
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 2918
 STACKTOP = STACKTOP + 80 | 0; //@line 2919
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 2919
 $2 = sp + 56 | 0; //@line 2920
 $3 = sp + 4 | 0; //@line 2921
 $4 = sp + 40 | 0; //@line 2922
 $5 = sp + 24 | 0; //@line 2923
 $6 = sp + 8 | 0; //@line 2924
 $7 = sp; //@line 2925
 if (!$0) {
  $$0 = -24832; //@line 2928
  STACKTOP = sp; //@line 2929
  return $$0 | 0; //@line 2929
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 2931
 if (!$9) {
  $$0 = -24832; //@line 2934
  STACKTOP = sp; //@line 2935
  return $$0 | 0; //@line 2935
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 2938
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 2943
  STACKTOP = sp; //@line 2944
  return $$0 | 0; //@line 2944
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 2947
 $17 = $4 + 1 | 0; //@line 2948
 HEAP8[$4 >> 0] = 0; //@line 2949
 $18 = $4 + 2 | 0; //@line 2950
 HEAP8[$17 >> 0] = 0; //@line 2951
 $19 = $4 + 3 | 0; //@line 2952
 HEAP8[$18 >> 0] = 0; //@line 2953
 $20 = $4 + 4 | 0; //@line 2954
 HEAP8[$19 >> 0] = 0; //@line 2955
 $21 = $4 + 5 | 0; //@line 2956
 HEAP8[$20 >> 0] = 0; //@line 2957
 $22 = $4 + 6 | 0; //@line 2958
 HEAP8[$21 >> 0] = 0; //@line 2959
 $23 = $4 + 7 | 0; //@line 2960
 HEAP8[$22 >> 0] = 0; //@line 2961
 $24 = $4 + 8 | 0; //@line 2962
 HEAP8[$23 >> 0] = 0; //@line 2963
 $25 = $4 + 9 | 0; //@line 2964
 HEAP8[$24 >> 0] = 0; //@line 2965
 $26 = $4 + 10 | 0; //@line 2966
 HEAP8[$25 >> 0] = 0; //@line 2967
 $27 = $4 + 11 | 0; //@line 2968
 HEAP8[$26 >> 0] = 0; //@line 2969
 $28 = $4 + 12 | 0; //@line 2970
 HEAP8[$27 >> 0] = 0; //@line 2971
 $29 = $4 + 13 | 0; //@line 2972
 HEAP8[$28 >> 0] = 0; //@line 2973
 $30 = $4 + 14 | 0; //@line 2974
 HEAP8[$29 >> 0] = 0; //@line 2975
 $31 = $4 + 15 | 0; //@line 2976
 HEAP8[$30 >> 0] = 0; //@line 2977
 HEAP8[$31 >> 0] = 0; //@line 2978
 $32 = $5 + 1 | 0; //@line 2979
 HEAP8[$5 >> 0] = 0; //@line 2980
 $33 = $5 + 2 | 0; //@line 2981
 HEAP8[$32 >> 0] = 0; //@line 2982
 $34 = $5 + 3 | 0; //@line 2983
 HEAP8[$33 >> 0] = 0; //@line 2984
 $35 = $5 + 4 | 0; //@line 2985
 HEAP8[$34 >> 0] = 0; //@line 2986
 $36 = $5 + 5 | 0; //@line 2987
 HEAP8[$35 >> 0] = 0; //@line 2988
 $37 = $5 + 6 | 0; //@line 2989
 HEAP8[$36 >> 0] = 0; //@line 2990
 $38 = $5 + 7 | 0; //@line 2991
 HEAP8[$37 >> 0] = 0; //@line 2992
 $39 = $5 + 8 | 0; //@line 2993
 HEAP8[$38 >> 0] = 0; //@line 2994
 $40 = $5 + 9 | 0; //@line 2995
 HEAP8[$39 >> 0] = 0; //@line 2996
 $41 = $5 + 10 | 0; //@line 2997
 HEAP8[$40 >> 0] = 0; //@line 2998
 $42 = $5 + 11 | 0; //@line 2999
 HEAP8[$41 >> 0] = 0; //@line 3000
 $43 = $5 + 12 | 0; //@line 3001
 HEAP8[$42 >> 0] = 0; //@line 3002
 $44 = $5 + 13 | 0; //@line 3003
 HEAP8[$43 >> 0] = 0; //@line 3004
 $45 = $5 + 14 | 0; //@line 3005
 HEAP8[$44 >> 0] = 0; //@line 3006
 $46 = $5 + 15 | 0; //@line 3007
 HEAP8[$45 >> 0] = 0; //@line 3008
 HEAP8[$46 >> 0] = 0; //@line 3009
 $47 = $2 + 1 | 0; //@line 3010
 HEAP8[$2 >> 0] = 0; //@line 3011
 $48 = $2 + 2 | 0; //@line 3012
 HEAP8[$47 >> 0] = 0; //@line 3013
 $49 = $2 + 3 | 0; //@line 3014
 HEAP8[$48 >> 0] = 0; //@line 3015
 $50 = $2 + 4 | 0; //@line 3016
 HEAP8[$49 >> 0] = 0; //@line 3017
 $51 = $2 + 5 | 0; //@line 3018
 HEAP8[$50 >> 0] = 0; //@line 3019
 $52 = $2 + 6 | 0; //@line 3020
 HEAP8[$51 >> 0] = 0; //@line 3021
 $53 = $2 + 7 | 0; //@line 3022
 HEAP8[$52 >> 0] = 0; //@line 3023
 $54 = $2 + 8 | 0; //@line 3024
 HEAP8[$53 >> 0] = 0; //@line 3025
 $55 = $2 + 9 | 0; //@line 3026
 HEAP8[$54 >> 0] = 0; //@line 3027
 $56 = $2 + 10 | 0; //@line 3028
 HEAP8[$55 >> 0] = 0; //@line 3029
 $57 = $2 + 11 | 0; //@line 3030
 HEAP8[$56 >> 0] = 0; //@line 3031
 $58 = $2 + 12 | 0; //@line 3032
 HEAP8[$57 >> 0] = 0; //@line 3033
 $59 = $2 + 13 | 0; //@line 3034
 HEAP8[$58 >> 0] = 0; //@line 3035
 $60 = $2 + 14 | 0; //@line 3036
 HEAP8[$59 >> 0] = 0; //@line 3037
 $61 = $2 + 15 | 0; //@line 3038
 HEAP8[$60 >> 0] = 0; //@line 3039
 HEAP8[$61 >> 0] = 0; //@line 3040
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3043
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 3044
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 3045
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 688; //@line 3048
  HEAP32[$AsyncCtx2 + 4 >> 2] = $47; //@line 3050
  HEAP32[$AsyncCtx2 + 8 >> 2] = $39; //@line 3052
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 3054
  HEAP32[$AsyncCtx2 + 16 >> 2] = $33; //@line 3056
  HEAP32[$AsyncCtx2 + 20 >> 2] = $36; //@line 3058
  HEAP32[$AsyncCtx2 + 24 >> 2] = $45; //@line 3060
  HEAP32[$AsyncCtx2 + 28 >> 2] = $53; //@line 3062
  HEAP32[$AsyncCtx2 + 32 >> 2] = $59; //@line 3064
  HEAP32[$AsyncCtx2 + 36 >> 2] = $18; //@line 3066
  HEAP32[$AsyncCtx2 + 40 >> 2] = $30; //@line 3068
  HEAP32[$AsyncCtx2 + 44 >> 2] = $4; //@line 3070
  HEAP32[$AsyncCtx2 + 48 >> 2] = $24; //@line 3072
  HEAP32[$AsyncCtx2 + 52 >> 2] = $6; //@line 3074
  HEAP32[$AsyncCtx2 + 56 >> 2] = $21; //@line 3076
  HEAP32[$AsyncCtx2 + 60 >> 2] = $50; //@line 3078
  HEAP32[$AsyncCtx2 + 64 >> 2] = $12; //@line 3080
  HEAP32[$AsyncCtx2 + 68 >> 2] = $3; //@line 3082
  HEAP32[$AsyncCtx2 + 72 >> 2] = $17; //@line 3084
  HEAP32[$AsyncCtx2 + 76 >> 2] = $16; //@line 3086
  HEAP32[$AsyncCtx2 + 80 >> 2] = $7; //@line 3088
  HEAP32[$AsyncCtx2 + 84 >> 2] = $48; //@line 3090
  HEAP32[$AsyncCtx2 + 88 >> 2] = $51; //@line 3092
  HEAP32[$AsyncCtx2 + 92 >> 2] = $54; //@line 3094
  HEAP32[$AsyncCtx2 + 96 >> 2] = $6; //@line 3096
  HEAP32[$AsyncCtx2 + 100 >> 2] = $57; //@line 3098
  HEAP32[$AsyncCtx2 + 104 >> 2] = $38; //@line 3100
  HEAP32[$AsyncCtx2 + 108 >> 2] = $44; //@line 3102
  HEAP32[$AsyncCtx2 + 112 >> 2] = $2; //@line 3104
  HEAP32[$AsyncCtx2 + 116 >> 2] = $5; //@line 3106
  HEAP32[$AsyncCtx2 + 120 >> 2] = $58; //@line 3108
  HEAP32[$AsyncCtx2 + 124 >> 2] = $61; //@line 3110
  HEAP32[$AsyncCtx2 + 128 >> 2] = $0; //@line 3112
  HEAP32[$AsyncCtx2 + 132 >> 2] = $23; //@line 3114
  HEAP32[$AsyncCtx2 + 136 >> 2] = $1; //@line 3116
  HEAP32[$AsyncCtx2 + 140 >> 2] = $5; //@line 3118
  HEAP32[$AsyncCtx2 + 144 >> 2] = $34; //@line 3120
  HEAP32[$AsyncCtx2 + 148 >> 2] = $27; //@line 3122
  HEAP32[$AsyncCtx2 + 152 >> 2] = $12; //@line 3124
  HEAP32[$AsyncCtx2 + 156 >> 2] = $41; //@line 3126
  HEAP32[$AsyncCtx2 + 160 >> 2] = $20; //@line 3128
  HEAP32[$AsyncCtx2 + 164 >> 2] = $19; //@line 3130
  HEAP32[$AsyncCtx2 + 168 >> 2] = $52; //@line 3132
  HEAP32[$AsyncCtx2 + 172 >> 2] = $55; //@line 3134
  HEAP32[$AsyncCtx2 + 176 >> 2] = $4; //@line 3136
  HEAP32[$AsyncCtx2 + 180 >> 2] = $64; //@line 3138
  HEAP32[$AsyncCtx2 + 184 >> 2] = $28; //@line 3140
  HEAP32[$AsyncCtx2 + 188 >> 2] = $37; //@line 3142
  HEAP32[$AsyncCtx2 + 192 >> 2] = $31; //@line 3144
  HEAP32[$AsyncCtx2 + 196 >> 2] = $40; //@line 3146
  HEAP32[$AsyncCtx2 + 200 >> 2] = $26; //@line 3148
  HEAP32[$AsyncCtx2 + 204 >> 2] = $35; //@line 3150
  HEAP32[$AsyncCtx2 + 208 >> 2] = $60; //@line 3152
  HEAP32[$AsyncCtx2 + 212 >> 2] = $2; //@line 3154
  HEAP32[$AsyncCtx2 + 216 >> 2] = $32; //@line 3156
  HEAP32[$AsyncCtx2 + 220 >> 2] = $29; //@line 3158
  HEAP32[$AsyncCtx2 + 224 >> 2] = $49; //@line 3160
  HEAP32[$AsyncCtx2 + 228 >> 2] = $22; //@line 3162
  HEAP32[$AsyncCtx2 + 232 >> 2] = $25; //@line 3164
  HEAP32[$AsyncCtx2 + 236 >> 2] = $7; //@line 3166
  HEAP32[$AsyncCtx2 + 240 >> 2] = $43; //@line 3168
  HEAP32[$AsyncCtx2 + 244 >> 2] = $46; //@line 3170
  HEAP32[$AsyncCtx2 + 248 >> 2] = $56; //@line 3172
  sp = STACKTOP; //@line 3173
  STACKTOP = sp; //@line 3174
  return 0; //@line 3174
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3176
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 3182
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 3186
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 3193
   $$01720$i55 = 0; //@line 3194
   $$021$i54 = $129; //@line 3194
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 3198
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 3203
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 3208
     $$021$i54 = $$021$i54 + -1 | 0; //@line 3208
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 3218
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 3221
   HEAP8[$145 >> 0] = $148; //@line 3223
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3226
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3230
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 3240
   if (($129 | 0) > 0) {
    $156 = $148; //@line 3244
    $157 = $64 + -2 | 0; //@line 3244
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 3249
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 3254
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 3258
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 3269
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 3274
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 3277
 HEAP8[$47 >> 0] = 0; //@line 3278
 HEAP8[$48 >> 0] = 0; //@line 3279
 HEAP8[$49 >> 0] = 0; //@line 3280
 HEAP8[$50 >> 0] = 0; //@line 3281
 HEAP8[$51 >> 0] = 0; //@line 3282
 HEAP8[$52 >> 0] = 0; //@line 3283
 HEAP8[$53 >> 0] = 0; //@line 3284
 HEAP8[$54 >> 0] = 0; //@line 3285
 HEAP8[$55 >> 0] = 0; //@line 3286
 HEAP8[$56 >> 0] = 0; //@line 3287
 HEAP8[$57 >> 0] = 0; //@line 3288
 HEAP8[$58 >> 0] = 0; //@line 3289
 HEAP8[$59 >> 0] = 0; //@line 3290
 HEAP8[$60 >> 0] = 0; //@line 3291
 HEAP8[$61 >> 0] = 0; //@line 3292
 $175 = $12 + 16 | 0; //@line 3293
 $176 = $12 + 32 | 0; //@line 3294
 $177 = HEAP32[$176 >> 2] | 0; //@line 3295
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3298
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 3304
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 3308
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 3311
   $$013$i = $$013$i + 1 | 0; //@line 3312
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 3315
  do {
   $185 = $6 + $$09$i45 | 0; //@line 3322
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 3327
   $$09$i45 = $$09$i45 + 1 | 0; //@line 3328
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 3331
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 3340
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 3348
    $$09$i41 = $$09$i41 + 1 | 0; //@line 3349
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 3352
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 3363
   do {
    $202 = $12 + $$09$i | 0; //@line 3367
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 3370
    $$09$i = $$09$i + 1 | 0; //@line 3371
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 3381
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 3382
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 689; //@line 3385
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 3387
  HEAP32[$AsyncCtx + 8 >> 2] = $42; //@line 3389
  HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 3391
  HEAP32[$AsyncCtx + 16 >> 2] = $36; //@line 3393
  HEAP32[$AsyncCtx + 20 >> 2] = $45; //@line 3395
  HEAP32[$AsyncCtx + 24 >> 2] = $18; //@line 3397
  HEAP32[$AsyncCtx + 28 >> 2] = $24; //@line 3399
  HEAP32[$AsyncCtx + 32 >> 2] = $30; //@line 3401
  HEAP32[$AsyncCtx + 36 >> 2] = $176; //@line 3403
  HEAP32[$AsyncCtx + 40 >> 2] = $6; //@line 3405
  HEAP32[$AsyncCtx + 44 >> 2] = $21; //@line 3407
  HEAP32[$AsyncCtx + 48 >> 2] = $12; //@line 3409
  HEAP32[$AsyncCtx + 52 >> 2] = $17; //@line 3411
  HEAP32[$AsyncCtx + 56 >> 2] = $16; //@line 3413
  HEAP32[$AsyncCtx + 60 >> 2] = $38; //@line 3415
  HEAP32[$AsyncCtx + 64 >> 2] = $44; //@line 3417
  HEAP32[$AsyncCtx + 68 >> 2] = $23; //@line 3419
  HEAP32[$AsyncCtx + 72 >> 2] = $1; //@line 3421
  HEAP32[$AsyncCtx + 76 >> 2] = $5; //@line 3423
  HEAP32[$AsyncCtx + 80 >> 2] = $34; //@line 3425
  HEAP32[$AsyncCtx + 84 >> 2] = $27; //@line 3427
  HEAP32[$AsyncCtx + 88 >> 2] = $12; //@line 3429
  HEAP32[$AsyncCtx + 92 >> 2] = $41; //@line 3431
  HEAP32[$AsyncCtx + 96 >> 2] = $20; //@line 3433
  HEAP32[$AsyncCtx + 100 >> 2] = $19; //@line 3435
  HEAP32[$AsyncCtx + 104 >> 2] = $28; //@line 3437
  HEAP32[$AsyncCtx + 108 >> 2] = $31; //@line 3439
  HEAP32[$AsyncCtx + 112 >> 2] = $4; //@line 3441
  HEAP32[$AsyncCtx + 116 >> 2] = $37; //@line 3443
  HEAP32[$AsyncCtx + 120 >> 2] = $40; //@line 3445
  HEAP32[$AsyncCtx + 124 >> 2] = $26; //@line 3447
  HEAP32[$AsyncCtx + 128 >> 2] = $35; //@line 3449
  HEAP32[$AsyncCtx + 132 >> 2] = $175; //@line 3451
  HEAP32[$AsyncCtx + 136 >> 2] = $32; //@line 3453
  HEAP32[$AsyncCtx + 140 >> 2] = $29; //@line 3455
  HEAP32[$AsyncCtx + 144 >> 2] = $22; //@line 3457
  HEAP32[$AsyncCtx + 148 >> 2] = $25; //@line 3459
  HEAP32[$AsyncCtx + 152 >> 2] = $7; //@line 3461
  HEAP32[$AsyncCtx + 156 >> 2] = $43; //@line 3463
  HEAP32[$AsyncCtx + 160 >> 2] = $46; //@line 3465
  sp = STACKTOP; //@line 3466
  STACKTOP = sp; //@line 3467
  return 0; //@line 3467
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3469
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 3472
 }
 HEAP8[$4 >> 0] = 0; //@line 3474
 HEAP8[$17 >> 0] = 0; //@line 3475
 HEAP8[$18 >> 0] = 0; //@line 3476
 HEAP8[$19 >> 0] = 0; //@line 3477
 HEAP8[$20 >> 0] = 0; //@line 3478
 HEAP8[$21 >> 0] = 0; //@line 3479
 HEAP8[$22 >> 0] = 0; //@line 3480
 HEAP8[$23 >> 0] = 0; //@line 3481
 HEAP8[$24 >> 0] = 0; //@line 3482
 HEAP8[$25 >> 0] = 0; //@line 3483
 HEAP8[$26 >> 0] = 0; //@line 3484
 HEAP8[$27 >> 0] = 0; //@line 3485
 HEAP8[$28 >> 0] = 0; //@line 3486
 HEAP8[$29 >> 0] = 0; //@line 3487
 HEAP8[$30 >> 0] = 0; //@line 3488
 HEAP8[$31 >> 0] = 0; //@line 3489
 HEAP8[$5 >> 0] = 0; //@line 3490
 HEAP8[$32 >> 0] = 0; //@line 3491
 HEAP8[$33 >> 0] = 0; //@line 3492
 HEAP8[$34 >> 0] = 0; //@line 3493
 HEAP8[$35 >> 0] = 0; //@line 3494
 HEAP8[$36 >> 0] = 0; //@line 3495
 HEAP8[$37 >> 0] = 0; //@line 3496
 HEAP8[$38 >> 0] = 0; //@line 3497
 HEAP8[$39 >> 0] = 0; //@line 3498
 HEAP8[$40 >> 0] = 0; //@line 3499
 HEAP8[$41 >> 0] = 0; //@line 3500
 HEAP8[$42 >> 0] = 0; //@line 3501
 HEAP8[$43 >> 0] = 0; //@line 3502
 HEAP8[$44 >> 0] = 0; //@line 3503
 HEAP8[$45 >> 0] = 0; //@line 3504
 HEAP8[$46 >> 0] = 0; //@line 3505
 HEAP32[$176 >> 2] = 0; //@line 3506
 HEAP8[$175 >> 0] = 0; //@line 3508
 HEAP8[$12 + 17 >> 0] = 0; //@line 3510
 HEAP8[$12 + 18 >> 0] = 0; //@line 3512
 HEAP8[$12 + 19 >> 0] = 0; //@line 3514
 HEAP8[$12 + 20 >> 0] = 0; //@line 3516
 HEAP8[$12 + 21 >> 0] = 0; //@line 3518
 HEAP8[$12 + 22 >> 0] = 0; //@line 3520
 HEAP8[$12 + 23 >> 0] = 0; //@line 3522
 HEAP8[$12 + 24 >> 0] = 0; //@line 3524
 HEAP8[$12 + 25 >> 0] = 0; //@line 3526
 HEAP8[$12 + 26 >> 0] = 0; //@line 3528
 HEAP8[$12 + 27 >> 0] = 0; //@line 3530
 HEAP8[$12 + 28 >> 0] = 0; //@line 3532
 HEAP8[$12 + 29 >> 0] = 0; //@line 3534
 HEAP8[$12 + 30 >> 0] = 0; //@line 3536
 HEAP8[$12 + 31 >> 0] = 0; //@line 3537
 HEAP8[$12 >> 0] = 0; //@line 3539
 HEAP8[$12 + 1 >> 0] = 0; //@line 3541
 HEAP8[$12 + 2 >> 0] = 0; //@line 3543
 HEAP8[$12 + 3 >> 0] = 0; //@line 3545
 HEAP8[$12 + 4 >> 0] = 0; //@line 3547
 HEAP8[$12 + 5 >> 0] = 0; //@line 3549
 HEAP8[$12 + 6 >> 0] = 0; //@line 3551
 HEAP8[$12 + 7 >> 0] = 0; //@line 3553
 HEAP8[$12 + 8 >> 0] = 0; //@line 3555
 HEAP8[$12 + 9 >> 0] = 0; //@line 3557
 HEAP8[$12 + 10 >> 0] = 0; //@line 3559
 HEAP8[$12 + 11 >> 0] = 0; //@line 3561
 HEAP8[$12 + 12 >> 0] = 0; //@line 3563
 HEAP8[$12 + 13 >> 0] = 0; //@line 3565
 HEAP8[$12 + 14 >> 0] = 0; //@line 3567
 HEAP8[$12 + 15 >> 0] = 0; //@line 3568
 $$0 = $206; //@line 3569
 STACKTOP = sp; //@line 3570
 return $$0 | 0; //@line 3570
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 9357
 $3 = HEAP32[5810] | 0; //@line 9358
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 9361
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 9365
 $7 = $6 & 3; //@line 9366
 if (($7 | 0) == 1) {
  _abort(); //@line 9369
 }
 $9 = $6 & -8; //@line 9372
 $10 = $2 + $9 | 0; //@line 9373
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 9378
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 9384
   $17 = $13 + $9 | 0; //@line 9385
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 9388
   }
   if ((HEAP32[5811] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 9394
    $106 = HEAP32[$105 >> 2] | 0; //@line 9395
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 9399
     $$1382 = $17; //@line 9399
     $114 = $16; //@line 9399
     break;
    }
    HEAP32[5808] = $17; //@line 9402
    HEAP32[$105 >> 2] = $106 & -2; //@line 9404
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 9407
    HEAP32[$16 + $17 >> 2] = $17; //@line 9409
    return;
   }
   $21 = $13 >>> 3; //@line 9412
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 9416
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 9418
    $28 = 23264 + ($21 << 1 << 2) | 0; //@line 9420
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 9425
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9432
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5806] = HEAP32[5806] & ~(1 << $21); //@line 9442
     $$1 = $16; //@line 9443
     $$1382 = $17; //@line 9443
     $114 = $16; //@line 9443
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 9449
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 9453
     }
     $41 = $26 + 8 | 0; //@line 9456
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 9460
     } else {
      _abort(); //@line 9462
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 9467
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 9468
    $$1 = $16; //@line 9469
    $$1382 = $17; //@line 9469
    $114 = $16; //@line 9469
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 9473
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 9475
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 9479
     $60 = $59 + 4 | 0; //@line 9480
     $61 = HEAP32[$60 >> 2] | 0; //@line 9481
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 9484
      if (!$63) {
       $$3 = 0; //@line 9487
       break;
      } else {
       $$1387 = $63; //@line 9490
       $$1390 = $59; //@line 9490
      }
     } else {
      $$1387 = $61; //@line 9493
      $$1390 = $60; //@line 9493
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 9496
      $66 = HEAP32[$65 >> 2] | 0; //@line 9497
      if ($66 | 0) {
       $$1387 = $66; //@line 9500
       $$1390 = $65; //@line 9500
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 9503
      $69 = HEAP32[$68 >> 2] | 0; //@line 9504
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 9509
       $$1390 = $68; //@line 9509
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 9514
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 9517
      $$3 = $$1387; //@line 9518
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 9523
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 9526
     }
     $53 = $51 + 12 | 0; //@line 9529
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9533
     }
     $56 = $48 + 8 | 0; //@line 9536
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 9540
      HEAP32[$56 >> 2] = $51; //@line 9541
      $$3 = $48; //@line 9542
      break;
     } else {
      _abort(); //@line 9545
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 9552
    $$1382 = $17; //@line 9552
    $114 = $16; //@line 9552
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 9555
    $75 = 23528 + ($74 << 2) | 0; //@line 9556
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 9561
      if (!$$3) {
       HEAP32[5807] = HEAP32[5807] & ~(1 << $74); //@line 9568
       $$1 = $16; //@line 9569
       $$1382 = $17; //@line 9569
       $114 = $16; //@line 9569
       break L10;
      }
     } else {
      if ((HEAP32[5810] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 9576
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 9584
       if (!$$3) {
        $$1 = $16; //@line 9587
        $$1382 = $17; //@line 9587
        $114 = $16; //@line 9587
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5810] | 0; //@line 9595
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 9598
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 9602
    $92 = $16 + 16 | 0; //@line 9603
    $93 = HEAP32[$92 >> 2] | 0; //@line 9604
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 9610
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 9614
       HEAP32[$93 + 24 >> 2] = $$3; //@line 9616
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 9622
    if (!$99) {
     $$1 = $16; //@line 9625
     $$1382 = $17; //@line 9625
     $114 = $16; //@line 9625
    } else {
     if ((HEAP32[5810] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 9630
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 9634
      HEAP32[$99 + 24 >> 2] = $$3; //@line 9636
      $$1 = $16; //@line 9637
      $$1382 = $17; //@line 9637
      $114 = $16; //@line 9637
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 9643
   $$1382 = $9; //@line 9643
   $114 = $2; //@line 9643
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 9648
 }
 $115 = $10 + 4 | 0; //@line 9651
 $116 = HEAP32[$115 >> 2] | 0; //@line 9652
 if (!($116 & 1)) {
  _abort(); //@line 9656
 }
 if (!($116 & 2)) {
  if ((HEAP32[5812] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5809] | 0) + $$1382 | 0; //@line 9666
   HEAP32[5809] = $124; //@line 9667
   HEAP32[5812] = $$1; //@line 9668
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 9671
   if (($$1 | 0) != (HEAP32[5811] | 0)) {
    return;
   }
   HEAP32[5811] = 0; //@line 9677
   HEAP32[5808] = 0; //@line 9678
   return;
  }
  if ((HEAP32[5811] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5808] | 0) + $$1382 | 0; //@line 9685
   HEAP32[5808] = $132; //@line 9686
   HEAP32[5811] = $114; //@line 9687
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 9690
   HEAP32[$114 + $132 >> 2] = $132; //@line 9692
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 9696
  $138 = $116 >>> 3; //@line 9697
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 9702
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 9704
    $145 = 23264 + ($138 << 1 << 2) | 0; //@line 9706
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5810] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 9712
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 9719
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5806] = HEAP32[5806] & ~(1 << $138); //@line 9729
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 9735
    } else {
     if ((HEAP32[5810] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 9740
     }
     $160 = $143 + 8 | 0; //@line 9743
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 9747
     } else {
      _abort(); //@line 9749
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 9754
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 9755
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 9758
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 9760
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 9764
      $180 = $179 + 4 | 0; //@line 9765
      $181 = HEAP32[$180 >> 2] | 0; //@line 9766
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 9769
       if (!$183) {
        $$3400 = 0; //@line 9772
        break;
       } else {
        $$1398 = $183; //@line 9775
        $$1402 = $179; //@line 9775
       }
      } else {
       $$1398 = $181; //@line 9778
       $$1402 = $180; //@line 9778
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 9781
       $186 = HEAP32[$185 >> 2] | 0; //@line 9782
       if ($186 | 0) {
        $$1398 = $186; //@line 9785
        $$1402 = $185; //@line 9785
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 9788
       $189 = HEAP32[$188 >> 2] | 0; //@line 9789
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 9794
        $$1402 = $188; //@line 9794
       }
      }
      if ((HEAP32[5810] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 9800
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 9803
       $$3400 = $$1398; //@line 9804
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 9809
      if ((HEAP32[5810] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 9813
      }
      $173 = $170 + 12 | 0; //@line 9816
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 9820
      }
      $176 = $167 + 8 | 0; //@line 9823
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 9827
       HEAP32[$176 >> 2] = $170; //@line 9828
       $$3400 = $167; //@line 9829
       break;
      } else {
       _abort(); //@line 9832
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 9840
     $196 = 23528 + ($195 << 2) | 0; //@line 9841
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 9846
       if (!$$3400) {
        HEAP32[5807] = HEAP32[5807] & ~(1 << $195); //@line 9853
        break L108;
       }
      } else {
       if ((HEAP32[5810] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 9860
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 9868
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5810] | 0; //@line 9878
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 9881
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 9885
     $213 = $10 + 16 | 0; //@line 9886
     $214 = HEAP32[$213 >> 2] | 0; //@line 9887
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 9893
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 9897
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 9899
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 9905
     if ($220 | 0) {
      if ((HEAP32[5810] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 9911
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 9915
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 9917
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 9926
  HEAP32[$114 + $137 >> 2] = $137; //@line 9928
  if (($$1 | 0) == (HEAP32[5811] | 0)) {
   HEAP32[5808] = $137; //@line 9932
   return;
  } else {
   $$2 = $137; //@line 9935
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 9939
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 9942
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 9944
  $$2 = $$1382; //@line 9945
 }
 $235 = $$2 >>> 3; //@line 9947
 if ($$2 >>> 0 < 256) {
  $238 = 23264 + ($235 << 1 << 2) | 0; //@line 9951
  $239 = HEAP32[5806] | 0; //@line 9952
  $240 = 1 << $235; //@line 9953
  if (!($239 & $240)) {
   HEAP32[5806] = $239 | $240; //@line 9958
   $$0403 = $238; //@line 9960
   $$pre$phiZ2D = $238 + 8 | 0; //@line 9960
  } else {
   $244 = $238 + 8 | 0; //@line 9962
   $245 = HEAP32[$244 >> 2] | 0; //@line 9963
   if ((HEAP32[5810] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 9967
   } else {
    $$0403 = $245; //@line 9970
    $$pre$phiZ2D = $244; //@line 9970
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 9973
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 9975
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 9977
  HEAP32[$$1 + 12 >> 2] = $238; //@line 9979
  return;
 }
 $251 = $$2 >>> 8; //@line 9982
 if (!$251) {
  $$0396 = 0; //@line 9985
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 9989
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 9993
   $257 = $251 << $256; //@line 9994
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 9997
   $262 = $257 << $260; //@line 9999
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10002
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10007
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10013
  }
 }
 $276 = 23528 + ($$0396 << 2) | 0; //@line 10016
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10018
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10021
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10022
 $280 = HEAP32[5807] | 0; //@line 10023
 $281 = 1 << $$0396; //@line 10024
 do {
  if (!($280 & $281)) {
   HEAP32[5807] = $280 | $281; //@line 10030
   HEAP32[$276 >> 2] = $$1; //@line 10031
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10033
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10035
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10037
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10045
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10045
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10052
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10056
    $301 = HEAP32[$299 >> 2] | 0; //@line 10058
    if (!$301) {
     label = 121; //@line 10061
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10064
     $$0384 = $301; //@line 10064
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5810] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10071
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10074
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10076
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10078
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10080
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10085
    $309 = HEAP32[$308 >> 2] | 0; //@line 10086
    $310 = HEAP32[5810] | 0; //@line 10087
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10093
     HEAP32[$308 >> 2] = $$1; //@line 10094
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10096
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10098
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10100
     break;
    } else {
     _abort(); //@line 10103
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5814] | 0) + -1 | 0; //@line 10110
 HEAP32[5814] = $319; //@line 10111
 if (!$319) {
  $$0212$in$i = 23680; //@line 10114
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10119
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10125
  }
 }
 HEAP32[5814] = -1; //@line 10128
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_488($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 33225
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33227
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33229
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33231
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33233
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33235
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33237
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33239
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33241
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33243
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33245
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33247
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33249
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33251
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33253
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33255
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 33257
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 33261
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 33263
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 33265
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 33267
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 33269
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 33271
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 33273
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 33275
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 33277
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 33279
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 33281
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 33283
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 33285
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 33287
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 33289
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 33291
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 33293
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 33295
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 33297
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 33299
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 33301
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 33303
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 33305
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 33307
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 33309
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 33311
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 33313
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 33315
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 33317
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 33319
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 33321
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 33323
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 33325
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 33327
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 33329
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 33331
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 33333
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 33335
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 33337
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 33339
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 33341
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 33343
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 33345
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 33347
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 33349
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($90 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 33357
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 33361
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $90 + -1 | 0; //@line 33368
   $$01720$i55 = 0; //@line 33369
   $$021$i54 = $127; //@line 33369
   while (1) {
    $130 = HEAPU8[$106 + $$021$i54 >> 0] | 0; //@line 33373
    HEAP8[$22 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 33378
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 33383
     $$021$i54 = $$021$i54 + -1 | 0; //@line 33383
    } else {
     break;
    }
   }
   $143 = $22 + $127 | 0; //@line 33393
   $146 = $$019$i52 & 0 - ((HEAPU8[$56 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 33396
   HEAP8[$143 >> 0] = $146; //@line 33398
   switch ($90 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 33401
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 33405
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$58 + $127 >> 0] = $146 << 1; //@line 33415
   if (($127 | 0) > 0) {
    $154 = $146; //@line 33419
    $155 = $90 + -2 | 0; //@line 33419
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$22 + $155 >> 0] | 0; //@line 33424
     HEAP8[$58 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 33429
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 33433
     }
    }
   }
   $168 = $58 + $127 | 0; //@line 33444
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$88 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 33449
  }
 } while (0);
 HEAP8[$56 >> 0] = 0; //@line 33452
 HEAP8[$2 >> 0] = 0; //@line 33453
 HEAP8[$42 >> 0] = 0; //@line 33454
 HEAP8[$112 >> 0] = 0; //@line 33455
 HEAP8[$30 >> 0] = 0; //@line 33456
 HEAP8[$44 >> 0] = 0; //@line 33457
 HEAP8[$84 >> 0] = 0; //@line 33458
 HEAP8[$14 >> 0] = 0; //@line 33459
 HEAP8[$46 >> 0] = 0; //@line 33460
 HEAP8[$86 >> 0] = 0; //@line 33461
 HEAP8[$124 >> 0] = 0; //@line 33462
 HEAP8[$50 >> 0] = 0; //@line 33463
 HEAP8[$60 >> 0] = 0; //@line 33464
 HEAP8[$16 >> 0] = 0; //@line 33465
 HEAP8[$104 >> 0] = 0; //@line 33466
 HEAP8[$62 >> 0] = 0; //@line 33467
 $173 = $32 + 16 | 0; //@line 33468
 $174 = $32 + 32 | 0; //@line 33469
 $175 = HEAP32[$174 >> 2] | 0; //@line 33470
 if ($175 >>> 0 < $38 >>> 0) {
  $$013$i = 0; //@line 33473
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$32 + 16 + $$013$i >> 0] | 0; //@line 33479
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 33483
   }
   HEAP8[$48 + $$013$i >> 0] = $$sink$sink$i; //@line 33486
   $$013$i = $$013$i + 1 | 0; //@line 33487
  } while (($$013$i | 0) != ($38 | 0));
  $$09$i45 = 0; //@line 33490
  do {
   $183 = $48 + $$09$i45 | 0; //@line 33497
   HEAP8[$183 >> 0] = HEAP8[$58 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 33502
   $$09$i45 = $$09$i45 + 1 | 0; //@line 33503
  } while (($$09$i45 | 0) != ($38 | 0));
  label = 21; //@line 33506
 } else {
  if ($38 | 0) {
   $$09$i41 = 0; //@line 33515
   do {
    HEAP8[$48 + $$09$i41 >> 0] = HEAP8[$22 + $$09$i41 >> 0] ^ HEAP8[$32 + 16 + $$09$i41 >> 0]; //@line 33523
    $$09$i41 = $$09$i41 + 1 | 0; //@line 33524
   } while (($$09$i41 | 0) != ($38 | 0));
   label = 21; //@line 33527
  }
 }
 if ((label | 0) == 21) {
  if ($38 | 0) {
   $$09$i = 0; //@line 33538
   do {
    $200 = $32 + $$09$i | 0; //@line 33542
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$48 + $$09$i >> 0]; //@line 33545
    $$09$i = $$09$i + 1 | 0; //@line 33546
   } while (($$09$i | 0) != ($38 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 33556
 $204 = _mbedtls_cipher_update($64, $76, $38, $76, $40) | 0; //@line 33557
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 689; //@line 33560
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 33561
  HEAP32[$205 >> 2] = $4; //@line 33562
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 33563
  HEAP32[$206 >> 2] = $6; //@line 33564
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 33565
  HEAP32[$207 >> 2] = $8; //@line 33566
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 33567
  HEAP32[$208 >> 2] = $10; //@line 33568
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 33569
  HEAP32[$209 >> 2] = $12; //@line 33570
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 33571
  HEAP32[$210 >> 2] = $18; //@line 33572
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 33573
  HEAP32[$211 >> 2] = $24; //@line 33574
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 33575
  HEAP32[$212 >> 2] = $20; //@line 33576
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 33577
  HEAP32[$213 >> 2] = $174; //@line 33578
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 33579
  HEAP32[$214 >> 2] = $26; //@line 33580
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 33581
  HEAP32[$215 >> 2] = $28; //@line 33582
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 33583
  HEAP32[$216 >> 2] = $32; //@line 33584
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 33585
  HEAP32[$217 >> 2] = $36; //@line 33586
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 33587
  HEAP32[$218 >> 2] = $38; //@line 33588
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 33589
  HEAP32[$219 >> 2] = $52; //@line 33590
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 33591
  HEAP32[$220 >> 2] = $54; //@line 33592
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 33593
  HEAP32[$221 >> 2] = $66; //@line 33594
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 33595
  HEAP32[$222 >> 2] = $68; //@line 33596
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 33597
  HEAP32[$223 >> 2] = $70; //@line 33598
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 33599
  HEAP32[$224 >> 2] = $72; //@line 33600
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 33601
  HEAP32[$225 >> 2] = $74; //@line 33602
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 33603
  HEAP32[$226 >> 2] = $76; //@line 33604
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 33605
  HEAP32[$227 >> 2] = $78; //@line 33606
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 33607
  HEAP32[$228 >> 2] = $80; //@line 33608
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 33609
  HEAP32[$229 >> 2] = $82; //@line 33610
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 33611
  HEAP32[$230 >> 2] = $92; //@line 33612
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 33613
  HEAP32[$231 >> 2] = $96; //@line 33614
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 33615
  HEAP32[$232 >> 2] = $88; //@line 33616
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 33617
  HEAP32[$233 >> 2] = $94; //@line 33618
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 33619
  HEAP32[$234 >> 2] = $98; //@line 33620
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 33621
  HEAP32[$235 >> 2] = $100; //@line 33622
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 33623
  HEAP32[$236 >> 2] = $102; //@line 33624
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 33625
  HEAP32[$237 >> 2] = $173; //@line 33626
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 33627
  HEAP32[$238 >> 2] = $108; //@line 33628
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 33629
  HEAP32[$239 >> 2] = $110; //@line 33630
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 33631
  HEAP32[$240 >> 2] = $114; //@line 33632
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 33633
  HEAP32[$241 >> 2] = $116; //@line 33634
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 33635
  HEAP32[$242 >> 2] = $118; //@line 33636
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 33637
  HEAP32[$243 >> 2] = $120; //@line 33638
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 33639
  HEAP32[$244 >> 2] = $122; //@line 33640
  sp = STACKTOP; //@line 33641
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 33645
 ___async_unwind = 0; //@line 33646
 HEAP32[$ReallocAsyncCtx >> 2] = 689; //@line 33647
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 33648
 HEAP32[$205 >> 2] = $4; //@line 33649
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 33650
 HEAP32[$206 >> 2] = $6; //@line 33651
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 33652
 HEAP32[$207 >> 2] = $8; //@line 33653
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 33654
 HEAP32[$208 >> 2] = $10; //@line 33655
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 33656
 HEAP32[$209 >> 2] = $12; //@line 33657
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 33658
 HEAP32[$210 >> 2] = $18; //@line 33659
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 33660
 HEAP32[$211 >> 2] = $24; //@line 33661
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 33662
 HEAP32[$212 >> 2] = $20; //@line 33663
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 33664
 HEAP32[$213 >> 2] = $174; //@line 33665
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 33666
 HEAP32[$214 >> 2] = $26; //@line 33667
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 33668
 HEAP32[$215 >> 2] = $28; //@line 33669
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 33670
 HEAP32[$216 >> 2] = $32; //@line 33671
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 33672
 HEAP32[$217 >> 2] = $36; //@line 33673
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 33674
 HEAP32[$218 >> 2] = $38; //@line 33675
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 33676
 HEAP32[$219 >> 2] = $52; //@line 33677
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 33678
 HEAP32[$220 >> 2] = $54; //@line 33679
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 33680
 HEAP32[$221 >> 2] = $66; //@line 33681
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 33682
 HEAP32[$222 >> 2] = $68; //@line 33683
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 33684
 HEAP32[$223 >> 2] = $70; //@line 33685
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 33686
 HEAP32[$224 >> 2] = $72; //@line 33687
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 33688
 HEAP32[$225 >> 2] = $74; //@line 33689
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 33690
 HEAP32[$226 >> 2] = $76; //@line 33691
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 33692
 HEAP32[$227 >> 2] = $78; //@line 33693
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 33694
 HEAP32[$228 >> 2] = $80; //@line 33695
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 33696
 HEAP32[$229 >> 2] = $82; //@line 33697
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 33698
 HEAP32[$230 >> 2] = $92; //@line 33699
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 33700
 HEAP32[$231 >> 2] = $96; //@line 33701
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 33702
 HEAP32[$232 >> 2] = $88; //@line 33703
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 33704
 HEAP32[$233 >> 2] = $94; //@line 33705
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 33706
 HEAP32[$234 >> 2] = $98; //@line 33707
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 33708
 HEAP32[$235 >> 2] = $100; //@line 33709
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 33710
 HEAP32[$236 >> 2] = $102; //@line 33711
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 33712
 HEAP32[$237 >> 2] = $173; //@line 33713
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 33714
 HEAP32[$238 >> 2] = $108; //@line 33715
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 33716
 HEAP32[$239 >> 2] = $110; //@line 33717
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 33718
 HEAP32[$240 >> 2] = $114; //@line 33719
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 33720
 HEAP32[$241 >> 2] = $116; //@line 33721
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 33722
 HEAP32[$242 >> 2] = $118; //@line 33723
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 33724
 HEAP32[$243 >> 2] = $120; //@line 33725
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 33726
 HEAP32[$244 >> 2] = $122; //@line 33727
 sp = STACKTOP; //@line 33728
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $101 = 0, $121 = 0, $122 = 0, $125 = 0, $143 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $43 = 0, $46 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $67 = 0, $74 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx50 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 835
 STACKTOP = STACKTOP + 112 | 0; //@line 836
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 836
 $vararg_buffer19 = sp + 64 | 0; //@line 837
 $vararg_buffer17 = sp + 56 | 0; //@line 838
 $vararg_buffer14 = sp + 48 | 0; //@line 839
 $vararg_buffer11 = sp + 40 | 0; //@line 840
 $vararg_buffer9 = sp + 32 | 0; //@line 841
 $vararg_buffer6 = sp + 24 | 0; //@line 842
 $vararg_buffer4 = sp + 16 | 0; //@line 843
 $vararg_buffer1 = sp + 8 | 0; //@line 844
 $2 = sp + 88 | 0; //@line 846
 $3 = sp + 72 | 0; //@line 847
 _printf(10904, sp) | 0; //@line 848
 $4 = $0 + 783 | 0; //@line 849
 $6 = HEAPU8[$4 >> 0] | 0; //@line 851
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 852
 HEAP32[$vararg_buffer1 + 4 >> 2] = $6; //@line 854
 _printf(11264, $vararg_buffer1) | 0; //@line 855
 $AsyncCtx58 = _emscripten_alloc_async_context(80, sp) | 0; //@line 856
 _putchar(10) | 0; //@line 857
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 68; //@line 860
  HEAP32[$AsyncCtx58 + 4 >> 2] = $3; //@line 862
  HEAP32[$AsyncCtx58 + 8 >> 2] = $2; //@line 864
  HEAP32[$AsyncCtx58 + 12 >> 2] = $vararg_buffer9; //@line 866
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer9; //@line 868
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer11; //@line 870
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer11; //@line 872
  HEAP32[$AsyncCtx58 + 28 >> 2] = $0; //@line 874
  HEAP32[$AsyncCtx58 + 32 >> 2] = $vararg_buffer4; //@line 876
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer4; //@line 878
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer6; //@line 880
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer6; //@line 882
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer17; //@line 884
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer17; //@line 886
  HEAP32[$AsyncCtx58 + 56 >> 2] = $vararg_buffer19; //@line 888
  HEAP32[$AsyncCtx58 + 60 >> 2] = $vararg_buffer19; //@line 890
  HEAP32[$AsyncCtx58 + 64 >> 2] = $vararg_buffer14; //@line 892
  HEAP32[$AsyncCtx58 + 68 >> 2] = $vararg_buffer14; //@line 894
  HEAP32[$AsyncCtx58 + 72 >> 2] = $4; //@line 896
  HEAP32[$AsyncCtx58 + 76 >> 2] = $1; //@line 898
  sp = STACKTOP; //@line 899
  STACKTOP = sp; //@line 900
  return;
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 902
 HEAP8[$0 + 688 >> 0] = 1; //@line 904
 if (HEAP8[$4 >> 0] | 0) {
  HEAP8[$4 >> 0] = 0; //@line 908
  $29 = $0 + 1112 | 0; //@line 909
  $30 = $2 + 12 | 0; //@line 910
  HEAP32[$2 >> 2] = 69; //@line 911
  HEAP32[$2 + 4 >> 2] = 0; //@line 913
  HEAP32[$2 + 8 >> 2] = $0; //@line 915
  HEAP32[$30 >> 2] = 648; //@line 916
  $31 = $0 + 1152 | 0; //@line 917
  if (($31 | 0) != ($2 | 0)) {
   $33 = $0 + 1164 | 0; //@line 920
   $34 = HEAP32[$33 >> 2] | 0; //@line 921
   do {
    if ($34 | 0) {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 926
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 927
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 928
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 70; //@line 931
      HEAP32[$AsyncCtx + 4 >> 2] = $30; //@line 933
      HEAP32[$AsyncCtx + 8 >> 2] = $33; //@line 935
      HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 937
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 939
      HEAP32[$AsyncCtx + 20 >> 2] = $29; //@line 941
      sp = STACKTOP; //@line 942
      STACKTOP = sp; //@line 943
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 945
      break;
     }
    }
   } while (0);
   $43 = HEAP32[$30 >> 2] | 0; //@line 950
   do {
    if (!$43) {
     $51 = 0; //@line 954
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 957
     $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 958
     FUNCTION_TABLE_vii[$46 & 31]($31, $2); //@line 959
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 71; //@line 962
      HEAP32[$AsyncCtx23 + 4 >> 2] = $30; //@line 964
      HEAP32[$AsyncCtx23 + 8 >> 2] = $33; //@line 966
      HEAP32[$AsyncCtx23 + 12 >> 2] = $29; //@line 968
      HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 970
      sp = STACKTOP; //@line 971
      STACKTOP = sp; //@line 972
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 974
      $51 = HEAP32[$30 >> 2] | 0; //@line 976
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $51; //@line 981
  }
  __ZN4mbed6Ticker5setupEy($29, 2e5, 0); //@line 983
  $52 = HEAP32[$30 >> 2] | 0; //@line 984
  if (!$52) {
   STACKTOP = sp; //@line 987
   return;
  }
  $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 990
  $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 991
  FUNCTION_TABLE_vi[$55 & 1023]($2); //@line 992
  if (___async) {
   HEAP32[$AsyncCtx27 >> 2] = 72; //@line 995
   sp = STACKTOP; //@line 996
   STACKTOP = sp; //@line 997
   return;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 999
  STACKTOP = sp; //@line 1000
  return;
 }
 do {
  if ($1 | 0) {
   $57 = $0 + 1112 | 0; //@line 1005
   $58 = $3 + 12 | 0; //@line 1006
   HEAP32[$3 >> 2] = 73; //@line 1007
   HEAP32[$3 + 4 >> 2] = 0; //@line 1009
   HEAP32[$3 + 8 >> 2] = $0; //@line 1011
   HEAP32[$58 >> 2] = 648; //@line 1012
   $59 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 1013
   $60 = tempRet0; //@line 1014
   $61 = $0 + 1152 | 0; //@line 1015
   if (($61 | 0) != ($3 | 0)) {
    $63 = $0 + 1164 | 0; //@line 1018
    $64 = HEAP32[$63 >> 2] | 0; //@line 1019
    do {
     if ($64 | 0) {
      $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 1024
      $AsyncCtx31 = _emscripten_alloc_async_context(96, sp) | 0; //@line 1025
      FUNCTION_TABLE_vi[$67 & 1023]($61); //@line 1026
      if (___async) {
       HEAP32[$AsyncCtx31 >> 2] = 74; //@line 1029
       HEAP32[$AsyncCtx31 + 4 >> 2] = $63; //@line 1031
       HEAP32[$AsyncCtx31 + 8 >> 2] = $58; //@line 1033
       HEAP32[$AsyncCtx31 + 12 >> 2] = $61; //@line 1035
       HEAP32[$AsyncCtx31 + 16 >> 2] = $3; //@line 1037
       HEAP32[$AsyncCtx31 + 20 >> 2] = $57; //@line 1039
       $74 = $AsyncCtx31 + 24 | 0; //@line 1041
       HEAP32[$74 >> 2] = $59; //@line 1043
       HEAP32[$74 + 4 >> 2] = $60; //@line 1046
       HEAP32[$AsyncCtx31 + 32 >> 2] = $vararg_buffer9; //@line 1048
       HEAP32[$AsyncCtx31 + 36 >> 2] = $vararg_buffer9; //@line 1050
       HEAP32[$AsyncCtx31 + 40 >> 2] = $vararg_buffer11; //@line 1052
       HEAP32[$AsyncCtx31 + 44 >> 2] = $vararg_buffer11; //@line 1054
       HEAP32[$AsyncCtx31 + 48 >> 2] = $0; //@line 1056
       HEAP32[$AsyncCtx31 + 52 >> 2] = $vararg_buffer4; //@line 1058
       HEAP32[$AsyncCtx31 + 56 >> 2] = $vararg_buffer4; //@line 1060
       HEAP32[$AsyncCtx31 + 60 >> 2] = $vararg_buffer6; //@line 1062
       HEAP32[$AsyncCtx31 + 64 >> 2] = $vararg_buffer6; //@line 1064
       HEAP32[$AsyncCtx31 + 68 >> 2] = $vararg_buffer17; //@line 1066
       HEAP32[$AsyncCtx31 + 72 >> 2] = $vararg_buffer17; //@line 1068
       HEAP32[$AsyncCtx31 + 76 >> 2] = $vararg_buffer19; //@line 1070
       HEAP32[$AsyncCtx31 + 80 >> 2] = $vararg_buffer19; //@line 1072
       HEAP32[$AsyncCtx31 + 84 >> 2] = $vararg_buffer14; //@line 1074
       HEAP32[$AsyncCtx31 + 88 >> 2] = $vararg_buffer14; //@line 1076
       sp = STACKTOP; //@line 1077
       STACKTOP = sp; //@line 1078
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx31 | 0); //@line 1080
       break;
      }
     }
    } while (0);
    $93 = HEAP32[$58 >> 2] | 0; //@line 1085
    do {
     if (!$93) {
      $121 = 0; //@line 1089
     } else {
      $96 = HEAP32[$93 + 4 >> 2] | 0; //@line 1092
      $AsyncCtx34 = _emscripten_alloc_async_context(88, sp) | 0; //@line 1093
      FUNCTION_TABLE_vii[$96 & 31]($61, $3); //@line 1094
      if (___async) {
       HEAP32[$AsyncCtx34 >> 2] = 75; //@line 1097
       HEAP32[$AsyncCtx34 + 4 >> 2] = $63; //@line 1099
       HEAP32[$AsyncCtx34 + 8 >> 2] = $3; //@line 1101
       HEAP32[$AsyncCtx34 + 12 >> 2] = $57; //@line 1103
       $101 = $AsyncCtx34 + 16 | 0; //@line 1105
       HEAP32[$101 >> 2] = $59; //@line 1107
       HEAP32[$101 + 4 >> 2] = $60; //@line 1110
       HEAP32[$AsyncCtx34 + 24 >> 2] = $58; //@line 1112
       HEAP32[$AsyncCtx34 + 28 >> 2] = $vararg_buffer9; //@line 1114
       HEAP32[$AsyncCtx34 + 32 >> 2] = $vararg_buffer9; //@line 1116
       HEAP32[$AsyncCtx34 + 36 >> 2] = $vararg_buffer11; //@line 1118
       HEAP32[$AsyncCtx34 + 40 >> 2] = $vararg_buffer11; //@line 1120
       HEAP32[$AsyncCtx34 + 44 >> 2] = $0; //@line 1122
       HEAP32[$AsyncCtx34 + 48 >> 2] = $vararg_buffer4; //@line 1124
       HEAP32[$AsyncCtx34 + 52 >> 2] = $vararg_buffer4; //@line 1126
       HEAP32[$AsyncCtx34 + 56 >> 2] = $vararg_buffer6; //@line 1128
       HEAP32[$AsyncCtx34 + 60 >> 2] = $vararg_buffer6; //@line 1130
       HEAP32[$AsyncCtx34 + 64 >> 2] = $vararg_buffer17; //@line 1132
       HEAP32[$AsyncCtx34 + 68 >> 2] = $vararg_buffer17; //@line 1134
       HEAP32[$AsyncCtx34 + 72 >> 2] = $vararg_buffer19; //@line 1136
       HEAP32[$AsyncCtx34 + 76 >> 2] = $vararg_buffer19; //@line 1138
       HEAP32[$AsyncCtx34 + 80 >> 2] = $vararg_buffer14; //@line 1140
       HEAP32[$AsyncCtx34 + 84 >> 2] = $vararg_buffer14; //@line 1142
       sp = STACKTOP; //@line 1143
       STACKTOP = sp; //@line 1144
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1146
       $121 = HEAP32[$58 >> 2] | 0; //@line 1148
       break;
      }
     }
    } while (0);
    HEAP32[$63 >> 2] = $121; //@line 1153
   }
   __ZN4mbed6Ticker5setupEy($57, $59, $60); //@line 1155
   $122 = HEAP32[$58 >> 2] | 0; //@line 1156
   if ($122 | 0) {
    $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 1160
    $AsyncCtx38 = _emscripten_alloc_async_context(64, sp) | 0; //@line 1161
    FUNCTION_TABLE_vi[$125 & 1023]($3); //@line 1162
    if (___async) {
     HEAP32[$AsyncCtx38 >> 2] = 76; //@line 1165
     HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer9; //@line 1167
     HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer9; //@line 1169
     HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer11; //@line 1171
     HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer11; //@line 1173
     HEAP32[$AsyncCtx38 + 20 >> 2] = $0; //@line 1175
     HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer4; //@line 1177
     HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer4; //@line 1179
     HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer6; //@line 1181
     HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer6; //@line 1183
     HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer17; //@line 1185
     HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer17; //@line 1187
     HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer19; //@line 1189
     HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer19; //@line 1191
     HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer14; //@line 1193
     HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer14; //@line 1195
     sp = STACKTOP; //@line 1196
     STACKTOP = sp; //@line 1197
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1199
     break;
    }
   }
  }
 } while (0);
 $143 = (HEAP8[$0 + 770 >> 0] | 0) == 0; //@line 1207
 _printf(10904, $vararg_buffer4) | 0; //@line 1208
 if ($143) {
  HEAP32[$vararg_buffer14 >> 2] = 6; //@line 1210
  _printf(10970, $vararg_buffer14) | 0; //@line 1211
  $AsyncCtx46 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1212
  _putchar(10) | 0; //@line 1213
  if (___async) {
   HEAP32[$AsyncCtx46 >> 2] = 80; //@line 1216
   HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1218
   HEAP32[$AsyncCtx46 + 8 >> 2] = $vararg_buffer17; //@line 1220
   HEAP32[$AsyncCtx46 + 12 >> 2] = $vararg_buffer17; //@line 1222
   HEAP32[$AsyncCtx46 + 16 >> 2] = $vararg_buffer19; //@line 1224
   HEAP32[$AsyncCtx46 + 20 >> 2] = $vararg_buffer19; //@line 1226
   sp = STACKTOP; //@line 1227
   STACKTOP = sp; //@line 1228
   return;
  }
  _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1230
  $AsyncCtx61 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1231
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1232
  if (___async) {
   HEAP32[$AsyncCtx61 >> 2] = 81; //@line 1235
   HEAP32[$AsyncCtx61 + 4 >> 2] = $vararg_buffer17; //@line 1237
   HEAP32[$AsyncCtx61 + 8 >> 2] = $vararg_buffer17; //@line 1239
   HEAP32[$AsyncCtx61 + 12 >> 2] = $vararg_buffer19; //@line 1241
   HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer19; //@line 1243
   sp = STACKTOP; //@line 1244
   STACKTOP = sp; //@line 1245
   return;
  }
  _emscripten_free_async_context($AsyncCtx61 | 0); //@line 1247
  _printf(10904, $vararg_buffer17) | 0; //@line 1248
  HEAP32[$vararg_buffer19 >> 2] = 6; //@line 1249
  _printf(10999, $vararg_buffer19) | 0; //@line 1250
  $AsyncCtx42 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1251
  _putchar(10) | 0; //@line 1252
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 82; //@line 1255
   sp = STACKTOP; //@line 1256
   STACKTOP = sp; //@line 1257
   return;
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1259
  STACKTOP = sp; //@line 1260
  return;
 } else {
  HEAP32[$vararg_buffer6 >> 2] = 5; //@line 1262
  _printf(10970, $vararg_buffer6) | 0; //@line 1263
  $AsyncCtx54 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1264
  _putchar(10) | 0; //@line 1265
  if (___async) {
   HEAP32[$AsyncCtx54 >> 2] = 77; //@line 1268
   HEAP32[$AsyncCtx54 + 4 >> 2] = $0; //@line 1270
   HEAP32[$AsyncCtx54 + 8 >> 2] = $vararg_buffer9; //@line 1272
   HEAP32[$AsyncCtx54 + 12 >> 2] = $vararg_buffer9; //@line 1274
   HEAP32[$AsyncCtx54 + 16 >> 2] = $vararg_buffer11; //@line 1276
   HEAP32[$AsyncCtx54 + 20 >> 2] = $vararg_buffer11; //@line 1278
   sp = STACKTOP; //@line 1279
   STACKTOP = sp; //@line 1280
   return;
  }
  _emscripten_free_async_context($AsyncCtx54 | 0); //@line 1282
  $AsyncCtx64 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1283
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1284
  if (___async) {
   HEAP32[$AsyncCtx64 >> 2] = 78; //@line 1287
   HEAP32[$AsyncCtx64 + 4 >> 2] = $vararg_buffer9; //@line 1289
   HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer9; //@line 1291
   HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer11; //@line 1293
   HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer11; //@line 1295
   sp = STACKTOP; //@line 1296
   STACKTOP = sp; //@line 1297
   return;
  }
  _emscripten_free_async_context($AsyncCtx64 | 0); //@line 1299
  _printf(10904, $vararg_buffer9) | 0; //@line 1300
  HEAP32[$vararg_buffer11 >> 2] = 5; //@line 1301
  _printf(10999, $vararg_buffer11) | 0; //@line 1302
  $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1303
  _putchar(10) | 0; //@line 1304
  if (___async) {
   HEAP32[$AsyncCtx50 >> 2] = 79; //@line 1307
   sp = STACKTOP; //@line 1308
   STACKTOP = sp; //@line 1309
   return;
  }
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 1311
  STACKTOP = sp; //@line 1312
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_465($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $10 = 0, $100 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25509
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25511
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25513
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25515
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25517
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25519
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25521
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25523
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25525
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25527
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25529
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25531
 $$pre13 = HEAP8[$2 >> 0] | 0; //@line 25532
 if ($$pre13 & 8) {
  HEAP8[$2 >> 0] = $$pre13 & -9; //@line 25537
  $27 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25539
  $28 = $27 + 32 | 0; //@line 25540
  $30 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 25542
  $31 = $27 + 44 | 0; //@line 25543
  $32 = HEAP32[$31 >> 2] | 0; //@line 25544
  if (!$32) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 25547
   _mbed_assert_internal(15061, 15066, 1102); //@line 25548
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 25551
    $34 = $ReallocAsyncCtx17 + 4 | 0; //@line 25552
    HEAP32[$34 >> 2] = $2; //@line 25553
    $35 = $ReallocAsyncCtx17 + 8 | 0; //@line 25554
    HEAP32[$35 >> 2] = $4; //@line 25555
    $36 = $ReallocAsyncCtx17 + 12 | 0; //@line 25556
    HEAP32[$36 >> 2] = $31; //@line 25557
    $37 = $ReallocAsyncCtx17 + 16 | 0; //@line 25558
    HEAP32[$37 >> 2] = $6; //@line 25559
    $38 = $ReallocAsyncCtx17 + 20 | 0; //@line 25560
    HEAP32[$38 >> 2] = $8; //@line 25561
    $39 = $ReallocAsyncCtx17 + 24 | 0; //@line 25562
    HEAP32[$39 >> 2] = $10; //@line 25563
    $40 = $ReallocAsyncCtx17 + 28 | 0; //@line 25564
    HEAP32[$40 >> 2] = $12; //@line 25565
    $41 = $ReallocAsyncCtx17 + 32 | 0; //@line 25566
    HEAP32[$41 >> 2] = $14; //@line 25567
    $42 = $ReallocAsyncCtx17 + 36 | 0; //@line 25568
    HEAP32[$42 >> 2] = $16; //@line 25569
    $43 = $ReallocAsyncCtx17 + 40 | 0; //@line 25570
    HEAP32[$43 >> 2] = $18; //@line 25571
    $44 = $ReallocAsyncCtx17 + 44 | 0; //@line 25572
    HEAP32[$44 >> 2] = $20; //@line 25573
    $45 = $ReallocAsyncCtx17 + 48 | 0; //@line 25574
    HEAP32[$45 >> 2] = $22; //@line 25575
    $46 = $ReallocAsyncCtx17 + 52 | 0; //@line 25576
    HEAP32[$46 >> 2] = $28; //@line 25577
    $47 = $ReallocAsyncCtx17 + 56 | 0; //@line 25578
    HEAP32[$47 >> 2] = $30; //@line 25579
    sp = STACKTOP; //@line 25580
    return;
   }
   ___async_unwind = 0; //@line 25583
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 25584
   $34 = $ReallocAsyncCtx17 + 4 | 0; //@line 25585
   HEAP32[$34 >> 2] = $2; //@line 25586
   $35 = $ReallocAsyncCtx17 + 8 | 0; //@line 25587
   HEAP32[$35 >> 2] = $4; //@line 25588
   $36 = $ReallocAsyncCtx17 + 12 | 0; //@line 25589
   HEAP32[$36 >> 2] = $31; //@line 25590
   $37 = $ReallocAsyncCtx17 + 16 | 0; //@line 25591
   HEAP32[$37 >> 2] = $6; //@line 25592
   $38 = $ReallocAsyncCtx17 + 20 | 0; //@line 25593
   HEAP32[$38 >> 2] = $8; //@line 25594
   $39 = $ReallocAsyncCtx17 + 24 | 0; //@line 25595
   HEAP32[$39 >> 2] = $10; //@line 25596
   $40 = $ReallocAsyncCtx17 + 28 | 0; //@line 25597
   HEAP32[$40 >> 2] = $12; //@line 25598
   $41 = $ReallocAsyncCtx17 + 32 | 0; //@line 25599
   HEAP32[$41 >> 2] = $14; //@line 25600
   $42 = $ReallocAsyncCtx17 + 36 | 0; //@line 25601
   HEAP32[$42 >> 2] = $16; //@line 25602
   $43 = $ReallocAsyncCtx17 + 40 | 0; //@line 25603
   HEAP32[$43 >> 2] = $18; //@line 25604
   $44 = $ReallocAsyncCtx17 + 44 | 0; //@line 25605
   HEAP32[$44 >> 2] = $20; //@line 25606
   $45 = $ReallocAsyncCtx17 + 48 | 0; //@line 25607
   HEAP32[$45 >> 2] = $22; //@line 25608
   $46 = $ReallocAsyncCtx17 + 52 | 0; //@line 25609
   HEAP32[$46 >> 2] = $28; //@line 25610
   $47 = $ReallocAsyncCtx17 + 56 | 0; //@line 25611
   HEAP32[$47 >> 2] = $30; //@line 25612
   sp = STACKTOP; //@line 25613
   return;
  } else {
   $48 = HEAP32[$32 >> 2] | 0; //@line 25616
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 25617
   FUNCTION_TABLE_vii[$48 & 31]($28, $30); //@line 25618
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 25621
    $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 25622
    HEAP32[$49 >> 2] = $2; //@line 25623
    $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 25624
    HEAP32[$50 >> 2] = $4; //@line 25625
    $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 25626
    HEAP32[$51 >> 2] = $6; //@line 25627
    $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 25628
    HEAP32[$52 >> 2] = $8; //@line 25629
    $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 25630
    HEAP32[$53 >> 2] = $10; //@line 25631
    $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 25632
    HEAP32[$54 >> 2] = $12; //@line 25633
    $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 25634
    HEAP32[$55 >> 2] = $14; //@line 25635
    $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 25636
    HEAP32[$56 >> 2] = $16; //@line 25637
    $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 25638
    HEAP32[$57 >> 2] = $18; //@line 25639
    $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 25640
    HEAP32[$58 >> 2] = $20; //@line 25641
    $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 25642
    HEAP32[$59 >> 2] = $22; //@line 25643
    sp = STACKTOP; //@line 25644
    return;
   }
   ___async_unwind = 0; //@line 25647
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 25648
   $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 25649
   HEAP32[$49 >> 2] = $2; //@line 25650
   $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 25651
   HEAP32[$50 >> 2] = $4; //@line 25652
   $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 25653
   HEAP32[$51 >> 2] = $6; //@line 25654
   $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 25655
   HEAP32[$52 >> 2] = $8; //@line 25656
   $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 25657
   HEAP32[$53 >> 2] = $10; //@line 25658
   $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 25659
   HEAP32[$54 >> 2] = $12; //@line 25660
   $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 25661
   HEAP32[$55 >> 2] = $14; //@line 25662
   $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 25663
   HEAP32[$56 >> 2] = $16; //@line 25664
   $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 25665
   HEAP32[$57 >> 2] = $18; //@line 25666
   $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 25667
   HEAP32[$58 >> 2] = $20; //@line 25668
   $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 25669
   HEAP32[$59 >> 2] = $22; //@line 25670
   sp = STACKTOP; //@line 25671
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $16) | 0; //@line 25678
  _printf(13114, $20) | 0; //@line 25679
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 25680
  _putchar(10) | 0; //@line 25681
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 25684
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 25685
   HEAP32[$62 >> 2] = $2; //@line 25686
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 25687
   HEAP32[$63 >> 2] = $4; //@line 25688
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 25689
   HEAP32[$64 >> 2] = $6; //@line 25690
   $65 = $ReallocAsyncCtx7 + 16 | 0; //@line 25691
   HEAP32[$65 >> 2] = $8; //@line 25692
   $66 = $ReallocAsyncCtx7 + 20 | 0; //@line 25693
   HEAP32[$66 >> 2] = $10; //@line 25694
   $67 = $ReallocAsyncCtx7 + 24 | 0; //@line 25695
   HEAP32[$67 >> 2] = $12; //@line 25696
   $68 = $ReallocAsyncCtx7 + 28 | 0; //@line 25697
   HEAP32[$68 >> 2] = $14; //@line 25698
   sp = STACKTOP; //@line 25699
   return;
  }
  ___async_unwind = 0; //@line 25702
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 25703
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 25704
  HEAP32[$62 >> 2] = $2; //@line 25705
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 25706
  HEAP32[$63 >> 2] = $4; //@line 25707
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 25708
  HEAP32[$64 >> 2] = $6; //@line 25709
  $65 = $ReallocAsyncCtx7 + 16 | 0; //@line 25710
  HEAP32[$65 >> 2] = $8; //@line 25711
  $66 = $ReallocAsyncCtx7 + 20 | 0; //@line 25712
  HEAP32[$66 >> 2] = $10; //@line 25713
  $67 = $ReallocAsyncCtx7 + 24 | 0; //@line 25714
  HEAP32[$67 >> 2] = $12; //@line 25715
  $68 = $ReallocAsyncCtx7 + 28 | 0; //@line 25716
  HEAP32[$68 >> 2] = $14; //@line 25717
  sp = STACKTOP; //@line 25718
  return;
 }
 $69 = HEAP8[$2 >> 0] & -33; //@line 25722
 HEAP8[$2 >> 0] = $69; //@line 25723
 do {
  if (!($69 & 2)) {
   $100 = $69; //@line 25728
  } else {
   $72 = $69 & -3; //@line 25730
   HEAP8[$2 >> 0] = $72; //@line 25731
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $8) | 0; //@line 25736
    _printf(12994, $12) | 0; //@line 25737
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25738
    _putchar(10) | 0; //@line 25739
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 25742
     $76 = $ReallocAsyncCtx6 + 4 | 0; //@line 25743
     HEAP32[$76 >> 2] = $2; //@line 25744
     $77 = $ReallocAsyncCtx6 + 8 | 0; //@line 25745
     HEAP32[$77 >> 2] = $4; //@line 25746
     $78 = $ReallocAsyncCtx6 + 12 | 0; //@line 25747
     HEAP32[$78 >> 2] = $6; //@line 25748
     $79 = $ReallocAsyncCtx6 + 16 | 0; //@line 25749
     HEAP32[$79 >> 2] = $6; //@line 25750
     sp = STACKTOP; //@line 25751
     return;
    }
    ___async_unwind = 0; //@line 25754
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 25755
    $76 = $ReallocAsyncCtx6 + 4 | 0; //@line 25756
    HEAP32[$76 >> 2] = $2; //@line 25757
    $77 = $ReallocAsyncCtx6 + 8 | 0; //@line 25758
    HEAP32[$77 >> 2] = $4; //@line 25759
    $78 = $ReallocAsyncCtx6 + 12 | 0; //@line 25760
    HEAP32[$78 >> 2] = $6; //@line 25761
    $79 = $ReallocAsyncCtx6 + 16 | 0; //@line 25762
    HEAP32[$79 >> 2] = $6; //@line 25763
    sp = STACKTOP; //@line 25764
    return;
   }
   if ($72 & 4) {
    $98 = $72 & -5; //@line 25770
    HEAP8[$2 >> 0] = $98; //@line 25771
    $100 = $98; //@line 25772
    break;
   }
   $83 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25776
   $84 = $83 + 16 | 0; //@line 25777
   $86 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 25779
   $87 = $83 + 28 | 0; //@line 25780
   $88 = HEAP32[$87 >> 2] | 0; //@line 25781
   if (!$88) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 25784
    _mbed_assert_internal(15061, 15066, 1102); //@line 25785
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 25788
     $90 = $ReallocAsyncCtx15 + 4 | 0; //@line 25789
     HEAP32[$90 >> 2] = $87; //@line 25790
     $91 = $ReallocAsyncCtx15 + 8 | 0; //@line 25791
     HEAP32[$91 >> 2] = $84; //@line 25792
     $92 = $ReallocAsyncCtx15 + 12 | 0; //@line 25793
     HEAP32[$92 >> 2] = $86; //@line 25794
     $93 = $ReallocAsyncCtx15 + 16 | 0; //@line 25795
     HEAP32[$93 >> 2] = $2; //@line 25796
     $94 = $ReallocAsyncCtx15 + 20 | 0; //@line 25797
     HEAP32[$94 >> 2] = $4; //@line 25798
     sp = STACKTOP; //@line 25799
     return;
    }
    ___async_unwind = 0; //@line 25802
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 25803
    $90 = $ReallocAsyncCtx15 + 4 | 0; //@line 25804
    HEAP32[$90 >> 2] = $87; //@line 25805
    $91 = $ReallocAsyncCtx15 + 8 | 0; //@line 25806
    HEAP32[$91 >> 2] = $84; //@line 25807
    $92 = $ReallocAsyncCtx15 + 12 | 0; //@line 25808
    HEAP32[$92 >> 2] = $86; //@line 25809
    $93 = $ReallocAsyncCtx15 + 16 | 0; //@line 25810
    HEAP32[$93 >> 2] = $2; //@line 25811
    $94 = $ReallocAsyncCtx15 + 20 | 0; //@line 25812
    HEAP32[$94 >> 2] = $4; //@line 25813
    sp = STACKTOP; //@line 25814
    return;
   } else {
    $95 = HEAP32[$88 >> 2] | 0; //@line 25817
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25818
    FUNCTION_TABLE_vii[$95 & 31]($84, $86); //@line 25819
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 25822
     $96 = $ReallocAsyncCtx4 + 4 | 0; //@line 25823
     HEAP32[$96 >> 2] = $2; //@line 25824
     $97 = $ReallocAsyncCtx4 + 8 | 0; //@line 25825
     HEAP32[$97 >> 2] = $4; //@line 25826
     sp = STACKTOP; //@line 25827
     return;
    }
    ___async_unwind = 0; //@line 25830
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 25831
    $96 = $ReallocAsyncCtx4 + 4 | 0; //@line 25832
    HEAP32[$96 >> 2] = $2; //@line 25833
    $97 = $ReallocAsyncCtx4 + 8 | 0; //@line 25834
    HEAP32[$97 >> 2] = $4; //@line 25835
    sp = STACKTOP; //@line 25836
    return;
   }
  }
 } while (0);
 if (!($100 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $100 & -17; //@line 25847
 $104 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25849
 $105 = $104 + 48 | 0; //@line 25850
 $107 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 25852
 $108 = $104 + 60 | 0; //@line 25853
 $109 = HEAP32[$108 >> 2] | 0; //@line 25854
 if (!$109) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25857
  _mbed_assert_internal(15061, 15066, 1102); //@line 25858
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 25861
   $111 = $ReallocAsyncCtx14 + 4 | 0; //@line 25862
   HEAP32[$111 >> 2] = $108; //@line 25863
   $112 = $ReallocAsyncCtx14 + 8 | 0; //@line 25864
   HEAP32[$112 >> 2] = $105; //@line 25865
   $113 = $ReallocAsyncCtx14 + 12 | 0; //@line 25866
   HEAP32[$113 >> 2] = $107; //@line 25867
   sp = STACKTOP; //@line 25868
   return;
  }
  ___async_unwind = 0; //@line 25871
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 25872
  $111 = $ReallocAsyncCtx14 + 4 | 0; //@line 25873
  HEAP32[$111 >> 2] = $108; //@line 25874
  $112 = $ReallocAsyncCtx14 + 8 | 0; //@line 25875
  HEAP32[$112 >> 2] = $105; //@line 25876
  $113 = $ReallocAsyncCtx14 + 12 | 0; //@line 25877
  HEAP32[$113 >> 2] = $107; //@line 25878
  sp = STACKTOP; //@line 25879
  return;
 } else {
  $114 = HEAP32[$109 >> 2] | 0; //@line 25882
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25883
  FUNCTION_TABLE_vii[$114 & 31]($105, $107); //@line 25884
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 25887
   sp = STACKTOP; //@line 25888
   return;
  }
  ___async_unwind = 0; //@line 25891
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 25892
  sp = STACKTOP; //@line 25893
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $$05$i = 0, $$06$i = 0, $100 = 0, $108 = 0, $111 = 0, $117 = 0, $119 = 0, $126 = 0, $129 = 0, $134 = 0, $136 = 0, $142 = 0, $145 = 0, $149 = 0, $151 = 0, $156 = 0, $159 = 0, $17 = 0, $39 = 0, $4 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $61 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $88 = 0, $91 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17751
 STACKTOP = STACKTOP + 80 | 0; //@line 17752
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 17752
 $4 = sp + 64 | 0; //@line 17753
 $5 = sp + 48 | 0; //@line 17754
 $6 = sp + 32 | 0; //@line 17755
 $7 = sp + 16 | 0; //@line 17756
 $8 = sp; //@line 17757
 HEAP32[$0 + 1328 >> 2] = $3; //@line 17759
 if (!$1) {
  $$016 = -1003; //@line 17762
  STACKTOP = sp; //@line 17763
  return $$016 | 0; //@line 17763
 }
 HEAP32[$0 >> 2] = $2; //@line 17765
 __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0 + 264 | 0, $2); //@line 17767
 __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0 + 348 | 0, HEAP32[$0 >> 2] | 0); //@line 17770
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 352 | 0, HEAP32[$0 >> 2] | 0); //@line 17773
 HEAP32[$0 + 1324 >> 2] = $1; //@line 17775
 $17 = $0 + 360 | 0; //@line 17776
 HEAP8[$0 + 944 >> 0] = 0; //@line 17778
 HEAP32[$17 >> 2] = 0; //@line 17779
 HEAP32[$0 + 968 >> 2] = 0; //@line 17781
 HEAP8[$0 + 897 >> 0] = 0; //@line 17783
 HEAP8[$0 + 896 >> 0] = 1; //@line 17785
 HEAP8[$0 + 369 >> 0] = 0; //@line 17787
 HEAP32[$0 + 980 >> 2] = 0; //@line 17789
 HEAP32[$0 + 984 >> 2] = 0; //@line 17791
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 1); //@line 17793
 HEAP32[$0 + 1100 >> 2] = 10; //@line 17795
 HEAP8[$0 + 1104 >> 0] = 6; //@line 17797
 HEAP8[$0 + 1128 >> 0] = 1; //@line 17799
 HEAP8[$0 + 372 >> 0] = 0; //@line 17801
 HEAP32[$0 + 956 >> 2] = 0; //@line 17803
 HEAP32[$0 + 960 >> 2] = 0; //@line 17805
 HEAP32[$0 + 964 >> 2] = 0; //@line 17807
 HEAP8[$0 + 380 >> 0] = 0; //@line 17809
 HEAP8[$0 + 894 >> 0] = 1; //@line 17811
 HEAP8[$0 + 895 >> 0] = 1; //@line 17813
 HEAP8[$0 + 377 >> 0] = 0; //@line 17815
 HEAP8[$0 + 1152 >> 0] = 0; //@line 17817
 HEAP16[$0 + 1154 >> 1] = 1; //@line 17819
 $39 = $0 + 4 | 0; //@line 17820
 __ZN14LoRaMacCommand20clear_command_bufferEv($39); //@line 17821
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($39); //@line 17822
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($39); //@line 17823
 HEAP8[$0 + 371 >> 0] = 1; //@line 17825
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 0); //@line 17827
 HEAP8[$0 + 373 >> 0] = 0; //@line 17829
 HEAP8[$0 + 374 >> 0] = 0; //@line 17831
 $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 17833
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 17836
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 17839
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 17841
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 378 >> 0] = 0; //@line 17851
 HEAP8[$0 + 379 >> 0] = 0; //@line 17853
 $51 = HEAP32[$0 >> 2] | 0; //@line 17854
 $AsyncCtx34 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17855
 $52 = __ZN7LoRaPHY13get_radio_rngEv($51) | 0; //@line 17856
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 520; //@line 17859
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 17861
  HEAP32[$AsyncCtx34 + 8 >> 2] = $8; //@line 17863
  HEAP32[$AsyncCtx34 + 12 >> 2] = $4; //@line 17865
  HEAP32[$AsyncCtx34 + 16 >> 2] = $5; //@line 17867
  HEAP32[$AsyncCtx34 + 20 >> 2] = $6; //@line 17869
  HEAP32[$AsyncCtx34 + 24 >> 2] = $7; //@line 17871
  HEAP32[$AsyncCtx34 + 28 >> 2] = $0; //@line 17873
  sp = STACKTOP; //@line 17874
  STACKTOP = sp; //@line 17875
  return 0; //@line 17875
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 17877
 _srand($52); //@line 17878
 HEAP8[$0 + 368 >> 0] = 1; //@line 17880
 $61 = HEAP32[$0 >> 2] | 0; //@line 17881
 $AsyncCtx37 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17882
 __ZN7LoRaPHY25setup_public_network_modeEb($61, 1); //@line 17883
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 521; //@line 17886
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 17888
  HEAP32[$AsyncCtx37 + 8 >> 2] = $8; //@line 17890
  HEAP32[$AsyncCtx37 + 12 >> 2] = $4; //@line 17892
  HEAP32[$AsyncCtx37 + 16 >> 2] = $5; //@line 17894
  HEAP32[$AsyncCtx37 + 20 >> 2] = $6; //@line 17896
  HEAP32[$AsyncCtx37 + 24 >> 2] = $7; //@line 17898
  HEAP32[$AsyncCtx37 + 28 >> 2] = $0; //@line 17900
  sp = STACKTOP; //@line 17901
  STACKTOP = sp; //@line 17902
  return 0; //@line 17902
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 17904
 $69 = HEAP32[$0 >> 2] | 0; //@line 17905
 $AsyncCtx40 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17906
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 17907
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 522; //@line 17910
  HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 17912
  HEAP32[$AsyncCtx40 + 8 >> 2] = $8; //@line 17914
  HEAP32[$AsyncCtx40 + 12 >> 2] = $4; //@line 17916
  HEAP32[$AsyncCtx40 + 16 >> 2] = $5; //@line 17918
  HEAP32[$AsyncCtx40 + 20 >> 2] = $6; //@line 17920
  HEAP32[$AsyncCtx40 + 24 >> 2] = $7; //@line 17922
  sp = STACKTOP; //@line 17923
  STACKTOP = sp; //@line 17924
  return 0; //@line 17924
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 17926
 $76 = $0 + 356 | 0; //@line 17927
 $77 = HEAP32[$76 >> 2] | 0; //@line 17928
 $79 = $4 + 12 | 0; //@line 17930
 HEAP32[$4 >> 2] = 523; //@line 17931
 HEAP32[$4 + 4 >> 2] = 0; //@line 17933
 HEAP32[$4 + 8 >> 2] = $0; //@line 17935
 HEAP32[$79 >> 2] = 848; //@line 17936
 $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17937
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($77, $0 + 996 | 0, $4); //@line 17938
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 524; //@line 17941
  HEAP32[$AsyncCtx30 + 4 >> 2] = $76; //@line 17943
  HEAP32[$AsyncCtx30 + 8 >> 2] = $0; //@line 17945
  HEAP32[$AsyncCtx30 + 12 >> 2] = $8; //@line 17947
  HEAP32[$AsyncCtx30 + 16 >> 2] = $4; //@line 17949
  HEAP32[$AsyncCtx30 + 20 >> 2] = $5; //@line 17951
  HEAP32[$AsyncCtx30 + 24 >> 2] = $6; //@line 17953
  HEAP32[$AsyncCtx30 + 28 >> 2] = $7; //@line 17955
  HEAP32[$AsyncCtx30 + 32 >> 2] = $79; //@line 17957
  sp = STACKTOP; //@line 17958
  STACKTOP = sp; //@line 17959
  return 0; //@line 17959
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 17961
 $88 = HEAP32[$79 >> 2] | 0; //@line 17962
 do {
  if ($88 | 0) {
   $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 17967
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17968
   FUNCTION_TABLE_vi[$91 & 1023]($4); //@line 17969
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 525; //@line 17972
    HEAP32[$AsyncCtx + 4 >> 2] = $76; //@line 17974
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 17976
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 17978
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 17980
    HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 17982
    HEAP32[$AsyncCtx + 24 >> 2] = $8; //@line 17984
    sp = STACKTOP; //@line 17985
    STACKTOP = sp; //@line 17986
    return 0; //@line 17986
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17988
    break;
   }
  }
 } while (0);
 $98 = HEAP32[$76 >> 2] | 0; //@line 17993
 $100 = $5 + 12 | 0; //@line 17995
 HEAP32[$5 >> 2] = 526; //@line 17996
 HEAP32[$5 + 4 >> 2] = 0; //@line 17998
 HEAP32[$5 + 8 >> 2] = $0; //@line 18000
 HEAP32[$100 >> 2] = 848; //@line 18001
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18002
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($98, $0 + 1016 | 0, $5); //@line 18003
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 527; //@line 18006
  HEAP32[$AsyncCtx27 + 4 >> 2] = $76; //@line 18008
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 18010
  HEAP32[$AsyncCtx27 + 12 >> 2] = $8; //@line 18012
  HEAP32[$AsyncCtx27 + 16 >> 2] = $7; //@line 18014
  HEAP32[$AsyncCtx27 + 20 >> 2] = $6; //@line 18016
  HEAP32[$AsyncCtx27 + 24 >> 2] = $100; //@line 18018
  HEAP32[$AsyncCtx27 + 28 >> 2] = $5; //@line 18020
  sp = STACKTOP; //@line 18021
  STACKTOP = sp; //@line 18022
  return 0; //@line 18022
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 18024
 $108 = HEAP32[$100 >> 2] | 0; //@line 18025
 do {
  if ($108 | 0) {
   $111 = HEAP32[$108 + 8 >> 2] | 0; //@line 18030
   $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18031
   FUNCTION_TABLE_vi[$111 & 1023]($5); //@line 18032
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 528; //@line 18035
    HEAP32[$AsyncCtx3 + 4 >> 2] = $76; //@line 18037
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 18039
    HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 18041
    HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 18043
    HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 18045
    sp = STACKTOP; //@line 18046
    STACKTOP = sp; //@line 18047
    return 0; //@line 18047
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18049
    break;
   }
  }
 } while (0);
 $117 = HEAP32[$76 >> 2] | 0; //@line 18054
 $119 = $6 + 12 | 0; //@line 18056
 HEAP32[$6 >> 2] = 529; //@line 18057
 HEAP32[$6 + 4 >> 2] = 0; //@line 18059
 HEAP32[$6 + 8 >> 2] = $0; //@line 18061
 HEAP32[$119 >> 2] = 848; //@line 18062
 $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18063
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($117, $0 + 1036 | 0, $6); //@line 18064
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 530; //@line 18067
  HEAP32[$AsyncCtx24 + 4 >> 2] = $76; //@line 18069
  HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 18071
  HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 18073
  HEAP32[$AsyncCtx24 + 16 >> 2] = $7; //@line 18075
  HEAP32[$AsyncCtx24 + 20 >> 2] = $6; //@line 18077
  HEAP32[$AsyncCtx24 + 24 >> 2] = $119; //@line 18079
  sp = STACKTOP; //@line 18080
  STACKTOP = sp; //@line 18081
  return 0; //@line 18081
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 18083
 $126 = HEAP32[$119 >> 2] | 0; //@line 18084
 do {
  if ($126 | 0) {
   $129 = HEAP32[$126 + 8 >> 2] | 0; //@line 18089
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18090
   FUNCTION_TABLE_vi[$129 & 1023]($6); //@line 18091
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 531; //@line 18094
    HEAP32[$AsyncCtx7 + 4 >> 2] = $76; //@line 18096
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 18098
    HEAP32[$AsyncCtx7 + 12 >> 2] = $7; //@line 18100
    HEAP32[$AsyncCtx7 + 16 >> 2] = $8; //@line 18102
    sp = STACKTOP; //@line 18103
    STACKTOP = sp; //@line 18104
    return 0; //@line 18104
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18106
    break;
   }
  }
 } while (0);
 $134 = HEAP32[$76 >> 2] | 0; //@line 18111
 $136 = $7 + 12 | 0; //@line 18113
 HEAP32[$7 >> 2] = 532; //@line 18114
 HEAP32[$7 + 4 >> 2] = 0; //@line 18116
 HEAP32[$7 + 8 >> 2] = $0; //@line 18118
 HEAP32[$136 >> 2] = 848; //@line 18119
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18120
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($134, $0 + 1056 | 0, $7); //@line 18121
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 533; //@line 18124
  HEAP32[$AsyncCtx21 + 4 >> 2] = $136; //@line 18126
  HEAP32[$AsyncCtx21 + 8 >> 2] = $76; //@line 18128
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 18130
  HEAP32[$AsyncCtx21 + 16 >> 2] = $8; //@line 18132
  HEAP32[$AsyncCtx21 + 20 >> 2] = $7; //@line 18134
  sp = STACKTOP; //@line 18135
  STACKTOP = sp; //@line 18136
  return 0; //@line 18136
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 18138
 $142 = HEAP32[$136 >> 2] | 0; //@line 18139
 do {
  if ($142 | 0) {
   $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 18144
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18145
   FUNCTION_TABLE_vi[$145 & 1023]($7); //@line 18146
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 534; //@line 18149
    HEAP32[$AsyncCtx11 + 4 >> 2] = $76; //@line 18151
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 18153
    HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 18155
    sp = STACKTOP; //@line 18156
    STACKTOP = sp; //@line 18157
    return 0; //@line 18157
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18159
    break;
   }
  }
 } while (0);
 $149 = HEAP32[$76 >> 2] | 0; //@line 18164
 $151 = $8 + 12 | 0; //@line 18166
 HEAP32[$8 >> 2] = 535; //@line 18167
 HEAP32[$8 + 4 >> 2] = 0; //@line 18169
 HEAP32[$8 + 8 >> 2] = $0; //@line 18171
 HEAP32[$151 >> 2] = 848; //@line 18172
 $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18173
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($149, $0 + 1076 | 0, $8); //@line 18174
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 536; //@line 18177
  HEAP32[$AsyncCtx18 + 4 >> 2] = $151; //@line 18179
  HEAP32[$AsyncCtx18 + 8 >> 2] = $76; //@line 18181
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 18183
  HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 18185
  sp = STACKTOP; //@line 18186
  STACKTOP = sp; //@line 18187
  return 0; //@line 18187
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 18189
 $156 = HEAP32[$151 >> 2] | 0; //@line 18190
 do {
  if ($156 | 0) {
   $159 = HEAP32[$156 + 8 >> 2] | 0; //@line 18195
   $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18196
   FUNCTION_TABLE_vi[$159 & 1023]($8); //@line 18197
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 537; //@line 18200
    HEAP32[$AsyncCtx15 + 4 >> 2] = $76; //@line 18202
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 18204
    sp = STACKTOP; //@line 18205
    STACKTOP = sp; //@line 18206
    return 0; //@line 18206
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18208
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$76 >> 2] | 0) | 0; //@line 18216
 $$016 = 0; //@line 18217
 STACKTOP = sp; //@line 18218
 return $$016 | 0; //@line 18218
}
function _equeue_dispatch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$065 = 0, $$06790 = 0, $$2 = 0, $$idx = 0, $$sink$in$i$i = 0, $$sroa$0$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = 0, $10 = 0, $103 = 0, $11 = 0, $12 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $141 = 0, $142 = 0, $144 = 0, $147 = 0, $149 = 0, $152 = 0, $155 = 0, $162 = 0, $166 = 0, $169 = 0, $175 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 5062
 STACKTOP = STACKTOP + 16 | 0; //@line 5063
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5063
 $$sroa$0$i = sp; //@line 5064
 $2 = _equeue_tick() | 0; //@line 5065
 $3 = $2 + $1 | 0; //@line 5066
 $4 = $0 + 36 | 0; //@line 5067
 HEAP8[$4 >> 0] = 0; //@line 5068
 $5 = $0 + 128 | 0; //@line 5069
 $6 = $0 + 9 | 0; //@line 5070
 $7 = $0 + 4 | 0; //@line 5071
 $8 = ($1 | 0) > -1; //@line 5072
 $9 = $0 + 48 | 0; //@line 5073
 $10 = $0 + 8 | 0; //@line 5074
 $$idx = $0 + 16 | 0; //@line 5075
 $11 = $0 + 156 | 0; //@line 5076
 $12 = $0 + 24 | 0; //@line 5077
 $$0 = $2; //@line 5078
 L1 : while (1) {
  _equeue_mutex_lock($5); //@line 5080
  HEAP8[$6 >> 0] = (HEAPU8[$6 >> 0] | 0) + 1; //@line 5085
  if (((HEAP32[$7 >> 2] | 0) - $$0 | 0) < 1) {
   HEAP32[$7 >> 2] = $$0; //@line 5090
  }
  $20 = HEAP32[$0 >> 2] | 0; //@line 5092
  HEAP32[$$sroa$0$i >> 2] = $20; //@line 5093
  $21 = $20; //@line 5094
  L6 : do {
   if (!$20) {
    $$04055$i = $$sroa$0$i; //@line 5098
    $30 = $21; //@line 5098
    label = 8; //@line 5099
   } else {
    $$04063$i = $$sroa$0$i; //@line 5101
    $24 = $21; //@line 5101
    do {
     if (((HEAP32[$24 + 20 >> 2] | 0) - $$0 | 0) >= 1) {
      $$04055$i = $$04063$i; //@line 5108
      $30 = $24; //@line 5108
      label = 8; //@line 5109
      break L6;
     }
     $$04063$i = $24 + 8 | 0; //@line 5112
     $24 = HEAP32[$$04063$i >> 2] | 0; //@line 5113
    } while (($24 | 0) != 0);
    HEAP32[$0 >> 2] = 0; //@line 5121
    $$0405571$i = $$04063$i; //@line 5122
   }
  } while (0);
  if ((label | 0) == 8) {
   label = 0; //@line 5126
   HEAP32[$0 >> 2] = $30; //@line 5127
   if (!$30) {
    $$0405571$i = $$04055$i; //@line 5130
   } else {
    HEAP32[$30 + 16 >> 2] = $0; //@line 5133
    $$0405571$i = $$04055$i; //@line 5134
   }
  }
  HEAP32[$$0405571$i >> 2] = 0; //@line 5137
  _equeue_mutex_unlock($5); //@line 5138
  $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 5139
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72; //@line 5143
   $$04258$i = $$sroa$0$i; //@line 5143
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 5145
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 5146
    $$03956$i = 0; //@line 5147
    $$057$i = $$04159$i$looptemp; //@line 5147
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 5150
     $39 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 5152
     if (!$39) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 5157
      $$057$i = $39; //@line 5157
      $$03956$i = $$03956$i$phi; //@line 5157
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 5160
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 5168
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 | 0) {
    $$06790 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73; //@line 5171
    while (1) {
     $42 = $$06790 + 8 | 0; //@line 5173
     $43 = HEAP32[$42 >> 2] | 0; //@line 5174
     $45 = HEAP32[$$06790 + 32 >> 2] | 0; //@line 5176
     if ($45 | 0) {
      $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 5180
      FUNCTION_TABLE_vi[$45 & 1023]($$06790 + 36 | 0); //@line 5181
      if (___async) {
       label = 18; //@line 5184
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 5187
     }
     $69 = HEAP32[$$06790 + 24 >> 2] | 0; //@line 5190
     if (($69 | 0) > -1) {
      $71 = $$06790 + 20 | 0; //@line 5193
      HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + $69; //@line 5196
      $74 = _equeue_tick() | 0; //@line 5197
      $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5198
      _equeue_enqueue($0, $$06790, $74) | 0; //@line 5199
      if (___async) {
       label = 22; //@line 5202
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5205
     } else {
      $93 = $$06790 + 4 | 0; //@line 5208
      $94 = HEAP8[$93 >> 0] | 0; //@line 5209
      HEAP8[$93 >> 0] = (($94 + 1 & 255) << HEAP32[$$idx >> 2] | 0) == 0 ? 1 : ($94 & 255) + 1 & 255; //@line 5218
      $103 = HEAP32[$$06790 + 28 >> 2] | 0; //@line 5220
      if ($103 | 0) {
       $AsyncCtx3 = _emscripten_alloc_async_context(84, sp) | 0; //@line 5224
       FUNCTION_TABLE_vi[$103 & 1023]($$06790 + 36 | 0); //@line 5225
       if (___async) {
        label = 26; //@line 5228
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5231
      }
      _equeue_mutex_lock($11); //@line 5233
      $126 = HEAP32[$12 >> 2] | 0; //@line 5234
      L37 : do {
       if (!$126) {
        $$02329$i$i = $12; //@line 5238
        label = 34; //@line 5239
       } else {
        $128 = HEAP32[$$06790 >> 2] | 0; //@line 5241
        $$025$i$i = $12; //@line 5242
        $130 = $126; //@line 5242
        while (1) {
         $129 = HEAP32[$130 >> 2] | 0; //@line 5244
         if ($129 >>> 0 >= $128 >>> 0) {
          break;
         }
         $132 = $130 + 8 | 0; //@line 5249
         $133 = HEAP32[$132 >> 2] | 0; //@line 5250
         if (!$133) {
          $$02329$i$i = $132; //@line 5253
          label = 34; //@line 5254
          break L37;
         } else {
          $$025$i$i = $132; //@line 5257
          $130 = $133; //@line 5257
         }
        }
        if (($129 | 0) == ($128 | 0)) {
         HEAP32[$$06790 + 12 >> 2] = $130; //@line 5263
         $$02330$i$i = $$025$i$i; //@line 5266
         $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 5266
        } else {
         $$02329$i$i = $$025$i$i; //@line 5268
         label = 34; //@line 5269
        }
       }
      } while (0);
      if ((label | 0) == 34) {
       label = 0; //@line 5274
       HEAP32[$$06790 + 12 >> 2] = 0; //@line 5276
       $$02330$i$i = $$02329$i$i; //@line 5277
       $$sink$in$i$i = $$02329$i$i; //@line 5277
      }
      HEAP32[$42 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 5280
      HEAP32[$$02330$i$i >> 2] = $$06790; //@line 5281
      _equeue_mutex_unlock($11); //@line 5282
     }
     if (!$43) {
      break;
     } else {
      $$06790 = $43; //@line 5288
     }
    }
   }
  }
  $141 = _equeue_tick() | 0; //@line 5293
  if ($8) {
   $142 = $3 - $141 | 0; //@line 5295
   if (($142 | 0) < 1) {
    label = 39; //@line 5298
    break;
   } else {
    $$065 = $142; //@line 5301
   }
  } else {
   $$065 = -1; //@line 5304
  }
  _equeue_mutex_lock($5); //@line 5306
  $162 = HEAP32[$0 >> 2] | 0; //@line 5307
  if (!$162) {
   $$2 = $$065; //@line 5310
  } else {
   $166 = (HEAP32[$162 + 20 >> 2] | 0) - $141 | 0; //@line 5314
   $169 = $166 & ~($166 >> 31); //@line 5317
   $$2 = $169 >>> 0 < $$065 >>> 0 ? $169 : $$065; //@line 5320
  }
  _equeue_mutex_unlock($5); //@line 5322
  _equeue_sema_wait($9, $$2) | 0; //@line 5323
  if (HEAP8[$10 >> 0] | 0) {
   _equeue_mutex_lock($5); //@line 5327
   if (HEAP8[$10 >> 0] | 0) {
    label = 51; //@line 5331
    break;
   }
   _equeue_mutex_unlock($5); //@line 5334
  }
  $175 = _equeue_tick() | 0; //@line 5336
  $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5337
  _wait_ms(20); //@line 5338
  if (___async) {
   label = 54; //@line 5341
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5344
  $$0 = $175; //@line 5345
 }
 if ((label | 0) == 18) {
  HEAP32[$AsyncCtx >> 2] = 180; //@line 5348
  HEAP32[$AsyncCtx + 4 >> 2] = $43; //@line 5350
  HEAP8[$AsyncCtx + 8 >> 0] = $8 & 1; //@line 5353
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 5355
  HEAP32[$AsyncCtx + 16 >> 2] = $$06790; //@line 5357
  HEAP32[$AsyncCtx + 20 >> 2] = $42; //@line 5359
  HEAP32[$AsyncCtx + 24 >> 2] = $11; //@line 5361
  HEAP32[$AsyncCtx + 28 >> 2] = $$sroa$0$i; //@line 5363
  HEAP32[$AsyncCtx + 32 >> 2] = $10; //@line 5365
  HEAP32[$AsyncCtx + 36 >> 2] = $5; //@line 5367
  HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 5369
  HEAP32[$AsyncCtx + 44 >> 2] = $$sroa$0$i; //@line 5371
  HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 5373
  HEAP32[$AsyncCtx + 52 >> 2] = $$sroa$0$i; //@line 5375
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 5377
  HEAP32[$AsyncCtx + 60 >> 2] = $4; //@line 5379
  HEAP32[$AsyncCtx + 64 >> 2] = $3; //@line 5381
  HEAP32[$AsyncCtx + 68 >> 2] = $7; //@line 5383
  HEAP32[$AsyncCtx + 72 >> 2] = $6; //@line 5385
  HEAP32[$AsyncCtx + 76 >> 2] = $9; //@line 5387
  HEAP32[$AsyncCtx + 80 >> 2] = $$idx; //@line 5389
  sp = STACKTOP; //@line 5390
  STACKTOP = sp; //@line 5391
  return;
 } else if ((label | 0) == 22) {
  HEAP32[$AsyncCtx11 >> 2] = 181; //@line 5394
  HEAP32[$AsyncCtx11 + 4 >> 2] = $43; //@line 5396
  HEAP8[$AsyncCtx11 + 8 >> 0] = $8 & 1; //@line 5399
  HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 5401
  HEAP32[$AsyncCtx11 + 16 >> 2] = $11; //@line 5403
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 5405
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 5407
  HEAP32[$AsyncCtx11 + 28 >> 2] = $10; //@line 5409
  HEAP32[$AsyncCtx11 + 32 >> 2] = $$sroa$0$i; //@line 5411
  HEAP32[$AsyncCtx11 + 36 >> 2] = $0; //@line 5413
  HEAP32[$AsyncCtx11 + 40 >> 2] = $$sroa$0$i; //@line 5415
  HEAP32[$AsyncCtx11 + 44 >> 2] = $0; //@line 5417
  HEAP32[$AsyncCtx11 + 48 >> 2] = $$sroa$0$i; //@line 5419
  HEAP32[$AsyncCtx11 + 52 >> 2] = $0; //@line 5421
  HEAP32[$AsyncCtx11 + 56 >> 2] = $3; //@line 5423
  HEAP32[$AsyncCtx11 + 60 >> 2] = $7; //@line 5425
  HEAP32[$AsyncCtx11 + 64 >> 2] = $6; //@line 5427
  HEAP32[$AsyncCtx11 + 68 >> 2] = $9; //@line 5429
  HEAP32[$AsyncCtx11 + 72 >> 2] = $$idx; //@line 5431
  sp = STACKTOP; //@line 5432
  STACKTOP = sp; //@line 5433
  return;
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx3 >> 2] = 182; //@line 5436
  HEAP32[$AsyncCtx3 + 4 >> 2] = $43; //@line 5438
  HEAP8[$AsyncCtx3 + 8 >> 0] = $8 & 1; //@line 5441
  HEAP32[$AsyncCtx3 + 12 >> 2] = $12; //@line 5443
  HEAP32[$AsyncCtx3 + 16 >> 2] = $$06790; //@line 5445
  HEAP32[$AsyncCtx3 + 20 >> 2] = $42; //@line 5447
  HEAP32[$AsyncCtx3 + 24 >> 2] = $11; //@line 5449
  HEAP32[$AsyncCtx3 + 28 >> 2] = $$sroa$0$i; //@line 5451
  HEAP32[$AsyncCtx3 + 32 >> 2] = $10; //@line 5453
  HEAP32[$AsyncCtx3 + 36 >> 2] = $5; //@line 5455
  HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 5457
  HEAP32[$AsyncCtx3 + 44 >> 2] = $$sroa$0$i; //@line 5459
  HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 5461
  HEAP32[$AsyncCtx3 + 52 >> 2] = $$sroa$0$i; //@line 5463
  HEAP32[$AsyncCtx3 + 56 >> 2] = $0; //@line 5465
  HEAP32[$AsyncCtx3 + 60 >> 2] = $4; //@line 5467
  HEAP32[$AsyncCtx3 + 64 >> 2] = $3; //@line 5469
  HEAP32[$AsyncCtx3 + 68 >> 2] = $7; //@line 5471
  HEAP32[$AsyncCtx3 + 72 >> 2] = $6; //@line 5473
  HEAP32[$AsyncCtx3 + 76 >> 2] = $9; //@line 5475
  HEAP32[$AsyncCtx3 + 80 >> 2] = $$idx; //@line 5477
  sp = STACKTOP; //@line 5478
  STACKTOP = sp; //@line 5479
  return;
 } else if ((label | 0) == 39) {
  $144 = $0 + 40 | 0; //@line 5482
  if (HEAP32[$144 >> 2] | 0) {
   _equeue_mutex_lock($5); //@line 5486
   $147 = HEAP32[$144 >> 2] | 0; //@line 5487
   do {
    if ($147 | 0) {
     $149 = HEAP32[$0 >> 2] | 0; //@line 5491
     if ($149 | 0) {
      $152 = HEAP32[$0 + 44 >> 2] | 0; //@line 5495
      $155 = (HEAP32[$149 + 20 >> 2] | 0) - $141 | 0; //@line 5498
      $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5502
      FUNCTION_TABLE_vii[$147 & 31]($152, $155 & ~($155 >> 31)); //@line 5503
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 183; //@line 5506
       HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 5508
       HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 5510
       HEAP32[$AsyncCtx7 + 12 >> 2] = $10; //@line 5512
       sp = STACKTOP; //@line 5513
       STACKTOP = sp; //@line 5514
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5516
       break;
      }
     }
    }
   } while (0);
   HEAP8[$4 >> 0] = 1; //@line 5522
   _equeue_mutex_unlock($5); //@line 5523
  }
  HEAP8[$10 >> 0] = 0; //@line 5525
  STACKTOP = sp; //@line 5526
  return;
 } else if ((label | 0) == 51) {
  HEAP8[$10 >> 0] = 0; //@line 5529
  _equeue_mutex_unlock($5); //@line 5530
  STACKTOP = sp; //@line 5531
  return;
 } else if ((label | 0) == 54) {
  HEAP32[$AsyncCtx15 >> 2] = 184; //@line 5534
  HEAP8[$AsyncCtx15 + 4 >> 0] = $8 & 1; //@line 5537
  HEAP32[$AsyncCtx15 + 8 >> 2] = $12; //@line 5539
  HEAP32[$AsyncCtx15 + 12 >> 2] = $11; //@line 5541
  HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 5543
  HEAP32[$AsyncCtx15 + 20 >> 2] = $5; //@line 5545
  HEAP32[$AsyncCtx15 + 24 >> 2] = $10; //@line 5547
  HEAP32[$AsyncCtx15 + 28 >> 2] = $$sroa$0$i; //@line 5549
  HEAP32[$AsyncCtx15 + 32 >> 2] = $$sroa$0$i; //@line 5551
  HEAP32[$AsyncCtx15 + 36 >> 2] = $0; //@line 5553
  HEAP32[$AsyncCtx15 + 40 >> 2] = $$sroa$0$i; //@line 5555
  HEAP32[$AsyncCtx15 + 44 >> 2] = $0; //@line 5557
  HEAP32[$AsyncCtx15 + 48 >> 2] = $0; //@line 5559
  HEAP32[$AsyncCtx15 + 52 >> 2] = $7; //@line 5561
  HEAP32[$AsyncCtx15 + 56 >> 2] = $3; //@line 5563
  HEAP32[$AsyncCtx15 + 60 >> 2] = $175; //@line 5565
  HEAP32[$AsyncCtx15 + 64 >> 2] = $6; //@line 5567
  HEAP32[$AsyncCtx15 + 68 >> 2] = $9; //@line 5569
  HEAP32[$AsyncCtx15 + 72 >> 2] = $$idx; //@line 5571
  sp = STACKTOP; //@line 5572
  STACKTOP = sp; //@line 5573
  return;
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$extract$t = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $109 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $142 = 0, $147 = 0, $148 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $174 = 0, $176 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $201 = 0, $213 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $41 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16859
 STACKTOP = STACKTOP + 16 | 0; //@line 16860
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16860
 $6 = sp; //@line 16861
 HEAP32[$6 >> 2] = 0; //@line 16862
 $7 = $0 + 636 | 0; //@line 16863
 HEAP16[$7 >> 1] = 0; //@line 16864
 $8 = $0 + 373 | 0; //@line 16865
 HEAP8[$8 >> 0] = 0; //@line 16866
 $9 = ($4 | 0) == 0; //@line 16867
 $$extract$t = $9 ? 0 : $5 & 255; //@line 16869
 $10 = $0 + 893 | 0; //@line 16870
 HEAP8[$10 >> 0] = $$extract$t; //@line 16871
 $12 = $0 + 381 | 0; //@line 16873
 HEAP8[$12 >> 0] = HEAP8[$1 >> 0] | 0; //@line 16874
 switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
 case 0:
  {
   HEAP16[$7 >> 1] = 1; //@line 16880
   $16 = HEAP32[$0 + 904 >> 2] | 0; //@line 16883
   HEAP8[$0 + 389 >> 0] = HEAP8[$16 >> 0] | 0; //@line 16888
   HEAP8[$0 + 388 >> 0] = HEAP8[$16 + 1 >> 0] | 0; //@line 16892
   HEAP8[$0 + 387 >> 0] = HEAP8[$16 + 2 >> 0] | 0; //@line 16896
   HEAP8[$0 + 386 >> 0] = HEAP8[$16 + 3 >> 0] | 0; //@line 16900
   HEAP8[$0 + 385 >> 0] = HEAP8[$16 + 4 >> 0] | 0; //@line 16904
   HEAP8[$0 + 384 >> 0] = HEAP8[$16 + 5 >> 0] | 0; //@line 16908
   HEAP8[$0 + 383 >> 0] = HEAP8[$16 + 6 >> 0] | 0; //@line 16911
   HEAP8[$0 + 382 >> 0] = HEAP8[$16 + 7 >> 0] | 0; //@line 16913
   HEAP16[$7 >> 1] = 9; //@line 16914
   $41 = HEAP32[$0 + 900 >> 2] | 0; //@line 16917
   HEAP8[$0 + 397 >> 0] = HEAP8[$41 >> 0] | 0; //@line 16922
   HEAP8[$0 + 396 >> 0] = HEAP8[$41 + 1 >> 0] | 0; //@line 16926
   HEAP8[$0 + 395 >> 0] = HEAP8[$41 + 2 >> 0] | 0; //@line 16930
   HEAP8[$0 + 394 >> 0] = HEAP8[$41 + 3 >> 0] | 0; //@line 16934
   HEAP8[$0 + 393 >> 0] = HEAP8[$41 + 4 >> 0] | 0; //@line 16938
   HEAP8[$0 + 392 >> 0] = HEAP8[$41 + 5 >> 0] | 0; //@line 16942
   HEAP8[$0 + 391 >> 0] = HEAP8[$41 + 6 >> 0] | 0; //@line 16945
   HEAP8[$0 + 390 >> 0] = HEAP8[$41 + 7 >> 0] | 0; //@line 16947
   HEAP16[$7 >> 1] = 17; //@line 16948
   $64 = HEAP32[$0 >> 2] | 0; //@line 16949
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16950
   $65 = __ZN7LoRaPHY13get_radio_rngEv($64) | 0; //@line 16951
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 499; //@line 16954
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16956
    HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 16958
    HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 16960
    HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 16962
    HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 16964
    sp = STACKTOP; //@line 16965
    STACKTOP = sp; //@line 16966
    return 0; //@line 16966
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16968
   $72 = $0 + 946 | 0; //@line 16970
   HEAP16[$72 >> 1] = $65; //@line 16971
   $74 = HEAP16[$7 >> 1] | 0; //@line 16973
   HEAP16[$7 >> 1] = $74 + 1 << 16 >> 16; //@line 16975
   HEAP8[($74 & 65535) + ($0 + 381) >> 0] = $65; //@line 16978
   $80 = (HEAPU16[$72 >> 1] | 0) >>> 8 & 255; //@line 16981
   $81 = HEAP16[$7 >> 1] | 0; //@line 16982
   HEAP16[$7 >> 1] = $81 + 1 << 16 >> 16; //@line 16984
   HEAP8[($81 & 65535) + ($0 + 381) >> 0] = $80; //@line 16987
   $86 = HEAP16[$7 >> 1] & 255; //@line 16989
   $88 = HEAP32[$0 + 908 >> 2] | 0; //@line 16991
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16992
   $89 = __Z22compute_join_frame_micPKhtS0_Pj($12, $86, $88, $6) | 0; //@line 16993
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 500; //@line 16996
    HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 16998
    HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 17000
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 17002
    HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 17004
    sp = STACKTOP; //@line 17005
    STACKTOP = sp; //@line 17006
    return 0; //@line 17006
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17008
   if ($89 | 0) {
    $$0 = -1014; //@line 17011
    STACKTOP = sp; //@line 17012
    return $$0 | 0; //@line 17012
   }
   $95 = HEAP32[$6 >> 2] | 0; //@line 17014
   $97 = HEAP16[$7 >> 1] | 0; //@line 17016
   HEAP16[$7 >> 1] = $97 + 1 << 16 >> 16; //@line 17018
   HEAP8[($97 & 65535) + ($0 + 381) >> 0] = $95; //@line 17021
   $103 = HEAP16[$7 >> 1] | 0; //@line 17024
   HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 17026
   HEAP8[($103 & 65535) + ($0 + 381) >> 0] = $95 >>> 8; //@line 17029
   $109 = HEAP16[$7 >> 1] | 0; //@line 17032
   HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 17034
   HEAP8[($109 & 65535) + ($0 + 381) >> 0] = $95 >>> 16; //@line 17037
   $115 = HEAP16[$7 >> 1] | 0; //@line 17040
   HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 17042
   HEAP8[($115 & 65535) + ($0 + 381) >> 0] = $95 >>> 24; //@line 17045
   $$0 = 0; //@line 17046
   STACKTOP = sp; //@line 17047
   return $$0 | 0; //@line 17047
  }
 case 4:
  {
   HEAP8[$8 >> 0] = 1; //@line 17051
   break;
  }
 case 2:
  {
   break;
  }
 case 7:
  {
   if ($9 | $$extract$t << 24 >> 24 == 0) {
    $$0 = 0; //@line 17061
    STACKTOP = sp; //@line 17062
    return $$0 | 0; //@line 17062
   }
   _memcpy($0 + 382 | 0, $4 | 0, $$extract$t & 255 | 0) | 0; //@line 17066
   HEAP16[$7 >> 1] = (HEAPU8[$10 >> 0] | 0) + 1; //@line 17071
   $$0 = 0; //@line 17072
   STACKTOP = sp; //@line 17073
   return $$0 | 0; //@line 17073
  }
 default:
  {
   $$0 = -1002; //@line 17077
   STACKTOP = sp; //@line 17078
   return $$0 | 0; //@line 17078
  }
 }
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $$0 = -1009; //@line 17085
  STACKTOP = sp; //@line 17086
  return $$0 | 0; //@line 17086
 }
 if (HEAP8[$0 + 1156 >> 0] | 0) {
  $125 = HEAP32[$0 >> 2] | 0; //@line 17092
  $AsyncCtx7 = _emscripten_alloc_async_context(44, sp) | 0; //@line 17096
  $129 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($125, 1, $0 + 1097 | 0, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 17097
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 501; //@line 17100
   HEAP32[$AsyncCtx7 + 4 >> 2] = $10; //@line 17102
   HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 17104
   HEAP8[$AsyncCtx7 + 12 >> 0] = $3; //@line 17106
   HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 17108
   HEAP32[$AsyncCtx7 + 20 >> 2] = $6; //@line 17110
   HEAP32[$AsyncCtx7 + 24 >> 2] = $7; //@line 17112
   HEAP32[$AsyncCtx7 + 28 >> 2] = $12; //@line 17114
   HEAP32[$AsyncCtx7 + 32 >> 2] = $6; //@line 17116
   HEAP32[$AsyncCtx7 + 36 >> 2] = $2; //@line 17118
   HEAP8[$AsyncCtx7 + 40 >> 0] = $9 & 1; //@line 17121
   sp = STACKTOP; //@line 17122
   STACKTOP = sp; //@line 17123
   return 0; //@line 17123
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17125
  if ($129) {
   HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 17129
  }
 }
 $142 = $0 + 374 | 0; //@line 17132
 if (!(HEAP8[$142 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 17136
 } else {
  HEAP8[$142 >> 0] = 0; //@line 17138
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 17141
  $$pre$phiZ2D = $2; //@line 17142
 }
 $147 = $0 + 952 | 0; //@line 17144
 $148 = HEAP32[$147 >> 2] | 0; //@line 17145
 HEAP8[$0 + 382 >> 0] = $148; //@line 17148
 HEAP8[$0 + 383 >> 0] = $148 >>> 8; //@line 17152
 HEAP8[$0 + 384 >> 0] = $148 >>> 16; //@line 17156
 HEAP8[$0 + 385 >> 0] = $148 >>> 24; //@line 17160
 $161 = $0 + 386 | 0; //@line 17162
 HEAP8[$161 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 17163
 $162 = $0 + 956 | 0; //@line 17164
 $163 = HEAP32[$162 >> 2] | 0; //@line 17165
 HEAP8[$0 + 387 >> 0] = $163; //@line 17168
 HEAP8[$0 + 388 >> 0] = $163 >>> 8; //@line 17172
 $169 = $0 + 4 | 0; //@line 17173
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($169); //@line 17174
 $170 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($169) | 0; //@line 17175
 do {
  if ($9) {
   label = 27; //@line 17178
  } else {
   if (!(HEAP8[$10 >> 0] | 0)) {
    label = 27; //@line 17183
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17187
     $$05564 = $3; //@line 17188
     $$05663 = $4; //@line 17188
     $$15862 = 8; //@line 17188
     label = 31; //@line 17189
     break;
    }
    $174 = $170 & 255; //@line 17192
    if (($170 & 255) >= 16) {
     HEAP8[$10 >> 0] = $170; //@line 17195
     $$055 = 0; //@line 17197
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17197
     $$158 = 8; //@line 17197
     label = 30; //@line 17198
     break;
    }
    $176 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 17201
    $182 = ($176 & 255) + $174 & 15 | $176 & -16; //@line 17207
    HEAP8[$$pre$phiZ2D >> 0] = $182; //@line 17208
    HEAP8[$161 >> 0] = $182; //@line 17209
    $183 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17210
    if (!($170 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17213
     $$05564 = $3; //@line 17214
     $$05663 = $4; //@line 17214
     $$15862 = 8; //@line 17214
     label = 31; //@line 17215
     break;
    } else {
     $$05766 = 8; //@line 17218
     $$06065 = 0; //@line 17218
     $186 = 0; //@line 17218
     while (1) {
      $188 = $$05766 + 1 << 24 >> 24; //@line 17222
      HEAP8[($$05766 & 255) + ($0 + 381) >> 0] = HEAP8[$183 + $186 >> 0] | 0; //@line 17225
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 17226
      $186 = $$06065 & 65535; //@line 17227
      if ($186 >>> 0 >= $174 >>> 0) {
       $$055 = $3; //@line 17232
       $$056 = $4; //@line 17232
       $$158 = $188; //@line 17232
       label = 30; //@line 17233
       break;
      } else {
       $$05766 = $188; //@line 17230
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  if (!($170 << 24 >> 24)) {
   $$055 = $3; //@line 17244
   $$056 = $4; //@line 17244
   $$158 = 8; //@line 17244
   label = 30; //@line 17245
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0) {
    HEAP8[$10 >> 0] = $170; //@line 17249
    $$055 = 0; //@line 17251
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17251
    $$158 = 8; //@line 17251
    label = 30; //@line 17252
   } else {
    $$055 = $3; //@line 17254
    $$056 = $4; //@line 17254
    $$158 = 8; //@line 17254
    label = 30; //@line 17255
   }
  }
 }
 if ((label | 0) == 30) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17260
  if (!$$056) {
   $$054 = 0; //@line 17263
   $$259 = $$158; //@line 17263
  } else {
   $$05564 = $$055; //@line 17265
   $$05663 = $$056; //@line 17265
   $$15862 = $$158; //@line 17265
   label = 31; //@line 17266
  }
 }
 do {
  if ((label | 0) == 31) {
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$054 = 0; //@line 17274
    $$259 = $$15862; //@line 17274
   } else {
    $201 = $$15862 + 1 << 24 >> 24; //@line 17276
    HEAP8[($$15862 & 255) + ($0 + 381) >> 0] = $$05564; //@line 17279
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($169); //@line 17282
     $213 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 912 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 17291
     $$054 = $213 ? 0 : -1014; //@line 17293
     $$259 = $201; //@line 17293
     break;
    } else {
     $222 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 928 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 17304
     $$054 = $222 ? 0 : -1014; //@line 17306
     $$259 = $201; //@line 17306
     break;
    }
   }
  }
 } while (0);
 $227 = (HEAPU8[$10 >> 0] | 0) + ($$259 & 255) & 65535; //@line 17316
 HEAP16[$7 >> 1] = $227; //@line 17317
 $229 = HEAP32[$147 >> 2] | 0; //@line 17319
 $230 = HEAP32[$162 >> 2] | 0; //@line 17320
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17321
 $231 = __Z11compute_micPKhtS0_jhjPj($12, $227, $0 + 912 | 0, $229, 0, $230, $6) | 0; //@line 17322
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 502; //@line 17325
  HEAP32[$AsyncCtx + 4 >> 2] = $$054; //@line 17327
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 17329
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 17331
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 17333
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 17335
  sp = STACKTOP; //@line 17336
  STACKTOP = sp; //@line 17337
  return 0; //@line 17337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17339
 $238 = HEAP32[$6 >> 2] | 0; //@line 17342
 HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 381) >> 0] = $238; //@line 17347
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 381) >> 0] = $238 >>> 8; //@line 17354
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 381) >> 0] = $238 >>> 16; //@line 17361
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 381) >> 0] = $238 >>> 24; //@line 17368
 HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 17373
 $$0 = ($231 | 0) == 0 ? $$054 : -1014; //@line 17374
 STACKTOP = sp; //@line 17375
 return $$0 | 0; //@line 17375
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_15($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 19329
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19331
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19333
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19335
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19337
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19339
 $12 = $0 + 24 | 0; //@line 19341
 $14 = HEAP32[$12 >> 2] | 0; //@line 19343
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 19346
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 19348
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 19350
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 19352
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 19354
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 19356
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 19358
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 19360
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 19362
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 19364
 $37 = HEAP32[$0 + 68 >> 2] | 0; //@line 19366
 $39 = HEAP32[$0 + 72 >> 2] | 0; //@line 19368
 $41 = HEAP32[$0 + 76 >> 2] | 0; //@line 19370
 $43 = HEAP32[$0 + 80 >> 2] | 0; //@line 19372
 $45 = HEAP32[$0 + 84 >> 2] | 0; //@line 19374
 $47 = HEAP32[$0 + 88 >> 2] | 0; //@line 19376
 $48 = HEAP32[$4 >> 2] | 0; //@line 19377
 if ($48 | 0) {
  $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 19381
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 19382
  FUNCTION_TABLE_vii[$51 & 31]($6, $8); //@line 19383
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 19386
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 19387
   HEAP32[$52 >> 2] = $2; //@line 19388
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 19389
   HEAP32[$53 >> 2] = $8; //@line 19390
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 19391
   HEAP32[$54 >> 2] = $10; //@line 19392
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 19393
   $56 = $55; //@line 19394
   $57 = $56; //@line 19395
   HEAP32[$57 >> 2] = $14; //@line 19396
   $58 = $56 + 4 | 0; //@line 19397
   $59 = $58; //@line 19398
   HEAP32[$59 >> 2] = $17; //@line 19399
   $60 = $ReallocAsyncCtx5 + 24 | 0; //@line 19400
   HEAP32[$60 >> 2] = $4; //@line 19401
   $61 = $ReallocAsyncCtx5 + 28 | 0; //@line 19402
   HEAP32[$61 >> 2] = $19; //@line 19403
   $62 = $ReallocAsyncCtx5 + 32 | 0; //@line 19404
   HEAP32[$62 >> 2] = $21; //@line 19405
   $63 = $ReallocAsyncCtx5 + 36 | 0; //@line 19406
   HEAP32[$63 >> 2] = $23; //@line 19407
   $64 = $ReallocAsyncCtx5 + 40 | 0; //@line 19408
   HEAP32[$64 >> 2] = $25; //@line 19409
   $65 = $ReallocAsyncCtx5 + 44 | 0; //@line 19410
   HEAP32[$65 >> 2] = $27; //@line 19411
   $66 = $ReallocAsyncCtx5 + 48 | 0; //@line 19412
   HEAP32[$66 >> 2] = $29; //@line 19413
   $67 = $ReallocAsyncCtx5 + 52 | 0; //@line 19414
   HEAP32[$67 >> 2] = $31; //@line 19415
   $68 = $ReallocAsyncCtx5 + 56 | 0; //@line 19416
   HEAP32[$68 >> 2] = $33; //@line 19417
   $69 = $ReallocAsyncCtx5 + 60 | 0; //@line 19418
   HEAP32[$69 >> 2] = $35; //@line 19419
   $70 = $ReallocAsyncCtx5 + 64 | 0; //@line 19420
   HEAP32[$70 >> 2] = $37; //@line 19421
   $71 = $ReallocAsyncCtx5 + 68 | 0; //@line 19422
   HEAP32[$71 >> 2] = $39; //@line 19423
   $72 = $ReallocAsyncCtx5 + 72 | 0; //@line 19424
   HEAP32[$72 >> 2] = $41; //@line 19425
   $73 = $ReallocAsyncCtx5 + 76 | 0; //@line 19426
   HEAP32[$73 >> 2] = $43; //@line 19427
   $74 = $ReallocAsyncCtx5 + 80 | 0; //@line 19428
   HEAP32[$74 >> 2] = $45; //@line 19429
   $75 = $ReallocAsyncCtx5 + 84 | 0; //@line 19430
   HEAP32[$75 >> 2] = $47; //@line 19431
   sp = STACKTOP; //@line 19432
   return;
  }
  ___async_unwind = 0; //@line 19435
  HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 19436
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 19437
  HEAP32[$52 >> 2] = $2; //@line 19438
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 19439
  HEAP32[$53 >> 2] = $8; //@line 19440
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 19441
  HEAP32[$54 >> 2] = $10; //@line 19442
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 19443
  $56 = $55; //@line 19444
  $57 = $56; //@line 19445
  HEAP32[$57 >> 2] = $14; //@line 19446
  $58 = $56 + 4 | 0; //@line 19447
  $59 = $58; //@line 19448
  HEAP32[$59 >> 2] = $17; //@line 19449
  $60 = $ReallocAsyncCtx5 + 24 | 0; //@line 19450
  HEAP32[$60 >> 2] = $4; //@line 19451
  $61 = $ReallocAsyncCtx5 + 28 | 0; //@line 19452
  HEAP32[$61 >> 2] = $19; //@line 19453
  $62 = $ReallocAsyncCtx5 + 32 | 0; //@line 19454
  HEAP32[$62 >> 2] = $21; //@line 19455
  $63 = $ReallocAsyncCtx5 + 36 | 0; //@line 19456
  HEAP32[$63 >> 2] = $23; //@line 19457
  $64 = $ReallocAsyncCtx5 + 40 | 0; //@line 19458
  HEAP32[$64 >> 2] = $25; //@line 19459
  $65 = $ReallocAsyncCtx5 + 44 | 0; //@line 19460
  HEAP32[$65 >> 2] = $27; //@line 19461
  $66 = $ReallocAsyncCtx5 + 48 | 0; //@line 19462
  HEAP32[$66 >> 2] = $29; //@line 19463
  $67 = $ReallocAsyncCtx5 + 52 | 0; //@line 19464
  HEAP32[$67 >> 2] = $31; //@line 19465
  $68 = $ReallocAsyncCtx5 + 56 | 0; //@line 19466
  HEAP32[$68 >> 2] = $33; //@line 19467
  $69 = $ReallocAsyncCtx5 + 60 | 0; //@line 19468
  HEAP32[$69 >> 2] = $35; //@line 19469
  $70 = $ReallocAsyncCtx5 + 64 | 0; //@line 19470
  HEAP32[$70 >> 2] = $37; //@line 19471
  $71 = $ReallocAsyncCtx5 + 68 | 0; //@line 19472
  HEAP32[$71 >> 2] = $39; //@line 19473
  $72 = $ReallocAsyncCtx5 + 72 | 0; //@line 19474
  HEAP32[$72 >> 2] = $41; //@line 19475
  $73 = $ReallocAsyncCtx5 + 76 | 0; //@line 19476
  HEAP32[$73 >> 2] = $43; //@line 19477
  $74 = $ReallocAsyncCtx5 + 80 | 0; //@line 19478
  HEAP32[$74 >> 2] = $45; //@line 19479
  $75 = $ReallocAsyncCtx5 + 84 | 0; //@line 19480
  HEAP32[$75 >> 2] = $47; //@line 19481
  sp = STACKTOP; //@line 19482
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 19485
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 19486
 $76 = HEAP32[$4 >> 2] | 0; //@line 19487
 if ($76 | 0) {
  $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 19491
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 19492
  FUNCTION_TABLE_vi[$79 & 1023]($8); //@line 19493
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 19496
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 19497
   HEAP32[$80 >> 2] = $19; //@line 19498
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 19499
   HEAP32[$81 >> 2] = $21; //@line 19500
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 19501
   HEAP32[$82 >> 2] = $23; //@line 19502
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 19503
   HEAP32[$83 >> 2] = $25; //@line 19504
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 19505
   HEAP32[$84 >> 2] = $27; //@line 19506
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 19507
   HEAP32[$85 >> 2] = $29; //@line 19508
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 19509
   HEAP32[$86 >> 2] = $31; //@line 19510
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 19511
   HEAP32[$87 >> 2] = $33; //@line 19512
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 19513
   HEAP32[$88 >> 2] = $35; //@line 19514
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 19515
   HEAP32[$89 >> 2] = $37; //@line 19516
   $90 = $ReallocAsyncCtx6 + 44 | 0; //@line 19517
   HEAP32[$90 >> 2] = $39; //@line 19518
   $91 = $ReallocAsyncCtx6 + 48 | 0; //@line 19519
   HEAP32[$91 >> 2] = $41; //@line 19520
   $92 = $ReallocAsyncCtx6 + 52 | 0; //@line 19521
   HEAP32[$92 >> 2] = $43; //@line 19522
   $93 = $ReallocAsyncCtx6 + 56 | 0; //@line 19523
   HEAP32[$93 >> 2] = $45; //@line 19524
   $94 = $ReallocAsyncCtx6 + 60 | 0; //@line 19525
   HEAP32[$94 >> 2] = $47; //@line 19526
   sp = STACKTOP; //@line 19527
   return;
  }
  ___async_unwind = 0; //@line 19530
  HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 19531
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 19532
  HEAP32[$80 >> 2] = $19; //@line 19533
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 19534
  HEAP32[$81 >> 2] = $21; //@line 19535
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 19536
  HEAP32[$82 >> 2] = $23; //@line 19537
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 19538
  HEAP32[$83 >> 2] = $25; //@line 19539
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 19540
  HEAP32[$84 >> 2] = $27; //@line 19541
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 19542
  HEAP32[$85 >> 2] = $29; //@line 19543
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 19544
  HEAP32[$86 >> 2] = $31; //@line 19545
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 19546
  HEAP32[$87 >> 2] = $33; //@line 19547
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 19548
  HEAP32[$88 >> 2] = $35; //@line 19549
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 19550
  HEAP32[$89 >> 2] = $37; //@line 19551
  $90 = $ReallocAsyncCtx6 + 44 | 0; //@line 19552
  HEAP32[$90 >> 2] = $39; //@line 19553
  $91 = $ReallocAsyncCtx6 + 48 | 0; //@line 19554
  HEAP32[$91 >> 2] = $41; //@line 19555
  $92 = $ReallocAsyncCtx6 + 52 | 0; //@line 19556
  HEAP32[$92 >> 2] = $43; //@line 19557
  $93 = $ReallocAsyncCtx6 + 56 | 0; //@line 19558
  HEAP32[$93 >> 2] = $45; //@line 19559
  $94 = $ReallocAsyncCtx6 + 60 | 0; //@line 19560
  HEAP32[$94 >> 2] = $47; //@line 19561
  sp = STACKTOP; //@line 19562
  return;
 }
 $97 = (HEAP8[$27 + 770 >> 0] | 0) == 0; //@line 19567
 _printf(10904, $29) | 0; //@line 19568
 if ($97) {
  HEAP32[$45 >> 2] = 6; //@line 19570
  _printf(10970, $45) | 0; //@line 19571
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 19572
  _putchar(10) | 0; //@line 19573
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 19576
   $103 = $ReallocAsyncCtx8 + 4 | 0; //@line 19577
   HEAP32[$103 >> 2] = $27; //@line 19578
   $104 = $ReallocAsyncCtx8 + 8 | 0; //@line 19579
   HEAP32[$104 >> 2] = $37; //@line 19580
   $105 = $ReallocAsyncCtx8 + 12 | 0; //@line 19581
   HEAP32[$105 >> 2] = $39; //@line 19582
   $106 = $ReallocAsyncCtx8 + 16 | 0; //@line 19583
   HEAP32[$106 >> 2] = $41; //@line 19584
   $107 = $ReallocAsyncCtx8 + 20 | 0; //@line 19585
   HEAP32[$107 >> 2] = $43; //@line 19586
   sp = STACKTOP; //@line 19587
   return;
  }
  ___async_unwind = 0; //@line 19590
  HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 19591
  $103 = $ReallocAsyncCtx8 + 4 | 0; //@line 19592
  HEAP32[$103 >> 2] = $27; //@line 19593
  $104 = $ReallocAsyncCtx8 + 8 | 0; //@line 19594
  HEAP32[$104 >> 2] = $37; //@line 19595
  $105 = $ReallocAsyncCtx8 + 12 | 0; //@line 19596
  HEAP32[$105 >> 2] = $39; //@line 19597
  $106 = $ReallocAsyncCtx8 + 16 | 0; //@line 19598
  HEAP32[$106 >> 2] = $41; //@line 19599
  $107 = $ReallocAsyncCtx8 + 20 | 0; //@line 19600
  HEAP32[$107 >> 2] = $43; //@line 19601
  sp = STACKTOP; //@line 19602
  return;
 } else {
  HEAP32[$33 >> 2] = 5; //@line 19605
  _printf(10970, $33) | 0; //@line 19606
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 19607
  _putchar(10) | 0; //@line 19608
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 19611
   $98 = $ReallocAsyncCtx10 + 4 | 0; //@line 19612
   HEAP32[$98 >> 2] = $27; //@line 19613
   $99 = $ReallocAsyncCtx10 + 8 | 0; //@line 19614
   HEAP32[$99 >> 2] = $19; //@line 19615
   $100 = $ReallocAsyncCtx10 + 12 | 0; //@line 19616
   HEAP32[$100 >> 2] = $21; //@line 19617
   $101 = $ReallocAsyncCtx10 + 16 | 0; //@line 19618
   HEAP32[$101 >> 2] = $23; //@line 19619
   $102 = $ReallocAsyncCtx10 + 20 | 0; //@line 19620
   HEAP32[$102 >> 2] = $25; //@line 19621
   sp = STACKTOP; //@line 19622
   return;
  }
  ___async_unwind = 0; //@line 19625
  HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 19626
  $98 = $ReallocAsyncCtx10 + 4 | 0; //@line 19627
  HEAP32[$98 >> 2] = $27; //@line 19628
  $99 = $ReallocAsyncCtx10 + 8 | 0; //@line 19629
  HEAP32[$99 >> 2] = $19; //@line 19630
  $100 = $ReallocAsyncCtx10 + 12 | 0; //@line 19631
  HEAP32[$100 >> 2] = $21; //@line 19632
  $101 = $ReallocAsyncCtx10 + 16 | 0; //@line 19633
  HEAP32[$101 >> 2] = $23; //@line 19634
  $102 = $ReallocAsyncCtx10 + 20 | 0; //@line 19635
  HEAP32[$102 >> 2] = $25; //@line 19636
  sp = STACKTOP; //@line 19637
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_324($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4785
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4787
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4789
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4791
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4793
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4795
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4797
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4799
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4801
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4803
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4805
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4807
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4809
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4811
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 4813
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 4815
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 4817
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 4819
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 4821
 switch (HEAP32[$2 >> 2] | 0) {
 case 7:
  {
   $38 = $6 + 4 | 0; //@line 4825
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 4826
   __ZN7LoRaMac19remove_channel_planEv($38) | 0; //@line 4827
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 239; //@line 4830
    $39 = $ReallocAsyncCtx22 + 4 | 0; //@line 4831
    HEAP32[$39 >> 2] = $10; //@line 4832
    $40 = $ReallocAsyncCtx22 + 8 | 0; //@line 4833
    HEAP32[$40 >> 2] = $4; //@line 4834
    $41 = $ReallocAsyncCtx22 + 12 | 0; //@line 4835
    HEAP32[$41 >> 2] = $6; //@line 4836
    $42 = $ReallocAsyncCtx22 + 16 | 0; //@line 4837
    HEAP32[$42 >> 2] = $38; //@line 4838
    $43 = $ReallocAsyncCtx22 + 20 | 0; //@line 4839
    HEAP32[$43 >> 2] = $14; //@line 4840
    sp = STACKTOP; //@line 4841
    return;
   }
   ___async_unwind = 0; //@line 4844
   HEAP32[$ReallocAsyncCtx22 >> 2] = 239; //@line 4845
   $39 = $ReallocAsyncCtx22 + 4 | 0; //@line 4846
   HEAP32[$39 >> 2] = $10; //@line 4847
   $40 = $ReallocAsyncCtx22 + 8 | 0; //@line 4848
   HEAP32[$40 >> 2] = $4; //@line 4849
   $41 = $ReallocAsyncCtx22 + 12 | 0; //@line 4850
   HEAP32[$41 >> 2] = $6; //@line 4851
   $42 = $ReallocAsyncCtx22 + 16 | 0; //@line 4852
   HEAP32[$42 >> 2] = $38; //@line 4853
   $43 = $ReallocAsyncCtx22 + 20 | 0; //@line 4854
   HEAP32[$43 >> 2] = $14; //@line 4855
   sp = STACKTOP; //@line 4856
   return;
  }
 case 1:
  {
   $$1 = 0; //@line 4861
   $108 = ___async_retval; //@line 4862
   HEAP32[$108 >> 2] = $$1; //@line 4863
   return;
  }
 case 2:
  {
   if (HEAP8[$6 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 4872
    $108 = ___async_retval; //@line 4873
    HEAP32[$108 >> 2] = $$1; //@line 4874
    return;
   }
   HEAP32[$36 >> 2] = 0; //@line 4877
   HEAP32[$36 + 4 >> 2] = HEAP32[$6 + 1940 >> 2]; //@line 4881
   HEAP32[$36 + 8 >> 2] = HEAP32[$6 + 1944 >> 2]; //@line 4885
   HEAP32[$36 + 12 >> 2] = HEAP32[$6 + 1948 >> 2]; //@line 4889
   HEAP8[$36 + 16 >> 0] = HEAP8[$6 + 1952 >> 0] | 0; //@line 4893
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(12) | 0; //@line 4895
   $60 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($6 + 4 | 0, $36) | 0; //@line 4896
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 246; //@line 4899
    $61 = $ReallocAsyncCtx23 + 4 | 0; //@line 4900
    HEAP32[$61 >> 2] = $36; //@line 4901
    $62 = $ReallocAsyncCtx23 + 8 | 0; //@line 4902
    HEAP32[$62 >> 2] = $4; //@line 4903
    sp = STACKTOP; //@line 4904
    return;
   }
   HEAP32[___async_retval >> 2] = $60; //@line 4908
   ___async_unwind = 0; //@line 4909
   HEAP32[$ReallocAsyncCtx23 >> 2] = 246; //@line 4910
   $61 = $ReallocAsyncCtx23 + 4 | 0; //@line 4911
   HEAP32[$61 >> 2] = $36; //@line 4912
   $62 = $ReallocAsyncCtx23 + 8 | 0; //@line 4913
   HEAP32[$62 >> 2] = $4; //@line 4914
   sp = STACKTOP; //@line 4915
   return;
  }
 case 4:
  {
   HEAP8[$6 + 1932 >> 0] = 1; //@line 4921
   $65 = $6 + 1892 | 0; //@line 4922
   $66 = HEAP32[$65 >> 2] | 0; //@line 4923
   if (!$66) {
    $$1 = 0; //@line 4926
    $108 = ___async_retval; //@line 4927
    HEAP32[$108 >> 2] = $$1; //@line 4928
    return;
   }
   $70 = HEAP32[$6 + 2288 >> 2] | 0; //@line 4933
   $72 = HEAP32[$66 + 4 >> 2] | 0; //@line 4935
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 4936
   FUNCTION_TABLE_vii[$72 & 31]($12, $6 + 1880 | 0); //@line 4937
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 4940
    $73 = $ReallocAsyncCtx3 + 4 | 0; //@line 4941
    HEAP32[$73 >> 2] = $65; //@line 4942
    $74 = $ReallocAsyncCtx3 + 8 | 0; //@line 4943
    HEAP32[$74 >> 2] = $12; //@line 4944
    $75 = $ReallocAsyncCtx3 + 12 | 0; //@line 4945
    HEAP32[$75 >> 2] = $70; //@line 4946
    $76 = $ReallocAsyncCtx3 + 16 | 0; //@line 4947
    HEAP32[$76 >> 2] = $12; //@line 4948
    $77 = $ReallocAsyncCtx3 + 20 | 0; //@line 4949
    HEAP32[$77 >> 2] = $4; //@line 4950
    sp = STACKTOP; //@line 4951
    return;
   }
   ___async_unwind = 0; //@line 4954
   HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 4955
   $73 = $ReallocAsyncCtx3 + 4 | 0; //@line 4956
   HEAP32[$73 >> 2] = $65; //@line 4957
   $74 = $ReallocAsyncCtx3 + 8 | 0; //@line 4958
   HEAP32[$74 >> 2] = $12; //@line 4959
   $75 = $ReallocAsyncCtx3 + 12 | 0; //@line 4960
   HEAP32[$75 >> 2] = $70; //@line 4961
   $76 = $ReallocAsyncCtx3 + 16 | 0; //@line 4962
   HEAP32[$76 >> 2] = $12; //@line 4963
   $77 = $ReallocAsyncCtx3 + 20 | 0; //@line 4964
   HEAP32[$77 >> 2] = $4; //@line 4965
   sp = STACKTOP; //@line 4966
   return;
  }
 case 3:
  {
   HEAP32[$14 >> 2] = 3; //@line 4971
   $80 = $14 + 4 | 0; //@line 4974
   HEAP32[$80 >> 2] = HEAP32[$6 + 1940 >> 2]; //@line 4975
   $81 = $6 + 4 | 0; //@line 4976
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(36) | 0; //@line 4977
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($81, $14) | 0; //@line 4978
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 251; //@line 4981
    $82 = $ReallocAsyncCtx19 + 4 | 0; //@line 4982
    HEAP32[$82 >> 2] = $6; //@line 4983
    $83 = $ReallocAsyncCtx19 + 8 | 0; //@line 4984
    HEAP32[$83 >> 2] = $8; //@line 4985
    $84 = $ReallocAsyncCtx19 + 12 | 0; //@line 4986
    HEAP32[$84 >> 2] = $4; //@line 4987
    $85 = $ReallocAsyncCtx19 + 16 | 0; //@line 4988
    HEAP32[$85 >> 2] = $14; //@line 4989
    $86 = $ReallocAsyncCtx19 + 20 | 0; //@line 4990
    HEAP32[$86 >> 2] = $80; //@line 4991
    $87 = $ReallocAsyncCtx19 + 24 | 0; //@line 4992
    HEAP32[$87 >> 2] = $81; //@line 4993
    $88 = $ReallocAsyncCtx19 + 28 | 0; //@line 4994
    HEAP32[$88 >> 2] = $14; //@line 4995
    $89 = $ReallocAsyncCtx19 + 32 | 0; //@line 4996
    HEAP32[$89 >> 2] = $80; //@line 4997
    sp = STACKTOP; //@line 4998
    return;
   }
   ___async_unwind = 0; //@line 5001
   HEAP32[$ReallocAsyncCtx19 >> 2] = 251; //@line 5002
   $82 = $ReallocAsyncCtx19 + 4 | 0; //@line 5003
   HEAP32[$82 >> 2] = $6; //@line 5004
   $83 = $ReallocAsyncCtx19 + 8 | 0; //@line 5005
   HEAP32[$83 >> 2] = $8; //@line 5006
   $84 = $ReallocAsyncCtx19 + 12 | 0; //@line 5007
   HEAP32[$84 >> 2] = $4; //@line 5008
   $85 = $ReallocAsyncCtx19 + 16 | 0; //@line 5009
   HEAP32[$85 >> 2] = $14; //@line 5010
   $86 = $ReallocAsyncCtx19 + 20 | 0; //@line 5011
   HEAP32[$86 >> 2] = $80; //@line 5012
   $87 = $ReallocAsyncCtx19 + 24 | 0; //@line 5013
   HEAP32[$87 >> 2] = $81; //@line 5014
   $88 = $ReallocAsyncCtx19 + 28 | 0; //@line 5015
   HEAP32[$88 >> 2] = $14; //@line 5016
   $89 = $ReallocAsyncCtx19 + 32 | 0; //@line 5017
   HEAP32[$89 >> 2] = $80; //@line 5018
   sp = STACKTOP; //@line 5019
   return;
  }
 case 5:
  {
   $90 = $6 + 1964 | 0; //@line 5024
   if (HEAP8[$90 >> 0] | 0) {
    HEAP32[$2 >> 2] = 6; //@line 5028
    $$1 = 0; //@line 5029
    $108 = ___async_retval; //@line 5030
    HEAP32[$108 >> 2] = $$1; //@line 5031
    return;
   }
   HEAP8[$90 >> 0] = 1; //@line 5034
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(56) | 0; //@line 5035
   $93 = __ZN12LoRaWANStack17send_frame_to_macEv($6) | 0; //@line 5036
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 260; //@line 5039
    $94 = $ReallocAsyncCtx14 + 4 | 0; //@line 5040
    HEAP32[$94 >> 2] = $26; //@line 5041
    $95 = $ReallocAsyncCtx14 + 8 | 0; //@line 5042
    HEAP32[$95 >> 2] = $2; //@line 5043
    $96 = $ReallocAsyncCtx14 + 12 | 0; //@line 5044
    HEAP32[$96 >> 2] = $4; //@line 5045
    $97 = $ReallocAsyncCtx14 + 16 | 0; //@line 5046
    HEAP32[$97 >> 2] = $6; //@line 5047
    $98 = $ReallocAsyncCtx14 + 20 | 0; //@line 5048
    HEAP32[$98 >> 2] = $16; //@line 5049
    $99 = $ReallocAsyncCtx14 + 24 | 0; //@line 5050
    HEAP32[$99 >> 2] = $18; //@line 5051
    $100 = $ReallocAsyncCtx14 + 28 | 0; //@line 5052
    HEAP32[$100 >> 2] = $20; //@line 5053
    $101 = $ReallocAsyncCtx14 + 32 | 0; //@line 5054
    HEAP32[$101 >> 2] = $22; //@line 5055
    $102 = $ReallocAsyncCtx14 + 36 | 0; //@line 5056
    HEAP32[$102 >> 2] = $24; //@line 5057
    $103 = $ReallocAsyncCtx14 + 40 | 0; //@line 5058
    HEAP32[$103 >> 2] = $28; //@line 5059
    $104 = $ReallocAsyncCtx14 + 44 | 0; //@line 5060
    HEAP32[$104 >> 2] = $30; //@line 5061
    $105 = $ReallocAsyncCtx14 + 48 | 0; //@line 5062
    HEAP32[$105 >> 2] = $32; //@line 5063
    $106 = $ReallocAsyncCtx14 + 52 | 0; //@line 5064
    HEAP32[$106 >> 2] = $34; //@line 5065
    sp = STACKTOP; //@line 5066
    return;
   }
   HEAP32[___async_retval >> 2] = $93; //@line 5070
   ___async_unwind = 0; //@line 5071
   HEAP32[$ReallocAsyncCtx14 >> 2] = 260; //@line 5072
   $94 = $ReallocAsyncCtx14 + 4 | 0; //@line 5073
   HEAP32[$94 >> 2] = $26; //@line 5074
   $95 = $ReallocAsyncCtx14 + 8 | 0; //@line 5075
   HEAP32[$95 >> 2] = $2; //@line 5076
   $96 = $ReallocAsyncCtx14 + 12 | 0; //@line 5077
   HEAP32[$96 >> 2] = $4; //@line 5078
   $97 = $ReallocAsyncCtx14 + 16 | 0; //@line 5079
   HEAP32[$97 >> 2] = $6; //@line 5080
   $98 = $ReallocAsyncCtx14 + 20 | 0; //@line 5081
   HEAP32[$98 >> 2] = $16; //@line 5082
   $99 = $ReallocAsyncCtx14 + 24 | 0; //@line 5083
   HEAP32[$99 >> 2] = $18; //@line 5084
   $100 = $ReallocAsyncCtx14 + 28 | 0; //@line 5085
   HEAP32[$100 >> 2] = $20; //@line 5086
   $101 = $ReallocAsyncCtx14 + 32 | 0; //@line 5087
   HEAP32[$101 >> 2] = $22; //@line 5088
   $102 = $ReallocAsyncCtx14 + 36 | 0; //@line 5089
   HEAP32[$102 >> 2] = $24; //@line 5090
   $103 = $ReallocAsyncCtx14 + 40 | 0; //@line 5091
   HEAP32[$103 >> 2] = $28; //@line 5092
   $104 = $ReallocAsyncCtx14 + 44 | 0; //@line 5093
   HEAP32[$104 >> 2] = $30; //@line 5094
   $105 = $ReallocAsyncCtx14 + 48 | 0; //@line 5095
   HEAP32[$105 >> 2] = $32; //@line 5096
   $106 = $ReallocAsyncCtx14 + 52 | 0; //@line 5097
   HEAP32[$106 >> 2] = $34; //@line 5098
   sp = STACKTOP; //@line 5099
   return;
  }
 case 6:
  {
   $$1 = -1018; //@line 5104
   $108 = ___async_retval; //@line 5105
   HEAP32[$108 >> 2] = $$1; //@line 5106
   return;
  }
 case 0:
  {
   $$1 = -1011; //@line 5111
   $108 = ___async_retval; //@line 5112
   HEAP32[$108 >> 2] = $$1; //@line 5113
   return;
  }
 default:
  {
   $$1 = -1002; //@line 5118
   $108 = ___async_retval; //@line 5119
   HEAP32[$108 >> 2] = $$1; //@line 5120
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $113 = 0, $119 = 0, $122 = 0, $13 = 0, $134 = 0, $137 = 0, $16 = 0, $34 = 0, $35 = 0, $57 = 0, $60 = 0, $70 = 0, $72 = 0, $73 = 0, $8 = 0, $86 = 0, $88 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 11174
 STACKTOP = STACKTOP + 32 | 0; //@line 11175
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11175
 $$byval_copy = sp + 24 | 0; //@line 11176
 $vararg_buffer3 = sp + 16 | 0; //@line 11177
 $vararg_buffer1 = sp + 8 | 0; //@line 11178
 $vararg_buffer = sp; //@line 11179
 _printf(12967, $vararg_buffer) | 0; //@line 11180
 _printf(12980, $vararg_buffer1) | 0; //@line 11181
 $AsyncCtx13 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11182
 _putchar(10) | 0; //@line 11183
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 358; //@line 11186
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 11188
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 11190
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 11192
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer3; //@line 11194
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer3; //@line 11196
  HEAP32[$AsyncCtx13 + 24 >> 2] = $$byval_copy; //@line 11198
  HEAP32[$AsyncCtx13 + 28 >> 2] = $$byval_copy; //@line 11200
  sp = STACKTOP; //@line 11201
  STACKTOP = sp; //@line 11202
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 11204
 $8 = $0 + 356 | 0; //@line 11205
 $10 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$8 >> 2] | 0) | 0; //@line 11207
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0; //@line 11210
 $13 = $0 + 360 | 0; //@line 11211
 do {
  if ((HEAP32[$13 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 11216
   _printf(12994, $$byval_copy) | 0; //@line 11217
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 11218
   _putchar(10) | 0; //@line 11219
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 360; //@line 11222
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 11224
    HEAP32[$AsyncCtx9 + 8 >> 2] = $8; //@line 11226
    HEAP32[$AsyncCtx9 + 12 >> 2] = $$sroa$0$0$copyload; //@line 11228
    HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 11230
    HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer; //@line 11232
    HEAP32[$AsyncCtx9 + 24 >> 2] = $10; //@line 11234
    HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer1; //@line 11236
    HEAP32[$AsyncCtx9 + 32 >> 2] = $13; //@line 11238
    HEAP32[$AsyncCtx9 + 36 >> 2] = $vararg_buffer1; //@line 11240
    sp = STACKTOP; //@line 11241
    STACKTOP = sp; //@line 11242
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11244
   $34 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11246
   HEAP32[$vararg_buffer1 >> 2] = 361; //@line 11247
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 11249
   $AsyncCtx35 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11250
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 11251
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 11251
   $35 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($34, $0, $$byval_copy) | 0; //@line 11252
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 362; //@line 11255
    HEAP32[$AsyncCtx35 + 4 >> 2] = $13; //@line 11257
    HEAP32[$AsyncCtx35 + 8 >> 2] = $0; //@line 11259
    HEAP32[$AsyncCtx35 + 12 >> 2] = $8; //@line 11261
    HEAP32[$AsyncCtx35 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11263
    HEAP32[$AsyncCtx35 + 20 >> 2] = $vararg_buffer; //@line 11265
    HEAP32[$AsyncCtx35 + 24 >> 2] = $vararg_buffer; //@line 11267
    HEAP32[$AsyncCtx35 + 28 >> 2] = $10; //@line 11269
    HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer1; //@line 11271
    sp = STACKTOP; //@line 11272
    STACKTOP = sp; //@line 11273
    return;
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 11275
   do {
    if (!$35) {
     $AsyncCtx39 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11279
     _mbed_assert_internal(12851, 12860, 217); //@line 11280
     if (___async) {
      HEAP32[$AsyncCtx39 >> 2] = 363; //@line 11283
      HEAP32[$AsyncCtx39 + 4 >> 2] = $13; //@line 11285
      HEAP32[$AsyncCtx39 + 8 >> 2] = $0; //@line 11287
      HEAP32[$AsyncCtx39 + 12 >> 2] = $8; //@line 11289
      HEAP32[$AsyncCtx39 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11291
      HEAP32[$AsyncCtx39 + 20 >> 2] = $vararg_buffer; //@line 11293
      HEAP32[$AsyncCtx39 + 24 >> 2] = $vararg_buffer; //@line 11295
      HEAP32[$AsyncCtx39 + 28 >> 2] = $10; //@line 11297
      HEAP32[$AsyncCtx39 + 32 >> 2] = $vararg_buffer1; //@line 11299
      sp = STACKTOP; //@line 11300
      STACKTOP = sp; //@line 11301
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx39 | 0); //@line 11303
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 11309
  } else {
   $16 = HEAP32[$0 >> 2] | 0; //@line 11311
   $AsyncCtx32 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11312
   __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 11313
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 359; //@line 11316
    HEAP32[$AsyncCtx32 + 4 >> 2] = $13; //@line 11318
    HEAP32[$AsyncCtx32 + 8 >> 2] = $0; //@line 11320
    HEAP32[$AsyncCtx32 + 12 >> 2] = $8; //@line 11322
    HEAP32[$AsyncCtx32 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11324
    HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer; //@line 11326
    HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer; //@line 11328
    HEAP32[$AsyncCtx32 + 28 >> 2] = $10; //@line 11330
    sp = STACKTOP; //@line 11331
    STACKTOP = sp; //@line 11332
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 11334
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 371 >> 0] | 0)) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 11347
   $101 = $0 + 944 | 0; //@line 11348
   $102 = HEAP8[$101 >> 0] | 0; //@line 11349
   if (!($102 << 24 >> 24)) {
    HEAP8[$101 >> 0] = 1; //@line 11352
    $105 = 1; //@line 11353
   } else {
    $105 = $102; //@line 11355
   }
   HEAP8[$101 >> 0] = $105 | 32; //@line 11358
  } else {
   $57 = HEAP32[$8 >> 2] | 0; //@line 11360
   $60 = HEAP32[$0 + 972 >> 2] | 0; //@line 11363
   $AsyncCtx28 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11364
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($57, $0 + 1036 | 0, $60); //@line 11365
   if (___async) {
    HEAP32[$AsyncCtx28 >> 2] = 364; //@line 11368
    HEAP32[$AsyncCtx28 + 4 >> 2] = $13; //@line 11370
    HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 11372
    HEAP32[$AsyncCtx28 + 12 >> 2] = $8; //@line 11374
    HEAP32[$AsyncCtx28 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11376
    HEAP32[$AsyncCtx28 + 20 >> 2] = $vararg_buffer; //@line 11378
    HEAP32[$AsyncCtx28 + 24 >> 2] = $vararg_buffer; //@line 11380
    HEAP32[$AsyncCtx28 + 28 >> 2] = $10; //@line 11382
    sp = STACKTOP; //@line 11383
    STACKTOP = sp; //@line 11384
    return;
   }
   _emscripten_free_async_context($AsyncCtx28 | 0); //@line 11386
   if ((HEAP32[$13 >> 2] | 0) == 2) {
    $$pre$phiZ2D = $0 + 976 | 0; //@line 11391
   } else {
    $70 = HEAP32[$8 >> 2] | 0; //@line 11393
    $72 = $0 + 976 | 0; //@line 11395
    $73 = HEAP32[$72 >> 2] | 0; //@line 11396
    $AsyncCtx24 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11397
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($70, $0 + 1056 | 0, $73); //@line 11398
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 365; //@line 11401
     HEAP32[$AsyncCtx24 + 4 >> 2] = $13; //@line 11403
     HEAP32[$AsyncCtx24 + 8 >> 2] = $72; //@line 11405
     HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 11407
     HEAP32[$AsyncCtx24 + 16 >> 2] = $0; //@line 11409
     HEAP32[$AsyncCtx24 + 20 >> 2] = $$sroa$0$0$copyload; //@line 11411
     HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer; //@line 11413
     HEAP32[$AsyncCtx24 + 28 >> 2] = $vararg_buffer; //@line 11415
     HEAP32[$AsyncCtx24 + 32 >> 2] = $10; //@line 11417
     sp = STACKTOP; //@line 11418
     STACKTOP = sp; //@line 11419
     return;
    }
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11421
    if ((HEAP32[$13 >> 2] | 0) == 2) {
     $$pre$phiZ2D = $72; //@line 11425
    } else {
     if (!(HEAP8[$0 + 373 >> 0] | 0)) {
      break;
     } else {
      $$pre$phiZ2D = $72; //@line 11433
     }
    }
   }
   $86 = HEAP32[$8 >> 2] | 0; //@line 11437
   $88 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 11439
   $91 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$0 >> 2] | 0) | 0) + $88 | 0; //@line 11442
   $AsyncCtx20 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11443
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($86, $0 + 1076 | 0, $91); //@line 11444
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 366; //@line 11447
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 11449
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$sroa$0$0$copyload; //@line 11451
    HEAP32[$AsyncCtx20 + 12 >> 2] = $vararg_buffer; //@line 11453
    HEAP32[$AsyncCtx20 + 16 >> 2] = $vararg_buffer; //@line 11455
    HEAP32[$AsyncCtx20 + 20 >> 2] = $10; //@line 11457
    HEAP32[$AsyncCtx20 + 24 >> 2] = $8; //@line 11459
    sp = STACKTOP; //@line 11460
    STACKTOP = sp; //@line 11461
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 11463
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 376 >> 0] = ($$sroa$0$0$copyload | 0) == 0 & (HEAP8[$0 + 944 >> 0] & 8) != 0 & 1; //@line 11476
 $113 = HEAP8[$0 + 378 >> 0] | 0; //@line 11478
 HEAP8[$0 + 379 >> 0] = $113; //@line 11480
 HEAP8[$vararg_buffer >> 0] = $113; //@line 11481
 HEAP8[$vararg_buffer + 1 >> 0] = HEAP8[$0 + 372 >> 0] | 0; //@line 11485
 HEAP32[$vararg_buffer + 4 >> 2] = $10; //@line 11487
 $119 = HEAP32[$0 >> 2] | 0; //@line 11488
 $122 = HEAP32[(HEAP32[$119 >> 2] | 0) + 12 >> 2] | 0; //@line 11491
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11492
 FUNCTION_TABLE_vii[$122 & 31]($119, $vararg_buffer); //@line 11493
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 367; //@line 11496
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11498
  HEAP32[$AsyncCtx + 8 >> 2] = $10; //@line 11500
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 11502
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 11504
  sp = STACKTOP; //@line 11505
  STACKTOP = sp; //@line 11506
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11508
 HEAP32[$0 + 980 >> 2] = $10; //@line 11510
 if (!(HEAP8[$0 + 373 >> 0] | 0)) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 11518
  $134 = $0 + 380 | 0; //@line 11519
  HEAP8[$134 >> 0] = (HEAP8[$134 >> 0] | 0) + 1 << 24 >> 24; //@line 11522
 }
 $137 = HEAP32[$8 >> 2] | 0; //@line 11524
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11526
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($137, $0 + 996 | 0, 1); //@line 11527
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 368; //@line 11530
  HEAP32[$AsyncCtx17 + 4 >> 2] = $vararg_buffer; //@line 11532
  sp = STACKTOP; //@line 11533
  STACKTOP = sp; //@line 11534
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11536
  STACKTOP = sp; //@line 11537
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i22 = 0, $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0.0, $114 = 0.0, $116 = 0, $12 = 0, $120 = 0, $127 = 0, $128 = 0, $132 = 0, $14 = 0, $140 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $46 = 0, $55 = 0, $6 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $85 = 0, $9 = 0, $92 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18580
 STACKTOP = STACKTOP + 16 | 0; //@line 18581
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18581
 $vararg_buffer1 = sp + 8 | 0; //@line 18582
 $vararg_buffer = sp; //@line 18583
 _printf(12967, $vararg_buffer) | 0; //@line 18584
 _printf(13498, $vararg_buffer1) | 0; //@line 18585
 $AsyncCtx4 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18586
 _putchar(10) | 0; //@line 18587
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 549; //@line 18590
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 18592
  HEAP32[$AsyncCtx4 + 8 >> 2] = $1; //@line 18594
  HEAP32[$AsyncCtx4 + 12 >> 2] = $vararg_buffer; //@line 18596
  HEAP32[$AsyncCtx4 + 16 >> 2] = $vararg_buffer1; //@line 18598
  sp = STACKTOP; //@line 18599
  STACKTOP = sp; //@line 18600
  return 0; //@line 18600
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 18602
 $6 = $0 + 968 | 0; //@line 18603
 if (HEAP32[$6 >> 2] | 0) {
  $$1 = -1e3; //@line 18607
  STACKTOP = sp; //@line 18608
  return $$1 | 0; //@line 18608
 }
 $9 = $0 + 264 | 0; //@line 18610
 __ZN11LoRaMacMlme18reset_confirmationEv($9); //@line 18611
 $10 = HEAP32[$1 >> 2] | 0; //@line 18612
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($9) | 0) >> 2] = $10; //@line 18614
 $12 = $0 + 944 | 0; //@line 18615
 $14 = HEAP8[$12 >> 0] | 8; //@line 18617
 HEAP8[$12 >> 0] = $14; //@line 18618
 switch (HEAP32[$1 >> 2] | 0) {
 case 1:
  {
   $$0 = __ZN14LoRaMacCommand15add_mac_commandEhhh($0 + 4 | 0, 2, 0, 0) | 0; //@line 18624
   label = 32; //@line 18625
   break;
  }
 case 0:
  {
   if (HEAP32[$6 >> 2] & 16 | 0) {
    $$1 = -1e3; //@line 18633
    STACKTOP = sp; //@line 18634
    return $$1 | 0; //@line 18634
   }
   $22 = HEAP32[$1 + 4 >> 2] | 0; //@line 18637
   if (!$22) {
    $$1 = -1003; //@line 18640
    STACKTOP = sp; //@line 18641
    return $$1 | 0; //@line 18641
   }
   $24 = $1 + 8 | 0; //@line 18643
   if (!(HEAP32[$24 >> 2] | 0)) {
    $$1 = -1003; //@line 18647
    STACKTOP = sp; //@line 18648
    return $$1 | 0; //@line 18648
   }
   $27 = $1 + 12 | 0; //@line 18650
   if (!(HEAP32[$27 >> 2] | 0)) {
    $$1 = -1003; //@line 18654
    STACKTOP = sp; //@line 18655
    return $$1 | 0; //@line 18655
   }
   $30 = $1 + 16 | 0; //@line 18657
   if (!(HEAP8[$30 >> 0] | 0)) {
    $$1 = -1003; //@line 18661
    STACKTOP = sp; //@line 18662
    return $$1 | 0; //@line 18662
   }
   HEAP32[$0 + 900 >> 2] = $22; //@line 18665
   HEAP32[$0 + 904 >> 2] = HEAP32[$24 >> 2]; //@line 18668
   HEAP32[$0 + 908 >> 2] = HEAP32[$27 >> 2]; //@line 18671
   $38 = HEAP8[$30 >> 0] | 0; //@line 18672
   $39 = $0 + 896 | 0; //@line 18673
   HEAP8[$39 >> 0] = $38; //@line 18674
   $42 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$0 >> 2] | 0, HEAP8[$30 >> 0] | 0) | 0; //@line 18677
   HEAP8[$39 >> 0] = $42 ? $38 : 12; //@line 18679
   $43 = $0 + 897 | 0; //@line 18680
   HEAP8[$43 >> 0] = 0; //@line 18681
   HEAP8[$0 + 372 >> 0] = 0; //@line 18684
   $46 = $0 + 956 | 0; //@line 18685
   HEAP32[$46 >> 2] = 0; //@line 18686
   HEAP32[$0 + 960 >> 2] = 0; //@line 18688
   HEAP32[$0 + 964 >> 2] = 0; //@line 18690
   HEAP8[$0 + 380 >> 0] = 0; //@line 18692
   HEAP8[$0 + 894 >> 0] = 1; //@line 18694
   HEAP8[$0 + 895 >> 0] = 1; //@line 18696
   HEAP8[$0 + 377 >> 0] = 0; //@line 18698
   HEAP8[$0 + 1152 >> 0] = 0; //@line 18700
   HEAP16[$0 + 1154 >> 1] = 1; //@line 18702
   $55 = $0 + 4 | 0; //@line 18703
   __ZN14LoRaMacCommand20clear_command_bufferEv($55); //@line 18704
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($55); //@line 18705
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($55); //@line 18706
   HEAP8[$0 + 371 >> 0] = 1; //@line 18708
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 18710
   HEAP8[$0 + 373 >> 0] = 0; //@line 18712
   HEAP8[$0 + 374 >> 0] = 0; //@line 18714
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 18716
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 18719
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 18722
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 18724
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 18734
   HEAP8[$0 + 379 >> 0] = 0; //@line 18736
   $67 = HEAP32[$0 >> 2] | 0; //@line 18737
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 52 >> 2] | 0; //@line 18740
   $74 = (HEAPU8[$43 >> 0] | 0) + 1 & 255; //@line 18744
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18745
   $75 = FUNCTION_TABLE_iii[$70 & 31]($67, $74) | 0; //@line 18746
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 550; //@line 18749
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18751
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 18753
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 18755
    HEAP32[$AsyncCtx + 16 >> 2] = $46; //@line 18757
    HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 18759
    sp = STACKTOP; //@line 18760
    STACKTOP = sp; //@line 18761
    return 0; //@line 18761
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18763
   HEAP8[$0 + 1097 >> 0] = $75; //@line 18765
   HEAP8[$vararg_buffer >> 0] = 0; //@line 18766
   HEAP8[$vararg_buffer1 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 18770
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18771
   $85 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $vararg_buffer1, 0, 0, 0) | 0; //@line 18772
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 551; //@line 18775
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 18777
    HEAP32[$AsyncCtx7 + 8 >> 2] = $46; //@line 18779
    HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer1; //@line 18781
    HEAP32[$AsyncCtx7 + 16 >> 2] = $vararg_buffer; //@line 18783
    HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 18785
    sp = STACKTOP; //@line 18786
    STACKTOP = sp; //@line 18787
    return 0; //@line 18787
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18789
   do {
    if (!$85) {
     $92 = $0 + 288 | 0; //@line 18793
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 11 >> 0] = 0; //@line 18796
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 10 >> 0] = 0; //@line 18799
     $97 = HEAP32[$46 >> 2] | 0; //@line 18800
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 16 >> 2] = $97; //@line 18803
     $AsyncCtx27 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18804
     $100 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 18805
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 552; //@line 18808
      HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer1; //@line 18810
      HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 18812
      HEAP32[$AsyncCtx27 + 12 >> 2] = $12; //@line 18814
      HEAP32[$AsyncCtx27 + 16 >> 2] = $0; //@line 18816
      sp = STACKTOP; //@line 18817
      STACKTOP = sp; //@line 18818
      return 0; //@line 18818
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 18820
      $$0$i22 = $100; //@line 18821
      break;
     }
    } else {
     $$0$i22 = $85; //@line 18825
    }
   } while (0);
   $$0 = $$0$i22; //@line 18828
   label = 32; //@line 18829
   break;
  }
 case 2:
  {
   $106 = HEAP8[$0 + 378 >> 0] | 0; //@line 18834
   $108 = HEAP8[$0 + 1097 >> 0] | 0; //@line 18836
   $110 = HEAP8[$0 + 1096 >> 0] | 0; //@line 18838
   $112 = +HEAPF32[$0 + 1144 >> 2]; //@line 18840
   $114 = +HEAPF32[$0 + 1148 >> 2]; //@line 18842
   $116 = HEAP16[$1 + 4 >> 1] | 0; //@line 18844
   $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18845
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($9, $106, $108, $110, $112, $114, $116); //@line 18846
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 553; //@line 18849
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 18851
    HEAP32[$AsyncCtx23 + 8 >> 2] = $6; //@line 18853
    sp = STACKTOP; //@line 18854
    STACKTOP = sp; //@line 18855
    return 0; //@line 18855
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 18857
   $120 = HEAP32[$0 + 356 >> 2] | 0; //@line 18859
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18861
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($120, $0 + 996 | 0, 1e3); //@line 18862
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 554; //@line 18865
    HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 18867
    sp = STACKTOP; //@line 18868
    STACKTOP = sp; //@line 18869
    return 0; //@line 18869
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18871
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1; //@line 18874
   $$1 = 0; //@line 18875
   STACKTOP = sp; //@line 18876
   return $$1 | 0; //@line 18876
  }
 case 3:
  {
   $127 = HEAP8[$1 + 12 >> 0] | 0; //@line 18882
   $128 = HEAP16[$1 + 4 >> 1] | 0; //@line 18883
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18884
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($9, 0, 0, $127, 0.0, 0.0, $128); //@line 18885
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 555; //@line 18888
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 18890
    HEAP32[$AsyncCtx19 + 8 >> 2] = $6; //@line 18892
    sp = STACKTOP; //@line 18893
    STACKTOP = sp; //@line 18894
    return 0; //@line 18894
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18896
   $132 = HEAP32[$0 + 356 >> 2] | 0; //@line 18898
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18900
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($132, $0 + 996 | 0, 1e3); //@line 18901
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 556; //@line 18904
    HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 18906
    sp = STACKTOP; //@line 18907
    STACKTOP = sp; //@line 18908
    return 0; //@line 18908
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18910
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1; //@line 18913
   $$1 = 0; //@line 18914
   STACKTOP = sp; //@line 18915
   return $$1 | 0; //@line 18915
  }
 default:
  {
   $$024 = -1002; //@line 18919
   $140 = $14; //@line 18919
  }
 }
 do {
  if ((label | 0) == 32) {
   if (!$$0) {
    $$1 = 0; //@line 18926
    STACKTOP = sp; //@line 18927
    return $$1 | 0; //@line 18927
   } else {
    $$024 = $$0; //@line 18930
    $140 = HEAP8[$12 >> 0] | 0; //@line 18930
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 373 >> 0] = 0; //@line 18936
 HEAP8[$12 >> 0] = $140 & -9; //@line 18938
 $$1 = $$024; //@line 18939
 STACKTOP = sp; //@line 18940
 return $$1 | 0; //@line 18940
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$080 = 0, $100 = 0, $118 = 0, $12 = 0, $123 = 0, $128 = 0, $133 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $36 = 0, $4 = 0, $40 = 0, $44 = 0, $55 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $89 = 0, $94 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 22712
 L1 : do {
  if (!$1) {
   $$080 = -1003; //@line 22716
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 22718
   if (!$4) {
    $$080 = -1003; //@line 22721
   } else {
    do {
     switch (HEAP32[$1 >> 2] | 0) {
     case 0:
      {
       $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 22728
       HEAP32[$2 >> 2] = $8; //@line 22729
       switch ($8 | 0) {
       case 0:
        {
         $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22732
         __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 22733
         if (___async) {
          HEAP32[$AsyncCtx19 >> 2] = 606; //@line 22736
          sp = STACKTOP; //@line 22737
          return 0; //@line 22738
         } else {
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 22740
          $$080 = 0; //@line 22741
          break L1;
         }
         break;
        }
       case 2:
        {
         break;
        }
       default:
        {
         $$080 = 0; //@line 22750
         break L1;
        }
       }
       HEAP8[$2 + 13 >> 0] = 0; //@line 22755
       $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 22756
       __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 22757
       if (___async) {
        HEAP32[$AsyncCtx15 >> 2] = 607; //@line 22760
        HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 22762
        HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 22764
        sp = STACKTOP; //@line 22765
        return 0; //@line 22766
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22768
       $12 = HEAP32[$0 >> 2] | 0; //@line 22769
       $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 22772
       $17 = HEAP8[$2 + 776 >> 0] | 0; //@line 22774
       $19 = HEAP8[$2 + 744 >> 0] | 0; //@line 22776
       $21 = HEAP32[$2 + 740 >> 2] | 0; //@line 22778
       $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 22780
       FUNCTION_TABLE_viiiii[$15 & 7]($12, $17, $19, $21, $2 + 824 | 0); //@line 22781
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 608; //@line 22784
        sp = STACKTOP; //@line 22785
        return 0; //@line 22786
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 22788
        $$080 = 0; //@line 22789
        break L1;
       }
       break;
      }
     case 1:
      {
       HEAP8[$2 + 12 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22798
       $$080 = 0; //@line 22799
       break L1;
       break;
      }
     case 2:
      {
       HEAP8[$2 + 796 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22807
       $$080 = 0; //@line 22808
       break L1;
       break;
      }
     case 3:
      {
       HEAP32[$2 + 588 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22816
       $$080 = 0; //@line 22817
       break L1;
       break;
      }
     case 4:
      {
       HEAP32[$2 + 592 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22825
       $$080 = 0; //@line 22826
       break L1;
       break;
      }
     case 5:
      {
       $36 = HEAP32[$1 + 4 >> 2] | 0; //@line 22832
       if (!$36) {
        $$080 = -1003; //@line 22835
        break L1;
       }
       dest = $2 + 552 | 0; //@line 22839
       src = $36; //@line 22839
       stop = dest + 16 | 0; //@line 22839
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 22839
        dest = dest + 1 | 0; //@line 22839
        src = src + 1 | 0; //@line 22839
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 22840
       break L1;
       break;
      }
     case 6:
      {
       $40 = HEAP32[$1 + 4 >> 2] | 0; //@line 22846
       if (!$40) {
        $$080 = -1003; //@line 22849
        break L1;
       }
       dest = $2 + 568 | 0; //@line 22853
       src = $40; //@line 22853
       stop = dest + 16 | 0; //@line 22853
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 22853
        dest = dest + 1 | 0; //@line 22853
        src = src + 1 | 0; //@line 22853
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 22854
       break L1;
       break;
      }
     case 7:
      {
       $44 = HEAP8[$1 + 4 >> 0] | 0; //@line 22860
       HEAP8[$2 + 8 >> 0] = $44; //@line 22863
       $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22864
       __ZN7LoRaPHY25setup_public_network_modeEb($4, $44 << 24 >> 24 != 0); //@line 22865
       if (___async) {
        HEAP32[$AsyncCtx7 >> 2] = 609; //@line 22868
        sp = STACKTOP; //@line 22869
        return 0; //@line 22870
       } else {
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22872
        $$080 = 0; //@line 22873
        break L1;
       }
       break;
      }
     case 8:
      {
       HEAP8[$2 + 9 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22882
       $$080 = 0; //@line 22883
       break L1;
       break;
      }
     case 10:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 22892
        break L1;
       }
       $55 = $1 + 4 | 0; //@line 22897
       $60 = HEAP32[$55 + 4 >> 2] | 0; //@line 22902
       $61 = $2 + 772 | 0; //@line 22903
       HEAP32[$61 >> 2] = HEAP32[$55 >> 2]; //@line 22905
       HEAP32[$61 + 4 >> 2] = $60; //@line 22908
       if ((HEAP32[$2 >> 2] | 0) != 2) {
        $$080 = 0; //@line 22912
        break L1;
       }
       if (!(HEAP8[$2 + 12 >> 0] | 0)) {
        $$080 = 0; //@line 22919
        break L1;
       }
       $70 = HEAP32[$0 >> 2] | 0; //@line 22922
       $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 22923
       __ZN7LoRaPHY18put_radio_to_sleepEv($70); //@line 22924
       if (___async) {
        HEAP32[$AsyncCtx11 >> 2] = 610; //@line 22927
        HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 22929
        HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 22931
        sp = STACKTOP; //@line 22932
        return 0; //@line 22933
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22935
       $73 = HEAP32[$0 >> 2] | 0; //@line 22936
       $76 = HEAP32[(HEAP32[$73 >> 2] | 0) + 28 >> 2] | 0; //@line 22939
       $78 = HEAP8[$2 + 776 >> 0] | 0; //@line 22941
       $80 = HEAP8[$2 + 744 >> 0] | 0; //@line 22943
       $82 = HEAP32[$2 + 740 >> 2] | 0; //@line 22945
       $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22947
       FUNCTION_TABLE_viiiii[$76 & 7]($73, $78, $80, $82, $2 + 824 | 0); //@line 22948
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 611; //@line 22951
        sp = STACKTOP; //@line 22952
        return 0; //@line 22953
       } else {
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22955
        $$080 = 0; //@line 22956
        break L1;
       }
       break;
      }
     case 11:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 22966
        break L1;
       }
       $89 = $1 + 4 | 0; //@line 22971
       $94 = HEAP32[$89 + 4 >> 2] | 0; //@line 22976
       $95 = $2 + 772 | 0; //@line 22977
       HEAP32[$95 >> 2] = HEAP32[$89 >> 2]; //@line 22979
       HEAP32[$95 + 4 >> 2] = $94; //@line 22982
       $$080 = 0; //@line 22983
       break L1;
       break;
      }
     case 29:
      {
       HEAP32[$2 + 788 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22991
       $$080 = 0; //@line 22992
       break L1;
       break;
      }
     case 28:
      {
       HEAP8[$2 + 744 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 23000
       $$080 = 0; //@line 23001
       break L1;
       break;
      }
     case 14:
      {
       $100 = HEAP8[$1 + 4 >> 0] | 0; //@line 23007
       if (($100 + -1 & 255) >= 15) {
        $$080 = -1003; //@line 23011
        break L1;
       }
       HEAP8[$2 + 768 >> 0] = $100; //@line 23015
       $$080 = 0; //@line 23016
       break L1;
       break;
      }
     case 15:
      {
       HEAP32[$2 + 748 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23024
       $$080 = 0; //@line 23025
       break L1;
       break;
      }
     case 16:
      {
       HEAP32[$2 + 752 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23033
       $$080 = 0; //@line 23034
       break L1;
       break;
      }
     case 17:
      {
       HEAP32[$2 + 756 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23042
       $$080 = 0; //@line 23043
       break L1;
       break;
      }
     case 18:
      {
       HEAP32[$2 + 760 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23051
       $$080 = 0; //@line 23052
       break L1;
       break;
      }
     case 19:
      {
       HEAP32[$2 + 764 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23060
       $$080 = 0; //@line 23061
       break L1;
       break;
      }
     case 20:
      {
       $118 = $1 + 4 | 0; //@line 23066
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$118 >> 0] | 0, 1) | 0)) {
        $$080 = -1003; //@line 23070
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$118 >> 0] | 0; //@line 23075
       $$080 = 0; //@line 23076
       break L1;
       break;
      }
     case 21:
      {
       $123 = $1 + 4 | 0; //@line 23081
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$123 >> 0] | 0, 0) | 0)) {
        $$080 = -1003; //@line 23085
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$123 >> 0] | 0; //@line 23090
       $$080 = 0; //@line 23091
       break L1;
       break;
      }
     case 23:
      {
       $128 = $1 + 4 | 0; //@line 23096
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$128 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 23100
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$128 >> 0] | 0; //@line 23105
       $$080 = 0; //@line 23106
       break L1;
       break;
      }
     case 22:
      {
       $133 = $1 + 4 | 0; //@line 23111
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$133 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 23115
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$133 >> 0] | 0; //@line 23120
       $$080 = 0; //@line 23121
       break L1;
       break;
      }
     case 24:
      {
       HEAP32[$2 + 596 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23129
       $$080 = 0; //@line 23130
       break L1;
       break;
      }
     case 25:
      {
       HEAP32[$2 + 600 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23138
       $$080 = 0; //@line 23139
       break L1;
       break;
      }
     case 27:
      {
       HEAP32[$2 + 740 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23147
       $$080 = 0; //@line 23148
       break L1;
       break;
      }
     default:
      {
       $$080 = -1002; //@line 23153
       break L1;
      }
     }
    } while (0);
   }
  }
 } while (0);
 return $$080 | 0; //@line 23161
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $53 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $74 = 0, $75 = 0, $79 = 0, $81 = 0, $86 = 0, $87 = 0, $90 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx63 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 6260
 STACKTOP = STACKTOP + 96 | 0; //@line 6261
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 6261
 $vararg_buffer9 = sp + 40 | 0; //@line 6262
 $vararg_buffer7 = sp + 32 | 0; //@line 6263
 $vararg_buffer5 = sp + 24 | 0; //@line 6264
 $vararg_buffer3 = sp + 16 | 0; //@line 6265
 $2 = sp + 80 | 0; //@line 6268
 $3 = sp + 64 | 0; //@line 6269
 $4 = sp + 48 | 0; //@line 6270
 if (!$1) {
  _printf(11887, sp) | 0; //@line 6273
  _printf(12579, sp + 8 | 0) | 0; //@line 6274
  $AsyncCtx39 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6275
  _putchar(10) | 0; //@line 6276
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 195; //@line 6279
   sp = STACKTOP; //@line 6280
   STACKTOP = sp; //@line 6281
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6283
  $AsyncCtx63 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6284
  _mbed_assert_internal(14513, 11935, 766); //@line 6285
  if (___async) {
   HEAP32[$AsyncCtx63 >> 2] = 196; //@line 6288
   sp = STACKTOP; //@line 6289
   STACKTOP = sp; //@line 6290
   return;
  }
  _emscripten_free_async_context($AsyncCtx63 | 0); //@line 6292
  STACKTOP = sp; //@line 6293
  return;
 }
 _printf(12139, $vararg_buffer3) | 0; //@line 6295
 $6 = $1 + 4 | 0; //@line 6296
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$6 >> 2]; //@line 6298
 _printf(12614, $vararg_buffer5) | 0; //@line 6299
 $AsyncCtx35 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6300
 _putchar(10) | 0; //@line 6301
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 197; //@line 6304
  HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6306
  HEAP32[$AsyncCtx35 + 8 >> 2] = $vararg_buffer7; //@line 6308
  HEAP32[$AsyncCtx35 + 12 >> 2] = $vararg_buffer7; //@line 6310
  HEAP32[$AsyncCtx35 + 16 >> 2] = $6; //@line 6312
  HEAP32[$AsyncCtx35 + 20 >> 2] = $vararg_buffer9; //@line 6314
  HEAP32[$AsyncCtx35 + 24 >> 2] = $vararg_buffer9; //@line 6316
  HEAP32[$AsyncCtx35 + 28 >> 2] = $2; //@line 6318
  HEAP32[$AsyncCtx35 + 32 >> 2] = $3; //@line 6320
  HEAP32[$AsyncCtx35 + 36 >> 2] = $4; //@line 6322
  HEAP32[$AsyncCtx35 + 40 >> 2] = $1; //@line 6324
  sp = STACKTOP; //@line 6325
  STACKTOP = sp; //@line 6326
  return;
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6328
 if (!(HEAP32[$6 >> 2] | 0)) {
  HEAP32[$0 + 1956 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 6335
  HEAP8[$0 + 1964 >> 0] = 0; //@line 6337
  $74 = $0 + 1892 | 0; //@line 6338
  $75 = HEAP32[$74 >> 2] | 0; //@line 6339
  if (!$75) {
   STACKTOP = sp; //@line 6342
   return;
  }
  $79 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6346
  $81 = HEAP32[$75 + 4 >> 2] | 0; //@line 6348
  $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6349
  FUNCTION_TABLE_vii[$81 & 31]($4, $0 + 1880 | 0); //@line 6350
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 207; //@line 6353
   HEAP32[$AsyncCtx23 + 4 >> 2] = $74; //@line 6355
   HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 6357
   HEAP32[$AsyncCtx23 + 12 >> 2] = $79; //@line 6359
   HEAP32[$AsyncCtx23 + 16 >> 2] = $4; //@line 6361
   sp = STACKTOP; //@line 6362
   STACKTOP = sp; //@line 6363
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6365
  $86 = $4 + 12 | 0; //@line 6367
  HEAP32[$86 >> 2] = HEAP32[$74 >> 2]; //@line 6368
  $AsyncCtx42 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6369
  $87 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($79, $4, 2) | 0; //@line 6370
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 208; //@line 6373
   HEAP32[$AsyncCtx42 + 4 >> 2] = $86; //@line 6375
   HEAP32[$AsyncCtx42 + 8 >> 2] = $4; //@line 6377
   sp = STACKTOP; //@line 6378
   STACKTOP = sp; //@line 6379
   return;
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 6381
  $90 = HEAP32[$86 >> 2] | 0; //@line 6382
  do {
   if ($90 | 0) {
    $93 = HEAP32[$90 + 8 >> 2] | 0; //@line 6387
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6388
    FUNCTION_TABLE_vi[$93 & 1023]($4); //@line 6389
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 209; //@line 6392
     HEAP32[$AsyncCtx27 + 4 >> 2] = $87; //@line 6394
     sp = STACKTOP; //@line 6395
     STACKTOP = sp; //@line 6396
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6398
     break;
    }
   }
  } while (0);
  if ($87 | 0) {
   STACKTOP = sp; //@line 6405
   return;
  }
  $AsyncCtx52 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6407
  _mbed_assert_internal(12851, 11935, 821); //@line 6408
  if (___async) {
   HEAP32[$AsyncCtx52 >> 2] = 210; //@line 6411
   sp = STACKTOP; //@line 6412
   STACKTOP = sp; //@line 6413
   return;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 6415
  STACKTOP = sp; //@line 6416
  return;
 }
 HEAP8[$0 + 1964 >> 0] = 0; //@line 6419
 _memset($0 + 1975 | 0, 0, 255) | 0; //@line 6421
 HEAP16[$0 + 2230 >> 1] = 255; //@line 6423
 _printf(11887, $vararg_buffer7) | 0; //@line 6424
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[$6 >> 2]; //@line 6426
 _printf(12646, $vararg_buffer9) | 0; //@line 6427
 $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6428
 _putchar(10) | 0; //@line 6429
 if (___async) {
  HEAP32[$AsyncCtx31 >> 2] = 198; //@line 6432
  HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6434
  HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 6436
  HEAP32[$AsyncCtx31 + 12 >> 2] = $3; //@line 6438
  HEAP32[$AsyncCtx31 + 16 >> 2] = $6; //@line 6440
  sp = STACKTOP; //@line 6441
  STACKTOP = sp; //@line 6442
  return;
 }
 _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6444
 $30 = $0 + 1880 | 0; //@line 6447
 $31 = $0 + 1892 | 0; //@line 6448
 $32 = HEAP32[$31 >> 2] | 0; //@line 6449
 $33 = ($32 | 0) != 0; //@line 6450
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  if (!$33) {
   STACKTOP = sp; //@line 6453
   return;
  }
  $35 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6456
  $37 = HEAP32[$32 + 4 >> 2] | 0; //@line 6458
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6459
  FUNCTION_TABLE_vii[$37 & 31]($2, $30); //@line 6460
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 199; //@line 6463
   HEAP32[$AsyncCtx + 4 >> 2] = $31; //@line 6465
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6467
   HEAP32[$AsyncCtx + 12 >> 2] = $35; //@line 6469
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6471
   sp = STACKTOP; //@line 6472
   STACKTOP = sp; //@line 6473
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6475
  $42 = $2 + 12 | 0; //@line 6477
  HEAP32[$42 >> 2] = HEAP32[$31 >> 2]; //@line 6478
  $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6479
  $43 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($35, $2, 3) | 0; //@line 6480
  if (___async) {
   HEAP32[$AsyncCtx48 >> 2] = 200; //@line 6483
   HEAP32[$AsyncCtx48 + 4 >> 2] = $42; //@line 6485
   HEAP32[$AsyncCtx48 + 8 >> 2] = $2; //@line 6487
   sp = STACKTOP; //@line 6488
   STACKTOP = sp; //@line 6489
   return;
  }
  _emscripten_free_async_context($AsyncCtx48 | 0); //@line 6491
  $46 = HEAP32[$42 >> 2] | 0; //@line 6492
  do {
   if ($46 | 0) {
    $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 6497
    $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6498
    FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 6499
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 201; //@line 6502
     HEAP32[$AsyncCtx13 + 4 >> 2] = $43; //@line 6504
     sp = STACKTOP; //@line 6505
     STACKTOP = sp; //@line 6506
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6508
     break;
    }
   }
  } while (0);
  if ($43 | 0) {
   STACKTOP = sp; //@line 6515
   return;
  }
  $AsyncCtx60 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6517
  _mbed_assert_internal(12851, 11935, 786); //@line 6518
  if (___async) {
   HEAP32[$AsyncCtx60 >> 2] = 202; //@line 6521
   sp = STACKTOP; //@line 6522
   STACKTOP = sp; //@line 6523
   return;
  }
  _emscripten_free_async_context($AsyncCtx60 | 0); //@line 6525
  STACKTOP = sp; //@line 6526
  return;
 } else {
  if (!$33) {
   STACKTOP = sp; //@line 6529
   return;
  }
  $53 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6532
  $55 = HEAP32[$32 + 4 >> 2] | 0; //@line 6534
  $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6535
  FUNCTION_TABLE_vii[$55 & 31]($3, $30); //@line 6536
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 203; //@line 6539
   HEAP32[$AsyncCtx16 + 4 >> 2] = $31; //@line 6541
   HEAP32[$AsyncCtx16 + 8 >> 2] = $3; //@line 6543
   HEAP32[$AsyncCtx16 + 12 >> 2] = $53; //@line 6545
   HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 6547
   sp = STACKTOP; //@line 6548
   STACKTOP = sp; //@line 6549
   return;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6551
  $60 = $3 + 12 | 0; //@line 6553
  HEAP32[$60 >> 2] = HEAP32[$31 >> 2]; //@line 6554
  $AsyncCtx45 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6555
  $61 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($53, $3, 4) | 0; //@line 6556
  if (___async) {
   HEAP32[$AsyncCtx45 >> 2] = 204; //@line 6559
   HEAP32[$AsyncCtx45 + 4 >> 2] = $60; //@line 6561
   HEAP32[$AsyncCtx45 + 8 >> 2] = $3; //@line 6563
   sp = STACKTOP; //@line 6564
   STACKTOP = sp; //@line 6565
   return;
  }
  _emscripten_free_async_context($AsyncCtx45 | 0); //@line 6567
  $64 = HEAP32[$60 >> 2] | 0; //@line 6568
  do {
   if ($64 | 0) {
    $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 6573
    $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6574
    FUNCTION_TABLE_vi[$67 & 1023]($3); //@line 6575
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 205; //@line 6578
     HEAP32[$AsyncCtx20 + 4 >> 2] = $61; //@line 6580
     sp = STACKTOP; //@line 6581
     STACKTOP = sp; //@line 6582
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 6584
     break;
    }
   }
  } while (0);
  if ($61 | 0) {
   STACKTOP = sp; //@line 6591
   return;
  }
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6593
  _mbed_assert_internal(12851, 11935, 797); //@line 6594
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 206; //@line 6597
   sp = STACKTOP; //@line 6598
   STACKTOP = sp; //@line 6599
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 6601
  STACKTOP = sp; //@line 6602
  return;
 }
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3603
 STACKTOP = STACKTOP + 32 | 0; //@line 3604
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3604
 $4 = sp + 8 | 0; //@line 3605
 $5 = sp; //@line 3606
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 3607
 if (!$6) {
  $$0 = -20; //@line 3610
  STACKTOP = sp; //@line 3611
  return $$0 | 0; //@line 3611
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 3617
  STACKTOP = sp; //@line 3618
  return $$0 | 0; //@line 3618
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3620
 _mbedtls_cipher_free($0); //@line 3621
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 690; //@line 3624
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 3626
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 3628
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 3630
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 3632
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 3634
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 3636
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 3638
  sp = STACKTOP; //@line 3639
  STACKTOP = sp; //@line 3640
  return 0; //@line 3640
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3642
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3643
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 3644
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 691; //@line 3647
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 3649
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 3651
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 3653
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 3655
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 3657
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 3659
  sp = STACKTOP; //@line 3660
  STACKTOP = sp; //@line 3661
  return 0; //@line 3661
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3663
 if ($18 | 0) {
  $$0 = $18; //@line 3666
  STACKTOP = sp; //@line 3667
  return $$0 | 0; //@line 3667
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3669
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 3670
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 692; //@line 3673
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 3675
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 3677
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 3679
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 3681
  sp = STACKTOP; //@line 3682
  STACKTOP = sp; //@line 3683
  return 0; //@line 3683
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3685
 if ($26 | 0) {
  $$0 = $26; //@line 3688
  STACKTOP = sp; //@line 3689
  return $$0 | 0; //@line 3689
 }
 HEAP32[$5 >> 2] = 0; //@line 3691
 dest = $4; //@line 3692
 stop = dest + 16 | 0; //@line 3692
 do {
  HEAP8[dest >> 0] = 0; //@line 3692
  dest = dest + 1 | 0; //@line 3692
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3693
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 3694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 693; //@line 3697
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3699
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3701
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 3703
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 3705
  sp = STACKTOP; //@line 3706
  STACKTOP = sp; //@line 3707
  return 0; //@line 3707
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3709
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 3728
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 3746
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 3764
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 3782
  $110 = $0 + 136 | 0; //@line 3784
  HEAP32[$110 >> 2] = $108; //@line 3786
  HEAP32[$110 + 4 >> 2] = $90; //@line 3789
  $115 = $0 + 264 | 0; //@line 3791
  HEAP32[$115 >> 2] = $72; //@line 3793
  HEAP32[$115 + 4 >> 2] = $54; //@line 3796
  $120 = $0 + 200 | 0; //@line 3798
  HEAP32[$120 >> 2] = 0; //@line 3800
  HEAP32[$120 + 4 >> 2] = 0; //@line 3803
  $125 = $0 + 72 | 0; //@line 3805
  HEAP32[$125 >> 2] = 0; //@line 3807
  HEAP32[$125 + 4 >> 2] = 0; //@line 3810
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 3812
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 3814
  $133 = tempRet0; //@line 3815
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 3816
  $136 = $134 | $132; //@line 3818
  $137 = tempRet0 | $133; //@line 3819
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 3820
  $139 = tempRet0; //@line 3821
  $141 = $130 & -520093696 ^ $139; //@line 3823
  $143 = $0 + 104 | 0; //@line 3825
  HEAP32[$143 >> 2] = $136; //@line 3827
  HEAP32[$143 + 4 >> 2] = $137; //@line 3830
  $148 = $0 + 232 | 0; //@line 3832
  HEAP32[$148 >> 2] = $138; //@line 3834
  HEAP32[$148 + 4 >> 2] = $141; //@line 3837
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 3839
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 3841
  $156 = tempRet0; //@line 3842
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 3843
  $159 = $157 | $155; //@line 3845
  $160 = tempRet0 | $156; //@line 3846
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 3847
  $162 = tempRet0; //@line 3848
  $164 = $153 & -520093696 ^ $162; //@line 3850
  $166 = $0 + 88 | 0; //@line 3852
  HEAP32[$166 >> 2] = $159; //@line 3854
  HEAP32[$166 + 4 >> 2] = $160; //@line 3857
  $171 = $0 + 216 | 0; //@line 3859
  HEAP32[$171 >> 2] = $161; //@line 3861
  HEAP32[$171 + 4 >> 2] = $164; //@line 3864
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 3866
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 3868
  $179 = tempRet0; //@line 3869
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 3870
  $182 = $178 | $180; //@line 3872
  $183 = $179 | tempRet0; //@line 3873
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 3874
  $187 = $176 & -520093696 ^ tempRet0; //@line 3877
  $189 = $0 + 80 | 0; //@line 3879
  HEAP32[$189 >> 2] = $182; //@line 3881
  HEAP32[$189 + 4 >> 2] = $183; //@line 3884
  $194 = $0 + 208 | 0; //@line 3886
  HEAP32[$194 >> 2] = $184; //@line 3888
  HEAP32[$194 + 4 >> 2] = $187; //@line 3891
  $198 = $184 ^ $161; //@line 3892
  $199 = $187 ^ $164; //@line 3893
  $201 = $0 + 224 | 0; //@line 3895
  HEAP32[$201 >> 2] = $198; //@line 3897
  HEAP32[$201 + 4 >> 2] = $199; //@line 3900
  $205 = $182 ^ $159; //@line 3901
  $206 = $183 ^ $160; //@line 3902
  $208 = $0 + 96 | 0; //@line 3904
  HEAP32[$208 >> 2] = $205; //@line 3906
  HEAP32[$208 + 4 >> 2] = $206; //@line 3909
  $212 = $184 ^ $138; //@line 3910
  $213 = $187 ^ $141; //@line 3911
  $215 = $0 + 240 | 0; //@line 3913
  HEAP32[$215 >> 2] = $212; //@line 3915
  HEAP32[$215 + 4 >> 2] = $213; //@line 3918
  $219 = $182 ^ $136; //@line 3919
  $220 = $183 ^ $137; //@line 3920
  $222 = $0 + 112 | 0; //@line 3922
  HEAP32[$222 >> 2] = $219; //@line 3924
  HEAP32[$222 + 4 >> 2] = $220; //@line 3927
  $226 = $161 ^ $138; //@line 3928
  $227 = $164 ^ $141; //@line 3929
  $229 = $0 + 248 | 0; //@line 3931
  HEAP32[$229 >> 2] = $226; //@line 3933
  HEAP32[$229 + 4 >> 2] = $227; //@line 3936
  $233 = $159 ^ $136; //@line 3937
  $234 = $160 ^ $137; //@line 3938
  $236 = $0 + 120 | 0; //@line 3940
  HEAP32[$236 >> 2] = $233; //@line 3942
  HEAP32[$236 + 4 >> 2] = $234; //@line 3945
  $240 = $198 ^ $138; //@line 3946
  $241 = $199 ^ $141; //@line 3947
  $243 = $0 + 256 | 0; //@line 3949
  HEAP32[$243 >> 2] = $240; //@line 3951
  HEAP32[$243 + 4 >> 2] = $241; //@line 3954
  $247 = $205 ^ $136; //@line 3955
  $248 = $206 ^ $137; //@line 3956
  $250 = $0 + 128 | 0; //@line 3958
  HEAP32[$250 >> 2] = $247; //@line 3960
  HEAP32[$250 + 4 >> 2] = $248; //@line 3963
  $257 = $0 + 272 | 0; //@line 3967
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 3969
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 3972
  $264 = $0 + 144 | 0; //@line 3976
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 3978
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 3981
  $271 = $0 + 280 | 0; //@line 3985
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 3987
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 3990
  $278 = $0 + 152 | 0; //@line 3994
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 3996
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 3999
  $285 = $0 + 288 | 0; //@line 4003
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4005
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4008
  $292 = $0 + 160 | 0; //@line 4012
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4014
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4017
  $299 = $0 + 296 | 0; //@line 4021
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4023
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4026
  $306 = $0 + 168 | 0; //@line 4030
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4032
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4035
  $313 = $0 + 304 | 0; //@line 4039
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4041
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4044
  $320 = $0 + 176 | 0; //@line 4048
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4050
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4053
  $327 = $0 + 312 | 0; //@line 4057
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4059
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4062
  $334 = $0 + 184 | 0; //@line 4066
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4068
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4071
  $341 = $0 + 320 | 0; //@line 4075
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4077
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4080
  $348 = $0 + 192 | 0; //@line 4084
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4086
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4089
  $$0$i = 0; //@line 4090
 } else {
  $$0$i = $32; //@line 4092
 }
 $$0 = $$0$i; //@line 4094
 STACKTOP = sp; //@line 4095
 return $$0 | 0; //@line 4095
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 36601
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 36602
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 36603
 $d_sroa_0_0_extract_trunc = $b$0; //@line 36604
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 36605
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 36606
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 36608
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 36611
    HEAP32[$rem + 4 >> 2] = 0; //@line 36612
   }
   $_0$1 = 0; //@line 36614
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 36615
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36616
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 36619
    $_0$0 = 0; //@line 36620
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36621
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 36623
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 36624
   $_0$1 = 0; //@line 36625
   $_0$0 = 0; //@line 36626
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36627
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 36630
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 36635
     HEAP32[$rem + 4 >> 2] = 0; //@line 36636
    }
    $_0$1 = 0; //@line 36638
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 36639
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36640
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 36644
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 36645
    }
    $_0$1 = 0; //@line 36647
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 36648
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36649
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 36651
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 36654
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 36655
    }
    $_0$1 = 0; //@line 36657
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 36658
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36659
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 36662
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 36664
    $58 = 31 - $51 | 0; //@line 36665
    $sr_1_ph = $57; //@line 36666
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 36667
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 36668
    $q_sroa_0_1_ph = 0; //@line 36669
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 36670
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 36674
    $_0$0 = 0; //@line 36675
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36676
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 36678
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 36679
   $_0$1 = 0; //@line 36680
   $_0$0 = 0; //@line 36681
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36682
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 36686
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 36688
     $126 = 31 - $119 | 0; //@line 36689
     $130 = $119 - 31 >> 31; //@line 36690
     $sr_1_ph = $125; //@line 36691
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 36692
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 36693
     $q_sroa_0_1_ph = 0; //@line 36694
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 36695
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 36699
     $_0$0 = 0; //@line 36700
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36701
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 36703
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 36704
    $_0$1 = 0; //@line 36705
    $_0$0 = 0; //@line 36706
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36707
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 36709
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 36712
    $89 = 64 - $88 | 0; //@line 36713
    $91 = 32 - $88 | 0; //@line 36714
    $92 = $91 >> 31; //@line 36715
    $95 = $88 - 32 | 0; //@line 36716
    $105 = $95 >> 31; //@line 36717
    $sr_1_ph = $88; //@line 36718
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 36719
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 36720
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 36721
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 36722
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 36726
    HEAP32[$rem + 4 >> 2] = 0; //@line 36727
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 36730
    $_0$0 = $a$0 | 0 | 0; //@line 36731
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36732
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 36734
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 36735
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 36736
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36737
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 36742
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 36743
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 36744
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 36745
  $carry_0_lcssa$1 = 0; //@line 36746
  $carry_0_lcssa$0 = 0; //@line 36747
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 36749
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 36750
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 36751
  $137$1 = tempRet0; //@line 36752
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 36753
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 36754
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 36755
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 36756
  $sr_1202 = $sr_1_ph; //@line 36757
  $carry_0203 = 0; //@line 36758
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 36760
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 36761
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 36762
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 36763
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 36764
   $150$1 = tempRet0; //@line 36765
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 36766
   $carry_0203 = $151$0 & 1; //@line 36767
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 36769
   $r_sroa_1_1200 = tempRet0; //@line 36770
   $sr_1202 = $sr_1202 - 1 | 0; //@line 36771
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 36783
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 36784
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 36785
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 36786
  $carry_0_lcssa$1 = 0; //@line 36787
  $carry_0_lcssa$0 = $carry_0203; //@line 36788
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 36790
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 36791
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 36794
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 36795
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 36797
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 36798
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 36799
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15655
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15661
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15670
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15675
      $19 = $1 + 44 | 0; //@line 15676
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15685
      $26 = $1 + 52 | 0; //@line 15686
      $27 = $1 + 53 | 0; //@line 15687
      $28 = $1 + 54 | 0; //@line 15688
      $29 = $0 + 8 | 0; //@line 15689
      $30 = $1 + 24 | 0; //@line 15690
      $$081$off0 = 0; //@line 15691
      $$084 = $0 + 16 | 0; //@line 15691
      $$085$off0 = 0; //@line 15691
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15695
        label = 20; //@line 15696
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15699
       HEAP8[$27 >> 0] = 0; //@line 15700
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15701
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15702
       if (___async) {
        label = 12; //@line 15705
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15708
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15712
        label = 20; //@line 15713
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15720
         $$186$off0 = $$085$off0; //@line 15720
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15729
           label = 20; //@line 15730
           break L10;
          } else {
           $$182$off0 = 1; //@line 15733
           $$186$off0 = $$085$off0; //@line 15733
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15740
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15747
          break L10;
         } else {
          $$182$off0 = 1; //@line 15750
          $$186$off0 = 1; //@line 15750
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15755
       $$084 = $$084 + 8 | 0; //@line 15755
       $$085$off0 = $$186$off0; //@line 15755
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 801; //@line 15758
       HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 15760
       HEAP32[$AsyncCtx15 + 8 >> 2] = $27; //@line 15762
       HEAP32[$AsyncCtx15 + 12 >> 2] = $28; //@line 15764
       HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 15766
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 15768
       HEAP8[$AsyncCtx15 + 24 >> 0] = $4 & 1; //@line 15771
       HEAP32[$AsyncCtx15 + 28 >> 2] = $25; //@line 15773
       HEAP8[$AsyncCtx15 + 32 >> 0] = $$085$off0 & 1; //@line 15776
       HEAP8[$AsyncCtx15 + 33 >> 0] = $$081$off0 & 1; //@line 15779
       HEAP32[$AsyncCtx15 + 36 >> 2] = $$084; //@line 15781
       HEAP32[$AsyncCtx15 + 40 >> 2] = $13; //@line 15783
       HEAP32[$AsyncCtx15 + 44 >> 2] = $30; //@line 15785
       HEAP32[$AsyncCtx15 + 48 >> 2] = $19; //@line 15787
       HEAP32[$AsyncCtx15 + 52 >> 2] = $29; //@line 15789
       sp = STACKTOP; //@line 15790
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15796
         $61 = $1 + 40 | 0; //@line 15797
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 15800
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 15808
           if ($$283$off0) {
            label = 25; //@line 15810
            break;
           } else {
            $69 = 4; //@line 15813
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 15820
        } else {
         $69 = 4; //@line 15822
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 15827
      }
      HEAP32[$19 >> 2] = $69; //@line 15829
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 15838
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 15843
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 15844
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15845
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 15846
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 802; //@line 15849
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 15851
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15853
    HEAP32[$AsyncCtx11 + 12 >> 2] = $72; //@line 15855
    HEAP32[$AsyncCtx11 + 16 >> 2] = $73; //@line 15857
    HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 15859
    HEAP32[$AsyncCtx11 + 24 >> 2] = $3; //@line 15861
    HEAP8[$AsyncCtx11 + 28 >> 0] = $4 & 1; //@line 15864
    sp = STACKTOP; //@line 15865
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15868
   $81 = $0 + 24 | 0; //@line 15869
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 15873
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 15877
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 15884
       $$2 = $81; //@line 15885
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15897
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 15898
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 15903
        $136 = $$2 + 8 | 0; //@line 15904
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 15907
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 805; //@line 15912
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 15914
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 15916
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 15918
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 15920
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15922
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 15924
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 15926
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 15929
       sp = STACKTOP; //@line 15930
       return;
      }
      $104 = $1 + 24 | 0; //@line 15933
      $105 = $1 + 54 | 0; //@line 15934
      $$1 = $81; //@line 15935
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15951
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 15952
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15957
       $122 = $$1 + 8 | 0; //@line 15958
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 15961
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 804; //@line 15966
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 15968
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 15970
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 15972
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 15974
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 15976
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 15978
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 15980
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 15982
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 15985
      sp = STACKTOP; //@line 15986
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 15990
    $$0 = $81; //@line 15991
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15998
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 15999
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16004
     $100 = $$0 + 8 | 0; //@line 16005
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 16008
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 803; //@line 16013
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 16015
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 16017
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 16019
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 16021
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 16023
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 16025
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 16028
    sp = STACKTOP; //@line 16029
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $42 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 6916
 STACKTOP = STACKTOP + 80 | 0; //@line 6917
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6917
 $vararg_buffer9 = sp + 40 | 0; //@line 6918
 $vararg_buffer7 = sp + 32 | 0; //@line 6919
 $vararg_buffer5 = sp + 24 | 0; //@line 6920
 $vararg_buffer3 = sp + 16 | 0; //@line 6921
 $2 = sp + 64 | 0; //@line 6924
 $3 = sp + 48 | 0; //@line 6925
 if (!$1) {
  _printf(11887, sp) | 0; //@line 6928
  _printf(11900, sp + 8 | 0) | 0; //@line 6929
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6930
  _putchar(10) | 0; //@line 6931
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 222; //@line 6934
   sp = STACKTOP; //@line 6935
   STACKTOP = sp; //@line 6936
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6938
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6939
  _mbed_assert_internal(14513, 11935, 694); //@line 6940
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 223; //@line 6943
   sp = STACKTOP; //@line 6944
   STACKTOP = sp; //@line 6945
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 6947
  STACKTOP = sp; //@line 6948
  return;
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   $9 = $0 + 1876 | 0; //@line 6956
   if (!(HEAP32[$1 + 4 >> 2] | 0)) {
    HEAP32[$9 >> 2] = 4; //@line 6958
    $AsyncCtx45 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6959
    $10 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6960
    if (___async) {
     HEAP32[$AsyncCtx45 >> 2] = 224; //@line 6963
     HEAP32[$AsyncCtx45 + 4 >> 2] = $vararg_buffer3; //@line 6965
     HEAP32[$AsyncCtx45 + 8 >> 2] = $vararg_buffer3; //@line 6967
     HEAP32[$AsyncCtx45 + 12 >> 2] = $vararg_buffer5; //@line 6969
     HEAP32[$AsyncCtx45 + 16 >> 2] = $vararg_buffer5; //@line 6971
     sp = STACKTOP; //@line 6972
     STACKTOP = sp; //@line 6973
     return;
    }
    _emscripten_free_async_context($AsyncCtx45 | 0); //@line 6975
    if (!$10) {
     STACKTOP = sp; //@line 6978
     return;
    }
    _printf(11887, $vararg_buffer3) | 0; //@line 6980
    _printf(12033, $vararg_buffer5) | 0; //@line 6981
    $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6982
    _putchar(10) | 0; //@line 6983
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 225; //@line 6986
     sp = STACKTOP; //@line 6987
     STACKTOP = sp; //@line 6988
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6990
    STACKTOP = sp; //@line 6991
    return;
   }
   HEAP32[$9 >> 2] = 6; //@line 6993
   $AsyncCtx41 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6994
   $16 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6995
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 226; //@line 6998
    HEAP32[$AsyncCtx41 + 4 >> 2] = $vararg_buffer7; //@line 7000
    HEAP32[$AsyncCtx41 + 8 >> 2] = $vararg_buffer7; //@line 7002
    HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer9; //@line 7004
    HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer9; //@line 7006
    HEAP32[$AsyncCtx41 + 20 >> 2] = $2; //@line 7008
    HEAP32[$AsyncCtx41 + 24 >> 2] = $0; //@line 7010
    sp = STACKTOP; //@line 7011
    STACKTOP = sp; //@line 7012
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 7014
   do {
    if (($16 | 0) != -1018) {
     _printf(11887, $vararg_buffer7) | 0; //@line 7018
     _printf(12085, $vararg_buffer9) | 0; //@line 7019
     $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7020
     _putchar(10) | 0; //@line 7021
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 227; //@line 7024
      HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 7026
      HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 7028
      sp = STACKTOP; //@line 7029
      STACKTOP = sp; //@line 7030
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7032
      break;
     }
    }
   } while (0);
   $26 = $0 + 1892 | 0; //@line 7037
   $27 = HEAP32[$26 >> 2] | 0; //@line 7038
   if (!$27) {
    STACKTOP = sp; //@line 7041
    return;
   }
   $31 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7045
   $33 = HEAP32[$27 + 4 >> 2] | 0; //@line 7047
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7048
   FUNCTION_TABLE_vii[$33 & 31]($2, $0 + 1880 | 0); //@line 7049
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 228; //@line 7052
    HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 7054
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7056
    HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 7058
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7060
    sp = STACKTOP; //@line 7061
    STACKTOP = sp; //@line 7062
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7064
   $38 = $2 + 12 | 0; //@line 7066
   HEAP32[$38 >> 2] = HEAP32[$26 >> 2]; //@line 7067
   $AsyncCtx37 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7068
   $39 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($31, $2, 10) | 0; //@line 7069
   if (___async) {
    HEAP32[$AsyncCtx37 >> 2] = 229; //@line 7072
    HEAP32[$AsyncCtx37 + 4 >> 2] = $38; //@line 7074
    HEAP32[$AsyncCtx37 + 8 >> 2] = $2; //@line 7076
    sp = STACKTOP; //@line 7077
    STACKTOP = sp; //@line 7078
    return;
   }
   _emscripten_free_async_context($AsyncCtx37 | 0); //@line 7080
   $42 = HEAP32[$38 >> 2] | 0; //@line 7081
   do {
    if ($42 | 0) {
     $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 7086
     $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7087
     FUNCTION_TABLE_vi[$45 & 1023]($2); //@line 7088
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 230; //@line 7091
      HEAP32[$AsyncCtx12 + 4 >> 2] = $39; //@line 7093
      sp = STACKTOP; //@line 7094
      STACKTOP = sp; //@line 7095
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7097
      break;
     }
    }
   } while (0);
   if ($39 | 0) {
    STACKTOP = sp; //@line 7104
    return;
   }
   $AsyncCtx53 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7106
   _mbed_assert_internal(12851, 11935, 715); //@line 7107
   if (___async) {
    HEAP32[$AsyncCtx53 >> 2] = 231; //@line 7110
    sp = STACKTOP; //@line 7111
    STACKTOP = sp; //@line 7112
    return;
   }
   _emscripten_free_async_context($AsyncCtx53 | 0); //@line 7114
   STACKTOP = sp; //@line 7115
   return;
  }
 case 1:
  {
   if (HEAP32[$1 + 4 >> 2] | 0) {
    STACKTOP = sp; //@line 7123
    return;
   }
   $51 = $0 + 1908 | 0; //@line 7125
   $52 = HEAP32[$51 >> 2] | 0; //@line 7126
   if (!$52) {
    STACKTOP = sp; //@line 7129
    return;
   }
   $56 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7133
   $58 = HEAP32[$52 + 4 >> 2] | 0; //@line 7135
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7136
   FUNCTION_TABLE_vii[$58 & 31]($3, $0 + 1896 | 0); //@line 7137
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 232; //@line 7140
    HEAP32[$AsyncCtx15 + 4 >> 2] = $51; //@line 7142
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 7144
    HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 7146
    HEAP32[$AsyncCtx15 + 16 >> 2] = $56; //@line 7148
    HEAP32[$AsyncCtx15 + 20 >> 2] = $3; //@line 7150
    sp = STACKTOP; //@line 7151
    STACKTOP = sp; //@line 7152
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7154
   $64 = $3 + 12 | 0; //@line 7156
   HEAP32[$64 >> 2] = HEAP32[$51 >> 2]; //@line 7157
   $66 = HEAP8[$1 + 12 >> 0] | 0; //@line 7159
   $68 = HEAP8[$1 + 13 >> 0] | 0; //@line 7161
   $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7162
   $69 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($56, $3, $66, $68) | 0; //@line 7163
   if (___async) {
    HEAP32[$AsyncCtx34 >> 2] = 233; //@line 7166
    HEAP32[$AsyncCtx34 + 4 >> 2] = $64; //@line 7168
    HEAP32[$AsyncCtx34 + 8 >> 2] = $3; //@line 7170
    sp = STACKTOP; //@line 7171
    STACKTOP = sp; //@line 7172
    return;
   }
   _emscripten_free_async_context($AsyncCtx34 | 0); //@line 7174
   $72 = HEAP32[$64 >> 2] | 0; //@line 7175
   do {
    if ($72 | 0) {
     $75 = HEAP32[$72 + 8 >> 2] | 0; //@line 7180
     $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7181
     FUNCTION_TABLE_vi[$75 & 1023]($3); //@line 7182
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 234; //@line 7185
      HEAP32[$AsyncCtx19 + 4 >> 2] = $69; //@line 7187
      sp = STACKTOP; //@line 7188
      STACKTOP = sp; //@line 7189
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7191
      break;
     }
    }
   } while (0);
   if ($69 | 0) {
    STACKTOP = sp; //@line 7198
    return;
   }
   $AsyncCtx49 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7200
   _mbed_assert_internal(12851, 11935, 737); //@line 7201
   if (___async) {
    HEAP32[$AsyncCtx49 >> 2] = 235; //@line 7204
    sp = STACKTOP; //@line 7205
    STACKTOP = sp; //@line 7206
    return;
   }
   _emscripten_free_async_context($AsyncCtx49 | 0); //@line 7208
   STACKTOP = sp; //@line 7209
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7213
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3423
 HEAP32[$0 >> 2] = 560; //@line 3424
 $19 = $0 + 4 | 0; //@line 3425
 HEAP32[$19 >> 2] = 0; //@line 3426
 HEAP32[$19 + 4 >> 2] = 0; //@line 3426
 HEAP32[$19 + 8 >> 2] = 0; //@line 3426
 HEAP32[$19 + 12 >> 2] = 0; //@line 3426
 HEAP32[$19 + 16 >> 2] = 0; //@line 3426
 HEAP32[$19 + 20 >> 2] = 0; //@line 3426
 _gpio_init_out_ex($19, $4, 1); //@line 3427
 $20 = $0 + 28 | 0; //@line 3428
 HEAP32[$20 >> 2] = 0; //@line 3429
 HEAP32[$20 + 4 >> 2] = 0; //@line 3429
 HEAP32[$20 + 8 >> 2] = 0; //@line 3429
 HEAP32[$20 + 12 >> 2] = 0; //@line 3429
 HEAP32[$20 + 16 >> 2] = 0; //@line 3429
 HEAP32[$20 + 20 >> 2] = 0; //@line 3429
 _gpio_init_in($20, $5); //@line 3430
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 3432
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 3434
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 3436
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 3438
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 3440
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 3442
 $27 = $0 + 484 | 0; //@line 3443
 HEAP32[$27 >> 2] = 0; //@line 3444
 HEAP32[$27 + 4 >> 2] = 0; //@line 3444
 HEAP32[$27 + 8 >> 2] = 0; //@line 3444
 HEAP32[$27 + 12 >> 2] = 0; //@line 3444
 HEAP32[$27 + 16 >> 2] = 0; //@line 3444
 HEAP32[$27 + 20 >> 2] = 0; //@line 3444
 _gpio_init_out_ex($27, $12, 0); //@line 3445
 $28 = $0 + 508 | 0; //@line 3446
 HEAP32[$28 >> 2] = 0; //@line 3447
 HEAP32[$28 + 4 >> 2] = 0; //@line 3447
 HEAP32[$28 + 8 >> 2] = 0; //@line 3447
 HEAP32[$28 + 12 >> 2] = 0; //@line 3447
 HEAP32[$28 + 16 >> 2] = 0; //@line 3447
 HEAP32[$28 + 20 >> 2] = 0; //@line 3447
 _gpio_init_out_ex($28, $13, 0); //@line 3448
 $29 = $0 + 532 | 0; //@line 3449
 HEAP32[$29 >> 2] = 0; //@line 3450
 HEAP32[$29 + 4 >> 2] = 0; //@line 3450
 HEAP32[$29 + 8 >> 2] = 0; //@line 3450
 HEAP32[$29 + 12 >> 2] = 0; //@line 3450
 HEAP32[$29 + 16 >> 2] = 0; //@line 3450
 HEAP32[$29 + 20 >> 2] = 0; //@line 3450
 _gpio_init_out_ex($29, $14, 0); //@line 3451
 $30 = $0 + 556 | 0; //@line 3452
 HEAP32[$30 >> 2] = 0; //@line 3453
 HEAP32[$30 + 4 >> 2] = 0; //@line 3453
 HEAP32[$30 + 8 >> 2] = 0; //@line 3453
 HEAP32[$30 + 12 >> 2] = 0; //@line 3453
 HEAP32[$30 + 16 >> 2] = 0; //@line 3453
 HEAP32[$30 + 20 >> 2] = 0; //@line 3453
 _gpio_init_out_ex($30, $15, 0); //@line 3454
 $31 = $0 + 580 | 0; //@line 3455
 HEAP32[$31 >> 2] = 0; //@line 3456
 HEAP32[$31 + 4 >> 2] = 0; //@line 3456
 HEAP32[$31 + 8 >> 2] = 0; //@line 3456
 HEAP32[$31 + 12 >> 2] = 0; //@line 3456
 HEAP32[$31 + 16 >> 2] = 0; //@line 3456
 HEAP32[$31 + 20 >> 2] = 0; //@line 3456
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 3457
 $32 = $0 + 604 | 0; //@line 3458
 HEAP32[$32 >> 2] = 0; //@line 3459
 HEAP32[$32 + 4 >> 2] = 0; //@line 3459
 HEAP32[$32 + 8 >> 2] = 0; //@line 3459
 HEAP32[$32 + 12 >> 2] = 0; //@line 3459
 HEAP32[$32 + 16 >> 2] = 0; //@line 3459
 HEAP32[$32 + 20 >> 2] = 0; //@line 3459
 _gpio_init_out($32, $17); //@line 3460
 $33 = $0 + 628 | 0; //@line 3461
 HEAP32[$33 >> 2] = 0; //@line 3462
 HEAP32[$33 + 4 >> 2] = 0; //@line 3462
 HEAP32[$33 + 8 >> 2] = 0; //@line 3462
 HEAP32[$33 + 12 >> 2] = 0; //@line 3462
 HEAP32[$33 + 16 >> 2] = 0; //@line 3462
 HEAP32[$33 + 20 >> 2] = 0; //@line 3462
 _gpio_init_out($33, $18); //@line 3463
 $34 = $0 + 1048 | 0; //@line 3464
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3465
 __ZN4mbed10TimerEventC2Ev($34); //@line 3466
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 148; //@line 3469
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 3471
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 3473
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 3475
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 3477
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 3479
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 3481
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 3483
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 3485
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 3487
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 3489
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 3491
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 3493
  sp = STACKTOP; //@line 3494
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3497
 $47 = $0 + 1088 | 0; //@line 3498
 HEAP32[$47 >> 2] = 0; //@line 3499
 HEAP32[$47 + 4 >> 2] = 0; //@line 3499
 HEAP32[$47 + 8 >> 2] = 0; //@line 3499
 HEAP32[$47 + 12 >> 2] = 0; //@line 3499
 HEAP8[$0 + 1104 >> 0] = 1; //@line 3501
 HEAP32[$34 >> 2] = 684; //@line 3502
 $49 = $0 + 1112 | 0; //@line 3503
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3504
 __ZN4mbed10TimerEventC2Ev($49); //@line 3505
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 149; //@line 3508
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 3510
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 3512
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 3514
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 3516
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 3518
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 3520
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 3522
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 3524
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 3526
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 3528
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 3530
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 3532
  sp = STACKTOP; //@line 3533
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3536
 $62 = $0 + 1152 | 0; //@line 3537
 HEAP32[$62 >> 2] = 0; //@line 3538
 HEAP32[$62 + 4 >> 2] = 0; //@line 3538
 HEAP32[$62 + 8 >> 2] = 0; //@line 3538
 HEAP32[$62 + 12 >> 2] = 0; //@line 3538
 HEAP8[$0 + 1168 >> 0] = 1; //@line 3540
 HEAP32[$49 >> 2] = 684; //@line 3541
 $64 = $0 + 1176 | 0; //@line 3542
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3543
 __ZN4mbed10TimerEventC2Ev($64); //@line 3544
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 150; //@line 3547
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 3549
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3551
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 3553
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 3555
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 3557
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 3559
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 3561
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 3563
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 3565
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 3567
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 3569
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 3571
  sp = STACKTOP; //@line 3572
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3575
 $77 = $0 + 1216 | 0; //@line 3576
 HEAP32[$77 >> 2] = 0; //@line 3577
 HEAP32[$77 + 4 >> 2] = 0; //@line 3577
 HEAP32[$77 + 8 >> 2] = 0; //@line 3577
 HEAP32[$77 + 12 >> 2] = 0; //@line 3577
 HEAP8[$0 + 1232 >> 0] = 1; //@line 3579
 HEAP32[$64 >> 2] = 684; //@line 3580
 $79 = $0 + 1240 | 0; //@line 3581
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 3582
 __ZN4mbed10TimerEventC2Ev($79); //@line 3583
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 3586
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 3588
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3590
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 3592
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 3594
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 3596
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 3598
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 3600
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 3602
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 3604
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 3606
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 3608
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 3610
  sp = STACKTOP; //@line 3611
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3614
 $92 = $0 + 1280 | 0; //@line 3615
 HEAP32[$92 >> 2] = 0; //@line 3616
 HEAP32[$92 + 4 >> 2] = 0; //@line 3616
 HEAP32[$92 + 8 >> 2] = 0; //@line 3616
 HEAP32[$92 + 12 >> 2] = 0; //@line 3616
 HEAP8[$0 + 1296 >> 0] = 1; //@line 3618
 HEAP32[$79 >> 2] = 684; //@line 3619
 HEAP32[$0 + 668 >> 2] = $16; //@line 3621
 HEAP32[$0 + 672 >> 2] = $17; //@line 3623
 HEAP32[$0 + 652 >> 2] = $12; //@line 3625
 HEAP32[$0 + 656 >> 2] = $13; //@line 3627
 HEAP32[$0 + 664 >> 2] = $15; //@line 3629
 HEAP32[$0 + 660 >> 2] = $14; //@line 3631
 HEAP32[$0 + 676 >> 2] = $18; //@line 3633
 HEAP32[$0 + 680 >> 2] = $10; //@line 3635
 HEAP32[$0 + 684 >> 2] = $11; //@line 3637
 HEAP32[$0 + 784 >> 2] = 0; //@line 3639
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(4, $0 | 0) | 0; //@line 3642
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 3646
 $106 = _emscripten_asm_const_ii(4, $0 | 0) | 0; //@line 3647
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_56($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $106 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24542
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24544
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24546
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24548
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24550
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24552
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24554
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24556
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 24558
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24560
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24562
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24564
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24566
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24568
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24570
 $30 = HEAP8[$0 + 60 >> 0] & 1; //@line 24573
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24575
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 24579
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($8) | 0) {
   _printf(12967, $32) | 0; //@line 24588
   _printf(13114, $36) | 0; //@line 24589
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 24590
   _putchar(10) | 0; //@line 24591
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 402; //@line 24594
    $44 = $ReallocAsyncCtx3 + 4 | 0; //@line 24595
    HEAP32[$44 >> 2] = $4; //@line 24596
    $45 = $ReallocAsyncCtx3 + 8 | 0; //@line 24597
    HEAP32[$45 >> 2] = $6; //@line 24598
    $46 = $ReallocAsyncCtx3 + 12 | 0; //@line 24599
    HEAP32[$46 >> 2] = $8; //@line 24600
    $47 = $ReallocAsyncCtx3 + 16 | 0; //@line 24601
    HEAP32[$47 >> 2] = $10; //@line 24602
    $48 = $ReallocAsyncCtx3 + 20 | 0; //@line 24603
    HEAP32[$48 >> 2] = $12; //@line 24604
    $49 = $ReallocAsyncCtx3 + 24 | 0; //@line 24605
    HEAP32[$49 >> 2] = $14; //@line 24606
    $50 = $ReallocAsyncCtx3 + 28 | 0; //@line 24607
    HEAP8[$50 >> 0] = $16; //@line 24608
    $51 = $ReallocAsyncCtx3 + 32 | 0; //@line 24609
    HEAP32[$51 >> 2] = $2; //@line 24610
    $52 = $ReallocAsyncCtx3 + 36 | 0; //@line 24611
    HEAP32[$52 >> 2] = $18; //@line 24612
    $53 = $ReallocAsyncCtx3 + 40 | 0; //@line 24613
    HEAP32[$53 >> 2] = $20; //@line 24614
    $54 = $ReallocAsyncCtx3 + 44 | 0; //@line 24615
    HEAP32[$54 >> 2] = $22; //@line 24616
    $55 = $ReallocAsyncCtx3 + 48 | 0; //@line 24617
    HEAP32[$55 >> 2] = $24; //@line 24618
    $56 = $ReallocAsyncCtx3 + 52 | 0; //@line 24619
    HEAP32[$56 >> 2] = $26; //@line 24620
    $57 = $ReallocAsyncCtx3 + 56 | 0; //@line 24621
    HEAP32[$57 >> 2] = $28; //@line 24622
    $58 = $ReallocAsyncCtx3 + 60 | 0; //@line 24623
    $$expand_i1_val = $30 & 1; //@line 24624
    HEAP8[$58 >> 0] = $$expand_i1_val; //@line 24625
    sp = STACKTOP; //@line 24626
    return;
   }
   ___async_unwind = 0; //@line 24629
   HEAP32[$ReallocAsyncCtx3 >> 2] = 402; //@line 24630
   $44 = $ReallocAsyncCtx3 + 4 | 0; //@line 24631
   HEAP32[$44 >> 2] = $4; //@line 24632
   $45 = $ReallocAsyncCtx3 + 8 | 0; //@line 24633
   HEAP32[$45 >> 2] = $6; //@line 24634
   $46 = $ReallocAsyncCtx3 + 12 | 0; //@line 24635
   HEAP32[$46 >> 2] = $8; //@line 24636
   $47 = $ReallocAsyncCtx3 + 16 | 0; //@line 24637
   HEAP32[$47 >> 2] = $10; //@line 24638
   $48 = $ReallocAsyncCtx3 + 20 | 0; //@line 24639
   HEAP32[$48 >> 2] = $12; //@line 24640
   $49 = $ReallocAsyncCtx3 + 24 | 0; //@line 24641
   HEAP32[$49 >> 2] = $14; //@line 24642
   $50 = $ReallocAsyncCtx3 + 28 | 0; //@line 24643
   HEAP8[$50 >> 0] = $16; //@line 24644
   $51 = $ReallocAsyncCtx3 + 32 | 0; //@line 24645
   HEAP32[$51 >> 2] = $2; //@line 24646
   $52 = $ReallocAsyncCtx3 + 36 | 0; //@line 24647
   HEAP32[$52 >> 2] = $18; //@line 24648
   $53 = $ReallocAsyncCtx3 + 40 | 0; //@line 24649
   HEAP32[$53 >> 2] = $20; //@line 24650
   $54 = $ReallocAsyncCtx3 + 44 | 0; //@line 24651
   HEAP32[$54 >> 2] = $22; //@line 24652
   $55 = $ReallocAsyncCtx3 + 48 | 0; //@line 24653
   HEAP32[$55 >> 2] = $24; //@line 24654
   $56 = $ReallocAsyncCtx3 + 52 | 0; //@line 24655
   HEAP32[$56 >> 2] = $26; //@line 24656
   $57 = $ReallocAsyncCtx3 + 56 | 0; //@line 24657
   HEAP32[$57 >> 2] = $28; //@line 24658
   $58 = $ReallocAsyncCtx3 + 60 | 0; //@line 24659
   $$expand_i1_val = $30 & 1; //@line 24660
   HEAP8[$58 >> 0] = $$expand_i1_val; //@line 24661
   sp = STACKTOP; //@line 24662
   return;
  }
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 1; //@line 24668
 }
 $61 = $22 & 255; //@line 24672
 $62 = $6 + 638 | 0; //@line 24673
 if (__Z15decrypt_payloadPKhtS0_jhjPh($18 + $20 | 0, $61, $24, $26, 1, $28, $62) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 13; //@line 24679
 }
 if ($30) {
  $$3$off0204 = 6; //@line 24682
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 12 >> 2] = $62; //@line 24686
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 16 >> 1] = $61; //@line 24689
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 18 >> 0] = 1; //@line 24692
  $76 = (__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 | 0; //@line 24696
  if ($16 & 32) {
   HEAP8[$76 >> 0] = 1; //@line 24698
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 28 >> 0] = 1; //@line 24701
   $79 = HEAP32[$10 >> 2] | 0; //@line 24702
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 24704
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($79, $6 + 1076 | 0); //@line 24705
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 24708
    $81 = $ReallocAsyncCtx23 + 4 | 0; //@line 24709
    HEAP32[$81 >> 2] = $6; //@line 24710
    $82 = $ReallocAsyncCtx23 + 8 | 0; //@line 24711
    HEAP32[$82 >> 2] = $10; //@line 24712
    $83 = $ReallocAsyncCtx23 + 12 | 0; //@line 24713
    HEAP32[$83 >> 2] = $12; //@line 24714
    $84 = $ReallocAsyncCtx23 + 16 | 0; //@line 24715
    HEAP32[$84 >> 2] = $14; //@line 24716
    sp = STACKTOP; //@line 24717
    return;
   }
   ___async_unwind = 0; //@line 24720
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 24721
   $81 = $ReallocAsyncCtx23 + 4 | 0; //@line 24722
   HEAP32[$81 >> 2] = $6; //@line 24723
   $82 = $ReallocAsyncCtx23 + 8 | 0; //@line 24724
   HEAP32[$82 >> 2] = $10; //@line 24725
   $83 = $ReallocAsyncCtx23 + 12 | 0; //@line 24726
   HEAP32[$83 >> 2] = $12; //@line 24727
   $84 = $ReallocAsyncCtx23 + 16 | 0; //@line 24728
   HEAP32[$84 >> 2] = $14; //@line 24729
   sp = STACKTOP; //@line 24730
   return;
  }
  HEAP8[$76 >> 0] = 0; //@line 24733
  if ((HEAPU8[$6 + 895 >> 0] | 0) > (HEAPU8[$6 + 894 >> 0] | 0)) {
   $90 = HEAP32[$10 >> 2] | 0; //@line 24740
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 24742
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($90, $6 + 1076 | 0); //@line 24743
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 24746
    $92 = $ReallocAsyncCtx22 + 4 | 0; //@line 24747
    HEAP32[$92 >> 2] = $6; //@line 24748
    $93 = $ReallocAsyncCtx22 + 8 | 0; //@line 24749
    HEAP32[$93 >> 2] = $10; //@line 24750
    $94 = $ReallocAsyncCtx22 + 12 | 0; //@line 24751
    HEAP32[$94 >> 2] = $12; //@line 24752
    $95 = $ReallocAsyncCtx22 + 16 | 0; //@line 24753
    HEAP32[$95 >> 2] = $14; //@line 24754
    sp = STACKTOP; //@line 24755
    return;
   }
   ___async_unwind = 0; //@line 24758
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 24759
   $92 = $ReallocAsyncCtx22 + 4 | 0; //@line 24760
   HEAP32[$92 >> 2] = $6; //@line 24761
   $93 = $ReallocAsyncCtx22 + 8 | 0; //@line 24762
   HEAP32[$93 >> 2] = $10; //@line 24763
   $94 = $ReallocAsyncCtx22 + 12 | 0; //@line 24764
   HEAP32[$94 >> 2] = $12; //@line 24765
   $95 = $ReallocAsyncCtx22 + 16 | 0; //@line 24766
   HEAP32[$95 >> 2] = $14; //@line 24767
   sp = STACKTOP; //@line 24768
   return;
  } else {
   $$3$off0204 = 2; //@line 24771
  }
 }
 $96 = $6 + 944 | 0; //@line 24774
 HEAP8[$96 >> 0] = $$3$off0204 | HEAP8[$96 >> 0] & -7; //@line 24778
 $100 = $6 + 944 | 0; //@line 24779
 HEAP8[$100 >> 0] = HEAP8[$100 >> 0] | 32; //@line 24782
 $103 = HEAP32[$10 >> 2] | 0; //@line 24783
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 24785
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($103, $6 + 996 | 0, 1); //@line 24786
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 24789
  $105 = $ReallocAsyncCtx17 + 4 | 0; //@line 24790
  HEAP32[$105 >> 2] = $12; //@line 24791
  $106 = $ReallocAsyncCtx17 + 8 | 0; //@line 24792
  HEAP32[$106 >> 2] = $14; //@line 24793
  sp = STACKTOP; //@line 24794
  return;
 }
 ___async_unwind = 0; //@line 24797
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 24798
 $105 = $ReallocAsyncCtx17 + 4 | 0; //@line 24799
 HEAP32[$105 >> 2] = $12; //@line 24800
 $106 = $ReallocAsyncCtx17 + 8 | 0; //@line 24801
 HEAP32[$106 >> 2] = $14; //@line 24802
 sp = STACKTOP; //@line 24803
 return;
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4565
 $1 = $0 + 4 | 0; //@line 4566
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 4575
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4576
 FUNCTION_TABLE_v[$7 & 15](); //@line 4577
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 697; //@line 4580
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4582
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4584
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 4586
  sp = STACKTOP; //@line 4587
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4590
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 4593
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4594
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 4595
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 698; //@line 4598
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 4600
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 4602
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 4604
  sp = STACKTOP; //@line 4605
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4608
 $18 = HEAP32[$14 >> 2] | 0; //@line 4609
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4613
   _mbed_assert_internal(14513, 14515, 41); //@line 4614
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 699; //@line 4617
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 4619
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 4621
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 4623
    HEAP32[$AsyncCtx20 + 16 >> 2] = $14; //@line 4625
    sp = STACKTOP; //@line 4626
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 4629
    $$0 = 1e6; //@line 4630
    break;
   }
  } else {
   $$0 = $18; //@line 4634
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 4638
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4643
   _mbed_assert_internal(14513, 14515, 47); //@line 4644
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 700; //@line 4647
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 4649
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 4651
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 4653
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 4655
    sp = STACKTOP; //@line 4656
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 4659
    $$037 = 32; //@line 4660
    break;
   }
  } else {
   $$037 = $25; //@line 4664
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 4668
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 4669
 $34 = tempRet0; //@line 4670
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 4671
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 4673
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 4675
 $40 = tempRet0; //@line 4676
 $41 = HEAP32[$1 >> 2] | 0; //@line 4677
 HEAP32[$41 >> 2] = 0; //@line 4678
 HEAP32[$41 + 4 >> 2] = 0; //@line 4680
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4683
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 4684
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 4685
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 701; //@line 4688
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 4690
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 4692
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 4694
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 4696
  $52 = $AsyncCtx6 + 24 | 0; //@line 4698
  HEAP32[$52 >> 2] = $39; //@line 4700
  HEAP32[$52 + 4 >> 2] = $40; //@line 4703
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 4705
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 4707
  sp = STACKTOP; //@line 4708
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 4711
 $58 = HEAP32[$1 >> 2] | 0; //@line 4712
 $59 = $58 + 32 | 0; //@line 4713
 HEAP32[$59 >> 2] = $46; //@line 4714
 $60 = $58 + 40 | 0; //@line 4715
 $61 = $60; //@line 4716
 HEAP32[$61 >> 2] = 0; //@line 4718
 HEAP32[$61 + 4 >> 2] = 0; //@line 4721
 $65 = $58 + 8 | 0; //@line 4722
 HEAP32[$65 >> 2] = $$0; //@line 4723
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 4724
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 4726
 $70 = $58 + 12 | 0; //@line 4728
 HEAP32[$70 >> 2] = $68; //@line 4729
 HEAP32[$58 + 16 >> 2] = $32; //@line 4731
 $73 = $58 + 24 | 0; //@line 4733
 HEAP32[$73 >> 2] = $39; //@line 4735
 HEAP32[$73 + 4 >> 2] = $40; //@line 4738
 $77 = $58 + 48 | 0; //@line 4739
 $78 = $77; //@line 4740
 HEAP32[$78 >> 2] = 0; //@line 4742
 HEAP32[$78 + 4 >> 2] = 0; //@line 4745
 HEAP8[$58 + 56 >> 0] = 1; //@line 4747
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4750
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4751
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 4752
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 702; //@line 4755
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 4757
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 4759
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 4761
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 4763
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 4765
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 4767
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 4769
  sp = STACKTOP; //@line 4770
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 4773
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 4782
  HEAP32[$59 >> 2] = $86; //@line 4783
  $102 = HEAP32[$65 >> 2] | 0; //@line 4784
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 4793
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 4797
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 4799
    $106 = tempRet0; //@line 4800
    $109 = $60; //@line 4803
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 4809
    $116 = tempRet0; //@line 4810
    $117 = $60; //@line 4811
    HEAP32[$117 >> 2] = $115; //@line 4813
    HEAP32[$117 + 4 >> 2] = $116; //@line 4816
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 4823
     $174 = $106; //@line 4823
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 4825
     $127 = tempRet0; //@line 4826
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 4827
     $130 = $60; //@line 4829
     HEAP32[$130 >> 2] = $128; //@line 4831
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 4834
     $173 = $126; //@line 4835
     $174 = $127; //@line 4835
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 4840
      $174 = 0; //@line 4840
      break;
     }
    default:
     {
      label = 22; //@line 4844
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 4850
   $135 = tempRet0; //@line 4851
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 4852
   $137 = tempRet0; //@line 4853
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 4854
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 4856
   $142 = $60; //@line 4858
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 4864
   $149 = tempRet0; //@line 4865
   $150 = $60; //@line 4866
   HEAP32[$150 >> 2] = $148; //@line 4868
   HEAP32[$150 + 4 >> 2] = $149; //@line 4871
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 4878
    $174 = $137; //@line 4878
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 4880
    $160 = tempRet0; //@line 4881
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 4882
    $163 = $60; //@line 4884
    HEAP32[$163 >> 2] = $161; //@line 4886
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 4889
    $173 = $159; //@line 4890
    $174 = $160; //@line 4890
   }
  }
  $167 = $77; //@line 4893
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 4899
  $177 = $77; //@line 4901
  HEAP32[$177 >> 2] = $175; //@line 4903
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 4906
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4908
 _schedule_interrupt($0); //@line 4909
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 703; //@line 4912
  sp = STACKTOP; //@line 4913
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 4916
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$026$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$i4751 = 0, $$028$lcssa = 0, $$02862 = 0, $$029$be = 0, $$029$lcssa = 0, $$02961 = 0, $$1 = 0, $$127$i53 = 0, $$130$$$$i = 0, $$2$i = 0, $$2$i54 = 0, $$256 = 0, $$3 = 0, $$3$i52 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$pre = 0, $$sroa$034$0$lcssa = 0, $$sroa$034$058 = 0, $$sroa$1038$0$lcssa = 0, $$sroa$1038$060 = 0, $$sroa$636$0$lcssa = 0, $$sroa$636$059 = 0, $10 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $69 = 0, $7 = 0, $71 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv80 = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 24637
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 24641
   $$029$lcssa = 7; //@line 24641
   $$sroa$034$0$lcssa = 0; //@line 24641
   $$sroa$1038$0$lcssa = 0; //@line 24641
   $$sroa$636$0$lcssa = 0; //@line 24641
   $92 = 0; //@line 24641
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 24643
   $10 = $0 + 20 | 0; //@line 24644
   $11 = $0 + 112 | 0; //@line 24645
   $$02862 = 0; //@line 24646
   $$02961 = 7; //@line 24646
   $$lcssa76 = 0; //@line 24646
   $$sroa$034$058 = 0; //@line 24646
   $$sroa$1038$060 = 0; //@line 24646
   $$sroa$636$059 = 0; //@line 24646
   $13 = 0; //@line 24646
   while (1) {
    $12 = $9 + $13 | 0; //@line 24648
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02862; //@line 24652
     $$029$lcssa = $$02961; //@line 24652
     $$sroa$034$0$lcssa = $$sroa$034$058; //@line 24652
     $$sroa$1038$0$lcssa = $$sroa$1038$060; //@line 24652
     $$sroa$636$0$lcssa = $$sroa$636$059; //@line 24652
     $92 = $$lcssa76; //@line 24652
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 24656
    $18 = $17 & 15; //@line 24657
    $19 = ($17 & 255) >>> 4; //@line 24658
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 24666
    $28 = $27 & 65535; //@line 24667
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 24669
    $32 = ($30 & 255) >>> 4; //@line 24671
    $34 = $32 & 7; //@line 24673
    $35 = $30 & 15; //@line 24674
    $36 = $13 + 5 | 0; //@line 24675
    $37 = $36 & 255; //@line 24676
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 24680
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 24686
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 24689
        $$lcssa77 = $28; //@line 24689
       } else {
        $45 = $42 & 255; //@line 24692
        if ($34 << 24 >> 24 != 6) {
         $$256 = $$1; //@line 24694
         $indvars$iv = 0; //@line 24694
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$256; //@line 24701
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$256 & -2 : $$256; //@line 24709
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 24711
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 24716
           $$lcssa77 = $28; //@line 24716
           break L6;
          } else {
           $$256 = $$3; //@line 24714
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 24721
        $52 = $28; //@line 24722
        $indvars$iv80 = 0; //@line 24722
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv80 * 12 | 0) >> 2] | 0)) {
          $132 = $52; //@line 24728
         } else {
          $132 = (1 << ($indvars$iv80 & 15) | $52 & 65535) & 65535; //@line 24735
         }
         $indvars$iv80 = $indvars$iv80 + 1 | 0; //@line 24737
         if ($indvars$iv80 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 24742
          $$lcssa77 = $132; //@line 24742
          break;
         } else {
          $52 = $132; //@line 24740
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 24750
       $$lcssa77 = $28; //@line 24750
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02862 = $37; //@line 24757
     $$02961 = $$029$be; //@line 24757
     $$lcssa76 = $$lcssa77; //@line 24757
     $$sroa$034$058 = $35; //@line 24757
     $$sroa$1038$060 = $18; //@line 24757
     $$sroa$636$059 = $19; //@line 24757
     $13 = $36 & 255; //@line 24757
    } else {
     $$028$lcssa = $37; //@line 24759
     $$029$lcssa = $$029$be; //@line 24759
     $$sroa$034$0$lcssa = $35; //@line 24759
     $$sroa$1038$0$lcssa = $18; //@line 24759
     $$sroa$636$0$lcssa = $19; //@line 24759
     $92 = $$lcssa77; //@line 24759
     break L1;
    }
   }
  }
 } while (0);
 $69 = HEAP8[$1 + 7 >> 0] | 0; //@line 24768
 $71 = HEAP8[$1 + 8 >> 0] | 0; //@line 24770
 if (!(HEAP8[$1 + 6 >> 0] | 0)) {
  if ($$sroa$636$0$lcssa << 24 >> 24 == 15 & $$sroa$1038$0$lcssa << 24 >> 24 == 15) {
   $$026$i = $71; //@line 24779
   $$028$i = $69; //@line 24779
  } else {
   $$028$i4751 = $69; //@line 24781
   $$127$i53 = $71; //@line 24781
   $$2$i54 = HEAP8[$1 + 9 >> 0] | 0; //@line 24781
   $$3$i52 = 0; //@line 24781
   HEAP8[$2 >> 0] = $$028$i4751; //@line 24782
   HEAP8[$3 >> 0] = $$127$i53; //@line 24783
   HEAP8[$4 >> 0] = $$2$i54; //@line 24784
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 24785
   return $$3$i52 | 0; //@line 24786
  }
 } else {
  $$026$i = $$sroa$1038$0$lcssa; //@line 24789
  $$028$i = $$sroa$636$0$lcssa; //@line 24789
 }
 if (!($$029$lcssa << 24 >> 24)) {
  $$028$i4751 = $$028$i; //@line 24793
  $$127$i53 = $$026$i; //@line 24793
  $$2$i54 = $$sroa$034$0$lcssa; //@line 24793
  $$3$i52 = 0; //@line 24793
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24794
  HEAP8[$3 >> 0] = $$127$i53; //@line 24795
  HEAP8[$4 >> 0] = $$2$i54; //@line 24796
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24797
  return $$3$i52 | 0; //@line 24798
 }
 $83 = HEAP32[$0 + 112 >> 2] | 0; //@line 24805
 L30 : do {
  if ($$028$i << 24 >> 24 < (HEAP8[$0 + 26 >> 0] | 0) ? 1 : $$028$i << 24 >> 24 > (HEAP8[$0 + 27 >> 0] | 0)) {
   label = 24; //@line 24811
  } else {
   $88 = HEAP8[$0 + 20 >> 0] | 0; //@line 24814
   if (!($88 << 24 >> 24)) {
    label = 24; //@line 24817
   } else {
    $90 = $88 & 255; //@line 24819
    $91 = $92 & 65535; //@line 24820
    $indvars$iv$i31 = 0; //@line 24821
    while (1) {
     if (1 << ($indvars$iv$i31 & 15) & $91 | 0) {
      $98 = HEAP8[$83 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 24829
      if (!(($98 & 15) > $$028$i << 24 >> 24 ? 1 : ($98 & 255) >>> 4 << 24 >> 24 < $$028$i << 24 >> 24)) {
       $117 = $$029$lcssa; //@line 24836
       break L30;
      }
     }
     $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 24840
     if ($indvars$iv$i31 >>> 0 >= $90 >>> 0) {
      label = 24; //@line 24845
      break;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  $117 = $$029$lcssa & -3; //@line 24854
 }
 $107 = HEAP8[$0 + 22 >> 0] | 0; //@line 24857
 $112 = $$026$i << 24 >> 24 < $107 << 24 >> 24 ? 1 : $$026$i << 24 >> 24 > (HEAP8[$0 + 21 >> 0] | 0); //@line 24862
 $115 = ($107 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 24865
 $$130$$$$i = $112 ? $115 ? $117 : $117 & -5 : $117; //@line 24868
 $$$026$$026$i = $115 & $112 ? $107 : $$026$i; //@line 24870
 $119 = $$130$$$$i << 24 >> 24 == 7; //@line 24871
 $$2$i = $$sroa$034$0$lcssa << 24 >> 24 == 0 & $119 ? 1 : $$sroa$034$0$lcssa; //@line 24874
 if (!$119) {
  $$028$i4751 = $$028$i; //@line 24876
  $$127$i53 = $$$026$$026$i; //@line 24876
  $$2$i54 = $$2$i; //@line 24876
  $$3$i52 = $$130$$$$i; //@line 24876
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24877
  HEAP8[$3 >> 0] = $$127$i53; //@line 24878
  HEAP8[$4 >> 0] = $$2$i54; //@line 24879
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24880
  return $$3$i52 | 0; //@line 24881
 }
 $121 = $0 + 120 | 0; //@line 24883
 $123 = $0 + 128 | 0; //@line 24885
 _memset(HEAP32[$121 >> 2] | 0, 0, HEAPU8[$123 >> 0] << 1 | 0) | 0; //@line 24889
 $127 = HEAP32[$121 >> 2] | 0; //@line 24890
 $128 = HEAP8[$123 >> 0] | 0; //@line 24891
 if (!(($127 | 0) != 0 & $128 << 24 >> 24 != 0)) {
  $$028$i4751 = $$028$i; //@line 24896
  $$127$i53 = $$$026$$026$i; //@line 24896
  $$2$i54 = $$2$i; //@line 24896
  $$3$i52 = 7; //@line 24896
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24897
  HEAP8[$3 >> 0] = $$127$i53; //@line 24898
  HEAP8[$4 >> 0] = $$2$i54; //@line 24899
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24900
  return $$3$i52 | 0; //@line 24901
 }
 $wide$trip$count$i = $128 & 255; //@line 24903
 $indvars$iv$i = 0; //@line 24904
 do {
  HEAP16[$127 + ($indvars$iv$i << 1) >> 1] = $92; //@line 24907
  $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 24908
 } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
 $$028$i4751 = $$028$i; //@line 24911
 $$127$i53 = $$$026$$026$i; //@line 24911
 $$2$i54 = $$2$i; //@line 24911
 $$3$i52 = 7; //@line 24911
 HEAP8[$2 >> 0] = $$028$i4751; //@line 24917
 HEAP8[$3 >> 0] = $$127$i53; //@line 24918
 HEAP8[$4 >> 0] = $$2$i54; //@line 24919
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 24920
 return $$3$i52 | 0; //@line 24921
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 931
 STACKTOP = STACKTOP + 16 | 0; //@line 932
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 932
 $6 = sp; //@line 933
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 937
  STACKTOP = sp; //@line 938
  return $$044 | 0; //@line 938
 }
 $10 = ($2 | 0) == 0; //@line 941
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 944
   STACKTOP = sp; //@line 945
   return $$044 | 0; //@line 945
  }
  $109 = $3 + 1 | 0; //@line 947
  $110 = $3 + 2 | 0; //@line 948
  $111 = $3 + 3 | 0; //@line 949
  $112 = $3 + 4 | 0; //@line 950
  $113 = $3 + 5 | 0; //@line 951
  $114 = $3 + 6 | 0; //@line 952
  $115 = $3 + 7 | 0; //@line 953
  $116 = $3 + 8 | 0; //@line 954
  $117 = $3 + 9 | 0; //@line 955
  $118 = $3 + 10 | 0; //@line 956
  $119 = $3 + 11 | 0; //@line 957
  $120 = $3 + 12 | 0; //@line 958
  $121 = $3 + 13 | 0; //@line 959
  $122 = $3 + 14 | 0; //@line 960
  $123 = $3 + 15 | 0; //@line 961
  $$04056 = $5; //@line 962
  $$04255 = $4; //@line 962
  $$04554 = $2; //@line 962
  while (1) {
   dest = $6; //@line 964
   src = $$04255; //@line 964
   stop = dest + 16 | 0; //@line 964
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 964
    dest = dest + 1 | 0; //@line 964
    src = src + 1 | 0; //@line 964
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 965
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 969
   $127 = $$04056 + 1 | 0; //@line 970
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 974
   $131 = $$04056 + 2 | 0; //@line 975
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 979
   $135 = $$04056 + 3 | 0; //@line 980
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 984
   $139 = $$04056 + 4 | 0; //@line 985
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 989
   $143 = $$04056 + 5 | 0; //@line 990
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 994
   $147 = $$04056 + 6 | 0; //@line 995
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 999
   $151 = $$04056 + 7 | 0; //@line 1000
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1004
   $155 = $$04056 + 8 | 0; //@line 1005
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1009
   $159 = $$04056 + 9 | 0; //@line 1010
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1014
   $163 = $$04056 + 10 | 0; //@line 1015
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1019
   $167 = $$04056 + 11 | 0; //@line 1020
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1024
   $171 = $$04056 + 12 | 0; //@line 1025
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1029
   $175 = $$04056 + 13 | 0; //@line 1030
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1034
   $179 = $$04056 + 14 | 0; //@line 1035
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1039
   $183 = $$04056 + 15 | 0; //@line 1040
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1044
   dest = $3; //@line 1045
   src = $6; //@line 1045
   stop = dest + 16 | 0; //@line 1045
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1045
    dest = dest + 1 | 0; //@line 1045
    src = src + 1 | 0; //@line 1045
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1048
   if (!$$04554) {
    $$044 = 0; //@line 1051
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1054
    $$04255 = $$04255 + 16 | 0; //@line 1054
   }
  }
  STACKTOP = sp; //@line 1057
  return $$044 | 0; //@line 1057
 }
 if ($10) {
  $$044 = 0; //@line 1060
  STACKTOP = sp; //@line 1061
  return $$044 | 0; //@line 1061
 }
 $12 = $3 + 1 | 0; //@line 1064
 $13 = $3 + 2 | 0; //@line 1065
 $14 = $3 + 3 | 0; //@line 1066
 $15 = $3 + 4 | 0; //@line 1067
 $16 = $3 + 5 | 0; //@line 1068
 $17 = $3 + 6 | 0; //@line 1069
 $18 = $3 + 7 | 0; //@line 1070
 $19 = $3 + 8 | 0; //@line 1071
 $20 = $3 + 9 | 0; //@line 1072
 $21 = $3 + 10 | 0; //@line 1073
 $22 = $3 + 11 | 0; //@line 1074
 $23 = $3 + 12 | 0; //@line 1075
 $24 = $3 + 13 | 0; //@line 1076
 $25 = $3 + 14 | 0; //@line 1077
 $26 = $3 + 15 | 0; //@line 1078
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1080
  $$14359$us = $4; //@line 1080
  $$14658$us = $2; //@line 1080
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1085
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1091
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1097
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1103
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1109
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1115
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1121
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1127
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1133
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1139
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1145
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1151
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1157
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1163
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1169
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1175
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1176
   dest = $3; //@line 1177
   src = $$14160$us; //@line 1177
   stop = dest + 16 | 0; //@line 1177
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1177
    dest = dest + 1 | 0; //@line 1177
    src = src + 1 | 0; //@line 1177
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1180
   if (!$$14658$us) {
    $$044 = 0; //@line 1183
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1186
    $$14359$us = $$14359$us + 16 | 0; //@line 1186
   }
  }
  STACKTOP = sp; //@line 1189
  return $$044 | 0; //@line 1189
 } else {
  $$14160 = $5; //@line 1191
  $$14359 = $4; //@line 1191
  $$14658 = $2; //@line 1191
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1196
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1202
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1208
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1214
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 1220
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 1226
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 1232
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 1238
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 1244
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 1250
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 1256
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 1262
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 1268
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 1274
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 1280
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 1286
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 1287
   dest = $3; //@line 1288
   src = $$14160; //@line 1288
   stop = dest + 16 | 0; //@line 1288
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1288
    dest = dest + 1 | 0; //@line 1288
    src = src + 1 | 0; //@line 1288
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 1291
   if (!$$14658) {
    $$044 = 0; //@line 1294
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 1297
    $$14359 = $$14359 + 16 | 0; //@line 1297
   }
  }
  STACKTOP = sp; //@line 1300
  return $$044 | 0; //@line 1300
 }
 return 0; //@line 1302
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4933
 $1 = $0 + 4 | 0; //@line 4934
 $2 = HEAP32[$1 >> 2] | 0; //@line 4935
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4938
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4939
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 4940
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 704; //@line 4943
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4945
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4947
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4949
  sp = STACKTOP; //@line 4950
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4953
 $10 = HEAP32[$1 >> 2] | 0; //@line 4954
 $11 = $10 + 32 | 0; //@line 4955
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 4959
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 4964
  HEAP32[$14 >> 2] = $6; //@line 4965
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 4967
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 4976
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 4980
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 4982
    $25 = tempRet0; //@line 4983
    $28 = $2 + 40 | 0; //@line 4986
    $29 = $28; //@line 4987
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 4993
    $36 = tempRet0; //@line 4994
    $37 = $28; //@line 4995
    HEAP32[$37 >> 2] = $35; //@line 4997
    HEAP32[$37 + 4 >> 2] = $36; //@line 5000
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 5007
     $96 = $25; //@line 5007
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5009
     $47 = tempRet0; //@line 5010
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5011
     $50 = $28; //@line 5013
     HEAP32[$50 >> 2] = $48; //@line 5015
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5018
     $95 = $46; //@line 5019
     $96 = $47; //@line 5019
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 5024
      $96 = 0; //@line 5024
      break;
     }
    default:
     {
      label = 7; //@line 5028
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5034
   $55 = tempRet0; //@line 5035
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5036
   $57 = tempRet0; //@line 5037
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5038
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5040
   $62 = $2 + 40 | 0; //@line 5042
   $63 = $62; //@line 5043
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5049
   $70 = tempRet0; //@line 5050
   $71 = $62; //@line 5051
   HEAP32[$71 >> 2] = $69; //@line 5053
   HEAP32[$71 + 4 >> 2] = $70; //@line 5056
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 5063
    $96 = $57; //@line 5063
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5065
    $81 = tempRet0; //@line 5066
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5067
    $84 = $62; //@line 5069
    HEAP32[$84 >> 2] = $82; //@line 5071
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5074
    $95 = $80; //@line 5075
    $96 = $81; //@line 5075
   }
  }
  $88 = $2 + 48 | 0; //@line 5078
  $89 = $88; //@line 5079
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5085
  $99 = $88; //@line 5087
  HEAP32[$99 >> 2] = $97; //@line 5089
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5092
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 5095
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5105
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5108
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5109
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 5110
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 710; //@line 5113
   sp = STACKTOP; //@line 5114
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5117
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 5122
 $109 = HEAP32[$107 >> 2] | 0; //@line 5124
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 5127
 $113 = $104; //@line 5128
 $115 = HEAP32[$113 >> 2] | 0; //@line 5130
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 5133
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5142
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5143
  FUNCTION_TABLE_v[$126 & 15](); //@line 5144
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 705; //@line 5147
   sp = STACKTOP; //@line 5148
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5151
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 5154
 $128 = tempRet0; //@line 5155
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 5157
 $132 = $10 + 24 | 0; //@line 5159
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 5164
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 5172
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 5175
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 5187
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5189
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 5193
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 5206
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 5210
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5212
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 5216
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 5223
 $161 = $2 + 32 | 0; //@line 5224
 $164 = HEAP32[$0 >> 2] | 0; //@line 5227
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 5230
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5231
  FUNCTION_TABLE_v[$166 & 15](); //@line 5232
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 706; //@line 5235
   sp = STACKTOP; //@line 5236
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5239
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 5243
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5244
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 5245
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 707; //@line 5248
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5250
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 5252
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 5254
  sp = STACKTOP; //@line 5255
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5258
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5261
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5262
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 5263
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 708; //@line 5266
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 5268
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 5270
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 5272
  sp = STACKTOP; //@line 5273
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5276
 $179 = HEAP32[$161 >> 2] | 0; //@line 5277
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5296
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5297
 FUNCTION_TABLE_v[$187 & 15](); //@line 5298
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 709; //@line 5301
  sp = STACKTOP; //@line 5302
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 5305
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$038 = 0, $$040 = 0, $101 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $122 = 0, $125 = 0, $136 = 0, $139 = 0, $142 = 0, $146 = 0, $149 = 0, $18 = 0, $21 = 0, $22 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $47 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $76 = 0, $79 = 0, $8 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23929
 $4 = HEAP8[$1 + 1 >> 0] | 0; //@line 23931
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 23933
 $7 = $0 + 4 | 0; //@line 23934
 $8 = HEAP32[$7 >> 2] | 0; //@line 23935
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 23938
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 23939
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 23940
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 617; //@line 23943
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 23945
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 23947
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 23949
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 23951
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 23953
  HEAP8[$AsyncCtx + 24 >> 0] = $4; //@line 23955
  sp = STACKTOP; //@line 23956
  return 0; //@line 23957
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23959
 $18 = HEAP32[$7 >> 2] | 0; //@line 23960
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] | 0; //@line 23963
 $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 23964
 $22 = FUNCTION_TABLE_ii[$21 & 15]($18) | 0; //@line 23965
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 618; //@line 23968
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 23970
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 23972
  HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 23974
  HEAP32[$AsyncCtx2 + 16 >> 2] = $6; //@line 23976
  HEAP8[$AsyncCtx2 + 20 >> 0] = $4; //@line 23978
  HEAP32[$AsyncCtx2 + 24 >> 2] = $7; //@line 23980
  sp = STACKTOP; //@line 23981
  return 0; //@line 23982
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23984
 $29 = $22 << 24 >> 24 == 0; //@line 23985
 $30 = HEAP32[$7 >> 2] | 0; //@line 23986
 $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 76 >> 2] | 0; //@line 23989
 $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 23990
 FUNCTION_TABLE_vi[$33 & 1023]($30); //@line 23991
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 619; //@line 23994
  HEAP8[$AsyncCtx5 + 4 >> 0] = $29 & 1; //@line 23997
  HEAP32[$AsyncCtx5 + 8 >> 2] = $2; //@line 23999
  HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 24001
  HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 24003
  HEAP32[$AsyncCtx5 + 20 >> 2] = $6; //@line 24005
  HEAP8[$AsyncCtx5 + 24 >> 0] = $4; //@line 24007
  HEAP32[$AsyncCtx5 + 28 >> 2] = $7; //@line 24009
  sp = STACKTOP; //@line 24010
  return 0; //@line 24011
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24013
 if (!$29) {
  $$0 = 0; //@line 24015
  return $$0 | 0; //@line 24016
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $45 = HEAP32[$0 + 112 >> 2] | 0; //@line 24023
  $47 = HEAPU8[$1 >> 0] | 0; //@line 24025
  $51 = HEAP32[$45 + ($47 * 12 | 0) + 4 >> 2] | 0; //@line 24029
  $$040 = ($51 | 0) == 0 ? HEAP32[$45 + ($47 * 12 | 0) >> 2] | 0 : $51; //@line 24032
 } else {
  $$040 = $6; //@line 24034
 }
 $56 = HEAP32[$0 + 96 >> 2] | 0; //@line 24039
 $58 = HEAP32[$0 + 104 >> 2] | 0; //@line 24041
 $59 = $4 & 255; //@line 24042
 $61 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $59 >> 0] | 0; //@line 24044
 $62 = HEAP32[$7 >> 2] | 0; //@line 24045
 $65 = HEAP32[(HEAP32[$62 >> 2] | 0) + 72 >> 2] | 0; //@line 24048
 $AsyncCtx9 = _emscripten_alloc_async_context(44, sp) | 0; //@line 24049
 FUNCTION_TABLE_vi[$65 & 1023]($62); //@line 24050
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 620; //@line 24053
  HEAP32[$AsyncCtx9 + 4 >> 2] = $7; //@line 24055
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$040; //@line 24057
  HEAP8[$AsyncCtx9 + 12 >> 0] = $4; //@line 24059
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 24061
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 24063
  HEAP8[$AsyncCtx9 + 24 >> 0] = $61; //@line 24065
  HEAP32[$AsyncCtx9 + 28 >> 2] = $56; //@line 24067
  HEAP32[$AsyncCtx9 + 32 >> 2] = $58; //@line 24069
  HEAP32[$AsyncCtx9 + 36 >> 2] = $59; //@line 24071
  HEAP32[$AsyncCtx9 + 40 >> 2] = $2; //@line 24073
  sp = STACKTOP; //@line 24074
  return 0; //@line 24075
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 24077
 $76 = HEAP32[$7 >> 2] | 0; //@line 24078
 $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 32 >> 2] | 0; //@line 24081
 $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 24082
 FUNCTION_TABLE_vii[$79 & 31]($76, $$040); //@line 24083
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 621; //@line 24086
  HEAP8[$AsyncCtx12 + 4 >> 0] = $4; //@line 24088
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 24090
  HEAP32[$AsyncCtx12 + 12 >> 2] = $7; //@line 24092
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 24094
  HEAP8[$AsyncCtx12 + 20 >> 0] = $61; //@line 24096
  HEAP32[$AsyncCtx12 + 24 >> 2] = $56; //@line 24098
  HEAP32[$AsyncCtx12 + 28 >> 2] = $58; //@line 24100
  HEAP32[$AsyncCtx12 + 32 >> 2] = $59; //@line 24102
  HEAP32[$AsyncCtx12 + 36 >> 2] = $2; //@line 24104
  sp = STACKTOP; //@line 24105
  return 0; //@line 24106
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 24108
 do {
  if ($4 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 24116
   } else {
    $93 = HEAP32[$7 >> 2] | 0; //@line 24118
    $96 = HEAP32[(HEAP32[$93 >> 2] | 0) + 16 >> 2] | 0; //@line 24121
    $101 = HEAP32[$1 + 8 >> 2] & 65535; //@line 24126
    $104 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 24129
    $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 24130
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$96 & 1]($93, 0, 5e4, ($61 & 255) * 1e3 | 0, 0, 83333, 5, $101, 0, 0, 1, 0, 0, 0, $104); //@line 24131
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 622; //@line 24134
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 24136
     HEAP32[$AsyncCtx16 + 8 >> 2] = $56; //@line 24138
     HEAP32[$AsyncCtx16 + 12 >> 2] = $58; //@line 24140
     HEAP32[$AsyncCtx16 + 16 >> 2] = $59; //@line 24142
     HEAP32[$AsyncCtx16 + 20 >> 2] = $7; //@line 24144
     HEAP8[$AsyncCtx16 + 24 >> 0] = $61; //@line 24146
     HEAP32[$AsyncCtx16 + 28 >> 2] = $2; //@line 24148
     sp = STACKTOP; //@line 24149
     return 0; //@line 24150
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 24152
     $$038 = 0; //@line 24153
     break;
    }
   }
  } else {
   label = 19; //@line 24158
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $112 = HEAP32[$7 >> 2] | 0; //@line 24163
   $115 = HEAP32[(HEAP32[$112 >> 2] | 0) + 16 >> 2] | 0; //@line 24166
   $118 = HEAPU8[$1 + 2 >> 0] | 0; //@line 24169
   $122 = HEAP32[$1 + 8 >> 2] & 65535; //@line 24173
   $125 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 24176
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 24177
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$115 & 1]($112, 1, $118, $61 & 255, 1, 0, 8, $122, 0, 0, 0, 0, 0, 1, $125); //@line 24178
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 623; //@line 24181
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 24183
    HEAP32[$AsyncCtx20 + 8 >> 2] = $56; //@line 24185
    HEAP32[$AsyncCtx20 + 12 >> 2] = $58; //@line 24187
    HEAP32[$AsyncCtx20 + 16 >> 2] = $59; //@line 24189
    HEAP32[$AsyncCtx20 + 20 >> 2] = $7; //@line 24191
    HEAP8[$AsyncCtx20 + 24 >> 0] = $61; //@line 24193
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 24195
    sp = STACKTOP; //@line 24196
    return 0; //@line 24197
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 24199
    $$038 = 1; //@line 24200
    break;
   }
  }
 } while (0);
 $136 = HEAP32[$7 >> 2] | 0; //@line 24211
 $139 = HEAP32[(HEAP32[$136 >> 2] | 0) + 44 >> 2] | 0; //@line 24214
 $142 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $56 : $58) + $59 >> 0] | 0) + 13 & 255; //@line 24217
 $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 24218
 FUNCTION_TABLE_viii[$139 & 7]($136, $$038, $142); //@line 24219
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 624; //@line 24222
  HEAP32[$AsyncCtx24 + 4 >> 2] = $7; //@line 24224
  HEAP8[$AsyncCtx24 + 8 >> 0] = $61; //@line 24226
  HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 24228
  sp = STACKTOP; //@line 24229
  return 0; //@line 24230
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 24232
 $146 = HEAP32[$7 >> 2] | 0; //@line 24233
 $149 = HEAP32[(HEAP32[$146 >> 2] | 0) + 76 >> 2] | 0; //@line 24236
 $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 24237
 FUNCTION_TABLE_vi[$149 & 1023]($146); //@line 24238
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 625; //@line 24241
  HEAP8[$AsyncCtx27 + 4 >> 0] = $61; //@line 24243
  HEAP32[$AsyncCtx27 + 8 >> 2] = $2; //@line 24245
  sp = STACKTOP; //@line 24246
  return 0; //@line 24247
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 24249
 HEAP8[$2 >> 0] = $61; //@line 24250
 $$0 = 1; //@line 24251
 return $$0 | 0; //@line 24252
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32700
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32702
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32704
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32706
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32708
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32710
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32712
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32714
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32716
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32718
 $$pre = HEAP32[$6 >> 2] | 0; //@line 32719
 if ($$pre | 0) {
  $21 = HEAP32[$$pre + 4 >> 2] | 0; //@line 32723
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 32724
  FUNCTION_TABLE_vii[$21 & 31]($12, $8); //@line 32725
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 568; //@line 32728
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 32729
   HEAP32[$22 >> 2] = $2; //@line 32730
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 32731
   HEAP32[$23 >> 2] = $4; //@line 32732
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 32733
   HEAP32[$24 >> 2] = $8; //@line 32734
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 32735
   HEAP32[$25 >> 2] = $10; //@line 32736
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 32737
   HEAP32[$26 >> 2] = $12; //@line 32738
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 32739
   HEAP32[$27 >> 2] = $6; //@line 32740
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 32741
   HEAP32[$28 >> 2] = $14; //@line 32742
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 32743
   HEAP32[$29 >> 2] = $16; //@line 32744
   $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 32745
   HEAP32[$30 >> 2] = $18; //@line 32746
   sp = STACKTOP; //@line 32747
   return;
  }
  ___async_unwind = 0; //@line 32750
  HEAP32[$ReallocAsyncCtx2 >> 2] = 568; //@line 32751
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 32752
  HEAP32[$22 >> 2] = $2; //@line 32753
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 32754
  HEAP32[$23 >> 2] = $4; //@line 32755
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 32756
  HEAP32[$24 >> 2] = $8; //@line 32757
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 32758
  HEAP32[$25 >> 2] = $10; //@line 32759
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 32760
  HEAP32[$26 >> 2] = $12; //@line 32761
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 32762
  HEAP32[$27 >> 2] = $6; //@line 32763
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 32764
  HEAP32[$28 >> 2] = $14; //@line 32765
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 32766
  HEAP32[$29 >> 2] = $16; //@line 32767
  $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 32768
  HEAP32[$30 >> 2] = $18; //@line 32769
  sp = STACKTOP; //@line 32770
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 32773
 $31 = $10 + 12 | 0; //@line 32774
 HEAP32[$10 >> 2] = 7; //@line 32775
 HEAP32[$10 + 4 >> 2] = 0; //@line 32777
 HEAP32[$10 + 8 >> 2] = $4; //@line 32779
 HEAP32[$31 >> 2] = 860; //@line 32780
 $32 = $4 + 1244 | 0; //@line 32781
 if (($32 | 0) == ($10 | 0)) {
  $59 = HEAP32[217] | 0; //@line 32785
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 32786
  FUNCTION_TABLE_vi[$59 & 1023]($10); //@line 32787
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 32790
   $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 32791
   HEAP32[$60 >> 2] = $10; //@line 32792
   $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 32793
   HEAP32[$61 >> 2] = $2; //@line 32794
   $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 32795
   HEAP32[$62 >> 2] = $4; //@line 32796
   $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 32797
   HEAP32[$63 >> 2] = $12; //@line 32798
   $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 32799
   HEAP32[$64 >> 2] = $16; //@line 32800
   $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 32801
   HEAP32[$65 >> 2] = $18; //@line 32802
   sp = STACKTOP; //@line 32803
   return;
  }
  ___async_unwind = 0; //@line 32806
  HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 32807
  $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 32808
  HEAP32[$60 >> 2] = $10; //@line 32809
  $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 32810
  HEAP32[$61 >> 2] = $2; //@line 32811
  $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 32812
  HEAP32[$62 >> 2] = $4; //@line 32813
  $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 32814
  HEAP32[$63 >> 2] = $12; //@line 32815
  $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 32816
  HEAP32[$64 >> 2] = $16; //@line 32817
  $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 32818
  HEAP32[$65 >> 2] = $18; //@line 32819
  sp = STACKTOP; //@line 32820
  return;
 }
 $34 = $4 + 1256 | 0; //@line 32823
 $35 = HEAP32[$34 >> 2] | 0; //@line 32824
 if (!$35) {
  $49 = HEAP32[216] | 0; //@line 32828
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 32829
  FUNCTION_TABLE_vii[$49 & 31]($32, $10); //@line 32830
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 32833
   $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 32834
   HEAP32[$50 >> 2] = $10; //@line 32835
   $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 32836
   HEAP32[$51 >> 2] = $2; //@line 32837
   $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 32838
   HEAP32[$52 >> 2] = $4; //@line 32839
   $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 32840
   HEAP32[$53 >> 2] = $12; //@line 32841
   $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 32842
   HEAP32[$54 >> 2] = $31; //@line 32843
   $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 32844
   HEAP32[$55 >> 2] = $34; //@line 32845
   $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 32846
   HEAP32[$56 >> 2] = $16; //@line 32847
   $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 32848
   HEAP32[$57 >> 2] = $18; //@line 32849
   sp = STACKTOP; //@line 32850
   return;
  }
  ___async_unwind = 0; //@line 32853
  HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 32854
  $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 32855
  HEAP32[$50 >> 2] = $10; //@line 32856
  $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 32857
  HEAP32[$51 >> 2] = $2; //@line 32858
  $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 32859
  HEAP32[$52 >> 2] = $4; //@line 32860
  $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 32861
  HEAP32[$53 >> 2] = $12; //@line 32862
  $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 32863
  HEAP32[$54 >> 2] = $31; //@line 32864
  $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 32865
  HEAP32[$55 >> 2] = $34; //@line 32866
  $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 32867
  HEAP32[$56 >> 2] = $16; //@line 32868
  $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 32869
  HEAP32[$57 >> 2] = $18; //@line 32870
  sp = STACKTOP; //@line 32871
  return;
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 32875
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 32876
  FUNCTION_TABLE_vi[$38 & 1023]($32); //@line 32877
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 32880
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 32881
   HEAP32[$39 >> 2] = $10; //@line 32882
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 32883
   HEAP32[$40 >> 2] = $2; //@line 32884
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 32885
   HEAP32[$41 >> 2] = $4; //@line 32886
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 32887
   HEAP32[$42 >> 2] = $34; //@line 32888
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 32889
   HEAP32[$43 >> 2] = $32; //@line 32890
   $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 32891
   HEAP32[$44 >> 2] = $12; //@line 32892
   $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 32893
   HEAP32[$45 >> 2] = $31; //@line 32894
   $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 32895
   HEAP32[$46 >> 2] = $16; //@line 32896
   $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 32897
   HEAP32[$47 >> 2] = $18; //@line 32898
   sp = STACKTOP; //@line 32899
   return;
  }
  ___async_unwind = 0; //@line 32902
  HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 32903
  $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 32904
  HEAP32[$39 >> 2] = $10; //@line 32905
  $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 32906
  HEAP32[$40 >> 2] = $2; //@line 32907
  $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 32908
  HEAP32[$41 >> 2] = $4; //@line 32909
  $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 32910
  HEAP32[$42 >> 2] = $34; //@line 32911
  $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 32912
  HEAP32[$43 >> 2] = $32; //@line 32913
  $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 32914
  HEAP32[$44 >> 2] = $12; //@line 32915
  $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 32916
  HEAP32[$45 >> 2] = $31; //@line 32917
  $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 32918
  HEAP32[$46 >> 2] = $16; //@line 32919
  $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 32920
  HEAP32[$47 >> 2] = $18; //@line 32921
  sp = STACKTOP; //@line 32922
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20905
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20907
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20909
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20913
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 20915
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 20917
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 20919
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 20921
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 20922
 $17 = $2 + 12 | 0; //@line 20923
 HEAP32[$17 >> 2] = $$pre$i; //@line 20924
 if ($$pre$i | 0) {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 20929
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 20930
  FUNCTION_TABLE_vii[$20 & 31]($4, $2); //@line 20931
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 20934
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 20935
   HEAP32[$21 >> 2] = $2; //@line 20936
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 20937
   HEAP32[$22 >> 2] = $4; //@line 20938
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 20939
   HEAP32[$23 >> 2] = $17; //@line 20940
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 20941
   HEAP32[$24 >> 2] = $8; //@line 20942
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 20943
   HEAP16[$25 >> 1] = $10; //@line 20944
   $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 20945
   HEAP16[$26 >> 1] = $12; //@line 20946
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 20947
   HEAP8[$27 >> 0] = $14; //@line 20948
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 20949
   HEAP32[$28 >> 2] = $16; //@line 20950
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 20951
   HEAP32[$29 >> 2] = $17; //@line 20952
   sp = STACKTOP; //@line 20953
   return;
  }
  ___async_unwind = 0; //@line 20956
  HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 20957
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 20958
  HEAP32[$21 >> 2] = $2; //@line 20959
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 20960
  HEAP32[$22 >> 2] = $4; //@line 20961
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 20962
  HEAP32[$23 >> 2] = $17; //@line 20963
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 20964
  HEAP32[$24 >> 2] = $8; //@line 20965
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 20966
  HEAP16[$25 >> 1] = $10; //@line 20967
  $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 20968
  HEAP16[$26 >> 1] = $12; //@line 20969
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 20970
  HEAP8[$27 >> 0] = $14; //@line 20971
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 20972
  HEAP32[$28 >> 2] = $16; //@line 20973
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 20974
  HEAP32[$29 >> 2] = $17; //@line 20975
  sp = STACKTOP; //@line 20976
  return;
 }
 $30 = $4 + 12 | 0; //@line 20979
 HEAP32[$30 >> 2] = 0; //@line 20980
 $31 = $4 + 16 | 0; //@line 20981
 HEAP32[$31 >> 2] = $8; //@line 20982
 HEAP16[$4 + 20 >> 1] = $10; //@line 20984
 HEAP16[$4 + 22 >> 1] = $12; //@line 20986
 HEAP8[$4 + 24 >> 0] = $14; //@line 20988
 $35 = _equeue_alloc($16, 28) | 0; //@line 20989
 if ($35 | 0) {
  $37 = HEAP32[$30 >> 2] | 0; //@line 20992
  if (!$37) {
   HEAP32[$35 + 12 >> 2] = 0; //@line 20996
   $50 = $35 + 16 | 0; //@line 20997
   HEAP32[$50 >> 2] = HEAP32[$31 >> 2]; //@line 20998
   HEAP32[$50 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 20998
   HEAP8[$50 + 8 >> 0] = HEAP8[$31 + 8 >> 0] | 0; //@line 20998
   _equeue_event_dtor($35, 413); //@line 20999
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21000
   $51 = _equeue_post($16, 414, $35) | 0; //@line 21001
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 21004
    $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 21005
    HEAP32[$52 >> 2] = $30; //@line 21006
    $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 21007
    HEAP32[$53 >> 2] = $17; //@line 21008
    $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 21009
    HEAP32[$54 >> 2] = $4; //@line 21010
    $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 21011
    HEAP32[$55 >> 2] = $2; //@line 21012
    sp = STACKTOP; //@line 21013
    return;
   }
   HEAP32[___async_retval >> 2] = $51; //@line 21017
   ___async_unwind = 0; //@line 21018
   HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 21019
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 21020
   HEAP32[$52 >> 2] = $30; //@line 21021
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 21022
   HEAP32[$53 >> 2] = $17; //@line 21023
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 21024
   HEAP32[$54 >> 2] = $4; //@line 21025
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 21026
   HEAP32[$55 >> 2] = $2; //@line 21027
   sp = STACKTOP; //@line 21028
   return;
  } else {
   $40 = HEAP32[$37 + 4 >> 2] | 0; //@line 21032
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 21033
   FUNCTION_TABLE_vii[$40 & 31]($35, $4); //@line 21034
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 21037
    $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 21038
    HEAP32[$41 >> 2] = $30; //@line 21039
    $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 21040
    HEAP32[$42 >> 2] = $35; //@line 21041
    $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 21042
    HEAP32[$43 >> 2] = $31; //@line 21043
    $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 21044
    HEAP32[$44 >> 2] = $16; //@line 21045
    $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 21046
    HEAP32[$45 >> 2] = $30; //@line 21047
    $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 21048
    HEAP32[$46 >> 2] = $17; //@line 21049
    $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 21050
    HEAP32[$47 >> 2] = $4; //@line 21051
    $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 21052
    HEAP32[$48 >> 2] = $2; //@line 21053
    sp = STACKTOP; //@line 21054
    return;
   }
   ___async_unwind = 0; //@line 21057
   HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 21058
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 21059
   HEAP32[$41 >> 2] = $30; //@line 21060
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 21061
   HEAP32[$42 >> 2] = $35; //@line 21062
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 21063
   HEAP32[$43 >> 2] = $31; //@line 21064
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 21065
   HEAP32[$44 >> 2] = $16; //@line 21066
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 21067
   HEAP32[$45 >> 2] = $30; //@line 21068
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 21069
   HEAP32[$46 >> 2] = $17; //@line 21070
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 21071
   HEAP32[$47 >> 2] = $4; //@line 21072
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 21073
   HEAP32[$48 >> 2] = $2; //@line 21074
   sp = STACKTOP; //@line 21075
   return;
  }
 }
 $57 = HEAP32[$30 >> 2] | 0; //@line 21079
 if ($57 | 0) {
  $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 21083
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 21084
  FUNCTION_TABLE_vi[$60 & 1023]($4); //@line 21085
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 21088
   $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 21089
   HEAP32[$61 >> 2] = $17; //@line 21090
   $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 21091
   HEAP32[$62 >> 2] = 0; //@line 21092
   $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 21093
   HEAP32[$63 >> 2] = $2; //@line 21094
   sp = STACKTOP; //@line 21095
   return;
  }
  ___async_unwind = 0; //@line 21098
  HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 21099
  $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 21100
  HEAP32[$61 >> 2] = $17; //@line 21101
  $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 21102
  HEAP32[$62 >> 2] = 0; //@line 21103
  $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 21104
  HEAP32[$63 >> 2] = $2; //@line 21105
  sp = STACKTOP; //@line 21106
  return;
 }
 $64 = HEAP32[$17 >> 2] | 0; //@line 21109
 if (!$64) {
  HEAP32[___async_retval >> 2] = 0; //@line 21113
  return;
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 21117
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21118
 FUNCTION_TABLE_vi[$67 & 1023]($2); //@line 21119
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 21122
  $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 21123
  HEAP32[$68 >> 2] = 0; //@line 21124
  sp = STACKTOP; //@line 21125
  return;
 }
 ___async_unwind = 0; //@line 21128
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 21129
 $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 21130
 HEAP32[$68 >> 2] = 0; //@line 21131
 sp = STACKTOP; //@line 21132
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_466($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25904
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25906
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25908
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25910
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25912
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25914
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25916
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25918
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25920
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25924
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $16) | 0; //@line 25930
  _printf(13114, $20) | 0; //@line 25931
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 25932
  _putchar(10) | 0; //@line 25933
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 25936
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 25937
   HEAP32[$25 >> 2] = $2; //@line 25938
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 25939
   HEAP32[$26 >> 2] = $4; //@line 25940
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 25941
   HEAP32[$27 >> 2] = $6; //@line 25942
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 25943
   HEAP32[$28 >> 2] = $8; //@line 25944
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 25945
   HEAP32[$29 >> 2] = $10; //@line 25946
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 25947
   HEAP32[$30 >> 2] = $12; //@line 25948
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 25949
   HEAP32[$31 >> 2] = $14; //@line 25950
   sp = STACKTOP; //@line 25951
   return;
  }
  ___async_unwind = 0; //@line 25954
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 25955
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 25956
  HEAP32[$25 >> 2] = $2; //@line 25957
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 25958
  HEAP32[$26 >> 2] = $4; //@line 25959
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 25960
  HEAP32[$27 >> 2] = $6; //@line 25961
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 25962
  HEAP32[$28 >> 2] = $8; //@line 25963
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 25964
  HEAP32[$29 >> 2] = $10; //@line 25965
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 25966
  HEAP32[$30 >> 2] = $12; //@line 25967
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 25968
  HEAP32[$31 >> 2] = $14; //@line 25969
  sp = STACKTOP; //@line 25970
  return;
 }
 $32 = HEAP8[$2 >> 0] & -33; //@line 25974
 HEAP8[$2 >> 0] = $32; //@line 25975
 do {
  if (!($32 & 2)) {
   $63 = $32; //@line 25980
  } else {
   $35 = $32 & -3; //@line 25982
   HEAP8[$2 >> 0] = $35; //@line 25983
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $8) | 0; //@line 25988
    _printf(12994, $12) | 0; //@line 25989
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25990
    _putchar(10) | 0; //@line 25991
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 25994
     $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 25995
     HEAP32[$39 >> 2] = $2; //@line 25996
     $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 25997
     HEAP32[$40 >> 2] = $4; //@line 25998
     $41 = $ReallocAsyncCtx6 + 12 | 0; //@line 25999
     HEAP32[$41 >> 2] = $6; //@line 26000
     $42 = $ReallocAsyncCtx6 + 16 | 0; //@line 26001
     HEAP32[$42 >> 2] = $6; //@line 26002
     sp = STACKTOP; //@line 26003
     return;
    }
    ___async_unwind = 0; //@line 26006
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 26007
    $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 26008
    HEAP32[$39 >> 2] = $2; //@line 26009
    $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 26010
    HEAP32[$40 >> 2] = $4; //@line 26011
    $41 = $ReallocAsyncCtx6 + 12 | 0; //@line 26012
    HEAP32[$41 >> 2] = $6; //@line 26013
    $42 = $ReallocAsyncCtx6 + 16 | 0; //@line 26014
    HEAP32[$42 >> 2] = $6; //@line 26015
    sp = STACKTOP; //@line 26016
    return;
   }
   if ($35 & 4) {
    $61 = $35 & -5; //@line 26022
    HEAP8[$2 >> 0] = $61; //@line 26023
    $63 = $61; //@line 26024
    break;
   }
   $46 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26028
   $47 = $46 + 16 | 0; //@line 26029
   $49 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 26031
   $50 = $46 + 28 | 0; //@line 26032
   $51 = HEAP32[$50 >> 2] | 0; //@line 26033
   if (!$51) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 26036
    _mbed_assert_internal(15061, 15066, 1102); //@line 26037
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 26040
     $53 = $ReallocAsyncCtx15 + 4 | 0; //@line 26041
     HEAP32[$53 >> 2] = $50; //@line 26042
     $54 = $ReallocAsyncCtx15 + 8 | 0; //@line 26043
     HEAP32[$54 >> 2] = $47; //@line 26044
     $55 = $ReallocAsyncCtx15 + 12 | 0; //@line 26045
     HEAP32[$55 >> 2] = $49; //@line 26046
     $56 = $ReallocAsyncCtx15 + 16 | 0; //@line 26047
     HEAP32[$56 >> 2] = $2; //@line 26048
     $57 = $ReallocAsyncCtx15 + 20 | 0; //@line 26049
     HEAP32[$57 >> 2] = $4; //@line 26050
     sp = STACKTOP; //@line 26051
     return;
    }
    ___async_unwind = 0; //@line 26054
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 26055
    $53 = $ReallocAsyncCtx15 + 4 | 0; //@line 26056
    HEAP32[$53 >> 2] = $50; //@line 26057
    $54 = $ReallocAsyncCtx15 + 8 | 0; //@line 26058
    HEAP32[$54 >> 2] = $47; //@line 26059
    $55 = $ReallocAsyncCtx15 + 12 | 0; //@line 26060
    HEAP32[$55 >> 2] = $49; //@line 26061
    $56 = $ReallocAsyncCtx15 + 16 | 0; //@line 26062
    HEAP32[$56 >> 2] = $2; //@line 26063
    $57 = $ReallocAsyncCtx15 + 20 | 0; //@line 26064
    HEAP32[$57 >> 2] = $4; //@line 26065
    sp = STACKTOP; //@line 26066
    return;
   } else {
    $58 = HEAP32[$51 >> 2] | 0; //@line 26069
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26070
    FUNCTION_TABLE_vii[$58 & 31]($47, $49); //@line 26071
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 26074
     $59 = $ReallocAsyncCtx4 + 4 | 0; //@line 26075
     HEAP32[$59 >> 2] = $2; //@line 26076
     $60 = $ReallocAsyncCtx4 + 8 | 0; //@line 26077
     HEAP32[$60 >> 2] = $4; //@line 26078
     sp = STACKTOP; //@line 26079
     return;
    }
    ___async_unwind = 0; //@line 26082
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 26083
    $59 = $ReallocAsyncCtx4 + 4 | 0; //@line 26084
    HEAP32[$59 >> 2] = $2; //@line 26085
    $60 = $ReallocAsyncCtx4 + 8 | 0; //@line 26086
    HEAP32[$60 >> 2] = $4; //@line 26087
    sp = STACKTOP; //@line 26088
    return;
   }
  }
 } while (0);
 if (!($63 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $63 & -17; //@line 26099
 $67 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26101
 $68 = $67 + 48 | 0; //@line 26102
 $70 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26104
 $71 = $67 + 60 | 0; //@line 26105
 $72 = HEAP32[$71 >> 2] | 0; //@line 26106
 if (!$72) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 26109
  _mbed_assert_internal(15061, 15066, 1102); //@line 26110
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 26113
   $74 = $ReallocAsyncCtx14 + 4 | 0; //@line 26114
   HEAP32[$74 >> 2] = $71; //@line 26115
   $75 = $ReallocAsyncCtx14 + 8 | 0; //@line 26116
   HEAP32[$75 >> 2] = $68; //@line 26117
   $76 = $ReallocAsyncCtx14 + 12 | 0; //@line 26118
   HEAP32[$76 >> 2] = $70; //@line 26119
   sp = STACKTOP; //@line 26120
   return;
  }
  ___async_unwind = 0; //@line 26123
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 26124
  $74 = $ReallocAsyncCtx14 + 4 | 0; //@line 26125
  HEAP32[$74 >> 2] = $71; //@line 26126
  $75 = $ReallocAsyncCtx14 + 8 | 0; //@line 26127
  HEAP32[$75 >> 2] = $68; //@line 26128
  $76 = $ReallocAsyncCtx14 + 12 | 0; //@line 26129
  HEAP32[$76 >> 2] = $70; //@line 26130
  sp = STACKTOP; //@line 26131
  return;
 } else {
  $77 = HEAP32[$72 >> 2] | 0; //@line 26134
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26135
  FUNCTION_TABLE_vii[$77 & 31]($68, $70); //@line 26136
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 26139
   sp = STACKTOP; //@line 26140
   return;
  }
  ___async_unwind = 0; //@line 26143
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 26144
  sp = STACKTOP; //@line 26145
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $58 = 0, $59 = 0, $63 = 0, $65 = 0, $73 = 0, $74 = 0, $80 = 0, $83 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 6615
 STACKTOP = STACKTOP + 64 | 0; //@line 6616
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 6616
 $vararg_buffer5 = sp + 24 | 0; //@line 6617
 $vararg_buffer3 = sp + 16 | 0; //@line 6618
 $2 = sp + 48 | 0; //@line 6621
 $3 = sp + 32 | 0; //@line 6622
 if (!$1) {
  _printf(11887, sp) | 0; //@line 6625
  _printf(12233, sp + 8 | 0) | 0; //@line 6626
  $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6627
  _putchar(10) | 0; //@line 6628
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 211; //@line 6631
   sp = STACKTOP; //@line 6632
   STACKTOP = sp; //@line 6633
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6635
  STACKTOP = sp; //@line 6636
  return;
 }
 _printf(12139, $vararg_buffer3) | 0; //@line 6638
 $5 = $1 + 4 | 0; //@line 6639
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$5 >> 2]; //@line 6641
 _printf(12271, $vararg_buffer5) | 0; //@line 6642
 $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6643
 _putchar(10) | 0; //@line 6644
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 212; //@line 6647
  HEAP32[$AsyncCtx19 + 4 >> 2] = $3; //@line 6649
  HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 6651
  HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 6653
  HEAP32[$AsyncCtx19 + 16 >> 2] = $2; //@line 6655
  HEAP32[$AsyncCtx19 + 20 >> 2] = $5; //@line 6657
  sp = STACKTOP; //@line 6658
  STACKTOP = sp; //@line 6659
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6661
 if (HEAP32[$5 >> 2] | 0) {
  $14 = $0 + 1892 | 0; //@line 6665
  $15 = HEAP32[$14 >> 2] | 0; //@line 6666
  if (!$15) {
   STACKTOP = sp; //@line 6669
   return;
  }
  $19 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6673
  $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 6675
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6676
  FUNCTION_TABLE_vii[$21 & 31]($2, $0 + 1880 | 0); //@line 6677
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 213; //@line 6680
   HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 6682
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6684
   HEAP32[$AsyncCtx + 12 >> 2] = $19; //@line 6686
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6688
   sp = STACKTOP; //@line 6689
   STACKTOP = sp; //@line 6690
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6692
  $26 = $2 + 12 | 0; //@line 6694
  HEAP32[$26 >> 2] = HEAP32[$14 >> 2]; //@line 6695
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6696
  $27 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($19, $2, 9) | 0; //@line 6697
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 214; //@line 6700
   HEAP32[$AsyncCtx33 + 4 >> 2] = $26; //@line 6702
   HEAP32[$AsyncCtx33 + 8 >> 2] = $2; //@line 6704
   sp = STACKTOP; //@line 6705
   STACKTOP = sp; //@line 6706
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 6708
  $30 = HEAP32[$26 >> 2] | 0; //@line 6709
  do {
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 6714
    $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6715
    FUNCTION_TABLE_vi[$33 & 1023]($2); //@line 6716
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 215; //@line 6719
     HEAP32[$AsyncCtx8 + 4 >> 2] = $27; //@line 6721
     sp = STACKTOP; //@line 6722
     STACKTOP = sp; //@line 6723
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6725
     break;
    }
   }
  } while (0);
  if ($27 | 0) {
   STACKTOP = sp; //@line 6732
   return;
  }
  $AsyncCtx41 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6734
  _mbed_assert_internal(12851, 11935, 843); //@line 6735
  if (___async) {
   HEAP32[$AsyncCtx41 >> 2] = 216; //@line 6738
   sp = STACKTOP; //@line 6739
   STACKTOP = sp; //@line 6740
   return;
  }
  _emscripten_free_async_context($AsyncCtx41 | 0); //@line 6742
  STACKTOP = sp; //@line 6743
  return;
 }
 $36 = $0 + 1960 | 0; //@line 6745
 HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1; //@line 6748
 if (!(HEAP8[$1 + 18 >> 0] | 0)) {
  STACKTOP = sp; //@line 6753
  return;
 }
 $42 = $1 + 9 | 0; //@line 6755
 $43 = HEAP8[$42 >> 0] | 0; //@line 6756
 if ($43 << 24 >> 24 == -32) {
  STACKTOP = sp; //@line 6759
  return;
 }
 if (($43 + -1 & 255) >= 223) {
  if ((HEAP32[$1 >> 2] | 0) != 3) {
   STACKTOP = sp; //@line 6767
   return;
  }
 }
 HEAP32[$0 + 2240 >> 2] = 2; //@line 6771
 HEAP16[$0 + 2260 >> 1] = HEAP16[$1 + 16 >> 1] | 0; //@line 6775
 HEAP8[$0 + 2253 >> 0] = HEAP8[$42 >> 0] | 0; //@line 6778
 HEAP32[$0 + 2256 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6782
 HEAP8[$0 + 2236 >> 0] = 1; //@line 6784
 $58 = $0 + 1892 | 0; //@line 6785
 $59 = HEAP32[$58 >> 2] | 0; //@line 6786
 do {
  if ($59 | 0) {
   $63 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6792
   $65 = HEAP32[$59 + 4 >> 2] | 0; //@line 6794
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6795
   FUNCTION_TABLE_vii[$65 & 31]($3, $0 + 1880 | 0); //@line 6796
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 217; //@line 6799
    HEAP32[$AsyncCtx11 + 4 >> 2] = $58; //@line 6801
    HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 6803
    HEAP32[$AsyncCtx11 + 12 >> 2] = $63; //@line 6805
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 6807
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 6809
    HEAP32[$AsyncCtx11 + 24 >> 2] = $42; //@line 6811
    HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 6813
    sp = STACKTOP; //@line 6814
    STACKTOP = sp; //@line 6815
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6817
   $73 = $3 + 12 | 0; //@line 6819
   HEAP32[$73 >> 2] = HEAP32[$58 >> 2]; //@line 6820
   $AsyncCtx30 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6821
   $74 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($63, $3, 7) | 0; //@line 6822
   if (___async) {
    HEAP32[$AsyncCtx30 >> 2] = 218; //@line 6825
    HEAP32[$AsyncCtx30 + 4 >> 2] = $73; //@line 6827
    HEAP32[$AsyncCtx30 + 8 >> 2] = $3; //@line 6829
    HEAP32[$AsyncCtx30 + 12 >> 2] = $1; //@line 6831
    HEAP32[$AsyncCtx30 + 16 >> 2] = $42; //@line 6833
    HEAP32[$AsyncCtx30 + 20 >> 2] = $0; //@line 6835
    sp = STACKTOP; //@line 6836
    STACKTOP = sp; //@line 6837
    return;
   }
   _emscripten_free_async_context($AsyncCtx30 | 0); //@line 6839
   $80 = HEAP32[$73 >> 2] | 0; //@line 6840
   do {
    if ($80 | 0) {
     $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 6845
     $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6846
     FUNCTION_TABLE_vi[$83 & 1023]($3); //@line 6847
     if (___async) {
      HEAP32[$AsyncCtx15 >> 2] = 219; //@line 6850
      HEAP32[$AsyncCtx15 + 4 >> 2] = $74; //@line 6852
      HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 6854
      HEAP32[$AsyncCtx15 + 12 >> 2] = $42; //@line 6856
      HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 6858
      sp = STACKTOP; //@line 6859
      STACKTOP = sp; //@line 6860
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6862
      break;
     }
    }
   } while (0);
   if (!$74) {
    $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6869
    _mbed_assert_internal(12851, 11935, 909); //@line 6870
    if (___async) {
     HEAP32[$AsyncCtx37 >> 2] = 220; //@line 6873
     HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 6875
     HEAP32[$AsyncCtx37 + 8 >> 2] = $42; //@line 6877
     HEAP32[$AsyncCtx37 + 12 >> 2] = $0; //@line 6879
     sp = STACKTOP; //@line 6880
     STACKTOP = sp; //@line 6881
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 6883
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$1 + 11 >> 0] | 0)) {
  STACKTOP = sp; //@line 6893
  return;
 }
 $95 = HEAP8[$42 >> 0] | 0; //@line 6895
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6896
 __ZN12LoRaWANStack9handle_txEhPKhth($0, $95, 0, 0, 2) | 0; //@line 6897
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 221; //@line 6900
  sp = STACKTOP; //@line 6901
  STACKTOP = sp; //@line 6902
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6904
 STACKTOP = sp; //@line 6905
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_219($0) {
 $0 = $0 | 0;
 var $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $25 = 0, $27 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $49 = 0, $58 = 0, $6 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0.0, $94 = 0.0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 36734
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36736
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36738
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36740
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36742
 $9 = $2 + 968 | 0; //@line 36743
 if (HEAP32[$9 >> 2] | 0) {
  $$1 = -1e3; //@line 36747
  $109 = ___async_retval; //@line 36748
  HEAP32[$109 >> 2] = $$1; //@line 36749
  return;
 }
 $12 = $2 + 264 | 0; //@line 36752
 __ZN11LoRaMacMlme18reset_confirmationEv($12); //@line 36753
 $13 = HEAP32[$4 >> 2] | 0; //@line 36754
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($12) | 0) >> 2] = $13; //@line 36756
 $15 = $2 + 944 | 0; //@line 36757
 $17 = HEAP8[$15 >> 0] | 8; //@line 36759
 HEAP8[$15 >> 0] = $17; //@line 36760
 L5 : do {
  switch (HEAP32[$4 >> 2] | 0) {
  case 1:
   {
    $20 = __ZN14LoRaMacCommand15add_mac_commandEhhh($2 + 4 | 0, 2, 0, 0) | 0; //@line 36766
    if (!$20) {
     $$1 = 0; //@line 36769
     $109 = ___async_retval; //@line 36770
     HEAP32[$109 >> 2] = $$1; //@line 36771
     return;
    } else {
     $$024 = $20; //@line 36775
     $108 = HEAP8[$15 >> 0] | 0; //@line 36775
     break L5;
    }
    break;
   }
  case 0:
   {
    if (HEAP32[$9 >> 2] & 16 | 0) {
     $$1 = -1e3; //@line 36785
     $109 = ___async_retval; //@line 36786
     HEAP32[$109 >> 2] = $$1; //@line 36787
     return;
    }
    $25 = HEAP32[$4 + 4 >> 2] | 0; //@line 36791
    if (!$25) {
     $$1 = -1003; //@line 36794
     $109 = ___async_retval; //@line 36795
     HEAP32[$109 >> 2] = $$1; //@line 36796
     return;
    }
    $27 = $4 + 8 | 0; //@line 36799
    if (!(HEAP32[$27 >> 2] | 0)) {
     $$1 = -1003; //@line 36803
     $109 = ___async_retval; //@line 36804
     HEAP32[$109 >> 2] = $$1; //@line 36805
     return;
    }
    $30 = $4 + 12 | 0; //@line 36808
    if (!(HEAP32[$30 >> 2] | 0)) {
     $$1 = -1003; //@line 36812
     $109 = ___async_retval; //@line 36813
     HEAP32[$109 >> 2] = $$1; //@line 36814
     return;
    }
    $33 = $4 + 16 | 0; //@line 36817
    if (!(HEAP8[$33 >> 0] | 0)) {
     $$1 = -1003; //@line 36821
     $109 = ___async_retval; //@line 36822
     HEAP32[$109 >> 2] = $$1; //@line 36823
     return;
    }
    HEAP32[$2 + 900 >> 2] = $25; //@line 36827
    HEAP32[$2 + 904 >> 2] = HEAP32[$27 >> 2]; //@line 36830
    HEAP32[$2 + 908 >> 2] = HEAP32[$30 >> 2]; //@line 36833
    $41 = HEAP8[$33 >> 0] | 0; //@line 36834
    $42 = $2 + 896 | 0; //@line 36835
    HEAP8[$42 >> 0] = $41; //@line 36836
    $45 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$2 >> 2] | 0, HEAP8[$33 >> 0] | 0) | 0; //@line 36839
    HEAP8[$42 >> 0] = $45 ? $41 : 12; //@line 36841
    $46 = $2 + 897 | 0; //@line 36842
    HEAP8[$46 >> 0] = 0; //@line 36843
    HEAP8[$2 + 372 >> 0] = 0; //@line 36846
    $49 = $2 + 956 | 0; //@line 36847
    HEAP32[$49 >> 2] = 0; //@line 36848
    HEAP32[$2 + 960 >> 2] = 0; //@line 36850
    HEAP32[$2 + 964 >> 2] = 0; //@line 36852
    HEAP8[$2 + 380 >> 0] = 0; //@line 36854
    HEAP8[$2 + 894 >> 0] = 1; //@line 36856
    HEAP8[$2 + 895 >> 0] = 1; //@line 36858
    HEAP8[$2 + 377 >> 0] = 0; //@line 36860
    HEAP8[$2 + 1152 >> 0] = 0; //@line 36862
    HEAP16[$2 + 1154 >> 1] = 1; //@line 36864
    $58 = $2 + 4 | 0; //@line 36865
    __ZN14LoRaMacCommand20clear_command_bufferEv($58); //@line 36866
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($58); //@line 36867
    __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($58); //@line 36868
    HEAP8[$2 + 371 >> 0] = 1; //@line 36870
    __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 36872
    HEAP8[$2 + 373 >> 0] = 0; //@line 36874
    HEAP8[$2 + 374 >> 0] = 0; //@line 36876
    $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 36878
    if ($$05$i | 0) {
     $$06$i = $$05$i; //@line 36881
     do {
      HEAP32[$$06$i + 36 >> 2] = 0; //@line 36884
      $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 36886
     } while (($$06$i | 0) != 0);
    }
    HEAP8[$2 + 378 >> 0] = 0; //@line 36896
    HEAP8[$2 + 379 >> 0] = 0; //@line 36898
    $70 = HEAP32[$2 >> 2] | 0; //@line 36899
    $73 = HEAP32[(HEAP32[$70 >> 2] | 0) + 52 >> 2] | 0; //@line 36902
    $77 = (HEAPU8[$46 >> 0] | 0) + 1 & 255; //@line 36906
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 36907
    $78 = FUNCTION_TABLE_iii[$73 & 31]($70, $77) | 0; //@line 36908
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 550; //@line 36911
     $79 = $ReallocAsyncCtx + 4 | 0; //@line 36912
     HEAP32[$79 >> 2] = $2; //@line 36913
     $80 = $ReallocAsyncCtx + 8 | 0; //@line 36914
     HEAP32[$80 >> 2] = $6; //@line 36915
     $81 = $ReallocAsyncCtx + 12 | 0; //@line 36916
     HEAP32[$81 >> 2] = $8; //@line 36917
     $82 = $ReallocAsyncCtx + 16 | 0; //@line 36918
     HEAP32[$82 >> 2] = $49; //@line 36919
     $83 = $ReallocAsyncCtx + 20 | 0; //@line 36920
     HEAP32[$83 >> 2] = $15; //@line 36921
     sp = STACKTOP; //@line 36922
     return;
    }
    HEAP8[___async_retval >> 0] = $78; //@line 36926
    ___async_unwind = 0; //@line 36927
    HEAP32[$ReallocAsyncCtx >> 2] = 550; //@line 36928
    $79 = $ReallocAsyncCtx + 4 | 0; //@line 36929
    HEAP32[$79 >> 2] = $2; //@line 36930
    $80 = $ReallocAsyncCtx + 8 | 0; //@line 36931
    HEAP32[$80 >> 2] = $6; //@line 36932
    $81 = $ReallocAsyncCtx + 12 | 0; //@line 36933
    HEAP32[$81 >> 2] = $8; //@line 36934
    $82 = $ReallocAsyncCtx + 16 | 0; //@line 36935
    HEAP32[$82 >> 2] = $49; //@line 36936
    $83 = $ReallocAsyncCtx + 20 | 0; //@line 36937
    HEAP32[$83 >> 2] = $15; //@line 36938
    sp = STACKTOP; //@line 36939
    return;
   }
  case 2:
   {
    $86 = HEAP8[$2 + 378 >> 0] | 0; //@line 36945
    $88 = HEAP8[$2 + 1097 >> 0] | 0; //@line 36947
    $90 = HEAP8[$2 + 1096 >> 0] | 0; //@line 36949
    $92 = +HEAPF32[$2 + 1144 >> 2]; //@line 36951
    $94 = +HEAPF32[$2 + 1148 >> 2]; //@line 36953
    $96 = HEAP16[$4 + 4 >> 1] | 0; //@line 36955
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 36956
    __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($12, $86, $88, $90, $92, $94, $96); //@line 36957
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 553; //@line 36960
     $97 = $ReallocAsyncCtx7 + 4 | 0; //@line 36961
     HEAP32[$97 >> 2] = $2; //@line 36962
     $98 = $ReallocAsyncCtx7 + 8 | 0; //@line 36963
     HEAP32[$98 >> 2] = $9; //@line 36964
     sp = STACKTOP; //@line 36965
     return;
    }
    ___async_unwind = 0; //@line 36968
    HEAP32[$ReallocAsyncCtx7 >> 2] = 553; //@line 36969
    $97 = $ReallocAsyncCtx7 + 4 | 0; //@line 36970
    HEAP32[$97 >> 2] = $2; //@line 36971
    $98 = $ReallocAsyncCtx7 + 8 | 0; //@line 36972
    HEAP32[$98 >> 2] = $9; //@line 36973
    sp = STACKTOP; //@line 36974
    return;
   }
  case 3:
   {
    $101 = HEAP8[$4 + 12 >> 0] | 0; //@line 36981
    $102 = HEAP16[$4 + 4 >> 1] | 0; //@line 36982
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 36983
    __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($12, 0, 0, $101, 0.0, 0.0, $102); //@line 36984
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 555; //@line 36987
     $103 = $ReallocAsyncCtx6 + 4 | 0; //@line 36988
     HEAP32[$103 >> 2] = $2; //@line 36989
     $104 = $ReallocAsyncCtx6 + 8 | 0; //@line 36990
     HEAP32[$104 >> 2] = $9; //@line 36991
     sp = STACKTOP; //@line 36992
     return;
    }
    ___async_unwind = 0; //@line 36995
    HEAP32[$ReallocAsyncCtx6 >> 2] = 555; //@line 36996
    $103 = $ReallocAsyncCtx6 + 4 | 0; //@line 36997
    HEAP32[$103 >> 2] = $2; //@line 36998
    $104 = $ReallocAsyncCtx6 + 8 | 0; //@line 36999
    HEAP32[$104 >> 2] = $9; //@line 37000
    sp = STACKTOP; //@line 37001
    return;
   }
  default:
   {
    $$024 = -1002; //@line 37006
    $108 = $17; //@line 37006
   }
  }
 } while (0);
 HEAP8[$2 + 373 >> 0] = 0; //@line 37011
 HEAP8[$15 >> 0] = $108 & -9; //@line 37013
 $$1 = $$024; //@line 37014
 $109 = ___async_retval; //@line 37015
 HEAP32[$109 >> 2] = $$1; //@line 37016
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_166($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32932
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32936
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32938
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32940
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32942
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32948
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32950
 $$pre$i$i = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 32951
 HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = $$pre$i$i; //@line 32953
 if ($$pre$i$i | 0) {
  $22 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 32957
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 32958
  FUNCTION_TABLE_vi[$22 & 1023]($6); //@line 32959
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 569; //@line 32962
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 32963
   HEAP32[$23 >> 2] = $2; //@line 32964
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 32965
   HEAP32[$24 >> 2] = $4; //@line 32966
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 32967
   HEAP32[$25 >> 2] = $6; //@line 32968
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 32969
   HEAP32[$26 >> 2] = $8; //@line 32970
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 32971
   HEAP32[$27 >> 2] = $10; //@line 32972
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 32973
   HEAP32[$28 >> 2] = $16; //@line 32974
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 32975
   HEAP32[$29 >> 2] = $18; //@line 32976
   sp = STACKTOP; //@line 32977
   return;
  }
  ___async_unwind = 0; //@line 32980
  HEAP32[$ReallocAsyncCtx3 >> 2] = 569; //@line 32981
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 32982
  HEAP32[$23 >> 2] = $2; //@line 32983
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 32984
  HEAP32[$24 >> 2] = $4; //@line 32985
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 32986
  HEAP32[$25 >> 2] = $6; //@line 32987
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 32988
  HEAP32[$26 >> 2] = $8; //@line 32989
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 32990
  HEAP32[$27 >> 2] = $10; //@line 32991
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 32992
  HEAP32[$28 >> 2] = $16; //@line 32993
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 32994
  HEAP32[$29 >> 2] = $18; //@line 32995
  sp = STACKTOP; //@line 32996
  return;
 }
 $30 = $8 + 12 | 0; //@line 32999
 HEAP32[$8 >> 2] = 7; //@line 33000
 HEAP32[$8 + 4 >> 2] = 0; //@line 33002
 HEAP32[$8 + 8 >> 2] = $4; //@line 33004
 HEAP32[$30 >> 2] = 860; //@line 33005
 $31 = $4 + 1244 | 0; //@line 33006
 if (($31 | 0) == ($8 | 0)) {
  $58 = HEAP32[217] | 0; //@line 33010
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 33011
  FUNCTION_TABLE_vi[$58 & 1023]($8); //@line 33012
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 33015
   $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 33016
   HEAP32[$59 >> 2] = $8; //@line 33017
   $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 33018
   HEAP32[$60 >> 2] = $2; //@line 33019
   $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 33020
   HEAP32[$61 >> 2] = $4; //@line 33021
   $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 33022
   HEAP32[$62 >> 2] = $10; //@line 33023
   $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 33024
   HEAP32[$63 >> 2] = $16; //@line 33025
   $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 33026
   HEAP32[$64 >> 2] = $18; //@line 33027
   sp = STACKTOP; //@line 33028
   return;
  }
  ___async_unwind = 0; //@line 33031
  HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 33032
  $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 33033
  HEAP32[$59 >> 2] = $8; //@line 33034
  $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 33035
  HEAP32[$60 >> 2] = $2; //@line 33036
  $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 33037
  HEAP32[$61 >> 2] = $4; //@line 33038
  $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 33039
  HEAP32[$62 >> 2] = $10; //@line 33040
  $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 33041
  HEAP32[$63 >> 2] = $16; //@line 33042
  $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 33043
  HEAP32[$64 >> 2] = $18; //@line 33044
  sp = STACKTOP; //@line 33045
  return;
 }
 $33 = $4 + 1256 | 0; //@line 33048
 $34 = HEAP32[$33 >> 2] | 0; //@line 33049
 if (!$34) {
  $48 = HEAP32[216] | 0; //@line 33053
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 33054
  FUNCTION_TABLE_vii[$48 & 31]($31, $8); //@line 33055
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 33058
   $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 33059
   HEAP32[$49 >> 2] = $8; //@line 33060
   $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 33061
   HEAP32[$50 >> 2] = $2; //@line 33062
   $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 33063
   HEAP32[$51 >> 2] = $4; //@line 33064
   $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 33065
   HEAP32[$52 >> 2] = $10; //@line 33066
   $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 33067
   HEAP32[$53 >> 2] = $30; //@line 33068
   $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 33069
   HEAP32[$54 >> 2] = $33; //@line 33070
   $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 33071
   HEAP32[$55 >> 2] = $16; //@line 33072
   $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 33073
   HEAP32[$56 >> 2] = $18; //@line 33074
   sp = STACKTOP; //@line 33075
   return;
  }
  ___async_unwind = 0; //@line 33078
  HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 33079
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 33080
  HEAP32[$49 >> 2] = $8; //@line 33081
  $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 33082
  HEAP32[$50 >> 2] = $2; //@line 33083
  $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 33084
  HEAP32[$51 >> 2] = $4; //@line 33085
  $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 33086
  HEAP32[$52 >> 2] = $10; //@line 33087
  $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 33088
  HEAP32[$53 >> 2] = $30; //@line 33089
  $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 33090
  HEAP32[$54 >> 2] = $33; //@line 33091
  $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 33092
  HEAP32[$55 >> 2] = $16; //@line 33093
  $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 33094
  HEAP32[$56 >> 2] = $18; //@line 33095
  sp = STACKTOP; //@line 33096
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 33100
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 33101
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 33102
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 33105
   $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 33106
   HEAP32[$38 >> 2] = $8; //@line 33107
   $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 33108
   HEAP32[$39 >> 2] = $2; //@line 33109
   $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 33110
   HEAP32[$40 >> 2] = $4; //@line 33111
   $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 33112
   HEAP32[$41 >> 2] = $33; //@line 33113
   $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 33114
   HEAP32[$42 >> 2] = $31; //@line 33115
   $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 33116
   HEAP32[$43 >> 2] = $10; //@line 33117
   $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 33118
   HEAP32[$44 >> 2] = $30; //@line 33119
   $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 33120
   HEAP32[$45 >> 2] = $16; //@line 33121
   $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 33122
   HEAP32[$46 >> 2] = $18; //@line 33123
   sp = STACKTOP; //@line 33124
   return;
  }
  ___async_unwind = 0; //@line 33127
  HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 33128
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 33129
  HEAP32[$38 >> 2] = $8; //@line 33130
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 33131
  HEAP32[$39 >> 2] = $2; //@line 33132
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 33133
  HEAP32[$40 >> 2] = $4; //@line 33134
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 33135
  HEAP32[$41 >> 2] = $33; //@line 33136
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 33137
  HEAP32[$42 >> 2] = $31; //@line 33138
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 33139
  HEAP32[$43 >> 2] = $10; //@line 33140
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 33141
  HEAP32[$44 >> 2] = $30; //@line 33142
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 33143
  HEAP32[$45 >> 2] = $16; //@line 33144
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 33145
  HEAP32[$46 >> 2] = $18; //@line 33146
  sp = STACKTOP; //@line 33147
  return;
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27614
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27618
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27620
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27622
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27623
 $9 = $8 + 32 | 0; //@line 27624
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $4 + 32 | 0; //@line 27628
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 27633
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 27634
  $19 = HEAP32[$4 + 8 >> 2] | 0; //@line 27636
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 27645
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 27649
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 27651
    $23 = tempRet0; //@line 27652
    $26 = $4 + 40 | 0; //@line 27655
    $27 = $26; //@line 27656
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 27662
    $34 = tempRet0; //@line 27663
    $35 = $26; //@line 27664
    HEAP32[$35 >> 2] = $33; //@line 27666
    HEAP32[$35 + 4 >> 2] = $34; //@line 27669
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 27676
     $94 = $23; //@line 27676
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 27678
     $45 = tempRet0; //@line 27679
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 27680
     $48 = $26; //@line 27682
     HEAP32[$48 >> 2] = $46; //@line 27684
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 27687
     $93 = $44; //@line 27688
     $94 = $45; //@line 27688
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 27693
      $94 = 0; //@line 27693
      break;
     }
    default:
     {
      label = 6; //@line 27697
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 27703
   $53 = tempRet0; //@line 27704
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 27705
   $55 = tempRet0; //@line 27706
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 27707
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 27709
   $60 = $4 + 40 | 0; //@line 27711
   $61 = $60; //@line 27712
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 27718
   $68 = tempRet0; //@line 27719
   $69 = $60; //@line 27720
   HEAP32[$69 >> 2] = $67; //@line 27722
   HEAP32[$69 + 4 >> 2] = $68; //@line 27725
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 27732
    $94 = $55; //@line 27732
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 27734
    $79 = tempRet0; //@line 27735
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 27736
    $82 = $60; //@line 27738
    HEAP32[$82 >> 2] = $80; //@line 27740
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 27743
    $93 = $78; //@line 27744
    $94 = $79; //@line 27744
   }
  }
  $86 = $4 + 48 | 0; //@line 27747
  $87 = $86; //@line 27748
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 27754
  $97 = $86; //@line 27756
  HEAP32[$97 >> 2] = $95; //@line 27758
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 27761
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 27764
 if (!$102) {
  $177 = (HEAP32[$4 + 16 >> 2] | 0) + (HEAP32[$4 + 32 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 27774
  $180 = HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] | 0; //@line 27777
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 27778
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 27779
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 710; //@line 27782
   sp = STACKTOP; //@line 27783
   return;
  }
  ___async_unwind = 0; //@line 27786
  HEAP32[$ReallocAsyncCtx7 >> 2] = 710; //@line 27787
  sp = STACKTOP; //@line 27788
  return;
 }
 $105 = $8 + 48 | 0; //@line 27792
 $107 = HEAP32[$105 >> 2] | 0; //@line 27794
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 27797
 $111 = $102; //@line 27798
 $113 = HEAP32[$111 >> 2] | 0; //@line 27800
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 27803
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 27812
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27813
  FUNCTION_TABLE_v[$124 & 15](); //@line 27814
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 705; //@line 27817
   sp = STACKTOP; //@line 27818
   return;
  }
  ___async_unwind = 0; //@line 27821
  HEAP32[$ReallocAsyncCtx2 >> 2] = 705; //@line 27822
  sp = STACKTOP; //@line 27823
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 27826
 $126 = tempRet0; //@line 27827
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 27829
 $130 = $8 + 24 | 0; //@line 27831
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 27836
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 27844
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 27847
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 27859
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 27861
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 27865
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 27878
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 27882
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 27884
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 27888
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 27895
 $159 = $4 + 32 | 0; //@line 27896
 $162 = HEAP32[$6 >> 2] | 0; //@line 27899
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 27902
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 27903
  FUNCTION_TABLE_v[$164 & 15](); //@line 27904
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 27907
   sp = STACKTOP; //@line 27908
   return;
  }
  ___async_unwind = 0; //@line 27911
  HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 27912
  sp = STACKTOP; //@line 27913
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 27917
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27918
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 27919
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 707; //@line 27922
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 27923
   HEAP32[$167 >> 2] = $6; //@line 27924
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 27925
   HEAP32[$168 >> 2] = $159; //@line 27926
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 27927
   HEAP32[$169 >> 2] = $158; //@line 27928
   sp = STACKTOP; //@line 27929
   return;
  }
  ___async_unwind = 0; //@line 27932
  HEAP32[$ReallocAsyncCtx4 >> 2] = 707; //@line 27933
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 27934
  HEAP32[$167 >> 2] = $6; //@line 27935
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 27936
  HEAP32[$168 >> 2] = $159; //@line 27937
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 27938
  HEAP32[$169 >> 2] = $158; //@line 27939
  sp = STACKTOP; //@line 27940
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 32 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5597
 $0 = sp; //@line 5598
 _gpio_init_out($0, 50); //@line 5599
 while (1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5602
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5603
  _wait_ms(150); //@line 5604
  if (___async) {
   label = 3; //@line 5607
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 5610
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5612
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5613
  _wait_ms(150); //@line 5614
  if (___async) {
   label = 5; //@line 5617
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 5620
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5622
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5623
  _wait_ms(150); //@line 5624
  if (___async) {
   label = 7; //@line 5627
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 5630
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5632
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5633
  _wait_ms(150); //@line 5634
  if (___async) {
   label = 9; //@line 5637
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 5640
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5642
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5643
  _wait_ms(150); //@line 5644
  if (___async) {
   label = 11; //@line 5647
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 5650
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5652
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5653
  _wait_ms(150); //@line 5654
  if (___async) {
   label = 13; //@line 5657
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 5660
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5662
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5663
  _wait_ms(150); //@line 5664
  if (___async) {
   label = 15; //@line 5667
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5670
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5672
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5673
  _wait_ms(150); //@line 5674
  if (___async) {
   label = 17; //@line 5677
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5680
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5682
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5683
  _wait_ms(400); //@line 5684
  if (___async) {
   label = 19; //@line 5687
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5690
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5692
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5693
  _wait_ms(400); //@line 5694
  if (___async) {
   label = 21; //@line 5697
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5700
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5702
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5703
  _wait_ms(400); //@line 5704
  if (___async) {
   label = 23; //@line 5707
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5710
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5712
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5713
  _wait_ms(400); //@line 5714
  if (___async) {
   label = 25; //@line 5717
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5720
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5722
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5723
  _wait_ms(400); //@line 5724
  if (___async) {
   label = 27; //@line 5727
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5730
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5732
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5733
  _wait_ms(400); //@line 5734
  if (___async) {
   label = 29; //@line 5737
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5740
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5742
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5743
  _wait_ms(400); //@line 5744
  if (___async) {
   label = 31; //@line 5747
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5750
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5752
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5753
  _wait_ms(400); //@line 5754
  if (___async) {
   label = 33; //@line 5757
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5760
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 715; //@line 5764
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 5766
   sp = STACKTOP; //@line 5767
   STACKTOP = sp; //@line 5768
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 716; //@line 5772
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 5774
   sp = STACKTOP; //@line 5775
   STACKTOP = sp; //@line 5776
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 717; //@line 5780
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 5782
   sp = STACKTOP; //@line 5783
   STACKTOP = sp; //@line 5784
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 718; //@line 5788
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 5790
   sp = STACKTOP; //@line 5791
   STACKTOP = sp; //@line 5792
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 719; //@line 5796
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 5798
   sp = STACKTOP; //@line 5799
   STACKTOP = sp; //@line 5800
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 720; //@line 5804
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 5806
   sp = STACKTOP; //@line 5807
   STACKTOP = sp; //@line 5808
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 721; //@line 5812
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 5814
   sp = STACKTOP; //@line 5815
   STACKTOP = sp; //@line 5816
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 722; //@line 5820
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 5822
   sp = STACKTOP; //@line 5823
   STACKTOP = sp; //@line 5824
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 723; //@line 5828
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 5830
   sp = STACKTOP; //@line 5831
   STACKTOP = sp; //@line 5832
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 724; //@line 5836
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 5838
   sp = STACKTOP; //@line 5839
   STACKTOP = sp; //@line 5840
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 725; //@line 5844
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 5846
   sp = STACKTOP; //@line 5847
   STACKTOP = sp; //@line 5848
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 726; //@line 5852
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 5854
   sp = STACKTOP; //@line 5855
   STACKTOP = sp; //@line 5856
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 727; //@line 5860
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5862
   sp = STACKTOP; //@line 5863
   STACKTOP = sp; //@line 5864
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 728; //@line 5868
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5870
   sp = STACKTOP; //@line 5871
   STACKTOP = sp; //@line 5872
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 729; //@line 5876
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5878
   sp = STACKTOP; //@line 5879
   STACKTOP = sp; //@line 5880
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 730; //@line 5884
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5886
   sp = STACKTOP; //@line 5887
   STACKTOP = sp; //@line 5888
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_440($0) {
 $0 = $0 | 0;
 var $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $75 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22443
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22445
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22447
 $5 = $4 + 688 | 0; //@line 22448
 switch (HEAP8[$5 >> 0] | 0) {
 case 1:
  {
   if (!(HEAP8[$4 + 689 >> 0] | 0)) {
    HEAP8[$4 + 732 >> 0] = 0; //@line 22457
    HEAP8[$4 + 733 >> 0] = 0; //@line 22459
    HEAP16[$4 + 744 >> 1] = 0; //@line 22461
    HEAP16[$4 + 742 >> 1] = 0; //@line 22463
    if (!(HEAP8[$4 + 722 >> 0] | 0)) {
     HEAP8[$5 >> 0] = 0; //@line 22468
     $17 = $4 + 1176 | 0; //@line 22469
     $18 = $2 + 12 | 0; //@line 22470
     HEAP32[$2 >> 2] = 73; //@line 22471
     HEAP32[$2 + 4 >> 2] = 0; //@line 22473
     HEAP32[$2 + 8 >> 2] = $4; //@line 22475
     HEAP32[$18 >> 2] = 648; //@line 22476
     $21 = ___muldi3(HEAP32[$4 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 22479
     $22 = tempRet0; //@line 22480
     $23 = $4 + 1216 | 0; //@line 22481
     do {
      if (($23 | 0) != ($2 | 0)) {
       $25 = $4 + 1228 | 0; //@line 22485
       $26 = HEAP32[$25 >> 2] | 0; //@line 22486
       if ($26 | 0) {
        $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 22490
        $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 22491
        FUNCTION_TABLE_vi[$29 & 1023]($23); //@line 22492
        if (___async) {
         HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 22495
         $30 = $ReallocAsyncCtx + 4 | 0; //@line 22496
         HEAP32[$30 >> 2] = $18; //@line 22497
         $31 = $ReallocAsyncCtx + 8 | 0; //@line 22498
         HEAP32[$31 >> 2] = $25; //@line 22499
         $32 = $ReallocAsyncCtx + 12 | 0; //@line 22500
         HEAP32[$32 >> 2] = $23; //@line 22501
         $33 = $ReallocAsyncCtx + 16 | 0; //@line 22502
         HEAP32[$33 >> 2] = $2; //@line 22503
         $34 = $ReallocAsyncCtx + 20 | 0; //@line 22504
         HEAP32[$34 >> 2] = $17; //@line 22505
         $35 = $ReallocAsyncCtx + 24 | 0; //@line 22506
         $36 = $35; //@line 22507
         $37 = $36; //@line 22508
         HEAP32[$37 >> 2] = $21; //@line 22509
         $38 = $36 + 4 | 0; //@line 22510
         $39 = $38; //@line 22511
         HEAP32[$39 >> 2] = $22; //@line 22512
         $40 = $ReallocAsyncCtx + 32 | 0; //@line 22513
         HEAP32[$40 >> 2] = $4; //@line 22514
         sp = STACKTOP; //@line 22515
         return;
        }
        ___async_unwind = 0; //@line 22518
        HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 22519
        $30 = $ReallocAsyncCtx + 4 | 0; //@line 22520
        HEAP32[$30 >> 2] = $18; //@line 22521
        $31 = $ReallocAsyncCtx + 8 | 0; //@line 22522
        HEAP32[$31 >> 2] = $25; //@line 22523
        $32 = $ReallocAsyncCtx + 12 | 0; //@line 22524
        HEAP32[$32 >> 2] = $23; //@line 22525
        $33 = $ReallocAsyncCtx + 16 | 0; //@line 22526
        HEAP32[$33 >> 2] = $2; //@line 22527
        $34 = $ReallocAsyncCtx + 20 | 0; //@line 22528
        HEAP32[$34 >> 2] = $17; //@line 22529
        $35 = $ReallocAsyncCtx + 24 | 0; //@line 22530
        $36 = $35; //@line 22531
        $37 = $36; //@line 22532
        HEAP32[$37 >> 2] = $21; //@line 22533
        $38 = $36 + 4 | 0; //@line 22534
        $39 = $38; //@line 22535
        HEAP32[$39 >> 2] = $22; //@line 22536
        $40 = $ReallocAsyncCtx + 32 | 0; //@line 22537
        HEAP32[$40 >> 2] = $4; //@line 22538
        sp = STACKTOP; //@line 22539
        return;
       }
       $41 = HEAP32[$18 >> 2] | 0; //@line 22542
       if (!$41) {
        HEAP32[$25 >> 2] = 0; //@line 22545
        break;
       }
       $44 = HEAP32[$41 + 4 >> 2] | 0; //@line 22549
       $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 22550
       FUNCTION_TABLE_vii[$44 & 31]($23, $2); //@line 22551
       if (___async) {
        HEAP32[$ReallocAsyncCtx2 >> 2] = 133; //@line 22554
        $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 22555
        HEAP32[$45 >> 2] = $18; //@line 22556
        $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 22557
        HEAP32[$46 >> 2] = $25; //@line 22558
        $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 22559
        HEAP32[$47 >> 2] = $17; //@line 22560
        $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 22561
        $49 = $48; //@line 22562
        $50 = $49; //@line 22563
        HEAP32[$50 >> 2] = $21; //@line 22564
        $51 = $49 + 4 | 0; //@line 22565
        $52 = $51; //@line 22566
        HEAP32[$52 >> 2] = $22; //@line 22567
        $53 = $ReallocAsyncCtx2 + 24 | 0; //@line 22568
        HEAP32[$53 >> 2] = $4; //@line 22569
        $54 = $ReallocAsyncCtx2 + 28 | 0; //@line 22570
        HEAP32[$54 >> 2] = $2; //@line 22571
        sp = STACKTOP; //@line 22572
        return;
       }
       ___async_unwind = 0; //@line 22575
       HEAP32[$ReallocAsyncCtx2 >> 2] = 133; //@line 22576
       $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 22577
       HEAP32[$45 >> 2] = $18; //@line 22578
       $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 22579
       HEAP32[$46 >> 2] = $25; //@line 22580
       $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 22581
       HEAP32[$47 >> 2] = $17; //@line 22582
       $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 22583
       $49 = $48; //@line 22584
       $50 = $49; //@line 22585
       HEAP32[$50 >> 2] = $21; //@line 22586
       $51 = $49 + 4 | 0; //@line 22587
       $52 = $51; //@line 22588
       HEAP32[$52 >> 2] = $22; //@line 22589
       $53 = $ReallocAsyncCtx2 + 24 | 0; //@line 22590
       HEAP32[$53 >> 2] = $4; //@line 22591
       $54 = $ReallocAsyncCtx2 + 28 | 0; //@line 22592
       HEAP32[$54 >> 2] = $2; //@line 22593
       sp = STACKTOP; //@line 22594
       return;
      }
     } while (0);
     __ZN4mbed6Ticker5setupEy($17, $21, $22); //@line 22598
     $55 = HEAP32[$18 >> 2] | 0; //@line 22599
     if ($55 | 0) {
      $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 22603
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22604
      FUNCTION_TABLE_vi[$58 & 1023]($2); //@line 22605
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 22608
       $59 = $ReallocAsyncCtx3 + 4 | 0; //@line 22609
       HEAP32[$59 >> 2] = $4; //@line 22610
       sp = STACKTOP; //@line 22611
       return;
      }
      ___async_unwind = 0; //@line 22614
      HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 22615
      $59 = $ReallocAsyncCtx3 + 4 | 0; //@line 22616
      HEAP32[$59 >> 2] = $4; //@line 22617
      sp = STACKTOP; //@line 22618
      return;
     }
    }
   }
   $61 = HEAP32[$4 + 784 >> 2] | 0; //@line 22624
   if (!$61) {
    return;
   }
   $64 = HEAP32[$61 + 60 >> 2] | 0; //@line 22630
   if (!$64) {
    return;
   }
   $67 = HEAP32[$64 >> 2] | 0; //@line 22636
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 22637
   FUNCTION_TABLE_vi[$67 & 1023]($61 + 48 | 0); //@line 22638
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22641
    sp = STACKTOP; //@line 22642
    return;
   }
   ___async_unwind = 0; //@line 22645
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22646
   sp = STACKTOP; //@line 22647
   return;
  }
 case 2:
  {
   HEAP8[$5 >> 0] = 0; //@line 22652
   $69 = HEAP32[$4 + 784 >> 2] | 0; //@line 22654
   if (!$69) {
    return;
   }
   $72 = HEAP32[$69 + 28 >> 2] | 0; //@line 22660
   if (!$72) {
    return;
   }
   $75 = HEAP32[$72 >> 2] | 0; //@line 22666
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22667
   FUNCTION_TABLE_vi[$75 & 1023]($69 + 16 | 0); //@line 22668
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 22671
    sp = STACKTOP; //@line 22672
    return;
   }
   ___async_unwind = 0; //@line 22675
   HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 22676
   sp = STACKTOP; //@line 22677
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_168($0) {
 $0 = $0 | 0;
 var $$pre119 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 33329
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33331
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33333
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33335
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33337
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33339
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33341
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33343
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33345
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33347
 $$pre119 = HEAP32[$14 >> 2] | 0; //@line 33348
 if ($$pre119 | 0) {
  $21 = HEAP32[$$pre119 + 4 >> 2] | 0; //@line 33352
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 33353
  FUNCTION_TABLE_vii[$21 & 31]($10, $2); //@line 33354
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 33357
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 33358
   HEAP32[$22 >> 2] = $2; //@line 33359
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 33360
   HEAP32[$23 >> 2] = $4; //@line 33361
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 33362
   HEAP32[$24 >> 2] = $6; //@line 33363
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 33364
   HEAP32[$25 >> 2] = $12; //@line 33365
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 33366
   HEAP32[$26 >> 2] = $14; //@line 33367
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 33368
   HEAP32[$27 >> 2] = $8; //@line 33369
   $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 33370
   HEAP32[$28 >> 2] = $16; //@line 33371
   $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 33372
   HEAP32[$29 >> 2] = $18; //@line 33373
   sp = STACKTOP; //@line 33374
   return;
  }
  ___async_unwind = 0; //@line 33377
  HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 33378
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 33379
  HEAP32[$22 >> 2] = $2; //@line 33380
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 33381
  HEAP32[$23 >> 2] = $4; //@line 33382
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 33383
  HEAP32[$24 >> 2] = $6; //@line 33384
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 33385
  HEAP32[$25 >> 2] = $12; //@line 33386
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 33387
  HEAP32[$26 >> 2] = $14; //@line 33388
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 33389
  HEAP32[$27 >> 2] = $8; //@line 33390
  $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 33391
  HEAP32[$28 >> 2] = $16; //@line 33392
  $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 33393
  HEAP32[$29 >> 2] = $18; //@line 33394
  sp = STACKTOP; //@line 33395
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 33398
 $30 = $4 + 12 | 0; //@line 33399
 HEAP32[$4 >> 2] = 573; //@line 33400
 HEAP32[$4 + 4 >> 2] = 0; //@line 33402
 HEAP32[$4 + 8 >> 2] = $6; //@line 33404
 HEAP32[$30 >> 2] = 848; //@line 33405
 $31 = $6 + 1276 | 0; //@line 33406
 if (($31 | 0) == ($4 | 0)) {
  $56 = HEAP32[214] | 0; //@line 33410
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 33411
  FUNCTION_TABLE_vi[$56 & 1023]($4); //@line 33412
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 33415
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 33416
   HEAP32[$57 >> 2] = $12; //@line 33417
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 33418
   HEAP32[$58 >> 2] = $16; //@line 33419
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 33420
   HEAP32[$59 >> 2] = $6; //@line 33421
   $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 33422
   HEAP32[$60 >> 2] = $4; //@line 33423
   $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 33424
   HEAP32[$61 >> 2] = $18; //@line 33425
   sp = STACKTOP; //@line 33426
   return;
  }
  ___async_unwind = 0; //@line 33429
  HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 33430
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 33431
  HEAP32[$57 >> 2] = $12; //@line 33432
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 33433
  HEAP32[$58 >> 2] = $16; //@line 33434
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 33435
  HEAP32[$59 >> 2] = $6; //@line 33436
  $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 33437
  HEAP32[$60 >> 2] = $4; //@line 33438
  $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 33439
  HEAP32[$61 >> 2] = $18; //@line 33440
  sp = STACKTOP; //@line 33441
  return;
 }
 $33 = $6 + 1288 | 0; //@line 33444
 $34 = HEAP32[$33 >> 2] | 0; //@line 33445
 if (!$34) {
  $47 = HEAP32[213] | 0; //@line 33449
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 33450
  FUNCTION_TABLE_vii[$47 & 31]($31, $4); //@line 33451
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 33454
   $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 33455
   HEAP32[$48 >> 2] = $4; //@line 33456
   $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 33457
   HEAP32[$49 >> 2] = $12; //@line 33458
   $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 33459
   HEAP32[$50 >> 2] = $16; //@line 33460
   $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 33461
   HEAP32[$51 >> 2] = $6; //@line 33462
   $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 33463
   HEAP32[$52 >> 2] = $30; //@line 33464
   $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 33465
   HEAP32[$53 >> 2] = $33; //@line 33466
   $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 33467
   HEAP32[$54 >> 2] = $18; //@line 33468
   sp = STACKTOP; //@line 33469
   return;
  }
  ___async_unwind = 0; //@line 33472
  HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 33473
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 33474
  HEAP32[$48 >> 2] = $4; //@line 33475
  $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 33476
  HEAP32[$49 >> 2] = $12; //@line 33477
  $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 33478
  HEAP32[$50 >> 2] = $16; //@line 33479
  $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 33480
  HEAP32[$51 >> 2] = $6; //@line 33481
  $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 33482
  HEAP32[$52 >> 2] = $30; //@line 33483
  $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 33484
  HEAP32[$53 >> 2] = $33; //@line 33485
  $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 33486
  HEAP32[$54 >> 2] = $18; //@line 33487
  sp = STACKTOP; //@line 33488
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 33492
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 33493
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 33494
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 33497
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 33498
   HEAP32[$38 >> 2] = $4; //@line 33499
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 33500
   HEAP32[$39 >> 2] = $33; //@line 33501
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 33502
   HEAP32[$40 >> 2] = $31; //@line 33503
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 33504
   HEAP32[$41 >> 2] = $30; //@line 33505
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 33506
   HEAP32[$42 >> 2] = $12; //@line 33507
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 33508
   HEAP32[$43 >> 2] = $16; //@line 33509
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 33510
   HEAP32[$44 >> 2] = $6; //@line 33511
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 33512
   HEAP32[$45 >> 2] = $18; //@line 33513
   sp = STACKTOP; //@line 33514
   return;
  }
  ___async_unwind = 0; //@line 33517
  HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 33518
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 33519
  HEAP32[$38 >> 2] = $4; //@line 33520
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 33521
  HEAP32[$39 >> 2] = $33; //@line 33522
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 33523
  HEAP32[$40 >> 2] = $31; //@line 33524
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 33525
  HEAP32[$41 >> 2] = $30; //@line 33526
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 33527
  HEAP32[$42 >> 2] = $12; //@line 33528
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 33529
  HEAP32[$43 >> 2] = $16; //@line 33530
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 33531
  HEAP32[$44 >> 2] = $6; //@line 33532
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 33533
  HEAP32[$45 >> 2] = $18; //@line 33534
  sp = STACKTOP; //@line 33535
  return;
 }
}
function _main() {
 var $$0 = 0, $$1 = 0, $$pr = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $21 = 0, $24 = 0, $30 = 0, $34 = 0, $35 = 0, $38 = 0, $46 = 0, $47 = 0, $56 = 0, $67 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6466
 STACKTOP = STACKTOP + 48 | 0; //@line 6467
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6467
 $vararg_buffer = sp; //@line 6468
 $0 = sp + 8 | 0; //@line 6469
 $1 = sp + 24 | 0; //@line 6470
 $AsyncCtx25 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6471
 _puts(15301) | 0; //@line 6472
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 747; //@line 6475
  HEAP32[$AsyncCtx25 + 4 >> 2] = $0; //@line 6477
  HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 6479
  HEAP32[$AsyncCtx25 + 12 >> 2] = $vararg_buffer; //@line 6481
  HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer; //@line 6483
  HEAP32[$AsyncCtx25 + 20 >> 2] = $1; //@line 6485
  sp = STACKTOP; //@line 6486
  STACKTOP = sp; //@line 6487
  return 0; //@line 6487
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 6489
 if (__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(23168, 22968) | 0) {
  $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6493
  _puts(15368) | 0; //@line 6494
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 748; //@line 6497
   sp = STACKTOP; //@line 6498
   STACKTOP = sp; //@line 6499
   return 0; //@line 6499
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 6501
  $$1 = -1; //@line 6502
  STACKTOP = sp; //@line 6503
  return $$1 | 0; //@line 6503
 }
 $10 = $0 + 4 | 0; //@line 6506
 HEAP32[$10 >> 2] = 0; //@line 6508
 HEAP32[$10 + 4 >> 2] = 0; //@line 6511
 HEAP32[$0 >> 2] = 7; //@line 6512
 $14 = $0 + 12 | 0; //@line 6513
 HEAP32[$14 >> 2] = 10120; //@line 6514
 $AsyncCtx32 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6515
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(22896, $0); //@line 6516
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 749; //@line 6519
  HEAP32[$AsyncCtx32 + 4 >> 2] = $14; //@line 6521
  HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 6523
  HEAP32[$AsyncCtx32 + 12 >> 2] = $vararg_buffer; //@line 6525
  HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer; //@line 6527
  HEAP32[$AsyncCtx32 + 20 >> 2] = $1; //@line 6529
  HEAP32[$AsyncCtx32 + 24 >> 2] = $0; //@line 6531
  sp = STACKTOP; //@line 6532
  STACKTOP = sp; //@line 6533
  return 0; //@line 6533
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 6535
 $21 = HEAP32[$14 >> 2] | 0; //@line 6536
 do {
  if ($21 | 0) {
   $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 6541
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6542
   FUNCTION_TABLE_vi[$24 & 1023]($0); //@line 6543
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 750; //@line 6546
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6548
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 6550
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 6552
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 6554
    sp = STACKTOP; //@line 6555
    STACKTOP = sp; //@line 6556
    return 0; //@line 6556
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6558
    break;
   }
  }
 } while (0);
 $30 = $1 + 4 | 0; //@line 6564
 HEAP32[$30 >> 2] = 0; //@line 6566
 HEAP32[$30 + 4 >> 2] = 0; //@line 6569
 HEAP32[$1 >> 2] = 751; //@line 6570
 $34 = $1 + 12 | 0; //@line 6571
 HEAP32[$34 >> 2] = 10140; //@line 6572
 $35 = HEAP32[5797] | 0; //@line 6573
 if (!$35) {
  $46 = 10140; //@line 6576
  label = 18; //@line 6577
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 6580
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6581
  FUNCTION_TABLE_vi[$38 & 1023](23176); //@line 6582
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 752; //@line 6585
   HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 6587
   HEAP32[$AsyncCtx2 + 8 >> 2] = $34; //@line 6589
   HEAP32[$AsyncCtx2 + 12 >> 2] = $vararg_buffer; //@line 6591
   HEAP32[$AsyncCtx2 + 16 >> 2] = $vararg_buffer; //@line 6593
   HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 6595
   sp = STACKTOP; //@line 6596
   STACKTOP = sp; //@line 6597
   return 0; //@line 6597
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6599
  $$pr = HEAP32[$34 >> 2] | 0; //@line 6600
  if (!$$pr) {
   HEAP32[5797] = 0; //@line 6603
  } else {
   $46 = $$pr; //@line 6605
   label = 18; //@line 6606
  }
 }
 do {
  if ((label | 0) == 18) {
   $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 6612
   $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6613
   FUNCTION_TABLE_vii[$47 & 31](23176, $1); //@line 6614
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 753; //@line 6617
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 6619
    HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 6621
    HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer; //@line 6623
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 6625
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 6627
    sp = STACKTOP; //@line 6628
    STACKTOP = sp; //@line 6629
    return 0; //@line 6629
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6631
   $$pre$i$i = HEAP32[$34 >> 2] | 0; //@line 6632
   HEAP32[5797] = $$pre$i$i; //@line 6633
   if ($$pre$i$i | 0) {
    $56 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 6638
    $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6639
    FUNCTION_TABLE_vi[$56 & 1023]($1); //@line 6640
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 754; //@line 6643
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 6645
     HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 6647
     HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer; //@line 6649
     HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 6651
     sp = STACKTOP; //@line 6652
     STACKTOP = sp; //@line 6653
     return 0; //@line 6653
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6655
     break;
    }
   }
  }
 } while (0);
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23168, 23176) | 0; //@line 6661
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23168) | 0) {
  $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6665
  _puts(15396) | 0; //@line 6666
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 755; //@line 6669
   sp = STACKTOP; //@line 6670
   STACKTOP = sp; //@line 6671
   return 0; //@line 6671
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6673
  $$1 = -1; //@line 6674
  STACKTOP = sp; //@line 6675
  return $$1 | 0; //@line 6675
 }
 __ZN16LoRaWANInterface12set_datarateEh(23168, 5) | 0; //@line 6677
 HEAP8[$1 >> 0] = 0; //@line 6678
 HEAP32[$1 + 4 >> 2] = 23873; //@line 6680
 HEAP32[$1 + 8 >> 2] = 23881; //@line 6682
 HEAP32[$1 + 12 >> 2] = 23889; //@line 6684
 HEAP8[$1 + 16 >> 0] = 3; //@line 6686
 $67 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23168, $1) | 0; //@line 6687
 L43 : do {
  switch ($67 | 0) {
  case 0:
  case -1016:
   {
    $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6691
    _puts(15459) | 0; //@line 6692
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 756; //@line 6695
     HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 6697
     sp = STACKTOP; //@line 6698
     STACKTOP = sp; //@line 6699
     return 0; //@line 6699
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6701
    $AsyncCtx28 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6702
    __ZN6events10EventQueue8dispatchEi(22968, -1); //@line 6703
    if (___async) {
     HEAP32[$AsyncCtx28 >> 2] = 757; //@line 6706
     HEAP32[$AsyncCtx28 + 4 >> 2] = $1; //@line 6708
     sp = STACKTOP; //@line 6709
     STACKTOP = sp; //@line 6710
     return 0; //@line 6710
    } else {
     _emscripten_free_async_context($AsyncCtx28 | 0); //@line 6712
     $$0 = 0; //@line 6713
     break L43;
    }
    break;
   }
  default:
   {
    HEAP32[$vararg_buffer >> 2] = $67; //@line 6719
    _printf(15430, $vararg_buffer) | 0; //@line 6720
    $$0 = -1; //@line 6721
   }
  }
 } while (0);
 $$1 = $$0; //@line 6725
 STACKTOP = sp; //@line 6726
 return $$1 | 0; //@line 6726
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_454($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23558
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23560
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 23566
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 23568
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 23570
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 23572
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 23574
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 23576
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 23578
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 23580
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 23582
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 23584
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 23586
 $34 = HEAP8[$2 >> 0] | 0; //@line 23587
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 23591
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 23592
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 23605
  $38 = $39 & 255; //@line 23606
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 23609
  HEAP32[$16 >> 2] = $42; //@line 23610
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 23616
  HEAP32[$16 >> 2] = $48; //@line 23617
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 23623
  HEAP32[$16 >> 2] = $54 * 100; //@line 23625
  HEAP32[$18 >> 2] = 0; //@line 23626
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 23631
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 23632
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 23633
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 23636
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 23637
    HEAP32[$60 >> 2] = $2; //@line 23638
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 23639
    HEAP8[$61 >> 0] = $39; //@line 23640
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 23641
    HEAP8[$62 >> 0] = $30; //@line 23642
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 23643
    HEAP32[$63 >> 2] = $8; //@line 23644
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 23645
    HEAP32[$64 >> 2] = $10; //@line 23646
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 23647
    HEAP32[$65 >> 2] = $12; //@line 23648
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 23649
    HEAP32[$66 >> 2] = $14; //@line 23650
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 23651
    HEAP32[$67 >> 2] = $16; //@line 23652
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 23653
    HEAP32[$68 >> 2] = $18; //@line 23654
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 23655
    HEAP32[$69 >> 2] = $20; //@line 23656
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 23657
    HEAP32[$70 >> 2] = $22; //@line 23658
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 23659
    HEAP32[$71 >> 2] = $24; //@line 23660
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 23661
    HEAP32[$72 >> 2] = $26; //@line 23662
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 23663
    HEAP32[$73 >> 2] = $28; //@line 23664
    sp = STACKTOP; //@line 23665
    return;
   }
   ___async_unwind = 0; //@line 23668
   HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 23669
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 23670
   HEAP32[$60 >> 2] = $2; //@line 23671
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 23672
   HEAP8[$61 >> 0] = $39; //@line 23673
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 23674
   HEAP8[$62 >> 0] = $30; //@line 23675
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 23676
   HEAP32[$63 >> 2] = $8; //@line 23677
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 23678
   HEAP32[$64 >> 2] = $10; //@line 23679
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 23680
   HEAP32[$65 >> 2] = $12; //@line 23681
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 23682
   HEAP32[$66 >> 2] = $14; //@line 23683
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 23684
   HEAP32[$67 >> 2] = $16; //@line 23685
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 23686
   HEAP32[$68 >> 2] = $18; //@line 23687
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 23688
   HEAP32[$69 >> 2] = $20; //@line 23689
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 23690
   HEAP32[$70 >> 2] = $22; //@line 23691
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 23692
   HEAP32[$71 >> 2] = $24; //@line 23693
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 23694
   HEAP32[$72 >> 2] = $26; //@line 23695
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 23696
   HEAP32[$73 >> 2] = $28; //@line 23697
   sp = STACKTOP; //@line 23698
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 23702
  HEAP8[$20 >> 0] = 0; //@line 23703
  HEAP32[$18 >> 2] = 0; //@line 23704
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 23708
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 23709
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 23710
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 23713
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 23714
  HEAP32[$77 >> 2] = $2; //@line 23715
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 23716
  HEAP8[$78 >> 0] = $39; //@line 23717
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 23718
  HEAP8[$79 >> 0] = $30; //@line 23719
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 23720
  HEAP32[$80 >> 2] = $8; //@line 23721
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 23722
  HEAP32[$81 >> 2] = $10; //@line 23723
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 23724
  HEAP32[$82 >> 2] = $12; //@line 23725
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 23726
  HEAP32[$83 >> 2] = $14; //@line 23727
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 23728
  HEAP32[$84 >> 2] = $16; //@line 23729
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 23730
  HEAP32[$85 >> 2] = $18; //@line 23731
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 23732
  HEAP32[$86 >> 2] = $20; //@line 23733
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 23734
  HEAP32[$87 >> 2] = $22; //@line 23735
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 23736
  HEAP32[$88 >> 2] = $24; //@line 23737
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 23738
  HEAP32[$89 >> 2] = $26; //@line 23739
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 23740
  HEAP32[$90 >> 2] = $28; //@line 23741
  sp = STACKTOP; //@line 23742
  return;
 }
 ___async_unwind = 0; //@line 23745
 HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 23746
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 23747
 HEAP32[$77 >> 2] = $2; //@line 23748
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 23749
 HEAP8[$78 >> 0] = $39; //@line 23750
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 23751
 HEAP8[$79 >> 0] = $30; //@line 23752
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 23753
 HEAP32[$80 >> 2] = $8; //@line 23754
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 23755
 HEAP32[$81 >> 2] = $10; //@line 23756
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 23757
 HEAP32[$82 >> 2] = $12; //@line 23758
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 23759
 HEAP32[$83 >> 2] = $14; //@line 23760
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 23761
 HEAP32[$84 >> 2] = $16; //@line 23762
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 23763
 HEAP32[$85 >> 2] = $18; //@line 23764
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 23765
 HEAP32[$86 >> 2] = $20; //@line 23766
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 23767
 HEAP32[$87 >> 2] = $22; //@line 23768
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 23769
 HEAP32[$88 >> 2] = $24; //@line 23770
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 23771
 HEAP32[$89 >> 2] = $26; //@line 23772
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 23773
 HEAP32[$90 >> 2] = $28; //@line 23774
 sp = STACKTOP; //@line 23775
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23330
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23332
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 23338
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 23340
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 23342
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 23344
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 23346
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 23348
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 23350
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 23352
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 23354
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 23356
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 23358
 $34 = HEAP8[$2 >> 0] | 0; //@line 23359
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 23363
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 23364
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 23377
  $38 = $39 & 255; //@line 23378
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 23381
  HEAP32[$16 >> 2] = $42; //@line 23382
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 23388
  HEAP32[$16 >> 2] = $48; //@line 23389
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 23395
  HEAP32[$16 >> 2] = $54 * 100; //@line 23397
  HEAP32[$18 >> 2] = 0; //@line 23398
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 23403
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 23404
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 23405
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 23408
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 23409
    HEAP32[$60 >> 2] = $2; //@line 23410
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 23411
    HEAP8[$61 >> 0] = $39; //@line 23412
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 23413
    HEAP8[$62 >> 0] = $30; //@line 23414
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 23415
    HEAP32[$63 >> 2] = $8; //@line 23416
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 23417
    HEAP32[$64 >> 2] = $10; //@line 23418
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 23419
    HEAP32[$65 >> 2] = $12; //@line 23420
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 23421
    HEAP32[$66 >> 2] = $14; //@line 23422
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 23423
    HEAP32[$67 >> 2] = $16; //@line 23424
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 23425
    HEAP32[$68 >> 2] = $18; //@line 23426
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 23427
    HEAP32[$69 >> 2] = $20; //@line 23428
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 23429
    HEAP32[$70 >> 2] = $22; //@line 23430
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 23431
    HEAP32[$71 >> 2] = $24; //@line 23432
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 23433
    HEAP32[$72 >> 2] = $26; //@line 23434
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 23435
    HEAP32[$73 >> 2] = $28; //@line 23436
    sp = STACKTOP; //@line 23437
    return;
   }
   ___async_unwind = 0; //@line 23440
   HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 23441
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 23442
   HEAP32[$60 >> 2] = $2; //@line 23443
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 23444
   HEAP8[$61 >> 0] = $39; //@line 23445
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 23446
   HEAP8[$62 >> 0] = $30; //@line 23447
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 23448
   HEAP32[$63 >> 2] = $8; //@line 23449
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 23450
   HEAP32[$64 >> 2] = $10; //@line 23451
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 23452
   HEAP32[$65 >> 2] = $12; //@line 23453
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 23454
   HEAP32[$66 >> 2] = $14; //@line 23455
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 23456
   HEAP32[$67 >> 2] = $16; //@line 23457
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 23458
   HEAP32[$68 >> 2] = $18; //@line 23459
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 23460
   HEAP32[$69 >> 2] = $20; //@line 23461
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 23462
   HEAP32[$70 >> 2] = $22; //@line 23463
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 23464
   HEAP32[$71 >> 2] = $24; //@line 23465
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 23466
   HEAP32[$72 >> 2] = $26; //@line 23467
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 23468
   HEAP32[$73 >> 2] = $28; //@line 23469
   sp = STACKTOP; //@line 23470
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 23474
  HEAP8[$20 >> 0] = 0; //@line 23475
  HEAP32[$18 >> 2] = 0; //@line 23476
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 23480
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 23481
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 23482
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 23485
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 23486
  HEAP32[$77 >> 2] = $2; //@line 23487
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 23488
  HEAP8[$78 >> 0] = $39; //@line 23489
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 23490
  HEAP8[$79 >> 0] = $30; //@line 23491
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 23492
  HEAP32[$80 >> 2] = $8; //@line 23493
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 23494
  HEAP32[$81 >> 2] = $10; //@line 23495
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 23496
  HEAP32[$82 >> 2] = $12; //@line 23497
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 23498
  HEAP32[$83 >> 2] = $14; //@line 23499
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 23500
  HEAP32[$84 >> 2] = $16; //@line 23501
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 23502
  HEAP32[$85 >> 2] = $18; //@line 23503
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 23504
  HEAP32[$86 >> 2] = $20; //@line 23505
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 23506
  HEAP32[$87 >> 2] = $22; //@line 23507
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 23508
  HEAP32[$88 >> 2] = $24; //@line 23509
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 23510
  HEAP32[$89 >> 2] = $26; //@line 23511
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 23512
  HEAP32[$90 >> 2] = $28; //@line 23513
  sp = STACKTOP; //@line 23514
  return;
 }
 ___async_unwind = 0; //@line 23517
 HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 23518
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 23519
 HEAP32[$77 >> 2] = $2; //@line 23520
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 23521
 HEAP8[$78 >> 0] = $39; //@line 23522
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 23523
 HEAP8[$79 >> 0] = $30; //@line 23524
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 23525
 HEAP32[$80 >> 2] = $8; //@line 23526
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 23527
 HEAP32[$81 >> 2] = $10; //@line 23528
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 23529
 HEAP32[$82 >> 2] = $12; //@line 23530
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 23531
 HEAP32[$83 >> 2] = $14; //@line 23532
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 23533
 HEAP32[$84 >> 2] = $16; //@line 23534
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 23535
 HEAP32[$85 >> 2] = $18; //@line 23536
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 23537
 HEAP32[$86 >> 2] = $20; //@line 23538
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 23539
 HEAP32[$87 >> 2] = $22; //@line 23540
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 23541
 HEAP32[$88 >> 2] = $24; //@line 23542
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 23543
 HEAP32[$89 >> 2] = $26; //@line 23544
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 23545
 HEAP32[$90 >> 2] = $28; //@line 23546
 sp = STACKTOP; //@line 23547
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7359
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7361
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 7363
 $6 = HEAP8[$0 + 9 >> 0] | 0; //@line 7365
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 7367
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 7369
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 7372
 $13 = $10 + 12 | 0; //@line 7373
 HEAP32[$13 >> 2] = $$pre$i; //@line 7374
 if ($$pre$i | 0) {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7379
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 7380
  FUNCTION_TABLE_vii[$16 & 31]($2, $10); //@line 7381
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 7384
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 7385
   HEAP32[$17 >> 2] = $13; //@line 7386
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 7387
   HEAP32[$18 >> 2] = $2; //@line 7388
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 7389
   HEAP8[$19 >> 0] = $4; //@line 7390
   $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 7391
   HEAP8[$20 >> 0] = $6; //@line 7392
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 7393
   HEAP32[$21 >> 2] = $8; //@line 7394
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 7395
   HEAP32[$22 >> 2] = $13; //@line 7396
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 7397
   HEAP32[$23 >> 2] = $10; //@line 7398
   sp = STACKTOP; //@line 7399
   return;
  }
  ___async_unwind = 0; //@line 7402
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 7403
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 7404
  HEAP32[$17 >> 2] = $13; //@line 7405
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 7406
  HEAP32[$18 >> 2] = $2; //@line 7407
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 7408
  HEAP8[$19 >> 0] = $4; //@line 7409
  $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 7410
  HEAP8[$20 >> 0] = $6; //@line 7411
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 7412
  HEAP32[$21 >> 2] = $8; //@line 7413
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 7414
  HEAP32[$22 >> 2] = $13; //@line 7415
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 7416
  HEAP32[$23 >> 2] = $10; //@line 7417
  sp = STACKTOP; //@line 7418
  return;
 }
 $24 = $2 + 12 | 0; //@line 7421
 HEAP32[$24 >> 2] = 0; //@line 7422
 $25 = $2 + 16 | 0; //@line 7423
 HEAP8[$25 >> 0] = $4; //@line 7424
 HEAP8[$2 + 17 >> 0] = $6; //@line 7426
 $27 = _equeue_alloc($8, 20) | 0; //@line 7427
 if ($27 | 0) {
  $29 = HEAP32[$24 >> 2] | 0; //@line 7430
  if (!$29) {
   HEAP32[$27 + 12 >> 2] = 0; //@line 7434
   HEAP16[$27 + 16 >> 1] = HEAP16[$25 >> 1] | 0; //@line 7437
   _equeue_event_dtor($27, 282); //@line 7438
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 7439
   $44 = _equeue_post($8, 283, $27) | 0; //@line 7440
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 7443
    $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 7444
    HEAP32[$45 >> 2] = $24; //@line 7445
    $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 7446
    HEAP32[$46 >> 2] = $13; //@line 7447
    $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 7448
    HEAP32[$47 >> 2] = $2; //@line 7449
    $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 7450
    HEAP32[$48 >> 2] = $10; //@line 7451
    sp = STACKTOP; //@line 7452
    return;
   }
   HEAP32[___async_retval >> 2] = $44; //@line 7456
   ___async_unwind = 0; //@line 7457
   HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 7458
   $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 7459
   HEAP32[$45 >> 2] = $24; //@line 7460
   $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 7461
   HEAP32[$46 >> 2] = $13; //@line 7462
   $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 7463
   HEAP32[$47 >> 2] = $2; //@line 7464
   $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 7465
   HEAP32[$48 >> 2] = $10; //@line 7466
   sp = STACKTOP; //@line 7467
   return;
  } else {
   $32 = HEAP32[$29 + 4 >> 2] | 0; //@line 7471
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 7472
   FUNCTION_TABLE_vii[$32 & 31]($27, $2); //@line 7473
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 7476
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 7477
    HEAP32[$33 >> 2] = $24; //@line 7478
    $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 7479
    HEAP32[$34 >> 2] = $27; //@line 7480
    $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 7481
    HEAP32[$35 >> 2] = $25; //@line 7482
    $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 7483
    HEAP32[$36 >> 2] = $8; //@line 7484
    $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 7485
    HEAP32[$37 >> 2] = $24; //@line 7486
    $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 7487
    HEAP32[$38 >> 2] = $13; //@line 7488
    $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 7489
    HEAP32[$39 >> 2] = $2; //@line 7490
    $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 7491
    HEAP32[$40 >> 2] = $10; //@line 7492
    sp = STACKTOP; //@line 7493
    return;
   }
   ___async_unwind = 0; //@line 7496
   HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 7497
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 7498
   HEAP32[$33 >> 2] = $24; //@line 7499
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 7500
   HEAP32[$34 >> 2] = $27; //@line 7501
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 7502
   HEAP32[$35 >> 2] = $25; //@line 7503
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 7504
   HEAP32[$36 >> 2] = $8; //@line 7505
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 7506
   HEAP32[$37 >> 2] = $24; //@line 7507
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 7508
   HEAP32[$38 >> 2] = $13; //@line 7509
   $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 7510
   HEAP32[$39 >> 2] = $2; //@line 7511
   $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 7512
   HEAP32[$40 >> 2] = $10; //@line 7513
   sp = STACKTOP; //@line 7514
   return;
  }
 }
 $50 = HEAP32[$24 >> 2] | 0; //@line 7518
 if ($50 | 0) {
  $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 7522
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 7523
  FUNCTION_TABLE_vi[$53 & 1023]($2); //@line 7524
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 7527
   $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 7528
   HEAP32[$54 >> 2] = $13; //@line 7529
   $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 7530
   HEAP32[$55 >> 2] = 0; //@line 7531
   $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 7532
   HEAP32[$56 >> 2] = $10; //@line 7533
   sp = STACKTOP; //@line 7534
   return;
  }
  ___async_unwind = 0; //@line 7537
  HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 7538
  $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 7539
  HEAP32[$54 >> 2] = $13; //@line 7540
  $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 7541
  HEAP32[$55 >> 2] = 0; //@line 7542
  $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 7543
  HEAP32[$56 >> 2] = $10; //@line 7544
  sp = STACKTOP; //@line 7545
  return;
 }
 $57 = HEAP32[$13 >> 2] | 0; //@line 7548
 if (!$57) {
  HEAP32[___async_retval >> 2] = 0; //@line 7552
  return;
 }
 $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 7556
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 7557
 FUNCTION_TABLE_vi[$60 & 1023]($10); //@line 7558
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 7561
  $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 7562
  HEAP32[$61 >> 2] = 0; //@line 7563
  sp = STACKTOP; //@line 7564
  return;
 }
 ___async_unwind = 0; //@line 7567
 HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 7568
 $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 7569
 HEAP32[$61 >> 2] = 0; //@line 7570
 sp = STACKTOP; //@line 7571
 return;
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35134
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35136
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35140
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 35159
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 35177
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 35195
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 35213
  $83 = $6 + 136 | 0; //@line 35215
  HEAP32[$83 >> 2] = $81; //@line 35217
  HEAP32[$83 + 4 >> 2] = $63; //@line 35220
  $88 = $6 + 264 | 0; //@line 35222
  HEAP32[$88 >> 2] = $45; //@line 35224
  HEAP32[$88 + 4 >> 2] = $27; //@line 35227
  $93 = $6 + 200 | 0; //@line 35229
  HEAP32[$93 >> 2] = 0; //@line 35231
  HEAP32[$93 + 4 >> 2] = 0; //@line 35234
  $98 = $6 + 72 | 0; //@line 35236
  HEAP32[$98 >> 2] = 0; //@line 35238
  HEAP32[$98 + 4 >> 2] = 0; //@line 35241
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 35243
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 35245
  $106 = tempRet0; //@line 35246
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 35247
  $109 = $107 | $105; //@line 35249
  $110 = tempRet0 | $106; //@line 35250
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 35251
  $112 = tempRet0; //@line 35252
  $114 = $103 & -520093696 ^ $112; //@line 35254
  $116 = $6 + 104 | 0; //@line 35256
  HEAP32[$116 >> 2] = $109; //@line 35258
  HEAP32[$116 + 4 >> 2] = $110; //@line 35261
  $121 = $6 + 232 | 0; //@line 35263
  HEAP32[$121 >> 2] = $111; //@line 35265
  HEAP32[$121 + 4 >> 2] = $114; //@line 35268
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 35270
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 35272
  $129 = tempRet0; //@line 35273
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 35274
  $132 = $130 | $128; //@line 35276
  $133 = tempRet0 | $129; //@line 35277
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 35278
  $135 = tempRet0; //@line 35279
  $137 = $126 & -520093696 ^ $135; //@line 35281
  $139 = $6 + 88 | 0; //@line 35283
  HEAP32[$139 >> 2] = $132; //@line 35285
  HEAP32[$139 + 4 >> 2] = $133; //@line 35288
  $144 = $6 + 216 | 0; //@line 35290
  HEAP32[$144 >> 2] = $134; //@line 35292
  HEAP32[$144 + 4 >> 2] = $137; //@line 35295
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 35297
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 35299
  $152 = tempRet0; //@line 35300
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 35301
  $155 = $151 | $153; //@line 35303
  $156 = $152 | tempRet0; //@line 35304
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 35305
  $160 = $149 & -520093696 ^ tempRet0; //@line 35308
  $162 = $6 + 80 | 0; //@line 35310
  HEAP32[$162 >> 2] = $155; //@line 35312
  HEAP32[$162 + 4 >> 2] = $156; //@line 35315
  $167 = $6 + 208 | 0; //@line 35317
  HEAP32[$167 >> 2] = $157; //@line 35319
  HEAP32[$167 + 4 >> 2] = $160; //@line 35322
  $171 = $157 ^ $134; //@line 35323
  $172 = $160 ^ $137; //@line 35324
  $174 = $6 + 224 | 0; //@line 35326
  HEAP32[$174 >> 2] = $171; //@line 35328
  HEAP32[$174 + 4 >> 2] = $172; //@line 35331
  $178 = $155 ^ $132; //@line 35332
  $179 = $156 ^ $133; //@line 35333
  $181 = $6 + 96 | 0; //@line 35335
  HEAP32[$181 >> 2] = $178; //@line 35337
  HEAP32[$181 + 4 >> 2] = $179; //@line 35340
  $185 = $157 ^ $111; //@line 35341
  $186 = $160 ^ $114; //@line 35342
  $188 = $6 + 240 | 0; //@line 35344
  HEAP32[$188 >> 2] = $185; //@line 35346
  HEAP32[$188 + 4 >> 2] = $186; //@line 35349
  $192 = $155 ^ $109; //@line 35350
  $193 = $156 ^ $110; //@line 35351
  $195 = $6 + 112 | 0; //@line 35353
  HEAP32[$195 >> 2] = $192; //@line 35355
  HEAP32[$195 + 4 >> 2] = $193; //@line 35358
  $199 = $134 ^ $111; //@line 35359
  $200 = $137 ^ $114; //@line 35360
  $202 = $6 + 248 | 0; //@line 35362
  HEAP32[$202 >> 2] = $199; //@line 35364
  HEAP32[$202 + 4 >> 2] = $200; //@line 35367
  $206 = $132 ^ $109; //@line 35368
  $207 = $133 ^ $110; //@line 35369
  $209 = $6 + 120 | 0; //@line 35371
  HEAP32[$209 >> 2] = $206; //@line 35373
  HEAP32[$209 + 4 >> 2] = $207; //@line 35376
  $213 = $171 ^ $111; //@line 35377
  $214 = $172 ^ $114; //@line 35378
  $216 = $6 + 256 | 0; //@line 35380
  HEAP32[$216 >> 2] = $213; //@line 35382
  HEAP32[$216 + 4 >> 2] = $214; //@line 35385
  $220 = $178 ^ $109; //@line 35386
  $221 = $179 ^ $110; //@line 35387
  $223 = $6 + 128 | 0; //@line 35389
  HEAP32[$223 >> 2] = $220; //@line 35391
  HEAP32[$223 + 4 >> 2] = $221; //@line 35394
  $230 = $6 + 272 | 0; //@line 35398
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 35400
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 35403
  $237 = $6 + 144 | 0; //@line 35407
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 35409
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 35412
  $244 = $6 + 280 | 0; //@line 35416
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 35418
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 35421
  $251 = $6 + 152 | 0; //@line 35425
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 35427
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 35430
  $258 = $6 + 288 | 0; //@line 35434
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 35436
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 35439
  $265 = $6 + 160 | 0; //@line 35443
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 35445
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 35448
  $272 = $6 + 296 | 0; //@line 35452
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 35454
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 35457
  $279 = $6 + 168 | 0; //@line 35461
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 35463
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 35466
  $286 = $6 + 304 | 0; //@line 35470
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 35472
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 35475
  $293 = $6 + 176 | 0; //@line 35479
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 35481
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 35484
  $300 = $6 + 312 | 0; //@line 35488
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 35490
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 35493
  $307 = $6 + 184 | 0; //@line 35497
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 35499
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 35502
  $314 = $6 + 320 | 0; //@line 35506
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 35508
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 35511
  $321 = $6 + 192 | 0; //@line 35515
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 35517
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 35520
  $$0$i = 0; //@line 35521
 } else {
  $$0$i = $AsyncRetVal; //@line 35523
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 35526
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_169($0) {
 $0 = $0 | 0;
 var $$pre$i$i21 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 33545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33547
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33549
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33551
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33553
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33559
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33561
 $$pre$i$i21 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 33562
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i21; //@line 33564
 if ($$pre$i$i21 | 0) {
  $20 = HEAP32[$$pre$i$i21 + 8 >> 2] | 0; //@line 33568
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 33569
  FUNCTION_TABLE_vi[$20 & 1023]($2); //@line 33570
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 33573
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 33574
   HEAP32[$21 >> 2] = $2; //@line 33575
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 33576
   HEAP32[$22 >> 2] = $4; //@line 33577
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 33578
   HEAP32[$23 >> 2] = $6; //@line 33579
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 33580
   HEAP32[$24 >> 2] = $8; //@line 33581
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 33582
   HEAP32[$25 >> 2] = $14; //@line 33583
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 33584
   HEAP32[$26 >> 2] = $16; //@line 33585
   sp = STACKTOP; //@line 33586
   return;
  }
  ___async_unwind = 0; //@line 33589
  HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 33590
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 33591
  HEAP32[$21 >> 2] = $2; //@line 33592
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 33593
  HEAP32[$22 >> 2] = $4; //@line 33594
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 33595
  HEAP32[$23 >> 2] = $6; //@line 33596
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 33597
  HEAP32[$24 >> 2] = $8; //@line 33598
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 33599
  HEAP32[$25 >> 2] = $14; //@line 33600
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 33601
  HEAP32[$26 >> 2] = $16; //@line 33602
  sp = STACKTOP; //@line 33603
  return;
 }
 $27 = $4 + 12 | 0; //@line 33606
 HEAP32[$4 >> 2] = 573; //@line 33607
 HEAP32[$4 + 4 >> 2] = 0; //@line 33609
 HEAP32[$4 + 8 >> 2] = $6; //@line 33611
 HEAP32[$27 >> 2] = 848; //@line 33612
 $28 = $6 + 1276 | 0; //@line 33613
 if (($28 | 0) == ($4 | 0)) {
  $53 = HEAP32[214] | 0; //@line 33617
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 33618
  FUNCTION_TABLE_vi[$53 & 1023]($4); //@line 33619
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 33622
   $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 33623
   HEAP32[$54 >> 2] = $8; //@line 33624
   $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 33625
   HEAP32[$55 >> 2] = $14; //@line 33626
   $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 33627
   HEAP32[$56 >> 2] = $6; //@line 33628
   $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 33629
   HEAP32[$57 >> 2] = $4; //@line 33630
   $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 33631
   HEAP32[$58 >> 2] = $16; //@line 33632
   sp = STACKTOP; //@line 33633
   return;
  }
  ___async_unwind = 0; //@line 33636
  HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 33637
  $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 33638
  HEAP32[$54 >> 2] = $8; //@line 33639
  $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 33640
  HEAP32[$55 >> 2] = $14; //@line 33641
  $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 33642
  HEAP32[$56 >> 2] = $6; //@line 33643
  $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 33644
  HEAP32[$57 >> 2] = $4; //@line 33645
  $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 33646
  HEAP32[$58 >> 2] = $16; //@line 33647
  sp = STACKTOP; //@line 33648
  return;
 }
 $30 = $6 + 1288 | 0; //@line 33651
 $31 = HEAP32[$30 >> 2] | 0; //@line 33652
 if (!$31) {
  $44 = HEAP32[213] | 0; //@line 33656
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 33657
  FUNCTION_TABLE_vii[$44 & 31]($28, $4); //@line 33658
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 33661
   $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 33662
   HEAP32[$45 >> 2] = $4; //@line 33663
   $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 33664
   HEAP32[$46 >> 2] = $8; //@line 33665
   $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 33666
   HEAP32[$47 >> 2] = $14; //@line 33667
   $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 33668
   HEAP32[$48 >> 2] = $6; //@line 33669
   $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 33670
   HEAP32[$49 >> 2] = $27; //@line 33671
   $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 33672
   HEAP32[$50 >> 2] = $30; //@line 33673
   $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 33674
   HEAP32[$51 >> 2] = $16; //@line 33675
   sp = STACKTOP; //@line 33676
   return;
  }
  ___async_unwind = 0; //@line 33679
  HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 33680
  $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 33681
  HEAP32[$45 >> 2] = $4; //@line 33682
  $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 33683
  HEAP32[$46 >> 2] = $8; //@line 33684
  $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 33685
  HEAP32[$47 >> 2] = $14; //@line 33686
  $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 33687
  HEAP32[$48 >> 2] = $6; //@line 33688
  $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 33689
  HEAP32[$49 >> 2] = $27; //@line 33690
  $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 33691
  HEAP32[$50 >> 2] = $30; //@line 33692
  $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 33693
  HEAP32[$51 >> 2] = $16; //@line 33694
  sp = STACKTOP; //@line 33695
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 33699
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 33700
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 33701
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 33704
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 33705
   HEAP32[$35 >> 2] = $4; //@line 33706
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 33707
   HEAP32[$36 >> 2] = $30; //@line 33708
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 33709
   HEAP32[$37 >> 2] = $28; //@line 33710
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 33711
   HEAP32[$38 >> 2] = $27; //@line 33712
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 33713
   HEAP32[$39 >> 2] = $8; //@line 33714
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 33715
   HEAP32[$40 >> 2] = $14; //@line 33716
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 33717
   HEAP32[$41 >> 2] = $6; //@line 33718
   $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 33719
   HEAP32[$42 >> 2] = $16; //@line 33720
   sp = STACKTOP; //@line 33721
   return;
  }
  ___async_unwind = 0; //@line 33724
  HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 33725
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 33726
  HEAP32[$35 >> 2] = $4; //@line 33727
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 33728
  HEAP32[$36 >> 2] = $30; //@line 33729
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 33730
  HEAP32[$37 >> 2] = $28; //@line 33731
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 33732
  HEAP32[$38 >> 2] = $27; //@line 33733
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 33734
  HEAP32[$39 >> 2] = $8; //@line 33735
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 33736
  HEAP32[$40 >> 2] = $14; //@line 33737
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 33738
  HEAP32[$41 >> 2] = $6; //@line 33739
  $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 33740
  HEAP32[$42 >> 2] = $16; //@line 33741
  sp = STACKTOP; //@line 33742
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_16($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 19648
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19652
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19654
 $8 = $0 + 16 | 0; //@line 19656
 $10 = HEAP32[$8 >> 2] | 0; //@line 19658
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 19661
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 19663
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 19665
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 19667
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 19669
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 19671
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 19673
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 19675
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 19677
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 19679
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 19681
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 19683
 $37 = HEAP32[$0 + 68 >> 2] | 0; //@line 19685
 $39 = HEAP32[$0 + 72 >> 2] | 0; //@line 19687
 $41 = HEAP32[$0 + 76 >> 2] | 0; //@line 19689
 $43 = HEAP32[$0 + 80 >> 2] | 0; //@line 19691
 $45 = HEAP32[$0 + 84 >> 2] | 0; //@line 19693
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$15 >> 2]; //@line 19695
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 19696
 $46 = HEAP32[$15 >> 2] | 0; //@line 19697
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 19701
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 19702
  FUNCTION_TABLE_vi[$49 & 1023]($4); //@line 19703
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 19706
   $50 = $ReallocAsyncCtx6 + 4 | 0; //@line 19707
   HEAP32[$50 >> 2] = $17; //@line 19708
   $51 = $ReallocAsyncCtx6 + 8 | 0; //@line 19709
   HEAP32[$51 >> 2] = $19; //@line 19710
   $52 = $ReallocAsyncCtx6 + 12 | 0; //@line 19711
   HEAP32[$52 >> 2] = $21; //@line 19712
   $53 = $ReallocAsyncCtx6 + 16 | 0; //@line 19713
   HEAP32[$53 >> 2] = $23; //@line 19714
   $54 = $ReallocAsyncCtx6 + 20 | 0; //@line 19715
   HEAP32[$54 >> 2] = $25; //@line 19716
   $55 = $ReallocAsyncCtx6 + 24 | 0; //@line 19717
   HEAP32[$55 >> 2] = $27; //@line 19718
   $56 = $ReallocAsyncCtx6 + 28 | 0; //@line 19719
   HEAP32[$56 >> 2] = $29; //@line 19720
   $57 = $ReallocAsyncCtx6 + 32 | 0; //@line 19721
   HEAP32[$57 >> 2] = $31; //@line 19722
   $58 = $ReallocAsyncCtx6 + 36 | 0; //@line 19723
   HEAP32[$58 >> 2] = $33; //@line 19724
   $59 = $ReallocAsyncCtx6 + 40 | 0; //@line 19725
   HEAP32[$59 >> 2] = $35; //@line 19726
   $60 = $ReallocAsyncCtx6 + 44 | 0; //@line 19727
   HEAP32[$60 >> 2] = $37; //@line 19728
   $61 = $ReallocAsyncCtx6 + 48 | 0; //@line 19729
   HEAP32[$61 >> 2] = $39; //@line 19730
   $62 = $ReallocAsyncCtx6 + 52 | 0; //@line 19731
   HEAP32[$62 >> 2] = $41; //@line 19732
   $63 = $ReallocAsyncCtx6 + 56 | 0; //@line 19733
   HEAP32[$63 >> 2] = $43; //@line 19734
   $64 = $ReallocAsyncCtx6 + 60 | 0; //@line 19735
   HEAP32[$64 >> 2] = $45; //@line 19736
   sp = STACKTOP; //@line 19737
   return;
  }
  ___async_unwind = 0; //@line 19740
  HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 19741
  $50 = $ReallocAsyncCtx6 + 4 | 0; //@line 19742
  HEAP32[$50 >> 2] = $17; //@line 19743
  $51 = $ReallocAsyncCtx6 + 8 | 0; //@line 19744
  HEAP32[$51 >> 2] = $19; //@line 19745
  $52 = $ReallocAsyncCtx6 + 12 | 0; //@line 19746
  HEAP32[$52 >> 2] = $21; //@line 19747
  $53 = $ReallocAsyncCtx6 + 16 | 0; //@line 19748
  HEAP32[$53 >> 2] = $23; //@line 19749
  $54 = $ReallocAsyncCtx6 + 20 | 0; //@line 19750
  HEAP32[$54 >> 2] = $25; //@line 19751
  $55 = $ReallocAsyncCtx6 + 24 | 0; //@line 19752
  HEAP32[$55 >> 2] = $27; //@line 19753
  $56 = $ReallocAsyncCtx6 + 28 | 0; //@line 19754
  HEAP32[$56 >> 2] = $29; //@line 19755
  $57 = $ReallocAsyncCtx6 + 32 | 0; //@line 19756
  HEAP32[$57 >> 2] = $31; //@line 19757
  $58 = $ReallocAsyncCtx6 + 36 | 0; //@line 19758
  HEAP32[$58 >> 2] = $33; //@line 19759
  $59 = $ReallocAsyncCtx6 + 40 | 0; //@line 19760
  HEAP32[$59 >> 2] = $35; //@line 19761
  $60 = $ReallocAsyncCtx6 + 44 | 0; //@line 19762
  HEAP32[$60 >> 2] = $37; //@line 19763
  $61 = $ReallocAsyncCtx6 + 48 | 0; //@line 19764
  HEAP32[$61 >> 2] = $39; //@line 19765
  $62 = $ReallocAsyncCtx6 + 52 | 0; //@line 19766
  HEAP32[$62 >> 2] = $41; //@line 19767
  $63 = $ReallocAsyncCtx6 + 56 | 0; //@line 19768
  HEAP32[$63 >> 2] = $43; //@line 19769
  $64 = $ReallocAsyncCtx6 + 60 | 0; //@line 19770
  HEAP32[$64 >> 2] = $45; //@line 19771
  sp = STACKTOP; //@line 19772
  return;
 }
 $67 = (HEAP8[$25 + 770 >> 0] | 0) == 0; //@line 19777
 _printf(10904, $27) | 0; //@line 19778
 if ($67) {
  HEAP32[$43 >> 2] = 6; //@line 19780
  _printf(10970, $43) | 0; //@line 19781
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 19782
  _putchar(10) | 0; //@line 19783
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 19786
   $73 = $ReallocAsyncCtx8 + 4 | 0; //@line 19787
   HEAP32[$73 >> 2] = $25; //@line 19788
   $74 = $ReallocAsyncCtx8 + 8 | 0; //@line 19789
   HEAP32[$74 >> 2] = $35; //@line 19790
   $75 = $ReallocAsyncCtx8 + 12 | 0; //@line 19791
   HEAP32[$75 >> 2] = $37; //@line 19792
   $76 = $ReallocAsyncCtx8 + 16 | 0; //@line 19793
   HEAP32[$76 >> 2] = $39; //@line 19794
   $77 = $ReallocAsyncCtx8 + 20 | 0; //@line 19795
   HEAP32[$77 >> 2] = $41; //@line 19796
   sp = STACKTOP; //@line 19797
   return;
  }
  ___async_unwind = 0; //@line 19800
  HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 19801
  $73 = $ReallocAsyncCtx8 + 4 | 0; //@line 19802
  HEAP32[$73 >> 2] = $25; //@line 19803
  $74 = $ReallocAsyncCtx8 + 8 | 0; //@line 19804
  HEAP32[$74 >> 2] = $35; //@line 19805
  $75 = $ReallocAsyncCtx8 + 12 | 0; //@line 19806
  HEAP32[$75 >> 2] = $37; //@line 19807
  $76 = $ReallocAsyncCtx8 + 16 | 0; //@line 19808
  HEAP32[$76 >> 2] = $39; //@line 19809
  $77 = $ReallocAsyncCtx8 + 20 | 0; //@line 19810
  HEAP32[$77 >> 2] = $41; //@line 19811
  sp = STACKTOP; //@line 19812
  return;
 } else {
  HEAP32[$31 >> 2] = 5; //@line 19815
  _printf(10970, $31) | 0; //@line 19816
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 19817
  _putchar(10) | 0; //@line 19818
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 19821
   $68 = $ReallocAsyncCtx10 + 4 | 0; //@line 19822
   HEAP32[$68 >> 2] = $25; //@line 19823
   $69 = $ReallocAsyncCtx10 + 8 | 0; //@line 19824
   HEAP32[$69 >> 2] = $17; //@line 19825
   $70 = $ReallocAsyncCtx10 + 12 | 0; //@line 19826
   HEAP32[$70 >> 2] = $19; //@line 19827
   $71 = $ReallocAsyncCtx10 + 16 | 0; //@line 19828
   HEAP32[$71 >> 2] = $21; //@line 19829
   $72 = $ReallocAsyncCtx10 + 20 | 0; //@line 19830
   HEAP32[$72 >> 2] = $23; //@line 19831
   sp = STACKTOP; //@line 19832
   return;
  }
  ___async_unwind = 0; //@line 19835
  HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 19836
  $68 = $ReallocAsyncCtx10 + 4 | 0; //@line 19837
  HEAP32[$68 >> 2] = $25; //@line 19838
  $69 = $ReallocAsyncCtx10 + 8 | 0; //@line 19839
  HEAP32[$69 >> 2] = $17; //@line 19840
  $70 = $ReallocAsyncCtx10 + 12 | 0; //@line 19841
  HEAP32[$70 >> 2] = $19; //@line 19842
  $71 = $ReallocAsyncCtx10 + 16 | 0; //@line 19843
  HEAP32[$71 >> 2] = $21; //@line 19844
  $72 = $ReallocAsyncCtx10 + 20 | 0; //@line 19845
  HEAP32[$72 >> 2] = $23; //@line 19846
  sp = STACKTOP; //@line 19847
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $29 = 0, $35 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 24352
 $6 = $1 + 1 | 0; //@line 24355
 $7 = HEAP8[$6 >> 0] | 0; //@line 24356
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 24359
 $12 = HEAP32[$0 + 112 >> 2] | 0; //@line 24361
 $19 = $1 + 2 | 0; //@line 24368
 $20 = HEAP8[$19 >> 0] | 0; //@line 24369
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 24372
 if ($20 << 24 >> 24 > $23 << 24 >> 24) {
  HEAP8[$19 >> 0] = $23; //@line 24375
  $35 = $23; //@line 24376
 } else {
  $35 = $20; //@line 24378
 }
 $29 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 24384
 $switch$selectcmp$i = ($29 | 0) == 25e4; //@line 24385
 $switch$selectcmp4$i = ($29 | 0) == 5e5; //@line 24386
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($35 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 24397
 $42 = $0 + 4 | 0; //@line 24398
 $43 = HEAP32[$42 >> 2] | 0; //@line 24399
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 24402
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 24403
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 24404
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 626; //@line 24407
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 24409
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 24411
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 24413
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 24415
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 24417
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 24420
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 24423
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 24425
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 24427
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 24429
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 24431
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 24433
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 24435
  sp = STACKTOP; //@line 24436
  return 0; //@line 24437
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24439
 $60 = HEAP32[$42 >> 2] | 0; //@line 24440
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 24443
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 24447
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 24448
 FUNCTION_TABLE_vii[$63 & 31]($60, $67); //@line 24449
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 627; //@line 24452
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 24454
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 24456
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 24458
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 24461
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 24464
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 24466
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 24468
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 24470
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 24472
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 24474
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 24476
  sp = STACKTOP; //@line 24477
  return 0; //@line 24478
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24480
 $85 = HEAP32[$42 >> 2] | 0; //@line 24487
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 24490
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 24492
 $91 = $10 << 24 >> 24; //@line 24493
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 24497
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 24498
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 628; //@line 24501
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 24503
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 24505
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 24507
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 24509
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 24511
    sp = STACKTOP; //@line 24512
    return 0; //@line 24513
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 24515
    $$0 = 0; //@line 24516
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 24520
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 24521
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 629; //@line 24524
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 24526
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 24528
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 24530
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 24532
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 24534
    sp = STACKTOP; //@line 24535
    return 0; //@line 24536
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 24538
    $$0 = 1; //@line 24539
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 24544
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 24547
 $107 = $1 + 12 | 0; //@line 24548
 $109 = HEAP16[$107 >> 1] & 255; //@line 24550
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 24551
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 24552
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 630; //@line 24555
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 24557
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 24559
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 24561
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 24563
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 24565
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 24567
  sp = STACKTOP; //@line 24568
  return 0; //@line 24569
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 24571
 $116 = HEAP32[$42 >> 2] | 0; //@line 24572
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 24575
 $121 = HEAP16[$107 >> 1] & 255; //@line 24577
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 24578
 $122 = FUNCTION_TABLE_iiii[$119 & 15]($116, $$0, $121) | 0; //@line 24579
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 631; //@line 24582
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 24584
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 24586
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 24588
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 24590
  sp = STACKTOP; //@line 24591
  return 0; //@line 24592
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 24594
 HEAP32[$3 >> 2] = $122; //@line 24595
 $127 = HEAP32[$42 >> 2] | 0; //@line 24596
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 24599
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 24600
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 24601
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 632; //@line 24604
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 24606
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 24608
  sp = STACKTOP; //@line 24609
  return 0; //@line 24610
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 24612
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 24614
  return 1; //@line 24615
 }
 return 0; //@line 24617
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_57($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24813
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24815
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24817
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 24820
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24822
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24826
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24830
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24832
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24834
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24836
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 24838
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24840
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0)) {
    if ($6) {
     $$3$off0204 = 6; //@line 24849
     break;
    } else {
     label = 9; //@line 24852
     break;
    }
   }
   _printf(12967, $8) | 0; //@line 24856
   _printf(13114, $12) | 0; //@line 24857
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 24858
   _putchar(10) | 0; //@line 24859
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 400; //@line 24862
    $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 24863
    HEAP32[$32 >> 2] = $26; //@line 24864
    $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 24865
    HEAP32[$33 >> 2] = $16; //@line 24866
    $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 24867
    HEAP32[$34 >> 2] = $2; //@line 24868
    $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 24869
    $$expand_i1_val = $6 & 1; //@line 24870
    HEAP8[$35 >> 0] = $$expand_i1_val; //@line 24871
    $36 = $ReallocAsyncCtx4 + 17 | 0; //@line 24872
    HEAP8[$36 >> 0] = $24; //@line 24873
    $37 = $ReallocAsyncCtx4 + 20 | 0; //@line 24874
    HEAP32[$37 >> 2] = $4; //@line 24875
    $38 = $ReallocAsyncCtx4 + 24 | 0; //@line 24876
    HEAP32[$38 >> 2] = $22; //@line 24877
    $39 = $ReallocAsyncCtx4 + 28 | 0; //@line 24878
    HEAP32[$39 >> 2] = $18; //@line 24879
    $40 = $ReallocAsyncCtx4 + 32 | 0; //@line 24880
    HEAP32[$40 >> 2] = $20; //@line 24881
    sp = STACKTOP; //@line 24882
    return;
   }
   ___async_unwind = 0; //@line 24885
   HEAP32[$ReallocAsyncCtx4 >> 2] = 400; //@line 24886
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 24887
   HEAP32[$32 >> 2] = $26; //@line 24888
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 24889
   HEAP32[$33 >> 2] = $16; //@line 24890
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 24891
   HEAP32[$34 >> 2] = $2; //@line 24892
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 24893
   $$expand_i1_val = $6 & 1; //@line 24894
   HEAP8[$35 >> 0] = $$expand_i1_val; //@line 24895
   $36 = $ReallocAsyncCtx4 + 17 | 0; //@line 24896
   HEAP8[$36 >> 0] = $24; //@line 24897
   $37 = $ReallocAsyncCtx4 + 20 | 0; //@line 24898
   HEAP32[$37 >> 2] = $4; //@line 24899
   $38 = $ReallocAsyncCtx4 + 24 | 0; //@line 24900
   HEAP32[$38 >> 2] = $22; //@line 24901
   $39 = $ReallocAsyncCtx4 + 28 | 0; //@line 24902
   HEAP32[$39 >> 2] = $18; //@line 24903
   $40 = $ReallocAsyncCtx4 + 32 | 0; //@line 24904
   HEAP32[$40 >> 2] = $20; //@line 24905
   sp = STACKTOP; //@line 24906
   return;
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 4 >> 2] = 1; //@line 24911
   if ($6) {
    $$3$off0204 = 6; //@line 24913
   } else {
    label = 9; //@line 24915
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $44 = (__ZN11LoRaMacMcps16get_confirmationEv($4) | 0) + 10 | 0; //@line 24923
  if ($24 & 32) {
   HEAP8[$44 >> 0] = 1; //@line 24925
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 28 >> 0] = 1; //@line 24928
   $47 = HEAP32[$22 >> 2] | 0; //@line 24929
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 24931
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($47, $16 + 1076 | 0); //@line 24932
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 24935
    $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 24936
    HEAP32[$49 >> 2] = $16; //@line 24937
    $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 24938
    HEAP32[$50 >> 2] = $22; //@line 24939
    $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 24940
    HEAP32[$51 >> 2] = $18; //@line 24941
    $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 24942
    HEAP32[$52 >> 2] = $20; //@line 24943
    sp = STACKTOP; //@line 24944
    return;
   }
   ___async_unwind = 0; //@line 24947
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 24948
   $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 24949
   HEAP32[$49 >> 2] = $16; //@line 24950
   $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 24951
   HEAP32[$50 >> 2] = $22; //@line 24952
   $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 24953
   HEAP32[$51 >> 2] = $18; //@line 24954
   $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 24955
   HEAP32[$52 >> 2] = $20; //@line 24956
   sp = STACKTOP; //@line 24957
   return;
  }
  HEAP8[$44 >> 0] = 0; //@line 24960
  if ((HEAPU8[$16 + 895 >> 0] | 0) > (HEAPU8[$16 + 894 >> 0] | 0)) {
   $58 = HEAP32[$22 >> 2] | 0; //@line 24967
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 24969
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($58, $16 + 1076 | 0); //@line 24970
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 24973
    $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 24974
    HEAP32[$60 >> 2] = $16; //@line 24975
    $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 24976
    HEAP32[$61 >> 2] = $22; //@line 24977
    $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 24978
    HEAP32[$62 >> 2] = $18; //@line 24979
    $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 24980
    HEAP32[$63 >> 2] = $20; //@line 24981
    sp = STACKTOP; //@line 24982
    return;
   }
   ___async_unwind = 0; //@line 24985
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 24986
   $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 24987
   HEAP32[$60 >> 2] = $16; //@line 24988
   $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 24989
   HEAP32[$61 >> 2] = $22; //@line 24990
   $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 24991
   HEAP32[$62 >> 2] = $18; //@line 24992
   $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 24993
   HEAP32[$63 >> 2] = $20; //@line 24994
   sp = STACKTOP; //@line 24995
   return;
  } else {
   $$3$off0204 = 2; //@line 24998
  }
 }
 $64 = $16 + 944 | 0; //@line 25001
 HEAP8[$64 >> 0] = $$3$off0204 | HEAP8[$64 >> 0] & -7; //@line 25005
 $68 = $16 + 944 | 0; //@line 25006
 HEAP8[$68 >> 0] = HEAP8[$68 >> 0] | 32; //@line 25009
 $71 = HEAP32[$22 >> 2] | 0; //@line 25010
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 25012
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $16 + 996 | 0, 1); //@line 25013
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 25016
  $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 25017
  HEAP32[$73 >> 2] = $18; //@line 25018
  $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 25019
  HEAP32[$74 >> 2] = $20; //@line 25020
  sp = STACKTOP; //@line 25021
  return;
 }
 ___async_unwind = 0; //@line 25024
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 25025
 $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 25026
 HEAP32[$73 >> 2] = $18; //@line 25027
 $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 25028
 HEAP32[$74 >> 2] = $20; //@line 25029
 sp = STACKTOP; //@line 25030
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8956
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8958
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8960
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8962
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8963
 $11 = $4 + 12 | 0; //@line 8964
 HEAP32[$11 >> 2] = $$pre$i; //@line 8965
 if ($$pre$i | 0) {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8970
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 8971
  FUNCTION_TABLE_vii[$14 & 31]($6, $4); //@line 8972
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 8975
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 8976
   HEAP32[$15 >> 2] = $11; //@line 8977
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 8978
   HEAP32[$16 >> 2] = $6; //@line 8979
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 8980
   HEAP32[$17 >> 2] = $4; //@line 8981
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 8982
   HEAP32[$18 >> 2] = $11; //@line 8983
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 8984
   HEAP32[$19 >> 2] = $8; //@line 8985
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 8986
   HEAP32[$20 >> 2] = $10; //@line 8987
   sp = STACKTOP; //@line 8988
   return;
  }
  ___async_unwind = 0; //@line 8991
  HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 8992
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 8993
  HEAP32[$15 >> 2] = $11; //@line 8994
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 8995
  HEAP32[$16 >> 2] = $6; //@line 8996
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 8997
  HEAP32[$17 >> 2] = $4; //@line 8998
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 8999
  HEAP32[$18 >> 2] = $11; //@line 9000
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 9001
  HEAP32[$19 >> 2] = $8; //@line 9002
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 9003
  HEAP32[$20 >> 2] = $10; //@line 9004
  sp = STACKTOP; //@line 9005
  return;
 }
 $21 = $6 + 12 | 0; //@line 9008
 HEAP32[$21 >> 2] = 0; //@line 9009
 $22 = $6 + 16 | 0; //@line 9010
 HEAP32[$22 >> 2] = $8; //@line 9011
 $23 = _equeue_alloc($10, 20) | 0; //@line 9012
 if ($23 | 0) {
  $25 = HEAP32[$21 >> 2] | 0; //@line 9015
  if (!$25) {
   HEAP32[$23 + 12 >> 2] = 0; //@line 9019
   HEAP32[$23 + 16 >> 2] = HEAP32[$22 >> 2]; //@line 9022
   _equeue_event_dtor($23, 274); //@line 9023
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 9024
   $40 = _equeue_post($10, 275, $23) | 0; //@line 9025
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 9028
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 9029
    HEAP32[$41 >> 2] = $21; //@line 9030
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 9031
    HEAP32[$42 >> 2] = $11; //@line 9032
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 9033
    HEAP32[$43 >> 2] = $6; //@line 9034
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 9035
    HEAP32[$44 >> 2] = $4; //@line 9036
    sp = STACKTOP; //@line 9037
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 9041
   ___async_unwind = 0; //@line 9042
   HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 9043
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 9044
   HEAP32[$41 >> 2] = $21; //@line 9045
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 9046
   HEAP32[$42 >> 2] = $11; //@line 9047
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 9048
   HEAP32[$43 >> 2] = $6; //@line 9049
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 9050
   HEAP32[$44 >> 2] = $4; //@line 9051
   sp = STACKTOP; //@line 9052
   return;
  } else {
   $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 9056
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 9057
   FUNCTION_TABLE_vii[$28 & 31]($23, $6); //@line 9058
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 9061
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 9062
    HEAP32[$29 >> 2] = $21; //@line 9063
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 9064
    HEAP32[$30 >> 2] = $23; //@line 9065
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 9066
    HEAP32[$31 >> 2] = $22; //@line 9067
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 9068
    HEAP32[$32 >> 2] = $10; //@line 9069
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 9070
    HEAP32[$33 >> 2] = $21; //@line 9071
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 9072
    HEAP32[$34 >> 2] = $11; //@line 9073
    $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 9074
    HEAP32[$35 >> 2] = $6; //@line 9075
    $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 9076
    HEAP32[$36 >> 2] = $4; //@line 9077
    sp = STACKTOP; //@line 9078
    return;
   }
   ___async_unwind = 0; //@line 9081
   HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 9082
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 9083
   HEAP32[$29 >> 2] = $21; //@line 9084
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 9085
   HEAP32[$30 >> 2] = $23; //@line 9086
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 9087
   HEAP32[$31 >> 2] = $22; //@line 9088
   $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 9089
   HEAP32[$32 >> 2] = $10; //@line 9090
   $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 9091
   HEAP32[$33 >> 2] = $21; //@line 9092
   $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 9093
   HEAP32[$34 >> 2] = $11; //@line 9094
   $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 9095
   HEAP32[$35 >> 2] = $6; //@line 9096
   $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 9097
   HEAP32[$36 >> 2] = $4; //@line 9098
   sp = STACKTOP; //@line 9099
   return;
  }
 }
 $46 = HEAP32[$21 >> 2] | 0; //@line 9103
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 9107
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 9108
  FUNCTION_TABLE_vi[$49 & 1023]($6); //@line 9109
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 9112
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 9113
   HEAP32[$50 >> 2] = $11; //@line 9114
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 9115
   HEAP32[$51 >> 2] = 0; //@line 9116
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 9117
   HEAP32[$52 >> 2] = $4; //@line 9118
   sp = STACKTOP; //@line 9119
   return;
  }
  ___async_unwind = 0; //@line 9122
  HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 9123
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 9124
  HEAP32[$50 >> 2] = $11; //@line 9125
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 9126
  HEAP32[$51 >> 2] = 0; //@line 9127
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 9128
  HEAP32[$52 >> 2] = $4; //@line 9129
  sp = STACKTOP; //@line 9130
  return;
 }
 $53 = HEAP32[$11 >> 2] | 0; //@line 9133
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 9137
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 9141
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 9142
 FUNCTION_TABLE_vi[$56 & 1023]($4); //@line 9143
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 9146
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 9147
  HEAP32[$57 >> 2] = 0; //@line 9148
  sp = STACKTOP; //@line 9149
  return;
 }
 ___async_unwind = 0; //@line 9152
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 9153
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 9154
 HEAP32[$57 >> 2] = 0; //@line 9155
 sp = STACKTOP; //@line 9156
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_55($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24318
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24320
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24322
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24324
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24328
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 24333
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24335
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24337
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 24339
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24341
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($22) | 0)) {
    if ($18) {
     $$3$off0204 = 6; //@line 24350
     break;
    } else {
     label = 9; //@line 24353
     break;
    }
   }
   _printf(12967, $10) | 0; //@line 24357
   _printf(13114, $14) | 0; //@line 24358
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 24359
   _putchar(10) | 0; //@line 24360
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 404; //@line 24363
    $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 24364
    HEAP32[$32 >> 2] = $26; //@line 24365
    $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 24366
    HEAP32[$33 >> 2] = $2; //@line 24367
    $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 24368
    HEAP32[$34 >> 2] = $22; //@line 24369
    $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 24370
    $$expand_i1_val = $18 & 1; //@line 24371
    HEAP8[$35 >> 0] = $$expand_i1_val; //@line 24372
    $36 = $ReallocAsyncCtx2 + 17 | 0; //@line 24373
    HEAP8[$36 >> 0] = $24; //@line 24374
    $37 = $ReallocAsyncCtx2 + 20 | 0; //@line 24375
    HEAP32[$37 >> 2] = $20; //@line 24376
    $38 = $ReallocAsyncCtx2 + 24 | 0; //@line 24377
    HEAP32[$38 >> 2] = $8; //@line 24378
    $39 = $ReallocAsyncCtx2 + 28 | 0; //@line 24379
    HEAP32[$39 >> 2] = $4; //@line 24380
    $40 = $ReallocAsyncCtx2 + 32 | 0; //@line 24381
    HEAP32[$40 >> 2] = $6; //@line 24382
    sp = STACKTOP; //@line 24383
    return;
   }
   ___async_unwind = 0; //@line 24386
   HEAP32[$ReallocAsyncCtx2 >> 2] = 404; //@line 24387
   $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 24388
   HEAP32[$32 >> 2] = $26; //@line 24389
   $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 24390
   HEAP32[$33 >> 2] = $2; //@line 24391
   $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 24392
   HEAP32[$34 >> 2] = $22; //@line 24393
   $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 24394
   $$expand_i1_val = $18 & 1; //@line 24395
   HEAP8[$35 >> 0] = $$expand_i1_val; //@line 24396
   $36 = $ReallocAsyncCtx2 + 17 | 0; //@line 24397
   HEAP8[$36 >> 0] = $24; //@line 24398
   $37 = $ReallocAsyncCtx2 + 20 | 0; //@line 24399
   HEAP32[$37 >> 2] = $20; //@line 24400
   $38 = $ReallocAsyncCtx2 + 24 | 0; //@line 24401
   HEAP32[$38 >> 2] = $8; //@line 24402
   $39 = $ReallocAsyncCtx2 + 28 | 0; //@line 24403
   HEAP32[$39 >> 2] = $4; //@line 24404
   $40 = $ReallocAsyncCtx2 + 32 | 0; //@line 24405
   HEAP32[$40 >> 2] = $6; //@line 24406
   sp = STACKTOP; //@line 24407
   return;
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($20) | 0) + 4 >> 2] = 1; //@line 24412
   if ($18) {
    $$3$off0204 = 6; //@line 24414
   } else {
    label = 9; //@line 24416
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $44 = (__ZN11LoRaMacMcps16get_confirmationEv($20) | 0) + 10 | 0; //@line 24424
  if ($24 & 32) {
   HEAP8[$44 >> 0] = 1; //@line 24426
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($20) | 0) + 28 >> 0] = 1; //@line 24429
   $47 = HEAP32[$8 >> 2] | 0; //@line 24430
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 24432
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($47, $2 + 1076 | 0); //@line 24433
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 24436
    $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 24437
    HEAP32[$49 >> 2] = $2; //@line 24438
    $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 24439
    HEAP32[$50 >> 2] = $8; //@line 24440
    $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 24441
    HEAP32[$51 >> 2] = $4; //@line 24442
    $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 24443
    HEAP32[$52 >> 2] = $6; //@line 24444
    sp = STACKTOP; //@line 24445
    return;
   }
   ___async_unwind = 0; //@line 24448
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 24449
   $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 24450
   HEAP32[$49 >> 2] = $2; //@line 24451
   $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 24452
   HEAP32[$50 >> 2] = $8; //@line 24453
   $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 24454
   HEAP32[$51 >> 2] = $4; //@line 24455
   $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 24456
   HEAP32[$52 >> 2] = $6; //@line 24457
   sp = STACKTOP; //@line 24458
   return;
  }
  HEAP8[$44 >> 0] = 0; //@line 24461
  if ((HEAPU8[$2 + 895 >> 0] | 0) > (HEAPU8[$2 + 894 >> 0] | 0)) {
   $58 = HEAP32[$8 >> 2] | 0; //@line 24468
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 24470
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($58, $2 + 1076 | 0); //@line 24471
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 24474
    $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 24475
    HEAP32[$60 >> 2] = $2; //@line 24476
    $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 24477
    HEAP32[$61 >> 2] = $8; //@line 24478
    $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 24479
    HEAP32[$62 >> 2] = $4; //@line 24480
    $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 24481
    HEAP32[$63 >> 2] = $6; //@line 24482
    sp = STACKTOP; //@line 24483
    return;
   }
   ___async_unwind = 0; //@line 24486
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 24487
   $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 24488
   HEAP32[$60 >> 2] = $2; //@line 24489
   $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 24490
   HEAP32[$61 >> 2] = $8; //@line 24491
   $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 24492
   HEAP32[$62 >> 2] = $4; //@line 24493
   $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 24494
   HEAP32[$63 >> 2] = $6; //@line 24495
   sp = STACKTOP; //@line 24496
   return;
  } else {
   $$3$off0204 = 2; //@line 24499
  }
 }
 $64 = $2 + 944 | 0; //@line 24502
 HEAP8[$64 >> 0] = $$3$off0204 | HEAP8[$64 >> 0] & -7; //@line 24506
 $68 = $2 + 944 | 0; //@line 24507
 HEAP8[$68 >> 0] = HEAP8[$68 >> 0] | 32; //@line 24510
 $71 = HEAP32[$8 >> 2] | 0; //@line 24511
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 24513
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $2 + 996 | 0, 1); //@line 24514
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 24517
  $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 24518
  HEAP32[$73 >> 2] = $4; //@line 24519
  $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 24520
  HEAP32[$74 >> 2] = $6; //@line 24521
  sp = STACKTOP; //@line 24522
  return;
 }
 ___async_unwind = 0; //@line 24525
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 24526
 $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 24527
 HEAP32[$73 >> 2] = $4; //@line 24528
 $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 24529
 HEAP32[$74 >> 2] = $6; //@line 24530
 sp = STACKTOP; //@line 24531
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_513($0) {
 $0 = $0 | 0;
 var $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $29 = 0, $30 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $70 = 0, $8 = 0, $83 = 0, $95 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35910
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35912
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35914
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 35916
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35918
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35920
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35922
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35924
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 35926
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 35928
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 35931
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 64; //@line 35938
 }
 $24 = $8 + 374 | 0; //@line 35940
 if (!(HEAP8[$24 >> 0] | 0)) {
  $$pre$phiZ2D = $18; //@line 35944
 } else {
  HEAP8[$24 >> 0] = 0; //@line 35946
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 32; //@line 35949
  $$pre$phiZ2D = $18; //@line 35950
 }
 $29 = $8 + 952 | 0; //@line 35952
 $30 = HEAP32[$29 >> 2] | 0; //@line 35953
 HEAP8[$8 + 382 >> 0] = $30; //@line 35956
 HEAP8[$8 + 383 >> 0] = $30 >>> 8; //@line 35960
 HEAP8[$8 + 384 >> 0] = $30 >>> 16; //@line 35964
 HEAP8[$8 + 385 >> 0] = $30 >>> 24; //@line 35968
 $43 = $8 + 386 | 0; //@line 35970
 HEAP8[$43 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 35971
 $44 = $8 + 956 | 0; //@line 35972
 $45 = HEAP32[$44 >> 2] | 0; //@line 35973
 HEAP8[$8 + 387 >> 0] = $45; //@line 35976
 HEAP8[$8 + 388 >> 0] = $45 >>> 8; //@line 35980
 $51 = $8 + 4 | 0; //@line 35981
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($51); //@line 35982
 $52 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($51) | 0; //@line 35983
 do {
  if ($20) {
   label = 16; //@line 35986
  } else {
   if (!(HEAP8[$2 >> 0] | 0)) {
    label = 16; //@line 35991
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 35995
     $$05564 = $6; //@line 35996
     $$05663 = $4; //@line 35996
     $$15862 = 8; //@line 35996
     label = 20; //@line 35997
     break;
    }
    $56 = $52 & 255; //@line 36000
    if (($52 & 255) >= 16) {
     HEAP8[$2 >> 0] = $52; //@line 36003
     $$055 = 0; //@line 36005
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 36005
     $$158 = 8; //@line 36005
     label = 19; //@line 36006
     break;
    }
    $58 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 36009
    $64 = ($58 & 255) + $56 & 15 | $58 & -16; //@line 36015
    HEAP8[$$pre$phiZ2D >> 0] = $64; //@line 36016
    HEAP8[$43 >> 0] = $64; //@line 36017
    $65 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 36018
    if (!($52 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 36021
     $$05564 = $6; //@line 36022
     $$05663 = $4; //@line 36022
     $$15862 = 8; //@line 36022
     label = 20; //@line 36023
     break;
    } else {
     $$05766 = 8; //@line 36026
     $$06065 = 0; //@line 36026
     $68 = 0; //@line 36026
     while (1) {
      $70 = $$05766 + 1 << 24 >> 24; //@line 36030
      HEAP8[($$05766 & 255) + ($8 + 381) >> 0] = HEAP8[$65 + $68 >> 0] | 0; //@line 36033
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 36034
      $68 = $$06065 & 65535; //@line 36035
      if ($68 >>> 0 >= $56 >>> 0) {
       $$055 = $6; //@line 36040
       $$056 = $4; //@line 36040
       $$158 = $70; //@line 36040
       label = 19; //@line 36041
       break;
      } else {
       $$05766 = $70; //@line 36038
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($52 << 24 >> 24)) {
   $$055 = $6; //@line 36052
   $$056 = $4; //@line 36052
   $$158 = 8; //@line 36052
   label = 19; //@line 36053
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0) {
    HEAP8[$2 >> 0] = $52; //@line 36057
    $$055 = 0; //@line 36059
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 36059
    $$158 = 8; //@line 36059
    label = 19; //@line 36060
   } else {
    $$055 = $6; //@line 36062
    $$056 = $4; //@line 36062
    $$158 = 8; //@line 36062
    label = 19; //@line 36063
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 36068
  if (!$$056) {
   $$054 = 0; //@line 36071
   $$259 = $$158; //@line 36071
  } else {
   $$05564 = $$055; //@line 36073
   $$05663 = $$056; //@line 36073
   $$15862 = $$158; //@line 36073
   label = 20; //@line 36074
  }
 }
 do {
  if ((label | 0) == 20) {
   if (!(HEAP8[$2 >> 0] | 0)) {
    $$054 = 0; //@line 36082
    $$259 = $$15862; //@line 36082
   } else {
    $83 = $$15862 + 1 << 24 >> 24; //@line 36084
    HEAP8[($$15862 & 255) + ($8 + 381) >> 0] = $$05564; //@line 36087
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($51); //@line 36090
     $95 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$2 >> 0] | 0, $8 + 912 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($8 + 381) | 0) | 0) == 0; //@line 36099
     $$054 = $95 ? 0 : -1014; //@line 36101
     $$259 = $83; //@line 36101
     break;
    } else {
     $104 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$2 >> 0] | 0, $8 + 928 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($8 + 381) | 0) | 0) == 0; //@line 36112
     $$054 = $104 ? 0 : -1014; //@line 36114
     $$259 = $83; //@line 36114
     break;
    }
   }
  }
 } while (0);
 $109 = (HEAPU8[$2 >> 0] | 0) + ($$259 & 255) & 65535; //@line 36124
 HEAP16[$12 >> 1] = $109; //@line 36125
 $111 = HEAP32[$29 >> 2] | 0; //@line 36127
 $112 = HEAP32[$44 >> 2] | 0; //@line 36128
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 36129
 $113 = __Z11compute_micPKhtS0_jhjPj($14, $109, $8 + 912 | 0, $111, 0, $112, $10) | 0; //@line 36130
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 502; //@line 36133
  $114 = $ReallocAsyncCtx + 4 | 0; //@line 36134
  HEAP32[$114 >> 2] = $$054; //@line 36135
  $115 = $ReallocAsyncCtx + 8 | 0; //@line 36136
  HEAP32[$115 >> 2] = $10; //@line 36137
  $116 = $ReallocAsyncCtx + 12 | 0; //@line 36138
  HEAP32[$116 >> 2] = $12; //@line 36139
  $117 = $ReallocAsyncCtx + 16 | 0; //@line 36140
  HEAP32[$117 >> 2] = $8; //@line 36141
  $118 = $ReallocAsyncCtx + 20 | 0; //@line 36142
  HEAP32[$118 >> 2] = $16; //@line 36143
  sp = STACKTOP; //@line 36144
  return;
 }
 HEAP32[___async_retval >> 2] = $113; //@line 36148
 ___async_unwind = 0; //@line 36149
 HEAP32[$ReallocAsyncCtx >> 2] = 502; //@line 36150
 $114 = $ReallocAsyncCtx + 4 | 0; //@line 36151
 HEAP32[$114 >> 2] = $$054; //@line 36152
 $115 = $ReallocAsyncCtx + 8 | 0; //@line 36153
 HEAP32[$115 >> 2] = $10; //@line 36154
 $116 = $ReallocAsyncCtx + 12 | 0; //@line 36155
 HEAP32[$116 >> 2] = $12; //@line 36156
 $117 = $ReallocAsyncCtx + 16 | 0; //@line 36157
 HEAP32[$117 >> 2] = $8; //@line 36158
 $118 = $ReallocAsyncCtx + 20 | 0; //@line 36159
 HEAP32[$118 >> 2] = $16; //@line 36160
 sp = STACKTOP; //@line 36161
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_171($0) {
 $0 = $0 | 0;
 var $$pre120 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 33910
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33912
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33914
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33916
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33918
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33920
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33922
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33924
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33926
 $$pre120 = HEAP32[$8 >> 2] | 0; //@line 33927
 if ($$pre120 | 0) {
  $19 = HEAP32[$$pre120 + 4 >> 2] | 0; //@line 33931
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 33932
  FUNCTION_TABLE_vii[$19 & 31]($6, $2); //@line 33933
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 33936
   $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 33937
   HEAP32[$20 >> 2] = $2; //@line 33938
   $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 33939
   HEAP32[$21 >> 2] = $10; //@line 33940
   $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 33941
   HEAP32[$22 >> 2] = $12; //@line 33942
   $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 33943
   HEAP32[$23 >> 2] = $14; //@line 33944
   $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 33945
   HEAP32[$24 >> 2] = $8; //@line 33946
   $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 33947
   HEAP32[$25 >> 2] = $4; //@line 33948
   $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 33949
   HEAP32[$26 >> 2] = $16; //@line 33950
   sp = STACKTOP; //@line 33951
   return;
  }
  ___async_unwind = 0; //@line 33954
  HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 33955
  $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 33956
  HEAP32[$20 >> 2] = $2; //@line 33957
  $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 33958
  HEAP32[$21 >> 2] = $10; //@line 33959
  $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 33960
  HEAP32[$22 >> 2] = $12; //@line 33961
  $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 33962
  HEAP32[$23 >> 2] = $14; //@line 33963
  $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 33964
  HEAP32[$24 >> 2] = $8; //@line 33965
  $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 33966
  HEAP32[$25 >> 2] = $4; //@line 33967
  $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 33968
  HEAP32[$26 >> 2] = $16; //@line 33969
  sp = STACKTOP; //@line 33970
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 33973
 $27 = $16 + 12 | 0; //@line 33974
 HEAP32[$16 >> 2] = 577; //@line 33975
 HEAP32[$16 + 4 >> 2] = 0; //@line 33977
 HEAP32[$16 + 8 >> 2] = $14; //@line 33979
 HEAP32[$27 >> 2] = 848; //@line 33980
 $28 = $14 + 1228 | 0; //@line 33981
 if (($28 | 0) == ($16 | 0)) {
  $51 = HEAP32[214] | 0; //@line 33985
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 33986
  FUNCTION_TABLE_vi[$51 & 1023]($16); //@line 33987
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 33990
   $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 33991
   HEAP32[$52 >> 2] = $16; //@line 33992
   $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 33993
   HEAP32[$53 >> 2] = $12; //@line 33994
   $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 33995
   HEAP32[$54 >> 2] = $14; //@line 33996
   $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 33997
   HEAP32[$55 >> 2] = $10; //@line 33998
   sp = STACKTOP; //@line 33999
   return;
  }
  ___async_unwind = 0; //@line 34002
  HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 34003
  $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 34004
  HEAP32[$52 >> 2] = $16; //@line 34005
  $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 34006
  HEAP32[$53 >> 2] = $12; //@line 34007
  $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 34008
  HEAP32[$54 >> 2] = $14; //@line 34009
  $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 34010
  HEAP32[$55 >> 2] = $10; //@line 34011
  sp = STACKTOP; //@line 34012
  return;
 }
 $30 = $14 + 1240 | 0; //@line 34015
 $31 = HEAP32[$30 >> 2] | 0; //@line 34016
 if (!$31) {
  $43 = HEAP32[213] | 0; //@line 34020
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 34021
  FUNCTION_TABLE_vii[$43 & 31]($28, $16); //@line 34022
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 34025
   $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 34026
   HEAP32[$44 >> 2] = $10; //@line 34027
   $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 34028
   HEAP32[$45 >> 2] = $27; //@line 34029
   $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 34030
   HEAP32[$46 >> 2] = $30; //@line 34031
   $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 34032
   HEAP32[$47 >> 2] = $16; //@line 34033
   $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 34034
   HEAP32[$48 >> 2] = $12; //@line 34035
   $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 34036
   HEAP32[$49 >> 2] = $14; //@line 34037
   sp = STACKTOP; //@line 34038
   return;
  }
  ___async_unwind = 0; //@line 34041
  HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 34042
  $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 34043
  HEAP32[$44 >> 2] = $10; //@line 34044
  $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 34045
  HEAP32[$45 >> 2] = $27; //@line 34046
  $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 34047
  HEAP32[$46 >> 2] = $30; //@line 34048
  $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 34049
  HEAP32[$47 >> 2] = $16; //@line 34050
  $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 34051
  HEAP32[$48 >> 2] = $12; //@line 34052
  $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 34053
  HEAP32[$49 >> 2] = $14; //@line 34054
  sp = STACKTOP; //@line 34055
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 34059
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 34060
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 34061
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 34064
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 34065
   HEAP32[$35 >> 2] = $10; //@line 34066
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 34067
   HEAP32[$36 >> 2] = $27; //@line 34068
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 34069
   HEAP32[$37 >> 2] = $30; //@line 34070
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 34071
   HEAP32[$38 >> 2] = $16; //@line 34072
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 34073
   HEAP32[$39 >> 2] = $12; //@line 34074
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 34075
   HEAP32[$40 >> 2] = $14; //@line 34076
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 34077
   HEAP32[$41 >> 2] = $28; //@line 34078
   sp = STACKTOP; //@line 34079
   return;
  }
  ___async_unwind = 0; //@line 34082
  HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 34083
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 34084
  HEAP32[$35 >> 2] = $10; //@line 34085
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 34086
  HEAP32[$36 >> 2] = $27; //@line 34087
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 34088
  HEAP32[$37 >> 2] = $30; //@line 34089
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 34090
  HEAP32[$38 >> 2] = $16; //@line 34091
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 34092
  HEAP32[$39 >> 2] = $12; //@line 34093
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 34094
  HEAP32[$40 >> 2] = $14; //@line 34095
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 34096
  HEAP32[$41 >> 2] = $28; //@line 34097
  sp = STACKTOP; //@line 34098
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23861
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23863
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23865
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23867
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23869
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23871
 $$pre = HEAP32[$4 >> 2] | 0; //@line 23872
 if ($$pre | 0) {
  $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 23876
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 23877
  FUNCTION_TABLE_vii[$13 & 31]($8, $2); //@line 23878
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 316; //@line 23881
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 23882
   HEAP32[$14 >> 2] = $2; //@line 23883
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 23884
   HEAP32[$15 >> 2] = $6; //@line 23885
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 23886
   HEAP32[$16 >> 2] = $4; //@line 23887
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 23888
   HEAP32[$17 >> 2] = $10; //@line 23889
   sp = STACKTOP; //@line 23890
   return;
  }
  ___async_unwind = 0; //@line 23893
  HEAP32[$ReallocAsyncCtx2 >> 2] = 316; //@line 23894
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 23895
  HEAP32[$14 >> 2] = $2; //@line 23896
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 23897
  HEAP32[$15 >> 2] = $6; //@line 23898
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 23899
  HEAP32[$16 >> 2] = $4; //@line 23900
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 23901
  HEAP32[$17 >> 2] = $10; //@line 23902
  sp = STACKTOP; //@line 23903
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 23906
 $18 = $2 + 16 | 0; //@line 23907
 $19 = $2 + 28 | 0; //@line 23908
 $20 = HEAP32[$19 >> 2] | 0; //@line 23909
 if ($20 | 0) {
  $22 = $6 + 1896 | 0; //@line 23912
  if (($22 | 0) != ($18 | 0)) {
   $24 = $6 + 1908 | 0; //@line 23915
   $25 = HEAP32[$24 >> 2] | 0; //@line 23916
   if (!$25) {
    $36 = HEAP32[$20 + 4 >> 2] | 0; //@line 23920
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 23921
    FUNCTION_TABLE_vii[$36 & 31]($22, $18); //@line 23922
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 23925
     $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 23926
     HEAP32[$37 >> 2] = $19; //@line 23927
     $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 23928
     HEAP32[$38 >> 2] = $24; //@line 23929
     $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 23930
     HEAP32[$39 >> 2] = $2; //@line 23931
     $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 23932
     HEAP32[$40 >> 2] = $6; //@line 23933
     sp = STACKTOP; //@line 23934
     return;
    }
    ___async_unwind = 0; //@line 23937
    HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 23938
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 23939
    HEAP32[$37 >> 2] = $19; //@line 23940
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 23941
    HEAP32[$38 >> 2] = $24; //@line 23942
    $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 23943
    HEAP32[$39 >> 2] = $2; //@line 23944
    $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 23945
    HEAP32[$40 >> 2] = $6; //@line 23946
    sp = STACKTOP; //@line 23947
    return;
   } else {
    $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 23951
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 23952
    FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 23953
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 317; //@line 23956
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 23957
     HEAP32[$29 >> 2] = $19; //@line 23958
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 23959
     HEAP32[$30 >> 2] = $24; //@line 23960
     $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 23961
     HEAP32[$31 >> 2] = $22; //@line 23962
     $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 23963
     HEAP32[$32 >> 2] = $18; //@line 23964
     $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 23965
     HEAP32[$33 >> 2] = $2; //@line 23966
     $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 23967
     HEAP32[$34 >> 2] = $6; //@line 23968
     sp = STACKTOP; //@line 23969
     return;
    }
    ___async_unwind = 0; //@line 23972
    HEAP32[$ReallocAsyncCtx3 >> 2] = 317; //@line 23973
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 23974
    HEAP32[$29 >> 2] = $19; //@line 23975
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 23976
    HEAP32[$30 >> 2] = $24; //@line 23977
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 23978
    HEAP32[$31 >> 2] = $22; //@line 23979
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 23980
    HEAP32[$32 >> 2] = $18; //@line 23981
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 23982
    HEAP32[$33 >> 2] = $2; //@line 23983
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 23984
    HEAP32[$34 >> 2] = $6; //@line 23985
    sp = STACKTOP; //@line 23986
    return;
   }
  }
 }
 $41 = $2 + 32 | 0; //@line 23991
 $42 = $2 + 44 | 0; //@line 23992
 $43 = HEAP32[$42 >> 2] | 0; //@line 23993
 if (!$43) {
  return;
 }
 $45 = $6 + 1912 | 0; //@line 23998
 if (($45 | 0) == ($41 | 0)) {
  return;
 }
 $47 = $6 + 1924 | 0; //@line 24003
 $48 = HEAP32[$47 >> 2] | 0; //@line 24004
 if (!$48) {
  $57 = HEAP32[$43 + 4 >> 2] | 0; //@line 24008
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 24009
  FUNCTION_TABLE_vii[$57 & 31]($45, $41); //@line 24010
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24013
   $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 24014
   HEAP32[$58 >> 2] = $42; //@line 24015
   $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 24016
   HEAP32[$59 >> 2] = $47; //@line 24017
   sp = STACKTOP; //@line 24018
   return;
  }
  ___async_unwind = 0; //@line 24021
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24022
  $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 24023
  HEAP32[$58 >> 2] = $42; //@line 24024
  $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 24025
  HEAP32[$59 >> 2] = $47; //@line 24026
  sp = STACKTOP; //@line 24027
  return;
 } else {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 24031
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 24032
  FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 24033
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 24036
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 24037
   HEAP32[$52 >> 2] = $42; //@line 24038
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 24039
   HEAP32[$53 >> 2] = $47; //@line 24040
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 24041
   HEAP32[$54 >> 2] = $45; //@line 24042
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 24043
   HEAP32[$55 >> 2] = $41; //@line 24044
   sp = STACKTOP; //@line 24045
   return;
  }
  ___async_unwind = 0; //@line 24048
  HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 24049
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 24050
  HEAP32[$52 >> 2] = $42; //@line 24051
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 24052
  HEAP32[$53 >> 2] = $47; //@line 24053
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 24054
  HEAP32[$54 >> 2] = $45; //@line 24055
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 24056
  HEAP32[$55 >> 2] = $41; //@line 24057
  sp = STACKTOP; //@line 24058
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $49 = 0, $6 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 22244
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22246
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 22248
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22250
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22252
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22254
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22256
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22258
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22260
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22262
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22264
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22266
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22268
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22270
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22272
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 22274
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22276
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22278
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22280
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22282
 HEAP32[$18 >> 2] = 0; //@line 22283
 $39 = $2 + 912 | 0; //@line 22284
 $40 = $2 + 928 | 0; //@line 22285
 $41 = $2 + 288 | 0; //@line 22286
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($41) | 0) + 10 >> 0] = 0; //@line 22289
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 20 >> 1] = $30; //@line 22292
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 22 >> 0] = $4; //@line 22295
 $49 = HEAP32[$2 + 364 >> 2] | 0; //@line 22297
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 24 >> 2] = $49; //@line 22300
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 9 >> 0] = 0; //@line 22303
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 8 >> 0] = 0; //@line 22306
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 11 >> 0] = 0; //@line 22309
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 12 >> 2] = 0; //@line 22312
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 16 >> 1] = 0; //@line 22315
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 18 >> 0] = 0; //@line 22318
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 28 >> 0] = 0; //@line 22321
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 32 >> 2] = 0; //@line 22324
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) >> 2] = 0; //@line 22326
 $69 = HEAP32[$2 >> 2] | 0; //@line 22327
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(100) | 0; //@line 22328
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 22329
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 387; //@line 22332
  $70 = $ReallocAsyncCtx18 + 4 | 0; //@line 22333
  HEAP32[$70 >> 2] = $2; //@line 22334
  $71 = $ReallocAsyncCtx18 + 8 | 0; //@line 22335
  HEAP32[$71 >> 2] = $2; //@line 22336
  $72 = $ReallocAsyncCtx18 + 12 | 0; //@line 22337
  HEAP8[$72 >> 0] = $4; //@line 22338
  $73 = $ReallocAsyncCtx18 + 16 | 0; //@line 22339
  HEAP32[$73 >> 2] = $41; //@line 22340
  $74 = $ReallocAsyncCtx18 + 20 | 0; //@line 22341
  HEAP32[$74 >> 2] = $6; //@line 22342
  $75 = $ReallocAsyncCtx18 + 24 | 0; //@line 22343
  HEAP32[$75 >> 2] = $8; //@line 22344
  $76 = $ReallocAsyncCtx18 + 28 | 0; //@line 22345
  HEAP32[$76 >> 2] = $10; //@line 22346
  $77 = $ReallocAsyncCtx18 + 32 | 0; //@line 22347
  HEAP32[$77 >> 2] = $12; //@line 22348
  $78 = $ReallocAsyncCtx18 + 36 | 0; //@line 22349
  HEAP32[$78 >> 2] = $14; //@line 22350
  $79 = $ReallocAsyncCtx18 + 40 | 0; //@line 22351
  HEAP32[$79 >> 2] = $18; //@line 22352
  $80 = $ReallocAsyncCtx18 + 44 | 0; //@line 22353
  HEAP32[$80 >> 2] = $20; //@line 22354
  $81 = $ReallocAsyncCtx18 + 48 | 0; //@line 22355
  HEAP32[$81 >> 2] = $39; //@line 22356
  $82 = $ReallocAsyncCtx18 + 52 | 0; //@line 22357
  HEAP32[$82 >> 2] = $40; //@line 22358
  $83 = $ReallocAsyncCtx18 + 56 | 0; //@line 22359
  HEAP32[$83 >> 2] = $16; //@line 22360
  $84 = $ReallocAsyncCtx18 + 60 | 0; //@line 22361
  HEAP32[$84 >> 2] = $18; //@line 22362
  $85 = $ReallocAsyncCtx18 + 64 | 0; //@line 22363
  HEAP32[$85 >> 2] = $20; //@line 22364
  $86 = $ReallocAsyncCtx18 + 68 | 0; //@line 22365
  HEAP32[$86 >> 2] = $28; //@line 22366
  $87 = $ReallocAsyncCtx18 + 72 | 0; //@line 22367
  HEAP32[$87 >> 2] = $24; //@line 22368
  $88 = $ReallocAsyncCtx18 + 76 | 0; //@line 22369
  HEAP32[$88 >> 2] = $38; //@line 22370
  $89 = $ReallocAsyncCtx18 + 80 | 0; //@line 22371
  HEAP32[$89 >> 2] = $22; //@line 22372
  $90 = $ReallocAsyncCtx18 + 84 | 0; //@line 22373
  HEAP32[$90 >> 2] = $34; //@line 22374
  $91 = $ReallocAsyncCtx18 + 88 | 0; //@line 22375
  HEAP32[$91 >> 2] = $26; //@line 22376
  $92 = $ReallocAsyncCtx18 + 92 | 0; //@line 22377
  HEAP32[$92 >> 2] = $36; //@line 22378
  $93 = $ReallocAsyncCtx18 + 96 | 0; //@line 22379
  HEAP32[$93 >> 2] = $32; //@line 22380
  sp = STACKTOP; //@line 22381
  return;
 }
 ___async_unwind = 0; //@line 22384
 HEAP32[$ReallocAsyncCtx18 >> 2] = 387; //@line 22385
 $70 = $ReallocAsyncCtx18 + 4 | 0; //@line 22386
 HEAP32[$70 >> 2] = $2; //@line 22387
 $71 = $ReallocAsyncCtx18 + 8 | 0; //@line 22388
 HEAP32[$71 >> 2] = $2; //@line 22389
 $72 = $ReallocAsyncCtx18 + 12 | 0; //@line 22390
 HEAP8[$72 >> 0] = $4; //@line 22391
 $73 = $ReallocAsyncCtx18 + 16 | 0; //@line 22392
 HEAP32[$73 >> 2] = $41; //@line 22393
 $74 = $ReallocAsyncCtx18 + 20 | 0; //@line 22394
 HEAP32[$74 >> 2] = $6; //@line 22395
 $75 = $ReallocAsyncCtx18 + 24 | 0; //@line 22396
 HEAP32[$75 >> 2] = $8; //@line 22397
 $76 = $ReallocAsyncCtx18 + 28 | 0; //@line 22398
 HEAP32[$76 >> 2] = $10; //@line 22399
 $77 = $ReallocAsyncCtx18 + 32 | 0; //@line 22400
 HEAP32[$77 >> 2] = $12; //@line 22401
 $78 = $ReallocAsyncCtx18 + 36 | 0; //@line 22402
 HEAP32[$78 >> 2] = $14; //@line 22403
 $79 = $ReallocAsyncCtx18 + 40 | 0; //@line 22404
 HEAP32[$79 >> 2] = $18; //@line 22405
 $80 = $ReallocAsyncCtx18 + 44 | 0; //@line 22406
 HEAP32[$80 >> 2] = $20; //@line 22407
 $81 = $ReallocAsyncCtx18 + 48 | 0; //@line 22408
 HEAP32[$81 >> 2] = $39; //@line 22409
 $82 = $ReallocAsyncCtx18 + 52 | 0; //@line 22410
 HEAP32[$82 >> 2] = $40; //@line 22411
 $83 = $ReallocAsyncCtx18 + 56 | 0; //@line 22412
 HEAP32[$83 >> 2] = $16; //@line 22413
 $84 = $ReallocAsyncCtx18 + 60 | 0; //@line 22414
 HEAP32[$84 >> 2] = $18; //@line 22415
 $85 = $ReallocAsyncCtx18 + 64 | 0; //@line 22416
 HEAP32[$85 >> 2] = $20; //@line 22417
 $86 = $ReallocAsyncCtx18 + 68 | 0; //@line 22418
 HEAP32[$86 >> 2] = $28; //@line 22419
 $87 = $ReallocAsyncCtx18 + 72 | 0; //@line 22420
 HEAP32[$87 >> 2] = $24; //@line 22421
 $88 = $ReallocAsyncCtx18 + 76 | 0; //@line 22422
 HEAP32[$88 >> 2] = $38; //@line 22423
 $89 = $ReallocAsyncCtx18 + 80 | 0; //@line 22424
 HEAP32[$89 >> 2] = $22; //@line 22425
 $90 = $ReallocAsyncCtx18 + 84 | 0; //@line 22426
 HEAP32[$90 >> 2] = $34; //@line 22427
 $91 = $ReallocAsyncCtx18 + 88 | 0; //@line 22428
 HEAP32[$91 >> 2] = $26; //@line 22429
 $92 = $ReallocAsyncCtx18 + 92 | 0; //@line 22430
 HEAP32[$92 >> 2] = $36; //@line 22431
 $93 = $ReallocAsyncCtx18 + 96 | 0; //@line 22432
 HEAP32[$93 >> 2] = $32; //@line 22433
 sp = STACKTOP; //@line 22434
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_426($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21270
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21272
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21274
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21276
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21278
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21280
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21282
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21284
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21286
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21288
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21290
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21292
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21294
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21296
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21298
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21300
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21302
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21304
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21306
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21308
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21310
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21312
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21314
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21316
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21318
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $51 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$4 >> 2] | 0) | 0; //@line 21324
  HEAP8[$20 >> 0] = $51; //@line 21325
  HEAP8[$14 >> 0] = $51; //@line 21326
  $52 = HEAP32[$4 >> 2] | 0; //@line 21327
  $55 = HEAP32[(HEAP32[$52 >> 2] | 0) + 56 >> 2] | 0; //@line 21330
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(100) | 0; //@line 21331
  $56 = FUNCTION_TABLE_iiiiii[$55 & 7]($52, $22, $12, $24, $26) | 0; //@line 21332
  if (!___async) {
   HEAP8[___async_retval >> 0] = $56 & 1; //@line 21337
   ___async_unwind = 0; //@line 21338
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 487; //@line 21340
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 21342
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 21344
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 21346
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 21348
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 21350
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 21352
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 21354
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 21356
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 21358
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 21360
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 21362
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 21364
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 21366
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 21368
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 21370
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 21372
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 21374
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 21376
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 21378
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 21380
  HEAP32[$ReallocAsyncCtx2 + 84 >> 2] = $42; //@line 21382
  HEAP32[$ReallocAsyncCtx2 + 88 >> 2] = $44; //@line 21384
  HEAP32[$ReallocAsyncCtx2 + 92 >> 2] = $46; //@line 21386
  HEAP32[$ReallocAsyncCtx2 + 96 >> 2] = $48; //@line 21388
  sp = STACKTOP; //@line 21389
  return;
 }
 _printf(13253, $8) | 0; //@line 21392
 $85 = HEAP8[$14 >> 0] | 0; //@line 21396
 HEAP32[$16 >> 2] = HEAPU8[$12 >> 0]; //@line 21397
 HEAP32[$16 + 4 >> 2] = $85; //@line 21399
 _printf(13266, $16) | 0; //@line 21400
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(72) | 0; //@line 21401
 _putchar(10) | 0; //@line 21402
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 488; //@line 21405
  $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 21406
  HEAP32[$86 >> 2] = $2; //@line 21407
  $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 21408
  HEAP32[$87 >> 2] = $48; //@line 21409
  $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 21410
  HEAP32[$88 >> 2] = $6; //@line 21411
  $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 21412
  HEAP32[$89 >> 2] = $24; //@line 21413
  $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 21414
  HEAP32[$90 >> 2] = $36; //@line 21415
  $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 21416
  HEAP32[$91 >> 2] = $38; //@line 21417
  $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 21418
  HEAP32[$92 >> 2] = $4; //@line 21419
  $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 21420
  HEAP32[$93 >> 2] = $28; //@line 21421
  $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 21422
  HEAP32[$94 >> 2] = $30; //@line 21423
  $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 21424
  HEAP32[$95 >> 2] = $32; //@line 21425
  $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 21426
  HEAP32[$96 >> 2] = $34; //@line 21427
  $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 21428
  HEAP32[$97 >> 2] = $20; //@line 21429
  $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 21430
  HEAP32[$98 >> 2] = $40; //@line 21431
  $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 21432
  HEAP32[$99 >> 2] = $42; //@line 21433
  $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 21434
  HEAP32[$100 >> 2] = $44; //@line 21435
  $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 21436
  HEAP32[$101 >> 2] = $46; //@line 21437
  $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 21438
  HEAP32[$102 >> 2] = $12; //@line 21439
  sp = STACKTOP; //@line 21440
  return;
 }
 ___async_unwind = 0; //@line 21443
 HEAP32[$ReallocAsyncCtx8 >> 2] = 488; //@line 21444
 $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 21445
 HEAP32[$86 >> 2] = $2; //@line 21446
 $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 21447
 HEAP32[$87 >> 2] = $48; //@line 21448
 $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 21449
 HEAP32[$88 >> 2] = $6; //@line 21450
 $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 21451
 HEAP32[$89 >> 2] = $24; //@line 21452
 $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 21453
 HEAP32[$90 >> 2] = $36; //@line 21454
 $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 21455
 HEAP32[$91 >> 2] = $38; //@line 21456
 $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 21457
 HEAP32[$92 >> 2] = $4; //@line 21458
 $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 21459
 HEAP32[$93 >> 2] = $28; //@line 21460
 $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 21461
 HEAP32[$94 >> 2] = $30; //@line 21462
 $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 21463
 HEAP32[$95 >> 2] = $32; //@line 21464
 $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 21465
 HEAP32[$96 >> 2] = $34; //@line 21466
 $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 21467
 HEAP32[$97 >> 2] = $20; //@line 21468
 $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 21469
 HEAP32[$98 >> 2] = $40; //@line 21470
 $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 21471
 HEAP32[$99 >> 2] = $42; //@line 21472
 $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 21473
 HEAP32[$100 >> 2] = $44; //@line 21474
 $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 21475
 HEAP32[$101 >> 2] = $46; //@line 21476
 $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 21477
 HEAP32[$102 >> 2] = $12; //@line 21478
 sp = STACKTOP; //@line 21479
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21050
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21052
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21054
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21056
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21058
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21060
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21062
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21064
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21066
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21068
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21070
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21072
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21074
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21076
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21078
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21080
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21082
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21084
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21086
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21088
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21090
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21092
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21094
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21096
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21098
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $51 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$4 >> 2] | 0) | 0; //@line 21104
  HEAP8[$20 >> 0] = $51; //@line 21105
  HEAP8[$14 >> 0] = $51; //@line 21106
  $52 = HEAP32[$4 >> 2] | 0; //@line 21107
  $55 = HEAP32[(HEAP32[$52 >> 2] | 0) + 56 >> 2] | 0; //@line 21110
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(100) | 0; //@line 21111
  $56 = FUNCTION_TABLE_iiiiii[$55 & 7]($52, $22, $12, $24, $26) | 0; //@line 21112
  if (!___async) {
   HEAP8[___async_retval >> 0] = $56 & 1; //@line 21117
   ___async_unwind = 0; //@line 21118
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 487; //@line 21120
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 21122
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 21124
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 21126
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 21128
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 21130
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 21132
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 21134
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 21136
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 21138
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 21140
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 21142
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 21144
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 21146
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 21148
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 21150
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 21152
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 21154
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 21156
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 21158
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 21160
  HEAP32[$ReallocAsyncCtx2 + 84 >> 2] = $42; //@line 21162
  HEAP32[$ReallocAsyncCtx2 + 88 >> 2] = $44; //@line 21164
  HEAP32[$ReallocAsyncCtx2 + 92 >> 2] = $46; //@line 21166
  HEAP32[$ReallocAsyncCtx2 + 96 >> 2] = $48; //@line 21168
  sp = STACKTOP; //@line 21169
  return;
 }
 _printf(13253, $8) | 0; //@line 21172
 $85 = HEAP8[$14 >> 0] | 0; //@line 21176
 HEAP32[$16 >> 2] = HEAPU8[$12 >> 0]; //@line 21177
 HEAP32[$16 + 4 >> 2] = $85; //@line 21179
 _printf(13266, $16) | 0; //@line 21180
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(72) | 0; //@line 21181
 _putchar(10) | 0; //@line 21182
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 488; //@line 21185
  $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 21186
  HEAP32[$86 >> 2] = $2; //@line 21187
  $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 21188
  HEAP32[$87 >> 2] = $48; //@line 21189
  $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 21190
  HEAP32[$88 >> 2] = $6; //@line 21191
  $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 21192
  HEAP32[$89 >> 2] = $24; //@line 21193
  $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 21194
  HEAP32[$90 >> 2] = $36; //@line 21195
  $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 21196
  HEAP32[$91 >> 2] = $38; //@line 21197
  $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 21198
  HEAP32[$92 >> 2] = $4; //@line 21199
  $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 21200
  HEAP32[$93 >> 2] = $28; //@line 21201
  $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 21202
  HEAP32[$94 >> 2] = $30; //@line 21203
  $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 21204
  HEAP32[$95 >> 2] = $32; //@line 21205
  $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 21206
  HEAP32[$96 >> 2] = $34; //@line 21207
  $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 21208
  HEAP32[$97 >> 2] = $20; //@line 21209
  $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 21210
  HEAP32[$98 >> 2] = $40; //@line 21211
  $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 21212
  HEAP32[$99 >> 2] = $42; //@line 21213
  $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 21214
  HEAP32[$100 >> 2] = $44; //@line 21215
  $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 21216
  HEAP32[$101 >> 2] = $46; //@line 21217
  $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 21218
  HEAP32[$102 >> 2] = $12; //@line 21219
  sp = STACKTOP; //@line 21220
  return;
 }
 ___async_unwind = 0; //@line 21223
 HEAP32[$ReallocAsyncCtx8 >> 2] = 488; //@line 21224
 $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 21225
 HEAP32[$86 >> 2] = $2; //@line 21226
 $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 21227
 HEAP32[$87 >> 2] = $48; //@line 21228
 $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 21229
 HEAP32[$88 >> 2] = $6; //@line 21230
 $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 21231
 HEAP32[$89 >> 2] = $24; //@line 21232
 $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 21233
 HEAP32[$90 >> 2] = $36; //@line 21234
 $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 21235
 HEAP32[$91 >> 2] = $38; //@line 21236
 $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 21237
 HEAP32[$92 >> 2] = $4; //@line 21238
 $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 21239
 HEAP32[$93 >> 2] = $28; //@line 21240
 $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 21241
 HEAP32[$94 >> 2] = $30; //@line 21242
 $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 21243
 HEAP32[$95 >> 2] = $32; //@line 21244
 $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 21245
 HEAP32[$96 >> 2] = $34; //@line 21246
 $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 21247
 HEAP32[$97 >> 2] = $20; //@line 21248
 $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 21249
 HEAP32[$98 >> 2] = $40; //@line 21250
 $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 21251
 HEAP32[$99 >> 2] = $42; //@line 21252
 $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 21253
 HEAP32[$100 >> 2] = $44; //@line 21254
 $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 21255
 HEAP32[$101 >> 2] = $46; //@line 21256
 $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 21257
 HEAP32[$102 >> 2] = $12; //@line 21258
 sp = STACKTOP; //@line 21259
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $20 = 0, $42 = 0, $54 = 0, $57 = 0, $62 = 0, $63 = 0, $77 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 15857
 STACKTOP = STACKTOP + 32 | 0; //@line 15858
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15858
 $vararg_buffer5 = sp + 24 | 0; //@line 15859
 $vararg_buffer3 = sp + 16 | 0; //@line 15860
 $vararg_buffer1 = sp + 8 | 0; //@line 15861
 $vararg_buffer = sp; //@line 15862
 _printf(12967, $vararg_buffer) | 0; //@line 15863
 _printf(13367, $vararg_buffer1) | 0; //@line 15864
 $AsyncCtx12 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15865
 _putchar(10) | 0; //@line 15866
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 480; //@line 15869
  HEAP32[$AsyncCtx12 + 4 >> 2] = $0; //@line 15871
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer1; //@line 15873
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer; //@line 15875
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer3; //@line 15877
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer3; //@line 15879
  HEAP32[$AsyncCtx12 + 24 >> 2] = $vararg_buffer5; //@line 15881
  HEAP32[$AsyncCtx12 + 28 >> 2] = $vararg_buffer5; //@line 15883
  sp = STACKTOP; //@line 15884
  STACKTOP = sp; //@line 15885
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 15887
 $9 = HEAP32[$0 + 356 >> 2] | 0; //@line 15889
 $AsyncCtx21 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15891
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($9, $0 + 1016 | 0); //@line 15892
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 481; //@line 15895
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 15897
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer1; //@line 15899
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer; //@line 15901
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer1; //@line 15903
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer; //@line 15905
  HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 15907
  HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer3; //@line 15909
  HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 15911
  HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer5; //@line 15913
  sp = STACKTOP; //@line 15914
  STACKTOP = sp; //@line 15915
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15917
 $20 = $0 + 968 | 0; //@line 15918
 HEAP32[$20 >> 2] = HEAP32[$20 >> 2] & -17; //@line 15921
 if (HEAP8[$0 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$0 + 372 >> 0] = 0; //@line 15934
   HEAP32[$0 + 956 >> 2] = 0; //@line 15936
   HEAP32[$0 + 960 >> 2] = 0; //@line 15938
   HEAP32[$0 + 964 >> 2] = 0; //@line 15940
   HEAP8[$0 + 380 >> 0] = 0; //@line 15942
   HEAP8[$0 + 894 >> 0] = 1; //@line 15944
   HEAP8[$0 + 895 >> 0] = 1; //@line 15946
   HEAP8[$0 + 377 >> 0] = 0; //@line 15948
   HEAP8[$0 + 1152 >> 0] = 0; //@line 15950
   HEAP16[$0 + 1154 >> 1] = 1; //@line 15952
   $42 = $0 + 4 | 0; //@line 15953
   __ZN14LoRaMacCommand20clear_command_bufferEv($42); //@line 15954
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($42); //@line 15955
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($42); //@line 15956
   HEAP8[$0 + 371 >> 0] = 1; //@line 15958
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 15960
   HEAP8[$0 + 373 >> 0] = 0; //@line 15962
   HEAP8[$0 + 374 >> 0] = 0; //@line 15964
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 15966
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 15969
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 15972
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 15974
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 15984
   HEAP8[$0 + 379 >> 0] = 0; //@line 15986
   $54 = HEAP32[$0 >> 2] | 0; //@line 15987
   $57 = HEAP32[(HEAP32[$54 >> 2] | 0) + 52 >> 2] | 0; //@line 15990
   $62 = (HEAPU8[$0 + 897 >> 0] | 0) + 1 & 255; //@line 15995
   $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 15996
   $63 = FUNCTION_TABLE_iii[$57 & 31]($54, $62) | 0; //@line 15997
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 482; //@line 16000
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16002
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 16004
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16006
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 16008
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16010
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer3; //@line 16012
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 16014
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer5; //@line 16016
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer5; //@line 16018
    sp = STACKTOP; //@line 16019
    STACKTOP = sp; //@line 16020
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16022
   HEAP8[$0 + 1097 >> 0] = $63; //@line 16024
   HEAP8[$vararg_buffer1 >> 0] = 0; //@line 16025
   HEAP8[$vararg_buffer >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 16029
   $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16030
   $77 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer1, $vararg_buffer, 0, 0, 0) | 0; //@line 16031
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 483; //@line 16034
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 16036
    HEAP32[$AsyncCtx15 + 8 >> 2] = $vararg_buffer3; //@line 16038
    HEAP32[$AsyncCtx15 + 12 >> 2] = $vararg_buffer3; //@line 16040
    HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer5; //@line 16042
    HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer5; //@line 16044
    HEAP32[$AsyncCtx15 + 24 >> 2] = $vararg_buffer; //@line 16046
    HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer1; //@line 16048
    sp = STACKTOP; //@line 16049
    STACKTOP = sp; //@line 16050
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16052
   if ($77 | 0) {
    _printf(13393, $vararg_buffer3) | 0; //@line 16055
    HEAP32[$vararg_buffer5 >> 2] = $77; //@line 16056
    _printf(13406, $vararg_buffer5) | 0; //@line 16057
    $AsyncCtx8 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16058
    _putchar(10) | 0; //@line 16059
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 485; //@line 16062
     HEAP32[$AsyncCtx8 + 4 >> 2] = $vararg_buffer; //@line 16064
     HEAP32[$AsyncCtx8 + 8 >> 2] = $vararg_buffer1; //@line 16066
     sp = STACKTOP; //@line 16067
     STACKTOP = sp; //@line 16068
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 16070
    STACKTOP = sp; //@line 16071
    return;
   }
  }
 }
 $AsyncCtx18 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16075
 __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 16076
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 484; //@line 16079
  HEAP32[$AsyncCtx18 + 4 >> 2] = $vararg_buffer; //@line 16081
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer1; //@line 16083
  sp = STACKTOP; //@line 16084
  STACKTOP = sp; //@line 16085
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 16087
 STACKTOP = sp; //@line 16088
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_240($0) {
 $0 = $0 | 0;
 var $$0$i43 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22
 $trunc = HEAP8[$0 + 32 >> 0] | 0; //@line 24
 $17 = HEAP32[$0 + 36 >> 2] | 0; //@line 26
 $19 = HEAP32[$0 + 40 >> 2] | 0; //@line 28
 $21 = HEAP32[$0 + 44 >> 2] | 0; //@line 30
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 32
 $25 = HEAP32[$0 + 52 >> 2] | 0; //@line 34
 $31 = HEAP16[$0 + 64 >> 1] | 0; //@line 40
 $33 = HEAP8[$0 + 66 >> 0] & 1; //@line 43
 $39 = HEAP32[$0 + 76 >> 2] | 0; //@line 49
 $45 = (HEAP32[___async_retval >> 2] | 0) == -1010 ? HEAP8[HEAP32[$0 + 60 >> 2] >> 0] | 0 : HEAP8[(HEAP32[$0 + 56 >> 2] | 0) + 1 >> 0] | 0; //@line 58
 $$0$i43 = $45 & 255; //@line 59
 $46 = $45 & 255; //@line 60
 $47 = $31 & 65535; //@line 61
 if (($$0$i43 & 65535) < ($31 & 65535)) {
  _printf(12139, HEAP32[$0 + 68 >> 2] | 0) | 0; //@line 64
  HEAP32[$39 >> 2] = $47; //@line 65
  HEAP32[$39 + 4 >> 2] = $46; //@line 67
  _printf(12473, $39) | 0; //@line 68
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 69
  _putchar(10) | 0; //@line 70
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 304; //@line 73
   $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 74
   HEAP32[$49 >> 2] = $47; //@line 75
   $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 76
   HEAP32[$50 >> 2] = $46; //@line 77
   $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 78
   HEAP32[$51 >> 2] = $12; //@line 79
   $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 80
   HEAP16[$52 >> 1] = $$0$i43; //@line 81
   $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 82
   HEAP32[$53 >> 2] = $14; //@line 83
   $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 84
   HEAP8[$54 >> 0] = $trunc; //@line 85
   $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 86
   HEAP32[$55 >> 2] = $17; //@line 87
   $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 88
   HEAP32[$56 >> 2] = $19; //@line 89
   $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 90
   HEAP32[$57 >> 2] = $21; //@line 91
   $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 92
   HEAP32[$58 >> 2] = $23; //@line 93
   $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 94
   HEAP32[$59 >> 2] = $25; //@line 95
   $60 = $ReallocAsyncCtx3 + 48 | 0; //@line 96
   HEAP32[$60 >> 2] = $2; //@line 97
   $61 = $ReallocAsyncCtx3 + 52 | 0; //@line 98
   HEAP32[$61 >> 2] = $4; //@line 99
   $62 = $ReallocAsyncCtx3 + 56 | 0; //@line 100
   HEAP32[$62 >> 2] = $6; //@line 101
   $63 = $ReallocAsyncCtx3 + 60 | 0; //@line 102
   HEAP32[$63 >> 2] = $8; //@line 103
   $64 = $ReallocAsyncCtx3 + 64 | 0; //@line 104
   HEAP32[$64 >> 2] = $10; //@line 105
   sp = STACKTOP; //@line 106
   return;
  }
  ___async_unwind = 0; //@line 109
  HEAP32[$ReallocAsyncCtx3 >> 2] = 304; //@line 110
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 111
  HEAP32[$49 >> 2] = $47; //@line 112
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 113
  HEAP32[$50 >> 2] = $46; //@line 114
  $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 115
  HEAP32[$51 >> 2] = $12; //@line 116
  $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 117
  HEAP16[$52 >> 1] = $$0$i43; //@line 118
  $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 119
  HEAP32[$53 >> 2] = $14; //@line 120
  $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 121
  HEAP8[$54 >> 0] = $trunc; //@line 122
  $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 123
  HEAP32[$55 >> 2] = $17; //@line 124
  $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 125
  HEAP32[$56 >> 2] = $19; //@line 126
  $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 127
  HEAP32[$57 >> 2] = $21; //@line 128
  $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 129
  HEAP32[$58 >> 2] = $23; //@line 130
  $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 131
  HEAP32[$59 >> 2] = $25; //@line 132
  $60 = $ReallocAsyncCtx3 + 48 | 0; //@line 133
  HEAP32[$60 >> 2] = $2; //@line 134
  $61 = $ReallocAsyncCtx3 + 52 | 0; //@line 135
  HEAP32[$61 >> 2] = $4; //@line 136
  $62 = $ReallocAsyncCtx3 + 56 | 0; //@line 137
  HEAP32[$62 >> 2] = $6; //@line 138
  $63 = $ReallocAsyncCtx3 + 60 | 0; //@line 139
  HEAP32[$63 >> 2] = $8; //@line 140
  $64 = $ReallocAsyncCtx3 + 64 | 0; //@line 141
  HEAP32[$64 >> 2] = $10; //@line 142
  sp = STACKTOP; //@line 143
  return;
 }
 HEAP16[$12 + 2230 >> 1] = $31; //@line 147
 HEAP16[$12 + 2232 >> 1] = 0; //@line 149
 if (!$33) {
  _memcpy($12 + 1975 | 0, $14 | 0, $47 | 0) | 0; //@line 152
 }
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$12 + 1968 >> 2] = 0; //@line 158
   HEAP8[$12 + 1972 >> 0] = HEAP8[$25 >> 0] | 0; //@line 161
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 10; //@line 165
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 10; //@line 174
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 10) {
  HEAP32[$12 + 1968 >> 2] = 1; //@line 182
  HEAP8[$12 + 1972 >> 0] = HEAP8[$25 >> 0] | 0; //@line 185
  HEAP8[$12 + 1974 >> 0] = HEAP8[$12 + 2284 >> 0] | 0; //@line 189
 }
 _printf(12139, $17) | 0; //@line 191
 $77 = $12 + 2230 | 0; //@line 192
 $82 = HEAPU16[$12 + 2232 >> 1] | 0; //@line 197
 HEAP32[$21 >> 2] = HEAPU16[$77 >> 1]; //@line 198
 HEAP32[$21 + 4 >> 2] = $82; //@line 200
 _printf(12528, $21) | 0; //@line 201
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 202
 _putchar(10) | 0; //@line 203
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 206
  $83 = $ReallocAsyncCtx2 + 4 | 0; //@line 207
  HEAP32[$83 >> 2] = $12; //@line 208
  $84 = $ReallocAsyncCtx2 + 8 | 0; //@line 209
  HEAP32[$84 >> 2] = $2; //@line 210
  $85 = $ReallocAsyncCtx2 + 12 | 0; //@line 211
  HEAP32[$85 >> 2] = $4; //@line 212
  $86 = $ReallocAsyncCtx2 + 16 | 0; //@line 213
  HEAP32[$86 >> 2] = $6; //@line 214
  $87 = $ReallocAsyncCtx2 + 20 | 0; //@line 215
  HEAP32[$87 >> 2] = $8; //@line 216
  $88 = $ReallocAsyncCtx2 + 24 | 0; //@line 217
  HEAP32[$88 >> 2] = $77; //@line 218
  $89 = $ReallocAsyncCtx2 + 28 | 0; //@line 219
  HEAP32[$89 >> 2] = $10; //@line 220
  sp = STACKTOP; //@line 221
  return;
 }
 ___async_unwind = 0; //@line 224
 HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 225
 $83 = $ReallocAsyncCtx2 + 4 | 0; //@line 226
 HEAP32[$83 >> 2] = $12; //@line 227
 $84 = $ReallocAsyncCtx2 + 8 | 0; //@line 228
 HEAP32[$84 >> 2] = $2; //@line 229
 $85 = $ReallocAsyncCtx2 + 12 | 0; //@line 230
 HEAP32[$85 >> 2] = $4; //@line 231
 $86 = $ReallocAsyncCtx2 + 16 | 0; //@line 232
 HEAP32[$86 >> 2] = $6; //@line 233
 $87 = $ReallocAsyncCtx2 + 20 | 0; //@line 234
 HEAP32[$87 >> 2] = $8; //@line 235
 $88 = $ReallocAsyncCtx2 + 24 | 0; //@line 236
 HEAP32[$88 >> 2] = $77; //@line 237
 $89 = $ReallocAsyncCtx2 + 28 | 0; //@line 238
 HEAP32[$89 >> 2] = $10; //@line 239
 sp = STACKTOP; //@line 240
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $82 = 0, $AsyncCtx = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 521
 STACKTOP = STACKTOP + 64 | 0; //@line 522
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 522
 $vararg_buffer14 = sp + 56 | 0; //@line 523
 $vararg_buffer12 = sp + 48 | 0; //@line 524
 $vararg_buffer10 = sp + 40 | 0; //@line 525
 $vararg_buffer8 = sp + 32 | 0; //@line 526
 $vararg_buffer5 = sp + 24 | 0; //@line 527
 $vararg_buffer3 = sp + 16 | 0; //@line 528
 $vararg_buffer1 = sp + 8 | 0; //@line 529
 $14 = $8 & 1; //@line 531
 $15 = $9 & 1; //@line 532
 $16 = $10 & 1; //@line 533
 $17 = $12 & 1; //@line 534
 $19 = $0 + 689 | 0; //@line 536
 HEAP8[$19 >> 0] = $1; //@line 537
 _printf(10904, sp) | 0; //@line 538
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$19 >> 0]; //@line 541
 _printf(11079, $vararg_buffer1) | 0; //@line 542
 $AsyncCtx26 = _emscripten_alloc_async_context(92, sp) | 0; //@line 543
 _putchar(10) | 0; //@line 544
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 63; //@line 547
  HEAP32[$AsyncCtx26 + 4 >> 2] = $vararg_buffer3; //@line 549
  HEAP32[$AsyncCtx26 + 8 >> 2] = $vararg_buffer3; //@line 551
  HEAP8[$AsyncCtx26 + 12 >> 0] = $2; //@line 553
  HEAP32[$AsyncCtx26 + 16 >> 2] = $vararg_buffer5; //@line 555
  HEAP32[$AsyncCtx26 + 20 >> 2] = $vararg_buffer5; //@line 557
  HEAP32[$AsyncCtx26 + 24 >> 2] = $1; //@line 559
  HEAP32[$AsyncCtx26 + 28 >> 2] = $0; //@line 561
  HEAP32[$AsyncCtx26 + 32 >> 2] = $3; //@line 563
  HEAP32[$AsyncCtx26 + 36 >> 2] = $4; //@line 565
  HEAP32[$AsyncCtx26 + 40 >> 2] = $5; //@line 567
  HEAP16[$AsyncCtx26 + 44 >> 1] = $7; //@line 569
  HEAP8[$AsyncCtx26 + 46 >> 0] = $14; //@line 571
  HEAP8[$AsyncCtx26 + 47 >> 0] = $15; //@line 573
  HEAP8[$AsyncCtx26 + 48 >> 0] = $17; //@line 575
  HEAP32[$AsyncCtx26 + 52 >> 2] = $13; //@line 577
  HEAP32[$AsyncCtx26 + 56 >> 2] = $vararg_buffer8; //@line 579
  HEAP32[$AsyncCtx26 + 60 >> 2] = $vararg_buffer8; //@line 581
  HEAP32[$AsyncCtx26 + 64 >> 2] = $vararg_buffer10; //@line 583
  HEAP32[$AsyncCtx26 + 68 >> 2] = $vararg_buffer10; //@line 585
  HEAP8[$AsyncCtx26 + 72 >> 0] = $6; //@line 587
  HEAP8[$AsyncCtx26 + 73 >> 0] = $16; //@line 589
  HEAP8[$AsyncCtx26 + 74 >> 0] = $11; //@line 591
  HEAP32[$AsyncCtx26 + 76 >> 2] = $vararg_buffer12; //@line 593
  HEAP32[$AsyncCtx26 + 80 >> 2] = $vararg_buffer12; //@line 595
  HEAP32[$AsyncCtx26 + 84 >> 2] = $vararg_buffer14; //@line 597
  HEAP32[$AsyncCtx26 + 88 >> 2] = $vararg_buffer14; //@line 599
  sp = STACKTOP; //@line 600
  STACKTOP = sp; //@line 601
  return;
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 603
 _printf(10904, $vararg_buffer3) | 0; //@line 604
 HEAP32[$vararg_buffer5 >> 2] = $2 << 24 >> 24; //@line 606
 _printf(11473, $vararg_buffer5) | 0; //@line 607
 $AsyncCtx22 = _emscripten_alloc_async_context(76, sp) | 0; //@line 608
 _putchar(10) | 0; //@line 609
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 64; //@line 612
  HEAP32[$AsyncCtx22 + 4 >> 2] = $1; //@line 614
  HEAP32[$AsyncCtx22 + 8 >> 2] = $0; //@line 616
  HEAP8[$AsyncCtx22 + 12 >> 0] = $2; //@line 618
  HEAP32[$AsyncCtx22 + 16 >> 2] = $3; //@line 620
  HEAP32[$AsyncCtx22 + 20 >> 2] = $4; //@line 622
  HEAP32[$AsyncCtx22 + 24 >> 2] = $5; //@line 624
  HEAP16[$AsyncCtx22 + 28 >> 1] = $7; //@line 626
  HEAP8[$AsyncCtx22 + 30 >> 0] = $14; //@line 628
  HEAP8[$AsyncCtx22 + 31 >> 0] = $15; //@line 630
  HEAP8[$AsyncCtx22 + 32 >> 0] = $17; //@line 632
  HEAP32[$AsyncCtx22 + 36 >> 2] = $13; //@line 634
  HEAP32[$AsyncCtx22 + 40 >> 2] = $vararg_buffer8; //@line 636
  HEAP32[$AsyncCtx22 + 44 >> 2] = $vararg_buffer8; //@line 638
  HEAP32[$AsyncCtx22 + 48 >> 2] = $vararg_buffer10; //@line 640
  HEAP32[$AsyncCtx22 + 52 >> 2] = $vararg_buffer10; //@line 642
  HEAP8[$AsyncCtx22 + 56 >> 0] = $6; //@line 644
  HEAP8[$AsyncCtx22 + 57 >> 0] = $16; //@line 646
  HEAP8[$AsyncCtx22 + 58 >> 0] = $11; //@line 648
  HEAP32[$AsyncCtx22 + 60 >> 2] = $vararg_buffer12; //@line 650
  HEAP32[$AsyncCtx22 + 64 >> 2] = $vararg_buffer12; //@line 652
  HEAP32[$AsyncCtx22 + 68 >> 2] = $vararg_buffer14; //@line 654
  HEAP32[$AsyncCtx22 + 72 >> 2] = $vararg_buffer14; //@line 656
  sp = STACKTOP; //@line 657
  STACKTOP = sp; //@line 658
  return;
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 660
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 664
   HEAP32[$0 + 700 >> 2] = $3; //@line 666
   HEAP32[$0 + 704 >> 2] = $4; //@line 668
   HEAP32[$0 + 712 >> 2] = $5; //@line 670
   HEAP16[$0 + 716 >> 1] = $7; //@line 672
   HEAP8[$0 + 718 >> 0] = $14; //@line 674
   HEAP8[$0 + 720 >> 0] = $15; //@line 676
   HEAP8[$0 + 721 >> 0] = $17; //@line 678
   HEAP32[$0 + 724 >> 2] = $13; //@line 680
   _printf(10904, $vararg_buffer8) | 0; //@line 681
   _printf(11500, $vararg_buffer10) | 0; //@line 682
   $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 683
   _putchar(10) | 0; //@line 684
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 65; //@line 687
    sp = STACKTOP; //@line 688
    STACKTOP = sp; //@line 689
    return;
   }
   _emscripten_free_async_context($AsyncCtx18 | 0); //@line 691
   STACKTOP = sp; //@line 692
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 697
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $82 = $4 + 7 | 0; //@line 703
   HEAP32[$0 + 752 >> 2] = $82; //@line 705
   HEAP32[$0 + 756 >> 2] = $5; //@line 707
   HEAP8[$0 + 761 >> 0] = $6; //@line 709
   HEAP16[$0 + 762 >> 1] = $7; //@line 711
   HEAP8[$0 + 764 >> 0] = $14; //@line 713
   HEAP8[$0 + 767 >> 0] = $16; //@line 715
   HEAP8[$0 + 768 >> 0] = $11; //@line 717
   HEAP8[$0 + 766 >> 0] = $15; //@line 719
   HEAP8[$0 + 769 >> 0] = $17; //@line 721
   HEAP32[$0 + 772 >> 2] = $13; //@line 723
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 725
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 13; //@line 733
   } else {
    if (($82 | 0) == 8 & $$ >>> 0 > 11) {
     label = 13; //@line 739
    } else {
     $$sink = 0; //@line 741
    }
   }
   if ((label | 0) == 13) {
    $$sink = 1; //@line 745
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 748
   _printf(10904, $vararg_buffer12) | 0; //@line 749
   _printf(11518, $vararg_buffer14) | 0; //@line 750
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 751
   _putchar(10) | 0; //@line 752
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 66; //@line 755
    sp = STACKTOP; //@line 756
    STACKTOP = sp; //@line 757
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 759
   STACKTOP = sp; //@line 760
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 764
   return;
  }
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0105 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi107Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $80 = 0, $85 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2121
 if (!$0) {
  $$1 = -24832; //@line 2124
  return $$1 | 0; //@line 2125
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2127
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2132
  return $$1 | 0; //@line 2133
 }
 HEAP32[$4 >> 2] = 0; //@line 2135
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2137
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2139
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2144
    return $$1 | 0; //@line 2145
   }
   HEAP32[$4 >> 2] = $2; //@line 2147
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2151
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2153
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2155
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2156
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2157
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 676; //@line 2160
    sp = STACKTOP; //@line 2161
    return 0; //@line 2162
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2164
   $$1 = $22; //@line 2165
   return $$1 | 0; //@line 2166
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2170
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2172
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2173
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2174
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 677; //@line 2177
    sp = STACKTOP; //@line 2178
    return 0; //@line 2179
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2181
   $$1 = $25; //@line 2182
   return $$1 | 0; //@line 2183
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2189
    return $$1 | 0; //@line 2190
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2198
     return $$1 | 0; //@line 2199
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2204
     return $$1 | 0; //@line 2205
    }
   }
   if (($12 | 0) != 2) {
    $$1 = -24704; //@line 2210
    return $$1 | 0; //@line 2211
   }
   $34 = $0 + 8 | 0; //@line 2213
   switch (HEAP32[$34 >> 2] | 0) {
   case 0:
    {
     $36 = $0 + 36 | 0; //@line 2217
     $37 = HEAP32[$36 >> 2] | 0; //@line 2218
     if (($10 - $37 | 0) >>> 0 < $2 >>> 0) {
      label = 18; //@line 2222
     } else {
      $$pre$phiZ2D = $36; //@line 2224
      $45 = $37; //@line 2224
      label = 20; //@line 2225
     }
     break;
    }
   case 1:
    {
     $40 = $0 + 36 | 0; //@line 2230
     $41 = HEAP32[$40 >> 2] | 0; //@line 2231
     if (($10 - $41 | 0) >>> 0 > $2 >>> 0) {
      $$pre$phiZ2D = $40; //@line 2235
      $45 = $41; //@line 2235
      label = 20; //@line 2236
     } else {
      $$pre$phi107Z2D = $40; //@line 2238
      $49 = $41; //@line 2238
     }
     break;
    }
   default:
    {
     label = 18; //@line 2243
    }
   }
   if ((label | 0) == 18) {
    $$phi$trans$insert = $0 + 36 | 0; //@line 2247
    $$pre$phi107Z2D = $$phi$trans$insert; //@line 2249
    $49 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2249
   } else if ((label | 0) == 20) {
    _memcpy($0 + 20 + $45 | 0, $1 | 0, $2 | 0) | 0; //@line 2253
    HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2256
    $$1 = 0; //@line 2257
    return $$1 | 0; //@line 2258
   }
   do {
    if (!$49) {
     $$0102 = $3; //@line 2263
     $$0103 = $2; //@line 2263
     $$0105 = $1; //@line 2263
    } else {
     $50 = $10 - $49 | 0; //@line 2265
     _memcpy($0 + 20 + $49 | 0, $1 | 0, $50 | 0) | 0; //@line 2267
     $56 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2272
     $58 = HEAP32[$0 + 60 >> 2] | 0; //@line 2274
     $59 = HEAP32[$34 >> 2] | 0; //@line 2275
     $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2278
     $62 = FUNCTION_TABLE_iiiiiii[$56 & 3]($58, $59, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2279
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 678; //@line 2282
      HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2284
      HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2286
      HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2288
      HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi107Z2D; //@line 2290
      HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2292
      HEAP32[$AsyncCtx3 + 24 >> 2] = $50; //@line 2294
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2296
      HEAP32[$AsyncCtx3 + 32 >> 2] = $34; //@line 2298
      HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2300
      HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2302
      sp = STACKTOP; //@line 2303
      return 0; //@line 2304
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2306
     if (!$62) {
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2311
      HEAP32[$$pre$phi107Z2D >> 2] = 0; //@line 2313
      $$0102 = $3 + $10 | 0; //@line 2316
      $$0103 = $2 - $50 | 0; //@line 2316
      $$0105 = $1 + $50 | 0; //@line 2316
      break;
     } else {
      $$1 = $62; //@line 2319
      return $$1 | 0; //@line 2320
     }
    }
   } while (0);
   if (!$$0103) {
    $$1 = 0; //@line 2326
    return $$1 | 0; //@line 2327
   }
   $80 = ($$0103 >>> 0) % ($10 >>> 0) | 0; //@line 2329
   if (!$80) {
    $$0 = (HEAP32[$34 >> 2] | 0) == 0 ? $10 : 0; //@line 2335
   } else {
    $$0 = $80; //@line 2337
   }
   $85 = $$0103 - $$0 | 0; //@line 2340
   _memcpy($0 + 20 | 0, $$0105 + $85 | 0, $$0 | 0) | 0; //@line 2342
   HEAP32[$$pre$phi107Z2D >> 2] = (HEAP32[$$pre$phi107Z2D >> 2] | 0) + $$0; //@line 2345
   if (!$85) {
    $$1 = 0; //@line 2348
    return $$1 | 0; //@line 2349
   }
   $94 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2355
   $96 = HEAP32[$0 + 60 >> 2] | 0; //@line 2357
   $97 = HEAP32[$34 >> 2] | 0; //@line 2358
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2360
   $99 = FUNCTION_TABLE_iiiiiii[$94 & 3]($96, $97, $85, $0 + 40 | 0, $$0105, $$0102) | 0; //@line 2361
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 679; //@line 2364
    HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 2366
    HEAP32[$AsyncCtx7 + 8 >> 2] = $85; //@line 2368
    sp = STACKTOP; //@line 2369
    return 0; //@line 2370
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2372
   if ($99 | 0) {
    $$1 = $99; //@line 2375
    return $$1 | 0; //@line 2376
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $85; //@line 2380
   $$1 = 0; //@line 2381
   return $$1 | 0; //@line 2382
  }
 }
 return 0; //@line 2385
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_172($0) {
 $0 = $0 | 0;
 var $$pre$i$i34 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 34108
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34110
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34112
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34114
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34116
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34122
 $$pre$i$i34 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 34123
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i34; //@line 34125
 if ($$pre$i$i34 | 0) {
  $18 = HEAP32[$$pre$i$i34 + 8 >> 2] | 0; //@line 34129
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 34130
  FUNCTION_TABLE_vi[$18 & 1023]($2); //@line 34131
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 34134
   $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 34135
   HEAP32[$19 >> 2] = $4; //@line 34136
   $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 34137
   HEAP32[$20 >> 2] = $6; //@line 34138
   $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 34139
   HEAP32[$21 >> 2] = $8; //@line 34140
   $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 34141
   HEAP32[$22 >> 2] = $2; //@line 34142
   $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 34143
   HEAP32[$23 >> 2] = $14; //@line 34144
   sp = STACKTOP; //@line 34145
   return;
  }
  ___async_unwind = 0; //@line 34148
  HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 34149
  $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 34150
  HEAP32[$19 >> 2] = $4; //@line 34151
  $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 34152
  HEAP32[$20 >> 2] = $6; //@line 34153
  $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 34154
  HEAP32[$21 >> 2] = $8; //@line 34155
  $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 34156
  HEAP32[$22 >> 2] = $2; //@line 34157
  $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 34158
  HEAP32[$23 >> 2] = $14; //@line 34159
  sp = STACKTOP; //@line 34160
  return;
 }
 $24 = $14 + 12 | 0; //@line 34163
 HEAP32[$14 >> 2] = 577; //@line 34164
 HEAP32[$14 + 4 >> 2] = 0; //@line 34166
 HEAP32[$14 + 8 >> 2] = $8; //@line 34168
 HEAP32[$24 >> 2] = 848; //@line 34169
 $25 = $8 + 1228 | 0; //@line 34170
 if (($25 | 0) == ($14 | 0)) {
  $48 = HEAP32[214] | 0; //@line 34174
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 34175
  FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 34176
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 34179
   $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 34180
   HEAP32[$49 >> 2] = $14; //@line 34181
   $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 34182
   HEAP32[$50 >> 2] = $6; //@line 34183
   $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 34184
   HEAP32[$51 >> 2] = $8; //@line 34185
   $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 34186
   HEAP32[$52 >> 2] = $4; //@line 34187
   sp = STACKTOP; //@line 34188
   return;
  }
  ___async_unwind = 0; //@line 34191
  HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 34192
  $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 34193
  HEAP32[$49 >> 2] = $14; //@line 34194
  $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 34195
  HEAP32[$50 >> 2] = $6; //@line 34196
  $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 34197
  HEAP32[$51 >> 2] = $8; //@line 34198
  $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 34199
  HEAP32[$52 >> 2] = $4; //@line 34200
  sp = STACKTOP; //@line 34201
  return;
 }
 $27 = $8 + 1240 | 0; //@line 34204
 $28 = HEAP32[$27 >> 2] | 0; //@line 34205
 if (!$28) {
  $40 = HEAP32[213] | 0; //@line 34209
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 34210
  FUNCTION_TABLE_vii[$40 & 31]($25, $14); //@line 34211
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 34214
   $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 34215
   HEAP32[$41 >> 2] = $4; //@line 34216
   $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 34217
   HEAP32[$42 >> 2] = $24; //@line 34218
   $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 34219
   HEAP32[$43 >> 2] = $27; //@line 34220
   $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 34221
   HEAP32[$44 >> 2] = $14; //@line 34222
   $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 34223
   HEAP32[$45 >> 2] = $6; //@line 34224
   $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 34225
   HEAP32[$46 >> 2] = $8; //@line 34226
   sp = STACKTOP; //@line 34227
   return;
  }
  ___async_unwind = 0; //@line 34230
  HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 34231
  $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 34232
  HEAP32[$41 >> 2] = $4; //@line 34233
  $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 34234
  HEAP32[$42 >> 2] = $24; //@line 34235
  $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 34236
  HEAP32[$43 >> 2] = $27; //@line 34237
  $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 34238
  HEAP32[$44 >> 2] = $14; //@line 34239
  $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 34240
  HEAP32[$45 >> 2] = $6; //@line 34241
  $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 34242
  HEAP32[$46 >> 2] = $8; //@line 34243
  sp = STACKTOP; //@line 34244
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 34248
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 34249
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 34250
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 34253
   $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 34254
   HEAP32[$32 >> 2] = $4; //@line 34255
   $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 34256
   HEAP32[$33 >> 2] = $24; //@line 34257
   $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 34258
   HEAP32[$34 >> 2] = $27; //@line 34259
   $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 34260
   HEAP32[$35 >> 2] = $14; //@line 34261
   $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 34262
   HEAP32[$36 >> 2] = $6; //@line 34263
   $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 34264
   HEAP32[$37 >> 2] = $8; //@line 34265
   $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 34266
   HEAP32[$38 >> 2] = $25; //@line 34267
   sp = STACKTOP; //@line 34268
   return;
  }
  ___async_unwind = 0; //@line 34271
  HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 34272
  $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 34273
  HEAP32[$32 >> 2] = $4; //@line 34274
  $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 34275
  HEAP32[$33 >> 2] = $24; //@line 34276
  $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 34277
  HEAP32[$34 >> 2] = $27; //@line 34278
  $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 34279
  HEAP32[$35 >> 2] = $14; //@line 34280
  $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 34281
  HEAP32[$36 >> 2] = $6; //@line 34282
  $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 34283
  HEAP32[$37 >> 2] = $8; //@line 34284
  $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 34285
  HEAP32[$38 >> 2] = $25; //@line 34286
  sp = STACKTOP; //@line 34287
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2645
 STACKTOP = STACKTOP + 16 | 0; //@line 2646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2646
 $3 = sp; //@line 2647
 if (!$0) {
  $$0 = -24832; //@line 2650
  STACKTOP = sp; //@line 2651
  return $$0 | 0; //@line 2651
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2653
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 2658
  STACKTOP = sp; //@line 2659
  return $$0 | 0; //@line 2659
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 2662
 if (!$9) {
  $$0 = -24832; //@line 2665
  STACKTOP = sp; //@line 2666
  return $$0 | 0; //@line 2666
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 2669
 $13 = $9 + 32 | 0; //@line 2670
 $14 = HEAP32[$13 >> 2] | 0; //@line 2671
 do {
  if (!$14) {
   $$070 = $1; //@line 2675
   $$073 = $2; //@line 2675
  } else {
   $16 = $12 - $14 | 0; //@line 2677
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 2681
    if ($12 | 0) {
     $$09$i = 0; //@line 2684
     do {
      $22 = $9 + $$09$i | 0; //@line 2688
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 2691
      $$09$i = $$09$i + 1 | 0; //@line 2692
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2701
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 2702
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 685; //@line 2705
     HEAP32[$AsyncCtx5 + 4 >> 2] = $12; //@line 2707
     HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 2709
     HEAP32[$AsyncCtx5 + 12 >> 2] = $13; //@line 2711
     HEAP32[$AsyncCtx5 + 16 >> 2] = $9; //@line 2713
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 2715
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 2717
     HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 2719
     HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 2721
     HEAP32[$AsyncCtx5 + 36 >> 2] = $1; //@line 2723
     sp = STACKTOP; //@line 2724
     STACKTOP = sp; //@line 2725
     return 0; //@line 2725
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 2727
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 2731
     HEAP32[$13 >> 2] = 0; //@line 2734
     $$070 = $1 + $38 | 0; //@line 2735
     $$073 = $2 - $38 | 0; //@line 2735
     break;
    } else {
     $$0 = $26; //@line 2738
     STACKTOP = sp; //@line 2739
     return $$0 | 0; //@line 2739
    }
   } else {
    $$070 = $1; //@line 2742
    $$073 = $2; //@line 2742
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 2748
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 2754
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2756
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 2757
     if (___async) {
      label = 15; //@line 2760
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2763
     if ($46 | 0) {
      $$0 = $46; //@line 2766
      label = 26; //@line 2767
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 2770
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 2773
     } else {
      $$1$lcssa = $$070; //@line 2775
      $$174$lcssa = $$073; //@line 2775
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 686; //@line 2780
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 2782
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 2784
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 2786
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 2788
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 2790
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 2792
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 2794
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 2796
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 2798
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 2800
     sp = STACKTOP; //@line 2801
     STACKTOP = sp; //@line 2802
     return 0; //@line 2802
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 2805
     return $$0 | 0; //@line 2805
    }
   } else {
    $$06984 = 1; //@line 2808
    $$17481 = $$073; //@line 2808
    $$182 = $$070; //@line 2808
   }
   while (1) {
    $$09$i75 = 0; //@line 2811
    do {
     $62 = $9 + $$09$i75 | 0; //@line 2815
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 2818
     $$09$i75 = $$09$i75 + 1 | 0; //@line 2819
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 2827
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 2828
    if (___async) {
     label = 21; //@line 2831
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2834
    if ($66 | 0) {
     $$0 = $66; //@line 2837
     label = 26; //@line 2838
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 2841
    $80 = $$182 + $12 | 0; //@line 2842
    $81 = $$06984 + 1 | 0; //@line 2843
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 2846
     $$17481 = $79; //@line 2846
     $$182 = $80; //@line 2846
    } else {
     $$1$lcssa = $80; //@line 2848
     $$174$lcssa = $79; //@line 2848
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 687; //@line 2853
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 2855
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 2857
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 2859
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 2861
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 2863
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 2865
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 2867
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 2869
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 2871
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 2873
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 2875
    sp = STACKTOP; //@line 2876
    STACKTOP = sp; //@line 2877
    return 0; //@line 2877
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 2880
    return $$0 | 0; //@line 2880
   }
  } else {
   $$1$lcssa = $$070; //@line 2883
   $$174$lcssa = $$073; //@line 2883
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 2888
  STACKTOP = sp; //@line 2889
  return $$0 | 0; //@line 2889
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 2893
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 2896
 $$0 = 0; //@line 2897
 STACKTOP = sp; //@line 2898
 return $$0 | 0; //@line 2898
}
function __ZN7LoRaMac11schedule_txEv__async_cb_429($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21687
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21691
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21695
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21699
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21703
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21705
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21707
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21709
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21711
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21713
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21715
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21717
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21719
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21721
 if (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) {
  $45 = HEAP8[$4 + 893 >> 0] | 0; //@line 21726
  $46 = HEAP8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 21727
  $48 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($4 + 4 | 0) | 0; //@line 21729
  _printf(12967, $8) | 0; //@line 21730
  _printf(13293, $12) | 0; //@line 21731
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 21732
  _putchar(10) | 0; //@line 21733
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 492; //@line 21736
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 21737
   HEAP32[$49 >> 2] = $16; //@line 21738
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 21739
   HEAP32[$50 >> 2] = $4; //@line 21740
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 21741
   HEAP8[$51 >> 0] = $46; //@line 21742
   $52 = $ReallocAsyncCtx7 + 13 | 0; //@line 21743
   HEAP8[$52 >> 0] = $45; //@line 21744
   $53 = $ReallocAsyncCtx7 + 14 | 0; //@line 21745
   HEAP8[$53 >> 0] = $48; //@line 21746
   $54 = $ReallocAsyncCtx7 + 16 | 0; //@line 21747
   HEAP32[$54 >> 2] = $18; //@line 21748
   $55 = $ReallocAsyncCtx7 + 20 | 0; //@line 21749
   HEAP32[$55 >> 2] = $20; //@line 21750
   $56 = $ReallocAsyncCtx7 + 24 | 0; //@line 21751
   HEAP32[$56 >> 2] = $22; //@line 21752
   $57 = $ReallocAsyncCtx7 + 28 | 0; //@line 21753
   HEAP32[$57 >> 2] = $24; //@line 21754
   $58 = $ReallocAsyncCtx7 + 32 | 0; //@line 21755
   HEAP32[$58 >> 2] = $26; //@line 21756
   $59 = $ReallocAsyncCtx7 + 36 | 0; //@line 21757
   HEAP32[$59 >> 2] = $28; //@line 21758
   $60 = $ReallocAsyncCtx7 + 40 | 0; //@line 21759
   HEAP32[$60 >> 2] = $30; //@line 21760
   $61 = $ReallocAsyncCtx7 + 44 | 0; //@line 21761
   HEAP32[$61 >> 2] = $32; //@line 21762
   $62 = $ReallocAsyncCtx7 + 48 | 0; //@line 21763
   HEAP32[$62 >> 2] = $34; //@line 21764
   sp = STACKTOP; //@line 21765
   return;
  }
  ___async_unwind = 0; //@line 21768
  HEAP32[$ReallocAsyncCtx7 >> 2] = 492; //@line 21769
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 21770
  HEAP32[$49 >> 2] = $16; //@line 21771
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 21772
  HEAP32[$50 >> 2] = $4; //@line 21773
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 21774
  HEAP8[$51 >> 0] = $46; //@line 21775
  $52 = $ReallocAsyncCtx7 + 13 | 0; //@line 21776
  HEAP8[$52 >> 0] = $45; //@line 21777
  $53 = $ReallocAsyncCtx7 + 14 | 0; //@line 21778
  HEAP8[$53 >> 0] = $48; //@line 21779
  $54 = $ReallocAsyncCtx7 + 16 | 0; //@line 21780
  HEAP32[$54 >> 2] = $18; //@line 21781
  $55 = $ReallocAsyncCtx7 + 20 | 0; //@line 21782
  HEAP32[$55 >> 2] = $20; //@line 21783
  $56 = $ReallocAsyncCtx7 + 24 | 0; //@line 21784
  HEAP32[$56 >> 2] = $22; //@line 21785
  $57 = $ReallocAsyncCtx7 + 28 | 0; //@line 21786
  HEAP32[$57 >> 2] = $24; //@line 21787
  $58 = $ReallocAsyncCtx7 + 32 | 0; //@line 21788
  HEAP32[$58 >> 2] = $26; //@line 21789
  $59 = $ReallocAsyncCtx7 + 36 | 0; //@line 21790
  HEAP32[$59 >> 2] = $28; //@line 21791
  $60 = $ReallocAsyncCtx7 + 40 | 0; //@line 21792
  HEAP32[$60 >> 2] = $30; //@line 21793
  $61 = $ReallocAsyncCtx7 + 44 | 0; //@line 21794
  HEAP32[$61 >> 2] = $32; //@line 21795
  $62 = $ReallocAsyncCtx7 + 48 | 0; //@line 21796
  HEAP32[$62 >> 2] = $34; //@line 21797
  sp = STACKTOP; //@line 21798
  return;
 }
 HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1120 >> 2] | 0); //@line 21807
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$4 + 1124 >> 2] | 0); //@line 21814
 if (!(HEAP32[$22 >> 2] | 0)) {
  $70 = HEAP8[$24 >> 0] | 0; //@line 21818
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 21819
  __ZN7LoRaMac21send_frame_on_channelEh($4, $70) | 0; //@line 21820
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 493; //@line 21823
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 21824
   HEAP32[$71 >> 2] = $18; //@line 21825
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 21826
   HEAP32[$72 >> 2] = $20; //@line 21827
   sp = STACKTOP; //@line 21828
   return;
  }
  ___async_unwind = 0; //@line 21831
  HEAP32[$ReallocAsyncCtx10 >> 2] = 493; //@line 21832
  $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 21833
  HEAP32[$71 >> 2] = $18; //@line 21834
  $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 21835
  HEAP32[$72 >> 2] = $20; //@line 21836
  sp = STACKTOP; //@line 21837
  return;
 } else {
  $73 = $4 + 968 | 0; //@line 21840
  HEAP32[$73 >> 2] = HEAP32[$73 >> 2] | 16; //@line 21843
  _printf(13253, $26) | 0; //@line 21844
  HEAP32[$30 >> 2] = HEAP32[$22 >> 2]; //@line 21846
  _printf(13317, $30) | 0; //@line 21847
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 21848
  _putchar(10) | 0; //@line 21849
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 21852
   $77 = $ReallocAsyncCtx6 + 4 | 0; //@line 21853
   HEAP32[$77 >> 2] = $34; //@line 21854
   $78 = $ReallocAsyncCtx6 + 8 | 0; //@line 21855
   HEAP32[$78 >> 2] = $4; //@line 21856
   $79 = $ReallocAsyncCtx6 + 12 | 0; //@line 21857
   HEAP32[$79 >> 2] = $22; //@line 21858
   $80 = $ReallocAsyncCtx6 + 16 | 0; //@line 21859
   HEAP32[$80 >> 2] = $18; //@line 21860
   $81 = $ReallocAsyncCtx6 + 20 | 0; //@line 21861
   HEAP32[$81 >> 2] = $20; //@line 21862
   sp = STACKTOP; //@line 21863
   return;
  }
  ___async_unwind = 0; //@line 21866
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 21867
  $77 = $ReallocAsyncCtx6 + 4 | 0; //@line 21868
  HEAP32[$77 >> 2] = $34; //@line 21869
  $78 = $ReallocAsyncCtx6 + 8 | 0; //@line 21870
  HEAP32[$78 >> 2] = $4; //@line 21871
  $79 = $ReallocAsyncCtx6 + 12 | 0; //@line 21872
  HEAP32[$79 >> 2] = $22; //@line 21873
  $80 = $ReallocAsyncCtx6 + 16 | 0; //@line 21874
  HEAP32[$80 >> 2] = $18; //@line 21875
  $81 = $ReallocAsyncCtx6 + 20 | 0; //@line 21876
  HEAP32[$81 >> 2] = $20; //@line 21877
  sp = STACKTOP; //@line 21878
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_470($0) {
 $0 = $0 | 0;
 var $12 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26277
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26281
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26283
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26285
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26289
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 26294
 $18 = HEAP8[$2 >> 0] | 16; //@line 26296
 HEAP8[$2 >> 0] = $18; //@line 26297
 $19 = $18 & -33; //@line 26298
 HEAP8[$2 >> 0] = $19; //@line 26299
 do {
  if (!($19 & 2)) {
   $50 = $19; //@line 26304
  } else {
   $22 = $19 & -3; //@line 26306
   HEAP8[$2 >> 0] = $22; //@line 26307
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $8) | 0; //@line 26312
    _printf(12994, $12) | 0; //@line 26313
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26314
    _putchar(10) | 0; //@line 26315
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 26318
     $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 26319
     HEAP32[$26 >> 2] = $2; //@line 26320
     $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 26321
     HEAP32[$27 >> 2] = $4; //@line 26322
     $28 = $ReallocAsyncCtx6 + 12 | 0; //@line 26323
     HEAP32[$28 >> 2] = $6; //@line 26324
     $29 = $ReallocAsyncCtx6 + 16 | 0; //@line 26325
     HEAP32[$29 >> 2] = $6; //@line 26326
     sp = STACKTOP; //@line 26327
     return;
    }
    ___async_unwind = 0; //@line 26330
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 26331
    $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 26332
    HEAP32[$26 >> 2] = $2; //@line 26333
    $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 26334
    HEAP32[$27 >> 2] = $4; //@line 26335
    $28 = $ReallocAsyncCtx6 + 12 | 0; //@line 26336
    HEAP32[$28 >> 2] = $6; //@line 26337
    $29 = $ReallocAsyncCtx6 + 16 | 0; //@line 26338
    HEAP32[$29 >> 2] = $6; //@line 26339
    sp = STACKTOP; //@line 26340
    return;
   }
   if ($22 & 4) {
    $48 = $22 & -5; //@line 26346
    HEAP8[$2 >> 0] = $48; //@line 26347
    $50 = $48; //@line 26348
    break;
   }
   $33 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26352
   $34 = $33 + 16 | 0; //@line 26353
   $36 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 26355
   $37 = $33 + 28 | 0; //@line 26356
   $38 = HEAP32[$37 >> 2] | 0; //@line 26357
   if (!$38) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 26360
    _mbed_assert_internal(15061, 15066, 1102); //@line 26361
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 26364
     $40 = $ReallocAsyncCtx15 + 4 | 0; //@line 26365
     HEAP32[$40 >> 2] = $37; //@line 26366
     $41 = $ReallocAsyncCtx15 + 8 | 0; //@line 26367
     HEAP32[$41 >> 2] = $34; //@line 26368
     $42 = $ReallocAsyncCtx15 + 12 | 0; //@line 26369
     HEAP32[$42 >> 2] = $36; //@line 26370
     $43 = $ReallocAsyncCtx15 + 16 | 0; //@line 26371
     HEAP32[$43 >> 2] = $2; //@line 26372
     $44 = $ReallocAsyncCtx15 + 20 | 0; //@line 26373
     HEAP32[$44 >> 2] = $4; //@line 26374
     sp = STACKTOP; //@line 26375
     return;
    }
    ___async_unwind = 0; //@line 26378
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 26379
    $40 = $ReallocAsyncCtx15 + 4 | 0; //@line 26380
    HEAP32[$40 >> 2] = $37; //@line 26381
    $41 = $ReallocAsyncCtx15 + 8 | 0; //@line 26382
    HEAP32[$41 >> 2] = $34; //@line 26383
    $42 = $ReallocAsyncCtx15 + 12 | 0; //@line 26384
    HEAP32[$42 >> 2] = $36; //@line 26385
    $43 = $ReallocAsyncCtx15 + 16 | 0; //@line 26386
    HEAP32[$43 >> 2] = $2; //@line 26387
    $44 = $ReallocAsyncCtx15 + 20 | 0; //@line 26388
    HEAP32[$44 >> 2] = $4; //@line 26389
    sp = STACKTOP; //@line 26390
    return;
   } else {
    $45 = HEAP32[$38 >> 2] | 0; //@line 26393
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26394
    FUNCTION_TABLE_vii[$45 & 31]($34, $36); //@line 26395
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 26398
     $46 = $ReallocAsyncCtx4 + 4 | 0; //@line 26399
     HEAP32[$46 >> 2] = $2; //@line 26400
     $47 = $ReallocAsyncCtx4 + 8 | 0; //@line 26401
     HEAP32[$47 >> 2] = $4; //@line 26402
     sp = STACKTOP; //@line 26403
     return;
    }
    ___async_unwind = 0; //@line 26406
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 26407
    $46 = $ReallocAsyncCtx4 + 4 | 0; //@line 26408
    HEAP32[$46 >> 2] = $2; //@line 26409
    $47 = $ReallocAsyncCtx4 + 8 | 0; //@line 26410
    HEAP32[$47 >> 2] = $4; //@line 26411
    sp = STACKTOP; //@line 26412
    return;
   }
  }
 } while (0);
 if (!($50 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $50 & -17; //@line 26423
 $54 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26425
 $55 = $54 + 48 | 0; //@line 26426
 $57 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26428
 $58 = $54 + 60 | 0; //@line 26429
 $59 = HEAP32[$58 >> 2] | 0; //@line 26430
 if (!$59) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 26433
  _mbed_assert_internal(15061, 15066, 1102); //@line 26434
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 26437
   $61 = $ReallocAsyncCtx14 + 4 | 0; //@line 26438
   HEAP32[$61 >> 2] = $58; //@line 26439
   $62 = $ReallocAsyncCtx14 + 8 | 0; //@line 26440
   HEAP32[$62 >> 2] = $55; //@line 26441
   $63 = $ReallocAsyncCtx14 + 12 | 0; //@line 26442
   HEAP32[$63 >> 2] = $57; //@line 26443
   sp = STACKTOP; //@line 26444
   return;
  }
  ___async_unwind = 0; //@line 26447
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 26448
  $61 = $ReallocAsyncCtx14 + 4 | 0; //@line 26449
  HEAP32[$61 >> 2] = $58; //@line 26450
  $62 = $ReallocAsyncCtx14 + 8 | 0; //@line 26451
  HEAP32[$62 >> 2] = $55; //@line 26452
  $63 = $ReallocAsyncCtx14 + 12 | 0; //@line 26453
  HEAP32[$63 >> 2] = $57; //@line 26454
  sp = STACKTOP; //@line 26455
  return;
 } else {
  $64 = HEAP32[$59 >> 2] | 0; //@line 26458
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26459
  FUNCTION_TABLE_vii[$64 & 31]($55, $57); //@line 26460
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 26463
   sp = STACKTOP; //@line 26464
   return;
  }
  ___async_unwind = 0; //@line 26467
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 26468
  sp = STACKTOP; //@line 26469
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $43 = 0, $46 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13531
 STACKTOP = STACKTOP + 48 | 0; //@line 13532
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13532
 $6 = sp + 16 | 0; //@line 13533
 $7 = sp; //@line 13534
 $8 = $1 + 12 | 0; //@line 13535
 $9 = HEAP32[$8 >> 2] | 0; //@line 13536
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 13540
   HEAP32[$11 >> 2] = 0; //@line 13541
   $36 = 0; //@line 13542
   $53 = $11; //@line 13542
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 13545
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 13546
   FUNCTION_TABLE_vii[$13 & 31]($7, $1); //@line 13547
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 410; //@line 13550
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 13552
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 13554
    HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 13556
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 13558
    HEAP16[$AsyncCtx + 20 >> 1] = $3; //@line 13560
    HEAP16[$AsyncCtx + 22 >> 1] = $4; //@line 13562
    HEAP8[$AsyncCtx + 24 >> 0] = $5; //@line 13564
    HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 13566
    sp = STACKTOP; //@line 13567
    STACKTOP = sp; //@line 13568
    return 0; //@line 13568
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13570
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 13571
   $22 = $7 + 12 | 0; //@line 13572
   HEAP32[$22 >> 2] = $$pre$i; //@line 13573
   if (!$$pre$i) {
    $36 = 0; //@line 13576
    $53 = $22; //@line 13576
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 13580
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13581
    FUNCTION_TABLE_vii[$25 & 31]($6, $7); //@line 13582
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 411; //@line 13585
     HEAP32[$AsyncCtx2 + 4 >> 2] = $7; //@line 13587
     HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 13589
     HEAP32[$AsyncCtx2 + 12 >> 2] = $22; //@line 13591
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 13593
     HEAP16[$AsyncCtx2 + 20 >> 1] = $3; //@line 13595
     HEAP16[$AsyncCtx2 + 22 >> 1] = $4; //@line 13597
     HEAP8[$AsyncCtx2 + 24 >> 0] = $5; //@line 13599
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 13601
     HEAP32[$AsyncCtx2 + 32 >> 2] = $22; //@line 13603
     sp = STACKTOP; //@line 13604
     STACKTOP = sp; //@line 13605
     return 0; //@line 13605
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13607
     $36 = HEAP32[$22 >> 2] | 0; //@line 13609
     $53 = $22; //@line 13609
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 13615
 HEAP32[$35 >> 2] = $36; //@line 13616
 $37 = $6 + 16 | 0; //@line 13617
 HEAP32[$37 >> 2] = $2; //@line 13618
 HEAP16[$6 + 20 >> 1] = $3; //@line 13620
 HEAP16[$6 + 22 >> 1] = $4; //@line 13622
 HEAP8[$6 + 24 >> 0] = $5; //@line 13624
 $41 = _equeue_alloc($0, 28) | 0; //@line 13625
 do {
  if (!$41) {
   $$0$i = 0; //@line 13629
  } else {
   $43 = HEAP32[$35 >> 2] | 0; //@line 13631
   do {
    if (!$43) {
     $57 = 0; //@line 13635
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 13638
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13639
     FUNCTION_TABLE_vii[$46 & 31]($41, $6); //@line 13640
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 412; //@line 13643
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 13645
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 13647
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 13649
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 13651
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 13653
      HEAP32[$AsyncCtx5 + 24 >> 2] = $53; //@line 13655
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 13657
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 13659
      sp = STACKTOP; //@line 13660
      STACKTOP = sp; //@line 13661
      return 0; //@line 13661
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13663
      $57 = HEAP32[$35 >> 2] | 0; //@line 13665
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $57; //@line 13671
   $58 = $41 + 16 | 0; //@line 13672
   HEAP32[$58 >> 2] = HEAP32[$37 >> 2]; //@line 13673
   HEAP32[$58 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 13673
   HEAP8[$58 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 13673
   _equeue_event_dtor($41, 413); //@line 13674
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13675
   $59 = _equeue_post($0, 414, $41) | 0; //@line 13676
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 415; //@line 13679
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 13681
    HEAP32[$AsyncCtx15 + 8 >> 2] = $53; //@line 13683
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 13685
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 13687
    sp = STACKTOP; //@line 13688
    STACKTOP = sp; //@line 13689
    return 0; //@line 13689
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13691
    $$0$i = $59; //@line 13692
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$35 >> 2] | 0; //@line 13697
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 13702
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13703
   FUNCTION_TABLE_vi[$67 & 1023]($6); //@line 13704
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 416; //@line 13707
    HEAP32[$AsyncCtx8 + 4 >> 2] = $53; //@line 13709
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 13711
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 13713
    sp = STACKTOP; //@line 13714
    STACKTOP = sp; //@line 13715
    return 0; //@line 13715
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 13717
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$53 >> 2] | 0; //@line 13722
 if (!$71) {
  STACKTOP = sp; //@line 13725
  return $$0$i | 0; //@line 13725
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 13728
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13729
 FUNCTION_TABLE_vi[$74 & 1023]($7); //@line 13730
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 417; //@line 13733
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 13735
  sp = STACKTOP; //@line 13736
  STACKTOP = sp; //@line 13737
  return 0; //@line 13737
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 13739
 STACKTOP = sp; //@line 13740
 return $$0$i | 0; //@line 13740
}
function _mbedtls_cipher_cmac_update__async_cb_485($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32745
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32747
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32749
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32751
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32753
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32755
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32757
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32759
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32761
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32763
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32765
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 32768
  $66 = ___async_retval; //@line 32769
  HEAP32[$66 >> 2] = $$0; //@line 32770
  return;
 }
 $22 = $2 - (HEAP32[$6 >> 2] | 0) | 0; //@line 32774
 $23 = $18 + $22 | 0; //@line 32775
 $24 = $16 - $22 | 0; //@line 32776
 HEAP32[$6 >> 2] = 0; //@line 32777
 $27 = (($2 + -1 + $24 | 0) >>> 0) / ($2 >>> 0) | 0; //@line 32780
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 32785
   $66 = ___async_retval; //@line 32786
   HEAP32[$66 >> 2] = $$0; //@line 32787
   return;
  }
  _memcpy((HEAP32[$6 >> 2] | 0) + ($8 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 32792
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $24; //@line 32795
  $$0 = 0; //@line 32796
  $66 = ___async_retval; //@line 32797
  HEAP32[$66 >> 2] = $$0; //@line 32798
  return;
 }
 if (!$2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 32803
  $30 = _mbedtls_cipher_update($10, $12, 0, $12, $14) | 0; //@line 32804
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 686; //@line 32807
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 32808
   HEAP32[$31 >> 2] = 1; //@line 32809
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 32810
   HEAP32[$32 >> 2] = $27; //@line 32811
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 32812
   HEAP32[$33 >> 2] = $4; //@line 32813
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 32814
   HEAP32[$34 >> 2] = $10; //@line 32815
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 32816
   HEAP32[$35 >> 2] = $12; //@line 32817
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 32818
   HEAP32[$36 >> 2] = $14; //@line 32819
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 32820
   HEAP32[$37 >> 2] = $24; //@line 32821
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 32822
   HEAP32[$38 >> 2] = $23; //@line 32823
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 32824
   HEAP32[$39 >> 2] = $6; //@line 32825
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 32826
   HEAP32[$40 >> 2] = $8; //@line 32827
   sp = STACKTOP; //@line 32828
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 32832
  ___async_unwind = 0; //@line 32833
  HEAP32[$ReallocAsyncCtx2 >> 2] = 686; //@line 32834
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 32835
  HEAP32[$31 >> 2] = 1; //@line 32836
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 32837
  HEAP32[$32 >> 2] = $27; //@line 32838
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 32839
  HEAP32[$33 >> 2] = $4; //@line 32840
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 32841
  HEAP32[$34 >> 2] = $10; //@line 32842
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 32843
  HEAP32[$35 >> 2] = $12; //@line 32844
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 32845
  HEAP32[$36 >> 2] = $14; //@line 32846
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 32847
  HEAP32[$37 >> 2] = $24; //@line 32848
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 32849
  HEAP32[$38 >> 2] = $23; //@line 32850
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 32851
  HEAP32[$39 >> 2] = $6; //@line 32852
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 32853
  HEAP32[$40 >> 2] = $8; //@line 32854
  sp = STACKTOP; //@line 32855
  return;
 }
 $$09$i75 = 0; //@line 32858
 do {
  $44 = $8 + $$09$i75 | 0; //@line 32862
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 32865
  $$09$i75 = $$09$i75 + 1 | 0; //@line 32866
 } while (($$09$i75 | 0) != ($2 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 32874
 $48 = _mbedtls_cipher_update($10, $12, $2, $12, $14) | 0; //@line 32875
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 32878
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 32879
  HEAP32[$49 >> 2] = $24; //@line 32880
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 32881
  HEAP32[$50 >> 2] = $2; //@line 32882
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 32883
  HEAP32[$51 >> 2] = $23; //@line 32884
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 32885
  HEAP32[$52 >> 2] = 1; //@line 32886
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 32887
  HEAP32[$53 >> 2] = $27; //@line 32888
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 32889
  HEAP32[$54 >> 2] = $4; //@line 32890
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 32891
  HEAP32[$55 >> 2] = $6; //@line 32892
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 32893
  HEAP32[$56 >> 2] = $8; //@line 32894
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 32895
  HEAP32[$57 >> 2] = $10; //@line 32896
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 32897
  HEAP32[$58 >> 2] = $12; //@line 32898
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 32899
  HEAP32[$59 >> 2] = $14; //@line 32900
  sp = STACKTOP; //@line 32901
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 32905
 ___async_unwind = 0; //@line 32906
 HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 32907
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 32908
 HEAP32[$49 >> 2] = $24; //@line 32909
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 32910
 HEAP32[$50 >> 2] = $2; //@line 32911
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 32912
 HEAP32[$51 >> 2] = $23; //@line 32913
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 32914
 HEAP32[$52 >> 2] = 1; //@line 32915
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 32916
 HEAP32[$53 >> 2] = $27; //@line 32917
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 32918
 HEAP32[$54 >> 2] = $4; //@line 32919
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 32920
 HEAP32[$55 >> 2] = $6; //@line 32921
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 32922
 HEAP32[$56 >> 2] = $8; //@line 32923
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 32924
 HEAP32[$57 >> 2] = $10; //@line 32925
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 32926
 HEAP32[$58 >> 2] = $12; //@line 32927
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 32928
 HEAP32[$59 >> 2] = $14; //@line 32929
 sp = STACKTOP; //@line 32930
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2438
 HEAP32[$0 >> 2] = 560; //@line 2439
 $1 = $0 + 1240 | 0; //@line 2440
 HEAP32[$1 >> 2] = 10108; //@line 2441
 __ZN4mbed6Ticker6detachEv($1); //@line 2442
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 2444
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2450
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2451
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 2452
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 112; //@line 2455
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2457
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2459
    sp = STACKTOP; //@line 2460
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2463
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2468
 __ZN4mbed10TimerEventD2Ev($1); //@line 2469
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 113; //@line 2472
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 2474
  sp = STACKTOP; //@line 2475
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 2478
 $11 = $0 + 1176 | 0; //@line 2479
 HEAP32[$11 >> 2] = 10108; //@line 2480
 __ZN4mbed6Ticker6detachEv($11); //@line 2481
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 2483
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 2489
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2490
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 2491
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 114; //@line 2494
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2496
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 2498
    sp = STACKTOP; //@line 2499
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2502
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2507
 __ZN4mbed10TimerEventD2Ev($11); //@line 2508
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 115; //@line 2511
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 2513
  sp = STACKTOP; //@line 2514
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 2517
 $21 = $0 + 1112 | 0; //@line 2518
 HEAP32[$21 >> 2] = 10108; //@line 2519
 __ZN4mbed6Ticker6detachEv($21); //@line 2520
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 2522
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 2528
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2529
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 2530
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 116; //@line 2533
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2535
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 2537
    sp = STACKTOP; //@line 2538
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2541
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2546
 __ZN4mbed10TimerEventD2Ev($21); //@line 2547
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 117; //@line 2550
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 2552
  sp = STACKTOP; //@line 2553
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 2556
 $31 = $0 + 1048 | 0; //@line 2557
 HEAP32[$31 >> 2] = 10108; //@line 2558
 __ZN4mbed6Ticker6detachEv($31); //@line 2559
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 2561
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 2567
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2568
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 2569
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 118; //@line 2572
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 2574
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2576
    sp = STACKTOP; //@line 2577
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2580
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2585
 __ZN4mbed10TimerEventD2Ev($31); //@line 2586
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 119; //@line 2589
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 2591
  sp = STACKTOP; //@line 2592
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 2595
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2597
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 2598
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 120; //@line 2601
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 2603
  sp = STACKTOP; //@line 2604
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 2607
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2609
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 2610
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 121; //@line 2613
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 2615
  sp = STACKTOP; //@line 2616
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2619
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2621
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 2622
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 122; //@line 2625
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 2627
  sp = STACKTOP; //@line 2628
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2631
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2633
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 2634
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 123; //@line 2637
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 2639
  sp = STACKTOP; //@line 2640
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 2643
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2645
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 2646
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 124; //@line 2649
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 2651
  sp = STACKTOP; //@line 2652
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2655
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2657
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 2658
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 125; //@line 2661
  sp = STACKTOP; //@line 2662
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 2665
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_471($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26479
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26483
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26485
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26487
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26491
 $$pre16 = HEAP8[$2 >> 0] | 0; //@line 26494
 do {
  if (!($$pre16 & 2)) {
   $45 = $$pre16; //@line 26499
  } else {
   $17 = $$pre16 & -3; //@line 26501
   HEAP8[$2 >> 0] = $17; //@line 26502
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $8) | 0; //@line 26507
    _printf(12994, $12) | 0; //@line 26508
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26509
    _putchar(10) | 0; //@line 26510
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 26513
     $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 26514
     HEAP32[$21 >> 2] = $2; //@line 26515
     $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 26516
     HEAP32[$22 >> 2] = $4; //@line 26517
     $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 26518
     HEAP32[$23 >> 2] = $6; //@line 26519
     $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 26520
     HEAP32[$24 >> 2] = $6; //@line 26521
     sp = STACKTOP; //@line 26522
     return;
    }
    ___async_unwind = 0; //@line 26525
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 26526
    $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 26527
    HEAP32[$21 >> 2] = $2; //@line 26528
    $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 26529
    HEAP32[$22 >> 2] = $4; //@line 26530
    $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 26531
    HEAP32[$23 >> 2] = $6; //@line 26532
    $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 26533
    HEAP32[$24 >> 2] = $6; //@line 26534
    sp = STACKTOP; //@line 26535
    return;
   }
   if ($17 & 4) {
    $43 = $17 & -5; //@line 26541
    HEAP8[$2 >> 0] = $43; //@line 26542
    $45 = $43; //@line 26543
    break;
   }
   $28 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26547
   $29 = $28 + 16 | 0; //@line 26548
   $31 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 26550
   $32 = $28 + 28 | 0; //@line 26551
   $33 = HEAP32[$32 >> 2] | 0; //@line 26552
   if (!$33) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 26555
    _mbed_assert_internal(15061, 15066, 1102); //@line 26556
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 26559
     $35 = $ReallocAsyncCtx15 + 4 | 0; //@line 26560
     HEAP32[$35 >> 2] = $32; //@line 26561
     $36 = $ReallocAsyncCtx15 + 8 | 0; //@line 26562
     HEAP32[$36 >> 2] = $29; //@line 26563
     $37 = $ReallocAsyncCtx15 + 12 | 0; //@line 26564
     HEAP32[$37 >> 2] = $31; //@line 26565
     $38 = $ReallocAsyncCtx15 + 16 | 0; //@line 26566
     HEAP32[$38 >> 2] = $2; //@line 26567
     $39 = $ReallocAsyncCtx15 + 20 | 0; //@line 26568
     HEAP32[$39 >> 2] = $4; //@line 26569
     sp = STACKTOP; //@line 26570
     return;
    }
    ___async_unwind = 0; //@line 26573
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 26574
    $35 = $ReallocAsyncCtx15 + 4 | 0; //@line 26575
    HEAP32[$35 >> 2] = $32; //@line 26576
    $36 = $ReallocAsyncCtx15 + 8 | 0; //@line 26577
    HEAP32[$36 >> 2] = $29; //@line 26578
    $37 = $ReallocAsyncCtx15 + 12 | 0; //@line 26579
    HEAP32[$37 >> 2] = $31; //@line 26580
    $38 = $ReallocAsyncCtx15 + 16 | 0; //@line 26581
    HEAP32[$38 >> 2] = $2; //@line 26582
    $39 = $ReallocAsyncCtx15 + 20 | 0; //@line 26583
    HEAP32[$39 >> 2] = $4; //@line 26584
    sp = STACKTOP; //@line 26585
    return;
   } else {
    $40 = HEAP32[$33 >> 2] | 0; //@line 26588
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26589
    FUNCTION_TABLE_vii[$40 & 31]($29, $31); //@line 26590
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 26593
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 26594
     HEAP32[$41 >> 2] = $2; //@line 26595
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 26596
     HEAP32[$42 >> 2] = $4; //@line 26597
     sp = STACKTOP; //@line 26598
     return;
    }
    ___async_unwind = 0; //@line 26601
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 26602
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 26603
    HEAP32[$41 >> 2] = $2; //@line 26604
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 26605
    HEAP32[$42 >> 2] = $4; //@line 26606
    sp = STACKTOP; //@line 26607
    return;
   }
  }
 } while (0);
 if (!($45 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $45 & -17; //@line 26618
 $49 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26620
 $50 = $49 + 48 | 0; //@line 26621
 $52 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26623
 $53 = $49 + 60 | 0; //@line 26624
 $54 = HEAP32[$53 >> 2] | 0; //@line 26625
 if (!$54) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 26628
  _mbed_assert_internal(15061, 15066, 1102); //@line 26629
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 26632
   $56 = $ReallocAsyncCtx14 + 4 | 0; //@line 26633
   HEAP32[$56 >> 2] = $53; //@line 26634
   $57 = $ReallocAsyncCtx14 + 8 | 0; //@line 26635
   HEAP32[$57 >> 2] = $50; //@line 26636
   $58 = $ReallocAsyncCtx14 + 12 | 0; //@line 26637
   HEAP32[$58 >> 2] = $52; //@line 26638
   sp = STACKTOP; //@line 26639
   return;
  }
  ___async_unwind = 0; //@line 26642
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 26643
  $56 = $ReallocAsyncCtx14 + 4 | 0; //@line 26644
  HEAP32[$56 >> 2] = $53; //@line 26645
  $57 = $ReallocAsyncCtx14 + 8 | 0; //@line 26646
  HEAP32[$57 >> 2] = $50; //@line 26647
  $58 = $ReallocAsyncCtx14 + 12 | 0; //@line 26648
  HEAP32[$58 >> 2] = $52; //@line 26649
  sp = STACKTOP; //@line 26650
  return;
 } else {
  $59 = HEAP32[$54 >> 2] | 0; //@line 26653
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26654
  FUNCTION_TABLE_vii[$59 & 31]($50, $52); //@line 26655
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 26658
   sp = STACKTOP; //@line 26659
   return;
  }
  ___async_unwind = 0; //@line 26662
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 26663
  sp = STACKTOP; //@line 26664
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_167($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33156
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33158
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33160
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33164
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33166
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33168
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33170
 $15 = $8 + 12 | 0; //@line 33171
 HEAP32[$8 >> 2] = 7; //@line 33172
 HEAP32[$8 + 4 >> 2] = 0; //@line 33174
 HEAP32[$8 + 8 >> 2] = $4; //@line 33176
 HEAP32[$15 >> 2] = 860; //@line 33177
 $16 = $4 + 1244 | 0; //@line 33178
 if (($16 | 0) == ($8 | 0)) {
  $43 = HEAP32[217] | 0; //@line 33182
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 33183
  FUNCTION_TABLE_vi[$43 & 1023]($8); //@line 33184
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 33187
   $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 33188
   HEAP32[$44 >> 2] = $8; //@line 33189
   $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 33190
   HEAP32[$45 >> 2] = $2; //@line 33191
   $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 33192
   HEAP32[$46 >> 2] = $4; //@line 33193
   $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 33194
   HEAP32[$47 >> 2] = $10; //@line 33195
   $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 33196
   HEAP32[$48 >> 2] = $12; //@line 33197
   $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 33198
   HEAP32[$49 >> 2] = $14; //@line 33199
   sp = STACKTOP; //@line 33200
   return;
  }
  ___async_unwind = 0; //@line 33203
  HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 33204
  $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 33205
  HEAP32[$44 >> 2] = $8; //@line 33206
  $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 33207
  HEAP32[$45 >> 2] = $2; //@line 33208
  $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 33209
  HEAP32[$46 >> 2] = $4; //@line 33210
  $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 33211
  HEAP32[$47 >> 2] = $10; //@line 33212
  $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 33213
  HEAP32[$48 >> 2] = $12; //@line 33214
  $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 33215
  HEAP32[$49 >> 2] = $14; //@line 33216
  sp = STACKTOP; //@line 33217
  return;
 }
 $18 = $4 + 1256 | 0; //@line 33220
 $19 = HEAP32[$18 >> 2] | 0; //@line 33221
 if (!$19) {
  $33 = HEAP32[216] | 0; //@line 33225
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 33226
  FUNCTION_TABLE_vii[$33 & 31]($16, $8); //@line 33227
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 33230
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 33231
   HEAP32[$34 >> 2] = $8; //@line 33232
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 33233
   HEAP32[$35 >> 2] = $2; //@line 33234
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 33235
   HEAP32[$36 >> 2] = $4; //@line 33236
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 33237
   HEAP32[$37 >> 2] = $10; //@line 33238
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 33239
   HEAP32[$38 >> 2] = $15; //@line 33240
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 33241
   HEAP32[$39 >> 2] = $18; //@line 33242
   $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 33243
   HEAP32[$40 >> 2] = $12; //@line 33244
   $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 33245
   HEAP32[$41 >> 2] = $14; //@line 33246
   sp = STACKTOP; //@line 33247
   return;
  }
  ___async_unwind = 0; //@line 33250
  HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 33251
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 33252
  HEAP32[$34 >> 2] = $8; //@line 33253
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 33254
  HEAP32[$35 >> 2] = $2; //@line 33255
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 33256
  HEAP32[$36 >> 2] = $4; //@line 33257
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 33258
  HEAP32[$37 >> 2] = $10; //@line 33259
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 33260
  HEAP32[$38 >> 2] = $15; //@line 33261
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 33262
  HEAP32[$39 >> 2] = $18; //@line 33263
  $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 33264
  HEAP32[$40 >> 2] = $12; //@line 33265
  $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 33266
  HEAP32[$41 >> 2] = $14; //@line 33267
  sp = STACKTOP; //@line 33268
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 33272
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 33273
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 33274
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 33277
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 33278
   HEAP32[$23 >> 2] = $8; //@line 33279
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 33280
   HEAP32[$24 >> 2] = $2; //@line 33281
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 33282
   HEAP32[$25 >> 2] = $4; //@line 33283
   $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 33284
   HEAP32[$26 >> 2] = $18; //@line 33285
   $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 33286
   HEAP32[$27 >> 2] = $16; //@line 33287
   $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 33288
   HEAP32[$28 >> 2] = $10; //@line 33289
   $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 33290
   HEAP32[$29 >> 2] = $15; //@line 33291
   $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 33292
   HEAP32[$30 >> 2] = $12; //@line 33293
   $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 33294
   HEAP32[$31 >> 2] = $14; //@line 33295
   sp = STACKTOP; //@line 33296
   return;
  }
  ___async_unwind = 0; //@line 33299
  HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 33300
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 33301
  HEAP32[$23 >> 2] = $8; //@line 33302
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 33303
  HEAP32[$24 >> 2] = $2; //@line 33304
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 33305
  HEAP32[$25 >> 2] = $4; //@line 33306
  $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 33307
  HEAP32[$26 >> 2] = $18; //@line 33308
  $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 33309
  HEAP32[$27 >> 2] = $16; //@line 33310
  $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 33311
  HEAP32[$28 >> 2] = $10; //@line 33312
  $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 33313
  HEAP32[$29 >> 2] = $15; //@line 33314
  $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 33315
  HEAP32[$30 >> 2] = $12; //@line 33316
  $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 33317
  HEAP32[$31 >> 2] = $14; //@line 33318
  sp = STACKTOP; //@line 33319
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_31($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21141
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21143
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21145
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21147
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21149
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 21151
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 21153
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 21155
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 21157
 $19 = $4 + 12 | 0; //@line 21161
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 32 >> 2] >> 2]; //@line 21162
 $20 = $4 + 16 | 0; //@line 21163
 HEAP32[$20 >> 2] = $8; //@line 21164
 HEAP16[$4 + 20 >> 1] = $10; //@line 21166
 HEAP16[$4 + 22 >> 1] = $12; //@line 21168
 HEAP8[$4 + 24 >> 0] = $14; //@line 21170
 $24 = _equeue_alloc($16, 28) | 0; //@line 21171
 if ($24 | 0) {
  $26 = HEAP32[$19 >> 2] | 0; //@line 21174
  if (!$26) {
   HEAP32[$24 + 12 >> 2] = 0; //@line 21178
   $39 = $24 + 16 | 0; //@line 21179
   HEAP32[$39 >> 2] = HEAP32[$20 >> 2]; //@line 21180
   HEAP32[$39 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 21180
   HEAP8[$39 + 8 >> 0] = HEAP8[$20 + 8 >> 0] | 0; //@line 21180
   _equeue_event_dtor($24, 413); //@line 21181
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21182
   $40 = _equeue_post($16, 414, $24) | 0; //@line 21183
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 21186
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 21187
    HEAP32[$41 >> 2] = $19; //@line 21188
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 21189
    HEAP32[$42 >> 2] = $6; //@line 21190
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 21191
    HEAP32[$43 >> 2] = $4; //@line 21192
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 21193
    HEAP32[$44 >> 2] = $2; //@line 21194
    sp = STACKTOP; //@line 21195
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 21199
   ___async_unwind = 0; //@line 21200
   HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 21201
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 21202
   HEAP32[$41 >> 2] = $19; //@line 21203
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 21204
   HEAP32[$42 >> 2] = $6; //@line 21205
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 21206
   HEAP32[$43 >> 2] = $4; //@line 21207
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 21208
   HEAP32[$44 >> 2] = $2; //@line 21209
   sp = STACKTOP; //@line 21210
   return;
  } else {
   $29 = HEAP32[$26 + 4 >> 2] | 0; //@line 21214
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 21215
   FUNCTION_TABLE_vii[$29 & 31]($24, $4); //@line 21216
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 21219
    $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 21220
    HEAP32[$30 >> 2] = $19; //@line 21221
    $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 21222
    HEAP32[$31 >> 2] = $24; //@line 21223
    $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 21224
    HEAP32[$32 >> 2] = $20; //@line 21225
    $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 21226
    HEAP32[$33 >> 2] = $16; //@line 21227
    $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 21228
    HEAP32[$34 >> 2] = $19; //@line 21229
    $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 21230
    HEAP32[$35 >> 2] = $6; //@line 21231
    $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 21232
    HEAP32[$36 >> 2] = $4; //@line 21233
    $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 21234
    HEAP32[$37 >> 2] = $2; //@line 21235
    sp = STACKTOP; //@line 21236
    return;
   }
   ___async_unwind = 0; //@line 21239
   HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 21240
   $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 21241
   HEAP32[$30 >> 2] = $19; //@line 21242
   $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 21243
   HEAP32[$31 >> 2] = $24; //@line 21244
   $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 21245
   HEAP32[$32 >> 2] = $20; //@line 21246
   $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 21247
   HEAP32[$33 >> 2] = $16; //@line 21248
   $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 21249
   HEAP32[$34 >> 2] = $19; //@line 21250
   $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 21251
   HEAP32[$35 >> 2] = $6; //@line 21252
   $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 21253
   HEAP32[$36 >> 2] = $4; //@line 21254
   $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 21255
   HEAP32[$37 >> 2] = $2; //@line 21256
   sp = STACKTOP; //@line 21257
   return;
  }
 }
 $46 = HEAP32[$19 >> 2] | 0; //@line 21261
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 21265
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 21266
  FUNCTION_TABLE_vi[$49 & 1023]($4); //@line 21267
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 21270
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 21271
   HEAP32[$50 >> 2] = $6; //@line 21272
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 21273
   HEAP32[$51 >> 2] = 0; //@line 21274
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 21275
   HEAP32[$52 >> 2] = $2; //@line 21276
   sp = STACKTOP; //@line 21277
   return;
  }
  ___async_unwind = 0; //@line 21280
  HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 21281
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 21282
  HEAP32[$50 >> 2] = $6; //@line 21283
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 21284
  HEAP32[$51 >> 2] = 0; //@line 21285
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 21286
  HEAP32[$52 >> 2] = $2; //@line 21287
  sp = STACKTOP; //@line 21288
  return;
 }
 $53 = HEAP32[$6 >> 2] | 0; //@line 21291
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 21295
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 21299
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21300
 FUNCTION_TABLE_vi[$56 & 1023]($2); //@line 21301
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 21304
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 21305
  HEAP32[$57 >> 2] = 0; //@line 21306
  sp = STACKTOP; //@line 21307
  return;
 }
 ___async_unwind = 0; //@line 21310
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 21311
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 21312
 HEAP32[$57 >> 2] = 0; //@line 21313
 sp = STACKTOP; //@line 21314
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre12 = 0, $$pre13 = 0, $12 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9914
 if (!$1) {
  return;
 }
 $3 = $1 + 12 | 0; //@line 9919
 $4 = HEAP32[$3 >> 2] | 0; //@line 9920
 if ($4 | 0) {
  $6 = $0 + 1880 | 0; //@line 9923
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 1892 | 0; //@line 9926
   $9 = HEAP32[$8 >> 2] | 0; //@line 9927
   do {
    if (!$9) {
     $20 = $4; //@line 9931
     label = 8; //@line 9932
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 9935
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9936
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 9937
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 315; //@line 9940
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9942
      HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9944
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 9946
      HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 9948
      HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 9950
      sp = STACKTOP; //@line 9951
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9954
      $$pre = HEAP32[$3 >> 2] | 0; //@line 9955
      if (!$$pre) {
       $26 = 0; //@line 9958
       break;
      } else {
       $20 = $$pre; //@line 9961
       label = 8; //@line 9962
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 8) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 9971
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9972
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 9973
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 316; //@line 9976
      HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 9978
      HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9980
      HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 9982
      HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 9984
      sp = STACKTOP; //@line 9985
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9988
      $26 = HEAP32[$3 >> 2] | 0; //@line 9990
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $26; //@line 9995
  }
 }
 $27 = $1 + 16 | 0; //@line 9998
 $28 = $1 + 28 | 0; //@line 9999
 $29 = HEAP32[$28 >> 2] | 0; //@line 10000
 if ($29 | 0) {
  $31 = $0 + 1896 | 0; //@line 10003
  if (($31 | 0) != ($27 | 0)) {
   $33 = $0 + 1908 | 0; //@line 10006
   $34 = HEAP32[$33 >> 2] | 0; //@line 10007
   do {
    if (!$34) {
     $46 = $29; //@line 10011
     label = 18; //@line 10012
    } else {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 10015
     $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10016
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 10017
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 317; //@line 10020
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 10022
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 10024
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 10026
      HEAP32[$AsyncCtx5 + 16 >> 2] = $27; //@line 10028
      HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 10030
      HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 10032
      sp = STACKTOP; //@line 10033
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10036
      $$pre12 = HEAP32[$28 >> 2] | 0; //@line 10037
      if (!$$pre12) {
       $52 = 0; //@line 10040
       break;
      } else {
       $46 = $$pre12; //@line 10043
       label = 18; //@line 10044
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 10053
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10054
     FUNCTION_TABLE_vii[$47 & 31]($31, $27); //@line 10055
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 318; //@line 10058
      HEAP32[$AsyncCtx8 + 4 >> 2] = $28; //@line 10060
      HEAP32[$AsyncCtx8 + 8 >> 2] = $33; //@line 10062
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 10064
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 10066
      sp = STACKTOP; //@line 10067
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10070
      $52 = HEAP32[$28 >> 2] | 0; //@line 10072
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $52; //@line 10077
  }
 }
 $53 = $1 + 32 | 0; //@line 10080
 $54 = $1 + 44 | 0; //@line 10081
 $55 = HEAP32[$54 >> 2] | 0; //@line 10082
 if (!$55) {
  return;
 }
 $57 = $0 + 1912 | 0; //@line 10087
 if (($57 | 0) == ($53 | 0)) {
  return;
 }
 $59 = $0 + 1924 | 0; //@line 10092
 $60 = HEAP32[$59 >> 2] | 0; //@line 10093
 do {
  if (!$60) {
   $70 = $55; //@line 10097
   label = 28; //@line 10098
  } else {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 10101
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10102
   FUNCTION_TABLE_vi[$63 & 1023]($57); //@line 10103
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 319; //@line 10106
    HEAP32[$AsyncCtx11 + 4 >> 2] = $54; //@line 10108
    HEAP32[$AsyncCtx11 + 8 >> 2] = $59; //@line 10110
    HEAP32[$AsyncCtx11 + 12 >> 2] = $57; //@line 10112
    HEAP32[$AsyncCtx11 + 16 >> 2] = $53; //@line 10114
    sp = STACKTOP; //@line 10115
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10118
    $$pre13 = HEAP32[$54 >> 2] | 0; //@line 10119
    if (!$$pre13) {
     $74 = 0; //@line 10122
     break;
    } else {
     $70 = $$pre13; //@line 10125
     label = 28; //@line 10126
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 28) {
   $71 = HEAP32[$70 + 4 >> 2] | 0; //@line 10135
   $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10136
   FUNCTION_TABLE_vii[$71 & 31]($57, $53); //@line 10137
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 320; //@line 10140
    HEAP32[$AsyncCtx14 + 4 >> 2] = $54; //@line 10142
    HEAP32[$AsyncCtx14 + 8 >> 2] = $59; //@line 10144
    sp = STACKTOP; //@line 10145
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10148
    $74 = HEAP32[$54 >> 2] | 0; //@line 10150
    break;
   }
  }
 } while (0);
 HEAP32[$59 >> 2] = $74; //@line 10155
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $42 = 0, $45 = 0, $50 = 0, $51 = 0, $54 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 3126
 STACKTOP = STACKTOP + 64 | 0; //@line 3127
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 3127
 $vararg_buffer10 = sp + 40 | 0; //@line 3128
 $vararg_buffer8 = sp + 32 | 0; //@line 3129
 $vararg_buffer5 = sp + 24 | 0; //@line 3130
 $vararg_buffer3 = sp + 16 | 0; //@line 3131
 $vararg_buffer1 = sp + 8 | 0; //@line 3132
 $2 = sp + 48 | 0; //@line 3134
 _printf(10904, sp) | 0; //@line 3135
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 3136
 _printf(11451, $vararg_buffer1) | 0; //@line 3137
 $AsyncCtx29 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3138
 _putchar(10) | 0; //@line 3139
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 138; //@line 3142
  HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 3144
  HEAP32[$AsyncCtx29 + 8 >> 2] = $vararg_buffer3; //@line 3146
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer3; //@line 3148
  HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer5; //@line 3150
  HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer5; //@line 3152
  HEAP32[$AsyncCtx29 + 24 >> 2] = $2; //@line 3154
  HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer8; //@line 3156
  HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer8; //@line 3158
  HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer10; //@line 3160
  HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer10; //@line 3162
  sp = STACKTOP; //@line 3163
  STACKTOP = sp; //@line 3164
  return;
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3166
 HEAP8[$0 + 688 >> 0] = 2; //@line 3168
 _printf(10904, $vararg_buffer3) | 0; //@line 3169
 HEAP32[$vararg_buffer5 >> 2] = 3; //@line 3170
 _printf(10970, $vararg_buffer5) | 0; //@line 3171
 $AsyncCtx25 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3172
 _putchar(10) | 0; //@line 3173
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 139; //@line 3176
  HEAP32[$AsyncCtx25 + 4 >> 2] = $2; //@line 3178
  HEAP32[$AsyncCtx25 + 8 >> 2] = $0; //@line 3180
  HEAP32[$AsyncCtx25 + 12 >> 2] = $vararg_buffer8; //@line 3182
  HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer8; //@line 3184
  HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer10; //@line 3186
  HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer10; //@line 3188
  sp = STACKTOP; //@line 3189
  STACKTOP = sp; //@line 3190
  return;
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 3192
 $AsyncCtx32 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3193
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 3194
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 140; //@line 3197
  HEAP32[$AsyncCtx32 + 4 >> 2] = $2; //@line 3199
  HEAP32[$AsyncCtx32 + 8 >> 2] = $0; //@line 3201
  HEAP32[$AsyncCtx32 + 12 >> 2] = $vararg_buffer8; //@line 3203
  HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer8; //@line 3205
  HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer10; //@line 3207
  HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer10; //@line 3209
  sp = STACKTOP; //@line 3210
  STACKTOP = sp; //@line 3211
  return;
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 3213
 _printf(10904, $vararg_buffer8) | 0; //@line 3214
 HEAP32[$vararg_buffer10 >> 2] = 3; //@line 3215
 _printf(10999, $vararg_buffer10) | 0; //@line 3216
 $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3217
 _putchar(10) | 0; //@line 3218
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 141; //@line 3221
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 3223
  HEAP32[$AsyncCtx21 + 8 >> 2] = $2; //@line 3225
  sp = STACKTOP; //@line 3226
  STACKTOP = sp; //@line 3227
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 3229
 $28 = $0 + 1240 | 0; //@line 3230
 $29 = $2 + 12 | 0; //@line 3231
 HEAP32[$2 >> 2] = 142; //@line 3232
 HEAP32[$2 + 4 >> 2] = 0; //@line 3234
 HEAP32[$2 + 8 >> 2] = $0; //@line 3236
 HEAP32[$29 >> 2] = 648; //@line 3237
 $30 = $0 + 1280 | 0; //@line 3238
 if (($30 | 0) != ($2 | 0)) {
  $32 = $0 + 1292 | 0; //@line 3241
  $33 = HEAP32[$32 >> 2] | 0; //@line 3242
  do {
   if ($33 | 0) {
    $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 3247
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3248
    FUNCTION_TABLE_vi[$36 & 1023]($30); //@line 3249
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 143; //@line 3252
     HEAP32[$AsyncCtx + 4 >> 2] = $29; //@line 3254
     HEAP32[$AsyncCtx + 8 >> 2] = $32; //@line 3256
     HEAP32[$AsyncCtx + 12 >> 2] = $30; //@line 3258
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 3260
     HEAP32[$AsyncCtx + 20 >> 2] = $28; //@line 3262
     sp = STACKTOP; //@line 3263
     STACKTOP = sp; //@line 3264
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3266
     break;
    }
   }
  } while (0);
  $42 = HEAP32[$29 >> 2] | 0; //@line 3271
  do {
   if (!$42) {
    $50 = 0; //@line 3275
   } else {
    $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 3278
    $AsyncCtx14 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3279
    FUNCTION_TABLE_vii[$45 & 31]($30, $2); //@line 3280
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 144; //@line 3283
     HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 3285
     HEAP32[$AsyncCtx14 + 8 >> 2] = $32; //@line 3287
     HEAP32[$AsyncCtx14 + 12 >> 2] = $28; //@line 3289
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 3291
     sp = STACKTOP; //@line 3292
     STACKTOP = sp; //@line 3293
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3295
     $50 = HEAP32[$29 >> 2] | 0; //@line 3297
     break;
    }
   }
  } while (0);
  HEAP32[$32 >> 2] = $50; //@line 3302
 }
 __ZN4mbed6Ticker5setupEy($28, 1e5, 0); //@line 3304
 $51 = HEAP32[$29 >> 2] | 0; //@line 3305
 if (!$51) {
  STACKTOP = sp; //@line 3308
  return;
 }
 $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 3311
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3312
 FUNCTION_TABLE_vi[$54 & 1023]($2); //@line 3313
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 145; //@line 3316
  sp = STACKTOP; //@line 3317
  STACKTOP = sp; //@line 3318
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 3320
 STACKTOP = sp; //@line 3321
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $15 = 0, $16 = 0, $28 = 0, $33 = 0, $40 = 0, $44 = 0, $48 = 0, $51 = 0, $62 = 0, $66 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14297
 STACKTOP = STACKTOP + 32 | 0; //@line 14298
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14298
 $$byval_copy = sp + 24 | 0; //@line 14299
 $vararg_buffer3 = sp + 16 | 0; //@line 14300
 $vararg_buffer1 = sp + 8 | 0; //@line 14301
 _printf(12967, sp) | 0; //@line 14303
 _printf(13213, $vararg_buffer1) | 0; //@line 14304
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14305
 _putchar(10) | 0; //@line 14306
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 441; //@line 14309
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14311
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 14313
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14315
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 14317
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14319
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 14321
  sp = STACKTOP; //@line 14322
  STACKTOP = sp; //@line 14323
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14325
 $7 = $0 + 360 | 0; //@line 14326
 do {
  if ((HEAP32[$7 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 14331
   _printf(12994, $$byval_copy) | 0; //@line 14332
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 14333
   _putchar(10) | 0; //@line 14334
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 442; //@line 14337
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14339
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14341
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14343
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 14345
    sp = STACKTOP; //@line 14346
    STACKTOP = sp; //@line 14347
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14349
   $15 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14351
   HEAP32[$vararg_buffer1 >> 2] = 361; //@line 14352
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14354
   $AsyncCtx20 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14355
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14356
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14356
   $16 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($15, $0, $$byval_copy) | 0; //@line 14357
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 443; //@line 14360
    HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 14362
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 14364
    HEAP32[$AsyncCtx20 + 12 >> 2] = $7; //@line 14366
    sp = STACKTOP; //@line 14367
    STACKTOP = sp; //@line 14368
    return;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14370
   do {
    if (!$16) {
     $AsyncCtx28 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14374
     _mbed_assert_internal(12851, 12860, 217); //@line 14375
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 444; //@line 14378
      HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer1; //@line 14380
      HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 14382
      HEAP32[$AsyncCtx28 + 12 >> 2] = $7; //@line 14384
      sp = STACKTOP; //@line 14385
      STACKTOP = sp; //@line 14386
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 14388
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14394
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 24; //@line 14399
   } else {
    label = 23; //@line 14401
   }
  } else {
   $28 = HEAP32[$0 >> 2] | 0; //@line 14404
   $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14405
   __ZN7LoRaPHY18put_radio_to_sleepEv($28); //@line 14406
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 445; //@line 14409
    HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 14411
    HEAP32[$AsyncCtx17 + 8 >> 2] = $7; //@line 14413
    sp = STACKTOP; //@line 14414
    STACKTOP = sp; //@line 14415
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14417
   $33 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 14423
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($33) {
     label = 23; //@line 14426
     break;
    } else {
     label = 24; //@line 14429
     break;
    }
   }
   if ($33) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 14437
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 14442
   $40 = $0 + 356 | 0; //@line 14443
   $44 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$40 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 14447
   if ($44 >>> 0 >= (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    $48 = HEAP32[$40 >> 2] | 0; //@line 14452
    $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14454
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($48, $0 + 1056 | 0); //@line 14455
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 446; //@line 14458
     HEAP32[$AsyncCtx24 + 4 >> 2] = $0; //@line 14460
     sp = STACKTOP; //@line 14461
     STACKTOP = sp; //@line 14462
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx24 | 0); //@line 14464
     $51 = $0 + 944 | 0; //@line 14465
     HEAP8[$51 >> 0] = HEAP8[$51 >> 0] | 32; //@line 14468
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 14478
  label = 24; //@line 14479
 }
 if ((label | 0) == 24) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 14485
  if ((HEAP32[$7 >> 2] | 0) != 2) {
   $62 = $0 + 944 | 0; //@line 14489
   HEAP8[$62 >> 0] = HEAP8[$62 >> 0] | 32; //@line 14492
  }
 }
 $66 = HEAP32[$0 + 356 >> 2] | 0; //@line 14496
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14498
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($66, $0 + 996 | 0, 1); //@line 14499
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 447; //@line 14502
  sp = STACKTOP; //@line 14503
  STACKTOP = sp; //@line 14504
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14506
  STACKTOP = sp; //@line 14507
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_499($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34517
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34519
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34521
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34523
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34525
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34527
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34529
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34531
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34533
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 34538
  _mbed_assert_internal(12851, 12860, 217); //@line 34539
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 363; //@line 34542
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 34543
   HEAP32[$19 >> 2] = $2; //@line 34544
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 34545
   HEAP32[$20 >> 2] = $4; //@line 34546
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 34547
   HEAP32[$21 >> 2] = $6; //@line 34548
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 34549
   HEAP32[$22 >> 2] = $8; //@line 34550
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 34551
   HEAP32[$23 >> 2] = $10; //@line 34552
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 34553
   HEAP32[$24 >> 2] = $12; //@line 34554
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 34555
   HEAP32[$25 >> 2] = $14; //@line 34556
   $26 = $ReallocAsyncCtx10 + 32 | 0; //@line 34557
   HEAP32[$26 >> 2] = $16; //@line 34558
   sp = STACKTOP; //@line 34559
   return;
  }
  ___async_unwind = 0; //@line 34562
  HEAP32[$ReallocAsyncCtx10 >> 2] = 363; //@line 34563
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 34564
  HEAP32[$19 >> 2] = $2; //@line 34565
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 34566
  HEAP32[$20 >> 2] = $4; //@line 34567
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 34568
  HEAP32[$21 >> 2] = $6; //@line 34569
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 34570
  HEAP32[$22 >> 2] = $8; //@line 34571
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 34572
  HEAP32[$23 >> 2] = $10; //@line 34573
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 34574
  HEAP32[$24 >> 2] = $12; //@line 34575
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 34576
  HEAP32[$25 >> 2] = $14; //@line 34577
  $26 = $ReallocAsyncCtx10 + 32 | 0; //@line 34578
  HEAP32[$26 >> 2] = $16; //@line 34579
  sp = STACKTOP; //@line 34580
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 34584
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $31 = HEAP32[$6 >> 2] | 0; //@line 34589
  $34 = HEAP32[$4 + 972 >> 2] | 0; //@line 34592
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 34593
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($31, $4 + 1036 | 0, $34); //@line 34594
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 34597
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 34598
   HEAP32[$35 >> 2] = $2; //@line 34599
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 34600
   HEAP32[$36 >> 2] = $4; //@line 34601
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 34602
   HEAP32[$37 >> 2] = $6; //@line 34603
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 34604
   HEAP32[$38 >> 2] = $8; //@line 34605
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 34606
   HEAP32[$39 >> 2] = $10; //@line 34607
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 34608
   HEAP32[$40 >> 2] = $12; //@line 34609
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 34610
   HEAP32[$41 >> 2] = $14; //@line 34611
   sp = STACKTOP; //@line 34612
   return;
  }
  ___async_unwind = 0; //@line 34615
  HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 34616
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 34617
  HEAP32[$35 >> 2] = $2; //@line 34618
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 34619
  HEAP32[$36 >> 2] = $4; //@line 34620
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 34621
  HEAP32[$37 >> 2] = $6; //@line 34622
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 34623
  HEAP32[$38 >> 2] = $8; //@line 34624
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 34625
  HEAP32[$39 >> 2] = $10; //@line 34626
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 34627
  HEAP32[$40 >> 2] = $12; //@line 34628
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 34629
  HEAP32[$41 >> 2] = $14; //@line 34630
  sp = STACKTOP; //@line 34631
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 34637
 $45 = $4 + 944 | 0; //@line 34638
 $46 = HEAP8[$45 >> 0] | 0; //@line 34639
 if (!($46 << 24 >> 24)) {
  HEAP8[$45 >> 0] = 1; //@line 34642
  $49 = 1; //@line 34643
 } else {
  $49 = $46; //@line 34645
 }
 HEAP8[$45 >> 0] = $49 | 32; //@line 34648
 HEAP8[$4 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 34657
 $57 = HEAP8[$4 + 378 >> 0] | 0; //@line 34659
 HEAP8[$4 + 379 >> 0] = $57; //@line 34661
 HEAP8[$10 >> 0] = $57; //@line 34662
 HEAP8[$12 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 34666
 HEAP32[$12 + 4 >> 2] = $14; //@line 34668
 $63 = HEAP32[$4 >> 2] | 0; //@line 34669
 $66 = HEAP32[(HEAP32[$63 >> 2] | 0) + 12 >> 2] | 0; //@line 34672
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 34673
 FUNCTION_TABLE_vii[$66 & 31]($63, $12); //@line 34674
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34677
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 34678
  HEAP32[$67 >> 2] = $4; //@line 34679
  $68 = $ReallocAsyncCtx + 8 | 0; //@line 34680
  HEAP32[$68 >> 2] = $14; //@line 34681
  $69 = $ReallocAsyncCtx + 12 | 0; //@line 34682
  HEAP32[$69 >> 2] = $6; //@line 34683
  $70 = $ReallocAsyncCtx + 16 | 0; //@line 34684
  HEAP32[$70 >> 2] = $10; //@line 34685
  sp = STACKTOP; //@line 34686
  return;
 }
 ___async_unwind = 0; //@line 34689
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34690
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 34691
 HEAP32[$67 >> 2] = $4; //@line 34692
 $68 = $ReallocAsyncCtx + 8 | 0; //@line 34693
 HEAP32[$68 >> 2] = $14; //@line 34694
 $69 = $ReallocAsyncCtx + 12 | 0; //@line 34695
 HEAP32[$69 >> 2] = $6; //@line 34696
 $70 = $ReallocAsyncCtx + 16 | 0; //@line 34697
 HEAP32[$70 >> 2] = $10; //@line 34698
 sp = STACKTOP; //@line 34699
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $35 = 0, $4 = 0, $40 = 0, $43 = 0, $48 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $75 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2851
 STACKTOP = STACKTOP + 32 | 0; //@line 2852
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 2852
 $1 = sp + 16 | 0; //@line 2855
 _printf(10904, sp) | 0; //@line 2856
 _printf(11301, sp + 8 | 0) | 0; //@line 2857
 $AsyncCtx18 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2858
 _putchar(10) | 0; //@line 2859
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 131; //@line 2862
  HEAP32[$AsyncCtx18 + 4 >> 2] = $1; //@line 2864
  HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 2866
  sp = STACKTOP; //@line 2867
  STACKTOP = sp; //@line 2868
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 2870
 $4 = $0 + 688 | 0; //@line 2871
 switch (HEAP8[$4 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 2881
     HEAP8[$0 + 733 >> 0] = 0; //@line 2883
     HEAP16[$0 + 744 >> 1] = 0; //@line 2885
     HEAP16[$0 + 742 >> 1] = 0; //@line 2887
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$4 >> 0] = 0; //@line 2892
      $16 = $0 + 1176 | 0; //@line 2893
      $17 = $1 + 12 | 0; //@line 2894
      HEAP32[$1 >> 2] = 73; //@line 2895
      HEAP32[$1 + 4 >> 2] = 0; //@line 2897
      HEAP32[$1 + 8 >> 2] = $0; //@line 2899
      HEAP32[$17 >> 2] = 648; //@line 2900
      $20 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 2903
      $21 = tempRet0; //@line 2904
      $22 = $0 + 1216 | 0; //@line 2905
      if (($22 | 0) != ($1 | 0)) {
       $24 = $0 + 1228 | 0; //@line 2908
       $25 = HEAP32[$24 >> 2] | 0; //@line 2909
       do {
        if ($25 | 0) {
         $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 2914
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 2915
         FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 2916
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 132; //@line 2919
          HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 2921
          HEAP32[$AsyncCtx + 8 >> 2] = $24; //@line 2923
          HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 2925
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2927
          HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 2929
          $35 = $AsyncCtx + 24 | 0; //@line 2931
          HEAP32[$35 >> 2] = $20; //@line 2933
          HEAP32[$35 + 4 >> 2] = $21; //@line 2936
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 2938
          sp = STACKTOP; //@line 2939
          STACKTOP = sp; //@line 2940
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 2942
          break;
         }
        }
       } while (0);
       $40 = HEAP32[$17 >> 2] | 0; //@line 2947
       do {
        if (!$40) {
         $54 = 0; //@line 2951
        } else {
         $43 = HEAP32[$40 + 4 >> 2] | 0; //@line 2954
         $AsyncCtx4 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2955
         FUNCTION_TABLE_vii[$43 & 31]($22, $1); //@line 2956
         if (___async) {
          HEAP32[$AsyncCtx4 >> 2] = 133; //@line 2959
          HEAP32[$AsyncCtx4 + 4 >> 2] = $17; //@line 2961
          HEAP32[$AsyncCtx4 + 8 >> 2] = $24; //@line 2963
          HEAP32[$AsyncCtx4 + 12 >> 2] = $16; //@line 2965
          $48 = $AsyncCtx4 + 16 | 0; //@line 2967
          HEAP32[$48 >> 2] = $20; //@line 2969
          HEAP32[$48 + 4 >> 2] = $21; //@line 2972
          HEAP32[$AsyncCtx4 + 24 >> 2] = $0; //@line 2974
          HEAP32[$AsyncCtx4 + 28 >> 2] = $1; //@line 2976
          sp = STACKTOP; //@line 2977
          STACKTOP = sp; //@line 2978
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx4 | 0); //@line 2980
          $54 = HEAP32[$17 >> 2] | 0; //@line 2982
          break;
         }
        }
       } while (0);
       HEAP32[$24 >> 2] = $54; //@line 2987
      }
      __ZN4mbed6Ticker5setupEy($16, $20, $21); //@line 2989
      $55 = HEAP32[$17 >> 2] | 0; //@line 2990
      if ($55 | 0) {
       $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 2994
       $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2995
       FUNCTION_TABLE_vi[$58 & 1023]($1); //@line 2996
       if (___async) {
        HEAP32[$AsyncCtx8 >> 2] = 134; //@line 2999
        HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 3001
        sp = STACKTOP; //@line 3002
        STACKTOP = sp; //@line 3003
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx8 | 0); //@line 3005
        break;
       }
      }
     }
    }
   } while (0);
   $61 = HEAP32[$0 + 784 >> 2] | 0; //@line 3013
   if (!$61) {
    STACKTOP = sp; //@line 3016
    return;
   }
   $64 = HEAP32[$61 + 60 >> 2] | 0; //@line 3019
   if (!$64) {
    STACKTOP = sp; //@line 3022
    return;
   }
   $67 = HEAP32[$64 >> 2] | 0; //@line 3025
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3026
   FUNCTION_TABLE_vi[$67 & 1023]($61 + 48 | 0); //@line 3027
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 135; //@line 3030
    sp = STACKTOP; //@line 3031
    STACKTOP = sp; //@line 3032
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3034
   STACKTOP = sp; //@line 3035
   return;
  }
 case 2:
  {
   HEAP8[$4 >> 0] = 0; //@line 3039
   $69 = HEAP32[$0 + 784 >> 2] | 0; //@line 3041
   if (!$69) {
    STACKTOP = sp; //@line 3044
    return;
   }
   $72 = HEAP32[$69 + 28 >> 2] | 0; //@line 3047
   if (!$72) {
    STACKTOP = sp; //@line 3050
    return;
   }
   $75 = HEAP32[$72 >> 2] | 0; //@line 3053
   $AsyncCtx14 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3054
   FUNCTION_TABLE_vi[$75 & 1023]($69 + 16 | 0); //@line 3055
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 136; //@line 3058
    sp = STACKTOP; //@line 3059
    STACKTOP = sp; //@line 3060
    return;
   }
   _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3062
   STACKTOP = sp; //@line 3063
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 3067
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_174($0) {
 $0 = $0 | 0;
 var $$pre121 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 34440
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34442
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34444
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34448
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34450
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34452
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34454
 $$pre121 = HEAP32[$4 >> 2] | 0; //@line 34455
 if ($$pre121 | 0) {
  $17 = HEAP32[$$pre121 + 4 >> 2] | 0; //@line 34459
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 34460
  FUNCTION_TABLE_vii[$17 & 31]($14, $8); //@line 34461
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 34464
   $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 34465
   HEAP32[$18 >> 2] = $2; //@line 34466
   $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 34467
   HEAP32[$19 >> 2] = $4; //@line 34468
   $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 34469
   HEAP32[$20 >> 2] = $6; //@line 34470
   $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 34471
   HEAP32[$21 >> 2] = $8; //@line 34472
   $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 34473
   HEAP32[$22 >> 2] = $10; //@line 34474
   $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 34475
   HEAP32[$23 >> 2] = $12; //@line 34476
   sp = STACKTOP; //@line 34477
   return;
  }
  ___async_unwind = 0; //@line 34480
  HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 34481
  $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 34482
  HEAP32[$18 >> 2] = $2; //@line 34483
  $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 34484
  HEAP32[$19 >> 2] = $4; //@line 34485
  $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 34486
  HEAP32[$20 >> 2] = $6; //@line 34487
  $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 34488
  HEAP32[$21 >> 2] = $8; //@line 34489
  $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 34490
  HEAP32[$22 >> 2] = $10; //@line 34491
  $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 34492
  HEAP32[$23 >> 2] = $12; //@line 34493
  sp = STACKTOP; //@line 34494
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 34497
 $24 = $10 + 12 | 0; //@line 34498
 HEAP32[$10 >> 2] = 581; //@line 34499
 HEAP32[$10 + 4 >> 2] = 0; //@line 34501
 HEAP32[$10 + 8 >> 2] = $12; //@line 34503
 HEAP32[$24 >> 2] = 848; //@line 34504
 $25 = $12 + 1260 | 0; //@line 34505
 if (($25 | 0) == ($10 | 0)) {
  $44 = HEAP32[214] | 0; //@line 34509
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 34510
  FUNCTION_TABLE_vi[$44 & 1023]($10); //@line 34511
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 34514
   $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 34515
   HEAP32[$45 >> 2] = $10; //@line 34516
   $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 34517
   HEAP32[$46 >> 2] = $2; //@line 34518
   sp = STACKTOP; //@line 34519
   return;
  }
  ___async_unwind = 0; //@line 34522
  HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 34523
  $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 34524
  HEAP32[$45 >> 2] = $10; //@line 34525
  $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 34526
  HEAP32[$46 >> 2] = $2; //@line 34527
  sp = STACKTOP; //@line 34528
  return;
 }
 $27 = $12 + 1272 | 0; //@line 34531
 $28 = HEAP32[$27 >> 2] | 0; //@line 34532
 if (!$28) {
  $38 = HEAP32[213] | 0; //@line 34536
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 34537
  FUNCTION_TABLE_vii[$38 & 31]($25, $10); //@line 34538
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 34541
   $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 34542
   HEAP32[$39 >> 2] = $24; //@line 34543
   $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 34544
   HEAP32[$40 >> 2] = $27; //@line 34545
   $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 34546
   HEAP32[$41 >> 2] = $10; //@line 34547
   $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 34548
   HEAP32[$42 >> 2] = $2; //@line 34549
   sp = STACKTOP; //@line 34550
   return;
  }
  ___async_unwind = 0; //@line 34553
  HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 34554
  $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 34555
  HEAP32[$39 >> 2] = $24; //@line 34556
  $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 34557
  HEAP32[$40 >> 2] = $27; //@line 34558
  $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 34559
  HEAP32[$41 >> 2] = $10; //@line 34560
  $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 34561
  HEAP32[$42 >> 2] = $2; //@line 34562
  sp = STACKTOP; //@line 34563
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 34567
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 34568
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 34569
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 34572
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 34573
   HEAP32[$32 >> 2] = $24; //@line 34574
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 34575
   HEAP32[$33 >> 2] = $27; //@line 34576
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 34577
   HEAP32[$34 >> 2] = $25; //@line 34578
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 34579
   HEAP32[$35 >> 2] = $10; //@line 34580
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 34581
   HEAP32[$36 >> 2] = $2; //@line 34582
   sp = STACKTOP; //@line 34583
   return;
  }
  ___async_unwind = 0; //@line 34586
  HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 34587
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 34588
  HEAP32[$32 >> 2] = $24; //@line 34589
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 34590
  HEAP32[$33 >> 2] = $27; //@line 34591
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 34592
  HEAP32[$34 >> 2] = $25; //@line 34593
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 34594
  HEAP32[$35 >> 2] = $10; //@line 34595
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 34596
  HEAP32[$36 >> 2] = $2; //@line 34597
  sp = STACKTOP; //@line 34598
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $67 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8485
 STACKTOP = STACKTOP + 48 | 0; //@line 8486
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8486
 $4 = sp + 16 | 0; //@line 8487
 $5 = sp; //@line 8488
 $6 = $1 + 12 | 0; //@line 8489
 $7 = HEAP32[$6 >> 2] | 0; //@line 8490
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 8494
   HEAP32[$9 >> 2] = 0; //@line 8495
   $30 = 0; //@line 8496
   $45 = $9; //@line 8496
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 8499
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8500
   FUNCTION_TABLE_vii[$11 & 31]($5, $1); //@line 8501
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 279; //@line 8504
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8506
    HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 8508
    HEAP8[$AsyncCtx + 9 >> 0] = $3; //@line 8510
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8512
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 8514
    HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 8516
    sp = STACKTOP; //@line 8517
    STACKTOP = sp; //@line 8518
    return 0; //@line 8518
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8520
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 8521
   $18 = $5 + 12 | 0; //@line 8522
   HEAP32[$18 >> 2] = $$pre$i; //@line 8523
   if (!$$pre$i) {
    $30 = 0; //@line 8526
    $45 = $18; //@line 8526
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8530
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8531
    FUNCTION_TABLE_vii[$21 & 31]($4, $5); //@line 8532
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 280; //@line 8535
     HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 8537
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 8539
     HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 8541
     HEAP8[$AsyncCtx2 + 13 >> 0] = $3; //@line 8543
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 8545
     HEAP32[$AsyncCtx2 + 20 >> 2] = $18; //@line 8547
     HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 8549
     sp = STACKTOP; //@line 8550
     STACKTOP = sp; //@line 8551
     return 0; //@line 8551
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8553
     $30 = HEAP32[$18 >> 2] | 0; //@line 8555
     $45 = $18; //@line 8555
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 8561
 HEAP32[$29 >> 2] = $30; //@line 8562
 $31 = $4 + 16 | 0; //@line 8563
 HEAP8[$31 >> 0] = $2; //@line 8564
 HEAP8[$4 + 17 >> 0] = $3; //@line 8566
 $33 = _equeue_alloc($0, 20) | 0; //@line 8567
 do {
  if (!$33) {
   $$0$i = 0; //@line 8571
  } else {
   $35 = HEAP32[$29 >> 2] | 0; //@line 8573
   do {
    if (!$35) {
     $49 = 0; //@line 8577
    } else {
     $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 8580
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8581
     FUNCTION_TABLE_vii[$38 & 31]($33, $4); //@line 8582
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 281; //@line 8585
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 8587
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 8589
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 8591
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8593
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 8595
      HEAP32[$AsyncCtx5 + 24 >> 2] = $45; //@line 8597
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 8599
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 8601
      sp = STACKTOP; //@line 8602
      STACKTOP = sp; //@line 8603
      return 0; //@line 8603
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8605
      $49 = HEAP32[$29 >> 2] | 0; //@line 8607
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $49; //@line 8613
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 8616
   _equeue_event_dtor($33, 282); //@line 8617
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8618
   $52 = _equeue_post($0, 283, $33) | 0; //@line 8619
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 284; //@line 8622
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 8624
    HEAP32[$AsyncCtx15 + 8 >> 2] = $45; //@line 8626
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 8628
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 8630
    sp = STACKTOP; //@line 8631
    STACKTOP = sp; //@line 8632
    return 0; //@line 8632
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8634
    $$0$i = $52; //@line 8635
    break;
   }
  }
 } while (0);
 $57 = HEAP32[$29 >> 2] | 0; //@line 8640
 do {
  if ($57 | 0) {
   $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 8645
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8646
   FUNCTION_TABLE_vi[$60 & 1023]($4); //@line 8647
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 285; //@line 8650
    HEAP32[$AsyncCtx8 + 4 >> 2] = $45; //@line 8652
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8654
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 8656
    sp = STACKTOP; //@line 8657
    STACKTOP = sp; //@line 8658
    return 0; //@line 8658
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8660
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$45 >> 2] | 0; //@line 8665
 if (!$64) {
  STACKTOP = sp; //@line 8668
  return $$0$i | 0; //@line 8668
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 8671
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8672
 FUNCTION_TABLE_vi[$67 & 1023]($5); //@line 8673
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 286; //@line 8676
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8678
  sp = STACKTOP; //@line 8679
  STACKTOP = sp; //@line 8680
  return 0; //@line 8680
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8682
 STACKTOP = sp; //@line 8683
 return $$0$i | 0; //@line 8683
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_455($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24068
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24070
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24072
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 24078
 $9 = $2 + 16 | 0; //@line 24079
 $10 = $2 + 28 | 0; //@line 24080
 $11 = HEAP32[$10 >> 2] | 0; //@line 24081
 if ($11 | 0) {
  $13 = $4 + 1896 | 0; //@line 24084
  if (($13 | 0) != ($9 | 0)) {
   $15 = $4 + 1908 | 0; //@line 24087
   $16 = HEAP32[$15 >> 2] | 0; //@line 24088
   if (!$16) {
    $27 = HEAP32[$11 + 4 >> 2] | 0; //@line 24092
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 24093
    FUNCTION_TABLE_vii[$27 & 31]($13, $9); //@line 24094
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 24097
     $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 24098
     HEAP32[$28 >> 2] = $10; //@line 24099
     $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 24100
     HEAP32[$29 >> 2] = $15; //@line 24101
     $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 24102
     HEAP32[$30 >> 2] = $2; //@line 24103
     $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 24104
     HEAP32[$31 >> 2] = $4; //@line 24105
     sp = STACKTOP; //@line 24106
     return;
    }
    ___async_unwind = 0; //@line 24109
    HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 24110
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 24111
    HEAP32[$28 >> 2] = $10; //@line 24112
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 24113
    HEAP32[$29 >> 2] = $15; //@line 24114
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 24115
    HEAP32[$30 >> 2] = $2; //@line 24116
    $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 24117
    HEAP32[$31 >> 2] = $4; //@line 24118
    sp = STACKTOP; //@line 24119
    return;
   } else {
    $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 24123
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 24124
    FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 24125
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 317; //@line 24128
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 24129
     HEAP32[$20 >> 2] = $10; //@line 24130
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 24131
     HEAP32[$21 >> 2] = $15; //@line 24132
     $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 24133
     HEAP32[$22 >> 2] = $13; //@line 24134
     $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 24135
     HEAP32[$23 >> 2] = $9; //@line 24136
     $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 24137
     HEAP32[$24 >> 2] = $2; //@line 24138
     $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 24139
     HEAP32[$25 >> 2] = $4; //@line 24140
     sp = STACKTOP; //@line 24141
     return;
    }
    ___async_unwind = 0; //@line 24144
    HEAP32[$ReallocAsyncCtx3 >> 2] = 317; //@line 24145
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 24146
    HEAP32[$20 >> 2] = $10; //@line 24147
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 24148
    HEAP32[$21 >> 2] = $15; //@line 24149
    $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 24150
    HEAP32[$22 >> 2] = $13; //@line 24151
    $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 24152
    HEAP32[$23 >> 2] = $9; //@line 24153
    $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 24154
    HEAP32[$24 >> 2] = $2; //@line 24155
    $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 24156
    HEAP32[$25 >> 2] = $4; //@line 24157
    sp = STACKTOP; //@line 24158
    return;
   }
  }
 }
 $32 = $2 + 32 | 0; //@line 24163
 $33 = $2 + 44 | 0; //@line 24164
 $34 = HEAP32[$33 >> 2] | 0; //@line 24165
 if (!$34) {
  return;
 }
 $36 = $4 + 1912 | 0; //@line 24170
 if (($36 | 0) == ($32 | 0)) {
  return;
 }
 $38 = $4 + 1924 | 0; //@line 24175
 $39 = HEAP32[$38 >> 2] | 0; //@line 24176
 if (!$39) {
  $48 = HEAP32[$34 + 4 >> 2] | 0; //@line 24180
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 24181
  FUNCTION_TABLE_vii[$48 & 31]($36, $32); //@line 24182
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24185
   $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 24186
   HEAP32[$49 >> 2] = $33; //@line 24187
   $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 24188
   HEAP32[$50 >> 2] = $38; //@line 24189
   sp = STACKTOP; //@line 24190
   return;
  }
  ___async_unwind = 0; //@line 24193
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24194
  $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 24195
  HEAP32[$49 >> 2] = $33; //@line 24196
  $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 24197
  HEAP32[$50 >> 2] = $38; //@line 24198
  sp = STACKTOP; //@line 24199
  return;
 } else {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 24203
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 24204
  FUNCTION_TABLE_vi[$42 & 1023]($36); //@line 24205
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 24208
   $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 24209
   HEAP32[$43 >> 2] = $33; //@line 24210
   $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 24211
   HEAP32[$44 >> 2] = $38; //@line 24212
   $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 24213
   HEAP32[$45 >> 2] = $36; //@line 24214
   $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 24215
   HEAP32[$46 >> 2] = $32; //@line 24216
   sp = STACKTOP; //@line 24217
   return;
  }
  ___async_unwind = 0; //@line 24220
  HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 24221
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 24222
  HEAP32[$43 >> 2] = $33; //@line 24223
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 24224
  HEAP32[$44 >> 2] = $38; //@line 24225
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 24226
  HEAP32[$45 >> 2] = $36; //@line 24227
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 24228
  HEAP32[$46 >> 2] = $32; //@line 24229
  sp = STACKTOP; //@line 24230
  return;
 }
}
function __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_raw_idx = 0, $34 = 0, $39 = 0, $40 = 0, $45 = 0, sp = 0;
 sp = STACKTOP; //@line 23173
 STACKTOP = STACKTOP + 16 | 0; //@line 23174
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23174
 $$sroa$5 = sp; //@line 23175
 L1 : do {
  if (!$1) {
   $$0 = -1003; //@line 23179
  } else {
   do {
    switch (HEAP32[$1 >> 2] | 0) {
    case 0:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 >> 2]; //@line 23187
      $$0 = 0; //@line 23188
      break L1;
      break;
     }
    case 1:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 12 >> 0] | 0; //@line 23196
      $$0 = 0; //@line 23197
      break L1;
      break;
     }
    case 2:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 796 >> 0] | 0; //@line 23205
      $$0 = 0; //@line 23206
      break L1;
      break;
     }
    case 3:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 588 >> 2]; //@line 23214
      $$0 = 0; //@line 23215
      break L1;
      break;
     }
    case 4:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 592 >> 2]; //@line 23223
      $$0 = 0; //@line 23224
      break L1;
      break;
     }
    case 5:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 552; //@line 23231
      $$0 = 0; //@line 23232
      break L1;
      break;
     }
    case 6:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 568; //@line 23239
      $$0 = 0; //@line 23240
      break L1;
      break;
     }
    case 7:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 8 >> 0] | 0; //@line 23248
      $$0 = 0; //@line 23249
      break L1;
      break;
     }
    case 8:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 9 >> 0] | 0; //@line 23257
      $$0 = 0; //@line 23258
      break L1;
      break;
     }
    case 9:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_phy_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23266
      $$0 = 0; //@line 23267
      break L1;
      break;
     }
    case 10:
     {
      $34 = $2 + 772 | 0; //@line 23274
      $39 = HEAP32[$34 + 4 >> 2] | 0; //@line 23279
      $40 = $1 + 4 | 0; //@line 23280
      HEAP32[$40 >> 2] = HEAP32[$34 >> 2]; //@line 23282
      HEAP32[$40 + 4 >> 2] = $39; //@line 23285
      $$0 = 0; //@line 23286
      break L1;
      break;
     }
    case 11:
     {
      $45 = __ZN7LoRaPHY24get_default_rx2_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23292
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY25get_default_rx2_frequencyEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23296
      HEAP8[$1 + 8 >> 0] = $45; //@line 23298
      $$sroa$5$0$$sroa_raw_idx = $1 + 9 | 0; //@line 23299
      HEAP8[$$sroa$5$0$$sroa_raw_idx >> 0] = HEAP8[$$sroa$5 >> 0] | 0; //@line 23300
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0; //@line 23300
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0; //@line 23300
      $$0 = 0; //@line 23301
      break L1;
      break;
     }
    case 13:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 23309
      $$0 = 0; //@line 23310
      break L1;
      break;
     }
    case 12:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 23318
      $$0 = 0; //@line 23319
      break L1;
      break;
     }
    case 14:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 768 >> 0] | 0; //@line 23327
      $$0 = 0; //@line 23328
      break L1;
      break;
     }
    case 15:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 748 >> 2]; //@line 23336
      $$0 = 0; //@line 23337
      break L1;
      break;
     }
    case 16:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 752 >> 2]; //@line 23345
      $$0 = 0; //@line 23346
      break L1;
      break;
     }
    case 17:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 756 >> 2]; //@line 23354
      $$0 = 0; //@line 23355
      break L1;
      break;
     }
    case 18:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 760 >> 2]; //@line 23363
      $$0 = 0; //@line 23364
      break L1;
      break;
     }
    case 19:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 764 >> 2]; //@line 23372
      $$0 = 0; //@line 23373
      break L1;
      break;
     }
    case 20:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23381
      $$0 = 0; //@line 23382
      break L1;
      break;
     }
    case 21:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 737 >> 0] | 0; //@line 23390
      $$0 = 0; //@line 23391
      break L1;
      break;
     }
    case 23:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY20get_default_tx_powerEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23399
      $$0 = 0; //@line 23400
      break L1;
      break;
     }
    case 22:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 736 >> 0] | 0; //@line 23408
      $$0 = 0; //@line 23409
      break L1;
      break;
     }
    case 24:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 596 >> 2]; //@line 23417
      $$0 = 0; //@line 23418
      break L1;
      break;
     }
    case 25:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 600 >> 2]; //@line 23426
      $$0 = 0; //@line 23427
      break L1;
      break;
     }
    case 26:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 848 >> 2]; //@line 23435
      $$0 = 0; //@line 23436
      break L1;
      break;
     }
    case 27:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 740 >> 2]; //@line 23444
      $$0 = 0; //@line 23445
      break L1;
      break;
     }
    case 28:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 744 >> 0] | 0; //@line 23453
      $$0 = 0; //@line 23454
      break L1;
      break;
     }
    case 29:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 788 >> 2]; //@line 23462
      $$0 = 0; //@line 23463
      break L1;
      break;
     }
    default:
     {
      $$0 = -1002; //@line 23468
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 STACKTOP = sp; //@line 23475
 return $$0 | 0; //@line 23475
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_361($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7580
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7582
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7584
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 7586
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 7588
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 7590
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 7594
 $15 = $4 + 12 | 0; //@line 7596
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 7597
 $16 = $4 + 16 | 0; //@line 7598
 HEAP8[$16 >> 0] = $6; //@line 7599
 HEAP8[$4 + 17 >> 0] = $8; //@line 7601
 $18 = _equeue_alloc($10, 20) | 0; //@line 7602
 if ($18 | 0) {
  $20 = HEAP32[$15 >> 2] | 0; //@line 7605
  if (!$20) {
   HEAP32[$18 + 12 >> 2] = 0; //@line 7609
   HEAP16[$18 + 16 >> 1] = HEAP16[$16 >> 1] | 0; //@line 7612
   _equeue_event_dtor($18, 282); //@line 7613
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 7614
   $35 = _equeue_post($10, 283, $18) | 0; //@line 7615
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 7618
    $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 7619
    HEAP32[$36 >> 2] = $15; //@line 7620
    $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 7621
    HEAP32[$37 >> 2] = $2; //@line 7622
    $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 7623
    HEAP32[$38 >> 2] = $4; //@line 7624
    $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 7625
    HEAP32[$39 >> 2] = $14; //@line 7626
    sp = STACKTOP; //@line 7627
    return;
   }
   HEAP32[___async_retval >> 2] = $35; //@line 7631
   ___async_unwind = 0; //@line 7632
   HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 7633
   $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 7634
   HEAP32[$36 >> 2] = $15; //@line 7635
   $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 7636
   HEAP32[$37 >> 2] = $2; //@line 7637
   $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 7638
   HEAP32[$38 >> 2] = $4; //@line 7639
   $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 7640
   HEAP32[$39 >> 2] = $14; //@line 7641
   sp = STACKTOP; //@line 7642
   return;
  } else {
   $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 7646
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 7647
   FUNCTION_TABLE_vii[$23 & 31]($18, $4); //@line 7648
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 7651
    $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 7652
    HEAP32[$24 >> 2] = $15; //@line 7653
    $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 7654
    HEAP32[$25 >> 2] = $18; //@line 7655
    $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 7656
    HEAP32[$26 >> 2] = $16; //@line 7657
    $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 7658
    HEAP32[$27 >> 2] = $10; //@line 7659
    $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 7660
    HEAP32[$28 >> 2] = $15; //@line 7661
    $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 7662
    HEAP32[$29 >> 2] = $2; //@line 7663
    $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 7664
    HEAP32[$30 >> 2] = $4; //@line 7665
    $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 7666
    HEAP32[$31 >> 2] = $14; //@line 7667
    sp = STACKTOP; //@line 7668
    return;
   }
   ___async_unwind = 0; //@line 7671
   HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 7672
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 7673
   HEAP32[$24 >> 2] = $15; //@line 7674
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 7675
   HEAP32[$25 >> 2] = $18; //@line 7676
   $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 7677
   HEAP32[$26 >> 2] = $16; //@line 7678
   $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 7679
   HEAP32[$27 >> 2] = $10; //@line 7680
   $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 7681
   HEAP32[$28 >> 2] = $15; //@line 7682
   $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 7683
   HEAP32[$29 >> 2] = $2; //@line 7684
   $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 7685
   HEAP32[$30 >> 2] = $4; //@line 7686
   $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 7687
   HEAP32[$31 >> 2] = $14; //@line 7688
   sp = STACKTOP; //@line 7689
   return;
  }
 }
 $41 = HEAP32[$15 >> 2] | 0; //@line 7693
 if ($41 | 0) {
  $44 = HEAP32[$41 + 8 >> 2] | 0; //@line 7697
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 7698
  FUNCTION_TABLE_vi[$44 & 1023]($4); //@line 7699
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 7702
   $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 7703
   HEAP32[$45 >> 2] = $2; //@line 7704
   $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 7705
   HEAP32[$46 >> 2] = 0; //@line 7706
   $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 7707
   HEAP32[$47 >> 2] = $14; //@line 7708
   sp = STACKTOP; //@line 7709
   return;
  }
  ___async_unwind = 0; //@line 7712
  HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 7713
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 7714
  HEAP32[$45 >> 2] = $2; //@line 7715
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 7716
  HEAP32[$46 >> 2] = 0; //@line 7717
  $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 7718
  HEAP32[$47 >> 2] = $14; //@line 7719
  sp = STACKTOP; //@line 7720
  return;
 }
 $48 = HEAP32[$2 >> 2] | 0; //@line 7723
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 7727
  return;
 }
 $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 7731
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 7732
 FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 7733
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 7736
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 7737
  HEAP32[$52 >> 2] = 0; //@line 7738
  sp = STACKTOP; //@line 7739
  return;
 }
 ___async_unwind = 0; //@line 7742
 HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 7743
 $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 7744
 HEAP32[$52 >> 2] = 0; //@line 7745
 sp = STACKTOP; //@line 7746
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $20 = 0, $34 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 2249
 STACKTOP = STACKTOP + 64 | 0; //@line 2250
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 2250
 $vararg_buffer12 = sp + 48 | 0; //@line 2251
 $vararg_buffer10 = sp + 40 | 0; //@line 2252
 $vararg_buffer7 = sp + 32 | 0; //@line 2253
 $vararg_buffer5 = sp + 24 | 0; //@line 2254
 $vararg_buffer1 = sp + 8 | 0; //@line 2255
 _printf(10904, sp) | 0; //@line 2257
 $5 = $3 & 65535; //@line 2259
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 2260
 HEAP32[$vararg_buffer1 + 4 >> 2] = $2 << 24 >> 24; //@line 2262
 HEAP32[$vararg_buffer1 + 8 >> 2] = $5; //@line 2264
 _printf(10918, $vararg_buffer1) | 0; //@line 2265
 $AsyncCtx27 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2266
 _putchar(10) | 0; //@line 2267
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 106; //@line 2270
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 2272
  HEAP32[$AsyncCtx27 + 8 >> 2] = $1; //@line 2274
  HEAP8[$AsyncCtx27 + 12 >> 0] = $2; //@line 2276
  HEAP32[$AsyncCtx27 + 16 >> 2] = $5; //@line 2278
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer5; //@line 2280
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer5; //@line 2282
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 2284
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer7; //@line 2286
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 2288
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer10; //@line 2290
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer12; //@line 2292
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer12; //@line 2294
  sp = STACKTOP; //@line 2295
  STACKTOP = sp; //@line 2296
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 2298
 $20 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 2301
 $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 2302
 FUNCTION_TABLE_vii[$20 & 31]($0, $1); //@line 2303
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 107; //@line 2306
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2308
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 2310
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 2312
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer5; //@line 2314
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 2316
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer7; //@line 2318
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer7; //@line 2320
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer10; //@line 2322
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer10; //@line 2324
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer12; //@line 2326
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer12; //@line 2328
  sp = STACKTOP; //@line 2329
  STACKTOP = sp; //@line 2330
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2332
 $34 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 2335
 $AsyncCtx16 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2336
 FUNCTION_TABLE_viiiiiiiiiiiiii[$34 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $5); //@line 2337
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 108; //@line 2340
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 2342
  HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer5; //@line 2344
  HEAP32[$AsyncCtx16 + 12 >> 2] = $vararg_buffer5; //@line 2346
  HEAP32[$AsyncCtx16 + 16 >> 2] = $vararg_buffer7; //@line 2348
  HEAP32[$AsyncCtx16 + 20 >> 2] = $vararg_buffer7; //@line 2350
  HEAP32[$AsyncCtx16 + 24 >> 2] = $vararg_buffer10; //@line 2352
  HEAP32[$AsyncCtx16 + 28 >> 2] = $vararg_buffer10; //@line 2354
  HEAP32[$AsyncCtx16 + 32 >> 2] = $vararg_buffer12; //@line 2356
  HEAP32[$AsyncCtx16 + 36 >> 2] = $vararg_buffer12; //@line 2358
  sp = STACKTOP; //@line 2359
  STACKTOP = sp; //@line 2360
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 2362
 HEAP8[$0 + 688 >> 0] = 2; //@line 2364
 _printf(10904, $vararg_buffer5) | 0; //@line 2365
 HEAP32[$vararg_buffer7 >> 2] = 3; //@line 2366
 _printf(10970, $vararg_buffer7) | 0; //@line 2367
 $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 2368
 _putchar(10) | 0; //@line 2369
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 109; //@line 2372
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 2374
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer10; //@line 2376
  HEAP32[$AsyncCtx23 + 12 >> 2] = $vararg_buffer10; //@line 2378
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer12; //@line 2380
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer12; //@line 2382
  sp = STACKTOP; //@line 2383
  STACKTOP = sp; //@line 2384
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 2386
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2387
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 2388
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 110; //@line 2391
  HEAP32[$AsyncCtx30 + 4 >> 2] = $vararg_buffer10; //@line 2393
  HEAP32[$AsyncCtx30 + 8 >> 2] = $vararg_buffer10; //@line 2395
  HEAP32[$AsyncCtx30 + 12 >> 2] = $vararg_buffer12; //@line 2397
  HEAP32[$AsyncCtx30 + 16 >> 2] = $vararg_buffer12; //@line 2399
  sp = STACKTOP; //@line 2400
  STACKTOP = sp; //@line 2401
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2403
 _printf(10904, $vararg_buffer10) | 0; //@line 2404
 HEAP32[$vararg_buffer12 >> 2] = 3; //@line 2405
 _printf(10999, $vararg_buffer12) | 0; //@line 2406
 $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2407
 _putchar(10) | 0; //@line 2408
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 111; //@line 2411
  sp = STACKTOP; //@line 2412
  STACKTOP = sp; //@line 2413
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 2415
  STACKTOP = sp; //@line 2416
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $5 = 0, $53 = 0, $56 = 0, $6 = 0, $60 = 0, $63 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8281
 STACKTOP = STACKTOP + 48 | 0; //@line 8282
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8282
 $3 = sp + 16 | 0; //@line 8283
 $4 = sp; //@line 8284
 $5 = $1 + 12 | 0; //@line 8285
 $6 = HEAP32[$5 >> 2] | 0; //@line 8286
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 8290
   HEAP32[$8 >> 2] = 0; //@line 8291
   $27 = 0; //@line 8292
   $41 = $8; //@line 8292
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 8295
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8296
   FUNCTION_TABLE_vii[$10 & 31]($4, $1); //@line 8297
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 271; //@line 8300
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8302
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8304
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 8306
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8308
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8310
    sp = STACKTOP; //@line 8311
    STACKTOP = sp; //@line 8312
    return 0; //@line 8312
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8314
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 8315
   $16 = $4 + 12 | 0; //@line 8316
   HEAP32[$16 >> 2] = $$pre$i; //@line 8317
   if (!$$pre$i) {
    $27 = 0; //@line 8320
    $41 = $16; //@line 8320
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8324
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8325
    FUNCTION_TABLE_vii[$19 & 31]($3, $4); //@line 8326
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 272; //@line 8329
     HEAP32[$AsyncCtx2 + 4 >> 2] = $16; //@line 8331
     HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 8333
     HEAP32[$AsyncCtx2 + 12 >> 2] = $4; //@line 8335
     HEAP32[$AsyncCtx2 + 16 >> 2] = $16; //@line 8337
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 8339
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 8341
     sp = STACKTOP; //@line 8342
     STACKTOP = sp; //@line 8343
     return 0; //@line 8343
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8345
     $27 = HEAP32[$16 >> 2] | 0; //@line 8347
     $41 = $16; //@line 8347
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 8353
 HEAP32[$26 >> 2] = $27; //@line 8354
 $28 = $3 + 16 | 0; //@line 8355
 HEAP32[$28 >> 2] = $2; //@line 8356
 $29 = _equeue_alloc($0, 20) | 0; //@line 8357
 do {
  if (!$29) {
   $$0$i = 0; //@line 8361
  } else {
   $31 = HEAP32[$26 >> 2] | 0; //@line 8363
   do {
    if (!$31) {
     $45 = 0; //@line 8367
    } else {
     $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 8370
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8371
     FUNCTION_TABLE_vii[$34 & 31]($29, $3); //@line 8372
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 273; //@line 8375
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 8377
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 8379
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 8381
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8383
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 8385
      HEAP32[$AsyncCtx5 + 24 >> 2] = $41; //@line 8387
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 8389
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 8391
      sp = STACKTOP; //@line 8392
      STACKTOP = sp; //@line 8393
      return 0; //@line 8393
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8395
      $45 = HEAP32[$26 >> 2] | 0; //@line 8397
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $45; //@line 8403
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 8406
   _equeue_event_dtor($29, 274); //@line 8407
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8408
   $48 = _equeue_post($0, 275, $29) | 0; //@line 8409
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 276; //@line 8412
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 8414
    HEAP32[$AsyncCtx15 + 8 >> 2] = $41; //@line 8416
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 8418
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 8420
    sp = STACKTOP; //@line 8421
    STACKTOP = sp; //@line 8422
    return 0; //@line 8422
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8424
    $$0$i = $48; //@line 8425
    break;
   }
  }
 } while (0);
 $53 = HEAP32[$26 >> 2] | 0; //@line 8430
 do {
  if ($53 | 0) {
   $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 8435
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8436
   FUNCTION_TABLE_vi[$56 & 1023]($3); //@line 8437
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 277; //@line 8440
    HEAP32[$AsyncCtx8 + 4 >> 2] = $41; //@line 8442
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8444
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 8446
    sp = STACKTOP; //@line 8447
    STACKTOP = sp; //@line 8448
    return 0; //@line 8448
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8450
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$41 >> 2] | 0; //@line 8455
 if (!$60) {
  STACKTOP = sp; //@line 8458
  return $$0$i | 0; //@line 8458
 }
 $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 8461
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8462
 FUNCTION_TABLE_vi[$63 & 1023]($4); //@line 8463
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 278; //@line 8466
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8468
  sp = STACKTOP; //@line 8469
  STACKTOP = sp; //@line 8470
  return 0; //@line 8470
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8472
 STACKTOP = sp; //@line 8473
 return $$0$i | 0; //@line 8473
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_170($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 33751
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33755
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33757
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33759
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33761
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33763
 $13 = $4 + 12 | 0; //@line 33764
 HEAP32[$4 >> 2] = 573; //@line 33765
 HEAP32[$4 + 4 >> 2] = 0; //@line 33767
 HEAP32[$4 + 8 >> 2] = $6; //@line 33769
 HEAP32[$13 >> 2] = 848; //@line 33770
 $14 = $6 + 1276 | 0; //@line 33771
 if (($14 | 0) == ($4 | 0)) {
  $39 = HEAP32[214] | 0; //@line 33775
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 33776
  FUNCTION_TABLE_vi[$39 & 1023]($4); //@line 33777
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 33780
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 33781
   HEAP32[$40 >> 2] = $8; //@line 33782
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 33783
   HEAP32[$41 >> 2] = $10; //@line 33784
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 33785
   HEAP32[$42 >> 2] = $6; //@line 33786
   $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 33787
   HEAP32[$43 >> 2] = $4; //@line 33788
   $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 33789
   HEAP32[$44 >> 2] = $12; //@line 33790
   sp = STACKTOP; //@line 33791
   return;
  }
  ___async_unwind = 0; //@line 33794
  HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 33795
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 33796
  HEAP32[$40 >> 2] = $8; //@line 33797
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 33798
  HEAP32[$41 >> 2] = $10; //@line 33799
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 33800
  HEAP32[$42 >> 2] = $6; //@line 33801
  $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 33802
  HEAP32[$43 >> 2] = $4; //@line 33803
  $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 33804
  HEAP32[$44 >> 2] = $12; //@line 33805
  sp = STACKTOP; //@line 33806
  return;
 }
 $16 = $6 + 1288 | 0; //@line 33809
 $17 = HEAP32[$16 >> 2] | 0; //@line 33810
 if (!$17) {
  $30 = HEAP32[213] | 0; //@line 33814
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 33815
  FUNCTION_TABLE_vii[$30 & 31]($14, $4); //@line 33816
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 33819
   $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 33820
   HEAP32[$31 >> 2] = $4; //@line 33821
   $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 33822
   HEAP32[$32 >> 2] = $8; //@line 33823
   $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 33824
   HEAP32[$33 >> 2] = $10; //@line 33825
   $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 33826
   HEAP32[$34 >> 2] = $6; //@line 33827
   $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 33828
   HEAP32[$35 >> 2] = $13; //@line 33829
   $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 33830
   HEAP32[$36 >> 2] = $16; //@line 33831
   $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 33832
   HEAP32[$37 >> 2] = $12; //@line 33833
   sp = STACKTOP; //@line 33834
   return;
  }
  ___async_unwind = 0; //@line 33837
  HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 33838
  $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 33839
  HEAP32[$31 >> 2] = $4; //@line 33840
  $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 33841
  HEAP32[$32 >> 2] = $8; //@line 33842
  $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 33843
  HEAP32[$33 >> 2] = $10; //@line 33844
  $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 33845
  HEAP32[$34 >> 2] = $6; //@line 33846
  $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 33847
  HEAP32[$35 >> 2] = $13; //@line 33848
  $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 33849
  HEAP32[$36 >> 2] = $16; //@line 33850
  $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 33851
  HEAP32[$37 >> 2] = $12; //@line 33852
  sp = STACKTOP; //@line 33853
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 33857
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 33858
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 33859
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 33862
   $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 33863
   HEAP32[$21 >> 2] = $4; //@line 33864
   $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 33865
   HEAP32[$22 >> 2] = $16; //@line 33866
   $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 33867
   HEAP32[$23 >> 2] = $14; //@line 33868
   $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 33869
   HEAP32[$24 >> 2] = $13; //@line 33870
   $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 33871
   HEAP32[$25 >> 2] = $8; //@line 33872
   $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 33873
   HEAP32[$26 >> 2] = $10; //@line 33874
   $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 33875
   HEAP32[$27 >> 2] = $6; //@line 33876
   $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 33877
   HEAP32[$28 >> 2] = $12; //@line 33878
   sp = STACKTOP; //@line 33879
   return;
  }
  ___async_unwind = 0; //@line 33882
  HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 33883
  $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 33884
  HEAP32[$21 >> 2] = $4; //@line 33885
  $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 33886
  HEAP32[$22 >> 2] = $16; //@line 33887
  $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 33888
  HEAP32[$23 >> 2] = $14; //@line 33889
  $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 33890
  HEAP32[$24 >> 2] = $13; //@line 33891
  $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 33892
  HEAP32[$25 >> 2] = $8; //@line 33893
  $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 33894
  HEAP32[$26 >> 2] = $10; //@line 33895
  $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 33896
  HEAP32[$27 >> 2] = $6; //@line 33897
  $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 33898
  HEAP32[$28 >> 2] = $12; //@line 33899
  sp = STACKTOP; //@line 33900
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_379($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9165
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9169
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9171
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9173
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9175
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9177
 $13 = $4 + 12 | 0; //@line 9179
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9180
 $14 = $4 + 16 | 0; //@line 9181
 HEAP32[$14 >> 2] = $10; //@line 9182
 $15 = _equeue_alloc($12, 20) | 0; //@line 9183
 if ($15 | 0) {
  $17 = HEAP32[$13 >> 2] | 0; //@line 9186
  if (!$17) {
   HEAP32[$15 + 12 >> 2] = 0; //@line 9190
   HEAP32[$15 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 9193
   _equeue_event_dtor($15, 274); //@line 9194
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 9195
   $32 = _equeue_post($12, 275, $15) | 0; //@line 9196
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 9199
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 9200
    HEAP32[$33 >> 2] = $13; //@line 9201
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 9202
    HEAP32[$34 >> 2] = $8; //@line 9203
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 9204
    HEAP32[$35 >> 2] = $4; //@line 9205
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 9206
    HEAP32[$36 >> 2] = $6; //@line 9207
    sp = STACKTOP; //@line 9208
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 9212
   ___async_unwind = 0; //@line 9213
   HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 9214
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 9215
   HEAP32[$33 >> 2] = $13; //@line 9216
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 9217
   HEAP32[$34 >> 2] = $8; //@line 9218
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 9219
   HEAP32[$35 >> 2] = $4; //@line 9220
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 9221
   HEAP32[$36 >> 2] = $6; //@line 9222
   sp = STACKTOP; //@line 9223
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 9227
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 9228
   FUNCTION_TABLE_vii[$20 & 31]($15, $4); //@line 9229
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 9232
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 9233
    HEAP32[$21 >> 2] = $13; //@line 9234
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 9235
    HEAP32[$22 >> 2] = $15; //@line 9236
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 9237
    HEAP32[$23 >> 2] = $14; //@line 9238
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 9239
    HEAP32[$24 >> 2] = $12; //@line 9240
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 9241
    HEAP32[$25 >> 2] = $13; //@line 9242
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 9243
    HEAP32[$26 >> 2] = $8; //@line 9244
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 9245
    HEAP32[$27 >> 2] = $4; //@line 9246
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 9247
    HEAP32[$28 >> 2] = $6; //@line 9248
    sp = STACKTOP; //@line 9249
    return;
   }
   ___async_unwind = 0; //@line 9252
   HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 9253
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 9254
   HEAP32[$21 >> 2] = $13; //@line 9255
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 9256
   HEAP32[$22 >> 2] = $15; //@line 9257
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 9258
   HEAP32[$23 >> 2] = $14; //@line 9259
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 9260
   HEAP32[$24 >> 2] = $12; //@line 9261
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 9262
   HEAP32[$25 >> 2] = $13; //@line 9263
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 9264
   HEAP32[$26 >> 2] = $8; //@line 9265
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 9266
   HEAP32[$27 >> 2] = $4; //@line 9267
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 9268
   HEAP32[$28 >> 2] = $6; //@line 9269
   sp = STACKTOP; //@line 9270
   return;
  }
 }
 $38 = HEAP32[$13 >> 2] | 0; //@line 9274
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 9278
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 9279
  FUNCTION_TABLE_vi[$41 & 1023]($4); //@line 9280
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 9283
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 9284
   HEAP32[$42 >> 2] = $8; //@line 9285
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 9286
   HEAP32[$43 >> 2] = 0; //@line 9287
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 9288
   HEAP32[$44 >> 2] = $6; //@line 9289
   sp = STACKTOP; //@line 9290
   return;
  }
  ___async_unwind = 0; //@line 9293
  HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 9294
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 9295
  HEAP32[$42 >> 2] = $8; //@line 9296
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 9297
  HEAP32[$43 >> 2] = 0; //@line 9298
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 9299
  HEAP32[$44 >> 2] = $6; //@line 9300
  sp = STACKTOP; //@line 9301
  return;
 }
 $45 = HEAP32[$8 >> 2] | 0; //@line 9304
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 9308
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 9312
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 9313
 FUNCTION_TABLE_vi[$48 & 1023]($6); //@line 9314
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 9317
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 9318
  HEAP32[$49 >> 2] = 0; //@line 9319
  sp = STACKTOP; //@line 9320
  return;
 }
 ___async_unwind = 0; //@line 9323
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 9324
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 9325
 HEAP32[$49 >> 2] = 0; //@line 9326
 sp = STACKTOP; //@line 9327
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_473($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27320
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27322
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27324
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27326
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 27331
  _mbed_assert_internal(12851, 12860, 217); //@line 27332
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 475; //@line 27335
   $9 = $ReallocAsyncCtx16 + 4 | 0; //@line 27336
   HEAP32[$9 >> 2] = $2; //@line 27337
   $10 = $ReallocAsyncCtx16 + 8 | 0; //@line 27338
   HEAP32[$10 >> 2] = $4; //@line 27339
   $11 = $ReallocAsyncCtx16 + 12 | 0; //@line 27340
   HEAP32[$11 >> 2] = $6; //@line 27341
   sp = STACKTOP; //@line 27342
   return;
  }
  ___async_unwind = 0; //@line 27345
  HEAP32[$ReallocAsyncCtx16 >> 2] = 475; //@line 27346
  $9 = $ReallocAsyncCtx16 + 4 | 0; //@line 27347
  HEAP32[$9 >> 2] = $2; //@line 27348
  $10 = $ReallocAsyncCtx16 + 8 | 0; //@line 27349
  HEAP32[$10 >> 2] = $4; //@line 27350
  $11 = $ReallocAsyncCtx16 + 12 | 0; //@line 27351
  HEAP32[$11 >> 2] = $6; //@line 27352
  sp = STACKTOP; //@line 27353
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 27357
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 27358
 if (!($$pre17 & 4)) {
  $16 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27363
  $17 = $16 + 16 | 0; //@line 27364
  $19 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 27366
  $20 = $16 + 28 | 0; //@line 27367
  $21 = HEAP32[$20 >> 2] | 0; //@line 27368
  if (!$21) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 27371
   _mbed_assert_internal(15061, 15066, 1102); //@line 27372
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 27375
    $23 = $ReallocAsyncCtx15 + 4 | 0; //@line 27376
    HEAP32[$23 >> 2] = $20; //@line 27377
    $24 = $ReallocAsyncCtx15 + 8 | 0; //@line 27378
    HEAP32[$24 >> 2] = $17; //@line 27379
    $25 = $ReallocAsyncCtx15 + 12 | 0; //@line 27380
    HEAP32[$25 >> 2] = $19; //@line 27381
    $26 = $ReallocAsyncCtx15 + 16 | 0; //@line 27382
    HEAP32[$26 >> 2] = $2; //@line 27383
    $27 = $ReallocAsyncCtx15 + 20 | 0; //@line 27384
    HEAP32[$27 >> 2] = $4; //@line 27385
    sp = STACKTOP; //@line 27386
    return;
   }
   ___async_unwind = 0; //@line 27389
   HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 27390
   $23 = $ReallocAsyncCtx15 + 4 | 0; //@line 27391
   HEAP32[$23 >> 2] = $20; //@line 27392
   $24 = $ReallocAsyncCtx15 + 8 | 0; //@line 27393
   HEAP32[$24 >> 2] = $17; //@line 27394
   $25 = $ReallocAsyncCtx15 + 12 | 0; //@line 27395
   HEAP32[$25 >> 2] = $19; //@line 27396
   $26 = $ReallocAsyncCtx15 + 16 | 0; //@line 27397
   HEAP32[$26 >> 2] = $2; //@line 27398
   $27 = $ReallocAsyncCtx15 + 20 | 0; //@line 27399
   HEAP32[$27 >> 2] = $4; //@line 27400
   sp = STACKTOP; //@line 27401
   return;
  } else {
   $28 = HEAP32[$21 >> 2] | 0; //@line 27404
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27405
   FUNCTION_TABLE_vii[$28 & 31]($17, $19); //@line 27406
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 27409
    $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 27410
    HEAP32[$29 >> 2] = $2; //@line 27411
    $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 27412
    HEAP32[$30 >> 2] = $4; //@line 27413
    sp = STACKTOP; //@line 27414
    return;
   }
   ___async_unwind = 0; //@line 27417
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 27418
   $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 27419
   HEAP32[$29 >> 2] = $2; //@line 27420
   $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 27421
   HEAP32[$30 >> 2] = $4; //@line 27422
   sp = STACKTOP; //@line 27423
   return;
  }
 }
 $31 = $$pre17 & -5; //@line 27427
 HEAP8[$2 >> 0] = $31; //@line 27428
 if (!($31 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $31 & -17; //@line 27435
 $36 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27437
 $37 = $36 + 48 | 0; //@line 27438
 $39 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 27440
 $40 = $36 + 60 | 0; //@line 27441
 $41 = HEAP32[$40 >> 2] | 0; //@line 27442
 if (!$41) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 27445
  _mbed_assert_internal(15061, 15066, 1102); //@line 27446
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 27449
   $43 = $ReallocAsyncCtx14 + 4 | 0; //@line 27450
   HEAP32[$43 >> 2] = $40; //@line 27451
   $44 = $ReallocAsyncCtx14 + 8 | 0; //@line 27452
   HEAP32[$44 >> 2] = $37; //@line 27453
   $45 = $ReallocAsyncCtx14 + 12 | 0; //@line 27454
   HEAP32[$45 >> 2] = $39; //@line 27455
   sp = STACKTOP; //@line 27456
   return;
  }
  ___async_unwind = 0; //@line 27459
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 27460
  $43 = $ReallocAsyncCtx14 + 4 | 0; //@line 27461
  HEAP32[$43 >> 2] = $40; //@line 27462
  $44 = $ReallocAsyncCtx14 + 8 | 0; //@line 27463
  HEAP32[$44 >> 2] = $37; //@line 27464
  $45 = $ReallocAsyncCtx14 + 12 | 0; //@line 27465
  HEAP32[$45 >> 2] = $39; //@line 27466
  sp = STACKTOP; //@line 27467
  return;
 } else {
  $46 = HEAP32[$41 >> 2] | 0; //@line 27470
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27471
  FUNCTION_TABLE_vii[$46 & 31]($37, $39); //@line 27472
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 27475
   sp = STACKTOP; //@line 27476
   return;
  }
  ___async_unwind = 0; //@line 27479
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 27480
  sp = STACKTOP; //@line 27481
  return;
 }
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 36242
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36244
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36246
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36248
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36250
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36252
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36254
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36256
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36258
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 36260
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 36262
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 36264
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 36266
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 36268
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 36270
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 36272
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 36274
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36276
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 36279
  $84 = ___async_retval; //@line 36280
  HEAP32[$84 >> 2] = $$0; //@line 36281
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 36286
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 36290
   $68 = $14 + $$163 | 0; //@line 36291
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 36296
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 36301
   HEAP8[$16 + $$163 >> 0] = $75; //@line 36303
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 36309
   }
   $$163 = $$163 + 1 | 0; //@line 36311
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 36320
 $35 = $12 - $2 | 0; //@line 36321
 $51 = $14 + $2 | 0; //@line 36322
 $53 = $16 + $2 | 0; //@line 36323
 if (!$35) {
  $$0 = 0; //@line 36326
  $84 = ___async_retval; //@line 36327
  HEAP32[$84 >> 2] = $$0; //@line 36328
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 36332
 $$061 = 16; //@line 36333
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 36339
  $39 = $8 + 360 + $$061 | 0; //@line 36340
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 36342
  HEAP8[$39 >> 0] = $41; //@line 36343
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 36351
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 36352
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 694; //@line 36355
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 36356
  HEAP32[$44 >> 2] = $36; //@line 36357
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 36358
  HEAP32[$45 >> 2] = $4; //@line 36359
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 36360
  HEAP32[$46 >> 2] = $6; //@line 36361
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 36362
  HEAP32[$47 >> 2] = $8; //@line 36363
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 36364
  HEAP32[$48 >> 2] = $10; //@line 36365
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 36366
  HEAP32[$49 >> 2] = $35; //@line 36367
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 36368
  HEAP32[$50 >> 2] = $51; //@line 36369
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 36370
  HEAP32[$52 >> 2] = $53; //@line 36371
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 36372
  HEAP32[$54 >> 2] = $18; //@line 36373
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 36374
  HEAP32[$55 >> 2] = $20; //@line 36375
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 36376
  HEAP32[$56 >> 2] = $22; //@line 36377
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 36378
  HEAP32[$57 >> 2] = $24; //@line 36379
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 36380
  HEAP32[$58 >> 2] = $26; //@line 36381
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 36382
  HEAP32[$59 >> 2] = $28; //@line 36383
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 36384
  HEAP32[$60 >> 2] = $30; //@line 36385
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 36386
  HEAP32[$61 >> 2] = $32; //@line 36387
  sp = STACKTOP; //@line 36388
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 36392
 ___async_unwind = 0; //@line 36393
 HEAP32[$ReallocAsyncCtx >> 2] = 694; //@line 36394
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 36395
 HEAP32[$44 >> 2] = $36; //@line 36396
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 36397
 HEAP32[$45 >> 2] = $4; //@line 36398
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 36399
 HEAP32[$46 >> 2] = $6; //@line 36400
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 36401
 HEAP32[$47 >> 2] = $8; //@line 36402
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 36403
 HEAP32[$48 >> 2] = $10; //@line 36404
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 36405
 HEAP32[$49 >> 2] = $35; //@line 36406
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 36407
 HEAP32[$50 >> 2] = $51; //@line 36408
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 36409
 HEAP32[$52 >> 2] = $53; //@line 36410
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 36411
 HEAP32[$54 >> 2] = $18; //@line 36412
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 36413
 HEAP32[$55 >> 2] = $20; //@line 36414
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 36415
 HEAP32[$56 >> 2] = $22; //@line 36416
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 36417
 HEAP32[$57 >> 2] = $24; //@line 36418
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 36419
 HEAP32[$58 >> 2] = $26; //@line 36420
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 36421
 HEAP32[$59 >> 2] = $28; //@line 36422
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 36423
 HEAP32[$60 >> 2] = $30; //@line 36424
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 36425
 HEAP32[$61 >> 2] = $32; //@line 36426
 sp = STACKTOP; //@line 36427
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_39($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 21913
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21917
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21919
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21921
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21923
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21925
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 21927
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21929
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21931
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21933
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21935
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21937
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21939
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21941
 $30 = HEAP8[$0 + 60 >> 0] & 1; //@line 21944
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 21946
 $32 = $4 + 944 | 0; //@line 21947
 HEAP8[$32 >> 0] = HEAP8[$32 >> 0] | 16; //@line 21950
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 21951
 $37 = $22 & 255; //@line 21954
 $38 = $4 + 638 | 0; //@line 21955
 if (__Z15decrypt_payloadPKhtS0_jhjPh($18 + $20 | 0, $37, $24, $26, 1, $28, $38) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 13; //@line 21961
 }
 if ($30) {
  $$3$off0204 = 6; //@line 21964
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 12 >> 2] = $38; //@line 21968
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 16 >> 1] = $37; //@line 21971
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 18 >> 0] = 1; //@line 21974
  $52 = (__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 | 0; //@line 21978
  if ($14 & 32) {
   HEAP8[$52 >> 0] = 1; //@line 21980
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 28 >> 0] = 1; //@line 21983
   $55 = HEAP32[$8 >> 2] | 0; //@line 21984
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 21986
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($55, $4 + 1076 | 0); //@line 21987
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 21990
    $57 = $ReallocAsyncCtx23 + 4 | 0; //@line 21991
    HEAP32[$57 >> 2] = $4; //@line 21992
    $58 = $ReallocAsyncCtx23 + 8 | 0; //@line 21993
    HEAP32[$58 >> 2] = $8; //@line 21994
    $59 = $ReallocAsyncCtx23 + 12 | 0; //@line 21995
    HEAP32[$59 >> 2] = $10; //@line 21996
    $60 = $ReallocAsyncCtx23 + 16 | 0; //@line 21997
    HEAP32[$60 >> 2] = $12; //@line 21998
    sp = STACKTOP; //@line 21999
    return;
   }
   ___async_unwind = 0; //@line 22002
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 22003
   $57 = $ReallocAsyncCtx23 + 4 | 0; //@line 22004
   HEAP32[$57 >> 2] = $4; //@line 22005
   $58 = $ReallocAsyncCtx23 + 8 | 0; //@line 22006
   HEAP32[$58 >> 2] = $8; //@line 22007
   $59 = $ReallocAsyncCtx23 + 12 | 0; //@line 22008
   HEAP32[$59 >> 2] = $10; //@line 22009
   $60 = $ReallocAsyncCtx23 + 16 | 0; //@line 22010
   HEAP32[$60 >> 2] = $12; //@line 22011
   sp = STACKTOP; //@line 22012
   return;
  }
  HEAP8[$52 >> 0] = 0; //@line 22015
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $66 = HEAP32[$8 >> 2] | 0; //@line 22022
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 22024
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($66, $4 + 1076 | 0); //@line 22025
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 22028
    $68 = $ReallocAsyncCtx22 + 4 | 0; //@line 22029
    HEAP32[$68 >> 2] = $4; //@line 22030
    $69 = $ReallocAsyncCtx22 + 8 | 0; //@line 22031
    HEAP32[$69 >> 2] = $8; //@line 22032
    $70 = $ReallocAsyncCtx22 + 12 | 0; //@line 22033
    HEAP32[$70 >> 2] = $10; //@line 22034
    $71 = $ReallocAsyncCtx22 + 16 | 0; //@line 22035
    HEAP32[$71 >> 2] = $12; //@line 22036
    sp = STACKTOP; //@line 22037
    return;
   }
   ___async_unwind = 0; //@line 22040
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 22041
   $68 = $ReallocAsyncCtx22 + 4 | 0; //@line 22042
   HEAP32[$68 >> 2] = $4; //@line 22043
   $69 = $ReallocAsyncCtx22 + 8 | 0; //@line 22044
   HEAP32[$69 >> 2] = $8; //@line 22045
   $70 = $ReallocAsyncCtx22 + 12 | 0; //@line 22046
   HEAP32[$70 >> 2] = $10; //@line 22047
   $71 = $ReallocAsyncCtx22 + 16 | 0; //@line 22048
   HEAP32[$71 >> 2] = $12; //@line 22049
   sp = STACKTOP; //@line 22050
   return;
  } else {
   $$3$off0204 = 2; //@line 22053
  }
 }
 $72 = $4 + 944 | 0; //@line 22056
 HEAP8[$72 >> 0] = $$3$off0204 | HEAP8[$72 >> 0] & -7; //@line 22060
 $76 = $4 + 944 | 0; //@line 22061
 HEAP8[$76 >> 0] = HEAP8[$76 >> 0] | 32; //@line 22064
 $79 = HEAP32[$8 >> 2] | 0; //@line 22065
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 22067
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($79, $4 + 996 | 0, 1); //@line 22068
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 22071
  $81 = $ReallocAsyncCtx17 + 4 | 0; //@line 22072
  HEAP32[$81 >> 2] = $10; //@line 22073
  $82 = $ReallocAsyncCtx17 + 8 | 0; //@line 22074
  HEAP32[$82 >> 2] = $12; //@line 22075
  sp = STACKTOP; //@line 22076
  return;
 }
 ___async_unwind = 0; //@line 22079
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 22080
 $81 = $ReallocAsyncCtx17 + 4 | 0; //@line 22081
 HEAP32[$81 >> 2] = $10; //@line 22082
 $82 = $ReallocAsyncCtx17 + 8 | 0; //@line 22083
 HEAP32[$82 >> 2] = $12; //@line 22084
 sp = STACKTOP; //@line 22085
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $14 = 0, $15 = 0, $25 = 0, $29 = 0, $36 = 0, $40 = 0, $44 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14068
 STACKTOP = STACKTOP + 32 | 0; //@line 14069
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14069
 $$byval_copy = sp + 24 | 0; //@line 14070
 $vararg_buffer3 = sp + 16 | 0; //@line 14071
 $vararg_buffer1 = sp + 8 | 0; //@line 14072
 _printf(12967, sp) | 0; //@line 14074
 _printf(13195, $vararg_buffer1) | 0; //@line 14075
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14076
 _putchar(10) | 0; //@line 14077
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 432; //@line 14080
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14082
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 14084
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14086
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 14088
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14090
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 14092
  sp = STACKTOP; //@line 14093
  STACKTOP = sp; //@line 14094
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14096
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 14102
   _printf(12994, $$byval_copy) | 0; //@line 14103
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14104
   _putchar(10) | 0; //@line 14105
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 433; //@line 14108
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14110
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14112
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14114
    sp = STACKTOP; //@line 14115
    STACKTOP = sp; //@line 14116
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14118
   $14 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14120
   HEAP32[$vararg_buffer1 >> 2] = 361; //@line 14121
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14123
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14124
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14125
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14125
   $15 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($14, $0, $$byval_copy) | 0; //@line 14126
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 434; //@line 14129
    HEAP32[$AsyncCtx16 + 4 >> 2] = $vararg_buffer1; //@line 14131
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 14133
    sp = STACKTOP; //@line 14134
    STACKTOP = sp; //@line 14135
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 14137
   do {
    if (!$15) {
     $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14141
     _mbed_assert_internal(12851, 12860, 217); //@line 14142
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 435; //@line 14145
      HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer1; //@line 14147
      HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 14149
      sp = STACKTOP; //@line 14150
      STACKTOP = sp; //@line 14151
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 14153
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14159
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 24; //@line 14164
   } else {
    label = 23; //@line 14166
   }
  } else {
   $25 = HEAP32[$0 >> 2] | 0; //@line 14169
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14170
   __ZN7LoRaPHY18put_radio_to_sleepEv($25); //@line 14171
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 436; //@line 14174
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 14176
    sp = STACKTOP; //@line 14177
    STACKTOP = sp; //@line 14178
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14180
   $29 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 14186
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($29) {
     label = 23; //@line 14189
     break;
    } else {
     label = 24; //@line 14192
     break;
    }
   }
   if ($29) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 14200
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 14205
   $36 = $0 + 356 | 0; //@line 14206
   $40 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$36 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 14210
   if ($40 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 14215
    return;
   }
   $44 = HEAP32[$36 >> 2] | 0; //@line 14217
   $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14219
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($44, $0 + 1056 | 0); //@line 14220
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 437; //@line 14223
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 14225
    sp = STACKTOP; //@line 14226
    STACKTOP = sp; //@line 14227
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14229
    break;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 14238
  label = 24; //@line 14239
 }
 if ((label | 0) == 24) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 14245
 }
 $53 = $0 + 944 | 0; //@line 14247
 HEAP8[$53 >> 0] = HEAP8[$53 >> 0] | 32; //@line 14250
 STACKTOP = sp; //@line 14251
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_175($0) {
 $0 = $0 | 0;
 var $$pre$i$i50 = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 34607
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34609
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34615
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34617
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34619
 $$pre$i$i50 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 34620
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = $$pre$i$i50; //@line 34622
 if ($$pre$i$i50 | 0) {
  $16 = HEAP32[$$pre$i$i50 + 8 >> 2] | 0; //@line 34626
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 34627
  FUNCTION_TABLE_vi[$16 & 1023]($8); //@line 34628
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 34631
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 34632
   HEAP32[$17 >> 2] = $8; //@line 34633
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 34634
   HEAP32[$18 >> 2] = $10; //@line 34635
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 34636
   HEAP32[$19 >> 2] = $12; //@line 34637
   $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 34638
   HEAP32[$20 >> 2] = $2; //@line 34639
   sp = STACKTOP; //@line 34640
   return;
  }
  ___async_unwind = 0; //@line 34643
  HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 34644
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 34645
  HEAP32[$17 >> 2] = $8; //@line 34646
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 34647
  HEAP32[$18 >> 2] = $10; //@line 34648
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 34649
  HEAP32[$19 >> 2] = $12; //@line 34650
  $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 34651
  HEAP32[$20 >> 2] = $2; //@line 34652
  sp = STACKTOP; //@line 34653
  return;
 }
 $21 = $10 + 12 | 0; //@line 34656
 HEAP32[$10 >> 2] = 581; //@line 34657
 HEAP32[$10 + 4 >> 2] = 0; //@line 34659
 HEAP32[$10 + 8 >> 2] = $12; //@line 34661
 HEAP32[$21 >> 2] = 848; //@line 34662
 $22 = $12 + 1260 | 0; //@line 34663
 if (($22 | 0) == ($10 | 0)) {
  $41 = HEAP32[214] | 0; //@line 34667
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 34668
  FUNCTION_TABLE_vi[$41 & 1023]($10); //@line 34669
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 34672
   $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 34673
   HEAP32[$42 >> 2] = $10; //@line 34674
   $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 34675
   HEAP32[$43 >> 2] = $2; //@line 34676
   sp = STACKTOP; //@line 34677
   return;
  }
  ___async_unwind = 0; //@line 34680
  HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 34681
  $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 34682
  HEAP32[$42 >> 2] = $10; //@line 34683
  $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 34684
  HEAP32[$43 >> 2] = $2; //@line 34685
  sp = STACKTOP; //@line 34686
  return;
 }
 $24 = $12 + 1272 | 0; //@line 34689
 $25 = HEAP32[$24 >> 2] | 0; //@line 34690
 if (!$25) {
  $35 = HEAP32[213] | 0; //@line 34694
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 34695
  FUNCTION_TABLE_vii[$35 & 31]($22, $10); //@line 34696
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 34699
   $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 34700
   HEAP32[$36 >> 2] = $21; //@line 34701
   $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 34702
   HEAP32[$37 >> 2] = $24; //@line 34703
   $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 34704
   HEAP32[$38 >> 2] = $10; //@line 34705
   $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 34706
   HEAP32[$39 >> 2] = $2; //@line 34707
   sp = STACKTOP; //@line 34708
   return;
  }
  ___async_unwind = 0; //@line 34711
  HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 34712
  $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 34713
  HEAP32[$36 >> 2] = $21; //@line 34714
  $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 34715
  HEAP32[$37 >> 2] = $24; //@line 34716
  $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 34717
  HEAP32[$38 >> 2] = $10; //@line 34718
  $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 34719
  HEAP32[$39 >> 2] = $2; //@line 34720
  sp = STACKTOP; //@line 34721
  return;
 } else {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 34725
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 34726
  FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 34727
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 34730
   $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 34731
   HEAP32[$29 >> 2] = $21; //@line 34732
   $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 34733
   HEAP32[$30 >> 2] = $24; //@line 34734
   $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 34735
   HEAP32[$31 >> 2] = $22; //@line 34736
   $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 34737
   HEAP32[$32 >> 2] = $10; //@line 34738
   $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 34739
   HEAP32[$33 >> 2] = $2; //@line 34740
   sp = STACKTOP; //@line 34741
   return;
  }
  ___async_unwind = 0; //@line 34744
  HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 34745
  $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 34746
  HEAP32[$29 >> 2] = $21; //@line 34747
  $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 34748
  HEAP32[$30 >> 2] = $24; //@line 34749
  $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 34750
  HEAP32[$31 >> 2] = $22; //@line 34751
  $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 34752
  HEAP32[$32 >> 2] = $10; //@line 34753
  $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 34754
  HEAP32[$33 >> 2] = $2; //@line 34755
  sp = STACKTOP; //@line 34756
  return;
 }
}
function _initialize__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26379
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26381
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26383
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26385
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26387
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 26388
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 26391
  _mbed_assert_internal(14513, 14515, 41); //@line 26392
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 699; //@line 26395
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 26396
   HEAP32[$10 >> 2] = $4; //@line 26397
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 26398
   HEAP32[$11 >> 2] = $2; //@line 26399
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 26400
   HEAP32[$12 >> 2] = $6; //@line 26401
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 26402
   HEAP32[$13 >> 2] = $AsyncRetVal; //@line 26403
   sp = STACKTOP; //@line 26404
   return;
  }
  ___async_unwind = 0; //@line 26407
  HEAP32[$ReallocAsyncCtx7 >> 2] = 699; //@line 26408
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 26409
  HEAP32[$10 >> 2] = $4; //@line 26410
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 26411
  HEAP32[$11 >> 2] = $2; //@line 26412
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 26413
  HEAP32[$12 >> 2] = $6; //@line 26414
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 26415
  HEAP32[$13 >> 2] = $AsyncRetVal; //@line 26416
  sp = STACKTOP; //@line 26417
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 26421
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26425
  _mbed_assert_internal(14513, 14515, 47); //@line 26426
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 700; //@line 26429
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 26430
   HEAP32[$17 >> 2] = $8; //@line 26431
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 26432
   HEAP32[$18 >> 2] = $4; //@line 26433
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 26434
   HEAP32[$19 >> 2] = $6; //@line 26435
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 26436
   HEAP32[$20 >> 2] = $2; //@line 26437
   sp = STACKTOP; //@line 26438
   return;
  }
  ___async_unwind = 0; //@line 26441
  HEAP32[$ReallocAsyncCtx6 >> 2] = 700; //@line 26442
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 26443
  HEAP32[$17 >> 2] = $8; //@line 26444
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 26445
  HEAP32[$18 >> 2] = $4; //@line 26446
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 26447
  HEAP32[$19 >> 2] = $6; //@line 26448
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 26449
  HEAP32[$20 >> 2] = $2; //@line 26450
  sp = STACKTOP; //@line 26451
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 26455
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 26456
  $24 = tempRet0; //@line 26457
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 26458
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 26460
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 26462
  $30 = tempRet0; //@line 26463
  $31 = HEAP32[$4 >> 2] | 0; //@line 26464
  HEAP32[$31 >> 2] = 0; //@line 26465
  HEAP32[$31 + 4 >> 2] = 0; //@line 26467
  $35 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 26470
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 26471
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 26472
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 26475
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 26476
   HEAP32[$37 >> 2] = $4; //@line 26477
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 26478
   HEAP32[$38 >> 2] = $8; //@line 26479
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 26480
   HEAP32[$39 >> 2] = $15; //@line 26481
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 26482
   HEAP32[$40 >> 2] = $22; //@line 26483
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 26484
   $42 = $41; //@line 26485
   $43 = $42; //@line 26486
   HEAP32[$43 >> 2] = $29; //@line 26487
   $44 = $42 + 4 | 0; //@line 26488
   $45 = $44; //@line 26489
   HEAP32[$45 >> 2] = $30; //@line 26490
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 26491
   HEAP32[$46 >> 2] = $6; //@line 26492
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 26493
   HEAP32[$47 >> 2] = $2; //@line 26494
   sp = STACKTOP; //@line 26495
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 26499
  ___async_unwind = 0; //@line 26500
  HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 26501
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 26502
  HEAP32[$37 >> 2] = $4; //@line 26503
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 26504
  HEAP32[$38 >> 2] = $8; //@line 26505
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 26506
  HEAP32[$39 >> 2] = $15; //@line 26507
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 26508
  HEAP32[$40 >> 2] = $22; //@line 26509
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 26510
  $42 = $41; //@line 26511
  $43 = $42; //@line 26512
  HEAP32[$43 >> 2] = $29; //@line 26513
  $44 = $42 + 4 | 0; //@line 26514
  $45 = $44; //@line 26515
  HEAP32[$45 >> 2] = $30; //@line 26516
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 26517
  HEAP32[$46 >> 2] = $6; //@line 26518
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 26519
  HEAP32[$47 >> 2] = $2; //@line 26520
  sp = STACKTOP; //@line 26521
  return;
 }
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1637
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 1642
 $3 = HEAP32[$2 >> 2] | 0; //@line 1643
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 1647
  HEAP8[$3 + 1 >> 0] = 0; //@line 1649
  HEAP8[$3 + 2 >> 0] = 0; //@line 1651
  HEAP8[$3 + 3 >> 0] = 0; //@line 1653
  HEAP8[$3 + 4 >> 0] = 0; //@line 1655
  HEAP8[$3 + 5 >> 0] = 0; //@line 1657
  HEAP8[$3 + 6 >> 0] = 0; //@line 1659
  HEAP8[$3 + 7 >> 0] = 0; //@line 1661
  HEAP8[$3 + 8 >> 0] = 0; //@line 1663
  HEAP8[$3 + 9 >> 0] = 0; //@line 1665
  HEAP8[$3 + 10 >> 0] = 0; //@line 1667
  HEAP8[$3 + 11 >> 0] = 0; //@line 1669
  HEAP8[$3 + 12 >> 0] = 0; //@line 1671
  HEAP8[$3 + 13 >> 0] = 0; //@line 1673
  HEAP8[$3 + 14 >> 0] = 0; //@line 1675
  HEAP8[$3 + 15 >> 0] = 0; //@line 1677
  HEAP8[$3 + 16 >> 0] = 0; //@line 1679
  HEAP8[$3 + 17 >> 0] = 0; //@line 1681
  HEAP8[$3 + 18 >> 0] = 0; //@line 1683
  HEAP8[$3 + 19 >> 0] = 0; //@line 1685
  HEAP8[$3 + 20 >> 0] = 0; //@line 1687
  HEAP8[$3 + 21 >> 0] = 0; //@line 1689
  HEAP8[$3 + 22 >> 0] = 0; //@line 1691
  HEAP8[$3 + 23 >> 0] = 0; //@line 1693
  HEAP8[$3 + 24 >> 0] = 0; //@line 1695
  HEAP8[$3 + 25 >> 0] = 0; //@line 1697
  HEAP8[$3 + 26 >> 0] = 0; //@line 1699
  HEAP8[$3 + 27 >> 0] = 0; //@line 1701
  HEAP8[$3 + 28 >> 0] = 0; //@line 1703
  HEAP8[$3 + 29 >> 0] = 0; //@line 1705
  HEAP8[$3 + 30 >> 0] = 0; //@line 1707
  HEAP8[$3 + 31 >> 0] = 0; //@line 1709
  HEAP8[$3 + 32 >> 0] = 0; //@line 1711
  HEAP8[$3 + 33 >> 0] = 0; //@line 1713
  HEAP8[$3 + 34 >> 0] = 0; //@line 1715
  HEAP8[$3 + 35 >> 0] = 0; //@line 1716
  _free(HEAP32[$2 >> 2] | 0); //@line 1718
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 1721
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 1729
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1730
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 1731
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 672; //@line 1734
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1736
    sp = STACKTOP; //@line 1737
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1740
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 1746
 HEAP8[$0 + 1 >> 0] = 0; //@line 1748
 HEAP8[$0 + 2 >> 0] = 0; //@line 1750
 $53 = $0 + 4 | 0; //@line 1751
 HEAP8[$0 + 3 >> 0] = 0; //@line 1752
 HEAP8[$53 >> 0] = 0; //@line 1754
 HEAP8[$53 + 1 >> 0] = 0; //@line 1756
 HEAP8[$53 + 2 >> 0] = 0; //@line 1758
 $57 = $53 + 4 | 0; //@line 1759
 HEAP8[$53 + 3 >> 0] = 0; //@line 1760
 HEAP8[$57 >> 0] = 0; //@line 1762
 HEAP8[$57 + 1 >> 0] = 0; //@line 1764
 HEAP8[$57 + 2 >> 0] = 0; //@line 1766
 $61 = $53 + 8 | 0; //@line 1767
 HEAP8[$57 + 3 >> 0] = 0; //@line 1768
 HEAP8[$61 >> 0] = 0; //@line 1770
 HEAP8[$61 + 1 >> 0] = 0; //@line 1772
 HEAP8[$61 + 2 >> 0] = 0; //@line 1774
 $65 = $53 + 12 | 0; //@line 1775
 HEAP8[$61 + 3 >> 0] = 0; //@line 1776
 HEAP8[$65 >> 0] = 0; //@line 1778
 HEAP8[$65 + 1 >> 0] = 0; //@line 1780
 HEAP8[$65 + 2 >> 0] = 0; //@line 1782
 $69 = $53 + 16 | 0; //@line 1783
 HEAP8[$65 + 3 >> 0] = 0; //@line 1784
 HEAP8[$69 >> 0] = 0; //@line 1786
 HEAP8[$69 + 1 >> 0] = 0; //@line 1788
 HEAP8[$69 + 2 >> 0] = 0; //@line 1790
 $73 = $53 + 20 | 0; //@line 1791
 HEAP8[$69 + 3 >> 0] = 0; //@line 1792
 HEAP8[$73 >> 0] = 0; //@line 1794
 HEAP8[$73 + 1 >> 0] = 0; //@line 1796
 HEAP8[$73 + 2 >> 0] = 0; //@line 1798
 $77 = $53 + 24 | 0; //@line 1799
 HEAP8[$73 + 3 >> 0] = 0; //@line 1800
 HEAP8[$77 >> 0] = 0; //@line 1802
 HEAP8[$77 + 1 >> 0] = 0; //@line 1804
 HEAP8[$77 + 2 >> 0] = 0; //@line 1806
 $81 = $53 + 28 | 0; //@line 1807
 HEAP8[$77 + 3 >> 0] = 0; //@line 1808
 HEAP8[$81 >> 0] = 0; //@line 1810
 HEAP8[$81 + 1 >> 0] = 0; //@line 1812
 HEAP8[$81 + 2 >> 0] = 0; //@line 1814
 $85 = $53 + 32 | 0; //@line 1815
 HEAP8[$81 + 3 >> 0] = 0; //@line 1816
 HEAP8[$85 >> 0] = 0; //@line 1818
 HEAP8[$85 + 1 >> 0] = 0; //@line 1820
 HEAP8[$85 + 2 >> 0] = 0; //@line 1822
 $89 = $53 + 36 | 0; //@line 1823
 HEAP8[$85 + 3 >> 0] = 0; //@line 1824
 HEAP8[$89 >> 0] = 0; //@line 1826
 HEAP8[$89 + 1 >> 0] = 0; //@line 1828
 HEAP8[$89 + 2 >> 0] = 0; //@line 1830
 $93 = $53 + 40 | 0; //@line 1831
 HEAP8[$89 + 3 >> 0] = 0; //@line 1832
 HEAP8[$93 >> 0] = 0; //@line 1834
 HEAP8[$93 + 1 >> 0] = 0; //@line 1836
 HEAP8[$93 + 2 >> 0] = 0; //@line 1838
 $97 = $53 + 44 | 0; //@line 1839
 HEAP8[$93 + 3 >> 0] = 0; //@line 1840
 HEAP8[$97 >> 0] = 0; //@line 1842
 HEAP8[$97 + 1 >> 0] = 0; //@line 1844
 HEAP8[$97 + 2 >> 0] = 0; //@line 1846
 $101 = $53 + 48 | 0; //@line 1847
 HEAP8[$97 + 3 >> 0] = 0; //@line 1848
 HEAP8[$101 >> 0] = 0; //@line 1850
 HEAP8[$101 + 1 >> 0] = 0; //@line 1852
 HEAP8[$101 + 2 >> 0] = 0; //@line 1854
 $105 = $53 + 52 | 0; //@line 1855
 HEAP8[$101 + 3 >> 0] = 0; //@line 1856
 HEAP8[$105 >> 0] = 0; //@line 1858
 HEAP8[$105 + 1 >> 0] = 0; //@line 1860
 HEAP8[$105 + 2 >> 0] = 0; //@line 1862
 $109 = $53 + 56 | 0; //@line 1863
 HEAP8[$105 + 3 >> 0] = 0; //@line 1864
 HEAP8[$109 >> 0] = 0; //@line 1866
 HEAP8[$109 + 1 >> 0] = 0; //@line 1868
 HEAP8[$109 + 2 >> 0] = 0; //@line 1870
 $113 = $53 + 60 | 0; //@line 1871
 HEAP8[$109 + 3 >> 0] = 0; //@line 1872
 HEAP8[$113 >> 0] = 0; //@line 1874
 HEAP8[$113 + 1 >> 0] = 0; //@line 1876
 HEAP8[$113 + 2 >> 0] = 0; //@line 1878
 HEAP8[$113 + 3 >> 0] = 0; //@line 1879
 return;
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 var $$pre$i$i45 = 0, $$pre$i$i59 = 0, $$pre$phiZ2D = 0, $$pre106 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6076
 STACKTOP = STACKTOP + 16 | 0; //@line 6077
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6077
 $1 = sp; //@line 6078
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 6079
 __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 6081
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 1336 | 0, $0); //@line 6083
 $4 = $0 + 2284 | 0; //@line 6084
 $5 = $0 + 1828 | 0; //@line 6085
 dest = $5 + 16 | 0; //@line 6087
 stop = dest + 88 | 0; //@line 6087
 do {
  HEAP32[dest >> 2] = 0; //@line 6087
  dest = dest + 4 | 0; //@line 6087
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 >> 0] = 1; //@line 6088
 HEAP8[$0 + 2286 >> 0] = 1; //@line 6091
 HEAP32[$0 + 2288 >> 2] = 0; //@line 6093
 HEAP8[$0 + 2285 >> 0] = 15; //@line 6094
 _memset($0 + 1932 | 0, 0, 352) | 0; //@line 6096
 HEAP32[$0 + 1812 >> 2] = 22; //@line 6099
 HEAP32[$0 + 1816 >> 2] = 0; //@line 6101
 HEAP32[$0 + 1820 >> 2] = $0; //@line 6103
 HEAP32[$0 + 1824 >> 2] = 800; //@line 6104
 HEAP32[$1 >> 2] = 23; //@line 6106
 HEAP32[$1 + 4 >> 2] = 0; //@line 6108
 HEAP32[$1 + 8 >> 2] = $0; //@line 6110
 HEAP32[$1 + 12 >> 2] = 812; //@line 6111
 $13 = $0 + 1840 | 0; //@line 6112
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 6113
 HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6113
 HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6113
 HEAP32[$13 >> 2] = 812; //@line 6114
 $14 = $1 + 12 | 0; //@line 6115
 HEAP32[$1 >> 2] = 24; //@line 6116
 HEAP32[$1 + 4 >> 2] = 0; //@line 6118
 HEAP32[$1 + 8 >> 2] = $0; //@line 6120
 HEAP32[$14 >> 2] = 824; //@line 6121
 $15 = $0 + 1844 | 0; //@line 6122
 if (($15 | 0) == ($1 | 0)) {
  $21 = 824; //@line 6125
  label = 3; //@line 6126
 } else {
  __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($15, $1); //@line 6129
  $$pre$i$i45 = HEAP32[$14 >> 2] | 0; //@line 6130
  HEAP32[$0 + 1856 >> 2] = $$pre$i$i45; //@line 6132
  if ($$pre$i$i45 | 0) {
   $21 = $$pre$i$i45; //@line 6135
   label = 3; //@line 6136
  }
 }
 do {
  if ((label | 0) == 3) {
   $22 = HEAP32[$21 + 8 >> 2] | 0; //@line 6142
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6143
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 6144
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 191; //@line 6147
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6149
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6151
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6153
    sp = STACKTOP; //@line 6154
    STACKTOP = sp; //@line 6155
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6157
    break;
   }
  }
 } while (0);
 $26 = $1 + 12 | 0; //@line 6162
 HEAP32[$1 >> 2] = 25; //@line 6163
 HEAP32[$1 + 4 >> 2] = 0; //@line 6165
 HEAP32[$1 + 8 >> 2] = $0; //@line 6167
 HEAP32[$26 >> 2] = 836; //@line 6168
 $27 = $0 + 1860 | 0; //@line 6169
 if (($27 | 0) == ($1 | 0)) {
  $48 = 836; //@line 6172
 } else {
  $29 = $0 + 1872 | 0; //@line 6174
  $30 = HEAP32[$29 >> 2] | 0; //@line 6175
  if (!$30) {
   $$pre$phiZ2D = $27; //@line 6178
   $40 = 836; //@line 6178
  } else {
   $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 6181
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6182
   FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 6183
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 192; //@line 6186
    HEAP32[$AsyncCtx2 + 4 >> 2] = $26; //@line 6188
    HEAP32[$AsyncCtx2 + 8 >> 2] = $29; //@line 6190
    HEAP32[$AsyncCtx2 + 12 >> 2] = $27; //@line 6192
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 6194
    sp = STACKTOP; //@line 6195
    STACKTOP = sp; //@line 6196
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6198
   $$pre106 = HEAP32[$26 >> 2] | 0; //@line 6199
   if (!$$pre106) {
    HEAP32[$29 >> 2] = 0; //@line 6202
    STACKTOP = sp; //@line 6203
    return;
   } else {
    $$pre$phiZ2D = $27; //@line 6205
    $40 = $$pre106; //@line 6205
   }
  }
  $41 = HEAP32[$40 + 4 >> 2] | 0; //@line 6209
  $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6210
  FUNCTION_TABLE_vii[$41 & 31]($$pre$phiZ2D, $1); //@line 6211
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 193; //@line 6214
   HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 6216
   HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 6218
   HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 6220
   sp = STACKTOP; //@line 6221
   STACKTOP = sp; //@line 6222
   return;
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6224
  $$pre$i$i59 = HEAP32[$26 >> 2] | 0; //@line 6225
  HEAP32[$29 >> 2] = $$pre$i$i59; //@line 6227
  if (!$$pre$i$i59) {
   STACKTOP = sp; //@line 6230
   return;
  } else {
   $48 = $$pre$i$i59; //@line 6232
  }
 }
 $49 = HEAP32[$48 + 8 >> 2] | 0; //@line 6236
 $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6237
 FUNCTION_TABLE_vi[$49 & 1023]($1); //@line 6238
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 194; //@line 6241
  HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 6243
  sp = STACKTOP; //@line 6244
  STACKTOP = sp; //@line 6245
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6247
 STACKTOP = sp; //@line 6248
 return;
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 474
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 560
 $$0136 = $4 + 16 | 0; //@line 560
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 560
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 560
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 560
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 560
 while (1) {
  $110 = HEAP32[1300 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2324 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0138 >>> 24 << 2) >> 2]; //@line 582
  $130 = HEAP32[1300 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2324 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0140 >>> 24 << 2) >> 2]; //@line 602
  $150 = HEAP32[1300 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2324 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0139 >>> 24 << 2) >> 2]; //@line 622
  $170 = HEAP32[1300 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2324 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0137 >>> 24 << 2) >> 2]; //@line 642
  $171 = $$0136 + 20 | 0; //@line 643
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 644
  $173 = $110 & 255; //@line 645
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1300 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2324 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($170 >>> 24 << 2) >> 2]; //@line 706
  $250 = HEAP32[1300 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2324 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($110 >>> 24 << 2) >> 2]; //@line 726
  $$0$in = $$0$in + -1 | 0; //@line 727
  $$0136 = $$0136 + 32 | 0; //@line 727
  $$0137 = HEAP32[1300 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2324 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($130 >>> 24 << 2) >> 2]; //@line 727
  $$0138 = HEAP32[1300 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2324 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($150 >>> 24 << 2) >> 2]; //@line 727
  $$0139 = $250; //@line 727
  $$0140 = $230; //@line 727
 }
 $261 = (HEAPU8[14113 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 739
 $268 = (HEAPU8[14113 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 746
 $274 = (HEAPU8[14113 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 752
 $276 = HEAP32[$171 >> 2] | 0; //@line 754
 $281 = $276 ^ (HEAPU8[14113 + ($130 & 255) >> 0] | 0); //@line 759
 $288 = (HEAPU8[14113 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 766
 $295 = (HEAPU8[14113 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 773
 $301 = (HEAPU8[14113 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 779
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 781
 $308 = $303 ^ (HEAPU8[14113 + ($150 & 255) >> 0] | 0); //@line 786
 $315 = (HEAPU8[14113 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 793
 $322 = (HEAPU8[14113 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 800
 $328 = (HEAPU8[14113 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 806
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 807
 $334 = $329 ^ (HEAPU8[14113 + ($170 & 255) >> 0] | 0); //@line 812
 $341 = (HEAPU8[14113 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 819
 $348 = (HEAPU8[14113 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 826
 $354 = (HEAPU8[14113 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 832
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14113 + $173 >> 0] | 0); //@line 834
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 838
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 842
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 846
 HEAP8[$2 + 4 >> 0] = $281; //@line 849
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 853
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 857
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 861
 HEAP8[$2 + 8 >> 0] = $308; //@line 864
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 868
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 872
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 876
 HEAP8[$2 + 12 >> 0] = $334; //@line 879
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 883
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 887
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 891
 return 0; //@line 892
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 27
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 113
 $$0136 = $4 + 16 | 0; //@line 113
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 113
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 113
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 113
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 113
 while (1) {
  $110 = HEAP32[5396 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6420 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0139 >>> 24 << 2) >> 2]; //@line 135
  $130 = HEAP32[5396 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6420 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0137 >>> 24 << 2) >> 2]; //@line 155
  $150 = HEAP32[5396 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6420 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0138 >>> 24 << 2) >> 2]; //@line 175
  $170 = HEAP32[5396 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6420 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0140 >>> 24 << 2) >> 2]; //@line 195
  $171 = $$0136 + 20 | 0; //@line 196
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 197
  $173 = $110 & 255; //@line 198
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5396 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6420 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($130 >>> 24 << 2) >> 2]; //@line 259
  $250 = HEAP32[5396 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6420 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($150 >>> 24 << 2) >> 2]; //@line 279
  $$0$in = $$0$in + -1 | 0; //@line 280
  $$0136 = $$0136 + 32 | 0; //@line 280
  $$0137 = HEAP32[5396 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6420 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($170 >>> 24 << 2) >> 2]; //@line 280
  $$0138 = HEAP32[5396 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6420 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($110 >>> 24 << 2) >> 2]; //@line 280
  $$0139 = $250; //@line 280
  $$0140 = $230; //@line 280
 }
 $261 = (HEAPU8[13857 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 292
 $268 = (HEAPU8[13857 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 299
 $274 = (HEAPU8[13857 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 305
 $276 = HEAP32[$171 >> 2] | 0; //@line 307
 $281 = $276 ^ (HEAPU8[13857 + ($130 & 255) >> 0] | 0); //@line 312
 $288 = (HEAPU8[13857 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 319
 $295 = (HEAPU8[13857 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 326
 $301 = (HEAPU8[13857 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 332
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 334
 $308 = $303 ^ (HEAPU8[13857 + ($150 & 255) >> 0] | 0); //@line 339
 $315 = (HEAPU8[13857 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 346
 $322 = (HEAPU8[13857 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 353
 $328 = (HEAPU8[13857 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 359
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 360
 $334 = $329 ^ (HEAPU8[13857 + ($170 & 255) >> 0] | 0); //@line 365
 $341 = (HEAPU8[13857 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 372
 $348 = (HEAPU8[13857 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 379
 $354 = (HEAPU8[13857 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 385
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13857 + $173 >> 0] | 0); //@line 387
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 391
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 395
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 399
 HEAP8[$2 + 4 >> 0] = $281; //@line 402
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 406
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 410
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 414
 HEAP8[$2 + 8 >> 0] = $308; //@line 417
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 421
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 425
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 429
 HEAP8[$2 + 12 >> 0] = $334; //@line 432
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 436
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 440
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 444
 return 0; //@line 445
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 27253
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 27257
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 27261
   break;
  }
 default:
  {
   $$0106 = -32; //@line 27265
   return $$0106 | 0; //@line 27266
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 27269
 $3 = $0 + 8 | 0; //@line 27270
 HEAP32[$0 + 4 >> 2] = $3; //@line 27272
 $5 = $2 >>> 5; //@line 27273
 $$0103117 = 0; //@line 27274
 do {
  $6 = $$0103117 << 2; //@line 27276
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 27299
  $$0103117 = $$0103117 + 1 | 0; //@line 27300
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 27312
   $$1104111 = 0; //@line 27312
   $33 = HEAP32[$3 >> 2] | 0; //@line 27312
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 27318
    $33 = HEAP32[1260 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13857 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13857 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13857 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13857 + ($35 & 255) >> 0] | 0) << 24; //@line 27343
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 27344
    HEAP32[$$0112 >> 2] = $33; //@line 27345
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 27348
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 27350
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 27353
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 27355
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 27358
    $$1104111 = $$1104111 + 1 | 0; //@line 27359
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 27362
   return $$0106 | 0; //@line 27368
  }
 case 12:
  {
   $$1114 = $3; //@line 27373
   $$2105113 = 0; //@line 27373
   $76 = HEAP32[$3 >> 2] | 0; //@line 27373
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 27379
    $76 = HEAP32[1260 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13857 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13857 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13857 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13857 + ($78 & 255) >> 0] | 0) << 24; //@line 27404
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 27405
    HEAP32[$$1114 >> 2] = $76; //@line 27406
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 27409
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 27411
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 27414
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 27416
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 27419
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 27421
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 27424
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 27426
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 27429
    $$2105113 = $$2105113 + 1 | 0; //@line 27430
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 27433
   return $$0106 | 0; //@line 27439
  }
 case 14:
  {
   $$2116 = $3; //@line 27444
   $$3115 = 0; //@line 27444
   $127 = HEAP32[$3 >> 2] | 0; //@line 27444
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 27450
    $127 = HEAP32[1260 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13857 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13857 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13857 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13857 + ($129 & 255) >> 0] | 0) << 24; //@line 27475
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 27476
    HEAP32[$$2116 >> 2] = $127; //@line 27477
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 27480
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 27482
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 27485
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 27487
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 27490
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 27492
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13857 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13857 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13857 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13857 + ($166 >>> 24) >> 0] | 0) << 24; //@line 27519
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 27521
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 27524
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 27526
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 27529
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 27531
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 27534
    $$3115 = $$3115 + 1 | 0; //@line 27535
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 27538
   return $$0106 | 0; //@line 27544
  }
 default:
  {
   $$0106 = 0; //@line 27548
   return $$0106 | 0; //@line 27549
  }
 }
 return 0; //@line 27552
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $17 = 0, $27 = 0, $32 = 0, $41 = 0, $44 = 0, $47 = 0, $56 = 0, $58 = 0, $62 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 17511
 STACKTOP = STACKTOP + 32 | 0; //@line 17512
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17512
 $vararg_buffer5 = sp + 24 | 0; //@line 17513
 $vararg_buffer3 = sp + 16 | 0; //@line 17514
 _printf(12967, sp) | 0; //@line 17517
 _printf(13472, sp + 8 | 0) | 0; //@line 17518
 $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17519
 _putchar(10) | 0; //@line 17520
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 511; //@line 17523
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 17525
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 17527
  HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer3; //@line 17529
  HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 17531
  HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer5; //@line 17533
  sp = STACKTOP; //@line 17534
  STACKTOP = sp; //@line 17535
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17537
 $7 = HEAP32[$0 + 356 >> 2] | 0; //@line 17539
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17541
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($7, $0 + 1036 | 0); //@line 17542
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 512; //@line 17545
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 17547
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer3; //@line 17549
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer3; //@line 17551
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer5; //@line 17553
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer5; //@line 17555
  sp = STACKTOP; //@line 17556
  STACKTOP = sp; //@line 17557
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 17559
 HEAP32[$0 + 364 >> 2] = 0; //@line 17561
 $17 = $0 + 1160 | 0; //@line 17564
 HEAP8[$17 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 17565
 HEAP8[$0 + 1163 >> 0] = HEAP8[$0 + 1129 >> 0] | 0; //@line 17569
 HEAP8[$0 + 1176 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 17573
 HEAP8[$0 + 1177 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 17577
 $27 = $0 + 1178 | 0; //@line 17578
 HEAP8[$27 >> 0] = 0; //@line 17579
 HEAP32[$0 + 1180 >> 2] = 0; //@line 17581
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $32 = HEAP32[$0 >> 2] | 0; //@line 17587
   $AsyncCtx18 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17588
   __ZN7LoRaPHY20put_radio_to_standbyEv($32); //@line 17589
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 513; //@line 17592
    HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 17594
    HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 17596
    HEAP32[$AsyncCtx18 + 12 >> 2] = $17; //@line 17598
    HEAP32[$AsyncCtx18 + 16 >> 2] = $27; //@line 17600
    HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer3; //@line 17602
    HEAP32[$AsyncCtx18 + 24 >> 2] = $vararg_buffer3; //@line 17604
    HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer5; //@line 17606
    HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer5; //@line 17608
    sp = STACKTOP; //@line 17609
    STACKTOP = sp; //@line 17610
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 17612
    break;
   }
  }
 } while (0);
 $41 = HEAP32[$0 >> 2] | 0; //@line 17617
 $44 = HEAP32[(HEAP32[$41 >> 2] | 0) + 24 >> 2] | 0; //@line 17620
 $47 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 17623
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 17624
 FUNCTION_TABLE_iiii[$44 & 15]($41, $17, $47) | 0; //@line 17625
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 514; //@line 17628
  HEAP32[$AsyncCtx + 4 >> 2] = $27; //@line 17630
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 17632
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 17634
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 17636
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 17638
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer5; //@line 17640
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 17642
  sp = STACKTOP; //@line 17643
  STACKTOP = sp; //@line 17644
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17646
 $56 = (HEAP8[$27 >> 0] | 0) != 0; //@line 17648
 $58 = HEAP32[$0 + 1108 >> 2] | 0; //@line 17650
 _printf(12967, $vararg_buffer3) | 0; //@line 17651
 _printf(13043, $vararg_buffer5) | 0; //@line 17652
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17653
 _putchar(10) | 0; //@line 17654
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 515; //@line 17657
  HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 17659
  HEAP8[$AsyncCtx8 + 8 >> 0] = $56 & 1; //@line 17662
  HEAP32[$AsyncCtx8 + 12 >> 2] = $58; //@line 17664
  sp = STACKTOP; //@line 17665
  STACKTOP = sp; //@line 17666
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17668
 $62 = HEAP32[$0 >> 2] | 0; //@line 17669
 $AsyncCtx14 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17670
 __ZN7LoRaPHY15setup_rx_windowEbj($62, $56, $58); //@line 17671
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 516; //@line 17674
  sp = STACKTOP; //@line 17675
  STACKTOP = sp; //@line 17676
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17678
  STACKTOP = sp; //@line 17679
  return;
 }
}
function __ZN12LoRaWANStack17send_frame_to_macEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sink2$sink = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $38 = 0, $39 = 0, $4 = 0, $58 = 0, $59 = 0, $72 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8836
 STACKTOP = STACKTOP + 32 | 0; //@line 8837
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8837
 $1 = sp + 16 | 0; //@line 8838
 $2 = sp; //@line 8839
 $4 = HEAP32[$0 + 1968 >> 2] | 0; //@line 8841
 HEAP32[$1 >> 2] = $4; //@line 8842
 L1 : do {
  switch ($4 | 0) {
  case 0:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8848
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8852
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 8856
    HEAP8[$1 + 6 >> 0] = 1; //@line 8858
    HEAP32[$2 >> 2] = 21; //@line 8859
    $14 = $0 + 4 | 0; //@line 8860
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8861
    $15 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($14, $2) | 0; //@line 8862
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 293; //@line 8865
     HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 8867
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 8869
     HEAP32[$AsyncCtx11 + 12 >> 2] = $14; //@line 8871
     HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 8873
     HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 8875
     HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 8877
     sp = STACKTOP; //@line 8878
     STACKTOP = sp; //@line 8879
     return 0; //@line 8879
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8881
    if (!$15) {
     $$pre$phiZ2D = $14; //@line 8886
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8886
     break L1;
    } else {
     $$pre$phiZ2D = $14; //@line 8891
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8891
     break L1;
    }
    break;
   }
  case 1:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8899
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8903
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 8907
    HEAP8[$1 + 6 >> 0] = HEAP8[$0 + 1974 >> 0] | 0; //@line 8911
    HEAP32[$2 >> 2] = 21; //@line 8912
    $38 = $0 + 4 | 0; //@line 8913
    $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8914
    $39 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($38, $2) | 0; //@line 8915
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 294; //@line 8918
     HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 8920
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 8922
     HEAP32[$AsyncCtx7 + 12 >> 2] = $38; //@line 8924
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 8926
     HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 8928
     HEAP32[$AsyncCtx7 + 24 >> 2] = $1; //@line 8930
     sp = STACKTOP; //@line 8931
     STACKTOP = sp; //@line 8932
     return 0; //@line 8932
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8934
    if (!$39) {
     $$pre$phiZ2D = $38; //@line 8939
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8939
     break L1;
    } else {
     $$pre$phiZ2D = $38; //@line 8944
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8944
     break L1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8952
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8956
    HEAP8[$1 + 4 >> 0] = 0; //@line 8958
    HEAP8[$1 + 6 >> 0] = 1; //@line 8960
    HEAP32[$2 >> 2] = 21; //@line 8961
    $58 = $0 + 4 | 0; //@line 8962
    $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8963
    $59 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($58, $2) | 0; //@line 8964
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 295; //@line 8967
     HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 8969
     HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 8971
     HEAP32[$AsyncCtx3 + 12 >> 2] = $58; //@line 8973
     HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 8975
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 8977
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 8979
     sp = STACKTOP; //@line 8980
     STACKTOP = sp; //@line 8981
     return 0; //@line 8981
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8983
    if (!$59) {
     $$pre$phiZ2D = $58; //@line 8988
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8988
     break L1;
    } else {
     $$pre$phiZ2D = $58; //@line 8993
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8993
     break L1;
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 8999
    STACKTOP = sp; //@line 9000
    return $$0 | 0; //@line 9000
   }
  }
 } while (0);
 HEAP8[$1 + 5 >> 0] = $$sink2$sink; //@line 9005
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9006
 $72 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($$pre$phiZ2D, $1) | 0; //@line 9007
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 296; //@line 9010
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9012
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9014
  sp = STACKTOP; //@line 9015
  STACKTOP = sp; //@line 9016
  return 0; //@line 9016
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9018
 $$0 = $72; //@line 9019
 STACKTOP = sp; //@line 9020
 return $$0 | 0; //@line 9020
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 25107
 STACKTOP = STACKTOP + 16 | 0; //@line 25108
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25108
 $5 = sp; //@line 25109
 dest = $5; //@line 25110
 stop = dest + 16 | 0; //@line 25110
 do {
  HEAP8[dest >> 0] = 255; //@line 25110
  dest = dest + 1 | 0; //@line 25110
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 25112
 $8 = $0 + 120 | 0; //@line 25113
 $9 = HEAP32[$8 >> 2] | 0; //@line 25114
 $10 = $0 + 128 | 0; //@line 25115
 $11 = HEAP8[$10 >> 0] | 0; //@line 25116
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 124 >> 2] | 0; //@line 25121
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 25128
   $indvars$iv$i = 0; //@line 25129
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 25134
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 25135
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 25145
 $23 = $0 + 8 | 0; //@line 25146
 $25 = $1 + 4 | 0; //@line 25148
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $78 = HEAP32[$1 >> 2] | 0; //@line 25153
  $$0 = 1; //@line 25158
  $$sink = $78 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 25158
  HEAP32[$3 >> 2] = $$sink; //@line 25159
  STACKTOP = sp; //@line 25160
  return $$0 | 0; //@line 25160
 }
 HEAP32[$4 >> 2] = 0; //@line 25162
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 25171
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 25173
 $40 = HEAP32[$8 >> 2] | 0; //@line 25174
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 25176
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 112 | 0; //@line 25180
   $45 = $0 + 72 | 0; //@line 25181
   $$01722$i = 0; //@line 25182
   $$01821$i = 0; //@line 25182
   $$023$i = 0; //@line 25182
   $47 = 0; //@line 25182
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 25194
      $$220$i = $$01821$i; //@line 25194
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 25196
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 25198
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 < $39 << 24 >> 24 ? 1 : ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 > $39 << 24 >> 24) {
       $$2$i = $$023$i; //@line 25206
       $$220$i = $$01821$i; //@line 25206
      } else {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 25219
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 25220
        $$220$i = $$01821$i; //@line 25220
        break;
       } else {
        $$2$i = $$023$i; //@line 25224
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 25224
        break;
       }
      }
     }
    } while (0);
    $75 = $$01722$i + 1 << 24 >> 24; //@line 25230
    if (($75 & 255) < ($42 & 255)) {
     $$01722$i = $75; //@line 25234
     $$01821$i = $$220$i; //@line 25234
     $$023$i = $$2$i; //@line 25234
     $47 = $75 & 255; //@line 25234
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = 1; //@line 25245
     $$sink = $37; //@line 25245
    }
    HEAP32[$3 >> 2] = $$sink; //@line 25247
    STACKTOP = sp; //@line 25248
    return $$0 | 0; //@line 25248
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 25255
    $$0 = 1; //@line 25256
    $$sink = 0; //@line 25256
    HEAP32[$3 >> 2] = $$sink; //@line 25257
    STACKTOP = sp; //@line 25258
    return $$0 | 0; //@line 25258
   }
  }
 } while (0);
 $91 = HEAP32[$0 + 124 >> 2] | 0; //@line 25263
 $92 = HEAP8[$10 >> 0] | 0; //@line 25264
 if (!(($40 | 0) != 0 & ($91 | 0) != 0 & $92 << 24 >> 24 != 0)) {
  $$0 = 0; //@line 25271
  $$sink = 0; //@line 25271
  HEAP32[$3 >> 2] = $$sink; //@line 25272
  STACKTOP = sp; //@line 25273
  return $$0 | 0; //@line 25273
 }
 $wide$trip$count$i25 = $92 & 255; //@line 25275
 $indvars$iv$i27 = 0; //@line 25276
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$91 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 25281
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 25282
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = 0; //@line 25285
 $$sink = 0; //@line 25285
 HEAP32[$3 >> 2] = $$sink; //@line 25291
 STACKTOP = sp; //@line 25292
 return $$0 | 0; //@line 25292
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 34296
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34300
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34302
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34306
 $11 = $10 + 12 | 0; //@line 34307
 HEAP32[$10 >> 2] = 577; //@line 34308
 HEAP32[$10 + 4 >> 2] = 0; //@line 34310
 HEAP32[$10 + 8 >> 2] = $6; //@line 34312
 HEAP32[$11 >> 2] = 848; //@line 34313
 $12 = $6 + 1228 | 0; //@line 34314
 if (($12 | 0) == ($10 | 0)) {
  $35 = HEAP32[214] | 0; //@line 34318
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 34319
  FUNCTION_TABLE_vi[$35 & 1023]($10); //@line 34320
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 34323
   $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 34324
   HEAP32[$36 >> 2] = $10; //@line 34325
   $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 34326
   HEAP32[$37 >> 2] = $4; //@line 34327
   $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 34328
   HEAP32[$38 >> 2] = $6; //@line 34329
   $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 34330
   HEAP32[$39 >> 2] = $2; //@line 34331
   sp = STACKTOP; //@line 34332
   return;
  }
  ___async_unwind = 0; //@line 34335
  HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 34336
  $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 34337
  HEAP32[$36 >> 2] = $10; //@line 34338
  $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 34339
  HEAP32[$37 >> 2] = $4; //@line 34340
  $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 34341
  HEAP32[$38 >> 2] = $6; //@line 34342
  $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 34343
  HEAP32[$39 >> 2] = $2; //@line 34344
  sp = STACKTOP; //@line 34345
  return;
 }
 $14 = $6 + 1240 | 0; //@line 34348
 $15 = HEAP32[$14 >> 2] | 0; //@line 34349
 if (!$15) {
  $27 = HEAP32[213] | 0; //@line 34353
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 34354
  FUNCTION_TABLE_vii[$27 & 31]($12, $10); //@line 34355
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 34358
   $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 34359
   HEAP32[$28 >> 2] = $2; //@line 34360
   $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 34361
   HEAP32[$29 >> 2] = $11; //@line 34362
   $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 34363
   HEAP32[$30 >> 2] = $14; //@line 34364
   $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 34365
   HEAP32[$31 >> 2] = $10; //@line 34366
   $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 34367
   HEAP32[$32 >> 2] = $4; //@line 34368
   $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 34369
   HEAP32[$33 >> 2] = $6; //@line 34370
   sp = STACKTOP; //@line 34371
   return;
  }
  ___async_unwind = 0; //@line 34374
  HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 34375
  $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 34376
  HEAP32[$28 >> 2] = $2; //@line 34377
  $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 34378
  HEAP32[$29 >> 2] = $11; //@line 34379
  $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 34380
  HEAP32[$30 >> 2] = $14; //@line 34381
  $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 34382
  HEAP32[$31 >> 2] = $10; //@line 34383
  $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 34384
  HEAP32[$32 >> 2] = $4; //@line 34385
  $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 34386
  HEAP32[$33 >> 2] = $6; //@line 34387
  sp = STACKTOP; //@line 34388
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 34392
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 34393
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 34394
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 34397
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 34398
   HEAP32[$19 >> 2] = $2; //@line 34399
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 34400
   HEAP32[$20 >> 2] = $11; //@line 34401
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 34402
   HEAP32[$21 >> 2] = $14; //@line 34403
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 34404
   HEAP32[$22 >> 2] = $10; //@line 34405
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 34406
   HEAP32[$23 >> 2] = $4; //@line 34407
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 34408
   HEAP32[$24 >> 2] = $6; //@line 34409
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 34410
   HEAP32[$25 >> 2] = $12; //@line 34411
   sp = STACKTOP; //@line 34412
   return;
  }
  ___async_unwind = 0; //@line 34415
  HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 34416
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 34417
  HEAP32[$19 >> 2] = $2; //@line 34418
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 34419
  HEAP32[$20 >> 2] = $11; //@line 34420
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 34421
  HEAP32[$21 >> 2] = $14; //@line 34422
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 34423
  HEAP32[$22 >> 2] = $10; //@line 34424
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 34425
  HEAP32[$23 >> 2] = $4; //@line 34426
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 34427
  HEAP32[$24 >> 2] = $6; //@line 34428
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 34429
  HEAP32[$25 >> 2] = $12; //@line 34430
  sp = STACKTOP; //@line 34431
  return;
 }
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_464($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $41 = 0, $53 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24701
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24703
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24705
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24707
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24709
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24711
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24713
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24715
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24717
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24719
 $19 = $2 + 968 | 0; //@line 24720
 HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -17; //@line 24723
 if (HEAP8[$2 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$2 + 372 >> 0] = 0; //@line 24736
   HEAP32[$2 + 956 >> 2] = 0; //@line 24738
   HEAP32[$2 + 960 >> 2] = 0; //@line 24740
   HEAP32[$2 + 964 >> 2] = 0; //@line 24742
   HEAP8[$2 + 380 >> 0] = 0; //@line 24744
   HEAP8[$2 + 894 >> 0] = 1; //@line 24746
   HEAP8[$2 + 895 >> 0] = 1; //@line 24748
   HEAP8[$2 + 377 >> 0] = 0; //@line 24750
   HEAP8[$2 + 1152 >> 0] = 0; //@line 24752
   HEAP16[$2 + 1154 >> 1] = 1; //@line 24754
   $41 = $2 + 4 | 0; //@line 24755
   __ZN14LoRaMacCommand20clear_command_bufferEv($41); //@line 24756
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($41); //@line 24757
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($41); //@line 24758
   HEAP8[$2 + 371 >> 0] = 1; //@line 24760
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 24762
   HEAP8[$2 + 373 >> 0] = 0; //@line 24764
   HEAP8[$2 + 374 >> 0] = 0; //@line 24766
   $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 24768
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 24771
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 24774
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 24776
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$2 + 378 >> 0] = 0; //@line 24786
   HEAP8[$2 + 379 >> 0] = 0; //@line 24788
   $53 = HEAP32[$2 >> 2] | 0; //@line 24789
   $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 52 >> 2] | 0; //@line 24792
   $61 = (HEAPU8[$2 + 897 >> 0] | 0) + 1 & 255; //@line 24797
   $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 24798
   $62 = FUNCTION_TABLE_iii[$56 & 31]($53, $61) | 0; //@line 24799
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 482; //@line 24802
    $63 = $ReallocAsyncCtx + 4 | 0; //@line 24803
    HEAP32[$63 >> 2] = $2; //@line 24804
    $64 = $ReallocAsyncCtx + 8 | 0; //@line 24805
    HEAP32[$64 >> 2] = $4; //@line 24806
    $65 = $ReallocAsyncCtx + 12 | 0; //@line 24807
    HEAP32[$65 >> 2] = $6; //@line 24808
    $66 = $ReallocAsyncCtx + 16 | 0; //@line 24809
    HEAP32[$66 >> 2] = $8; //@line 24810
    $67 = $ReallocAsyncCtx + 20 | 0; //@line 24811
    HEAP32[$67 >> 2] = $10; //@line 24812
    $68 = $ReallocAsyncCtx + 24 | 0; //@line 24813
    HEAP32[$68 >> 2] = $12; //@line 24814
    $69 = $ReallocAsyncCtx + 28 | 0; //@line 24815
    HEAP32[$69 >> 2] = $14; //@line 24816
    $70 = $ReallocAsyncCtx + 32 | 0; //@line 24817
    HEAP32[$70 >> 2] = $16; //@line 24818
    $71 = $ReallocAsyncCtx + 36 | 0; //@line 24819
    HEAP32[$71 >> 2] = $18; //@line 24820
    sp = STACKTOP; //@line 24821
    return;
   }
   HEAP8[___async_retval >> 0] = $62; //@line 24825
   ___async_unwind = 0; //@line 24826
   HEAP32[$ReallocAsyncCtx >> 2] = 482; //@line 24827
   $63 = $ReallocAsyncCtx + 4 | 0; //@line 24828
   HEAP32[$63 >> 2] = $2; //@line 24829
   $64 = $ReallocAsyncCtx + 8 | 0; //@line 24830
   HEAP32[$64 >> 2] = $4; //@line 24831
   $65 = $ReallocAsyncCtx + 12 | 0; //@line 24832
   HEAP32[$65 >> 2] = $6; //@line 24833
   $66 = $ReallocAsyncCtx + 16 | 0; //@line 24834
   HEAP32[$66 >> 2] = $8; //@line 24835
   $67 = $ReallocAsyncCtx + 20 | 0; //@line 24836
   HEAP32[$67 >> 2] = $10; //@line 24837
   $68 = $ReallocAsyncCtx + 24 | 0; //@line 24838
   HEAP32[$68 >> 2] = $12; //@line 24839
   $69 = $ReallocAsyncCtx + 28 | 0; //@line 24840
   HEAP32[$69 >> 2] = $14; //@line 24841
   $70 = $ReallocAsyncCtx + 32 | 0; //@line 24842
   HEAP32[$70 >> 2] = $16; //@line 24843
   $71 = $ReallocAsyncCtx + 36 | 0; //@line 24844
   HEAP32[$71 >> 2] = $18; //@line 24845
   sp = STACKTOP; //@line 24846
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 24850
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 24851
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 24854
  $73 = $ReallocAsyncCtx5 + 4 | 0; //@line 24855
  HEAP32[$73 >> 2] = $6; //@line 24856
  $74 = $ReallocAsyncCtx5 + 8 | 0; //@line 24857
  HEAP32[$74 >> 2] = $4; //@line 24858
  sp = STACKTOP; //@line 24859
  return;
 }
 ___async_unwind = 0; //@line 24862
 HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 24863
 $73 = $ReallocAsyncCtx5 + 4 | 0; //@line 24864
 HEAP32[$73 >> 2] = $6; //@line 24865
 $74 = $ReallocAsyncCtx5 + 8 | 0; //@line 24866
 HEAP32[$74 >> 2] = $4; //@line 24867
 sp = STACKTOP; //@line 24868
 return;
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $65 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 308
 STACKTOP = STACKTOP + 48 | 0; //@line 309
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 309
 $vararg_buffer9 = sp + 40 | 0; //@line 310
 $vararg_buffer7 = sp + 32 | 0; //@line 311
 $vararg_buffer5 = sp + 24 | 0; //@line 312
 $vararg_buffer3 = sp + 16 | 0; //@line 313
 $vararg_buffer1 = sp + 8 | 0; //@line 314
 $15 = $8 & 1; //@line 316
 $16 = $10 & 1; //@line 317
 $17 = $11 & 1; //@line 318
 $18 = $13 & 1; //@line 319
 $19 = $14 & 1; //@line 320
 $21 = $0 + 689 | 0; //@line 322
 HEAP8[$21 >> 0] = $1; //@line 323
 _printf(10904, sp) | 0; //@line 324
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$21 >> 0]; //@line 327
 _printf(11079, $vararg_buffer1) | 0; //@line 328
 $AsyncCtx17 = _emscripten_alloc_async_context(72, sp) | 0; //@line 329
 _putchar(10) | 0; //@line 330
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 60; //@line 333
  HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 335
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 337
  HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 339
  HEAP32[$AsyncCtx17 + 16 >> 2] = $3; //@line 341
  HEAP32[$AsyncCtx17 + 20 >> 2] = $5; //@line 343
  HEAP8[$AsyncCtx17 + 24 >> 0] = $15; //@line 345
  HEAP8[$AsyncCtx17 + 25 >> 0] = $9; //@line 347
  HEAP8[$AsyncCtx17 + 26 >> 0] = $16; //@line 349
  HEAP8[$AsyncCtx17 + 27 >> 0] = $18; //@line 351
  HEAP8[$AsyncCtx17 + 28 >> 0] = $19; //@line 353
  HEAP16[$AsyncCtx17 + 30 >> 1] = $6; //@line 355
  HEAP16[$AsyncCtx17 + 32 >> 1] = $7; //@line 357
  HEAP32[$AsyncCtx17 + 36 >> 2] = $vararg_buffer3; //@line 359
  HEAP32[$AsyncCtx17 + 40 >> 2] = $vararg_buffer3; //@line 361
  HEAP32[$AsyncCtx17 + 44 >> 2] = $vararg_buffer5; //@line 363
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer5; //@line 365
  HEAP8[$AsyncCtx17 + 52 >> 0] = $4; //@line 367
  HEAP8[$AsyncCtx17 + 53 >> 0] = $17; //@line 369
  HEAP8[$AsyncCtx17 + 54 >> 0] = $12; //@line 371
  HEAP32[$AsyncCtx17 + 56 >> 2] = $vararg_buffer7; //@line 373
  HEAP32[$AsyncCtx17 + 60 >> 2] = $vararg_buffer7; //@line 375
  HEAP32[$AsyncCtx17 + 64 >> 2] = $vararg_buffer9; //@line 377
  HEAP32[$AsyncCtx17 + 68 >> 2] = $vararg_buffer9; //@line 379
  sp = STACKTOP; //@line 380
  STACKTOP = sp; //@line 381
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 383
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 387
   HEAP32[$0 + 712 >> 2] = $3; //@line 389
   HEAP32[$0 + 708 >> 2] = $5; //@line 391
   HEAP8[$0 + 718 >> 0] = $15; //@line 393
   HEAP8[$0 + 719 >> 0] = $9; //@line 395
   HEAP8[$0 + 720 >> 0] = $16; //@line 397
   HEAP8[$0 + 721 >> 0] = $18; //@line 399
   HEAP8[$0 + 722 >> 0] = $19; //@line 401
   HEAP16[$0 + 716 >> 1] = $6; //@line 403
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 412
   _printf(10904, $vararg_buffer3) | 0; //@line 413
   _printf(11537, $vararg_buffer5) | 0; //@line 414
   $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 415
   _putchar(10) | 0; //@line 416
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 61; //@line 419
    sp = STACKTOP; //@line 420
    STACKTOP = sp; //@line 421
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 423
   STACKTOP = sp; //@line 424
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $65 = $2 + 7 | 0; //@line 433
   HEAP32[$0 + 752 >> 2] = $65; //@line 435
   HEAP32[$0 + 756 >> 2] = $3; //@line 437
   HEAP8[$0 + 761 >> 0] = $4; //@line 439
   HEAP16[$0 + 762 >> 1] = $6; //@line 441
   HEAP8[$0 + 764 >> 0] = $15; //@line 443
   HEAP8[$0 + 765 >> 0] = $9; //@line 445
   HEAP8[$0 + 766 >> 0] = $16; //@line 447
   HEAP8[$0 + 767 >> 0] = $17; //@line 449
   HEAP8[$0 + 768 >> 0] = $12; //@line 451
   HEAP8[$0 + 769 >> 0] = $18; //@line 453
   HEAP8[$0 + 770 >> 0] = $19; //@line 455
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 457
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 11; //@line 465
   } else {
    if (($65 | 0) == 8 & $$ >>> 0 > 11) {
     label = 11; //@line 471
    } else {
     $$sink = 0; //@line 473
    }
   }
   if ((label | 0) == 11) {
    $$sink = 1; //@line 477
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 480
   _printf(10904, $vararg_buffer7) | 0; //@line 481
   _printf(11518, $vararg_buffer9) | 0; //@line 482
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 483
   _putchar(10) | 0; //@line 484
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 62; //@line 487
    sp = STACKTOP; //@line 488
    STACKTOP = sp; //@line 489
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 491
   STACKTOP = sp; //@line 492
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 496
   return;
  }
 }
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i15 = 0, $$1 = 0, $10 = 0, $16 = 0, $18 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $48 = 0, $51 = 0, $58 = 0, $60 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18949
 STACKTOP = STACKTOP + 16 | 0; //@line 18950
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18950
 $vararg_buffer1 = sp + 8 | 0; //@line 18951
 $vararg_buffer = sp; //@line 18952
 _printf(12967, $vararg_buffer) | 0; //@line 18953
 _printf(13511, $vararg_buffer1) | 0; //@line 18954
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 18955
 _putchar(10) | 0; //@line 18956
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 557; //@line 18959
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18961
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 18963
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 18965
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 18967
  sp = STACKTOP; //@line 18968
  STACKTOP = sp; //@line 18969
  return 0; //@line 18969
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18971
 if (HEAP32[$0 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 18976
  STACKTOP = sp; //@line 18977
  return $$1 | 0; //@line 18977
 }
 $10 = HEAP8[$1 + 5 >> 0] | 0; //@line 18980
 if ($10 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0) << 24 >> 24) {
  $26 = $10; //@line 18985
 } else {
  $26 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 18989
 }
 HEAP8[$vararg_buffer >> 0] = 0; //@line 18991
 $16 = $0 + 288 | 0; //@line 18992
 __ZN11LoRaMacMcps18reset_confirmationEv($16); //@line 18993
 HEAP8[$0 + 895 >> 0] = 1; //@line 18995
 $18 = $0 + 894 | 0; //@line 18996
 HEAP8[$18 >> 0] = 1; //@line 18997
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   HEAP8[$vararg_buffer >> 0] = 64; //@line 19001
   label = 10; //@line 19002
   break;
  }
 case 1:
  {
   HEAP8[$vararg_buffer >> 0] = -128; //@line 19006
   HEAP8[$18 >> 0] = HEAP8[$1 + 6 >> 0] | 0; //@line 19009
   label = 10; //@line 19010
   break;
  }
 case 3:
  {
   HEAP8[$vararg_buffer >> 0] = -32; //@line 19014
   label = 10; //@line 19015
   break;
  }
 default:
  {
   $$0 = -1003; //@line 19019
  }
 }
 do {
  if ((label | 0) == 10) {
   $22 = $0 + 1156 | 0; //@line 19024
   if (!(HEAP8[$22 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$0 >> 2] | 0, $26, 0) | 0)) {
     $$0 = -1003; //@line 19031
     break;
    }
    HEAP8[$0 + 1097 >> 0] = $26; //@line 19035
    $35 = HEAP8[$22 >> 0] << 7 & 255; //@line 19038
   } else {
    $35 = -128; //@line 19040
   }
   $30 = HEAP8[$1 + 4 >> 0] | 0; //@line 19043
   $32 = HEAP32[$1 + 8 >> 2] | 0; //@line 19045
   $34 = HEAP16[$1 + 12 >> 1] | 0; //@line 19047
   HEAP8[$vararg_buffer1 >> 0] = $35; //@line 19048
   $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19049
   $36 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $vararg_buffer1, $30, $32, $34) | 0; //@line 19050
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 558; //@line 19053
    HEAP32[$AsyncCtx5 + 4 >> 2] = $16; //@line 19055
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 19057
    HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer1; //@line 19059
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 19061
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 19063
    sp = STACKTOP; //@line 19064
    STACKTOP = sp; //@line 19065
    return 0; //@line 19065
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19067
   if (!$36) {
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 11 >> 0] = 0; //@line 19072
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 >> 0] = 0; //@line 19075
    $48 = HEAP32[$0 + 956 >> 2] | 0; //@line 19077
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 16 >> 2] = $48; //@line 19080
    $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19081
    $51 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 19082
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 559; //@line 19085
     HEAP32[$AsyncCtx8 + 4 >> 2] = $vararg_buffer1; //@line 19087
     HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 19089
     HEAP32[$AsyncCtx8 + 12 >> 2] = $16; //@line 19091
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 19093
     HEAP32[$AsyncCtx8 + 20 >> 2] = $vararg_buffer; //@line 19095
     sp = STACKTOP; //@line 19096
     STACKTOP = sp; //@line 19097
     return 0; //@line 19097
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 19099
    if (!$51) {
     $58 = HEAP32[$1 >> 2] | 0; //@line 19102
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) >> 2] = $58; //@line 19104
     $60 = $0 + 944 | 0; //@line 19105
     HEAP8[$60 >> 0] = HEAP8[$60 >> 0] | 1; //@line 19108
     $$0 = 0; //@line 19109
     break;
    } else {
     $$0$i15 = $51; //@line 19112
    }
   } else {
    $$0$i15 = $36; //@line 19115
   }
   HEAP8[$0 + 373 >> 0] = 0; //@line 19118
   $$0 = $$0$i15; //@line 19119
  }
 } while (0);
 $$1 = $$0; //@line 19122
 STACKTOP = sp; //@line 19123
 return $$1 | 0; //@line 19123
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i4 = 0, $$pre10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $49 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3832
 STACKTOP = STACKTOP + 16 | 0; //@line 3833
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3833
 $2 = sp; //@line 3834
 $3 = $1 + 12 | 0; //@line 3835
 $4 = HEAP32[$3 >> 2] | 0; //@line 3836
 if ($4 | 0) {
  $6 = $0 + 56 | 0; //@line 3839
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 68 | 0; //@line 3842
   $9 = HEAP32[$8 >> 2] | 0; //@line 3843
   do {
    if (!$9) {
     $20 = $4; //@line 3847
     label = 7; //@line 3848
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 3851
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3852
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 3853
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 158; //@line 3856
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3858
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 3860
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 3862
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 3864
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 3866
      sp = STACKTOP; //@line 3867
      STACKTOP = sp; //@line 3868
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3870
      $$pre = HEAP32[$3 >> 2] | 0; //@line 3871
      if (!$$pre) {
       $25 = 0; //@line 3874
       break;
      } else {
       $20 = $$pre; //@line 3877
       label = 7; //@line 3878
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 7) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 3887
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3888
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 3889
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 159; //@line 3892
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 3894
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 3896
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 3898
      sp = STACKTOP; //@line 3899
      STACKTOP = sp; //@line 3900
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3902
      $25 = HEAP32[$3 >> 2] | 0; //@line 3904
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $25; //@line 3909
  }
  _gpio_irq_set($0 + 28 | 0, 2, 1); //@line 3912
  STACKTOP = sp; //@line 3913
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 3915
 HEAP32[$2 + 4 >> 2] = 0; //@line 3915
 HEAP32[$2 + 8 >> 2] = 0; //@line 3915
 HEAP32[$2 + 12 >> 2] = 0; //@line 3915
 $27 = $0 + 56 | 0; //@line 3916
 do {
  if (($27 | 0) != ($2 | 0)) {
   $29 = $0 + 68 | 0; //@line 3920
   $30 = HEAP32[$29 >> 2] | 0; //@line 3921
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 3925
    $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3926
    FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 3927
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 160; //@line 3930
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 3932
     HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 3934
     HEAP32[$AsyncCtx5 + 12 >> 2] = $27; //@line 3936
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 3938
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 3940
     sp = STACKTOP; //@line 3941
     STACKTOP = sp; //@line 3942
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3944
    $$phi$trans$insert = $2 + 12 | 0; //@line 3945
    $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3946
    if ($$pre10 | 0) {
     $41 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 3950
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3951
     FUNCTION_TABLE_vii[$41 & 31]($27, $2); //@line 3952
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 161; //@line 3955
      HEAP32[$AsyncCtx8 + 4 >> 2] = $$phi$trans$insert; //@line 3957
      HEAP32[$AsyncCtx8 + 8 >> 2] = $29; //@line 3959
      HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 3961
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 3963
      sp = STACKTOP; //@line 3964
      STACKTOP = sp; //@line 3965
      return;
     }
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 3967
     $$pre$i$i4 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3968
     HEAP32[$29 >> 2] = $$pre$i$i4; //@line 3969
     if (!$$pre$i$i4) {
      break;
     }
     $49 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 3976
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3977
     FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 3978
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 162; //@line 3981
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 3983
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 3985
      sp = STACKTOP; //@line 3986
      STACKTOP = sp; //@line 3987
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3989
      break;
     }
    }
   }
   HEAP32[$29 >> 2] = 0; //@line 3994
  }
 } while (0);
 _gpio_irq_set($0 + 28 | 0, 2, 0); //@line 3998
 STACKTOP = sp; //@line 3999
 return;
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 26791
 HEAP32[$0 >> 2] = 968; //@line 26792
 $2 = $0 + 328 | 0; //@line 26793
 HEAP32[$2 >> 2] = HEAP32[262]; //@line 26794
 HEAP32[$2 + 4 >> 2] = HEAP32[263]; //@line 26794
 HEAP32[$2 + 8 >> 2] = HEAP32[264]; //@line 26794
 HEAP32[$2 + 12 >> 2] = HEAP32[265]; //@line 26794
 HEAP32[$2 + 16 >> 2] = HEAP32[266]; //@line 26794
 HEAP32[$2 + 20 >> 2] = HEAP32[267]; //@line 26794
 $3 = $0 + 352 | 0; //@line 26795
 HEAP32[$3 >> 2] = HEAP32[268]; //@line 26796
 HEAP32[$3 + 4 >> 2] = HEAP32[269]; //@line 26796
 HEAP32[$3 + 8 >> 2] = HEAP32[270]; //@line 26796
 HEAP32[$3 + 12 >> 2] = HEAP32[271]; //@line 26796
 HEAP32[$3 + 16 >> 2] = HEAP32[272]; //@line 26796
 HEAP32[$3 + 20 >> 2] = HEAP32[273]; //@line 26796
 $4 = $0 + 376 | 0; //@line 26797
 HEAP32[$4 >> 2] = HEAP32[274]; //@line 26798
 HEAP32[$4 + 4 >> 2] = HEAP32[275]; //@line 26798
 HEAP32[$4 + 8 >> 2] = HEAP32[276]; //@line 26798
 HEAP32[$4 + 12 >> 2] = HEAP32[277]; //@line 26798
 HEAP32[$4 + 16 >> 2] = HEAP32[278]; //@line 26798
 HEAP32[$4 + 20 >> 2] = HEAP32[279]; //@line 26798
 $5 = $0 + 400 | 0; //@line 26799
 HEAP32[$5 >> 2] = HEAP32[280]; //@line 26800
 HEAP32[$5 + 4 >> 2] = HEAP32[281]; //@line 26800
 HEAP32[$5 + 8 >> 2] = HEAP32[282]; //@line 26800
 HEAP32[$5 + 12 >> 2] = HEAP32[283]; //@line 26800
 HEAP32[$5 + 16 >> 2] = HEAP32[284]; //@line 26800
 HEAP32[$5 + 20 >> 2] = HEAP32[285]; //@line 26800
 $6 = $0 + 424 | 0; //@line 26801
 HEAP32[$6 >> 2] = HEAP32[286]; //@line 26802
 HEAP32[$6 + 4 >> 2] = HEAP32[287]; //@line 26802
 HEAP32[$6 + 8 >> 2] = HEAP32[288]; //@line 26802
 HEAP32[$6 + 12 >> 2] = HEAP32[289]; //@line 26802
 HEAP32[$6 + 16 >> 2] = HEAP32[290]; //@line 26802
 HEAP32[$6 + 20 >> 2] = HEAP32[291]; //@line 26802
 $7 = $0 + 448 | 0; //@line 26803
 HEAP32[$7 >> 2] = HEAP32[292]; //@line 26804
 HEAP32[$7 + 4 >> 2] = HEAP32[293]; //@line 26804
 HEAP32[$7 + 8 >> 2] = HEAP32[294]; //@line 26804
 HEAP32[$7 + 12 >> 2] = HEAP32[295]; //@line 26804
 HEAP32[$7 + 16 >> 2] = HEAP32[296]; //@line 26804
 HEAP32[$7 + 20 >> 2] = HEAP32[297]; //@line 26804
 $8 = $0 + 136 | 0; //@line 26805
 HEAP32[$8 >> 2] = HEAP32[298]; //@line 26806
 HEAP32[$8 + 4 >> 2] = HEAP32[299]; //@line 26806
 HEAP32[$8 + 8 >> 2] = HEAP32[300]; //@line 26806
 $9 = $0 + 148 | 0; //@line 26807
 HEAP32[$9 >> 2] = HEAP32[301]; //@line 26808
 HEAP32[$9 + 4 >> 2] = HEAP32[302]; //@line 26808
 HEAP32[$9 + 8 >> 2] = HEAP32[303]; //@line 26808
 $10 = $0 + 160 | 0; //@line 26809
 HEAP32[$10 >> 2] = HEAP32[304]; //@line 26810
 HEAP32[$10 + 4 >> 2] = HEAP32[305]; //@line 26810
 HEAP32[$10 + 8 >> 2] = HEAP32[306]; //@line 26810
 $11 = $0 + 474 | 0; //@line 26811
 HEAP16[$11 >> 1] = 7; //@line 26812
 $12 = $0 + 472 | 0; //@line 26813
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $12, $11, 1); //@line 26814
 HEAP32[$0 + 112 >> 2] = $8; //@line 26816
 HEAP8[$0 + 116 >> 0] = 16; //@line 26818
 HEAP32[$0 + 120 >> 2] = $12; //@line 26820
 HEAP32[$0 + 124 >> 2] = $11; //@line 26822
 HEAP8[$0 + 128 >> 0] = 1; //@line 26824
 HEAP32[$0 + 72 >> 2] = $2; //@line 26826
 HEAP8[$0 + 76 >> 0] = 6; //@line 26828
 HEAP32[$0 + 80 >> 2] = 1228; //@line 26830
 HEAP8[$0 + 84 >> 0] = 8; //@line 26832
 HEAP32[$0 + 88 >> 2] = 13710; //@line 26834
 HEAP8[$0 + 92 >> 0] = 8; //@line 26836
 HEAP32[$0 + 96 >> 2] = 13718; //@line 26838
 HEAP8[$0 + 100 >> 0] = 8; //@line 26840
 HEAP32[$0 + 104 >> 2] = 13726; //@line 26842
 HEAP8[$0 + 108 >> 0] = 8; //@line 26844
 $28 = $0 + 132 | 0; //@line 26845
 HEAP8[$28 >> 0] = HEAP8[$28 >> 0] & -4; //@line 26848
 $31 = $0 + 12 | 0; //@line 26849
 $32 = $0 + 18 | 0; //@line 26850
 HEAP32[$31 >> 2] = 16843009; //@line 26851
 HEAP16[$31 + 4 >> 1] = 257; //@line 26851
 HEAP8[$32 >> 0] = 3; //@line 26852
 HEAP8[$0 + 20 >> 0] = 16; //@line 26854
 HEAP8[$0 + 19 >> 0] = 5; //@line 26856
 HEAP8[$0 + 26 >> 0] = 0; //@line 26858
 HEAP8[$0 + 27 >> 0] = 7; //@line 26860
 HEAP8[$0 + 28 >> 0] = 0; //@line 26862
 HEAP8[$0 + 29 >> 0] = 7; //@line 26864
 HEAP8[$0 + 30 >> 0] = 0; //@line 26866
 HEAP8[$0 + 31 >> 0] = 5; //@line 26868
 HEAP8[$0 + 32 >> 0] = 0; //@line 26870
 HEAP8[$0 + 33 >> 0] = 5; //@line 26872
 HEAP8[$0 + 34 >> 0] = 0; //@line 26874
 HEAP8[$0 + 21 >> 0] = 7; //@line 26876
 HEAP8[$0 + 22 >> 0] = 0; //@line 26878
 HEAP8[$0 + 23 >> 0] = 0; //@line 26880
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 26882
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 26884
 HEAP8[$0 + 24 >> 0] = 64; //@line 26886
 HEAP8[$0 + 25 >> 0] = 32; //@line 26888
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 26890
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 26892
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 26894
 HEAP16[$0 + 46 >> 1] = 7; //@line 26896
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 26898
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 26900
 HEAP16[$0 + 48 >> 1] = 16384; //@line 26902
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 26904
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 26906
 HEAP8[$0 + 64 >> 0] = 0; //@line 26908
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 26910
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5366
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5367
 _initialize($0); //@line 5368
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 712; //@line 5371
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5373
  sp = STACKTOP; //@line 5374
  tempRet0 = 0; //@line 5375
  return 0; //@line 5376
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5378
 $2 = $0 + 4 | 0; //@line 5379
 $3 = HEAP32[$2 >> 2] | 0; //@line 5380
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5383
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5384
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 5385
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 713; //@line 5388
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5390
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5392
  sp = STACKTOP; //@line 5393
  tempRet0 = 0; //@line 5394
  return 0; //@line 5395
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5397
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 5403
  $104 = $103 + 48 | 0; //@line 5404
  $105 = $104; //@line 5405
  $106 = $105; //@line 5406
  $107 = HEAP32[$106 >> 2] | 0; //@line 5407
  $108 = $105 + 4 | 0; //@line 5408
  $109 = $108; //@line 5409
  $110 = HEAP32[$109 >> 2] | 0; //@line 5410
  tempRet0 = $110; //@line 5411
  return $107 | 0; //@line 5412
 }
 $14 = $3 + 32 | 0; //@line 5414
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 5419
 HEAP32[$14 >> 2] = $7; //@line 5420
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 5422
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 5431
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5435
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5437
   $25 = tempRet0; //@line 5438
   $28 = $3 + 40 | 0; //@line 5441
   $29 = $28; //@line 5442
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5448
   $36 = tempRet0; //@line 5449
   $37 = $28; //@line 5450
   HEAP32[$37 >> 2] = $35; //@line 5452
   HEAP32[$37 + 4 >> 2] = $36; //@line 5455
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 5462
    $96 = $25; //@line 5462
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5464
    $47 = tempRet0; //@line 5465
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5466
    $50 = $28; //@line 5468
    HEAP32[$50 >> 2] = $48; //@line 5470
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5473
    $95 = $46; //@line 5474
    $96 = $47; //@line 5474
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 5479
     $96 = 0; //@line 5479
     break;
    }
   default:
    {
     label = 9; //@line 5483
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5489
  $55 = tempRet0; //@line 5490
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5491
  $57 = tempRet0; //@line 5492
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5493
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5495
  $62 = $3 + 40 | 0; //@line 5497
  $63 = $62; //@line 5498
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5504
  $70 = tempRet0; //@line 5505
  $71 = $62; //@line 5506
  HEAP32[$71 >> 2] = $69; //@line 5508
  HEAP32[$71 + 4 >> 2] = $70; //@line 5511
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 5518
   $96 = $57; //@line 5518
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5520
   $81 = tempRet0; //@line 5521
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5522
   $84 = $62; //@line 5524
   HEAP32[$84 >> 2] = $82; //@line 5526
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5529
   $95 = $80; //@line 5530
   $96 = $81; //@line 5530
  }
 }
 $88 = $3 + 48 | 0; //@line 5533
 $89 = $88; //@line 5534
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5540
 $99 = $88; //@line 5542
 HEAP32[$99 >> 2] = $97; //@line 5544
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5547
 $103 = HEAP32[$2 >> 2] | 0; //@line 5548
 $104 = $103 + 48 | 0; //@line 5549
 $105 = $104; //@line 5550
 $106 = $105; //@line 5551
 $107 = HEAP32[$106 >> 2] | 0; //@line 5552
 $108 = $105 + 4 | 0; //@line 5553
 $109 = $108; //@line 5554
 $110 = HEAP32[$109 >> 2] | 0; //@line 5555
 tempRet0 = $110; //@line 5556
 return $107 | 0; //@line 5557
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $32 = 0, $33 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19161
 STACKTOP = STACKTOP + 32 | 0; //@line 19162
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19162
 $$byval_copy = sp + 24 | 0; //@line 19163
 $vararg_buffer3 = sp + 16 | 0; //@line 19164
 $vararg_buffer1 = sp + 8 | 0; //@line 19165
 _printf(12967, sp) | 0; //@line 19167
 _printf(13548, $vararg_buffer1) | 0; //@line 19168
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19169
 _putchar(10) | 0; //@line 19170
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 561; //@line 19173
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 19175
  HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 19177
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 19179
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 19181
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer3; //@line 19183
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 19185
  HEAP32[$AsyncCtx9 + 28 >> 2] = $$byval_copy; //@line 19187
  sp = STACKTOP; //@line 19188
  STACKTOP = sp; //@line 19189
  return 0; //@line 19189
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 19191
 $10 = $0 + 360 | 0; //@line 19193
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19194
 $11 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $10) | 0; //@line 19195
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 562; //@line 19198
  HEAP32[$AsyncCtx12 + 4 >> 2] = $10; //@line 19200
  HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 19202
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer1; //@line 19204
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer3; //@line 19206
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer3; //@line 19208
  HEAP32[$AsyncCtx12 + 24 >> 2] = $$byval_copy; //@line 19210
  HEAP32[$AsyncCtx12 + 28 >> 2] = $$byval_copy; //@line 19212
  HEAP32[$AsyncCtx12 + 32 >> 2] = $0; //@line 19214
  sp = STACKTOP; //@line 19215
  STACKTOP = sp; //@line 19216
  return 0; //@line 19216
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 19218
 if ($11 | 0) {
  STACKTOP = sp; //@line 19221
  return $11 | 0; //@line 19221
 }
 if ((HEAP32[$10 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 19226
  return $11 | 0; //@line 19226
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 8; //@line 19234
   break;
  }
 default:
  {
   STACKTOP = sp; //@line 19238
   return $11 | 0; //@line 19238
  }
 }
 if ((label | 0) == 8) {
  if (!(HEAP8[$0 + 372 >> 0] | 0)) {
   STACKTOP = sp; //@line 19246
   return $11 | 0; //@line 19246
  }
 }
 _printf(12967, $vararg_buffer3) | 0; //@line 19249
 _printf(12994, $$byval_copy) | 0; //@line 19250
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 19251
 _putchar(10) | 0; //@line 19252
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 563; //@line 19255
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19257
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 19259
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 19261
  HEAP32[$AsyncCtx + 16 >> 2] = $11; //@line 19263
  sp = STACKTOP; //@line 19264
  STACKTOP = sp; //@line 19265
  return 0; //@line 19265
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19267
 $32 = HEAP32[$0 + 1328 >> 2] | 0; //@line 19269
 HEAP32[$vararg_buffer1 >> 2] = 361; //@line 19270
 HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 19272
 $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19273
 HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 19274
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 19274
 $33 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($32, $0, $$byval_copy) | 0; //@line 19275
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 564; //@line 19278
  HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer1; //@line 19280
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 19282
  HEAP32[$AsyncCtx15 + 12 >> 2] = $11; //@line 19284
  sp = STACKTOP; //@line 19285
  STACKTOP = sp; //@line 19286
  return 0; //@line 19286
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19288
 do {
  if (!$33) {
   $AsyncCtx19 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19292
   _mbed_assert_internal(12851, 12860, 217); //@line 19293
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 565; //@line 19296
    HEAP32[$AsyncCtx19 + 4 >> 2] = $vararg_buffer1; //@line 19298
    HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 19300
    HEAP32[$AsyncCtx19 + 12 >> 2] = $11; //@line 19302
    sp = STACKTOP; //@line 19303
    STACKTOP = sp; //@line 19304
    return 0; //@line 19304
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19306
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 364 >> 2] = 2; //@line 19312
 STACKTOP = sp; //@line 19313
 return $11 | 0; //@line 19313
}
function __ZL18lora_event_handler11lora_events($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $1 = 0, $10 = 0, $15 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6799
 STACKTOP = STACKTOP + 96 | 0; //@line 6800
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 6800
 $vararg_buffer11 = sp + 32 | 0; //@line 6801
 $vararg_buffer8 = sp + 24 | 0; //@line 6802
 $vararg_buffer4 = sp + 16 | 0; //@line 6803
 $vararg_buffer1 = sp + 8 | 0; //@line 6804
 $vararg_buffer = sp; //@line 6805
 $1 = sp + 36 | 0; //@line 6806
 switch ($0 | 0) {
 case 0:
  {
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6809
   _puts(15489) | 0; //@line 6810
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 760; //@line 6813
    sp = STACKTOP; //@line 6814
    STACKTOP = sp; //@line 6815
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6817
   STACKTOP = sp; //@line 6818
   return;
  }
 case 1:
  {
   __ZN6events10EventQueue14break_dispatchEv(22968); //@line 6822
   $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6823
   _puts(15513) | 0; //@line 6824
   if (___async) {
    HEAP32[$AsyncCtx27 >> 2] = 761; //@line 6827
    sp = STACKTOP; //@line 6828
    STACKTOP = sp; //@line 6829
    return;
   }
   _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6831
   STACKTOP = sp; //@line 6832
   return;
  }
 case 2:
  {
   $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6836
   _puts(15539) | 0; //@line 6837
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 762; //@line 6840
    sp = STACKTOP; //@line 6841
    STACKTOP = sp; //@line 6842
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6844
   STACKTOP = sp; //@line 6845
   return;
  }
 case 6:
 case 5:
 case 4:
 case 3:
  {
   HEAP32[$vararg_buffer >> 2] = $0; //@line 6849
   _printf(15570, $vararg_buffer) | 0; //@line 6850
   STACKTOP = sp; //@line 6851
   return;
  }
 case 7:
  {
   $AsyncCtx19 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6855
   _puts(15607) | 0; //@line 6856
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 763; //@line 6859
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 6861
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer1; //@line 6863
    HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer1; //@line 6865
    HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer4; //@line 6867
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer4; //@line 6869
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer8; //@line 6871
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer8; //@line 6873
    sp = STACKTOP; //@line 6874
    STACKTOP = sp; //@line 6875
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6877
   dest = $1; //@line 6878
   stop = dest + 50 | 0; //@line 6878
   do {
    HEAP8[dest >> 0] = 0; //@line 6878
    dest = dest + 1 | 0; //@line 6878
   } while ((dest | 0) < (stop | 0));
   $9 = __ZN16LoRaWANInterface7receiveEhPhti(23168, 15, $1, 50, 3) | 0; //@line 6879
   $10 = $9 << 16 >> 16; //@line 6880
   do {
    if ($9 << 16 >> 16 < 0) {
     HEAP32[$vararg_buffer1 >> 2] = $10; //@line 6884
     _printf(15644, $vararg_buffer1) | 0; //@line 6885
    } else {
     HEAP32[$vararg_buffer4 >> 2] = 15; //@line 6887
     HEAP32[$vararg_buffer4 + 4 >> 2] = $10; //@line 6889
     _printf(15671, $vararg_buffer4) | 0; //@line 6890
     if ($9 << 16 >> 16) {
      $$07$i = 0; //@line 6893
      $15 = 0; //@line 6893
      do {
       HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$1 + $15 >> 0]; //@line 6898
       _printf(15709, $vararg_buffer8) | 0; //@line 6899
       $$07$i = $$07$i + 1 << 24 >> 24; //@line 6900
       $15 = $$07$i & 255; //@line 6901
      } while (($15 | 0) < ($10 | 0));
     }
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6910
     _putchar(10) | 0; //@line 6911
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 764; //@line 6914
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6916
      sp = STACKTOP; //@line 6917
      STACKTOP = sp; //@line 6918
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 6920
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 6925
   return;
  }
 case 9:
 case 8:
  {
   HEAP32[$vararg_buffer11 >> 2] = $0; //@line 6929
   _printf(15715, $vararg_buffer11) | 0; //@line 6930
   STACKTOP = sp; //@line 6931
   return;
  }
 case 10:
  {
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6935
   _puts(15747) | 0; //@line 6936
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 765; //@line 6939
    sp = STACKTOP; //@line 6940
    STACKTOP = sp; //@line 6941
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6943
   STACKTOP = sp; //@line 6944
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 6948
   return;
  }
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_447($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $4 = 0, $47 = 0, $48 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22957
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22959
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22961
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22963
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22965
 if (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0) {
  $13 = $6 + 1892 | 0; //@line 22971
  $14 = HEAP32[$13 >> 2] | 0; //@line 22972
  if (!$14) {
   return;
  }
  $18 = HEAP32[$6 + 2288 >> 2] | 0; //@line 22979
  $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 22981
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 22982
  FUNCTION_TABLE_vii[$20 & 31]($8, $6 + 1880 | 0); //@line 22983
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 22986
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 22987
   HEAP32[$21 >> 2] = $13; //@line 22988
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 22989
   HEAP32[$22 >> 2] = $8; //@line 22990
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 22991
   HEAP32[$23 >> 2] = $18; //@line 22992
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 22993
   HEAP32[$24 >> 2] = $8; //@line 22994
   sp = STACKTOP; //@line 22995
   return;
  }
  ___async_unwind = 0; //@line 22998
  HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 22999
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 23000
  HEAP32[$21 >> 2] = $13; //@line 23001
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 23002
  HEAP32[$22 >> 2] = $8; //@line 23003
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 23004
  HEAP32[$23 >> 2] = $18; //@line 23005
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 23006
  HEAP32[$24 >> 2] = $8; //@line 23007
  sp = STACKTOP; //@line 23008
  return;
 }
 $25 = $6 + 1960 | 0; //@line 23011
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1; //@line 23014
 if (!(HEAP8[$4 + 18 >> 0] | 0)) {
  return;
 }
 $31 = $4 + 9 | 0; //@line 23021
 $32 = HEAP8[$31 >> 0] | 0; //@line 23022
 if ($32 << 24 >> 24 == -32) {
  return;
 }
 if (($32 + -1 & 255) >= 223) {
  if ((HEAP32[$4 >> 2] | 0) != 3) {
   return;
  }
 }
 HEAP32[$6 + 2240 >> 2] = 2; //@line 23037
 HEAP16[$6 + 2260 >> 1] = HEAP16[$4 + 16 >> 1] | 0; //@line 23041
 HEAP8[$6 + 2253 >> 0] = HEAP8[$31 >> 0] | 0; //@line 23044
 HEAP32[$6 + 2256 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 23048
 HEAP8[$6 + 2236 >> 0] = 1; //@line 23050
 $47 = $6 + 1892 | 0; //@line 23051
 $48 = HEAP32[$47 >> 2] | 0; //@line 23052
 if ($48 | 0) {
  $52 = HEAP32[$6 + 2288 >> 2] | 0; //@line 23057
  $54 = HEAP32[$48 + 4 >> 2] | 0; //@line 23059
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 23060
  FUNCTION_TABLE_vii[$54 & 31]($2, $6 + 1880 | 0); //@line 23061
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 23064
   $55 = $ReallocAsyncCtx3 + 4 | 0; //@line 23065
   HEAP32[$55 >> 2] = $47; //@line 23066
   $56 = $ReallocAsyncCtx3 + 8 | 0; //@line 23067
   HEAP32[$56 >> 2] = $2; //@line 23068
   $57 = $ReallocAsyncCtx3 + 12 | 0; //@line 23069
   HEAP32[$57 >> 2] = $52; //@line 23070
   $58 = $ReallocAsyncCtx3 + 16 | 0; //@line 23071
   HEAP32[$58 >> 2] = $2; //@line 23072
   $59 = $ReallocAsyncCtx3 + 20 | 0; //@line 23073
   HEAP32[$59 >> 2] = $4; //@line 23074
   $60 = $ReallocAsyncCtx3 + 24 | 0; //@line 23075
   HEAP32[$60 >> 2] = $31; //@line 23076
   $61 = $ReallocAsyncCtx3 + 28 | 0; //@line 23077
   HEAP32[$61 >> 2] = $6; //@line 23078
   sp = STACKTOP; //@line 23079
   return;
  }
  ___async_unwind = 0; //@line 23082
  HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 23083
  $55 = $ReallocAsyncCtx3 + 4 | 0; //@line 23084
  HEAP32[$55 >> 2] = $47; //@line 23085
  $56 = $ReallocAsyncCtx3 + 8 | 0; //@line 23086
  HEAP32[$56 >> 2] = $2; //@line 23087
  $57 = $ReallocAsyncCtx3 + 12 | 0; //@line 23088
  HEAP32[$57 >> 2] = $52; //@line 23089
  $58 = $ReallocAsyncCtx3 + 16 | 0; //@line 23090
  HEAP32[$58 >> 2] = $2; //@line 23091
  $59 = $ReallocAsyncCtx3 + 20 | 0; //@line 23092
  HEAP32[$59 >> 2] = $4; //@line 23093
  $60 = $ReallocAsyncCtx3 + 24 | 0; //@line 23094
  HEAP32[$60 >> 2] = $31; //@line 23095
  $61 = $ReallocAsyncCtx3 + 28 | 0; //@line 23096
  HEAP32[$61 >> 2] = $6; //@line 23097
  sp = STACKTOP; //@line 23098
  return;
 }
 if (!(HEAP8[$4 + 11 >> 0] | 0)) {
  return;
 }
 $65 = HEAP8[$31 >> 0] | 0; //@line 23107
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 23108
 __ZN12LoRaWANStack9handle_txEhPKhth($6, $65, 0, 0, 2) | 0; //@line 23109
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 23112
  sp = STACKTOP; //@line 23113
  return;
 }
 ___async_unwind = 0; //@line 23116
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 23117
 sp = STACKTOP; //@line 23118
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_40($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 22094
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22098
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22100
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 22103
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 22105
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 22107
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 22109
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 22111
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 22113
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 22115
 $20 = $4 + 944 | 0; //@line 22116
 HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 16; //@line 22119
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 22120
 if ($8) {
  $$3$off0204 = 6; //@line 22122
 } else {
  $26 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 22127
  if ($10 & 32) {
   HEAP8[$26 >> 0] = 1; //@line 22129
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 22132
   $29 = HEAP32[$14 >> 2] | 0; //@line 22133
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 22135
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($29, $4 + 1076 | 0); //@line 22136
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 22139
    $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 22140
    HEAP32[$31 >> 2] = $4; //@line 22141
    $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 22142
    HEAP32[$32 >> 2] = $14; //@line 22143
    $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 22144
    HEAP32[$33 >> 2] = $16; //@line 22145
    $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 22146
    HEAP32[$34 >> 2] = $18; //@line 22147
    sp = STACKTOP; //@line 22148
    return;
   }
   ___async_unwind = 0; //@line 22151
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 22152
   $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 22153
   HEAP32[$31 >> 2] = $4; //@line 22154
   $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 22155
   HEAP32[$32 >> 2] = $14; //@line 22156
   $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 22157
   HEAP32[$33 >> 2] = $16; //@line 22158
   $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 22159
   HEAP32[$34 >> 2] = $18; //@line 22160
   sp = STACKTOP; //@line 22161
   return;
  }
  HEAP8[$26 >> 0] = 0; //@line 22164
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $40 = HEAP32[$14 >> 2] | 0; //@line 22171
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 22173
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($40, $4 + 1076 | 0); //@line 22174
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 22177
    $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 22178
    HEAP32[$42 >> 2] = $4; //@line 22179
    $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 22180
    HEAP32[$43 >> 2] = $14; //@line 22181
    $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 22182
    HEAP32[$44 >> 2] = $16; //@line 22183
    $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 22184
    HEAP32[$45 >> 2] = $18; //@line 22185
    sp = STACKTOP; //@line 22186
    return;
   }
   ___async_unwind = 0; //@line 22189
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 22190
   $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 22191
   HEAP32[$42 >> 2] = $4; //@line 22192
   $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 22193
   HEAP32[$43 >> 2] = $14; //@line 22194
   $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 22195
   HEAP32[$44 >> 2] = $16; //@line 22196
   $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 22197
   HEAP32[$45 >> 2] = $18; //@line 22198
   sp = STACKTOP; //@line 22199
   return;
  } else {
   $$3$off0204 = 2; //@line 22202
  }
 }
 $46 = $4 + 944 | 0; //@line 22205
 HEAP8[$46 >> 0] = $$3$off0204 | HEAP8[$46 >> 0] & -7; //@line 22209
 $50 = $4 + 944 | 0; //@line 22210
 HEAP8[$50 >> 0] = HEAP8[$50 >> 0] | 32; //@line 22213
 $53 = HEAP32[$14 >> 2] | 0; //@line 22214
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 22216
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($53, $4 + 996 | 0, 1); //@line 22217
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 22220
  $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 22221
  HEAP32[$55 >> 2] = $16; //@line 22222
  $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 22223
  HEAP32[$56 >> 2] = $18; //@line 22224
  sp = STACKTOP; //@line 22225
  return;
 }
 ___async_unwind = 0; //@line 22228
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 22229
 $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 22230
 HEAP32[$55 >> 2] = $16; //@line 22231
 $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 22232
 HEAP32[$56 >> 2] = $18; //@line 22233
 sp = STACKTOP; //@line 22234
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_38($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 21763
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21769
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 21772
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 21774
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 21776
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 21778
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 21780
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 21782
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 21784
 $20 = $4 + 944 | 0; //@line 21785
 HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 16; //@line 21788
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 21789
 if ($8) {
  $$3$off0204 = 6; //@line 21791
 } else {
  $26 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 21796
  if ($10 & 32) {
   HEAP8[$26 >> 0] = 1; //@line 21798
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 21801
   $29 = HEAP32[$14 >> 2] | 0; //@line 21802
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 21804
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($29, $4 + 1076 | 0); //@line 21805
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 21808
    $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 21809
    HEAP32[$31 >> 2] = $4; //@line 21810
    $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 21811
    HEAP32[$32 >> 2] = $14; //@line 21812
    $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 21813
    HEAP32[$33 >> 2] = $16; //@line 21814
    $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 21815
    HEAP32[$34 >> 2] = $18; //@line 21816
    sp = STACKTOP; //@line 21817
    return;
   }
   ___async_unwind = 0; //@line 21820
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 21821
   $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 21822
   HEAP32[$31 >> 2] = $4; //@line 21823
   $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 21824
   HEAP32[$32 >> 2] = $14; //@line 21825
   $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 21826
   HEAP32[$33 >> 2] = $16; //@line 21827
   $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 21828
   HEAP32[$34 >> 2] = $18; //@line 21829
   sp = STACKTOP; //@line 21830
   return;
  }
  HEAP8[$26 >> 0] = 0; //@line 21833
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $40 = HEAP32[$14 >> 2] | 0; //@line 21840
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 21842
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($40, $4 + 1076 | 0); //@line 21843
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 21846
    $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 21847
    HEAP32[$42 >> 2] = $4; //@line 21848
    $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 21849
    HEAP32[$43 >> 2] = $14; //@line 21850
    $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 21851
    HEAP32[$44 >> 2] = $16; //@line 21852
    $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 21853
    HEAP32[$45 >> 2] = $18; //@line 21854
    sp = STACKTOP; //@line 21855
    return;
   }
   ___async_unwind = 0; //@line 21858
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 21859
   $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 21860
   HEAP32[$42 >> 2] = $4; //@line 21861
   $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 21862
   HEAP32[$43 >> 2] = $14; //@line 21863
   $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 21864
   HEAP32[$44 >> 2] = $16; //@line 21865
   $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 21866
   HEAP32[$45 >> 2] = $18; //@line 21867
   sp = STACKTOP; //@line 21868
   return;
  } else {
   $$3$off0204 = 2; //@line 21871
  }
 }
 $46 = $4 + 944 | 0; //@line 21874
 HEAP8[$46 >> 0] = $$3$off0204 | HEAP8[$46 >> 0] & -7; //@line 21878
 $50 = $4 + 944 | 0; //@line 21879
 HEAP8[$50 >> 0] = HEAP8[$50 >> 0] | 32; //@line 21882
 $53 = HEAP32[$14 >> 2] | 0; //@line 21883
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 21885
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($53, $4 + 996 | 0, 1); //@line 21886
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 21889
  $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 21890
  HEAP32[$55 >> 2] = $16; //@line 21891
  $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 21892
  HEAP32[$56 >> 2] = $18; //@line 21893
  sp = STACKTOP; //@line 21894
  return;
 }
 ___async_unwind = 0; //@line 21897
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 21898
 $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 21899
 HEAP32[$55 >> 2] = $16; //@line 21900
 $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 21901
 HEAP32[$56 >> 2] = $18; //@line 21902
 sp = STACKTOP; //@line 21903
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_239($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $110 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 38393
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 38395
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 38397
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 38399
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 38401
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 38403
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 38405
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 38407
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 38409
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 38411
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 38413
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 38415
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 38417
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 38419
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 38421
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 38423
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 38425
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 38427
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 38429
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 38431
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 38433
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 38435
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 38437
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 38439
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 38443
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 38445
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 38447
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 38449
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 38451
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 38453
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 38455
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 38457
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 38459
 if (!(HEAP8[HEAP32[$0 + 96 >> 2] >> 0] | 0)) {
  $$1 = -1017; //@line 38463
  $110 = ___async_retval; //@line 38464
  HEAP16[$110 >> 1] = $$1; //@line 38465
  return;
 }
 if (HEAP8[$38 >> 0] | 0) {
  $$1 = -1001; //@line 38471
  $110 = ___async_retval; //@line 38472
  HEAP16[$110 >> 1] = $$1; //@line 38473
  return;
 }
 $72 = $12 << 16 >> 16 == 0; //@line 38477
 if (!(($10 | 0) != 0 | $72)) {
  $$1 = -1003; //@line 38480
  $110 = ___async_retval; //@line 38481
  HEAP16[$110 >> 1] = $$1; //@line 38482
  return;
 }
 HEAP32[$42 >> 2] = 1; //@line 38485
 $73 = $22 + 4 | 0; //@line 38486
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(140) | 0; //@line 38487
 $74 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($73, $42) | 0; //@line 38488
 if (!___async) {
  HEAP32[___async_retval >> 2] = $74; //@line 38492
  ___async_unwind = 0; //@line 38493
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 299; //@line 38495
 HEAP8[$ReallocAsyncCtx9 + 4 >> 0] = $2; //@line 38497
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 38499
 HEAP8[$ReallocAsyncCtx9 + 12 >> 0] = $6; //@line 38501
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 38503
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 38505
 HEAP16[$ReallocAsyncCtx9 + 24 >> 1] = $12; //@line 38507
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $14; //@line 38509
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 38511
 HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $18; //@line 38513
 HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $20; //@line 38515
 HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $22; //@line 38517
 HEAP32[$ReallocAsyncCtx9 + 48 >> 2] = $24; //@line 38519
 HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 38521
 HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 38523
 HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $30; //@line 38525
 HEAP32[$ReallocAsyncCtx9 + 64 >> 2] = $32; //@line 38527
 HEAP32[$ReallocAsyncCtx9 + 68 >> 2] = $34; //@line 38529
 HEAP32[$ReallocAsyncCtx9 + 72 >> 2] = $42; //@line 38531
 HEAP32[$ReallocAsyncCtx9 + 76 >> 2] = $36; //@line 38533
 HEAP32[$ReallocAsyncCtx9 + 80 >> 2] = $40; //@line 38535
 HEAP32[$ReallocAsyncCtx9 + 84 >> 2] = $42; //@line 38537
 HEAP32[$ReallocAsyncCtx9 + 88 >> 2] = $44; //@line 38539
 HEAP32[$ReallocAsyncCtx9 + 92 >> 2] = $46; //@line 38541
 HEAP8[$ReallocAsyncCtx9 + 96 >> 0] = $72 & 1; //@line 38544
 HEAP32[$ReallocAsyncCtx9 + 100 >> 2] = $50; //@line 38546
 HEAP32[$ReallocAsyncCtx9 + 104 >> 2] = $52; //@line 38548
 HEAP32[$ReallocAsyncCtx9 + 108 >> 2] = $54; //@line 38550
 HEAP32[$ReallocAsyncCtx9 + 112 >> 2] = $73; //@line 38552
 HEAP32[$ReallocAsyncCtx9 + 116 >> 2] = $56; //@line 38554
 HEAP32[$ReallocAsyncCtx9 + 120 >> 2] = $58; //@line 38556
 HEAP32[$ReallocAsyncCtx9 + 124 >> 2] = $60; //@line 38558
 HEAP32[$ReallocAsyncCtx9 + 128 >> 2] = $62; //@line 38560
 HEAP32[$ReallocAsyncCtx9 + 132 >> 2] = $64; //@line 38562
 HEAP32[$ReallocAsyncCtx9 + 136 >> 2] = $66; //@line 38564
 sp = STACKTOP; //@line 38565
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_52($0) {
 $0 = $0 | 0;
 var $10 = 0, $109 = 0, $113 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 23972
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23974
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23976
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23978
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23980
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23982
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23984
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23986
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23988
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23990
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23992
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23994
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23996
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23998
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24000
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24002
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 24009
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 638) >> 0] | 0) << 8 | (HEAPU8[$2 + 638 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 638) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 638) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 24039
  $132 = $2 + 944 | 0; //@line 24040
  HEAP8[$132 >> 0] = HEAP8[$132 >> 0] | 32; //@line 24043
  $135 = HEAP32[$24 >> 2] | 0; //@line 24044
  $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 24046
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($135, $2 + 996 | 0, 1); //@line 24047
  if (___async) {
   HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 24050
   $137 = $ReallocAsyncCtx17 + 4 | 0; //@line 24051
   HEAP32[$137 >> 2] = $12; //@line 24052
   $138 = $ReallocAsyncCtx17 + 8 | 0; //@line 24053
   HEAP32[$138 >> 2] = $14; //@line 24054
   sp = STACKTOP; //@line 24055
   return;
  }
  ___async_unwind = 0; //@line 24058
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 24059
  $137 = $ReallocAsyncCtx17 + 4 | 0; //@line 24060
  HEAP32[$137 >> 2] = $12; //@line 24061
  $138 = $ReallocAsyncCtx17 + 8 | 0; //@line 24062
  HEAP32[$138 >> 2] = $14; //@line 24063
  sp = STACKTOP; //@line 24064
  return;
 }
 if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$16 >> 2] | 0, $18, HEAP16[$2 + 946 >> 1] | 0, $20, $22) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 24075
  return;
 }
 HEAP32[$2 + 948 >> 2] = (HEAPU8[$2 + 644 >> 0] | 0) << 16 | ((HEAPU8[$2 + 643 >> 0] | 0) << 8 | (HEAPU8[$2 + 642 >> 0] | 0)); //@line 24092
 HEAP32[$2 + 952 >> 2] = (HEAPU8[$2 + 648 >> 0] | 0) << 24 | ((HEAPU8[$2 + 647 >> 0] | 0) << 16 | ((HEAPU8[$2 + 646 >> 0] | 0) << 8 | (HEAPU8[$2 + 645 >> 0] | 0))); //@line 24112
 $99 = HEAP8[$2 + 649 >> 0] | 0; //@line 24114
 HEAP8[$2 + 1129 >> 0] = ($99 & 255) >>> 4 & 7; //@line 24120
 HEAP8[$2 + 1136 >> 0] = $99 & 15; //@line 24123
 $109 = HEAP8[$2 + 650 >> 0] & 15; //@line 24126
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 24131
 HEAP32[$2 + 1112 >> 2] = $113; //@line 24132
 HEAP32[$2 + 1116 >> 2] = $113 + 1e3; //@line 24135
 HEAP32[$26 >> 2] = $2 + 651; //@line 24137
 HEAP8[$26 + 4 >> 0] = $6 + 239; //@line 24141
 $120 = HEAP32[$28 >> 2] | 0; //@line 24142
 $123 = HEAP32[(HEAP32[$120 >> 2] | 0) + 20 >> 2] | 0; //@line 24145
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 24146
 FUNCTION_TABLE_vii[$123 & 31]($120, $26); //@line 24147
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 391; //@line 24150
  $124 = $ReallocAsyncCtx + 4 | 0; //@line 24151
  HEAP32[$124 >> 2] = $2; //@line 24152
  $125 = $ReallocAsyncCtx + 8 | 0; //@line 24153
  HEAP32[$125 >> 2] = $30; //@line 24154
  $126 = $ReallocAsyncCtx + 12 | 0; //@line 24155
  HEAP32[$126 >> 2] = $24; //@line 24156
  $127 = $ReallocAsyncCtx + 16 | 0; //@line 24157
  HEAP32[$127 >> 2] = $12; //@line 24158
  $128 = $ReallocAsyncCtx + 20 | 0; //@line 24159
  HEAP32[$128 >> 2] = $14; //@line 24160
  sp = STACKTOP; //@line 24161
  return;
 }
 ___async_unwind = 0; //@line 24164
 HEAP32[$ReallocAsyncCtx >> 2] = 391; //@line 24165
 $124 = $ReallocAsyncCtx + 4 | 0; //@line 24166
 HEAP32[$124 >> 2] = $2; //@line 24167
 $125 = $ReallocAsyncCtx + 8 | 0; //@line 24168
 HEAP32[$125 >> 2] = $30; //@line 24169
 $126 = $ReallocAsyncCtx + 12 | 0; //@line 24170
 HEAP32[$126 >> 2] = $24; //@line 24171
 $127 = $ReallocAsyncCtx + 16 | 0; //@line 24172
 HEAP32[$127 >> 2] = $12; //@line 24173
 $128 = $ReallocAsyncCtx + 20 | 0; //@line 24174
 HEAP32[$128 >> 2] = $14; //@line 24175
 sp = STACKTOP; //@line 24176
 return;
}
function __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$044$lcssa$off0 = 0, $$04458 = 0, $$045$lcssa = 0, $$04557 = 0, $$048$lcssa = 0, $$1 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $125 = 0, $126 = 0, $127 = 0, $134 = 0, $136 = 0, $27 = 0, $29 = 0, $35 = 0, $41 = 0, $47 = 0, $53 = 0, $59 = 0, $65 = 0, $7 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 _mbedtls_aes_init(22600); //@line 22206
 $7 = _mbedtls_aes_setkey_enc(22600, $2, 128) | 0; //@line 22207
 if ($7 | 0) {
  $$1 = $7; //@line 22210
  _mbedtls_aes_free(22600); //@line 22211
  return $$1 | 0; //@line 22212
 }
 HEAP8[13609] = $4; //@line 22214
 HEAP8[13610] = $3; //@line 22216
 HEAP8[13611] = $3 >>> 8; //@line 22219
 HEAP8[13612] = $3 >>> 16; //@line 22222
 HEAP8[13613] = $3 >>> 24; //@line 22225
 HEAP8[13614] = $5; //@line 22227
 HEAP8[13615] = $5 >>> 8; //@line 22230
 HEAP8[13616] = $5 >>> 16; //@line 22233
 HEAP8[13617] = $5 >>> 24; //@line 22236
 do {
  if (($1 & 65535) > 15) {
   $$04458 = 1; //@line 22241
   $$04557 = 0; //@line 22241
   $126 = $1 & 65535; //@line 22241
   while (1) {
    HEAP8[13619] = $$04458; //@line 22244
    $$04458 = $$04458 + 1 << 16 >> 16; //@line 22245
    $27 = _mbedtls_aes_crypt_ecb(22600, 1, 13604, 23856) | 0; //@line 22246
    if ($27 | 0) {
     $$1 = $27; //@line 22249
     label = 11; //@line 22250
     break;
    }
    $29 = $$04557 & 255; //@line 22253
    HEAP8[$6 + $29 >> 0] = HEAP8[23856] ^ HEAP8[$0 + $29 >> 0]; //@line 22259
    $35 = $29 + 1 | 0; //@line 22260
    HEAP8[$6 + $35 >> 0] = HEAP8[23857] ^ HEAP8[$0 + $35 >> 0]; //@line 22266
    $41 = $29 + 2 | 0; //@line 22267
    HEAP8[$6 + $41 >> 0] = HEAP8[23858] ^ HEAP8[$0 + $41 >> 0]; //@line 22273
    $47 = $29 + 3 | 0; //@line 22274
    HEAP8[$6 + $47 >> 0] = HEAP8[23859] ^ HEAP8[$0 + $47 >> 0]; //@line 22280
    $53 = $29 + 4 | 0; //@line 22281
    HEAP8[$6 + $53 >> 0] = HEAP8[23860] ^ HEAP8[$0 + $53 >> 0]; //@line 22287
    $59 = $29 + 5 | 0; //@line 22288
    HEAP8[$6 + $59 >> 0] = HEAP8[23861] ^ HEAP8[$0 + $59 >> 0]; //@line 22294
    $65 = $29 + 6 | 0; //@line 22295
    HEAP8[$6 + $65 >> 0] = HEAP8[23862] ^ HEAP8[$0 + $65 >> 0]; //@line 22301
    $71 = $29 + 7 | 0; //@line 22302
    HEAP8[$6 + $71 >> 0] = HEAP8[23863] ^ HEAP8[$0 + $71 >> 0]; //@line 22308
    $77 = $29 + 8 | 0; //@line 22309
    HEAP8[$6 + $77 >> 0] = HEAP8[23864] ^ HEAP8[$0 + $77 >> 0]; //@line 22315
    $83 = $29 + 9 | 0; //@line 22316
    HEAP8[$6 + $83 >> 0] = HEAP8[23865] ^ HEAP8[$0 + $83 >> 0]; //@line 22322
    $89 = $29 + 10 | 0; //@line 22323
    HEAP8[$6 + $89 >> 0] = HEAP8[23866] ^ HEAP8[$0 + $89 >> 0]; //@line 22329
    $95 = $29 + 11 | 0; //@line 22330
    HEAP8[$6 + $95 >> 0] = HEAP8[23867] ^ HEAP8[$0 + $95 >> 0]; //@line 22336
    $101 = $29 + 12 | 0; //@line 22337
    HEAP8[$6 + $101 >> 0] = HEAP8[23868] ^ HEAP8[$0 + $101 >> 0]; //@line 22343
    $107 = $29 + 13 | 0; //@line 22344
    HEAP8[$6 + $107 >> 0] = HEAP8[23869] ^ HEAP8[$0 + $107 >> 0]; //@line 22350
    $113 = $29 + 14 | 0; //@line 22351
    HEAP8[$6 + $113 >> 0] = HEAP8[23870] ^ HEAP8[$0 + $113 >> 0]; //@line 22357
    $119 = $29 + 15 | 0; //@line 22358
    HEAP8[$6 + $119 >> 0] = HEAP8[23871] ^ HEAP8[$0 + $119 >> 0]; //@line 22364
    $125 = $126 + 65520 | 0; //@line 22365
    $127 = $125 & 65535; //@line 22366
    if (($127 & 65535) <= 15) {
     label = 6; //@line 22374
     break;
    } else {
     $$04557 = $29 + 16 & 255; //@line 22372
     $126 = $125 & 65535; //@line 22372
    }
   }
   if ((label | 0) == 6) {
    $$044$lcssa$off0 = $$04458 & 255; //@line 22382
    $$045$lcssa = $$04557 + 16 & 255; //@line 22382
    $$048$lcssa = $127; //@line 22382
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free(22600); //@line 22386
    return $$1 | 0; //@line 22387
   }
  } else {
   $$044$lcssa$off0 = 1; //@line 22390
   $$045$lcssa = 0; //@line 22390
   $$048$lcssa = $1; //@line 22390
  }
 } while (0);
 if (!($$048$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 22395
  _mbedtls_aes_free(22600); //@line 22396
  return $$1 | 0; //@line 22397
 }
 HEAP8[13619] = $$044$lcssa$off0; //@line 22399
 $134 = _mbedtls_aes_crypt_ecb(22600, 1, 13604, 23856) | 0; //@line 22400
 if ($134 | 0) {
  $$1 = $134; //@line 22403
  _mbedtls_aes_free(22600); //@line 22404
  return $$1 | 0; //@line 22405
 }
 $wide$trip$count = $$048$lcssa & 65535; //@line 22407
 $indvars$iv = 0; //@line 22408
 do {
  $136 = $indvars$iv + $$045$lcssa | 0; //@line 22410
  HEAP8[$6 + $136 >> 0] = HEAP8[23856 + $indvars$iv >> 0] ^ HEAP8[$0 + $136 >> 0]; //@line 22417
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22418
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 22421
 _mbedtls_aes_free(22600); //@line 22427
 return $$1 | 0; //@line 22428
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01314 = 0, $$015 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $43 = 0, $49 = 0, $54 = 0, $71 = 0, $86 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23731
 STACKTOP = STACKTOP + 16 | 0; //@line 23732
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23732
 $2 = sp; //@line 23733
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 23738
  return;
 }
 $15 = $2 + 8 | 0; //@line 23749
 HEAP8[$15 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 23750
 L4 : do {
  if ((HEAP8[$1 + 4 >> 0] | 0) == 16) {
   $19 = $0 + 18 | 0; //@line 23756
   $20 = HEAP8[$19 >> 0] | 0; //@line 23757
   $21 = $0 + 20 | 0; //@line 23758
   if (($20 & 255) < (HEAPU8[$21 >> 0] | 0)) {
    $24 = $0 + 19 | 0; //@line 23762
    $25 = $2 + 4 | 0; //@line 23763
    $$01314 = 0; //@line 23764
    $$015 = $20; //@line 23764
    $30 = $20; //@line 23764
    while (1) {
     if ((($30 & 255) + (HEAPU8[$24 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $33 = HEAP32[$1 >> 2] | 0; //@line 23773
      $34 = $$01314 & 255; //@line 23774
      $37 = HEAPU8[$33 + $34 >> 0] | 0; //@line 23777
      HEAP32[$2 >> 2] = $37; //@line 23778
      $43 = HEAPU8[$33 + ($34 + 1) >> 0] << 8 | $37; //@line 23784
      HEAP32[$2 >> 2] = $43; //@line 23785
      $49 = HEAPU8[$33 + ($34 + 2) >> 0] << 16 | $43; //@line 23791
      HEAP32[$2 >> 2] = $49 * 100; //@line 23793
      HEAP32[$25 >> 2] = 0; //@line 23794
      if (!$49) {
       label = 11; //@line 23797
      } else {
       $54 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 23801
       $AsyncCtx = _emscripten_alloc_async_context(56, sp) | 0; //@line 23802
       FUNCTION_TABLE_iiii[$54 & 15]($0, $2, $$015) | 0; //@line 23803
       if (___async) {
        label = 9; //@line 23806
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 23809
      }
     } else {
      HEAP32[$2 >> 2] = 0; //@line 23812
      HEAP8[$15 >> 0] = 0; //@line 23813
      HEAP32[$25 >> 2] = 0; //@line 23814
      label = 11; //@line 23815
     }
     if ((label | 0) == 11) {
      label = 0; //@line 23818
      $71 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 23821
      $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 23822
      FUNCTION_TABLE_iii[$71 & 31]($0, $$015) | 0; //@line 23823
      if (___async) {
       label = 12; //@line 23826
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23829
     }
     $86 = HEAP8[$19 >> 0] | 0; //@line 23831
     $91 = $$015 + 1 << 24 >> 24; //@line 23836
     if (($91 & 255) < (HEAPU8[$21 >> 0] | 0)) {
      $$01314 = ($86 & 255) + ($$01314 & 255) & 255; //@line 23840
      $$015 = $91; //@line 23840
      $30 = $86; //@line 23840
     } else {
      break L4;
     }
    }
    if ((label | 0) == 9) {
     HEAP32[$AsyncCtx >> 2] = 615; //@line 23846
     HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 23848
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 23850
     HEAP8[$AsyncCtx + 9 >> 0] = $$015; //@line 23852
     HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 23854
     HEAP32[$AsyncCtx + 16 >> 2] = $24; //@line 23856
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 23858
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 23860
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 23862
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 23864
     HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 23866
     HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 23868
     HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 23870
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 23872
     HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 23874
     sp = STACKTOP; //@line 23875
     STACKTOP = sp; //@line 23876
     return;
    } else if ((label | 0) == 12) {
     HEAP32[$AsyncCtx3 >> 2] = 616; //@line 23879
     HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 23881
     HEAP8[$AsyncCtx3 + 8 >> 0] = $$01314; //@line 23883
     HEAP8[$AsyncCtx3 + 9 >> 0] = $$015; //@line 23885
     HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 23887
     HEAP32[$AsyncCtx3 + 16 >> 2] = $24; //@line 23889
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 23891
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 23893
     HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 23895
     HEAP32[$AsyncCtx3 + 32 >> 2] = $25; //@line 23897
     HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 23899
     HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 23901
     HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 23903
     HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 23905
     HEAP32[$AsyncCtx3 + 52 >> 2] = $2; //@line 23907
     sp = STACKTOP; //@line 23908
     STACKTOP = sp; //@line 23909
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 23914
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27039
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27041
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27043
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27045
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27049
 $11 = $4 + 12 | 0; //@line 27051
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 27052
 $12 = _equeue_alloc($10, 16) | 0; //@line 27053
 if ($12 | 0) {
  $14 = HEAP32[$11 >> 2] | 0; //@line 27056
  if (!$14) {
   HEAP32[$12 + 12 >> 2] = 0; //@line 27060
   _equeue_event_delay($12, $2); //@line 27061
   _equeue_event_dtor($12, 370); //@line 27062
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27063
   $26 = _equeue_post($10, 371, $12) | 0; //@line 27064
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 664; //@line 27067
    $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 27068
    HEAP32[$27 >> 2] = $6; //@line 27069
    $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 27070
    HEAP32[$28 >> 2] = $11; //@line 27071
    $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 27072
    HEAP32[$29 >> 2] = $4; //@line 27073
    sp = STACKTOP; //@line 27074
    return;
   }
   HEAP32[___async_retval >> 2] = $26; //@line 27078
   ___async_unwind = 0; //@line 27079
   HEAP32[$ReallocAsyncCtx4 >> 2] = 664; //@line 27080
   $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 27081
   HEAP32[$27 >> 2] = $6; //@line 27082
   $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 27083
   HEAP32[$28 >> 2] = $11; //@line 27084
   $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 27085
   HEAP32[$29 >> 2] = $4; //@line 27086
   sp = STACKTOP; //@line 27087
   return;
  } else {
   $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 27091
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 27092
   FUNCTION_TABLE_vii[$17 & 31]($12, $4); //@line 27093
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 663; //@line 27096
    $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 27097
    HEAP32[$18 >> 2] = $11; //@line 27098
    $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 27099
    HEAP32[$19 >> 2] = $12; //@line 27100
    $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 27101
    HEAP32[$20 >> 2] = $2; //@line 27102
    $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 27103
    HEAP32[$21 >> 2] = $10; //@line 27104
    $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 27105
    HEAP32[$22 >> 2] = $6; //@line 27106
    $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 27107
    HEAP32[$23 >> 2] = $11; //@line 27108
    $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 27109
    HEAP32[$24 >> 2] = $4; //@line 27110
    sp = STACKTOP; //@line 27111
    return;
   }
   ___async_unwind = 0; //@line 27114
   HEAP32[$ReallocAsyncCtx2 >> 2] = 663; //@line 27115
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 27116
   HEAP32[$18 >> 2] = $11; //@line 27117
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 27118
   HEAP32[$19 >> 2] = $12; //@line 27119
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 27120
   HEAP32[$20 >> 2] = $2; //@line 27121
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 27122
   HEAP32[$21 >> 2] = $10; //@line 27123
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 27124
   HEAP32[$22 >> 2] = $6; //@line 27125
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 27126
   HEAP32[$23 >> 2] = $11; //@line 27127
   $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 27128
   HEAP32[$24 >> 2] = $4; //@line 27129
   sp = STACKTOP; //@line 27130
   return;
  }
 }
 $31 = $6 + 16 | 0; //@line 27134
 HEAP32[$31 >> 2] = 0; //@line 27135
 $32 = HEAP32[$11 >> 2] | 0; //@line 27136
 if ($32 | 0) {
  $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 27140
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27141
  FUNCTION_TABLE_vi[$35 & 1023]($4); //@line 27142
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 27145
   $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 27146
   HEAP32[$36 >> 2] = $31; //@line 27147
   sp = STACKTOP; //@line 27148
   return;
  }
  ___async_unwind = 0; //@line 27151
  HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 27152
  $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 27153
  HEAP32[$36 >> 2] = $31; //@line 27154
  sp = STACKTOP; //@line 27155
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27162
 _mbed_assert_internal(13734, 13752, 57); //@line 27163
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 27166
  sp = STACKTOP; //@line 27167
  return;
 }
 ___async_unwind = 0; //@line 27170
 HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 27171
 sp = STACKTOP; //@line 27172
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_479($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30561
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30563
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30565
 HEAP32[$4 + 364 >> 2] = 2; //@line 30569
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 30570
 if (!($$pre17 & 4)) {
  $11 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30575
  $12 = $11 + 16 | 0; //@line 30576
  $14 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 30578
  $15 = $11 + 28 | 0; //@line 30579
  $16 = HEAP32[$15 >> 2] | 0; //@line 30580
  if (!$16) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 30583
   _mbed_assert_internal(15061, 15066, 1102); //@line 30584
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 30587
    $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 30588
    HEAP32[$18 >> 2] = $15; //@line 30589
    $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 30590
    HEAP32[$19 >> 2] = $12; //@line 30591
    $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 30592
    HEAP32[$20 >> 2] = $14; //@line 30593
    $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 30594
    HEAP32[$21 >> 2] = $2; //@line 30595
    $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 30596
    HEAP32[$22 >> 2] = $4; //@line 30597
    sp = STACKTOP; //@line 30598
    return;
   }
   ___async_unwind = 0; //@line 30601
   HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 30602
   $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 30603
   HEAP32[$18 >> 2] = $15; //@line 30604
   $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 30605
   HEAP32[$19 >> 2] = $12; //@line 30606
   $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 30607
   HEAP32[$20 >> 2] = $14; //@line 30608
   $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 30609
   HEAP32[$21 >> 2] = $2; //@line 30610
   $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 30611
   HEAP32[$22 >> 2] = $4; //@line 30612
   sp = STACKTOP; //@line 30613
   return;
  } else {
   $23 = HEAP32[$16 >> 2] | 0; //@line 30616
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30617
   FUNCTION_TABLE_vii[$23 & 31]($12, $14); //@line 30618
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 30621
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 30622
    HEAP32[$24 >> 2] = $2; //@line 30623
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 30624
    HEAP32[$25 >> 2] = $4; //@line 30625
    sp = STACKTOP; //@line 30626
    return;
   }
   ___async_unwind = 0; //@line 30629
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 30630
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 30631
   HEAP32[$24 >> 2] = $2; //@line 30632
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 30633
   HEAP32[$25 >> 2] = $4; //@line 30634
   sp = STACKTOP; //@line 30635
   return;
  }
 }
 $26 = $$pre17 & -5; //@line 30639
 HEAP8[$2 >> 0] = $26; //@line 30640
 if (!($26 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $26 & -17; //@line 30647
 $31 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30649
 $32 = $31 + 48 | 0; //@line 30650
 $34 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 30652
 $35 = $31 + 60 | 0; //@line 30653
 $36 = HEAP32[$35 >> 2] | 0; //@line 30654
 if (!$36) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 30657
  _mbed_assert_internal(15061, 15066, 1102); //@line 30658
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 30661
   $38 = $ReallocAsyncCtx14 + 4 | 0; //@line 30662
   HEAP32[$38 >> 2] = $35; //@line 30663
   $39 = $ReallocAsyncCtx14 + 8 | 0; //@line 30664
   HEAP32[$39 >> 2] = $32; //@line 30665
   $40 = $ReallocAsyncCtx14 + 12 | 0; //@line 30666
   HEAP32[$40 >> 2] = $34; //@line 30667
   sp = STACKTOP; //@line 30668
   return;
  }
  ___async_unwind = 0; //@line 30671
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 30672
  $38 = $ReallocAsyncCtx14 + 4 | 0; //@line 30673
  HEAP32[$38 >> 2] = $35; //@line 30674
  $39 = $ReallocAsyncCtx14 + 8 | 0; //@line 30675
  HEAP32[$39 >> 2] = $32; //@line 30676
  $40 = $ReallocAsyncCtx14 + 12 | 0; //@line 30677
  HEAP32[$40 >> 2] = $34; //@line 30678
  sp = STACKTOP; //@line 30679
  return;
 } else {
  $41 = HEAP32[$36 >> 2] | 0; //@line 30682
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30683
  FUNCTION_TABLE_vii[$41 & 31]($32, $34); //@line 30684
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 30687
   sp = STACKTOP; //@line 30688
   return;
  }
  ___async_unwind = 0; //@line 30691
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 30692
  sp = STACKTOP; //@line 30693
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_238($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $69 = 0, $70 = 0, $74 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 38204
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 38206
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 38208
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 38210
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 38212
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 38214
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 38216
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 38218
 $16 = HEAP8[$0 + 29 >> 0] | 0; //@line 38220
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 38222
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 38226
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 38230
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 38234
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 38238
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 38240
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 38242
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 38244
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 38246
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 38252
 $50 = HEAP16[$0 + 96 >> 1] | 0; //@line 38254
 $52 = HEAP8[$0 + 98 >> 0] & 1; //@line 38257
 $54 = HEAP32[$0 + 100 >> 2] | 0; //@line 38259
 $56 = HEAP32[$0 + 104 >> 2] | 0; //@line 38261
 $58 = HEAP32[$0 + 108 >> 2] | 0; //@line 38263
 $60 = HEAP32[$0 + 112 >> 2] | 0; //@line 38265
 $62 = HEAP32[$0 + 116 >> 2] | 0; //@line 38267
 if (!(HEAP32[$0 + 88 >> 2] | 0)) {
  if (!(HEAP8[(HEAP32[$0 + 84 >> 2] | 0) + 4 >> 0] | 0)) {
   HEAP16[___async_retval >> 1] = -1009; //@line 38275
   return;
  }
 }
 if (($14 + -1 & 255) >= 223) {
  _printf(11887, $26) | 0; //@line 38282
  _printf(12376, $30) | 0; //@line 38283
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 38284
  _putchar(10) | 0; //@line 38285
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 301; //@line 38288
   $69 = $ReallocAsyncCtx5 + 4 | 0; //@line 38289
   HEAP32[$69 >> 2] = $10; //@line 38290
   sp = STACKTOP; //@line 38291
   return;
  }
  ___async_unwind = 0; //@line 38294
  HEAP32[$ReallocAsyncCtx5 >> 2] = 301; //@line 38295
  $69 = $ReallocAsyncCtx5 + 4 | 0; //@line 38296
  HEAP32[$69 >> 2] = $10; //@line 38297
  sp = STACKTOP; //@line 38298
  return;
 }
 $70 = $12 + 2285 | 0; //@line 38301
 HEAP8[$70 >> 0] = $14; //@line 38302
 if (!($16 << 24 >> 24 == 0 | ($16 & 15) == 3)) {
  HEAP8[$12 + 1965 >> 0] = $14; //@line 38309
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(84) | 0; //@line 38311
  $77 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($54, $50 & 255, $48) | 0; //@line 38312
  if (!___async) {
   HEAP32[___async_retval >> 2] = $77; //@line 38316
   ___async_unwind = 0; //@line 38317
  }
  HEAP32[$ReallocAsyncCtx8 >> 2] = 303; //@line 38319
  HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 38321
  HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 38323
  HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 38325
  HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 38327
  HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 38329
  HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $12; //@line 38331
  HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $34; //@line 38333
  HEAP8[$ReallocAsyncCtx8 + 32 >> 0] = $16; //@line 38335
  HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $36; //@line 38337
  HEAP32[$ReallocAsyncCtx8 + 40 >> 2] = $38; //@line 38339
  HEAP32[$ReallocAsyncCtx8 + 44 >> 2] = $40; //@line 38341
  HEAP32[$ReallocAsyncCtx8 + 48 >> 2] = $42; //@line 38343
  HEAP32[$ReallocAsyncCtx8 + 52 >> 2] = $70; //@line 38345
  HEAP32[$ReallocAsyncCtx8 + 56 >> 2] = $48; //@line 38347
  HEAP32[$ReallocAsyncCtx8 + 60 >> 2] = $48; //@line 38349
  HEAP16[$ReallocAsyncCtx8 + 64 >> 1] = $50; //@line 38351
  HEAP8[$ReallocAsyncCtx8 + 66 >> 0] = $52 & 1; //@line 38354
  HEAP32[$ReallocAsyncCtx8 + 68 >> 2] = $56; //@line 38356
  HEAP32[$ReallocAsyncCtx8 + 72 >> 2] = $58; //@line 38358
  HEAP32[$ReallocAsyncCtx8 + 76 >> 2] = $60; //@line 38360
  HEAP32[$ReallocAsyncCtx8 + 80 >> 2] = $62; //@line 38362
  sp = STACKTOP; //@line 38363
  return;
 }
 _printf(11887, $18) | 0; //@line 38366
 _printf(12413, $22) | 0; //@line 38367
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 38368
 _putchar(10) | 0; //@line 38369
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 38372
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 38373
  HEAP32[$74 >> 2] = $10; //@line 38374
  sp = STACKTOP; //@line 38375
  return;
 }
 ___async_unwind = 0; //@line 38378
 HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 38379
 $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 38380
 HEAP32[$74 >> 2] = $10; //@line 38381
 sp = STACKTOP; //@line 38382
 return;
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29825
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29827
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29829
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 29835
  $100 = $99 + 48 | 0; //@line 29836
  $101 = $100; //@line 29837
  $102 = $101; //@line 29838
  $103 = HEAP32[$102 >> 2] | 0; //@line 29839
  $104 = $101 + 4 | 0; //@line 29840
  $105 = $104; //@line 29841
  $106 = HEAP32[$105 >> 2] | 0; //@line 29842
  $107 = ___async_retval; //@line 29843
  $108 = $107; //@line 29844
  $109 = $108; //@line 29845
  HEAP32[$109 >> 2] = $103; //@line 29846
  $110 = $108 + 4 | 0; //@line 29847
  $111 = $110; //@line 29848
  HEAP32[$111 >> 2] = $106; //@line 29849
  return;
 }
 $10 = $4 + 32 | 0; //@line 29852
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 29857
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29858
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 29860
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 29869
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 29873
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 29875
   $21 = tempRet0; //@line 29876
   $24 = $4 + 40 | 0; //@line 29879
   $25 = $24; //@line 29880
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 29886
   $32 = tempRet0; //@line 29887
   $33 = $24; //@line 29888
   HEAP32[$33 >> 2] = $31; //@line 29890
   HEAP32[$33 + 4 >> 2] = $32; //@line 29893
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 29900
    $92 = $21; //@line 29900
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 29902
    $43 = tempRet0; //@line 29903
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 29904
    $46 = $24; //@line 29906
    HEAP32[$46 >> 2] = $44; //@line 29908
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 29911
    $91 = $42; //@line 29912
    $92 = $43; //@line 29912
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 29917
     $92 = 0; //@line 29917
     break;
    }
   default:
    {
     label = 6; //@line 29921
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 29927
  $51 = tempRet0; //@line 29928
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 29929
  $53 = tempRet0; //@line 29930
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 29931
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 29933
  $58 = $4 + 40 | 0; //@line 29935
  $59 = $58; //@line 29936
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 29942
  $66 = tempRet0; //@line 29943
  $67 = $58; //@line 29944
  HEAP32[$67 >> 2] = $65; //@line 29946
  HEAP32[$67 + 4 >> 2] = $66; //@line 29949
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 29956
   $92 = $53; //@line 29956
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 29958
   $77 = tempRet0; //@line 29959
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 29960
   $80 = $58; //@line 29962
   HEAP32[$80 >> 2] = $78; //@line 29964
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 29967
   $91 = $76; //@line 29968
   $92 = $77; //@line 29968
  }
 }
 $84 = $4 + 48 | 0; //@line 29971
 $85 = $84; //@line 29972
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 29978
 $95 = $84; //@line 29980
 HEAP32[$95 >> 2] = $93; //@line 29982
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 29985
 $99 = HEAP32[$2 >> 2] | 0; //@line 29986
 $100 = $99 + 48 | 0; //@line 29987
 $101 = $100; //@line 29988
 $102 = $101; //@line 29989
 $103 = HEAP32[$102 >> 2] | 0; //@line 29990
 $104 = $101 + 4 | 0; //@line 29991
 $105 = $104; //@line 29992
 $106 = HEAP32[$105 >> 2] | 0; //@line 29993
 $107 = ___async_retval; //@line 29994
 $108 = $107; //@line 29995
 $109 = $108; //@line 29996
 HEAP32[$109 >> 2] = $103; //@line 29997
 $110 = $108 + 4 | 0; //@line 29998
 $111 = $110; //@line 29999
 HEAP32[$111 >> 2] = $106; //@line 30000
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33029
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33033
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33035
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33037
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33039
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33041
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33045
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33047
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33049
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33053
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 33055
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 33057
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 33061
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 33063
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 33065
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 33067
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 33069
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 33071
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 33073
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 33075
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 33077
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 33079
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 33081
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 33083
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 33085
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 33087
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 33089
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 33091
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 33093
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 33095
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 33097
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 33101
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 33103
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33105
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 72 >> 2] | 0, $44 | 0, HEAP32[$0 + 56 >> 2] | 0) | 0; //@line 33108
 }
 HEAP8[$56 >> 0] = 0; //@line 33110
 HEAP8[$26 >> 0] = 0; //@line 33111
 HEAP8[$12 >> 0] = 0; //@line 33112
 HEAP8[$50 >> 0] = 0; //@line 33113
 HEAP8[$48 >> 0] = 0; //@line 33114
 HEAP8[$22 >> 0] = 0; //@line 33115
 HEAP8[$72 >> 0] = 0; //@line 33116
 HEAP8[$34 >> 0] = 0; //@line 33117
 HEAP8[$14 >> 0] = 0; //@line 33118
 HEAP8[$74 >> 0] = 0; //@line 33119
 HEAP8[$62 >> 0] = 0; //@line 33120
 HEAP8[$42 >> 0] = 0; //@line 33121
 HEAP8[$52 >> 0] = 0; //@line 33122
 HEAP8[$70 >> 0] = 0; //@line 33123
 HEAP8[$16 >> 0] = 0; //@line 33124
 HEAP8[$54 >> 0] = 0; //@line 33125
 HEAP8[$38 >> 0] = 0; //@line 33126
 HEAP8[$68 >> 0] = 0; //@line 33127
 HEAP8[$6 >> 0] = 0; //@line 33128
 HEAP8[$40 >> 0] = 0; //@line 33129
 HEAP8[$64 >> 0] = 0; //@line 33130
 HEAP8[$8 >> 0] = 0; //@line 33131
 HEAP8[$58 >> 0] = 0; //@line 33132
 HEAP8[$30 >> 0] = 0; //@line 33133
 HEAP8[$2 >> 0] = 0; //@line 33134
 HEAP8[$60 >> 0] = 0; //@line 33135
 HEAP8[$46 >> 0] = 0; //@line 33136
 HEAP8[$4 >> 0] = 0; //@line 33137
 HEAP8[$78 >> 0] = 0; //@line 33138
 HEAP8[$32 >> 0] = 0; //@line 33139
 HEAP8[$10 >> 0] = 0; //@line 33140
 HEAP8[$80 >> 0] = 0; //@line 33141
 HEAP32[$18 >> 2] = 0; //@line 33142
 HEAP8[$66 >> 0] = 0; //@line 33144
 HEAP8[$24 + 17 >> 0] = 0; //@line 33146
 HEAP8[$24 + 18 >> 0] = 0; //@line 33148
 HEAP8[$24 + 19 >> 0] = 0; //@line 33150
 HEAP8[$24 + 20 >> 0] = 0; //@line 33152
 HEAP8[$24 + 21 >> 0] = 0; //@line 33154
 HEAP8[$24 + 22 >> 0] = 0; //@line 33156
 HEAP8[$24 + 23 >> 0] = 0; //@line 33158
 HEAP8[$24 + 24 >> 0] = 0; //@line 33160
 HEAP8[$24 + 25 >> 0] = 0; //@line 33162
 HEAP8[$24 + 26 >> 0] = 0; //@line 33164
 HEAP8[$24 + 27 >> 0] = 0; //@line 33166
 HEAP8[$24 + 28 >> 0] = 0; //@line 33168
 HEAP8[$24 + 29 >> 0] = 0; //@line 33170
 HEAP8[$24 + 30 >> 0] = 0; //@line 33172
 HEAP8[$24 + 31 >> 0] = 0; //@line 33173
 HEAP8[$44 >> 0] = 0; //@line 33175
 HEAP8[$24 + 1 >> 0] = 0; //@line 33177
 HEAP8[$24 + 2 >> 0] = 0; //@line 33179
 HEAP8[$24 + 3 >> 0] = 0; //@line 33181
 HEAP8[$24 + 4 >> 0] = 0; //@line 33183
 HEAP8[$24 + 5 >> 0] = 0; //@line 33185
 HEAP8[$24 + 6 >> 0] = 0; //@line 33187
 HEAP8[$24 + 7 >> 0] = 0; //@line 33189
 HEAP8[$24 + 8 >> 0] = 0; //@line 33191
 HEAP8[$24 + 9 >> 0] = 0; //@line 33193
 HEAP8[$24 + 10 >> 0] = 0; //@line 33195
 HEAP8[$24 + 11 >> 0] = 0; //@line 33197
 HEAP8[$24 + 12 >> 0] = 0; //@line 33199
 HEAP8[$24 + 13 >> 0] = 0; //@line 33201
 HEAP8[$24 + 14 >> 0] = 0; //@line 33203
 HEAP8[$24 + 15 >> 0] = 0; //@line 33204
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 33206
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_493($0) {
 $0 = $0 | 0;
 var $$sroa$0$0$copyload = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 33932
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33936
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33938
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33940
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33944
 $15 = $2 + 356 | 0; //@line 33947
 $17 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$15 >> 2] | 0) | 0; //@line 33949
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0; //@line 33952
 $20 = $2 + 360 | 0; //@line 33953
 if ((HEAP32[$20 >> 2] | 0) == 2) {
  _printf(12967, $8) | 0; //@line 33957
  _printf(12994, $12) | 0; //@line 33958
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 33959
  _putchar(10) | 0; //@line 33960
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 360; //@line 33963
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 33964
   HEAP32[$31 >> 2] = $2; //@line 33965
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 33966
   HEAP32[$32 >> 2] = $15; //@line 33967
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 33968
   HEAP32[$33 >> 2] = $$sroa$0$0$copyload; //@line 33969
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 33970
   HEAP32[$34 >> 2] = $4; //@line 33971
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 33972
   HEAP32[$35 >> 2] = $4; //@line 33973
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 33974
   HEAP32[$36 >> 2] = $17; //@line 33975
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 33976
   HEAP32[$37 >> 2] = $6; //@line 33977
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 33978
   HEAP32[$38 >> 2] = $20; //@line 33979
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 33980
   HEAP32[$39 >> 2] = $6; //@line 33981
   sp = STACKTOP; //@line 33982
   return;
  }
  ___async_unwind = 0; //@line 33985
  HEAP32[$ReallocAsyncCtx2 >> 2] = 360; //@line 33986
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 33987
  HEAP32[$31 >> 2] = $2; //@line 33988
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 33989
  HEAP32[$32 >> 2] = $15; //@line 33990
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 33991
  HEAP32[$33 >> 2] = $$sroa$0$0$copyload; //@line 33992
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 33993
  HEAP32[$34 >> 2] = $4; //@line 33994
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 33995
  HEAP32[$35 >> 2] = $4; //@line 33996
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 33997
  HEAP32[$36 >> 2] = $17; //@line 33998
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 33999
  HEAP32[$37 >> 2] = $6; //@line 34000
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 34001
  HEAP32[$38 >> 2] = $20; //@line 34002
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 34003
  HEAP32[$39 >> 2] = $6; //@line 34004
  sp = STACKTOP; //@line 34005
  return;
 } else {
  $23 = HEAP32[$2 >> 2] | 0; //@line 34008
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 34009
  __ZN7LoRaPHY18put_radio_to_sleepEv($23); //@line 34010
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 359; //@line 34013
   $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 34014
   HEAP32[$24 >> 2] = $20; //@line 34015
   $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 34016
   HEAP32[$25 >> 2] = $2; //@line 34017
   $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 34018
   HEAP32[$26 >> 2] = $15; //@line 34019
   $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 34020
   HEAP32[$27 >> 2] = $$sroa$0$0$copyload; //@line 34021
   $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 34022
   HEAP32[$28 >> 2] = $4; //@line 34023
   $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 34024
   HEAP32[$29 >> 2] = $4; //@line 34025
   $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 34026
   HEAP32[$30 >> 2] = $17; //@line 34027
   sp = STACKTOP; //@line 34028
   return;
  }
  ___async_unwind = 0; //@line 34031
  HEAP32[$ReallocAsyncCtx8 >> 2] = 359; //@line 34032
  $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 34033
  HEAP32[$24 >> 2] = $20; //@line 34034
  $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 34035
  HEAP32[$25 >> 2] = $2; //@line 34036
  $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 34037
  HEAP32[$26 >> 2] = $15; //@line 34038
  $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 34039
  HEAP32[$27 >> 2] = $$sroa$0$0$copyload; //@line 34040
  $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 34041
  HEAP32[$28 >> 2] = $4; //@line 34042
  $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 34043
  HEAP32[$29 >> 2] = $4; //@line 34044
  $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 34045
  HEAP32[$30 >> 2] = $17; //@line 34046
  sp = STACKTOP; //@line 34047
  return;
 }
}
function _main__async_cb_152($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31533
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31537
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31539
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31541
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31543
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31545
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31546
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 31550
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 31551
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 31552
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 750; //@line 31555
   $17 = $ReallocAsyncCtx + 4 | 0; //@line 31556
   HEAP32[$17 >> 2] = $4; //@line 31557
   $18 = $ReallocAsyncCtx + 8 | 0; //@line 31558
   HEAP32[$18 >> 2] = $6; //@line 31559
   $19 = $ReallocAsyncCtx + 12 | 0; //@line 31560
   HEAP32[$19 >> 2] = $8; //@line 31561
   $20 = $ReallocAsyncCtx + 16 | 0; //@line 31562
   HEAP32[$20 >> 2] = $10; //@line 31563
   sp = STACKTOP; //@line 31564
   return;
  }
  ___async_unwind = 0; //@line 31567
  HEAP32[$ReallocAsyncCtx >> 2] = 750; //@line 31568
  $17 = $ReallocAsyncCtx + 4 | 0; //@line 31569
  HEAP32[$17 >> 2] = $4; //@line 31570
  $18 = $ReallocAsyncCtx + 8 | 0; //@line 31571
  HEAP32[$18 >> 2] = $6; //@line 31572
  $19 = $ReallocAsyncCtx + 12 | 0; //@line 31573
  HEAP32[$19 >> 2] = $8; //@line 31574
  $20 = $ReallocAsyncCtx + 16 | 0; //@line 31575
  HEAP32[$20 >> 2] = $10; //@line 31576
  sp = STACKTOP; //@line 31577
  return;
 }
 $22 = $4 + 4 | 0; //@line 31581
 HEAP32[$22 >> 2] = 0; //@line 31583
 HEAP32[$22 + 4 >> 2] = 0; //@line 31586
 HEAP32[$4 >> 2] = 751; //@line 31587
 $26 = $4 + 12 | 0; //@line 31588
 HEAP32[$26 >> 2] = 10140; //@line 31589
 $27 = HEAP32[5797] | 0; //@line 31590
 if (!$27) {
  $37 = HEAP32[2536] | 0; //@line 31594
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 31595
  FUNCTION_TABLE_vii[$37 & 31](23176, $4); //@line 31596
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 31599
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 31600
   HEAP32[$38 >> 2] = $4; //@line 31601
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 31602
   HEAP32[$39 >> 2] = $26; //@line 31603
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 31604
   HEAP32[$40 >> 2] = $6; //@line 31605
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 31606
   HEAP32[$41 >> 2] = $8; //@line 31607
   $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 31608
   HEAP32[$42 >> 2] = $10; //@line 31609
   sp = STACKTOP; //@line 31610
   return;
  }
  ___async_unwind = 0; //@line 31613
  HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 31614
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 31615
  HEAP32[$38 >> 2] = $4; //@line 31616
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 31617
  HEAP32[$39 >> 2] = $26; //@line 31618
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 31619
  HEAP32[$40 >> 2] = $6; //@line 31620
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 31621
  HEAP32[$41 >> 2] = $8; //@line 31622
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 31623
  HEAP32[$42 >> 2] = $10; //@line 31624
  sp = STACKTOP; //@line 31625
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 31629
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 31630
  FUNCTION_TABLE_vi[$30 & 1023](23176); //@line 31631
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 752; //@line 31634
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 31635
   HEAP32[$31 >> 2] = $4; //@line 31636
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 31637
   HEAP32[$32 >> 2] = $26; //@line 31638
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 31639
   HEAP32[$33 >> 2] = $6; //@line 31640
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 31641
   HEAP32[$34 >> 2] = $8; //@line 31642
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 31643
   HEAP32[$35 >> 2] = $10; //@line 31644
   sp = STACKTOP; //@line 31645
   return;
  }
  ___async_unwind = 0; //@line 31648
  HEAP32[$ReallocAsyncCtx2 >> 2] = 752; //@line 31649
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 31650
  HEAP32[$31 >> 2] = $4; //@line 31651
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 31652
  HEAP32[$32 >> 2] = $26; //@line 31653
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 31654
  HEAP32[$33 >> 2] = $6; //@line 31655
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 31656
  HEAP32[$34 >> 2] = $8; //@line 31657
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 31658
  HEAP32[$35 >> 2] = $10; //@line 31659
  sp = STACKTOP; //@line 31660
  return;
 }
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_350($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $2 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6300
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6302
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6304
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6306
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6308
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6310
 HEAP32[$2 + 364 >> 2] = 0; //@line 6312
 $14 = $2 + 1160 | 0; //@line 6315
 HEAP8[$14 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 6316
 HEAP8[$2 + 1163 >> 0] = HEAP8[$2 + 1129 >> 0] | 0; //@line 6320
 HEAP8[$2 + 1176 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 6324
 HEAP8[$2 + 1177 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 6328
 $24 = $2 + 1178 | 0; //@line 6329
 HEAP8[$24 >> 0] = 0; //@line 6330
 HEAP32[$2 + 1180 >> 2] = 0; //@line 6332
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  $29 = HEAP32[$2 >> 2] | 0; //@line 6337
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 6338
  __ZN7LoRaPHY20put_radio_to_standbyEv($29); //@line 6339
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 513; //@line 6342
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 6343
   HEAP32[$30 >> 2] = $2; //@line 6344
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 6345
   HEAP32[$31 >> 2] = $2; //@line 6346
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 6347
   HEAP32[$32 >> 2] = $14; //@line 6348
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 6349
   HEAP32[$33 >> 2] = $24; //@line 6350
   $34 = $ReallocAsyncCtx5 + 20 | 0; //@line 6351
   HEAP32[$34 >> 2] = $4; //@line 6352
   $35 = $ReallocAsyncCtx5 + 24 | 0; //@line 6353
   HEAP32[$35 >> 2] = $6; //@line 6354
   $36 = $ReallocAsyncCtx5 + 28 | 0; //@line 6355
   HEAP32[$36 >> 2] = $8; //@line 6356
   $37 = $ReallocAsyncCtx5 + 32 | 0; //@line 6357
   HEAP32[$37 >> 2] = $10; //@line 6358
   sp = STACKTOP; //@line 6359
   return;
  }
  ___async_unwind = 0; //@line 6362
  HEAP32[$ReallocAsyncCtx5 >> 2] = 513; //@line 6363
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 6364
  HEAP32[$30 >> 2] = $2; //@line 6365
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 6366
  HEAP32[$31 >> 2] = $2; //@line 6367
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 6368
  HEAP32[$32 >> 2] = $14; //@line 6369
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 6370
  HEAP32[$33 >> 2] = $24; //@line 6371
  $34 = $ReallocAsyncCtx5 + 20 | 0; //@line 6372
  HEAP32[$34 >> 2] = $4; //@line 6373
  $35 = $ReallocAsyncCtx5 + 24 | 0; //@line 6374
  HEAP32[$35 >> 2] = $6; //@line 6375
  $36 = $ReallocAsyncCtx5 + 28 | 0; //@line 6376
  HEAP32[$36 >> 2] = $8; //@line 6377
  $37 = $ReallocAsyncCtx5 + 32 | 0; //@line 6378
  HEAP32[$37 >> 2] = $10; //@line 6379
  sp = STACKTOP; //@line 6380
  return;
 } else {
  $38 = HEAP32[$2 >> 2] | 0; //@line 6383
  $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] | 0; //@line 6386
  $44 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 6389
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 6390
  FUNCTION_TABLE_iiii[$41 & 15]($38, $14, $44) | 0; //@line 6391
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 6394
   $45 = $ReallocAsyncCtx + 4 | 0; //@line 6395
   HEAP32[$45 >> 2] = $24; //@line 6396
   $46 = $ReallocAsyncCtx + 8 | 0; //@line 6397
   HEAP32[$46 >> 2] = $2; //@line 6398
   $47 = $ReallocAsyncCtx + 12 | 0; //@line 6399
   HEAP32[$47 >> 2] = $4; //@line 6400
   $48 = $ReallocAsyncCtx + 16 | 0; //@line 6401
   HEAP32[$48 >> 2] = $6; //@line 6402
   $49 = $ReallocAsyncCtx + 20 | 0; //@line 6403
   HEAP32[$49 >> 2] = $8; //@line 6404
   $50 = $ReallocAsyncCtx + 24 | 0; //@line 6405
   HEAP32[$50 >> 2] = $10; //@line 6406
   $51 = $ReallocAsyncCtx + 28 | 0; //@line 6407
   HEAP32[$51 >> 2] = $2; //@line 6408
   sp = STACKTOP; //@line 6409
   return;
  }
  ___async_unwind = 0; //@line 6412
  HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 6413
  $45 = $ReallocAsyncCtx + 4 | 0; //@line 6414
  HEAP32[$45 >> 2] = $24; //@line 6415
  $46 = $ReallocAsyncCtx + 8 | 0; //@line 6416
  HEAP32[$46 >> 2] = $2; //@line 6417
  $47 = $ReallocAsyncCtx + 12 | 0; //@line 6418
  HEAP32[$47 >> 2] = $4; //@line 6419
  $48 = $ReallocAsyncCtx + 16 | 0; //@line 6420
  HEAP32[$48 >> 2] = $6; //@line 6421
  $49 = $ReallocAsyncCtx + 20 | 0; //@line 6422
  HEAP32[$49 >> 2] = $8; //@line 6423
  $50 = $ReallocAsyncCtx + 24 | 0; //@line 6424
  HEAP32[$50 >> 2] = $10; //@line 6425
  $51 = $ReallocAsyncCtx + 28 | 0; //@line 6426
  HEAP32[$51 >> 2] = $2; //@line 6427
  sp = STACKTOP; //@line 6428
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_374($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8649
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8655
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8657
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 8659
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8661
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8663
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8665
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8667
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $23 = HEAP32[$6 >> 2] | 0; //@line 8674
   $26 = HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0; //@line 8677
   $31 = HEAP32[$8 + 8 >> 2] & 65535; //@line 8682
   $34 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 8685
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 8686
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$26 & 1]($23, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $31, 0, 0, 1, 0, 0, 0, $34); //@line 8687
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 622; //@line 8690
    $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 8691
    HEAP32[$35 >> 2] = $8; //@line 8692
    $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 8693
    HEAP32[$36 >> 2] = $12; //@line 8694
    $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 8695
    HEAP32[$37 >> 2] = $14; //@line 8696
    $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 8697
    HEAP32[$38 >> 2] = $16; //@line 8698
    $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 8699
    HEAP32[$39 >> 2] = $6; //@line 8700
    $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 8701
    HEAP8[$40 >> 0] = $10; //@line 8702
    $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 8703
    HEAP32[$41 >> 2] = $18; //@line 8704
    sp = STACKTOP; //@line 8705
    return;
   }
   ___async_unwind = 0; //@line 8708
   HEAP32[$ReallocAsyncCtx6 >> 2] = 622; //@line 8709
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 8710
   HEAP32[$35 >> 2] = $8; //@line 8711
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 8712
   HEAP32[$36 >> 2] = $12; //@line 8713
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 8714
   HEAP32[$37 >> 2] = $14; //@line 8715
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 8716
   HEAP32[$38 >> 2] = $16; //@line 8717
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 8718
   HEAP32[$39 >> 2] = $6; //@line 8719
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 8720
   HEAP8[$40 >> 0] = $10; //@line 8721
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 8722
   HEAP32[$41 >> 2] = $18; //@line 8723
   sp = STACKTOP; //@line 8724
   return;
  }
 }
 $42 = HEAP32[$6 >> 2] | 0; //@line 8728
 $45 = HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] | 0; //@line 8731
 $48 = HEAPU8[$8 + 2 >> 0] | 0; //@line 8734
 $52 = HEAP32[$8 + 8 >> 2] & 65535; //@line 8738
 $55 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 8741
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 8742
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$45 & 1]($42, 1, $48, $10 & 255, 1, 0, 8, $52, 0, 0, 0, 0, 0, 1, $55); //@line 8743
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 623; //@line 8746
  $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 8747
  HEAP32[$56 >> 2] = $8; //@line 8748
  $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 8749
  HEAP32[$57 >> 2] = $12; //@line 8750
  $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 8751
  HEAP32[$58 >> 2] = $14; //@line 8752
  $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 8753
  HEAP32[$59 >> 2] = $16; //@line 8754
  $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 8755
  HEAP32[$60 >> 2] = $6; //@line 8756
  $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 8757
  HEAP8[$61 >> 0] = $10; //@line 8758
  $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 8759
  HEAP32[$62 >> 2] = $18; //@line 8760
  sp = STACKTOP; //@line 8761
  return;
 }
 ___async_unwind = 0; //@line 8764
 HEAP32[$ReallocAsyncCtx7 >> 2] = 623; //@line 8765
 $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 8766
 HEAP32[$56 >> 2] = $8; //@line 8767
 $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 8768
 HEAP32[$57 >> 2] = $12; //@line 8769
 $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 8770
 HEAP32[$58 >> 2] = $14; //@line 8771
 $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 8772
 HEAP32[$59 >> 2] = $16; //@line 8773
 $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 8774
 HEAP32[$60 >> 2] = $6; //@line 8775
 $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 8776
 HEAP8[$61 >> 0] = $10; //@line 8777
 $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 8778
 HEAP32[$62 >> 2] = $18; //@line 8779
 sp = STACKTOP; //@line 8780
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $16 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $38 = 0, $47 = 0, $49 = 0, $54 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 11757
 STACKTOP = STACKTOP + 32 | 0; //@line 11758
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11758
 $vararg_buffer5 = sp + 24 | 0; //@line 11759
 $vararg_buffer3 = sp + 16 | 0; //@line 11760
 _printf(12967, sp) | 0; //@line 11763
 _printf(13017, sp + 8 | 0) | 0; //@line 11764
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11765
 _putchar(10) | 0; //@line 11766
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 378; //@line 11769
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 11771
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer3; //@line 11773
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer3; //@line 11775
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 11777
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 11779
  sp = STACKTOP; //@line 11780
  STACKTOP = sp; //@line 11781
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 11783
 $7 = HEAP32[$0 + 356 >> 2] | 0; //@line 11785
 $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11787
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($7, $0 + 1056 | 0); //@line 11788
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 379; //@line 11791
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 11793
  HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer3; //@line 11795
  HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer3; //@line 11797
  HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer5; //@line 11799
  HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer5; //@line 11801
  sp = STACKTOP; //@line 11802
  STACKTOP = sp; //@line 11803
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11805
 $16 = $0 + 1184 | 0; //@line 11808
 HEAP8[$16 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 11809
 HEAP32[$0 + 1188 >> 2] = HEAP32[$0 + 1132 >> 2]; //@line 11813
 HEAP8[$0 + 1200 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 11817
 HEAP8[$0 + 1201 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 11821
 HEAP32[$0 + 1204 >> 2] = 1; //@line 11823
 $30 = $0 + 1202 | 0; //@line 11827
 HEAP8[$30 >> 0] = (HEAP32[$0 + 360 >> 2] | 0) == 2 & 1; //@line 11829
 $31 = HEAP32[$0 >> 2] | 0; //@line 11830
 $34 = HEAP32[(HEAP32[$31 >> 2] | 0) + 24 >> 2] | 0; //@line 11833
 $37 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 11836
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 11837
 $38 = FUNCTION_TABLE_iiii[$34 & 15]($31, $16, $37) | 0; //@line 11838
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 380; //@line 11841
  HEAP32[$AsyncCtx + 4 >> 2] = $30; //@line 11843
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11845
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 11847
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 11849
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 11851
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer5; //@line 11853
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 11855
  sp = STACKTOP; //@line 11856
  STACKTOP = sp; //@line 11857
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11859
 if (!$38) {
  STACKTOP = sp; //@line 11861
  return;
 }
 $47 = (HEAP8[$30 >> 0] | 0) != 0; //@line 11864
 $49 = HEAP32[$0 + 1108 >> 2] | 0; //@line 11866
 _printf(12967, $vararg_buffer3) | 0; //@line 11867
 _printf(13043, $vararg_buffer5) | 0; //@line 11868
 $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11869
 _putchar(10) | 0; //@line 11870
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 381; //@line 11873
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 11875
  HEAP8[$AsyncCtx9 + 8 >> 0] = $47 & 1; //@line 11878
  HEAP32[$AsyncCtx9 + 12 >> 2] = $49; //@line 11880
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 11882
  sp = STACKTOP; //@line 11883
  STACKTOP = sp; //@line 11884
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11886
 $54 = HEAP32[$0 >> 2] | 0; //@line 11887
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11888
 __ZN7LoRaPHY15setup_rx_windowEbj($54, $47, $49); //@line 11889
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 382; //@line 11892
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 11894
  sp = STACKTOP; //@line 11895
  STACKTOP = sp; //@line 11896
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 11898
 HEAP32[$0 + 364 >> 2] = 1; //@line 11900
 STACKTOP = sp; //@line 11901
 return;
}
function __ZN14LoRaMacCommand15add_mac_commandEhhh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $72 = 0, $73 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0;
 $5 = HEAP8[$0 + 3 >> 0] | 0; //@line 20352
 L1 : do {
  switch ($1 << 24 >> 24) {
  case 2:
   {
    $6 = $0 + 2 | 0; //@line 20356
    $7 = HEAP8[$6 >> 0] | 0; //@line 20357
    if (($7 & 255) < (-128 - $5 & 255)) {
     HEAP8[$6 >> 0] = $7 + 1 << 24 >> 24; //@line 20364
     HEAP8[($7 & 255) + ($0 + 4) >> 0] = 2; //@line 20365
     break L1;
    } else {
     $$0 = -1e3; //@line 20368
     return $$0 | 0; //@line 20369
    }
    break;
   }
  case 3:
   {
    $13 = $0 + 2 | 0; //@line 20374
    $14 = HEAP8[$13 >> 0] | 0; //@line 20375
    $15 = $14 & 255; //@line 20376
    if (((-128 - $5 & 255) + -1 | 0) > ($15 | 0)) {
     HEAP8[$0 + 4 + $15 >> 0] = 3; //@line 20387
     HEAP8[$13 >> 0] = $14 + 2 << 24 >> 24; //@line 20388
     HEAP8[($14 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20389
     break L1;
    } else {
     $$0 = -1e3; //@line 20392
     return $$0 | 0; //@line 20393
    }
    break;
   }
  case 4:
   {
    $25 = $0 + 2 | 0; //@line 20398
    $26 = HEAP8[$25 >> 0] | 0; //@line 20399
    if (($26 & 255) < (-128 - $5 & 255)) {
     HEAP8[$25 >> 0] = $26 + 1 << 24 >> 24; //@line 20406
     HEAP8[($26 & 255) + ($0 + 4) >> 0] = 4; //@line 20407
     break L1;
    } else {
     $$0 = -1e3; //@line 20410
     return $$0 | 0; //@line 20411
    }
    break;
   }
  case 5:
   {
    $32 = $0 + 2 | 0; //@line 20416
    $33 = HEAP8[$32 >> 0] | 0; //@line 20417
    $34 = $33 & 255; //@line 20418
    if (((-128 - $5 & 255) + -1 | 0) > ($34 | 0)) {
     HEAP8[$0 + 4 + $34 >> 0] = 5; //@line 20426
     HEAP8[$32 >> 0] = $33 + 2 << 24 >> 24; //@line 20428
     HEAP8[($33 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20431
     HEAP8[$0 + 1 >> 0] = 1; //@line 20433
     break L1;
    } else {
     $$0 = -1e3; //@line 20436
     return $$0 | 0; //@line 20437
    }
    break;
   }
  case 6:
   {
    $45 = $0 + 2 | 0; //@line 20442
    $46 = HEAP8[$45 >> 0] | 0; //@line 20443
    $47 = $46 & 255; //@line 20444
    if (((-128 - $5 & 255) + -2 | 0) > ($47 | 0)) {
     HEAP8[$0 + 4 + $47 >> 0] = 6; //@line 20452
     HEAP8[($46 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20456
     HEAP8[$45 >> 0] = $46 + 3 << 24 >> 24; //@line 20458
     HEAP8[($46 + 2 & 255) + ($0 + 4) >> 0] = $3; //@line 20461
     break L1;
    } else {
     $$0 = -1e3; //@line 20464
     return $$0 | 0; //@line 20465
    }
    break;
   }
  case 7:
   {
    $60 = $0 + 2 | 0; //@line 20470
    $61 = HEAP8[$60 >> 0] | 0; //@line 20471
    $62 = $61 & 255; //@line 20472
    if (((-128 - $5 & 255) + -1 | 0) > ($62 | 0)) {
     HEAP8[$0 + 4 + $62 >> 0] = 7; //@line 20483
     HEAP8[$60 >> 0] = $61 + 2 << 24 >> 24; //@line 20484
     HEAP8[($61 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20485
     break L1;
    } else {
     $$0 = -1e3; //@line 20488
     return $$0 | 0; //@line 20489
    }
    break;
   }
  case 8:
   {
    $72 = $0 + 2 | 0; //@line 20494
    $73 = HEAP8[$72 >> 0] | 0; //@line 20495
    if (($73 & 255) < (-128 - $5 & 255)) {
     HEAP8[$72 >> 0] = $73 + 1 << 24 >> 24; //@line 20503
     HEAP8[($73 & 255) + ($0 + 4) >> 0] = 8; //@line 20504
     HEAP8[$0 + 1 >> 0] = 1; //@line 20505
     break L1;
    } else {
     $$0 = -1e3; //@line 20508
     return $$0 | 0; //@line 20509
    }
    break;
   }
  case 9:
   {
    $80 = $0 + 2 | 0; //@line 20514
    $81 = HEAP8[$80 >> 0] | 0; //@line 20515
    if (($81 & 255) < (-128 - $5 & 255)) {
     HEAP8[$80 >> 0] = $81 + 1 << 24 >> 24; //@line 20522
     HEAP8[($81 & 255) + ($0 + 4) >> 0] = 9; //@line 20523
     break L1;
    } else {
     $$0 = -1e3; //@line 20526
     return $$0 | 0; //@line 20527
    }
    break;
   }
  case 10:
   {
    $87 = $0 + 2 | 0; //@line 20532
    $88 = HEAP8[$87 >> 0] | 0; //@line 20533
    if (($88 & 255) < (-128 - $5 & 255)) {
     HEAP8[($88 & 255) + ($0 + 4) >> 0] = 10; //@line 20540
     HEAP8[$87 >> 0] = $88 + 2 << 24 >> 24; //@line 20542
     HEAP8[($88 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20545
     HEAP8[$0 + 1 >> 0] = 1; //@line 20547
     break L1;
    } else {
     $$0 = -1e3; //@line 20550
     return $$0 | 0; //@line 20551
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 20556
    return $$0 | 0; //@line 20557
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 1; //@line 20561
 $$0 = 0; //@line 20562
 return $$0 | 0; //@line 20563
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4856
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 4863
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 4868
 $11 = $0 + 128 | 0; //@line 4869
 _equeue_mutex_lock($11); //@line 4870
 $12 = $10 + 4 | 0; //@line 4871
 $13 = HEAP8[$12 >> 0] | 0; //@line 4872
 $14 = $13 & 255; //@line 4873
 $15 = HEAP32[$5 >> 2] | 0; //@line 4874
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 4878
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 4882
 HEAP32[$10 + 24 >> 2] = -1; //@line 4884
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 4889
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 4904
   $33 = HEAP32[$32 >> 2] | 0; //@line 4905
   $35 = $10 + 8 | 0; //@line 4907
   $36 = HEAP32[$35 >> 2] | 0; //@line 4908
   $37 = $33; //@line 4909
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 4911
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 4913
    $46 = HEAP32[$35 >> 2] | 0; //@line 4914
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 4917
     $49 = $46; //@line 4917
     label = 13; //@line 4918
    }
   } else {
    $38 = $33 + 8 | 0; //@line 4921
    HEAP32[$38 >> 2] = $36; //@line 4922
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 4927
    }
    $42 = $10 + 16 | 0; //@line 4929
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 4931
    $$sink$in$in$i = $42; //@line 4933
    $49 = HEAP32[$32 >> 2] | 0; //@line 4933
    label = 13; //@line 4934
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 4939
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 4948
   _equeue_mutex_unlock($11); //@line 4949
   $56 = $10 + 36 | 0; //@line 4950
   $57 = $56 + -36 | 0; //@line 4951
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 4953
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4957
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 4958
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 179; //@line 4961
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4963
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 4965
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 4967
      sp = STACKTOP; //@line 4968
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4971
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 4976
   _equeue_mutex_lock($64); //@line 4977
   $65 = $0 + 24 | 0; //@line 4978
   $66 = HEAP32[$65 >> 2] | 0; //@line 4979
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 4983
     label = 24; //@line 4984
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 4986
     $$025$i$i = $65; //@line 4987
     $70 = $66; //@line 4987
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 4989
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 4994
      $73 = HEAP32[$72 >> 2] | 0; //@line 4995
      if (!$73) {
       $$02329$i$i = $72; //@line 4998
       label = 24; //@line 4999
       break L28;
      } else {
       $$025$i$i = $72; //@line 5002
       $70 = $73; //@line 5002
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 5008
      $$02330$i$i = $$025$i$i; //@line 5011
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 5011
     } else {
      $$02329$i$i = $$025$i$i; //@line 5013
      label = 24; //@line 5014
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 5020
    $$02330$i$i = $$02329$i$i; //@line 5021
    $$sink$in$i$i = $$02329$i$i; //@line 5021
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 5025
   HEAP32[$$02330$i$i >> 2] = $57; //@line 5026
   _equeue_mutex_unlock($64); //@line 5027
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 5031
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27033
 STACKTOP = STACKTOP + 16 | 0; //@line 27034
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 27034
 $3 = sp; //@line 27035
 $4 = HEAP32[$0 >> 2] | 0; //@line 27036
 $5 = $1 + 12 | 0; //@line 27037
 $6 = HEAP32[$5 >> 2] | 0; //@line 27038
 do {
  if (!$6) {
   $16 = 0; //@line 27042
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 27045
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 27046
   FUNCTION_TABLE_vii[$9 & 31]($3, $1); //@line 27047
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 662; //@line 27050
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 27052
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 27054
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 27056
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 27058
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 27060
    sp = STACKTOP; //@line 27061
    STACKTOP = sp; //@line 27062
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 27064
    $16 = HEAP32[$5 >> 2] | 0; //@line 27066
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 27071
 HEAP32[$15 >> 2] = $16; //@line 27072
 $17 = _equeue_alloc($4, 16) | 0; //@line 27073
 do {
  if (!$17) {
   $$0$i = 0; //@line 27077
  } else {
   $19 = HEAP32[$15 >> 2] | 0; //@line 27079
   do {
    if (!$19) {
     $31 = 0; //@line 27083
    } else {
     $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 27086
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 27087
     FUNCTION_TABLE_vii[$22 & 31]($17, $3); //@line 27088
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 663; //@line 27091
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 27093
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 27095
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 27097
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 27099
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 27101
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 27103
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 27105
      sp = STACKTOP; //@line 27106
      STACKTOP = sp; //@line 27107
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 27109
      $31 = HEAP32[$15 >> 2] | 0; //@line 27111
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $31; //@line 27117
   _equeue_event_delay($17, $2); //@line 27118
   _equeue_event_dtor($17, 370); //@line 27119
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 27120
   $32 = _equeue_post($4, 371, $17) | 0; //@line 27121
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 664; //@line 27124
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 27126
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 27128
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 27130
    sp = STACKTOP; //@line 27131
    STACKTOP = sp; //@line 27132
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 27134
    $$0$i = $32; //@line 27135
    break;
   }
  }
 } while (0);
 $36 = $1 + 16 | 0; //@line 27140
 HEAP32[$36 >> 2] = $$0$i; //@line 27141
 $37 = HEAP32[$15 >> 2] | 0; //@line 27142
 do {
  if (!$37) {
   $43 = $$0$i; //@line 27146
  } else {
   $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 27149
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 27150
   FUNCTION_TABLE_vi[$40 & 1023]($3); //@line 27151
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 665; //@line 27154
    HEAP32[$AsyncCtx6 + 4 >> 2] = $36; //@line 27156
    sp = STACKTOP; //@line 27157
    STACKTOP = sp; //@line 27158
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 27160
    $43 = HEAP32[$36 >> 2] | 0; //@line 27162
    break;
   }
  }
 } while (0);
 if ($43 | 0) {
  STACKTOP = sp; //@line 27169
  return;
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 27171
 _mbed_assert_internal(13734, 13752, 57); //@line 27172
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 666; //@line 27175
  sp = STACKTOP; //@line 27176
  STACKTOP = sp; //@line 27177
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 27179
 STACKTOP = sp; //@line 27180
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4112
 $6 = $4 & 15; //@line 4114
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4116
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4123
 $$07475 = 15; //@line 4129
 $22 = $4; //@line 4129
 $27 = HEAP32[$15 >> 2] | 0; //@line 4129
 $28 = HEAP32[$8 >> 2] | 0; //@line 4129
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4129
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4129
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4134
   $70 = $28; //@line 4134
   $71 = $29; //@line 4134
   $74 = $32; //@line 4134
  } else {
   $25 = $22 & 15; //@line 4137
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4139
   $31 = tempRet0; //@line 4140
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4141
   $36 = tempRet0 | $31; //@line 4144
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4145
   $38 = tempRet0; //@line 4146
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4148
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4154
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4159
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4168
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4176
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4176
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4176
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4176
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4179
  $73 = tempRet0; //@line 4180
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4181
  $78 = tempRet0 | $73; //@line 4184
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4185
  $80 = tempRet0; //@line 4186
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4188
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4194
  $92 = ($22 & 255) >>> 4 & 255; //@line 4198
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4200
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4206
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4207
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4209
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4215
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4216
  $111 = $$07475 + -1 | 0; //@line 4217
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4224
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4224
  $27 = $109; //@line 4224
  $28 = $100; //@line 4224
  $29 = $101; //@line 4224
  $32 = $110; //@line 4224
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4226
 HEAP8[$2 >> 0] = $113; //@line 4229
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4230
 HEAP8[$2 + 1 >> 0] = $116; //@line 4234
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4235
 HEAP8[$2 + 2 >> 0] = $120; //@line 4239
 HEAP8[$2 + 3 >> 0] = $101; //@line 4242
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4243
 HEAP8[$2 + 4 >> 0] = $126; //@line 4247
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4248
 HEAP8[$2 + 5 >> 0] = $130; //@line 4252
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4253
 HEAP8[$2 + 6 >> 0] = $134; //@line 4257
 HEAP8[$2 + 7 >> 0] = $100; //@line 4260
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4261
 HEAP8[$2 + 8 >> 0] = $140; //@line 4265
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4266
 HEAP8[$2 + 9 >> 0] = $144; //@line 4270
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4271
 HEAP8[$2 + 10 >> 0] = $148; //@line 4275
 HEAP8[$2 + 11 >> 0] = $110; //@line 4278
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4279
 HEAP8[$2 + 12 >> 0] = $154; //@line 4283
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4284
 HEAP8[$2 + 13 >> 0] = $158; //@line 4288
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4289
 HEAP8[$2 + 14 >> 0] = $162; //@line 4293
 HEAP8[$2 + 15 >> 0] = $109; //@line 4296
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_500($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $47 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34708
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34710
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34712
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34714
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34716
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34718
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34720
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34722
 HEAP32[$4 + 364 >> 2] = 2; //@line 34726
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $21 = HEAP32[$6 >> 2] | 0; //@line 34731
  $24 = HEAP32[$4 + 972 >> 2] | 0; //@line 34734
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 34735
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 1036 | 0, $24); //@line 34736
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 34739
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 34740
   HEAP32[$25 >> 2] = $2; //@line 34741
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 34742
   HEAP32[$26 >> 2] = $4; //@line 34743
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 34744
   HEAP32[$27 >> 2] = $6; //@line 34745
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 34746
   HEAP32[$28 >> 2] = $8; //@line 34747
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 34748
   HEAP32[$29 >> 2] = $10; //@line 34749
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 34750
   HEAP32[$30 >> 2] = $12; //@line 34751
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 34752
   HEAP32[$31 >> 2] = $14; //@line 34753
   sp = STACKTOP; //@line 34754
   return;
  }
  ___async_unwind = 0; //@line 34757
  HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 34758
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 34759
  HEAP32[$25 >> 2] = $2; //@line 34760
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 34761
  HEAP32[$26 >> 2] = $4; //@line 34762
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 34763
  HEAP32[$27 >> 2] = $6; //@line 34764
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 34765
  HEAP32[$28 >> 2] = $8; //@line 34766
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 34767
  HEAP32[$29 >> 2] = $10; //@line 34768
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 34769
  HEAP32[$30 >> 2] = $12; //@line 34770
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 34771
  HEAP32[$31 >> 2] = $14; //@line 34772
  sp = STACKTOP; //@line 34773
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 34779
 $35 = $4 + 944 | 0; //@line 34780
 $36 = HEAP8[$35 >> 0] | 0; //@line 34781
 if (!($36 << 24 >> 24)) {
  HEAP8[$35 >> 0] = 1; //@line 34784
  $39 = 1; //@line 34785
 } else {
  $39 = $36; //@line 34787
 }
 HEAP8[$35 >> 0] = $39 | 32; //@line 34790
 HEAP8[$4 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 34799
 $47 = HEAP8[$4 + 378 >> 0] | 0; //@line 34801
 HEAP8[$4 + 379 >> 0] = $47; //@line 34803
 HEAP8[$10 >> 0] = $47; //@line 34804
 HEAP8[$12 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 34808
 HEAP32[$12 + 4 >> 2] = $14; //@line 34810
 $53 = HEAP32[$4 >> 2] | 0; //@line 34811
 $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 12 >> 2] | 0; //@line 34814
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 34815
 FUNCTION_TABLE_vii[$56 & 31]($53, $12); //@line 34816
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34819
  $57 = $ReallocAsyncCtx + 4 | 0; //@line 34820
  HEAP32[$57 >> 2] = $4; //@line 34821
  $58 = $ReallocAsyncCtx + 8 | 0; //@line 34822
  HEAP32[$58 >> 2] = $14; //@line 34823
  $59 = $ReallocAsyncCtx + 12 | 0; //@line 34824
  HEAP32[$59 >> 2] = $6; //@line 34825
  $60 = $ReallocAsyncCtx + 16 | 0; //@line 34826
  HEAP32[$60 >> 2] = $10; //@line 34827
  sp = STACKTOP; //@line 34828
  return;
 }
 ___async_unwind = 0; //@line 34831
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34832
 $57 = $ReallocAsyncCtx + 4 | 0; //@line 34833
 HEAP32[$57 >> 2] = $4; //@line 34834
 $58 = $ReallocAsyncCtx + 8 | 0; //@line 34835
 HEAP32[$58 >> 2] = $14; //@line 34836
 $59 = $ReallocAsyncCtx + 12 | 0; //@line 34837
 HEAP32[$59 >> 2] = $6; //@line 34838
 $60 = $ReallocAsyncCtx + 16 | 0; //@line 34839
 HEAP32[$60 >> 2] = $10; //@line 34840
 sp = STACKTOP; //@line 34841
 return;
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 27568
 STACKTOP = STACKTOP + 288 | 0; //@line 27569
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 27569
 $3 = sp; //@line 27570
 _memset($3 | 0, 0, 280) | 0; //@line 27571
 $4 = $0 + 8 | 0; //@line 27572
 HEAP32[$0 + 4 >> 2] = $4; //@line 27574
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 27575
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 27578
  HEAP32[$0 >> 2] = $8; //@line 27579
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 27581
  $11 = $8 << 2; //@line 27582
  $12 = $10 + ($11 << 2) | 0; //@line 27583
  $13 = $12 + 4 | 0; //@line 27584
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 27587
  $16 = $13 + 4 | 0; //@line 27588
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 27591
  $19 = $16 + 4 | 0; //@line 27592
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 27595
  $22 = $19 + 4 | 0; //@line 27596
  $24 = $0 + 24 | 0; //@line 27598
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 27599
  $$051 = $22 + -32 | 0; //@line 27600
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 27603
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 27609
   $$04353 = $24; //@line 27610
   $$04555$in = $8; //@line 27610
   $$054 = $$051; //@line 27610
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 27613
    $32 = HEAP32[$$054 >> 2] | 0; //@line 27614
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2324 + ((HEAPU8[13857 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13857 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13857 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13857 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 27645
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 27647
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2324 + ((HEAPU8[13857 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13857 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13857 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13857 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 27678
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 27680
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2324 + ((HEAPU8[13857 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13857 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13857 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13857 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 27711
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 27713
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2324 + ((HEAPU8[13857 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13857 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13857 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13857 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 27743
    $$054 = $$054 + -16 | 0; //@line 27744
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 27747
    }
   }
   $$0$lcssa = $$054; //@line 27753
   $$043$lcssa = $$04353; //@line 27753
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 27753
  } else {
   $$0$lcssa = $$051; //@line 27755
   $$043$lcssa = $24; //@line 27755
   $$pn$lcssa = $22; //@line 27755
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 27760
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 27764
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 27768
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 27770
  $$02$i$i = $3; //@line 27771
  $$031$i$i = 280; //@line 27771
 } else {
  $$02$i$i = $3; //@line 27773
  $$031$i$i = 280; //@line 27773
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 27776
  HEAP8[$$02$i$i >> 0] = 0; //@line 27778
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 27783
  }
 }
 STACKTOP = sp; //@line 27786
 return $6 | 0; //@line 27786
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_497($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34261
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34263
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34265
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34267
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34269
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34271
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34273
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34275
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 34279
  $19 = $4 + 976 | 0; //@line 34281
  $20 = HEAP32[$19 >> 2] | 0; //@line 34282
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 34283
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $4 + 1056 | 0, $20); //@line 34284
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 365; //@line 34287
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 34288
   HEAP32[$21 >> 2] = $2; //@line 34289
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 34290
   HEAP32[$22 >> 2] = $19; //@line 34291
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 34292
   HEAP32[$23 >> 2] = $6; //@line 34293
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 34294
   HEAP32[$24 >> 2] = $4; //@line 34295
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 34296
   HEAP32[$25 >> 2] = $8; //@line 34297
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 34298
   HEAP32[$26 >> 2] = $10; //@line 34299
   $27 = $ReallocAsyncCtx6 + 28 | 0; //@line 34300
   HEAP32[$27 >> 2] = $12; //@line 34301
   $28 = $ReallocAsyncCtx6 + 32 | 0; //@line 34302
   HEAP32[$28 >> 2] = $14; //@line 34303
   sp = STACKTOP; //@line 34304
   return;
  }
  ___async_unwind = 0; //@line 34307
  HEAP32[$ReallocAsyncCtx6 >> 2] = 365; //@line 34308
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 34309
  HEAP32[$21 >> 2] = $2; //@line 34310
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 34311
  HEAP32[$22 >> 2] = $19; //@line 34312
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 34313
  HEAP32[$23 >> 2] = $6; //@line 34314
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 34315
  HEAP32[$24 >> 2] = $4; //@line 34316
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 34317
  HEAP32[$25 >> 2] = $8; //@line 34318
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 34319
  HEAP32[$26 >> 2] = $10; //@line 34320
  $27 = $ReallocAsyncCtx6 + 28 | 0; //@line 34321
  HEAP32[$27 >> 2] = $12; //@line 34322
  $28 = $ReallocAsyncCtx6 + 32 | 0; //@line 34323
  HEAP32[$28 >> 2] = $14; //@line 34324
  sp = STACKTOP; //@line 34325
  return;
 }
 $29 = HEAP32[$6 >> 2] | 0; //@line 34329
 $31 = HEAP32[$4 + 976 >> 2] | 0; //@line 34331
 $34 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$4 >> 2] | 0) | 0) + $31 | 0; //@line 34334
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 34335
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($29, $4 + 1076 | 0, $34); //@line 34336
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 366; //@line 34339
  $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 34340
  HEAP32[$35 >> 2] = $4; //@line 34341
  $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 34342
  HEAP32[$36 >> 2] = $8; //@line 34343
  $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 34344
  HEAP32[$37 >> 2] = $10; //@line 34345
  $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 34346
  HEAP32[$38 >> 2] = $12; //@line 34347
  $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 34348
  HEAP32[$39 >> 2] = $14; //@line 34349
  $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 34350
  HEAP32[$40 >> 2] = $6; //@line 34351
  sp = STACKTOP; //@line 34352
  return;
 }
 ___async_unwind = 0; //@line 34355
 HEAP32[$ReallocAsyncCtx5 >> 2] = 366; //@line 34356
 $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 34357
 HEAP32[$35 >> 2] = $4; //@line 34358
 $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 34359
 HEAP32[$36 >> 2] = $8; //@line 34360
 $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 34361
 HEAP32[$37 >> 2] = $10; //@line 34362
 $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 34363
 HEAP32[$38 >> 2] = $12; //@line 34364
 $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 34365
 HEAP32[$39 >> 2] = $14; //@line 34366
 $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 34367
 HEAP32[$40 >> 2] = $6; //@line 34368
 sp = STACKTOP; //@line 34369
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_498($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34378
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34380
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34382
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34384
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34386
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34388
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34390
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34392
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $18 = HEAP32[$6 >> 2] | 0; //@line 34397
  $21 = HEAP32[$4 + 972 >> 2] | 0; //@line 34400
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 34401
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($18, $4 + 1036 | 0, $21); //@line 34402
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 34405
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 34406
   HEAP32[$22 >> 2] = $2; //@line 34407
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 34408
   HEAP32[$23 >> 2] = $4; //@line 34409
   $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 34410
   HEAP32[$24 >> 2] = $6; //@line 34411
   $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 34412
   HEAP32[$25 >> 2] = $8; //@line 34413
   $26 = $ReallocAsyncCtx7 + 20 | 0; //@line 34414
   HEAP32[$26 >> 2] = $10; //@line 34415
   $27 = $ReallocAsyncCtx7 + 24 | 0; //@line 34416
   HEAP32[$27 >> 2] = $12; //@line 34417
   $28 = $ReallocAsyncCtx7 + 28 | 0; //@line 34418
   HEAP32[$28 >> 2] = $14; //@line 34419
   sp = STACKTOP; //@line 34420
   return;
  }
  ___async_unwind = 0; //@line 34423
  HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 34424
  $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 34425
  HEAP32[$22 >> 2] = $2; //@line 34426
  $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 34427
  HEAP32[$23 >> 2] = $4; //@line 34428
  $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 34429
  HEAP32[$24 >> 2] = $6; //@line 34430
  $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 34431
  HEAP32[$25 >> 2] = $8; //@line 34432
  $26 = $ReallocAsyncCtx7 + 20 | 0; //@line 34433
  HEAP32[$26 >> 2] = $10; //@line 34434
  $27 = $ReallocAsyncCtx7 + 24 | 0; //@line 34435
  HEAP32[$27 >> 2] = $12; //@line 34436
  $28 = $ReallocAsyncCtx7 + 28 | 0; //@line 34437
  HEAP32[$28 >> 2] = $14; //@line 34438
  sp = STACKTOP; //@line 34439
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 34445
 $32 = $4 + 944 | 0; //@line 34446
 $33 = HEAP8[$32 >> 0] | 0; //@line 34447
 if (!($33 << 24 >> 24)) {
  HEAP8[$32 >> 0] = 1; //@line 34450
  $36 = 1; //@line 34451
 } else {
  $36 = $33; //@line 34453
 }
 HEAP8[$32 >> 0] = $36 | 32; //@line 34456
 HEAP8[$4 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 34465
 $44 = HEAP8[$4 + 378 >> 0] | 0; //@line 34467
 HEAP8[$4 + 379 >> 0] = $44; //@line 34469
 HEAP8[$10 >> 0] = $44; //@line 34470
 HEAP8[$12 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 34474
 HEAP32[$12 + 4 >> 2] = $14; //@line 34476
 $50 = HEAP32[$4 >> 2] | 0; //@line 34477
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 12 >> 2] | 0; //@line 34480
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 34481
 FUNCTION_TABLE_vii[$53 & 31]($50, $12); //@line 34482
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34485
  $54 = $ReallocAsyncCtx + 4 | 0; //@line 34486
  HEAP32[$54 >> 2] = $4; //@line 34487
  $55 = $ReallocAsyncCtx + 8 | 0; //@line 34488
  HEAP32[$55 >> 2] = $14; //@line 34489
  $56 = $ReallocAsyncCtx + 12 | 0; //@line 34490
  HEAP32[$56 >> 2] = $6; //@line 34491
  $57 = $ReallocAsyncCtx + 16 | 0; //@line 34492
  HEAP32[$57 >> 2] = $10; //@line 34493
  sp = STACKTOP; //@line 34494
  return;
 }
 ___async_unwind = 0; //@line 34497
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34498
 $54 = $ReallocAsyncCtx + 4 | 0; //@line 34499
 HEAP32[$54 >> 2] = $4; //@line 34500
 $55 = $ReallocAsyncCtx + 8 | 0; //@line 34501
 HEAP32[$55 >> 2] = $14; //@line 34502
 $56 = $ReallocAsyncCtx + 12 | 0; //@line 34503
 HEAP32[$56 >> 2] = $6; //@line 34504
 $57 = $ReallocAsyncCtx + 16 | 0; //@line 34505
 HEAP32[$57 >> 2] = $10; //@line 34506
 sp = STACKTOP; //@line 34507
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $21 = 0, $24 = 0, $25 = 0, $33 = 0, $36 = 0, $39 = 0, $42 = 0, $45 = 0, $48 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 16704
 STACKTOP = STACKTOP + 32 | 0; //@line 16705
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16705
 $vararg_buffer1 = sp + 8 | 0; //@line 16706
 $vararg_buffer = sp; //@line 16707
 _printf(12967, $vararg_buffer) | 0; //@line 16708
 _printf(13345, $vararg_buffer1) | 0; //@line 16709
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16710
 _putchar(10) | 0; //@line 16711
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 496; //@line 16714
  HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer1; //@line 16716
  HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 16718
  HEAP8[$AsyncCtx5 + 12 >> 0] = $1; //@line 16720
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 16722
  sp = STACKTOP; //@line 16723
  STACKTOP = sp; //@line 16724
  return 0; //@line 16724
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 16726
 HEAP8[$vararg_buffer >> 0] = 0; //@line 16727
 HEAP8[$vararg_buffer1 >> 0] = $1; //@line 16728
 $6 = $0 + 1097 | 0; //@line 16729
 HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$6 >> 0] | 0; //@line 16732
 HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1096 >> 0] | 0; //@line 16736
 HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1144 >> 2]; //@line 16740
 HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1148 >> 2]; //@line 16744
 $18 = $0 + 636 | 0; //@line 16745
 HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$18 >> 1] | 0; //@line 16748
 $21 = HEAP32[$0 >> 2] | 0; //@line 16749
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 16752
 $25 = $0 + 992 | 0; //@line 16753
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 16754
 FUNCTION_TABLE_iiiii[$24 & 3]($21, $vararg_buffer1, $vararg_buffer, $25) | 0; //@line 16755
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 497; //@line 16758
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16760
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 16762
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16764
  HEAP32[$AsyncCtx + 16 >> 2] = $25; //@line 16766
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 16768
  HEAP32[$AsyncCtx + 24 >> 2] = $18; //@line 16770
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 16772
  sp = STACKTOP; //@line 16773
  STACKTOP = sp; //@line 16774
  return 0; //@line 16774
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16776
 $33 = $0 + 264 | 0; //@line 16777
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($33) | 0) + 4 >> 2] = 1; //@line 16780
 $36 = $0 + 288 | 0; //@line 16781
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 4 >> 2] = 1; //@line 16784
 $39 = HEAP8[$6 >> 0] | 0; //@line 16785
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 8 >> 0] = $39; //@line 16788
 $42 = HEAP8[$vararg_buffer >> 0] | 0; //@line 16789
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 9 >> 0] = $42; //@line 16792
 $45 = HEAP32[$25 >> 2] | 0; //@line 16793
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 12 >> 2] = $45; //@line 16796
 $48 = HEAP32[$25 >> 2] | 0; //@line 16797
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($33) | 0) + 8 >> 2] = $48; //@line 16800
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $54 = $0 + 897 | 0; //@line 16805
  HEAP8[$54 >> 0] = (HEAP8[$54 >> 0] | 0) + 1 << 24 >> 24; //@line 16808
 }
 $57 = HEAP32[$0 >> 2] | 0; //@line 16810
 $60 = HEAP16[$18 >> 1] & 255; //@line 16813
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16814
 __ZN7LoRaPHY11handle_sendEPhh($57, $0 + 381 | 0, $60); //@line 16815
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 498; //@line 16818
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 16820
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 16822
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 16824
  sp = STACKTOP; //@line 16825
  STACKTOP = sp; //@line 16826
  return 0; //@line 16826
 } else {
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 16828
  $64 = $0 + 968 | 0; //@line 16829
  HEAP32[$64 >> 2] = HEAP32[$64 >> 2] | 1; //@line 16832
  STACKTOP = sp; //@line 16833
  return 0; //@line 16833
 }
 return 0; //@line 16835
}
function _initialize__async_cb_74($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26901
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26905
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26907
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 26911
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26915
  _mbed_assert_internal(14513, 14515, 47); //@line 26916
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 700; //@line 26919
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 26920
   HEAP32[$12 >> 2] = 1e6; //@line 26921
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 26922
   HEAP32[$13 >> 2] = $2; //@line 26923
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 26924
   HEAP32[$14 >> 2] = $6; //@line 26925
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 26926
   HEAP32[$15 >> 2] = $4; //@line 26927
   sp = STACKTOP; //@line 26928
   return;
  }
  ___async_unwind = 0; //@line 26931
  HEAP32[$ReallocAsyncCtx6 >> 2] = 700; //@line 26932
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 26933
  HEAP32[$12 >> 2] = 1e6; //@line 26934
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 26935
  HEAP32[$13 >> 2] = $2; //@line 26936
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 26937
  HEAP32[$14 >> 2] = $6; //@line 26938
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 26939
  HEAP32[$15 >> 2] = $4; //@line 26940
  sp = STACKTOP; //@line 26941
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 26945
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 26946
  $19 = tempRet0; //@line 26947
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 26948
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 26950
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 26952
  $25 = tempRet0; //@line 26953
  $26 = HEAP32[$2 >> 2] | 0; //@line 26954
  HEAP32[$26 >> 2] = 0; //@line 26955
  HEAP32[$26 + 4 >> 2] = 0; //@line 26957
  $30 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 26960
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 26961
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 26962
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 26965
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 26966
   HEAP32[$32 >> 2] = $2; //@line 26967
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 26968
   HEAP32[$33 >> 2] = 1e6; //@line 26969
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 26970
   HEAP32[$34 >> 2] = $10; //@line 26971
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 26972
   HEAP32[$35 >> 2] = $17; //@line 26973
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 26974
   $37 = $36; //@line 26975
   $38 = $37; //@line 26976
   HEAP32[$38 >> 2] = $24; //@line 26977
   $39 = $37 + 4 | 0; //@line 26978
   $40 = $39; //@line 26979
   HEAP32[$40 >> 2] = $25; //@line 26980
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 26981
   HEAP32[$41 >> 2] = $6; //@line 26982
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 26983
   HEAP32[$42 >> 2] = $4; //@line 26984
   sp = STACKTOP; //@line 26985
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 26989
  ___async_unwind = 0; //@line 26990
  HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 26991
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 26992
  HEAP32[$32 >> 2] = $2; //@line 26993
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 26994
  HEAP32[$33 >> 2] = 1e6; //@line 26995
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 26996
  HEAP32[$34 >> 2] = $10; //@line 26997
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 26998
  HEAP32[$35 >> 2] = $17; //@line 26999
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 27000
  $37 = $36; //@line 27001
  $38 = $37; //@line 27002
  HEAP32[$38 >> 2] = $24; //@line 27003
  $39 = $37 + 4 | 0; //@line 27004
  $40 = $39; //@line 27005
  HEAP32[$40 >> 2] = $25; //@line 27006
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 27007
  HEAP32[$41 >> 2] = $6; //@line 27008
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 27009
  HEAP32[$42 >> 2] = $4; //@line 27010
  sp = STACKTOP; //@line 27011
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32521
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32523
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32529
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32531
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32533
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32535
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32537
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32539
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32541
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32543
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32545
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 32548
  $53 = ___async_retval; //@line 32549
  HEAP32[$53 >> 2] = $$0; //@line 32550
  return;
 }
 $33 = $2 - $4 | 0; //@line 32553
 $25 = $6 + $4 | 0; //@line 32554
 $37 = $8 + 1 | 0; //@line 32555
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 32560
   $53 = ___async_retval; //@line 32561
   HEAP32[$53 >> 2] = $$0; //@line 32562
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 32567
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 32570
  $$0 = 0; //@line 32571
  $53 = ___async_retval; //@line 32572
  HEAP32[$53 >> 2] = $$0; //@line 32573
  return;
 }
 $$09$i75 = 0; //@line 32576
 do {
  $27 = $16 + $$09$i75 | 0; //@line 32580
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 32583
  $$09$i75 = $$09$i75 + 1 | 0; //@line 32584
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 32592
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 32593
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 32596
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 32597
  HEAP32[$32 >> 2] = $33; //@line 32598
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 32599
  HEAP32[$34 >> 2] = $4; //@line 32600
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 32601
  HEAP32[$35 >> 2] = $25; //@line 32602
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 32603
  HEAP32[$36 >> 2] = $37; //@line 32604
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 32605
  HEAP32[$38 >> 2] = $10; //@line 32606
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 32607
  HEAP32[$39 >> 2] = $12; //@line 32608
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 32609
  HEAP32[$40 >> 2] = $14; //@line 32610
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 32611
  HEAP32[$41 >> 2] = $16; //@line 32612
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 32613
  HEAP32[$42 >> 2] = $18; //@line 32614
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 32615
  HEAP32[$43 >> 2] = $20; //@line 32616
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 32617
  HEAP32[$44 >> 2] = $22; //@line 32618
  sp = STACKTOP; //@line 32619
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 32623
 ___async_unwind = 0; //@line 32624
 HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 32625
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 32626
 HEAP32[$32 >> 2] = $33; //@line 32627
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 32628
 HEAP32[$34 >> 2] = $4; //@line 32629
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 32630
 HEAP32[$35 >> 2] = $25; //@line 32631
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 32632
 HEAP32[$36 >> 2] = $37; //@line 32633
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 32634
 HEAP32[$38 >> 2] = $10; //@line 32635
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 32636
 HEAP32[$39 >> 2] = $12; //@line 32637
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 32638
 HEAP32[$40 >> 2] = $14; //@line 32639
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 32640
 HEAP32[$41 >> 2] = $16; //@line 32641
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 32642
 HEAP32[$42 >> 2] = $18; //@line 32643
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 32644
 HEAP32[$43 >> 2] = $20; //@line 32645
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 32646
 HEAP32[$44 >> 2] = $22; //@line 32647
 sp = STACKTOP; //@line 32648
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4309
 STACKTOP = STACKTOP + 32 | 0; //@line 4310
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4310
 $4 = sp + 8 | 0; //@line 4311
 $5 = sp; //@line 4312
 HEAP32[$5 >> 2] = 0; //@line 4313
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 4321
   STACKTOP = sp; //@line 4322
   return $$0 | 0; //@line 4322
  }
 }
 $11 = $0 + 328 | 0; //@line 4325
 $12 = $11; //@line 4326
 $14 = HEAP32[$12 >> 2] | 0; //@line 4328
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4331
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 4332
 $19 = tempRet0; //@line 4333
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 4346
  STACKTOP = sp; //@line 4347
  return $$0 | 0; //@line 4347
 }
 $30 = $11; //@line 4349
 HEAP32[$30 >> 2] = $18; //@line 4351
 HEAP32[$30 + 4 >> 2] = $19; //@line 4354
 if (!$1) {
  $$0 = 0; //@line 4357
  STACKTOP = sp; //@line 4358
  return $$0 | 0; //@line 4358
 }
 $35 = $0 + 360 | 0; //@line 4360
 $36 = $0 + 376 | 0; //@line 4361
 $37 = $0 + 392 | 0; //@line 4362
 $$05966 = $3; //@line 4363
 $$06065 = $2; //@line 4363
 $$06264 = $1; //@line 4363
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 4366
  $$061 = 16; //@line 4367
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 4373
   $42 = $0 + 360 + $$061 | 0; //@line 4374
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 4376
   HEAP8[$42 >> 0] = $44; //@line 4377
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 4385
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 4386
  if (___async) {
   label = 10; //@line 4389
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4392
  if ($46 | 0) {
   $$0 = $46; //@line 4395
   label = 19; //@line 4396
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 4401
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 4405
    $68 = $$06065 + $$163 | 0; //@line 4406
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 4411
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 4416
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 4418
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 4424
    }
    $$163 = $$163 + 1 | 0; //@line 4426
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 4435
  $83 = $$06264 - $39 | 0; //@line 4436
  if (!$83) {
   $$0 = 0; //@line 4441
   label = 19; //@line 4442
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 4445
   $$06065 = $$06065 + $39 | 0; //@line 4445
   $$06264 = $83; //@line 4445
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 694; //@line 4449
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 4451
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 4453
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 4455
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 4457
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 4459
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 4461
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 4463
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 4465
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 4467
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 4469
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 4471
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 4473
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 4475
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 4477
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 4479
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 4481
  sp = STACKTOP; //@line 4482
  STACKTOP = sp; //@line 4483
  return 0; //@line 4483
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 4486
  return $$0 | 0; //@line 4486
 }
 return 0; //@line 4488
}
function __Z11compute_micPKhtS0_jhjPj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $37 = 0, $42 = 0, $45 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22029
 HEAP8[13593] = $4; //@line 22030
 HEAP8[13594] = $3; //@line 22032
 HEAP8[13595] = $3 >>> 8; //@line 22035
 HEAP8[13596] = $3 >>> 16; //@line 22038
 HEAP8[13597] = $3 >>> 24; //@line 22041
 HEAP8[13598] = $5; //@line 22043
 HEAP8[13599] = $5 >>> 8; //@line 22046
 HEAP8[13600] = $5 >>> 16; //@line 22049
 HEAP8[13601] = $5 >>> 24; //@line 22052
 $22 = $1 & 255; //@line 22054
 HEAP8[13603] = $1; //@line 22056
 _mbedtls_cipher_init(22532); //@line 22057
 $24 = _mbedtls_cipher_info_from_type(2) | 0; //@line 22058
 if (!$24) {
  $$0 = -24960; //@line 22061
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 22063
  $26 = _mbedtls_cipher_setup(22532, $24) | 0; //@line 22064
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 595; //@line 22067
   HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 22069
   HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 22071
   HEAP32[$AsyncCtx15 + 12 >> 2] = $22; //@line 22073
   HEAP32[$AsyncCtx15 + 16 >> 2] = $2; //@line 22075
   sp = STACKTOP; //@line 22076
   return 0; //@line 22077
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22079
  if (!$26) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22082
   $32 = _mbedtls_cipher_cmac_starts(22532, $2, 128) | 0; //@line 22083
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 596; //@line 22086
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 22088
    HEAP32[$AsyncCtx11 + 8 >> 2] = $22; //@line 22090
    HEAP32[$AsyncCtx11 + 12 >> 2] = $6; //@line 22092
    sp = STACKTOP; //@line 22093
    return 0; //@line 22094
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22096
   if (!$32) {
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22099
    $37 = _mbedtls_cipher_cmac_update(22532, 13588, 16) | 0; //@line 22100
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 597; //@line 22103
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 22105
     HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 22107
     HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 22109
     sp = STACKTOP; //@line 22110
     return 0; //@line 22111
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22113
    if (!$37) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22116
     $42 = _mbedtls_cipher_cmac_update(22532, $0, $22) | 0; //@line 22117
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 598; //@line 22120
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 22122
      sp = STACKTOP; //@line 22123
      return 0; //@line 22124
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 22126
     if (!$42) {
      $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22129
      $45 = _mbedtls_cipher_cmac_finish(22532, 23840) | 0; //@line 22130
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 599; //@line 22133
       HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 22135
       sp = STACKTOP; //@line 22136
       return 0; //@line 22137
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22139
      if (!$45) {
       HEAP32[$6 >> 2] = (HEAPU8[23842] | 0) << 16 | (HEAPU8[23843] | 0) << 24 | (HEAPU8[23841] | 0) << 8 | (HEAPU8[23840] | 0); //@line 22156
       $$0 = 0; //@line 22157
      } else {
       $$0 = $45; //@line 22159
      }
     } else {
      $$0 = $42; //@line 22162
     }
    } else {
     $$0 = $37; //@line 22165
    }
   } else {
    $$0 = $32; //@line 22168
   }
  } else {
   $$0 = $26; //@line 22171
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22174
 _mbedtls_cipher_free(22532); //@line 22175
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 600; //@line 22178
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 22180
  sp = STACKTOP; //@line 22181
  return 0; //@line 22182
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 22184
  return $$0 | 0; //@line 22185
 }
 return 0; //@line 22187
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_456($0) {
 $0 = $0 | 0;
 var $$pre12 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24239
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24241
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24243
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24245
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24247
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24249
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24251
 $$pre12 = HEAP32[$2 >> 2] | 0; //@line 24252
 if ($$pre12 | 0) {
  $15 = HEAP32[$$pre12 + 4 >> 2] | 0; //@line 24256
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 24257
  FUNCTION_TABLE_vii[$15 & 31]($6, $8); //@line 24258
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 24261
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 24262
   HEAP32[$16 >> 2] = $2; //@line 24263
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 24264
   HEAP32[$17 >> 2] = $4; //@line 24265
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 24266
   HEAP32[$18 >> 2] = $10; //@line 24267
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 24268
   HEAP32[$19 >> 2] = $12; //@line 24269
   sp = STACKTOP; //@line 24270
   return;
  }
  ___async_unwind = 0; //@line 24273
  HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 24274
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 24275
  HEAP32[$16 >> 2] = $2; //@line 24276
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 24277
  HEAP32[$17 >> 2] = $4; //@line 24278
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 24279
  HEAP32[$18 >> 2] = $10; //@line 24280
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 24281
  HEAP32[$19 >> 2] = $12; //@line 24282
  sp = STACKTOP; //@line 24283
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 24286
 $20 = $10 + 32 | 0; //@line 24287
 $21 = $10 + 44 | 0; //@line 24288
 $22 = HEAP32[$21 >> 2] | 0; //@line 24289
 if (!$22) {
  return;
 }
 $24 = $12 + 1912 | 0; //@line 24294
 if (($24 | 0) == ($20 | 0)) {
  return;
 }
 $26 = $12 + 1924 | 0; //@line 24299
 $27 = HEAP32[$26 >> 2] | 0; //@line 24300
 if (!$27) {
  $36 = HEAP32[$22 + 4 >> 2] | 0; //@line 24304
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 24305
  FUNCTION_TABLE_vii[$36 & 31]($24, $20); //@line 24306
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24309
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 24310
   HEAP32[$37 >> 2] = $21; //@line 24311
   $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 24312
   HEAP32[$38 >> 2] = $26; //@line 24313
   sp = STACKTOP; //@line 24314
   return;
  }
  ___async_unwind = 0; //@line 24317
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24318
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 24319
  HEAP32[$37 >> 2] = $21; //@line 24320
  $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 24321
  HEAP32[$38 >> 2] = $26; //@line 24322
  sp = STACKTOP; //@line 24323
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 24327
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 24328
  FUNCTION_TABLE_vi[$30 & 1023]($24); //@line 24329
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 24332
   $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 24333
   HEAP32[$31 >> 2] = $21; //@line 24334
   $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 24335
   HEAP32[$32 >> 2] = $26; //@line 24336
   $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 24337
   HEAP32[$33 >> 2] = $24; //@line 24338
   $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 24339
   HEAP32[$34 >> 2] = $20; //@line 24340
   sp = STACKTOP; //@line 24341
   return;
  }
  ___async_unwind = 0; //@line 24344
  HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 24345
  $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 24346
  HEAP32[$31 >> 2] = $21; //@line 24347
  $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 24348
  HEAP32[$32 >> 2] = $26; //@line 24349
  $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 24350
  HEAP32[$33 >> 2] = $24; //@line 24351
  $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 24352
  HEAP32[$34 >> 2] = $20; //@line 24353
  sp = STACKTOP; //@line 24354
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_233($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 37794
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37796
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37798
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37800
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37802
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37804
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 37807
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 37809
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 37812
 $18 = HEAP8[$0 + 33 >> 0] & 1; //@line 37815
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 37817
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 37819
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 37821
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 37823
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 37825
 L2 : do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   do {
    if (!(HEAP8[$4 >> 0] | 0)) {
     $$182$off0 = $18; //@line 37834
     $$186$off0 = $16; //@line 37834
    } else {
     if (!(HEAP8[$2 >> 0] | 0)) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $16; //@line 37843
       $$283$off0 = 1; //@line 37843
       label = 13; //@line 37844
       break L2;
      } else {
       $$182$off0 = 1; //@line 37847
       $$186$off0 = $16; //@line 37847
       break;
      }
     }
     if ((HEAP32[$24 >> 2] | 0) == 1) {
      label = 18; //@line 37854
      break L2;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      label = 18; //@line 37861
      break L2;
     } else {
      $$182$off0 = 1; //@line 37864
      $$186$off0 = 1; //@line 37864
     }
    }
   } while (0);
   $30 = $20 + 8 | 0; //@line 37868
   if ($30 >>> 0 < $14 >>> 0) {
    HEAP8[$2 >> 0] = 0; //@line 37871
    HEAP8[$4 >> 0] = 0; //@line 37872
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 37873
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $8, $10, $10, 1, $12); //@line 37874
    if (!___async) {
     ___async_unwind = 0; //@line 37877
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 801; //@line 37879
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 37881
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 37883
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 37885
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 37887
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 37889
    HEAP8[$ReallocAsyncCtx5 + 24 >> 0] = $12 & 1; //@line 37892
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 37894
    HEAP8[$ReallocAsyncCtx5 + 32 >> 0] = $$186$off0 & 1; //@line 37897
    HEAP8[$ReallocAsyncCtx5 + 33 >> 0] = $$182$off0 & 1; //@line 37900
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $30; //@line 37902
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 37904
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 37906
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 37908
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 37910
    sp = STACKTOP; //@line 37911
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 37914
    $$283$off0 = $$182$off0; //@line 37914
    label = 13; //@line 37915
   }
  } else {
   $$085$off0$reg2mem$0 = $16; //@line 37918
   $$283$off0 = $18; //@line 37918
   label = 13; //@line 37919
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$22 >> 2] = $10; //@line 37925
    $59 = $8 + 40 | 0; //@line 37926
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 37929
    if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$24 >> 2] | 0) == 2) {
      HEAP8[$6 >> 0] = 1; //@line 37937
      if ($$283$off0) {
       label = 18; //@line 37939
       break;
      } else {
       $67 = 4; //@line 37942
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 37949
   } else {
    $67 = 4; //@line 37951
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 37956
 }
 HEAP32[$26 >> 2] = $67; //@line 37958
 return;
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6812
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6814
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 6816
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 6821
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6822
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 6823
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 344; //@line 6826
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 6827
   HEAP32[$9 >> 2] = $2; //@line 6828
   sp = STACKTOP; //@line 6829
   return;
  }
  ___async_unwind = 0; //@line 6832
  HEAP32[$ReallocAsyncCtx2 >> 2] = 344; //@line 6833
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 6834
  HEAP32[$9 >> 2] = $2; //@line 6835
  sp = STACKTOP; //@line 6836
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 6840
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 6845
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 6846
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 6847
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 6850
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 6851
   HEAP32[$16 >> 2] = $2; //@line 6852
   sp = STACKTOP; //@line 6853
   return;
  }
  ___async_unwind = 0; //@line 6856
  HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 6857
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 6858
  HEAP32[$16 >> 2] = $2; //@line 6859
  sp = STACKTOP; //@line 6860
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 6864
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 6869
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 6870
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 6871
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 6874
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 6875
   HEAP32[$23 >> 2] = $2; //@line 6876
   sp = STACKTOP; //@line 6877
   return;
  }
  ___async_unwind = 0; //@line 6880
  HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 6881
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 6882
  HEAP32[$23 >> 2] = $2; //@line 6883
  sp = STACKTOP; //@line 6884
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 6888
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 6893
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 6894
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 6895
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 6898
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 6899
   HEAP32[$30 >> 2] = $2; //@line 6900
   sp = STACKTOP; //@line 6901
   return;
  }
  ___async_unwind = 0; //@line 6904
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 6905
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 6906
  HEAP32[$30 >> 2] = $2; //@line 6907
  sp = STACKTOP; //@line 6908
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 6912
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 6917
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 6918
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 6919
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 6922
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 6923
   HEAP32[$37 >> 2] = $2; //@line 6924
   sp = STACKTOP; //@line 6925
   return;
  }
  ___async_unwind = 0; //@line 6928
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 6929
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 6930
  HEAP32[$37 >> 2] = $2; //@line 6931
  sp = STACKTOP; //@line 6932
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 6936
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 6942
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 6943
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 6944
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 6947
  sp = STACKTOP; //@line 6948
  return;
 }
 ___async_unwind = 0; //@line 6951
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 6952
 sp = STACKTOP; //@line 6953
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $16 = 0, $17 = 0, $30 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 14552
 STACKTOP = STACKTOP + 32 | 0; //@line 14553
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14553
 $$byval_copy = sp + 24 | 0; //@line 14554
 $vararg_buffer3 = sp + 16 | 0; //@line 14555
 $vararg_buffer1 = sp + 8 | 0; //@line 14556
 _printf(12967, sp) | 0; //@line 14558
 _printf(13233, $vararg_buffer1) | 0; //@line 14559
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14560
 _putchar(10) | 0; //@line 14561
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 451; //@line 14564
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14566
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 14568
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14570
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 14572
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14574
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 14576
  sp = STACKTOP; //@line 14577
  STACKTOP = sp; //@line 14578
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14580
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 14586
   _printf(12994, $$byval_copy) | 0; //@line 14587
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14588
   _putchar(10) | 0; //@line 14589
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 453; //@line 14592
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14594
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14596
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14598
    sp = STACKTOP; //@line 14599
    STACKTOP = sp; //@line 14600
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14602
   $16 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14604
   HEAP32[$vararg_buffer1 >> 2] = 361; //@line 14605
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14607
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14608
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14609
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14609
   $17 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($16, $0, $$byval_copy) | 0; //@line 14610
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 454; //@line 14613
    HEAP32[$AsyncCtx16 + 4 >> 2] = $vararg_buffer1; //@line 14615
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 14617
    sp = STACKTOP; //@line 14618
    STACKTOP = sp; //@line 14619
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 14621
   do {
    if (!$17) {
     $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14625
     _mbed_assert_internal(12851, 12860, 217); //@line 14626
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 455; //@line 14629
      HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 14631
      HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 14633
      sp = STACKTOP; //@line 14634
      STACKTOP = sp; //@line 14635
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14637
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14643
  } else {
   $10 = HEAP32[$0 >> 2] | 0; //@line 14645
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14646
   __ZN7LoRaPHY18put_radio_to_sleepEv($10); //@line 14647
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 452; //@line 14650
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 14652
    sp = STACKTOP; //@line 14653
    STACKTOP = sp; //@line 14654
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14656
    break;
   }
  }
 } while (0);
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 14664
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 14668
 $30 = $0 + 944 | 0; //@line 14669
 HEAP8[$30 >> 0] = HEAP8[$30 >> 0] | 32; //@line 14672
 STACKTOP = sp; //@line 14673
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_303($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3646
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3648
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3650
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3652
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3654
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3656
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3658
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3660
 $17 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 3663
 if (!$17) {
  $27 = HEAP32[$2 >> 2] | 0; //@line 3666
  $29 = $10 + 12 | 0; //@line 3668
  HEAP32[$10 >> 2] = 526; //@line 3669
  HEAP32[$10 + 4 >> 2] = 0; //@line 3671
  HEAP32[$10 + 8 >> 2] = $4; //@line 3673
  HEAP32[$29 >> 2] = 848; //@line 3674
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 3675
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($27, $4 + 1016 | 0, $10); //@line 3676
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 527; //@line 3679
   $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 3680
   HEAP32[$30 >> 2] = $2; //@line 3681
   $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 3682
   HEAP32[$31 >> 2] = $4; //@line 3683
   $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 3684
   HEAP32[$32 >> 2] = $6; //@line 3685
   $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 3686
   HEAP32[$33 >> 2] = $14; //@line 3687
   $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 3688
   HEAP32[$34 >> 2] = $12; //@line 3689
   $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 3690
   HEAP32[$35 >> 2] = $29; //@line 3691
   $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 3692
   HEAP32[$36 >> 2] = $10; //@line 3693
   sp = STACKTOP; //@line 3694
   return;
  }
  ___async_unwind = 0; //@line 3697
  HEAP32[$ReallocAsyncCtx9 >> 2] = 527; //@line 3698
  $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 3699
  HEAP32[$30 >> 2] = $2; //@line 3700
  $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 3701
  HEAP32[$31 >> 2] = $4; //@line 3702
  $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 3703
  HEAP32[$32 >> 2] = $6; //@line 3704
  $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 3705
  HEAP32[$33 >> 2] = $14; //@line 3706
  $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 3707
  HEAP32[$34 >> 2] = $12; //@line 3708
  $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 3709
  HEAP32[$35 >> 2] = $29; //@line 3710
  $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 3711
  HEAP32[$36 >> 2] = $10; //@line 3712
  sp = STACKTOP; //@line 3713
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 3717
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 3718
  FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 3719
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 525; //@line 3722
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 3723
   HEAP32[$21 >> 2] = $2; //@line 3724
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 3725
   HEAP32[$22 >> 2] = $4; //@line 3726
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 3727
   HEAP32[$23 >> 2] = $10; //@line 3728
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 3729
   HEAP32[$24 >> 2] = $12; //@line 3730
   $25 = $ReallocAsyncCtx + 20 | 0; //@line 3731
   HEAP32[$25 >> 2] = $14; //@line 3732
   $26 = $ReallocAsyncCtx + 24 | 0; //@line 3733
   HEAP32[$26 >> 2] = $6; //@line 3734
   sp = STACKTOP; //@line 3735
   return;
  }
  ___async_unwind = 0; //@line 3738
  HEAP32[$ReallocAsyncCtx >> 2] = 525; //@line 3739
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 3740
  HEAP32[$21 >> 2] = $2; //@line 3741
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 3742
  HEAP32[$22 >> 2] = $4; //@line 3743
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 3744
  HEAP32[$23 >> 2] = $10; //@line 3745
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 3746
  HEAP32[$24 >> 2] = $12; //@line 3747
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 3748
  HEAP32[$25 >> 2] = $14; //@line 3749
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 3750
  HEAP32[$26 >> 2] = $6; //@line 3751
  sp = STACKTOP; //@line 3752
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 34765
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34769
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34771
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34773
 $9 = $4 + 12 | 0; //@line 34774
 HEAP32[$4 >> 2] = 581; //@line 34775
 HEAP32[$4 + 4 >> 2] = 0; //@line 34777
 HEAP32[$4 + 8 >> 2] = $6; //@line 34779
 HEAP32[$9 >> 2] = 848; //@line 34780
 $10 = $6 + 1260 | 0; //@line 34781
 if (($10 | 0) == ($4 | 0)) {
  $29 = HEAP32[214] | 0; //@line 34785
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 34786
  FUNCTION_TABLE_vi[$29 & 1023]($4); //@line 34787
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 34790
   $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 34791
   HEAP32[$30 >> 2] = $4; //@line 34792
   $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 34793
   HEAP32[$31 >> 2] = $8; //@line 34794
   sp = STACKTOP; //@line 34795
   return;
  }
  ___async_unwind = 0; //@line 34798
  HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 34799
  $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 34800
  HEAP32[$30 >> 2] = $4; //@line 34801
  $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 34802
  HEAP32[$31 >> 2] = $8; //@line 34803
  sp = STACKTOP; //@line 34804
  return;
 }
 $12 = $6 + 1272 | 0; //@line 34807
 $13 = HEAP32[$12 >> 2] | 0; //@line 34808
 if (!$13) {
  $23 = HEAP32[213] | 0; //@line 34812
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 34813
  FUNCTION_TABLE_vii[$23 & 31]($10, $4); //@line 34814
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 34817
   $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 34818
   HEAP32[$24 >> 2] = $9; //@line 34819
   $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 34820
   HEAP32[$25 >> 2] = $12; //@line 34821
   $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 34822
   HEAP32[$26 >> 2] = $4; //@line 34823
   $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 34824
   HEAP32[$27 >> 2] = $8; //@line 34825
   sp = STACKTOP; //@line 34826
   return;
  }
  ___async_unwind = 0; //@line 34829
  HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 34830
  $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 34831
  HEAP32[$24 >> 2] = $9; //@line 34832
  $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 34833
  HEAP32[$25 >> 2] = $12; //@line 34834
  $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 34835
  HEAP32[$26 >> 2] = $4; //@line 34836
  $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 34837
  HEAP32[$27 >> 2] = $8; //@line 34838
  sp = STACKTOP; //@line 34839
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 34843
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 34844
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 34845
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 34848
   $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 34849
   HEAP32[$17 >> 2] = $9; //@line 34850
   $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 34851
   HEAP32[$18 >> 2] = $12; //@line 34852
   $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 34853
   HEAP32[$19 >> 2] = $10; //@line 34854
   $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 34855
   HEAP32[$20 >> 2] = $4; //@line 34856
   $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 34857
   HEAP32[$21 >> 2] = $8; //@line 34858
   sp = STACKTOP; //@line 34859
   return;
  }
  ___async_unwind = 0; //@line 34862
  HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 34863
  $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 34864
  HEAP32[$17 >> 2] = $9; //@line 34865
  $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 34866
  HEAP32[$18 >> 2] = $12; //@line 34867
  $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 34868
  HEAP32[$19 >> 2] = $10; //@line 34869
  $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 34870
  HEAP32[$20 >> 2] = $4; //@line 34871
  $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 34872
  HEAP32[$21 >> 2] = $8; //@line 34873
  sp = STACKTOP; //@line 34874
  return;
 }
}
function _initialize__async_cb_71($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26643
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26647
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26649
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26653
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26655
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26657
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26659
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 26668
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 26669
  $24 = HEAP32[$10 >> 2] | 0; //@line 26670
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 26679
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 26683
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 26685
    $28 = tempRet0; //@line 26686
    $31 = $12; //@line 26689
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 26695
    $38 = tempRet0; //@line 26696
    $39 = $12; //@line 26697
    HEAP32[$39 >> 2] = $37; //@line 26699
    HEAP32[$39 + 4 >> 2] = $38; //@line 26702
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 26709
     $96 = $28; //@line 26709
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 26711
     $49 = tempRet0; //@line 26712
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 26713
     $52 = $12; //@line 26715
     HEAP32[$52 >> 2] = $50; //@line 26717
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 26720
     $95 = $48; //@line 26721
     $96 = $49; //@line 26721
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 26726
      $96 = 0; //@line 26726
      break;
     }
    default:
     {
      label = 6; //@line 26730
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 26736
   $57 = tempRet0; //@line 26737
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 26738
   $59 = tempRet0; //@line 26739
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 26740
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 26742
   $64 = $12; //@line 26744
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 26750
   $71 = tempRet0; //@line 26751
   $72 = $12; //@line 26752
   HEAP32[$72 >> 2] = $70; //@line 26754
   HEAP32[$72 + 4 >> 2] = $71; //@line 26757
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 26764
    $96 = $59; //@line 26764
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 26766
    $82 = tempRet0; //@line 26767
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 26768
    $85 = $12; //@line 26770
    HEAP32[$85 >> 2] = $83; //@line 26772
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 26775
    $95 = $81; //@line 26776
    $96 = $82; //@line 26776
   }
  }
  $89 = $14; //@line 26779
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 26785
  $99 = $14; //@line 26787
  HEAP32[$99 >> 2] = $97; //@line 26789
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 26792
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26794
 _schedule_interrupt($4); //@line 26795
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 703; //@line 26798
  sp = STACKTOP; //@line 26799
  return;
 }
 ___async_unwind = 0; //@line 26802
 HEAP32[$ReallocAsyncCtx5 >> 2] = 703; //@line 26803
 sp = STACKTOP; //@line 26804
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_63($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26008
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26010
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26012
 $5 = $2 + 1240 | 0; //@line 26013
 $6 = $4 + 12 | 0; //@line 26014
 HEAP32[$4 >> 2] = 142; //@line 26015
 HEAP32[$4 + 4 >> 2] = 0; //@line 26017
 HEAP32[$4 + 8 >> 2] = $2; //@line 26019
 HEAP32[$6 >> 2] = 648; //@line 26020
 $7 = $2 + 1280 | 0; //@line 26021
 do {
  if (($7 | 0) != ($4 | 0)) {
   $9 = $2 + 1292 | 0; //@line 26025
   $10 = HEAP32[$9 >> 2] | 0; //@line 26026
   if ($10 | 0) {
    $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 26030
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26031
    FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 26032
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 26035
     $14 = $ReallocAsyncCtx + 4 | 0; //@line 26036
     HEAP32[$14 >> 2] = $6; //@line 26037
     $15 = $ReallocAsyncCtx + 8 | 0; //@line 26038
     HEAP32[$15 >> 2] = $9; //@line 26039
     $16 = $ReallocAsyncCtx + 12 | 0; //@line 26040
     HEAP32[$16 >> 2] = $7; //@line 26041
     $17 = $ReallocAsyncCtx + 16 | 0; //@line 26042
     HEAP32[$17 >> 2] = $4; //@line 26043
     $18 = $ReallocAsyncCtx + 20 | 0; //@line 26044
     HEAP32[$18 >> 2] = $5; //@line 26045
     sp = STACKTOP; //@line 26046
     return;
    }
    ___async_unwind = 0; //@line 26049
    HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 26050
    $14 = $ReallocAsyncCtx + 4 | 0; //@line 26051
    HEAP32[$14 >> 2] = $6; //@line 26052
    $15 = $ReallocAsyncCtx + 8 | 0; //@line 26053
    HEAP32[$15 >> 2] = $9; //@line 26054
    $16 = $ReallocAsyncCtx + 12 | 0; //@line 26055
    HEAP32[$16 >> 2] = $7; //@line 26056
    $17 = $ReallocAsyncCtx + 16 | 0; //@line 26057
    HEAP32[$17 >> 2] = $4; //@line 26058
    $18 = $ReallocAsyncCtx + 20 | 0; //@line 26059
    HEAP32[$18 >> 2] = $5; //@line 26060
    sp = STACKTOP; //@line 26061
    return;
   }
   $19 = HEAP32[$6 >> 2] | 0; //@line 26064
   if (!$19) {
    HEAP32[$9 >> 2] = 0; //@line 26067
    break;
   }
   $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 26071
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 26072
   FUNCTION_TABLE_vii[$22 & 31]($7, $4); //@line 26073
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 26076
    $23 = $ReallocAsyncCtx2 + 4 | 0; //@line 26077
    HEAP32[$23 >> 2] = $6; //@line 26078
    $24 = $ReallocAsyncCtx2 + 8 | 0; //@line 26079
    HEAP32[$24 >> 2] = $9; //@line 26080
    $25 = $ReallocAsyncCtx2 + 12 | 0; //@line 26081
    HEAP32[$25 >> 2] = $5; //@line 26082
    $26 = $ReallocAsyncCtx2 + 16 | 0; //@line 26083
    HEAP32[$26 >> 2] = $4; //@line 26084
    sp = STACKTOP; //@line 26085
    return;
   }
   ___async_unwind = 0; //@line 26088
   HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 26089
   $23 = $ReallocAsyncCtx2 + 4 | 0; //@line 26090
   HEAP32[$23 >> 2] = $6; //@line 26091
   $24 = $ReallocAsyncCtx2 + 8 | 0; //@line 26092
   HEAP32[$24 >> 2] = $9; //@line 26093
   $25 = $ReallocAsyncCtx2 + 12 | 0; //@line 26094
   HEAP32[$25 >> 2] = $5; //@line 26095
   $26 = $ReallocAsyncCtx2 + 16 | 0; //@line 26096
   HEAP32[$26 >> 2] = $4; //@line 26097
   sp = STACKTOP; //@line 26098
   return;
  }
 } while (0);
 __ZN4mbed6Ticker5setupEy($5, 1e5, 0); //@line 26102
 $27 = HEAP32[$6 >> 2] | 0; //@line 26103
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 26109
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26110
 FUNCTION_TABLE_vi[$30 & 1023]($4); //@line 26111
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 26114
  sp = STACKTOP; //@line 26115
  return;
 }
 ___async_unwind = 0; //@line 26118
 HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 26119
 sp = STACKTOP; //@line 26120
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22194
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22196
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22198
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22200
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22202
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22204
 $12 = $0 + 24 | 0; //@line 22206
 $14 = HEAP32[$12 >> 2] | 0; //@line 22208
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 22211
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 22213
 $20 = HEAP32[$2 >> 2] | 0; //@line 22214
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 22218
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 22219
  FUNCTION_TABLE_vii[$23 & 31]($6, $8); //@line 22220
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 133; //@line 22223
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 22224
   HEAP32[$24 >> 2] = $2; //@line 22225
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 22226
   HEAP32[$25 >> 2] = $4; //@line 22227
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 22228
   HEAP32[$26 >> 2] = $10; //@line 22229
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 22230
   $28 = $27; //@line 22231
   $29 = $28; //@line 22232
   HEAP32[$29 >> 2] = $14; //@line 22233
   $30 = $28 + 4 | 0; //@line 22234
   $31 = $30; //@line 22235
   HEAP32[$31 >> 2] = $17; //@line 22236
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 22237
   HEAP32[$32 >> 2] = $19; //@line 22238
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 22239
   HEAP32[$33 >> 2] = $8; //@line 22240
   sp = STACKTOP; //@line 22241
   return;
  }
  ___async_unwind = 0; //@line 22244
  HEAP32[$ReallocAsyncCtx2 >> 2] = 133; //@line 22245
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 22246
  HEAP32[$24 >> 2] = $2; //@line 22247
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 22248
  HEAP32[$25 >> 2] = $4; //@line 22249
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 22250
  HEAP32[$26 >> 2] = $10; //@line 22251
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 22252
  $28 = $27; //@line 22253
  $29 = $28; //@line 22254
  HEAP32[$29 >> 2] = $14; //@line 22255
  $30 = $28 + 4 | 0; //@line 22256
  $31 = $30; //@line 22257
  HEAP32[$31 >> 2] = $17; //@line 22258
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 22259
  HEAP32[$32 >> 2] = $19; //@line 22260
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 22261
  HEAP32[$33 >> 2] = $8; //@line 22262
  sp = STACKTOP; //@line 22263
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 22266
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 22267
 $34 = HEAP32[$2 >> 2] | 0; //@line 22268
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 22272
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22273
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 22274
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 22277
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 22278
   HEAP32[$38 >> 2] = $19; //@line 22279
   sp = STACKTOP; //@line 22280
   return;
  }
  ___async_unwind = 0; //@line 22283
  HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 22284
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 22285
  HEAP32[$38 >> 2] = $19; //@line 22286
  sp = STACKTOP; //@line 22287
  return;
 }
 $40 = HEAP32[$19 + 784 >> 2] | 0; //@line 22291
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 22297
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 22303
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 22304
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 22305
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22308
  sp = STACKTOP; //@line 22309
  return;
 }
 ___async_unwind = 0; //@line 22312
 HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22313
 sp = STACKTOP; //@line 22314
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_232($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 37638
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37640
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37642
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37646
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37648
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 37650
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 37653
 $15 = $4 + 24 | 0; //@line 37654
 do {
  if ((HEAP32[$0 + 12 >> 2] | 0) > 1) {
   $18 = HEAP32[$4 + 8 >> 2] | 0; //@line 37659
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 37663
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 37670
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 37681
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $10, $12, $14); //@line 37682
      if (!___async) {
       ___async_unwind = 0; //@line 37685
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 805; //@line 37687
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 37689
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $8; //@line 37691
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 37693
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 37695
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 37697
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 37699
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $12; //@line 37701
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $14 & 1; //@line 37704
      sp = STACKTOP; //@line 37705
      return;
     }
     $36 = $2 + 24 | 0; //@line 37708
     $37 = $2 + 54 | 0; //@line 37709
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 37724
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $10, $12, $14); //@line 37725
     if (!___async) {
      ___async_unwind = 0; //@line 37728
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 804; //@line 37730
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 37732
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 37734
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 37736
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 37738
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 37740
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 37742
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $10; //@line 37744
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 37746
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $14 & 1; //@line 37749
     sp = STACKTOP; //@line 37750
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 37754
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 37758
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $10, $12, $14); //@line 37759
    if (!___async) {
     ___async_unwind = 0; //@line 37762
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 803; //@line 37764
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 37766
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 37768
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 37770
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 37772
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 37774
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 37776
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 37779
    sp = STACKTOP; //@line 37780
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_241($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 251
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 253
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 255
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 257
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 259
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 261
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 263
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 265
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 267
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 269
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 271
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 273
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 275
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 277
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 279
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 281
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 283
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 285
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 287
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 289
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 291
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 293
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 295
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 297
 $48 = HEAP8[$0 + 96 >> 0] & 1; //@line 300
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 302
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 306
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 308
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 310
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 312
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 314
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 316
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 322
 _printf(12139, HEAP32[$0 + 132 >> 2] | 0) | 0; //@line 323
 HEAP32[$54 >> 2] = $AsyncRetVal; //@line 324
 _printf(12359, $54) | 0; //@line 325
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(120) | 0; //@line 326
 _putchar(10) | 0; //@line 327
 if (!___async) {
  ___async_unwind = 0; //@line 330
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 300; //@line 332
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $58; //@line 334
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $40; //@line 336
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $30; //@line 338
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $26; //@line 340
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $36; //@line 342
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $22; //@line 344
 HEAP8[$ReallocAsyncCtx6 + 28 >> 0] = $6; //@line 346
 HEAP8[$ReallocAsyncCtx6 + 29 >> 0] = $2; //@line 348
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $62; //@line 350
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $34; //@line 352
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $60; //@line 354
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $44; //@line 356
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $18; //@line 358
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $16; //@line 360
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $28; //@line 362
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $32; //@line 364
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $10; //@line 366
 HEAP32[$ReallocAsyncCtx6 + 68 >> 2] = $20; //@line 368
 HEAP32[$ReallocAsyncCtx6 + 72 >> 2] = $8; //@line 370
 HEAP32[$ReallocAsyncCtx6 + 76 >> 2] = $50; //@line 372
 HEAP32[$ReallocAsyncCtx6 + 80 >> 2] = $24; //@line 374
 HEAP32[$ReallocAsyncCtx6 + 84 >> 2] = $42; //@line 376
 HEAP32[$ReallocAsyncCtx6 + 88 >> 2] = $AsyncRetVal; //@line 378
 HEAP32[$ReallocAsyncCtx6 + 92 >> 2] = $46; //@line 380
 HEAP16[$ReallocAsyncCtx6 + 96 >> 1] = $12; //@line 382
 HEAP8[$ReallocAsyncCtx6 + 98 >> 0] = $48 & 1; //@line 385
 HEAP32[$ReallocAsyncCtx6 + 100 >> 2] = $56; //@line 387
 HEAP32[$ReallocAsyncCtx6 + 104 >> 2] = $64; //@line 389
 HEAP32[$ReallocAsyncCtx6 + 108 >> 2] = $14; //@line 391
 HEAP32[$ReallocAsyncCtx6 + 112 >> 2] = $38; //@line 393
 HEAP32[$ReallocAsyncCtx6 + 116 >> 2] = $4; //@line 395
 sp = STACKTOP; //@line 396
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_496($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 34135
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34139
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34141
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34143
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34145
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34147
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34149
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34151
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   HEAP8[$8 + 376 >> 0] = ($10 | 0) == 0 & (HEAP8[$8 + 944 >> 0] & 8) != 0 & 1; //@line 34167
   $40 = HEAP8[$8 + 378 >> 0] | 0; //@line 34169
   HEAP8[$8 + 379 >> 0] = $40; //@line 34171
   HEAP8[$12 >> 0] = $40; //@line 34172
   HEAP8[$14 + 1 >> 0] = HEAP8[$8 + 372 >> 0] | 0; //@line 34176
   HEAP32[$14 + 4 >> 2] = $16; //@line 34178
   $46 = HEAP32[$8 >> 2] | 0; //@line 34179
   $49 = HEAP32[(HEAP32[$46 >> 2] | 0) + 12 >> 2] | 0; //@line 34182
   $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 34183
   FUNCTION_TABLE_vii[$49 & 31]($46, $14); //@line 34184
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34187
    $50 = $ReallocAsyncCtx + 4 | 0; //@line 34188
    HEAP32[$50 >> 2] = $8; //@line 34189
    $51 = $ReallocAsyncCtx + 8 | 0; //@line 34190
    HEAP32[$51 >> 2] = $16; //@line 34191
    $52 = $ReallocAsyncCtx + 12 | 0; //@line 34192
    HEAP32[$52 >> 2] = $6; //@line 34193
    $53 = $ReallocAsyncCtx + 16 | 0; //@line 34194
    HEAP32[$53 >> 2] = $12; //@line 34195
    sp = STACKTOP; //@line 34196
    return;
   }
   ___async_unwind = 0; //@line 34199
   HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34200
   $50 = $ReallocAsyncCtx + 4 | 0; //@line 34201
   HEAP32[$50 >> 2] = $8; //@line 34202
   $51 = $ReallocAsyncCtx + 8 | 0; //@line 34203
   HEAP32[$51 >> 2] = $16; //@line 34204
   $52 = $ReallocAsyncCtx + 12 | 0; //@line 34205
   HEAP32[$52 >> 2] = $6; //@line 34206
   $53 = $ReallocAsyncCtx + 16 | 0; //@line 34207
   HEAP32[$53 >> 2] = $12; //@line 34208
   sp = STACKTOP; //@line 34209
   return;
  }
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 34213
 $23 = HEAP32[$4 >> 2] | 0; //@line 34215
 $26 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$8 >> 2] | 0) | 0) + $23 | 0; //@line 34218
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 34219
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $8 + 1076 | 0, $26); //@line 34220
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 366; //@line 34223
  $27 = $ReallocAsyncCtx5 + 4 | 0; //@line 34224
  HEAP32[$27 >> 2] = $8; //@line 34225
  $28 = $ReallocAsyncCtx5 + 8 | 0; //@line 34226
  HEAP32[$28 >> 2] = $10; //@line 34227
  $29 = $ReallocAsyncCtx5 + 12 | 0; //@line 34228
  HEAP32[$29 >> 2] = $12; //@line 34229
  $30 = $ReallocAsyncCtx5 + 16 | 0; //@line 34230
  HEAP32[$30 >> 2] = $14; //@line 34231
  $31 = $ReallocAsyncCtx5 + 20 | 0; //@line 34232
  HEAP32[$31 >> 2] = $16; //@line 34233
  $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 34234
  HEAP32[$32 >> 2] = $6; //@line 34235
  sp = STACKTOP; //@line 34236
  return;
 }
 ___async_unwind = 0; //@line 34239
 HEAP32[$ReallocAsyncCtx5 >> 2] = 366; //@line 34240
 $27 = $ReallocAsyncCtx5 + 4 | 0; //@line 34241
 HEAP32[$27 >> 2] = $8; //@line 34242
 $28 = $ReallocAsyncCtx5 + 8 | 0; //@line 34243
 HEAP32[$28 >> 2] = $10; //@line 34244
 $29 = $ReallocAsyncCtx5 + 12 | 0; //@line 34245
 HEAP32[$29 >> 2] = $12; //@line 34246
 $30 = $ReallocAsyncCtx5 + 16 | 0; //@line 34247
 HEAP32[$30 >> 2] = $14; //@line 34248
 $31 = $ReallocAsyncCtx5 + 20 | 0; //@line 34249
 HEAP32[$31 >> 2] = $16; //@line 34250
 $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 34251
 HEAP32[$32 >> 2] = $6; //@line 34252
 sp = STACKTOP; //@line 34253
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15493
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15498
 } else {
  $9 = $1 + 52 | 0; //@line 15500
  $10 = HEAP8[$9 >> 0] | 0; //@line 15501
  $11 = $1 + 53 | 0; //@line 15502
  $12 = HEAP8[$11 >> 0] | 0; //@line 15503
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 15506
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 15507
  HEAP8[$9 >> 0] = 0; //@line 15508
  HEAP8[$11 >> 0] = 0; //@line 15509
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 15510
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15511
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 799; //@line 15514
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15516
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15518
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15520
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15522
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15524
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15526
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15528
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15530
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15532
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15534
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15537
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15539
   sp = STACKTOP; //@line 15540
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15543
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15548
    $32 = $0 + 8 | 0; //@line 15549
    $33 = $1 + 54 | 0; //@line 15550
    $$0 = $0 + 24 | 0; //@line 15551
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15584
     HEAP8[$11 >> 0] = 0; //@line 15585
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15586
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15587
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15592
     $62 = $$0 + 8 | 0; //@line 15593
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15596
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 800; //@line 15601
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15603
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15605
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15607
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15609
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15611
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15613
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15615
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15617
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15619
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15621
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15623
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15625
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15627
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15630
    sp = STACKTOP; //@line 15631
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15635
  HEAP8[$11 >> 0] = $12; //@line 15636
 }
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28561
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28565
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28567
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28569
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28571
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28573
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28575
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28577
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28579
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28581
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28583
 $24 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 28585
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 28587
  $54 = ___async_retval; //@line 28588
  HEAP32[$54 >> 2] = $$1; //@line 28589
  return;
 }
 $25 = $24 & 255; //@line 28594
 if (($24 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $$1 = 0; //@line 28596
  $54 = ___async_retval; //@line 28597
  HEAP32[$54 >> 2] = $$1; //@line 28598
  return;
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 28601
 HEAP8[$10 >> 0] = HEAP8[$26 + ($25 << 4) + 13 >> 0] | 0; //@line 28604
 HEAP8[$12 >> 0] = HEAP8[$26 + ($25 << 4) + 12 >> 0] | 0; //@line 28607
 HEAP32[$14 >> 2] = HEAP32[$26 + ($25 << 4) + 4 >> 2]; //@line 28610
 HEAP32[$16 >> 2] = HEAP32[$26 + ($25 << 4) + 8 >> 2]; //@line 28613
 $35 = HEAP32[$18 >> 2] | 0; //@line 28614
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 60 >> 2] | 0; //@line 28617
 $40 = HEAP8[$26 + ($25 << 4) >> 0] | 0; //@line 28619
 $ReallocAsyncCtx = _emscripten_realloc_async_context(44) | 0; //@line 28620
 $41 = FUNCTION_TABLE_iiii[$38 & 15]($35, $20, $40) | 0; //@line 28621
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 585; //@line 28624
  $42 = $ReallocAsyncCtx + 4 | 0; //@line 28625
  HEAP8[$42 >> 0] = $24; //@line 28626
  $43 = $ReallocAsyncCtx + 8 | 0; //@line 28627
  HEAP32[$43 >> 2] = $4; //@line 28628
  $44 = $ReallocAsyncCtx + 12 | 0; //@line 28629
  HEAP32[$44 >> 2] = $6; //@line 28630
  $45 = $ReallocAsyncCtx + 16 | 0; //@line 28631
  HEAP32[$45 >> 2] = $8; //@line 28632
  $46 = $ReallocAsyncCtx + 20 | 0; //@line 28633
  HEAP32[$46 >> 2] = $10; //@line 28634
  $47 = $ReallocAsyncCtx + 24 | 0; //@line 28635
  HEAP32[$47 >> 2] = $12; //@line 28636
  $48 = $ReallocAsyncCtx + 28 | 0; //@line 28637
  HEAP32[$48 >> 2] = $14; //@line 28638
  $49 = $ReallocAsyncCtx + 32 | 0; //@line 28639
  HEAP32[$49 >> 2] = $16; //@line 28640
  $50 = $ReallocAsyncCtx + 36 | 0; //@line 28641
  HEAP32[$50 >> 2] = $18; //@line 28642
  $51 = $ReallocAsyncCtx + 40 | 0; //@line 28643
  HEAP32[$51 >> 2] = $20; //@line 28644
  sp = STACKTOP; //@line 28645
  return;
 }
 HEAP32[___async_retval >> 2] = $41; //@line 28649
 ___async_unwind = 0; //@line 28650
 HEAP32[$ReallocAsyncCtx >> 2] = 585; //@line 28651
 $42 = $ReallocAsyncCtx + 4 | 0; //@line 28652
 HEAP8[$42 >> 0] = $24; //@line 28653
 $43 = $ReallocAsyncCtx + 8 | 0; //@line 28654
 HEAP32[$43 >> 2] = $4; //@line 28655
 $44 = $ReallocAsyncCtx + 12 | 0; //@line 28656
 HEAP32[$44 >> 2] = $6; //@line 28657
 $45 = $ReallocAsyncCtx + 16 | 0; //@line 28658
 HEAP32[$45 >> 2] = $8; //@line 28659
 $46 = $ReallocAsyncCtx + 20 | 0; //@line 28660
 HEAP32[$46 >> 2] = $10; //@line 28661
 $47 = $ReallocAsyncCtx + 24 | 0; //@line 28662
 HEAP32[$47 >> 2] = $12; //@line 28663
 $48 = $ReallocAsyncCtx + 28 | 0; //@line 28664
 HEAP32[$48 >> 2] = $14; //@line 28665
 $49 = $ReallocAsyncCtx + 32 | 0; //@line 28666
 HEAP32[$49 >> 2] = $16; //@line 28667
 $50 = $ReallocAsyncCtx + 36 | 0; //@line 28668
 HEAP32[$50 >> 2] = $18; //@line 28669
 $51 = $ReallocAsyncCtx + 40 | 0; //@line 28670
 HEAP32[$51 >> 2] = $20; //@line 28671
 sp = STACKTOP; //@line 28672
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12491
      $10 = HEAP32[$9 >> 2] | 0; //@line 12492
      HEAP32[$2 >> 2] = $9 + 4; //@line 12494
      HEAP32[$0 >> 2] = $10; //@line 12495
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12511
      $17 = HEAP32[$16 >> 2] | 0; //@line 12512
      HEAP32[$2 >> 2] = $16 + 4; //@line 12514
      $20 = $0; //@line 12517
      HEAP32[$20 >> 2] = $17; //@line 12519
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 12522
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12538
      $30 = HEAP32[$29 >> 2] | 0; //@line 12539
      HEAP32[$2 >> 2] = $29 + 4; //@line 12541
      $31 = $0; //@line 12542
      HEAP32[$31 >> 2] = $30; //@line 12544
      HEAP32[$31 + 4 >> 2] = 0; //@line 12547
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12563
      $41 = $40; //@line 12564
      $43 = HEAP32[$41 >> 2] | 0; //@line 12566
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 12569
      HEAP32[$2 >> 2] = $40 + 8; //@line 12571
      $47 = $0; //@line 12572
      HEAP32[$47 >> 2] = $43; //@line 12574
      HEAP32[$47 + 4 >> 2] = $46; //@line 12577
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12593
      $57 = HEAP32[$56 >> 2] | 0; //@line 12594
      HEAP32[$2 >> 2] = $56 + 4; //@line 12596
      $59 = ($57 & 65535) << 16 >> 16; //@line 12598
      $62 = $0; //@line 12601
      HEAP32[$62 >> 2] = $59; //@line 12603
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 12606
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12622
      $72 = HEAP32[$71 >> 2] | 0; //@line 12623
      HEAP32[$2 >> 2] = $71 + 4; //@line 12625
      $73 = $0; //@line 12627
      HEAP32[$73 >> 2] = $72 & 65535; //@line 12629
      HEAP32[$73 + 4 >> 2] = 0; //@line 12632
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12648
      $83 = HEAP32[$82 >> 2] | 0; //@line 12649
      HEAP32[$2 >> 2] = $82 + 4; //@line 12651
      $85 = ($83 & 255) << 24 >> 24; //@line 12653
      $88 = $0; //@line 12656
      HEAP32[$88 >> 2] = $85; //@line 12658
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 12661
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12677
      $98 = HEAP32[$97 >> 2] | 0; //@line 12678
      HEAP32[$2 >> 2] = $97 + 4; //@line 12680
      $99 = $0; //@line 12682
      HEAP32[$99 >> 2] = $98 & 255; //@line 12684
      HEAP32[$99 + 4 >> 2] = 0; //@line 12687
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12703
      $109 = +HEAPF64[$108 >> 3]; //@line 12704
      HEAP32[$2 >> 2] = $108 + 8; //@line 12706
      HEAPF64[$0 >> 3] = $109; //@line 12707
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12723
      $116 = +HEAPF64[$115 >> 3]; //@line 12724
      HEAP32[$2 >> 2] = $115 + 8; //@line 12726
      HEAPF64[$0 >> 3] = $116; //@line 12727
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10850
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 10852
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 10858
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10859
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 10860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 343; //@line 10863
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10865
    sp = STACKTOP; //@line 10866
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10869
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 10875
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 10881
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10882
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 10883
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 344; //@line 10886
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10888
    sp = STACKTOP; //@line 10889
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10892
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 10898
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 10904
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10905
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 10906
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 345; //@line 10909
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10911
    sp = STACKTOP; //@line 10912
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10915
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 10921
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 10927
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10928
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 10929
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 346; //@line 10932
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 10934
    sp = STACKTOP; //@line 10935
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10938
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 10944
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 10950
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10951
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 10952
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 347; //@line 10955
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 10957
    sp = STACKTOP; //@line 10958
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10961
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 10967
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 10973
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10974
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 10975
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 348; //@line 10978
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 10980
    sp = STACKTOP; //@line 10981
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 10984
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 10990
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 10996
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10997
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 10998
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 349; //@line 11001
  sp = STACKTOP; //@line 11002
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 11005
 return;
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$011 = 0, $$pre$phi13Z2D = 0, $13 = 0, $14 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $40 = 0, $5 = 0, $51 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 18342
 STACKTOP = STACKTOP + 16 | 0; //@line 18343
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18343
 $vararg_buffer1 = sp + 8 | 0; //@line 18344
 $vararg_buffer = sp; //@line 18345
 $3 = $0 + 4 | 0; //@line 18346
 $5 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($3) | 0) & 255; //@line 18348
 $8 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($3) | 0) & 255) + $5 | 0; //@line 18351
 if (!$2) {
  $$011 = -1003; //@line 18354
  STACKTOP = sp; //@line 18355
  return $$011 | 0; //@line 18355
 }
 do {
  if (!(HEAP8[$0 + 1156 >> 0] | 0)) {
   $$pre$phi13Z2D = $0 + 1097 | 0; //@line 18363
  } else {
   $13 = HEAP32[$0 >> 2] | 0; //@line 18365
   $14 = $0 + 1097 | 0; //@line 18366
   $AsyncCtx5 = _emscripten_alloc_async_context(48, sp) | 0; //@line 18369
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($13, 0, $14, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 18370
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 544; //@line 18373
    HEAP32[$AsyncCtx5 + 4 >> 2] = $14; //@line 18375
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 18377
    HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 18379
    HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 18381
    HEAP32[$AsyncCtx5 + 20 >> 2] = $8; //@line 18383
    HEAP32[$AsyncCtx5 + 24 >> 2] = $3; //@line 18385
    HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer; //@line 18387
    HEAP32[$AsyncCtx5 + 32 >> 2] = $vararg_buffer; //@line 18389
    HEAP32[$AsyncCtx5 + 36 >> 2] = $vararg_buffer1; //@line 18391
    HEAP32[$AsyncCtx5 + 40 >> 2] = $vararg_buffer1; //@line 18393
    HEAP8[$AsyncCtx5 + 44 >> 0] = $1; //@line 18395
    sp = STACKTOP; //@line 18396
    STACKTOP = sp; //@line 18397
    return 0; //@line 18397
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 18399
    $$pre$phi13Z2D = $14; //@line 18400
    break;
   }
  }
 } while (0);
 $30 = $0 + 369 | 0; //@line 18407
 $33 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[$$pre$phi13Z2D >> 0] | 0, (HEAP8[$30 >> 0] | 0) != 0) | 0; //@line 18410
 HEAP8[$2 + 1 >> 0] = $33; //@line 18412
 $35 = $33 & 255; //@line 18413
 $36 = $8 & 255; //@line 18414
 if ($36 >>> 0 > $35 >>> 0) {
  HEAP8[$2 >> 0] = $33; //@line 18417
  __ZN14LoRaMacCommand20clear_command_bufferEv($3); //@line 18418
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($3); //@line 18419
  $$0 = 0; //@line 18420
 } else {
  HEAP8[$2 >> 0] = $35 - $8; //@line 18424
  $$0 = $36; //@line 18425
 }
 $40 = HEAP8[$$pre$phi13Z2D >> 0] | 0; //@line 18427
 _printf(12967, $vararg_buffer) | 0; //@line 18428
 _printf(13293, $vararg_buffer1) | 0; //@line 18429
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 18430
 _putchar(10) | 0; //@line 18431
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 545; //@line 18434
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18436
  HEAP32[$AsyncCtx + 8 >> 2] = $30; //@line 18438
  HEAP8[$AsyncCtx + 12 >> 0] = $40; //@line 18440
  HEAP8[$AsyncCtx + 13 >> 0] = $1; //@line 18442
  HEAP32[$AsyncCtx + 16 >> 2] = $$0; //@line 18444
  sp = STACKTOP; //@line 18445
  STACKTOP = sp; //@line 18446
  return 0; //@line 18446
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18448
 $51 = $$0 + ($1 & 255) | 0; //@line 18454
 $or$cond$i = $51 >>> 0 < 256 & $51 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $40, (HEAP8[$30 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 18458
 $$011 = $or$cond$i ? 0 : -1010; //@line 18460
 STACKTOP = sp; //@line 18461
 return $$011 | 0; //@line 18461
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_302($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 3541
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3543
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3545
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3547
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3549
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3551
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3555
 $15 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 3556
 if (!$15) {
  $24 = HEAP32[$2 >> 2] | 0; //@line 3559
  $26 = $10 + 12 | 0; //@line 3561
  HEAP32[$10 >> 2] = 529; //@line 3562
  HEAP32[$10 + 4 >> 2] = 0; //@line 3564
  HEAP32[$10 + 8 >> 2] = $4; //@line 3566
  HEAP32[$26 >> 2] = 848; //@line 3567
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 3568
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($24, $4 + 1036 | 0, $10); //@line 3569
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 530; //@line 3572
   $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 3573
   HEAP32[$27 >> 2] = $2; //@line 3574
   $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 3575
   HEAP32[$28 >> 2] = $4; //@line 3576
   $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 3577
   HEAP32[$29 >> 2] = $6; //@line 3578
   $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 3579
   HEAP32[$30 >> 2] = $8; //@line 3580
   $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 3581
   HEAP32[$31 >> 2] = $10; //@line 3582
   $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 3583
   HEAP32[$32 >> 2] = $26; //@line 3584
   sp = STACKTOP; //@line 3585
   return;
  }
  ___async_unwind = 0; //@line 3588
  HEAP32[$ReallocAsyncCtx8 >> 2] = 530; //@line 3589
  $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 3590
  HEAP32[$27 >> 2] = $2; //@line 3591
  $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 3592
  HEAP32[$28 >> 2] = $4; //@line 3593
  $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 3594
  HEAP32[$29 >> 2] = $6; //@line 3595
  $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 3596
  HEAP32[$30 >> 2] = $8; //@line 3597
  $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 3598
  HEAP32[$31 >> 2] = $10; //@line 3599
  $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 3600
  HEAP32[$32 >> 2] = $26; //@line 3601
  sp = STACKTOP; //@line 3602
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 3606
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 3607
  FUNCTION_TABLE_vi[$18 & 1023]($14); //@line 3608
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 528; //@line 3611
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 3612
   HEAP32[$19 >> 2] = $2; //@line 3613
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 3614
   HEAP32[$20 >> 2] = $4; //@line 3615
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 3616
   HEAP32[$21 >> 2] = $10; //@line 3617
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 3618
   HEAP32[$22 >> 2] = $8; //@line 3619
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 3620
   HEAP32[$23 >> 2] = $6; //@line 3621
   sp = STACKTOP; //@line 3622
   return;
  }
  ___async_unwind = 0; //@line 3625
  HEAP32[$ReallocAsyncCtx2 >> 2] = 528; //@line 3626
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 3627
  HEAP32[$19 >> 2] = $2; //@line 3628
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 3629
  HEAP32[$20 >> 2] = $4; //@line 3630
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 3631
  HEAP32[$21 >> 2] = $10; //@line 3632
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 3633
  HEAP32[$22 >> 2] = $8; //@line 3634
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 3635
  HEAP32[$23 >> 2] = $6; //@line 3636
  sp = STACKTOP; //@line 3637
  return;
 }
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1387
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1388
 _mbedtls_cipher_free($0); //@line 1389
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 671; //@line 1392
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1394
  sp = STACKTOP; //@line 1395
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1398
  HEAP8[$0 >> 0] = 0; //@line 1400
  HEAP8[$0 + 1 >> 0] = 0; //@line 1402
  HEAP8[$0 + 2 >> 0] = 0; //@line 1404
  $5 = $0 + 4 | 0; //@line 1405
  HEAP8[$0 + 3 >> 0] = 0; //@line 1406
  HEAP8[$5 >> 0] = 0; //@line 1408
  HEAP8[$5 + 1 >> 0] = 0; //@line 1410
  HEAP8[$5 + 2 >> 0] = 0; //@line 1412
  $9 = $5 + 4 | 0; //@line 1413
  HEAP8[$5 + 3 >> 0] = 0; //@line 1414
  HEAP8[$9 >> 0] = 0; //@line 1416
  HEAP8[$9 + 1 >> 0] = 0; //@line 1418
  HEAP8[$9 + 2 >> 0] = 0; //@line 1420
  $13 = $5 + 8 | 0; //@line 1421
  HEAP8[$9 + 3 >> 0] = 0; //@line 1422
  HEAP8[$13 >> 0] = 0; //@line 1424
  HEAP8[$13 + 1 >> 0] = 0; //@line 1426
  HEAP8[$13 + 2 >> 0] = 0; //@line 1428
  $17 = $5 + 12 | 0; //@line 1429
  HEAP8[$13 + 3 >> 0] = 0; //@line 1430
  HEAP8[$17 >> 0] = 0; //@line 1432
  HEAP8[$17 + 1 >> 0] = 0; //@line 1434
  HEAP8[$17 + 2 >> 0] = 0; //@line 1436
  $21 = $5 + 16 | 0; //@line 1437
  HEAP8[$17 + 3 >> 0] = 0; //@line 1438
  HEAP8[$21 >> 0] = 0; //@line 1440
  HEAP8[$21 + 1 >> 0] = 0; //@line 1442
  HEAP8[$21 + 2 >> 0] = 0; //@line 1444
  $25 = $5 + 20 | 0; //@line 1445
  HEAP8[$21 + 3 >> 0] = 0; //@line 1446
  HEAP8[$25 >> 0] = 0; //@line 1448
  HEAP8[$25 + 1 >> 0] = 0; //@line 1450
  HEAP8[$25 + 2 >> 0] = 0; //@line 1452
  $29 = $5 + 24 | 0; //@line 1453
  HEAP8[$25 + 3 >> 0] = 0; //@line 1454
  HEAP8[$29 >> 0] = 0; //@line 1456
  HEAP8[$29 + 1 >> 0] = 0; //@line 1458
  HEAP8[$29 + 2 >> 0] = 0; //@line 1460
  $33 = $5 + 28 | 0; //@line 1461
  HEAP8[$29 + 3 >> 0] = 0; //@line 1462
  HEAP8[$33 >> 0] = 0; //@line 1464
  HEAP8[$33 + 1 >> 0] = 0; //@line 1466
  HEAP8[$33 + 2 >> 0] = 0; //@line 1468
  $37 = $5 + 32 | 0; //@line 1469
  HEAP8[$33 + 3 >> 0] = 0; //@line 1470
  HEAP8[$37 >> 0] = 0; //@line 1472
  HEAP8[$37 + 1 >> 0] = 0; //@line 1474
  HEAP8[$37 + 2 >> 0] = 0; //@line 1476
  $41 = $5 + 36 | 0; //@line 1477
  HEAP8[$37 + 3 >> 0] = 0; //@line 1478
  HEAP8[$41 >> 0] = 0; //@line 1480
  HEAP8[$41 + 1 >> 0] = 0; //@line 1482
  HEAP8[$41 + 2 >> 0] = 0; //@line 1484
  $45 = $5 + 40 | 0; //@line 1485
  HEAP8[$41 + 3 >> 0] = 0; //@line 1486
  HEAP8[$45 >> 0] = 0; //@line 1488
  HEAP8[$45 + 1 >> 0] = 0; //@line 1490
  HEAP8[$45 + 2 >> 0] = 0; //@line 1492
  $49 = $5 + 44 | 0; //@line 1493
  HEAP8[$45 + 3 >> 0] = 0; //@line 1494
  HEAP8[$49 >> 0] = 0; //@line 1496
  HEAP8[$49 + 1 >> 0] = 0; //@line 1498
  HEAP8[$49 + 2 >> 0] = 0; //@line 1500
  $53 = $5 + 48 | 0; //@line 1501
  HEAP8[$49 + 3 >> 0] = 0; //@line 1502
  HEAP8[$53 >> 0] = 0; //@line 1504
  HEAP8[$53 + 1 >> 0] = 0; //@line 1506
  HEAP8[$53 + 2 >> 0] = 0; //@line 1508
  $57 = $5 + 52 | 0; //@line 1509
  HEAP8[$53 + 3 >> 0] = 0; //@line 1510
  HEAP8[$57 >> 0] = 0; //@line 1512
  HEAP8[$57 + 1 >> 0] = 0; //@line 1514
  HEAP8[$57 + 2 >> 0] = 0; //@line 1516
  $61 = $5 + 56 | 0; //@line 1517
  HEAP8[$57 + 3 >> 0] = 0; //@line 1518
  HEAP8[$61 >> 0] = 0; //@line 1520
  HEAP8[$61 + 1 >> 0] = 0; //@line 1522
  HEAP8[$61 + 2 >> 0] = 0; //@line 1524
  $65 = $5 + 60 | 0; //@line 1525
  HEAP8[$61 + 3 >> 0] = 0; //@line 1526
  HEAP8[$65 >> 0] = 0; //@line 1528
  HEAP8[$65 + 1 >> 0] = 0; //@line 1530
  HEAP8[$65 + 2 >> 0] = 0; //@line 1532
  HEAP8[$65 + 3 >> 0] = 0; //@line 1533
  return;
 }
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11391
 STACKTOP = STACKTOP + 224 | 0; //@line 11392
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 11392
 $3 = sp + 120 | 0; //@line 11393
 $4 = sp + 80 | 0; //@line 11394
 $5 = sp; //@line 11395
 $6 = sp + 136 | 0; //@line 11396
 dest = $4; //@line 11397
 stop = dest + 40 | 0; //@line 11397
 do {
  HEAP32[dest >> 2] = 0; //@line 11397
  dest = dest + 4 | 0; //@line 11397
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11399
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 11403
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 11410
  } else {
   $43 = 0; //@line 11412
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 11414
  $14 = $13 & 32; //@line 11415
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 11421
  }
  $19 = $0 + 48 | 0; //@line 11423
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 11428
    $24 = HEAP32[$23 >> 2] | 0; //@line 11429
    HEAP32[$23 >> 2] = $6; //@line 11430
    $25 = $0 + 28 | 0; //@line 11431
    HEAP32[$25 >> 2] = $6; //@line 11432
    $26 = $0 + 20 | 0; //@line 11433
    HEAP32[$26 >> 2] = $6; //@line 11434
    HEAP32[$19 >> 2] = 80; //@line 11435
    $28 = $0 + 16 | 0; //@line 11437
    HEAP32[$28 >> 2] = $6 + 80; //@line 11438
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11439
    if (!$24) {
     $$1 = $29; //@line 11442
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 11445
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11446
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 11447
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 776; //@line 11450
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 11452
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 11454
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 11456
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 11458
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 11460
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 11462
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 11464
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 11466
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 11468
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 11470
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 11472
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 11474
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 11476
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 11478
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 11480
      sp = STACKTOP; //@line 11481
      STACKTOP = sp; //@line 11482
      return 0; //@line 11482
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11484
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 11487
      HEAP32[$23 >> 2] = $24; //@line 11488
      HEAP32[$19 >> 2] = 0; //@line 11489
      HEAP32[$28 >> 2] = 0; //@line 11490
      HEAP32[$25 >> 2] = 0; //@line 11491
      HEAP32[$26 >> 2] = 0; //@line 11492
      $$1 = $$; //@line 11493
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11499
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 11502
  HEAP32[$0 >> 2] = $51 | $14; //@line 11507
  if ($43 | 0) {
   ___unlockfile($0); //@line 11510
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 11512
 }
 STACKTOP = sp; //@line 11514
 return $$0 | 0; //@line 11514
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_37($0) {
 $0 = $0 | 0;
 var $$ = 0, $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $6 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21511
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21515
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21517
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21519
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21521
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 21523
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 21525
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 21527
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 21529
 $20 = HEAP8[$0 + 28 >> 0] | 0; //@line 21531
 $22 = HEAP16[$0 + 30 >> 1] | 0; //@line 21533
 $24 = HEAP16[$0 + 32 >> 1] | 0; //@line 21535
 $26 = HEAP32[$0 + 36 >> 2] | 0; //@line 21537
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 21541
 $34 = HEAP8[$0 + 52 >> 0] | 0; //@line 21545
 $36 = HEAP8[$0 + 53 >> 0] | 0; //@line 21547
 $38 = HEAP8[$0 + 54 >> 0] | 0; //@line 21549
 $40 = HEAP32[$0 + 56 >> 2] | 0; //@line 21551
 $44 = HEAP32[$0 + 64 >> 2] | 0; //@line 21555
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   HEAP32[$4 + 704 >> 2] = $6; //@line 21561
   HEAP32[$4 + 712 >> 2] = $8; //@line 21563
   HEAP32[$4 + 708 >> 2] = $10; //@line 21565
   HEAP8[$4 + 718 >> 0] = $12; //@line 21567
   HEAP8[$4 + 719 >> 0] = $14; //@line 21569
   HEAP8[$4 + 720 >> 0] = $16; //@line 21571
   HEAP8[$4 + 721 >> 0] = $18; //@line 21573
   HEAP8[$4 + 722 >> 0] = $20; //@line 21575
   HEAP16[$4 + 716 >> 1] = $22; //@line 21577
   HEAP32[$4 + 728 >> 2] = ~~(1.0 / +($8 >>> 0) * 8.0 * +($24 & 65535) * 1.0e3) >>> 0; //@line 21586
   _printf(10904, $26) | 0; //@line 21587
   _printf(11537, $30) | 0; //@line 21588
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21589
   _putchar(10) | 0; //@line 21590
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 21593
    sp = STACKTOP; //@line 21594
    return;
   }
   ___async_unwind = 0; //@line 21597
   HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 21598
   sp = STACKTOP; //@line 21599
   return;
  }
 case 1:
  {
   if ($6 >>> 0 > 2) {
    while (1) {}
   }
   $65 = $6 + 7 | 0; //@line 21609
   HEAP32[$4 + 752 >> 2] = $65; //@line 21611
   HEAP32[$4 + 756 >> 2] = $8; //@line 21613
   HEAP8[$4 + 761 >> 0] = $34; //@line 21615
   HEAP16[$4 + 762 >> 1] = $22; //@line 21617
   HEAP8[$4 + 764 >> 0] = $12; //@line 21619
   HEAP8[$4 + 765 >> 0] = $14; //@line 21621
   HEAP8[$4 + 766 >> 0] = $16; //@line 21623
   HEAP8[$4 + 767 >> 0] = $36; //@line 21625
   HEAP8[$4 + 768 >> 0] = $38; //@line 21627
   HEAP8[$4 + 769 >> 0] = $18; //@line 21629
   HEAP8[$4 + 770 >> 0] = $20; //@line 21631
   $$ = $8 >>> 0 > 6 ? $8 : 6; //@line 21633
   if (($6 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 10; //@line 21641
   } else {
    if (($65 | 0) == 8 & $$ >>> 0 > 11) {
     label = 10; //@line 21647
    } else {
     $$sink = 0; //@line 21649
    }
   }
   if ((label | 0) == 10) {
    $$sink = 1; //@line 21653
   }
   HEAP8[$4 + 760 >> 0] = $$sink; //@line 21656
   _printf(10904, $40) | 0; //@line 21657
   _printf(11518, $44) | 0; //@line 21658
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 21659
   _putchar(10) | 0; //@line 21660
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 62; //@line 21663
    sp = STACKTOP; //@line 21664
    return;
   }
   ___async_unwind = 0; //@line 21667
   HEAP32[$ReallocAsyncCtx >> 2] = 62; //@line 21668
   sp = STACKTOP; //@line 21669
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_17($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 19856
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19858
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19860
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19862
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19864
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19866
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19872
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19876
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19878
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19880
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19882
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19884
 $33 = (HEAP8[$10 + 770 >> 0] | 0) == 0; //@line 19889
 _printf(10904, HEAP32[$0 + 24 >> 2] | 0) | 0; //@line 19890
 if ($33) {
  HEAP32[$28 >> 2] = 6; //@line 19892
  _printf(10970, $28) | 0; //@line 19893
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 19894
  _putchar(10) | 0; //@line 19895
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 19898
   $39 = $ReallocAsyncCtx8 + 4 | 0; //@line 19899
   HEAP32[$39 >> 2] = $10; //@line 19900
   $40 = $ReallocAsyncCtx8 + 8 | 0; //@line 19901
   HEAP32[$40 >> 2] = $20; //@line 19902
   $41 = $ReallocAsyncCtx8 + 12 | 0; //@line 19903
   HEAP32[$41 >> 2] = $22; //@line 19904
   $42 = $ReallocAsyncCtx8 + 16 | 0; //@line 19905
   HEAP32[$42 >> 2] = $24; //@line 19906
   $43 = $ReallocAsyncCtx8 + 20 | 0; //@line 19907
   HEAP32[$43 >> 2] = $26; //@line 19908
   sp = STACKTOP; //@line 19909
   return;
  }
  ___async_unwind = 0; //@line 19912
  HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 19913
  $39 = $ReallocAsyncCtx8 + 4 | 0; //@line 19914
  HEAP32[$39 >> 2] = $10; //@line 19915
  $40 = $ReallocAsyncCtx8 + 8 | 0; //@line 19916
  HEAP32[$40 >> 2] = $20; //@line 19917
  $41 = $ReallocAsyncCtx8 + 12 | 0; //@line 19918
  HEAP32[$41 >> 2] = $22; //@line 19919
  $42 = $ReallocAsyncCtx8 + 16 | 0; //@line 19920
  HEAP32[$42 >> 2] = $24; //@line 19921
  $43 = $ReallocAsyncCtx8 + 20 | 0; //@line 19922
  HEAP32[$43 >> 2] = $26; //@line 19923
  sp = STACKTOP; //@line 19924
  return;
 } else {
  HEAP32[$16 >> 2] = 5; //@line 19927
  _printf(10970, $16) | 0; //@line 19928
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 19929
  _putchar(10) | 0; //@line 19930
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 19933
   $34 = $ReallocAsyncCtx10 + 4 | 0; //@line 19934
   HEAP32[$34 >> 2] = $10; //@line 19935
   $35 = $ReallocAsyncCtx10 + 8 | 0; //@line 19936
   HEAP32[$35 >> 2] = $2; //@line 19937
   $36 = $ReallocAsyncCtx10 + 12 | 0; //@line 19938
   HEAP32[$36 >> 2] = $4; //@line 19939
   $37 = $ReallocAsyncCtx10 + 16 | 0; //@line 19940
   HEAP32[$37 >> 2] = $6; //@line 19941
   $38 = $ReallocAsyncCtx10 + 20 | 0; //@line 19942
   HEAP32[$38 >> 2] = $8; //@line 19943
   sp = STACKTOP; //@line 19944
   return;
  }
  ___async_unwind = 0; //@line 19947
  HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 19948
  $34 = $ReallocAsyncCtx10 + 4 | 0; //@line 19949
  HEAP32[$34 >> 2] = $10; //@line 19950
  $35 = $ReallocAsyncCtx10 + 8 | 0; //@line 19951
  HEAP32[$35 >> 2] = $2; //@line 19952
  $36 = $ReallocAsyncCtx10 + 12 | 0; //@line 19953
  HEAP32[$36 >> 2] = $4; //@line 19954
  $37 = $ReallocAsyncCtx10 + 16 | 0; //@line 19955
  HEAP32[$37 >> 2] = $6; //@line 19956
  $38 = $ReallocAsyncCtx10 + 20 | 0; //@line 19957
  HEAP32[$38 >> 2] = $8; //@line 19958
  sp = STACKTOP; //@line 19959
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_397($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19672
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19678
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 19688
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 19690
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 19692
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 19694
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 19696
 $29 = HEAP32[$6 >> 2] | 0; //@line 19703
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 19706
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 19708
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 19709
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 19712
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 19713
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 628; //@line 19716
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 19717
   HEAP32[$37 >> 2] = $6; //@line 19718
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 19719
   HEAP32[$38 >> 2] = $16; //@line 19720
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 19721
   HEAP32[$39 >> 2] = $18; //@line 19722
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 19723
   HEAP32[$40 >> 2] = $20; //@line 19724
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 19725
   HEAP32[$41 >> 2] = $22; //@line 19726
   sp = STACKTOP; //@line 19727
   return;
  }
  ___async_unwind = 0; //@line 19730
  HEAP32[$ReallocAsyncCtx3 >> 2] = 628; //@line 19731
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 19732
  HEAP32[$37 >> 2] = $6; //@line 19733
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 19734
  HEAP32[$38 >> 2] = $16; //@line 19735
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 19736
  HEAP32[$39 >> 2] = $18; //@line 19737
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 19738
  HEAP32[$40 >> 2] = $20; //@line 19739
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 19740
  HEAP32[$41 >> 2] = $22; //@line 19741
  sp = STACKTOP; //@line 19742
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 19745
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 19746
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 629; //@line 19749
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 19750
   HEAP32[$42 >> 2] = $6; //@line 19751
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 19752
   HEAP32[$43 >> 2] = $16; //@line 19753
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 19754
   HEAP32[$44 >> 2] = $18; //@line 19755
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 19756
   HEAP32[$45 >> 2] = $20; //@line 19757
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 19758
   HEAP32[$46 >> 2] = $22; //@line 19759
   sp = STACKTOP; //@line 19760
   return;
  }
  ___async_unwind = 0; //@line 19763
  HEAP32[$ReallocAsyncCtx4 >> 2] = 629; //@line 19764
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 19765
  HEAP32[$42 >> 2] = $6; //@line 19766
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 19767
  HEAP32[$43 >> 2] = $16; //@line 19768
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 19769
  HEAP32[$44 >> 2] = $18; //@line 19770
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 19771
  HEAP32[$45 >> 2] = $20; //@line 19772
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 19773
  HEAP32[$46 >> 2] = $22; //@line 19774
  sp = STACKTOP; //@line 19775
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_431($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $28 = 0, $36 = 0, $4 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21926
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21930
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 21934
 $10 = HEAP8[$0 + 14 >> 0] | 0; //@line 21936
 $12 = HEAP32[$0 + 16 >> 2] | 0; //@line 21938
 $14 = HEAP32[$0 + 20 >> 2] | 0; //@line 21940
 $16 = HEAP32[$0 + 24 >> 2] | 0; //@line 21942
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 21944
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 21946
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 21950
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 21954
 $36 = ($10 & 255) + ($8 & 255) | 0; //@line 21962
 if (!($36 >>> 0 < 256 & $36 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0, HEAP8[$0 + 12 >> 0] | 0, (HEAP8[$4 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0)) {
  HEAP32[___async_retval >> 2] = -1010; //@line 21969
  return;
 }
 HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1112 >> 2] | 0); //@line 21978
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$4 + 1116 >> 2] | 0); //@line 21985
 if (!(HEAP32[$16 >> 2] | 0)) {
  $54 = HEAP8[$18 >> 0] | 0; //@line 21989
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 21990
  __ZN7LoRaMac21send_frame_on_channelEh($4, $54) | 0; //@line 21991
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 493; //@line 21994
   $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 21995
   HEAP32[$55 >> 2] = $12; //@line 21996
   $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 21997
   HEAP32[$56 >> 2] = $14; //@line 21998
   sp = STACKTOP; //@line 21999
   return;
  }
  ___async_unwind = 0; //@line 22002
  HEAP32[$ReallocAsyncCtx10 >> 2] = 493; //@line 22003
  $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 22004
  HEAP32[$55 >> 2] = $12; //@line 22005
  $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 22006
  HEAP32[$56 >> 2] = $14; //@line 22007
  sp = STACKTOP; //@line 22008
  return;
 } else {
  $57 = $4 + 968 | 0; //@line 22011
  HEAP32[$57 >> 2] = HEAP32[$57 >> 2] | 16; //@line 22014
  _printf(13253, $20) | 0; //@line 22015
  HEAP32[$24 >> 2] = HEAP32[$16 >> 2]; //@line 22017
  _printf(13317, $24) | 0; //@line 22018
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 22019
  _putchar(10) | 0; //@line 22020
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 22023
   $61 = $ReallocAsyncCtx6 + 4 | 0; //@line 22024
   HEAP32[$61 >> 2] = $28; //@line 22025
   $62 = $ReallocAsyncCtx6 + 8 | 0; //@line 22026
   HEAP32[$62 >> 2] = $4; //@line 22027
   $63 = $ReallocAsyncCtx6 + 12 | 0; //@line 22028
   HEAP32[$63 >> 2] = $16; //@line 22029
   $64 = $ReallocAsyncCtx6 + 16 | 0; //@line 22030
   HEAP32[$64 >> 2] = $12; //@line 22031
   $65 = $ReallocAsyncCtx6 + 20 | 0; //@line 22032
   HEAP32[$65 >> 2] = $14; //@line 22033
   sp = STACKTOP; //@line 22034
   return;
  }
  ___async_unwind = 0; //@line 22037
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 22038
  $61 = $ReallocAsyncCtx6 + 4 | 0; //@line 22039
  HEAP32[$61 >> 2] = $28; //@line 22040
  $62 = $ReallocAsyncCtx6 + 8 | 0; //@line 22041
  HEAP32[$62 >> 2] = $4; //@line 22042
  $63 = $ReallocAsyncCtx6 + 12 | 0; //@line 22043
  HEAP32[$63 >> 2] = $16; //@line 22044
  $64 = $ReallocAsyncCtx6 + 16 | 0; //@line 22045
  HEAP32[$64 >> 2] = $12; //@line 22046
  $65 = $ReallocAsyncCtx6 + 20 | 0; //@line 22047
  HEAP32[$65 >> 2] = $14; //@line 22048
  sp = STACKTOP; //@line 22049
  return;
 }
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $29 = 0, $30 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18225
 $1 = $0 + 356 | 0; //@line 18226
 $2 = HEAP32[$1 >> 2] | 0; //@line 18227
 $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18229
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 996 | 0); //@line 18230
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 538; //@line 18233
  HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 18235
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 18237
  sp = STACKTOP; //@line 18238
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18241
 $6 = HEAP32[$1 >> 2] | 0; //@line 18242
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18244
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($6, $0 + 1016 | 0); //@line 18245
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 539; //@line 18248
  HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 18250
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 18252
  sp = STACKTOP; //@line 18253
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18256
 $10 = HEAP32[$1 >> 2] | 0; //@line 18257
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18259
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($10, $0 + 1036 | 0); //@line 18260
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 540; //@line 18263
  HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 18265
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 18267
  sp = STACKTOP; //@line 18268
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18271
 $14 = HEAP32[$1 >> 2] | 0; //@line 18272
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18274
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $0 + 1056 | 0); //@line 18275
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 541; //@line 18278
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 18280
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 18282
  sp = STACKTOP; //@line 18283
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18286
 $18 = HEAP32[$1 >> 2] | 0; //@line 18287
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18289
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($18, $0 + 1076 | 0); //@line 18290
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 542; //@line 18293
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18295
  sp = STACKTOP; //@line 18296
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18299
 $21 = HEAP32[$0 >> 2] | 0; //@line 18300
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18301
 __ZN7LoRaPHY18put_radio_to_sleepEv($21); //@line 18302
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 543; //@line 18305
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18307
  sp = STACKTOP; //@line 18308
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18311
  HEAP8[$0 + 372 >> 0] = 0; //@line 18313
  HEAP8[$0 + 377 >> 0] = 0; //@line 18315
  HEAP8[$0 + 371 >> 0] = 1; //@line 18317
  HEAP8[$0 + 373 >> 0] = 0; //@line 18319
  HEAP8[$0 + 374 >> 0] = 0; //@line 18321
  HEAP8[$0 + 944 >> 0] = 0; //@line 18323
  $29 = $0 + 968 | 0; //@line 18324
  HEAP32[$29 >> 2] = 0; //@line 18325
  $30 = $0 + 4 | 0; //@line 18326
  __ZN14LoRaMacCommand20clear_command_bufferEv($30); //@line 18327
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($30); //@line 18328
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($30); //@line 18329
  HEAP32[$29 >> 2] = 0; //@line 18330
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15028
 STACKTOP = STACKTOP + 64 | 0; //@line 15029
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 15029
 $4 = sp; //@line 15030
 $5 = HEAP32[$0 >> 2] | 0; //@line 15031
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 15034
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 15036
 HEAP32[$4 >> 2] = $2; //@line 15037
 HEAP32[$4 + 4 >> 2] = $0; //@line 15039
 HEAP32[$4 + 8 >> 2] = $1; //@line 15041
 HEAP32[$4 + 12 >> 2] = $3; //@line 15043
 $14 = $4 + 16 | 0; //@line 15044
 $15 = $4 + 20 | 0; //@line 15045
 $16 = $4 + 24 | 0; //@line 15046
 $17 = $4 + 28 | 0; //@line 15047
 $18 = $4 + 32 | 0; //@line 15048
 $19 = $4 + 40 | 0; //@line 15049
 dest = $14; //@line 15050
 stop = dest + 36 | 0; //@line 15050
 do {
  HEAP32[dest >> 2] = 0; //@line 15050
  dest = dest + 4 | 0; //@line 15050
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 15050
 HEAP8[$14 + 38 >> 0] = 0; //@line 15050
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 15055
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 15058
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15059
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 15060
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 791; //@line 15063
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 15065
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 15067
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15069
    sp = STACKTOP; //@line 15070
    STACKTOP = sp; //@line 15071
    return 0; //@line 15071
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15073
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 15077
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 15081
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 15084
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15085
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 15086
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 792; //@line 15089
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 15091
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 15093
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 15095
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 15097
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 15099
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 15101
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 15103
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 15105
    sp = STACKTOP; //@line 15106
    STACKTOP = sp; //@line 15107
    return 0; //@line 15107
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15109
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 15123
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 15131
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 15147
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 15152
  }
 } while (0);
 STACKTOP = sp; //@line 15155
 return $$0 | 0; //@line 15155
}
function _main__async_cb_144($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31120
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31122
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31124
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31126
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31128
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31130
 $$pr = HEAP32[$4 >> 2] | 0; //@line 31131
 if ($$pr | 0) {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 31135
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 31136
  FUNCTION_TABLE_vii[$13 & 31](23176, $2); //@line 31137
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 31140
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 31141
   HEAP32[$14 >> 2] = $2; //@line 31142
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 31143
   HEAP32[$15 >> 2] = $4; //@line 31144
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 31145
   HEAP32[$16 >> 2] = $6; //@line 31146
   $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 31147
   HEAP32[$17 >> 2] = $8; //@line 31148
   $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 31149
   HEAP32[$18 >> 2] = $10; //@line 31150
   sp = STACKTOP; //@line 31151
   return;
  }
  ___async_unwind = 0; //@line 31154
  HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 31155
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 31156
  HEAP32[$14 >> 2] = $2; //@line 31157
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 31158
  HEAP32[$15 >> 2] = $4; //@line 31159
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 31160
  HEAP32[$16 >> 2] = $6; //@line 31161
  $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 31162
  HEAP32[$17 >> 2] = $8; //@line 31163
  $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 31164
  HEAP32[$18 >> 2] = $10; //@line 31165
  sp = STACKTOP; //@line 31166
  return;
 }
 HEAP32[5797] = 0; //@line 31169
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23168, 23176) | 0; //@line 31170
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23168) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 31174
  _puts(15396) | 0; //@line 31175
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 31178
   sp = STACKTOP; //@line 31179
   return;
  }
  ___async_unwind = 0; //@line 31182
  HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 31183
  sp = STACKTOP; //@line 31184
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23168, 5) | 0; //@line 31187
 HEAP8[$10 >> 0] = 0; //@line 31188
 HEAP32[$10 + 4 >> 2] = 23873; //@line 31190
 HEAP32[$10 + 8 >> 2] = 23881; //@line 31192
 HEAP32[$10 + 12 >> 2] = 23889; //@line 31194
 HEAP8[$10 + 16 >> 0] = 3; //@line 31196
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23168, $10) | 0; //@line 31197
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $25; //@line 31203
   _printf(15430, $6) | 0; //@line 31204
   HEAP32[___async_retval >> 2] = -1; //@line 31206
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31210
 _puts(15459) | 0; //@line 31211
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 31214
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 31215
  HEAP32[$26 >> 2] = $10; //@line 31216
  sp = STACKTOP; //@line 31217
  return;
 }
 ___async_unwind = 0; //@line 31220
 HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 31221
 $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 31222
 HEAP32[$26 >> 2] = $10; //@line 31223
 sp = STACKTOP; //@line 31224
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_235($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $4 = 0, $46 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 38046
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 38050
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 38052
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 38054
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 38056
 $trunc = HEAP8[$0 + 24 >> 0] | 0; //@line 38058
 $13 = HEAP32[$0 + 28 >> 2] | 0; //@line 38060
 $17 = HEAP32[$0 + 36 >> 2] | 0; //@line 38064
 $21 = HEAP32[$0 + 44 >> 2] | 0; //@line 38068
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 38070
 $25 = HEAP32[$0 + 52 >> 2] | 0; //@line 38072
 $27 = HEAP32[$0 + 56 >> 2] | 0; //@line 38074
 $29 = HEAP32[$0 + 60 >> 2] | 0; //@line 38076
 $31 = HEAP32[$0 + 64 >> 2] | 0; //@line 38078
 HEAP16[$6 + 2232 >> 1] = (HEAP32[$0 + 4 >> 2] | 0) - $4; //@line 38082
 HEAP16[$6 + 2230 >> 1] = $8; //@line 38084
 _memcpy($6 + 1975 | 0, $10 | 0, $4 | 0) | 0; //@line 38086
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$6 + 1968 >> 2] = 0; //@line 38091
   HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 38094
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 5; //@line 38098
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 5; //@line 38107
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 5) {
  HEAP32[$6 + 1968 >> 2] = 1; //@line 38115
  HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 38118
  HEAP8[$6 + 1974 >> 0] = HEAP8[$6 + 2284 >> 0] | 0; //@line 38122
 }
 _printf(12139, $13) | 0; //@line 38124
 $46 = $6 + 2230 | 0; //@line 38125
 $51 = HEAPU16[$6 + 2232 >> 1] | 0; //@line 38130
 HEAP32[$17 >> 2] = HEAPU16[$46 >> 1]; //@line 38131
 HEAP32[$17 + 4 >> 2] = $51; //@line 38133
 _printf(12528, $17) | 0; //@line 38134
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 38135
 _putchar(10) | 0; //@line 38136
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 38139
  $52 = $ReallocAsyncCtx2 + 4 | 0; //@line 38140
  HEAP32[$52 >> 2] = $6; //@line 38141
  $53 = $ReallocAsyncCtx2 + 8 | 0; //@line 38142
  HEAP32[$53 >> 2] = $23; //@line 38143
  $54 = $ReallocAsyncCtx2 + 12 | 0; //@line 38144
  HEAP32[$54 >> 2] = $25; //@line 38145
  $55 = $ReallocAsyncCtx2 + 16 | 0; //@line 38146
  HEAP32[$55 >> 2] = $27; //@line 38147
  $56 = $ReallocAsyncCtx2 + 20 | 0; //@line 38148
  HEAP32[$56 >> 2] = $29; //@line 38149
  $57 = $ReallocAsyncCtx2 + 24 | 0; //@line 38150
  HEAP32[$57 >> 2] = $46; //@line 38151
  $58 = $ReallocAsyncCtx2 + 28 | 0; //@line 38152
  HEAP32[$58 >> 2] = $31; //@line 38153
  sp = STACKTOP; //@line 38154
  return;
 }
 ___async_unwind = 0; //@line 38157
 HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 38158
 $52 = $ReallocAsyncCtx2 + 4 | 0; //@line 38159
 HEAP32[$52 >> 2] = $6; //@line 38160
 $53 = $ReallocAsyncCtx2 + 8 | 0; //@line 38161
 HEAP32[$53 >> 2] = $23; //@line 38162
 $54 = $ReallocAsyncCtx2 + 12 | 0; //@line 38163
 HEAP32[$54 >> 2] = $25; //@line 38164
 $55 = $ReallocAsyncCtx2 + 16 | 0; //@line 38165
 HEAP32[$55 >> 2] = $27; //@line 38166
 $56 = $ReallocAsyncCtx2 + 20 | 0; //@line 38167
 HEAP32[$56 >> 2] = $29; //@line 38168
 $57 = $ReallocAsyncCtx2 + 24 | 0; //@line 38169
 HEAP32[$57 >> 2] = $46; //@line 38170
 $58 = $ReallocAsyncCtx2 + 28 | 0; //@line 38171
 HEAP32[$58 >> 2] = $31; //@line 38172
 sp = STACKTOP; //@line 38173
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $13 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 605
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 607
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 609
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 611
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 613
 if (HEAP32[$2 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 618
  $46 = ___async_retval; //@line 619
  HEAP32[$46 >> 2] = $$1; //@line 620
  return;
 }
 $13 = HEAP8[$4 + 5 >> 0] | 0; //@line 624
 if ($13 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0) << 24 >> 24) {
  $29 = $13; //@line 629
 } else {
  $29 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0; //@line 633
 }
 HEAP8[$6 >> 0] = 0; //@line 635
 $19 = $2 + 288 | 0; //@line 636
 __ZN11LoRaMacMcps18reset_confirmationEv($19); //@line 637
 HEAP8[$2 + 895 >> 0] = 1; //@line 639
 $21 = $2 + 894 | 0; //@line 640
 HEAP8[$21 >> 0] = 1; //@line 641
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   HEAP8[$6 >> 0] = 64; //@line 645
   label = 9; //@line 646
   break;
  }
 case 1:
  {
   HEAP8[$6 >> 0] = -128; //@line 650
   HEAP8[$21 >> 0] = HEAP8[$4 + 6 >> 0] | 0; //@line 653
   label = 9; //@line 654
   break;
  }
 case 3:
  {
   HEAP8[$6 >> 0] = -32; //@line 658
   label = 9; //@line 659
   break;
  }
 default:
  {}
 }
 do {
  if ((label | 0) == 9) {
   $25 = $2 + 1156 | 0; //@line 667
   if (!(HEAP8[$25 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$2 >> 2] | 0, $29, 0) | 0)) {
     break;
    }
    HEAP8[$2 + 1097 >> 0] = $29; //@line 677
    $38 = HEAP8[$25 >> 0] << 7 & 255; //@line 680
   } else {
    $38 = -128; //@line 682
   }
   $33 = HEAP8[$4 + 4 >> 0] | 0; //@line 685
   $35 = HEAP32[$4 + 8 >> 2] | 0; //@line 687
   $37 = HEAP16[$4 + 12 >> 1] | 0; //@line 689
   HEAP8[$8 >> 0] = $38; //@line 690
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 691
   $39 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $6, $8, $33, $35, $37) | 0; //@line 692
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 695
    $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 696
    HEAP32[$40 >> 2] = $19; //@line 697
    $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 698
    HEAP32[$41 >> 2] = $2; //@line 699
    $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 700
    HEAP32[$42 >> 2] = $8; //@line 701
    $43 = $ReallocAsyncCtx2 + 16 | 0; //@line 702
    HEAP32[$43 >> 2] = $6; //@line 703
    $44 = $ReallocAsyncCtx2 + 20 | 0; //@line 704
    HEAP32[$44 >> 2] = $4; //@line 705
    sp = STACKTOP; //@line 706
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 710
   ___async_unwind = 0; //@line 711
   HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 712
   $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 713
   HEAP32[$40 >> 2] = $19; //@line 714
   $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 715
   HEAP32[$41 >> 2] = $2; //@line 716
   $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 717
   HEAP32[$42 >> 2] = $8; //@line 718
   $43 = $ReallocAsyncCtx2 + 16 | 0; //@line 719
   HEAP32[$43 >> 2] = $6; //@line 720
   $44 = $ReallocAsyncCtx2 + 20 | 0; //@line 721
   HEAP32[$44 >> 2] = $4; //@line 722
   sp = STACKTOP; //@line 723
   return;
  }
 } while (0);
 $$1 = -1003; //@line 727
 $46 = ___async_retval; //@line 728
 HEAP32[$46 >> 2] = $$1; //@line 729
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_80($0) {
 $0 = $0 | 0;
 var $$ = 0, $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27329
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27333
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 27335
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27337
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27339
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27341
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 27343
 $16 = HEAP8[$0 + 30 >> 0] | 0; //@line 27345
 $18 = HEAP8[$0 + 31 >> 0] | 0; //@line 27347
 $20 = HEAP8[$0 + 32 >> 0] | 0; //@line 27349
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 27351
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 27353
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 27357
 $32 = HEAP8[$0 + 56 >> 0] | 0; //@line 27361
 $34 = HEAP8[$0 + 57 >> 0] | 0; //@line 27363
 $36 = HEAP8[$0 + 58 >> 0] | 0; //@line 27365
 $38 = HEAP32[$0 + 60 >> 2] | 0; //@line 27367
 $42 = HEAP32[$0 + 68 >> 2] | 0; //@line 27371
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   HEAP8[$4 + 696 >> 0] = $6; //@line 27377
   HEAP32[$4 + 700 >> 2] = $8; //@line 27379
   HEAP32[$4 + 704 >> 2] = $10; //@line 27381
   HEAP32[$4 + 712 >> 2] = $12; //@line 27383
   HEAP16[$4 + 716 >> 1] = $14; //@line 27385
   HEAP8[$4 + 718 >> 0] = $16; //@line 27387
   HEAP8[$4 + 720 >> 0] = $18; //@line 27389
   HEAP8[$4 + 721 >> 0] = $20; //@line 27391
   HEAP32[$4 + 724 >> 2] = $22; //@line 27393
   _printf(10904, $24) | 0; //@line 27394
   _printf(11500, $28) | 0; //@line 27395
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27396
   _putchar(10) | 0; //@line 27397
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 27400
    sp = STACKTOP; //@line 27401
    return;
   }
   ___async_unwind = 0; //@line 27404
   HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 27405
   sp = STACKTOP; //@line 27406
   return;
  }
 case 1:
  {
   HEAP8[$4 + 748 >> 0] = $6; //@line 27412
   if ($10 >>> 0 > 2) {
    while (1) {}
   }
   $56 = $10 + 7 | 0; //@line 27418
   HEAP32[$4 + 752 >> 2] = $56; //@line 27420
   HEAP32[$4 + 756 >> 2] = $12; //@line 27422
   HEAP8[$4 + 761 >> 0] = $32; //@line 27424
   HEAP16[$4 + 762 >> 1] = $14; //@line 27426
   HEAP8[$4 + 764 >> 0] = $16; //@line 27428
   HEAP8[$4 + 767 >> 0] = $34; //@line 27430
   HEAP8[$4 + 768 >> 0] = $36; //@line 27432
   HEAP8[$4 + 766 >> 0] = $18; //@line 27434
   HEAP8[$4 + 769 >> 0] = $20; //@line 27436
   HEAP32[$4 + 772 >> 2] = $22; //@line 27438
   $$ = $12 >>> 0 > 6 ? $12 : 6; //@line 27440
   if (($10 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 10; //@line 27448
   } else {
    if (($56 | 0) == 8 & $$ >>> 0 > 11) {
     label = 10; //@line 27454
    } else {
     $$sink = 0; //@line 27456
    }
   }
   if ((label | 0) == 10) {
    $$sink = 1; //@line 27460
   }
   HEAP8[$4 + 760 >> 0] = $$sink; //@line 27463
   _printf(10904, $38) | 0; //@line 27464
   _printf(11518, $42) | 0; //@line 27465
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27466
   _putchar(10) | 0; //@line 27467
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 66; //@line 27470
    sp = STACKTOP; //@line 27471
    return;
   }
   ___async_unwind = 0; //@line 27474
   HEAP32[$ReallocAsyncCtx >> 2] = 66; //@line 27475
   sp = STACKTOP; //@line 27476
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_325($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 5130
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5132
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5134
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5136
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5138
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5140
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5142
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5146
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5150
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5154
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5158
 switch ($AsyncRetVal | 0) {
 case 0:
  {
   HEAP32[$4 >> 2] = 6; //@line 5161
   HEAP32[___async_retval >> 2] = 0; //@line 5163
   return;
  }
 case -1014:
  {
   _printf(11887, $20) | 0; //@line 5168
   _printf(12174, $24) | 0; //@line 5169
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 5170
   _putchar(10) | 0; //@line 5171
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 261; //@line 5174
    $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 5175
    HEAP32[$28 >> 2] = $8; //@line 5176
    $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 5177
    HEAP32[$29 >> 2] = $4; //@line 5178
    $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 5179
    HEAP32[$30 >> 2] = $2; //@line 5180
    $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 5181
    HEAP32[$31 >> 2] = $6; //@line 5182
    sp = STACKTOP; //@line 5183
    return;
   }
   ___async_unwind = 0; //@line 5186
   HEAP32[$ReallocAsyncCtx12 >> 2] = 261; //@line 5187
   $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 5188
   HEAP32[$28 >> 2] = $8; //@line 5189
   $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 5190
   HEAP32[$29 >> 2] = $4; //@line 5191
   $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 5192
   HEAP32[$30 >> 2] = $2; //@line 5193
   $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 5194
   HEAP32[$31 >> 2] = $6; //@line 5195
   sp = STACKTOP; //@line 5196
   return;
  }
 default:
  {
   _printf(11887, $12) | 0; //@line 5201
   _printf(12209, $16) | 0; //@line 5202
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 5203
   _putchar(10) | 0; //@line 5204
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 266; //@line 5207
    $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 5208
    HEAP32[$32 >> 2] = $8; //@line 5209
    $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 5210
    HEAP32[$33 >> 2] = $AsyncRetVal; //@line 5211
    $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 5212
    HEAP32[$34 >> 2] = $4; //@line 5213
    $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 5214
    HEAP32[$35 >> 2] = $10; //@line 5215
    $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 5216
    HEAP32[$36 >> 2] = $6; //@line 5217
    sp = STACKTOP; //@line 5218
    return;
   }
   ___async_unwind = 0; //@line 5221
   HEAP32[$ReallocAsyncCtx11 >> 2] = 266; //@line 5222
   $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 5223
   HEAP32[$32 >> 2] = $8; //@line 5224
   $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 5225
   HEAP32[$33 >> 2] = $AsyncRetVal; //@line 5226
   $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 5227
   HEAP32[$34 >> 2] = $4; //@line 5228
   $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 5229
   HEAP32[$35 >> 2] = $10; //@line 5230
   $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 5231
   HEAP32[$36 >> 2] = $6; //@line 5232
   sp = STACKTOP; //@line 5233
   return;
  }
 }
}
function __ZN12radio_eventsD2Ev__async_cb_355($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6961
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6963
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 6965
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 6970
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 6971
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 6972
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 6975
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 6976
   HEAP32[$9 >> 2] = $2; //@line 6977
   sp = STACKTOP; //@line 6978
   return;
  }
  ___async_unwind = 0; //@line 6981
  HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 6982
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 6983
  HEAP32[$9 >> 2] = $2; //@line 6984
  sp = STACKTOP; //@line 6985
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 6989
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 6994
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 6995
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 6996
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 6999
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 7000
   HEAP32[$16 >> 2] = $2; //@line 7001
   sp = STACKTOP; //@line 7002
   return;
  }
  ___async_unwind = 0; //@line 7005
  HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 7006
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 7007
  HEAP32[$16 >> 2] = $2; //@line 7008
  sp = STACKTOP; //@line 7009
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 7013
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 7018
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 7019
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 7020
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 7023
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 7024
   HEAP32[$23 >> 2] = $2; //@line 7025
   sp = STACKTOP; //@line 7026
   return;
  }
  ___async_unwind = 0; //@line 7029
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 7030
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 7031
  HEAP32[$23 >> 2] = $2; //@line 7032
  sp = STACKTOP; //@line 7033
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 7037
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 7042
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 7043
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 7044
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 7047
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 7048
   HEAP32[$30 >> 2] = $2; //@line 7049
   sp = STACKTOP; //@line 7050
   return;
  }
  ___async_unwind = 0; //@line 7053
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 7054
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 7055
  HEAP32[$30 >> 2] = $2; //@line 7056
  sp = STACKTOP; //@line 7057
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 7061
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 7067
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 7068
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 7069
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7072
  sp = STACKTOP; //@line 7073
  return;
 }
 ___async_unwind = 0; //@line 7076
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7077
 sp = STACKTOP; //@line 7078
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 186
 STACKTOP = STACKTOP + 48 | 0; //@line 187
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 187
 $vararg_buffer9 = sp + 40 | 0; //@line 188
 $vararg_buffer7 = sp + 32 | 0; //@line 189
 $vararg_buffer5 = sp + 24 | 0; //@line 190
 $vararg_buffer3 = sp + 16 | 0; //@line 191
 _printf(10904, sp) | 0; //@line 194
 _printf(11555, sp + 8 | 0) | 0; //@line 195
 $AsyncCtx18 = _emscripten_alloc_async_context(40, sp) | 0; //@line 196
 _putchar(10) | 0; //@line 197
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 56; //@line 200
  HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 202
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer3; //@line 204
  HEAP32[$AsyncCtx18 + 12 >> 2] = $vararg_buffer3; //@line 206
  HEAP32[$AsyncCtx18 + 16 >> 2] = $vararg_buffer5; //@line 208
  HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer5; //@line 210
  HEAP32[$AsyncCtx18 + 24 >> 2] = $vararg_buffer7; //@line 212
  HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer7; //@line 214
  HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer9; //@line 216
  HEAP32[$AsyncCtx18 + 36 >> 2] = $vararg_buffer9; //@line 218
  sp = STACKTOP; //@line 219
  STACKTOP = sp; //@line 220
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 222
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 224
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 226
 _printf(10904, $vararg_buffer3) | 0; //@line 227
 HEAP32[$vararg_buffer5 >> 2] = 1; //@line 228
 _printf(10970, $vararg_buffer5) | 0; //@line 229
 $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 230
 _putchar(10) | 0; //@line 231
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 57; //@line 234
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 236
  HEAP32[$AsyncCtx14 + 8 >> 2] = $vararg_buffer7; //@line 238
  HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer7; //@line 240
  HEAP32[$AsyncCtx14 + 16 >> 2] = $vararg_buffer9; //@line 242
  HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer9; //@line 244
  sp = STACKTOP; //@line 245
  STACKTOP = sp; //@line 246
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 248
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 249
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 250
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 58; //@line 253
  HEAP32[$AsyncCtx21 + 4 >> 2] = $vararg_buffer7; //@line 255
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer7; //@line 257
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer9; //@line 259
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer9; //@line 261
  HEAP32[$AsyncCtx21 + 20 >> 2] = $0; //@line 263
  sp = STACKTOP; //@line 264
  STACKTOP = sp; //@line 265
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 267
 _printf(10904, $vararg_buffer7) | 0; //@line 268
 HEAP32[$vararg_buffer9 >> 2] = 1; //@line 269
 _printf(10999, $vararg_buffer9) | 0; //@line 270
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 271
 _putchar(10) | 0; //@line 272
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 275
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 277
  sp = STACKTOP; //@line 278
  STACKTOP = sp; //@line 279
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 281
  HEAP8[$0 + 688 >> 0] = 0; //@line 283
  STACKTOP = sp; //@line 284
  return;
 }
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_109($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29123
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29127
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29131
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29133
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29137
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29139
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29141
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29143
 if (HEAP32[$8 >> 2] | 0) {
  HEAP8[$2 + 1964 >> 0] = 0; //@line 29148
  _memset($2 + 1975 | 0, 0, 255) | 0; //@line 29150
  HEAP16[$2 + 2230 >> 1] = 255; //@line 29152
  _printf(11887, $4) | 0; //@line 29153
  HEAP32[$10 >> 2] = HEAP32[$8 >> 2]; //@line 29155
  _printf(12646, $10) | 0; //@line 29156
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 29157
  _putchar(10) | 0; //@line 29158
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 198; //@line 29161
   $27 = $ReallocAsyncCtx7 + 4 | 0; //@line 29162
   HEAP32[$27 >> 2] = $2; //@line 29163
   $28 = $ReallocAsyncCtx7 + 8 | 0; //@line 29164
   HEAP32[$28 >> 2] = $14; //@line 29165
   $29 = $ReallocAsyncCtx7 + 12 | 0; //@line 29166
   HEAP32[$29 >> 2] = $16; //@line 29167
   $30 = $ReallocAsyncCtx7 + 16 | 0; //@line 29168
   HEAP32[$30 >> 2] = $8; //@line 29169
   sp = STACKTOP; //@line 29170
   return;
  }
  ___async_unwind = 0; //@line 29173
  HEAP32[$ReallocAsyncCtx7 >> 2] = 198; //@line 29174
  $27 = $ReallocAsyncCtx7 + 4 | 0; //@line 29175
  HEAP32[$27 >> 2] = $2; //@line 29176
  $28 = $ReallocAsyncCtx7 + 8 | 0; //@line 29177
  HEAP32[$28 >> 2] = $14; //@line 29178
  $29 = $ReallocAsyncCtx7 + 12 | 0; //@line 29179
  HEAP32[$29 >> 2] = $16; //@line 29180
  $30 = $ReallocAsyncCtx7 + 16 | 0; //@line 29181
  HEAP32[$30 >> 2] = $8; //@line 29182
  sp = STACKTOP; //@line 29183
  return;
 }
 HEAP32[$2 + 1956 >> 2] = HEAP32[$20 + 16 >> 2]; //@line 29189
 HEAP8[$2 + 1964 >> 0] = 0; //@line 29191
 $35 = $2 + 1892 | 0; //@line 29192
 $36 = HEAP32[$35 >> 2] | 0; //@line 29193
 if (!$36) {
  return;
 }
 $40 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29200
 $42 = HEAP32[$36 + 4 >> 2] | 0; //@line 29202
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 29203
 FUNCTION_TABLE_vii[$42 & 31]($18, $2 + 1880 | 0); //@line 29204
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 29207
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 29208
  HEAP32[$43 >> 2] = $35; //@line 29209
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 29210
  HEAP32[$44 >> 2] = $18; //@line 29211
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 29212
  HEAP32[$45 >> 2] = $40; //@line 29213
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 29214
  HEAP32[$46 >> 2] = $18; //@line 29215
  sp = STACKTOP; //@line 29216
  return;
 }
 ___async_unwind = 0; //@line 29219
 HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 29220
 $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 29221
 HEAP32[$43 >> 2] = $35; //@line 29222
 $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 29223
 HEAP32[$44 >> 2] = $18; //@line 29224
 $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 29225
 HEAP32[$45 >> 2] = $40; //@line 29226
 $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 29227
 HEAP32[$46 >> 2] = $18; //@line 29228
 sp = STACKTOP; //@line 29229
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 11263
 $7 = ($2 | 0) != 0; //@line 11267
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 11271
   $$03555 = $0; //@line 11272
   $$03654 = $2; //@line 11272
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 11277
     $$036$lcssa64 = $$03654; //@line 11277
     label = 6; //@line 11278
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 11281
    $12 = $$03654 + -1 | 0; //@line 11282
    $16 = ($12 | 0) != 0; //@line 11286
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 11289
     $$03654 = $12; //@line 11289
    } else {
     $$035$lcssa = $11; //@line 11291
     $$036$lcssa = $12; //@line 11291
     $$lcssa = $16; //@line 11291
     label = 5; //@line 11292
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 11297
   $$036$lcssa = $2; //@line 11297
   $$lcssa = $7; //@line 11297
   label = 5; //@line 11298
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 11303
   $$036$lcssa64 = $$036$lcssa; //@line 11303
   label = 6; //@line 11304
  } else {
   $$2 = $$035$lcssa; //@line 11306
   $$3 = 0; //@line 11306
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 11312
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 11315
    $$3 = $$036$lcssa64; //@line 11315
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 11317
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 11321
      $$13745 = $$036$lcssa64; //@line 11321
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 11324
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 11333
       $30 = $$13745 + -4 | 0; //@line 11334
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 11337
        $$13745 = $30; //@line 11337
       } else {
        $$0$lcssa = $29; //@line 11339
        $$137$lcssa = $30; //@line 11339
        label = 11; //@line 11340
        break L11;
       }
      }
      $$140 = $$046; //@line 11344
      $$23839 = $$13745; //@line 11344
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 11346
      $$137$lcssa = $$036$lcssa64; //@line 11346
      label = 11; //@line 11347
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 11353
      $$3 = 0; //@line 11353
      break;
     } else {
      $$140 = $$0$lcssa; //@line 11356
      $$23839 = $$137$lcssa; //@line 11356
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 11363
      $$3 = $$23839; //@line 11363
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 11366
     $$23839 = $$23839 + -1 | 0; //@line 11367
     if (!$$23839) {
      $$2 = $35; //@line 11370
      $$3 = 0; //@line 11370
      break;
     } else {
      $$140 = $35; //@line 11373
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 11381
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11034
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2602] | 0)) {
     $34 = 0; //@line 11042
    } else {
     $12 = HEAP32[2602] | 0; //@line 11044
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11045
     $13 = _fflush($12) | 0; //@line 11046
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 772; //@line 11049
      sp = STACKTOP; //@line 11050
      return 0; //@line 11051
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11053
      $34 = $13; //@line 11054
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11060
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11064
    } else {
     $$02327 = $$02325; //@line 11066
     $$02426 = $34; //@line 11066
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 11073
      } else {
       $28 = 0; //@line 11075
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11083
       $25 = ___fflush_unlocked($$02327) | 0; //@line 11084
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11089
       $$1 = $25 | $$02426; //@line 11091
      } else {
       $$1 = $$02426; //@line 11093
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 11097
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11100
      if (!$$023) {
       $$024$lcssa = $$1; //@line 11103
       break L9;
      } else {
       $$02327 = $$023; //@line 11106
       $$02426 = $$1; //@line 11106
      }
     }
     HEAP32[$AsyncCtx >> 2] = 773; //@line 11109
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 11111
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 11113
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 11115
     sp = STACKTOP; //@line 11116
     return 0; //@line 11117
    }
   } while (0);
   ___ofl_unlock(); //@line 11120
   $$0 = $$024$lcssa; //@line 11121
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11127
    $5 = ___fflush_unlocked($0) | 0; //@line 11128
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 770; //@line 11131
     sp = STACKTOP; //@line 11132
     return 0; //@line 11133
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11135
     $$0 = $5; //@line 11136
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 11141
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11142
   $7 = ___fflush_unlocked($0) | 0; //@line 11143
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 771; //@line 11146
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 11149
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11151
    sp = STACKTOP; //@line 11152
    return 0; //@line 11153
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11155
   if ($phitmp) {
    $$0 = $7; //@line 11157
   } else {
    ___unlockfile($0); //@line 11159
    $$0 = $7; //@line 11160
   }
  }
 } while (0);
 return $$0 | 0; //@line 11164
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_372($0) {
 $0 = $0 | 0;
 var $$040 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $21 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 8480
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8485
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8487
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8489
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8491
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 8493
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8495
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 8499
  return;
 }
 if (!(HEAP32[$8 + 20 >> 2] | 0)) {
  $19 = HEAP32[$6 + 112 >> 2] | 0; //@line 8507
  $21 = HEAPU8[$8 >> 0] | 0; //@line 8509
  $25 = HEAP32[$19 + ($21 * 12 | 0) + 4 >> 2] | 0; //@line 8513
  $$040 = ($25 | 0) == 0 ? HEAP32[$19 + ($21 * 12 | 0) >> 2] | 0 : $25; //@line 8516
 } else {
  $$040 = $10; //@line 8518
 }
 $30 = HEAP32[$6 + 96 >> 2] | 0; //@line 8523
 $32 = HEAP32[$6 + 104 >> 2] | 0; //@line 8525
 $33 = $12 & 255; //@line 8526
 $35 = HEAP8[(HEAP32[$6 + 88 >> 2] | 0) + $33 >> 0] | 0; //@line 8528
 $36 = HEAP32[$14 >> 2] | 0; //@line 8529
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 72 >> 2] | 0; //@line 8532
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 8533
 FUNCTION_TABLE_vi[$39 & 1023]($36); //@line 8534
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 620; //@line 8537
  $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 8538
  HEAP32[$40 >> 2] = $14; //@line 8539
  $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 8540
  HEAP32[$41 >> 2] = $$040; //@line 8541
  $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 8542
  HEAP8[$42 >> 0] = $12; //@line 8543
  $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 8544
  HEAP32[$43 >> 2] = $6; //@line 8545
  $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 8546
  HEAP32[$44 >> 2] = $8; //@line 8547
  $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 8548
  HEAP8[$45 >> 0] = $35; //@line 8549
  $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 8550
  HEAP32[$46 >> 2] = $30; //@line 8551
  $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 8552
  HEAP32[$47 >> 2] = $32; //@line 8553
  $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 8554
  HEAP32[$48 >> 2] = $33; //@line 8555
  $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 8556
  HEAP32[$49 >> 2] = $4; //@line 8557
  sp = STACKTOP; //@line 8558
  return;
 }
 ___async_unwind = 0; //@line 8561
 HEAP32[$ReallocAsyncCtx4 >> 2] = 620; //@line 8562
 $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 8563
 HEAP32[$40 >> 2] = $14; //@line 8564
 $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 8565
 HEAP32[$41 >> 2] = $$040; //@line 8566
 $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 8567
 HEAP8[$42 >> 0] = $12; //@line 8568
 $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 8569
 HEAP32[$43 >> 2] = $6; //@line 8570
 $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 8571
 HEAP32[$44 >> 2] = $8; //@line 8572
 $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 8573
 HEAP8[$45 >> 0] = $35; //@line 8574
 $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 8575
 HEAP32[$46 >> 2] = $30; //@line 8576
 $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 8577
 HEAP32[$47 >> 2] = $32; //@line 8578
 $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 8579
 HEAP32[$48 >> 2] = $33; //@line 8580
 $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 8581
 HEAP32[$49 >> 2] = $4; //@line 8582
 sp = STACKTOP; //@line 8583
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30354
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30358
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30360
 $7 = $4 + 12 | 0; //@line 30361
 HEAP32[$4 >> 2] = 25; //@line 30362
 HEAP32[$4 + 4 >> 2] = 0; //@line 30364
 HEAP32[$4 + 8 >> 2] = $6; //@line 30366
 HEAP32[$7 >> 2] = 836; //@line 30367
 $8 = $6 + 1860 | 0; //@line 30368
 if (($8 | 0) == ($4 | 0)) {
  $25 = HEAP32[211] | 0; //@line 30372
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30373
  FUNCTION_TABLE_vi[$25 & 1023]($4); //@line 30374
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 194; //@line 30377
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 30378
   HEAP32[$26 >> 2] = $4; //@line 30379
   sp = STACKTOP; //@line 30380
   return;
  }
  ___async_unwind = 0; //@line 30383
  HEAP32[$ReallocAsyncCtx4 >> 2] = 194; //@line 30384
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 30385
  HEAP32[$26 >> 2] = $4; //@line 30386
  sp = STACKTOP; //@line 30387
  return;
 }
 $10 = $6 + 1872 | 0; //@line 30390
 $11 = HEAP32[$10 >> 2] | 0; //@line 30391
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 30395
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 30396
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 30397
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 192; //@line 30400
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 30401
   HEAP32[$15 >> 2] = $7; //@line 30402
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 30403
   HEAP32[$16 >> 2] = $10; //@line 30404
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 30405
   HEAP32[$17 >> 2] = $8; //@line 30406
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 30407
   HEAP32[$18 >> 2] = $4; //@line 30408
   sp = STACKTOP; //@line 30409
   return;
  }
  ___async_unwind = 0; //@line 30412
  HEAP32[$ReallocAsyncCtx2 >> 2] = 192; //@line 30413
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 30414
  HEAP32[$15 >> 2] = $7; //@line 30415
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 30416
  HEAP32[$16 >> 2] = $10; //@line 30417
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 30418
  HEAP32[$17 >> 2] = $8; //@line 30419
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 30420
  HEAP32[$18 >> 2] = $4; //@line 30421
  sp = STACKTOP; //@line 30422
  return;
 }
 $20 = HEAP32[210] | 0; //@line 30426
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 30427
 FUNCTION_TABLE_vii[$20 & 31]($8, $4); //@line 30428
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 30431
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 30432
  HEAP32[$21 >> 2] = $7; //@line 30433
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 30434
  HEAP32[$22 >> 2] = $10; //@line 30435
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 30436
  HEAP32[$23 >> 2] = $4; //@line 30437
  sp = STACKTOP; //@line 30438
  return;
 }
 ___async_unwind = 0; //@line 30441
 HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 30442
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 30443
 HEAP32[$21 >> 2] = $7; //@line 30444
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 30445
 HEAP32[$22 >> 2] = $10; //@line 30446
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 30447
 HEAP32[$23 >> 2] = $4; //@line 30448
 sp = STACKTOP; //@line 30449
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20818
 HEAP8[$2 >> 0] = 0; //@line 20820
 HEAP8[$2 + 1 >> 0] = 0; //@line 20822
 HEAP8[$2 + 2 >> 0] = 0; //@line 20824
 $6 = $2 + 4 | 0; //@line 20825
 HEAP8[$2 + 3 >> 0] = 0; //@line 20826
 HEAP8[$6 >> 0] = 0; //@line 20828
 HEAP8[$6 + 1 >> 0] = 0; //@line 20830
 HEAP8[$6 + 2 >> 0] = 0; //@line 20832
 $10 = $6 + 4 | 0; //@line 20833
 HEAP8[$6 + 3 >> 0] = 0; //@line 20834
 HEAP8[$10 >> 0] = 0; //@line 20836
 HEAP8[$10 + 1 >> 0] = 0; //@line 20838
 HEAP8[$10 + 2 >> 0] = 0; //@line 20840
 $14 = $6 + 8 | 0; //@line 20841
 HEAP8[$10 + 3 >> 0] = 0; //@line 20842
 HEAP8[$14 >> 0] = 0; //@line 20844
 HEAP8[$14 + 1 >> 0] = 0; //@line 20846
 HEAP8[$14 + 2 >> 0] = 0; //@line 20848
 $18 = $6 + 12 | 0; //@line 20849
 HEAP8[$14 + 3 >> 0] = 0; //@line 20850
 HEAP8[$18 >> 0] = 0; //@line 20852
 HEAP8[$18 + 1 >> 0] = 0; //@line 20854
 HEAP8[$18 + 2 >> 0] = 0; //@line 20856
 $22 = $6 + 16 | 0; //@line 20857
 HEAP8[$18 + 3 >> 0] = 0; //@line 20858
 HEAP8[$22 >> 0] = 0; //@line 20860
 HEAP8[$22 + 1 >> 0] = 0; //@line 20862
 HEAP8[$22 + 2 >> 0] = 0; //@line 20864
 $26 = $6 + 20 | 0; //@line 20865
 HEAP8[$22 + 3 >> 0] = 0; //@line 20866
 HEAP8[$26 >> 0] = 0; //@line 20868
 HEAP8[$26 + 1 >> 0] = 0; //@line 20870
 HEAP8[$26 + 2 >> 0] = 0; //@line 20872
 $30 = $6 + 24 | 0; //@line 20873
 HEAP8[$26 + 3 >> 0] = 0; //@line 20874
 HEAP8[$30 >> 0] = 0; //@line 20876
 HEAP8[$30 + 1 >> 0] = 0; //@line 20878
 HEAP8[$30 + 2 >> 0] = 0; //@line 20880
 $34 = $6 + 28 | 0; //@line 20881
 HEAP8[$30 + 3 >> 0] = 0; //@line 20882
 HEAP8[$34 >> 0] = 0; //@line 20884
 HEAP8[$34 + 1 >> 0] = 0; //@line 20886
 HEAP8[$34 + 2 >> 0] = 0; //@line 20888
 $38 = $6 + 32 | 0; //@line 20889
 HEAP8[$34 + 3 >> 0] = 0; //@line 20890
 HEAP8[$38 >> 0] = 0; //@line 20892
 HEAP8[$38 + 1 >> 0] = 0; //@line 20894
 HEAP8[$38 + 2 >> 0] = 0; //@line 20896
 $42 = $6 + 36 | 0; //@line 20897
 HEAP8[$38 + 3 >> 0] = 0; //@line 20898
 HEAP8[$42 >> 0] = 0; //@line 20900
 HEAP8[$42 + 1 >> 0] = 0; //@line 20902
 HEAP8[$42 + 2 >> 0] = 0; //@line 20904
 $46 = $6 + 40 | 0; //@line 20905
 HEAP8[$42 + 3 >> 0] = 0; //@line 20906
 HEAP8[$46 >> 0] = 0; //@line 20908
 HEAP8[$46 + 1 >> 0] = 0; //@line 20910
 HEAP8[$46 + 2 >> 0] = 0; //@line 20912
 $50 = $6 + 44 | 0; //@line 20913
 HEAP8[$46 + 3 >> 0] = 0; //@line 20914
 HEAP8[$50 >> 0] = 0; //@line 20916
 HEAP8[$50 + 1 >> 0] = 0; //@line 20918
 HEAP8[$50 + 2 >> 0] = 0; //@line 20920
 $54 = $6 + 48 | 0; //@line 20921
 HEAP8[$50 + 3 >> 0] = 0; //@line 20922
 HEAP8[$54 >> 0] = 0; //@line 20924
 HEAP8[$54 + 1 >> 0] = 0; //@line 20926
 HEAP8[$54 + 2 >> 0] = 0; //@line 20928
 $58 = $6 + 52 | 0; //@line 20929
 HEAP8[$54 + 3 >> 0] = 0; //@line 20930
 HEAP8[$58 >> 0] = 0; //@line 20932
 HEAP8[$58 + 1 >> 0] = 0; //@line 20934
 HEAP8[$58 + 2 >> 0] = 0; //@line 20936
 $62 = $6 + 56 | 0; //@line 20937
 HEAP8[$58 + 3 >> 0] = 0; //@line 20938
 HEAP8[$62 >> 0] = 0; //@line 20940
 HEAP8[$62 + 1 >> 0] = 0; //@line 20942
 HEAP8[$62 + 2 >> 0] = 0; //@line 20944
 $66 = $6 + 60 | 0; //@line 20945
 HEAP8[$62 + 3 >> 0] = 0; //@line 20946
 HEAP8[$66 >> 0] = 0; //@line 20948
 HEAP8[$66 + 1 >> 0] = 0; //@line 20950
 HEAP8[$66 + 2 >> 0] = 0; //@line 20952
 HEAP8[$66 + 3 >> 0] = 0; //@line 20953
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 25749
  return $$0$lcssa | 0; //@line 25750
 }
 $6 = $0 + 8 | 0; //@line 25752
 $wide$trip$count = $4 & 255; //@line 25753
 if ($1) {
  $$060$us = -1; //@line 25755
  $indvars$iv = 0; //@line 25755
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 25757
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 25760
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 25762
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 25767
      $$2$us = $$060$us; //@line 25768
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 25771
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 25774
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 25782
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 25787
      } else {
       $$2$us = $$060$us; //@line 25789
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 25793
     $$2$us = 0; //@line 25794
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 25797
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 25800
    break;
   } else {
    $$060$us = $$2$us; //@line 25803
   }
  }
  return $$0$lcssa | 0; //@line 25806
 } else {
  $$060 = -1; //@line 25808
  $indvars$iv62 = 0; //@line 25808
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 25812
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 25814
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 25820
  } else {
   $34 = 0; //@line 25822
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 25826
   label = 17; //@line 25827
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 25831
    label = 17; //@line 25832
   } else {
    $41 = 0; //@line 25834
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 25838
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 25842
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 25844
  $39 = HEAP32[$38 >> 2] | 0; //@line 25845
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 25848
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 25851
  } else {
   HEAP32[$38 >> 2] = 0; //@line 25853
   $$2 = $$060; //@line 25854
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 25856
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 25859
   break;
  } else {
   $$060 = $$2; //@line 25862
  }
 }
 return $$0$lcssa | 0; //@line 25865
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31023
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31029
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31031
 $10 = $2 + 4 | 0; //@line 31033
 HEAP32[$10 >> 2] = 0; //@line 31035
 HEAP32[$10 + 4 >> 2] = 0; //@line 31038
 HEAP32[$2 >> 2] = 751; //@line 31039
 $14 = $2 + 12 | 0; //@line 31040
 HEAP32[$14 >> 2] = 10140; //@line 31041
 $15 = HEAP32[5797] | 0; //@line 31042
 if (!$15) {
  $25 = HEAP32[2536] | 0; //@line 31046
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 31047
  FUNCTION_TABLE_vii[$25 & 31](23176, $2); //@line 31048
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 31051
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 31052
   HEAP32[$26 >> 2] = $2; //@line 31053
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 31054
   HEAP32[$27 >> 2] = $14; //@line 31055
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 31056
   HEAP32[$28 >> 2] = $4; //@line 31057
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 31058
   HEAP32[$29 >> 2] = $6; //@line 31059
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 31060
   HEAP32[$30 >> 2] = $8; //@line 31061
   sp = STACKTOP; //@line 31062
   return;
  }
  ___async_unwind = 0; //@line 31065
  HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 31066
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 31067
  HEAP32[$26 >> 2] = $2; //@line 31068
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 31069
  HEAP32[$27 >> 2] = $14; //@line 31070
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 31071
  HEAP32[$28 >> 2] = $4; //@line 31072
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 31073
  HEAP32[$29 >> 2] = $6; //@line 31074
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 31075
  HEAP32[$30 >> 2] = $8; //@line 31076
  sp = STACKTOP; //@line 31077
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 31081
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 31082
  FUNCTION_TABLE_vi[$18 & 1023](23176); //@line 31083
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 752; //@line 31086
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 31087
   HEAP32[$19 >> 2] = $2; //@line 31088
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 31089
   HEAP32[$20 >> 2] = $14; //@line 31090
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 31091
   HEAP32[$21 >> 2] = $4; //@line 31092
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 31093
   HEAP32[$22 >> 2] = $6; //@line 31094
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 31095
   HEAP32[$23 >> 2] = $8; //@line 31096
   sp = STACKTOP; //@line 31097
   return;
  }
  ___async_unwind = 0; //@line 31100
  HEAP32[$ReallocAsyncCtx2 >> 2] = 752; //@line 31101
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 31102
  HEAP32[$19 >> 2] = $2; //@line 31103
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 31104
  HEAP32[$20 >> 2] = $14; //@line 31105
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 31106
  HEAP32[$21 >> 2] = $4; //@line 31107
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 31108
  HEAP32[$22 >> 2] = $6; //@line 31109
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 31110
  HEAP32[$23 >> 2] = $8; //@line 31111
  sp = STACKTOP; //@line 31112
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15210
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15216
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 15222
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 15225
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15226
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 15227
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 795; //@line 15230
     sp = STACKTOP; //@line 15231
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15234
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 15242
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 15247
     $19 = $1 + 44 | 0; //@line 15248
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 15254
     HEAP8[$22 >> 0] = 0; //@line 15255
     $23 = $1 + 53 | 0; //@line 15256
     HEAP8[$23 >> 0] = 0; //@line 15257
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 15259
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 15262
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15263
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 15264
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 794; //@line 15267
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 15269
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15271
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 15273
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15275
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 15277
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 15279
      sp = STACKTOP; //@line 15280
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15283
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 15287
      label = 13; //@line 15288
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 15293
       label = 13; //@line 15294
      } else {
       $$037$off039 = 3; //@line 15296
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 15300
      $39 = $1 + 40 | 0; //@line 15301
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 15304
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 15314
        $$037$off039 = $$037$off038; //@line 15315
       } else {
        $$037$off039 = $$037$off038; //@line 15317
       }
      } else {
       $$037$off039 = $$037$off038; //@line 15320
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 15323
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 15330
   }
  }
 } while (0);
 return;
}
function _main__async_cb_145($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31231
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31237
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31239
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31241
 $$pre$i$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 31242
 HEAP32[5797] = $$pre$i$i; //@line 31243
 if ($$pre$i$i | 0) {
  $14 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 31248
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 31249
  FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 31250
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 754; //@line 31253
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 31254
   HEAP32[$15 >> 2] = $2; //@line 31255
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 31256
   HEAP32[$16 >> 2] = $10; //@line 31257
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 31258
   HEAP32[$17 >> 2] = $6; //@line 31259
   $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 31260
   HEAP32[$18 >> 2] = $8; //@line 31261
   sp = STACKTOP; //@line 31262
   return;
  }
  ___async_unwind = 0; //@line 31265
  HEAP32[$ReallocAsyncCtx4 >> 2] = 754; //@line 31266
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 31267
  HEAP32[$15 >> 2] = $2; //@line 31268
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 31269
  HEAP32[$16 >> 2] = $10; //@line 31270
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 31271
  HEAP32[$17 >> 2] = $6; //@line 31272
  $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 31273
  HEAP32[$18 >> 2] = $8; //@line 31274
  sp = STACKTOP; //@line 31275
  return;
 }
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23168, 23176) | 0; //@line 31278
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23168) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 31282
  _puts(15396) | 0; //@line 31283
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 31286
   sp = STACKTOP; //@line 31287
   return;
  }
  ___async_unwind = 0; //@line 31290
  HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 31291
  sp = STACKTOP; //@line 31292
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23168, 5) | 0; //@line 31295
 HEAP8[$10 >> 0] = 0; //@line 31296
 HEAP32[$10 + 4 >> 2] = 23873; //@line 31298
 HEAP32[$10 + 8 >> 2] = 23881; //@line 31300
 HEAP32[$10 + 12 >> 2] = 23889; //@line 31302
 HEAP8[$10 + 16 >> 0] = 3; //@line 31304
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23168, $10) | 0; //@line 31305
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $25; //@line 31311
   _printf(15430, $6) | 0; //@line 31312
   HEAP32[___async_retval >> 2] = -1; //@line 31314
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31318
 _puts(15459) | 0; //@line 31319
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 31322
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 31323
  HEAP32[$26 >> 2] = $10; //@line 31324
  sp = STACKTOP; //@line 31325
  return;
 }
 ___async_unwind = 0; //@line 31328
 HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 31329
 $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 31330
 HEAP32[$26 >> 2] = $10; //@line 31331
 sp = STACKTOP; //@line 31332
 return;
}
function _initialize__async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26531
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26533
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26535
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26537
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26539
 $10 = $0 + 24 | 0; //@line 26541
 $12 = HEAP32[$10 >> 2] | 0; //@line 26543
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 26546
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 26548
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 26550
 $21 = HEAP32[$2 >> 2] | 0; //@line 26553
 $22 = $21 + 32 | 0; //@line 26554
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 26555
 $23 = $21 + 40 | 0; //@line 26556
 $24 = $23; //@line 26557
 HEAP32[$24 >> 2] = 0; //@line 26559
 HEAP32[$24 + 4 >> 2] = 0; //@line 26562
 $28 = $21 + 8 | 0; //@line 26563
 HEAP32[$28 >> 2] = $4; //@line 26564
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 26565
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 26567
 $33 = $21 + 12 | 0; //@line 26569
 HEAP32[$33 >> 2] = $31; //@line 26570
 HEAP32[$21 + 16 >> 2] = $8; //@line 26572
 $36 = $21 + 24 | 0; //@line 26574
 HEAP32[$36 >> 2] = $12; //@line 26576
 HEAP32[$36 + 4 >> 2] = $15; //@line 26579
 $40 = $21 + 48 | 0; //@line 26580
 $41 = $40; //@line 26581
 HEAP32[$41 >> 2] = 0; //@line 26583
 HEAP32[$41 + 4 >> 2] = 0; //@line 26586
 HEAP8[$21 + 56 >> 0] = 1; //@line 26588
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 26591
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 26592
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 26593
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 702; //@line 26596
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 26597
  HEAP32[$50 >> 2] = $2; //@line 26598
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 26599
  HEAP32[$51 >> 2] = $19; //@line 26600
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 26601
  HEAP32[$52 >> 2] = $22; //@line 26602
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 26603
  HEAP32[$53 >> 2] = $33; //@line 26604
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 26605
  HEAP32[$54 >> 2] = $28; //@line 26606
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 26607
  HEAP32[$55 >> 2] = $23; //@line 26608
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 26609
  HEAP32[$56 >> 2] = $40; //@line 26610
  sp = STACKTOP; //@line 26611
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 26615
 ___async_unwind = 0; //@line 26616
 HEAP32[$ReallocAsyncCtx4 >> 2] = 702; //@line 26617
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 26618
 HEAP32[$50 >> 2] = $2; //@line 26619
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 26620
 HEAP32[$51 >> 2] = $19; //@line 26621
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 26622
 HEAP32[$52 >> 2] = $22; //@line 26623
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 26624
 HEAP32[$53 >> 2] = $33; //@line 26625
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 26626
 HEAP32[$54 >> 2] = $28; //@line 26627
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 26628
 HEAP32[$55 >> 2] = $23; //@line 26629
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 26630
 HEAP32[$56 >> 2] = $40; //@line 26631
 sp = STACKTOP; //@line 26632
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $14 = 0, $2 = 0, $27 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9796
 STACKTOP = STACKTOP + 16 | 0; //@line 9797
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9797
 $2 = sp; //@line 9798
 $3 = $0 + 1876 | 0; //@line 9799
 if (HEAP32[$3 >> 2] | 0) {
  $$0 = 0; //@line 9803
  STACKTOP = sp; //@line 9804
  return $$0 | 0; //@line 9804
 }
 HEAP32[$0 + 2288 >> 2] = $1; //@line 9807
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 9808
 $7 = $0 + 4 | 0; //@line 9809
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9812
 __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($7, $0 + 1812 | 0, $0 + 1336 | 0, $1) | 0; //@line 9813
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 311; //@line 9816
  HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 9818
  HEAP32[$AsyncCtx7 + 8 >> 2] = $7; //@line 9820
  HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 9822
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 9824
  sp = STACKTOP; //@line 9825
  STACKTOP = sp; //@line 9826
  return 0; //@line 9826
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9828
 HEAP32[$2 >> 2] = 2; //@line 9829
 $14 = $2 + 4 | 0; //@line 9830
 HEAP8[$14 >> 0] = 1; //@line 9831
 $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9832
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 9833
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 312; //@line 9836
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 9838
  HEAP32[$AsyncCtx3 + 8 >> 2] = $14; //@line 9840
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 9842
  HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 9844
  HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 9846
  HEAP32[$AsyncCtx3 + 24 >> 2] = $3; //@line 9848
  HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 9850
  sp = STACKTOP; //@line 9851
  STACKTOP = sp; //@line 9852
  return 0; //@line 9852
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9854
 HEAP32[$2 >> 2] = 7; //@line 9855
 HEAP8[$14 >> 0] = 1; //@line 9856
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9857
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 9858
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 313; //@line 9861
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9863
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9865
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 9867
  sp = STACKTOP; //@line 9868
  STACKTOP = sp; //@line 9869
  return 0; //@line 9869
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9871
 HEAP32[$0 + 1960 >> 2] = 0; //@line 9873
 HEAP32[$0 + 1956 >> 2] = 0; //@line 9875
 HEAP32[$3 >> 2] = 1; //@line 9876
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9877
 $27 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9878
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 314; //@line 9881
  HEAP32[$AsyncCtx10 + 4 >> 2] = $2; //@line 9883
  sp = STACKTOP; //@line 9884
  STACKTOP = sp; //@line 9885
  return 0; //@line 9885
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9887
 $$0 = $27; //@line 9888
 STACKTOP = sp; //@line 9889
 return $$0 | 0; //@line 9889
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4700
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 4711
 $14 = $1 + 20 | 0; //@line 4712
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 4714
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 4719
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 4723
 $24 = $0 + 128 | 0; //@line 4724
 _equeue_mutex_lock($24); //@line 4725
 $25 = HEAP32[$0 >> 2] | 0; //@line 4726
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 4730
   label = 5; //@line 4731
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 4733
   $$053 = $0; //@line 4734
   $29 = $25; //@line 4734
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 4743
    $34 = HEAP32[$33 >> 2] | 0; //@line 4744
    if (!$34) {
     $$051$ph = $33; //@line 4747
     label = 5; //@line 4748
     break L1;
    } else {
     $$053 = $33; //@line 4751
     $29 = $34; //@line 4751
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 4759
    HEAP32[$49 >> 2] = $29; //@line 4760
    HEAP32[$29 + 16 >> 2] = $49; //@line 4762
    $$0515859 = $$053; //@line 4763
    label = 11; //@line 4764
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 4768
   $43 = $1 + 8 | 0; //@line 4769
   HEAP32[$43 >> 2] = $42; //@line 4770
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 4774
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 4776
   $47 = $1 + 12 | 0; //@line 4777
   HEAP32[$47 >> 2] = $46; //@line 4778
   HEAP32[$46 + 16 >> 2] = $47; //@line 4780
   $$05157 = $$053; //@line 4781
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 4786
  $$0515859 = $$051$ph; //@line 4787
  label = 11; //@line 4788
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 4792
  $$05157 = $$0515859; //@line 4793
 }
 HEAP32[$$05157 >> 2] = $1; //@line 4795
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 4797
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 4799
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 4802
  return $13 | 0; //@line 4803
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 4809
  return $13 | 0; //@line 4810
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 4815
  return $13 | 0; //@line 4816
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 4822
  return $13 | 0; //@line 4823
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 4826
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 4828
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4832
 FUNCTION_TABLE_vii[$54 & 31]($65, $67 & ~($67 >> 31)); //@line 4833
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 178; //@line 4836
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 4838
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 4840
  sp = STACKTOP; //@line 4841
  return 0; //@line 4842
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4844
 _equeue_mutex_unlock($24); //@line 4845
 return $13 | 0; //@line 4846
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7933
 HEAP8[$2 >> 0] = 0; //@line 7935
 HEAP8[$2 + 1 >> 0] = 0; //@line 7937
 HEAP8[$2 + 2 >> 0] = 0; //@line 7939
 $6 = $2 + 4 | 0; //@line 7940
 HEAP8[$2 + 3 >> 0] = 0; //@line 7941
 HEAP8[$6 >> 0] = 0; //@line 7943
 HEAP8[$6 + 1 >> 0] = 0; //@line 7945
 HEAP8[$6 + 2 >> 0] = 0; //@line 7947
 $10 = $6 + 4 | 0; //@line 7948
 HEAP8[$6 + 3 >> 0] = 0; //@line 7949
 HEAP8[$10 >> 0] = 0; //@line 7951
 HEAP8[$10 + 1 >> 0] = 0; //@line 7953
 HEAP8[$10 + 2 >> 0] = 0; //@line 7955
 $14 = $6 + 8 | 0; //@line 7956
 HEAP8[$10 + 3 >> 0] = 0; //@line 7957
 HEAP8[$14 >> 0] = 0; //@line 7959
 HEAP8[$14 + 1 >> 0] = 0; //@line 7961
 HEAP8[$14 + 2 >> 0] = 0; //@line 7963
 $18 = $6 + 12 | 0; //@line 7964
 HEAP8[$14 + 3 >> 0] = 0; //@line 7965
 HEAP8[$18 >> 0] = 0; //@line 7967
 HEAP8[$18 + 1 >> 0] = 0; //@line 7969
 HEAP8[$18 + 2 >> 0] = 0; //@line 7971
 $22 = $6 + 16 | 0; //@line 7972
 HEAP8[$18 + 3 >> 0] = 0; //@line 7973
 HEAP8[$22 >> 0] = 0; //@line 7975
 HEAP8[$22 + 1 >> 0] = 0; //@line 7977
 HEAP8[$22 + 2 >> 0] = 0; //@line 7979
 $26 = $6 + 20 | 0; //@line 7980
 HEAP8[$22 + 3 >> 0] = 0; //@line 7981
 HEAP8[$26 >> 0] = 0; //@line 7983
 HEAP8[$26 + 1 >> 0] = 0; //@line 7985
 HEAP8[$26 + 2 >> 0] = 0; //@line 7987
 $30 = $6 + 24 | 0; //@line 7988
 HEAP8[$26 + 3 >> 0] = 0; //@line 7989
 HEAP8[$30 >> 0] = 0; //@line 7991
 HEAP8[$30 + 1 >> 0] = 0; //@line 7993
 HEAP8[$30 + 2 >> 0] = 0; //@line 7995
 $34 = $6 + 28 | 0; //@line 7996
 HEAP8[$30 + 3 >> 0] = 0; //@line 7997
 HEAP8[$34 >> 0] = 0; //@line 7999
 HEAP8[$34 + 1 >> 0] = 0; //@line 8001
 HEAP8[$34 + 2 >> 0] = 0; //@line 8003
 $38 = $6 + 32 | 0; //@line 8004
 HEAP8[$34 + 3 >> 0] = 0; //@line 8005
 HEAP8[$38 >> 0] = 0; //@line 8007
 HEAP8[$38 + 1 >> 0] = 0; //@line 8009
 HEAP8[$38 + 2 >> 0] = 0; //@line 8011
 $42 = $6 + 36 | 0; //@line 8012
 HEAP8[$38 + 3 >> 0] = 0; //@line 8013
 HEAP8[$42 >> 0] = 0; //@line 8015
 HEAP8[$42 + 1 >> 0] = 0; //@line 8017
 HEAP8[$42 + 2 >> 0] = 0; //@line 8019
 $46 = $6 + 40 | 0; //@line 8020
 HEAP8[$42 + 3 >> 0] = 0; //@line 8021
 HEAP8[$46 >> 0] = 0; //@line 8023
 HEAP8[$46 + 1 >> 0] = 0; //@line 8025
 HEAP8[$46 + 2 >> 0] = 0; //@line 8027
 $50 = $6 + 44 | 0; //@line 8028
 HEAP8[$46 + 3 >> 0] = 0; //@line 8029
 HEAP8[$50 >> 0] = 0; //@line 8031
 HEAP8[$50 + 1 >> 0] = 0; //@line 8033
 HEAP8[$50 + 2 >> 0] = 0; //@line 8035
 $54 = $6 + 48 | 0; //@line 8036
 HEAP8[$50 + 3 >> 0] = 0; //@line 8037
 HEAP8[$54 >> 0] = 0; //@line 8039
 HEAP8[$54 + 1 >> 0] = 0; //@line 8041
 HEAP8[$54 + 2 >> 0] = 0; //@line 8043
 $58 = $6 + 52 | 0; //@line 8044
 HEAP8[$54 + 3 >> 0] = 0; //@line 8045
 HEAP8[$58 >> 0] = 0; //@line 8047
 HEAP8[$58 + 1 >> 0] = 0; //@line 8049
 HEAP8[$58 + 2 >> 0] = 0; //@line 8051
 $62 = $6 + 56 | 0; //@line 8052
 HEAP8[$58 + 3 >> 0] = 0; //@line 8053
 HEAP8[$62 >> 0] = 0; //@line 8055
 HEAP8[$62 + 1 >> 0] = 0; //@line 8057
 HEAP8[$62 + 2 >> 0] = 0; //@line 8059
 $66 = $6 + 60 | 0; //@line 8060
 HEAP8[$62 + 3 >> 0] = 0; //@line 8061
 HEAP8[$66 >> 0] = 0; //@line 8063
 HEAP8[$66 + 1 >> 0] = 0; //@line 8065
 HEAP8[$66 + 2 >> 0] = 0; //@line 8067
 HEAP8[$66 + 3 >> 0] = 0; //@line 8068
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_54($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 24195
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24197
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24199
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 24201
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24203
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24205
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24207
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24209
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24211
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24213
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24215
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24217
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24219
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24221
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24223
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24225
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24227
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24229
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 24231
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 24233
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 24235
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 24237
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 24239
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 24241
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 24243
 $49 = $2 + 356 | 0; //@line 24244
 $50 = HEAP32[$49 >> 2] | 0; //@line 24245
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(104) | 0; //@line 24247
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($50, $2 + 1056 | 0); //@line 24248
 if (!___async) {
  ___async_unwind = 0; //@line 24251
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 388; //@line 24253
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $2; //@line 24255
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $4; //@line 24257
 HEAP8[$ReallocAsyncCtx24 + 12 >> 0] = $6; //@line 24259
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $8; //@line 24261
 HEAP32[$ReallocAsyncCtx24 + 20 >> 2] = $10; //@line 24263
 HEAP32[$ReallocAsyncCtx24 + 24 >> 2] = $12; //@line 24265
 HEAP32[$ReallocAsyncCtx24 + 28 >> 2] = $14; //@line 24267
 HEAP32[$ReallocAsyncCtx24 + 32 >> 2] = $16; //@line 24269
 HEAP32[$ReallocAsyncCtx24 + 36 >> 2] = $20; //@line 24271
 HEAP32[$ReallocAsyncCtx24 + 40 >> 2] = $22; //@line 24273
 HEAP32[$ReallocAsyncCtx24 + 44 >> 2] = $49; //@line 24275
 HEAP32[$ReallocAsyncCtx24 + 48 >> 2] = $18; //@line 24277
 HEAP32[$ReallocAsyncCtx24 + 52 >> 2] = $24; //@line 24279
 HEAP32[$ReallocAsyncCtx24 + 56 >> 2] = $26; //@line 24281
 HEAP32[$ReallocAsyncCtx24 + 60 >> 2] = $28; //@line 24283
 HEAP32[$ReallocAsyncCtx24 + 64 >> 2] = $30; //@line 24285
 HEAP32[$ReallocAsyncCtx24 + 68 >> 2] = $32; //@line 24287
 HEAP32[$ReallocAsyncCtx24 + 72 >> 2] = $34; //@line 24289
 HEAP32[$ReallocAsyncCtx24 + 76 >> 2] = $36; //@line 24291
 HEAP32[$ReallocAsyncCtx24 + 80 >> 2] = $38; //@line 24293
 HEAP32[$ReallocAsyncCtx24 + 84 >> 2] = $40; //@line 24295
 HEAP32[$ReallocAsyncCtx24 + 88 >> 2] = $42; //@line 24297
 HEAP32[$ReallocAsyncCtx24 + 92 >> 2] = $44; //@line 24299
 HEAP32[$ReallocAsyncCtx24 + 96 >> 2] = $46; //@line 24301
 HEAP32[$ReallocAsyncCtx24 + 100 >> 2] = $48; //@line 24303
 sp = STACKTOP; //@line 24304
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $2 = 0, $20 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 10364
 STACKTOP = STACKTOP + 48 | 0; //@line 10365
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10365
 $vararg_buffer5 = sp + 24 | 0; //@line 10366
 $vararg_buffer3 = sp + 16 | 0; //@line 10367
 $2 = sp + 28 | 0; //@line 10370
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10375
  _printf(12684, sp + 8 | 0) | 0; //@line 10376
  $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10377
  _putchar(10) | 0; //@line 10378
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 330; //@line 10381
   sp = STACKTOP; //@line 10382
   STACKTOP = sp; //@line 10383
   return 0; //@line 10383
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10385
  $$1 = -1012; //@line 10386
  STACKTOP = sp; //@line 10387
  return $$1 | 0; //@line 10387
 }
 HEAP32[$2 >> 2] = 2; //@line 10389
 $6 = $0 + 4 | 0; //@line 10390
 $AsyncCtx13 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10391
 $7 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 10392
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 331; //@line 10395
  HEAP32[$AsyncCtx13 + 4 >> 2] = $2; //@line 10397
  HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 10399
  HEAP8[$AsyncCtx13 + 12 >> 0] = $1; //@line 10401
  HEAP32[$AsyncCtx13 + 16 >> 2] = $6; //@line 10403
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer3; //@line 10405
  HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer3; //@line 10407
  HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer5; //@line 10409
  HEAP32[$AsyncCtx13 + 32 >> 2] = $vararg_buffer5; //@line 10411
  HEAP32[$AsyncCtx13 + 36 >> 2] = $2; //@line 10413
  sp = STACKTOP; //@line 10414
  STACKTOP = sp; //@line 10415
  return 0; //@line 10415
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10417
 do {
  if (!$7) {
   HEAP32[$2 >> 2] = 21; //@line 10421
   HEAP8[$2 + 4 >> 0] = $1; //@line 10423
   $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10424
   $20 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 10425
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 333; //@line 10428
    HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 10430
    sp = STACKTOP; //@line 10431
    STACKTOP = sp; //@line 10432
    return 0; //@line 10432
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10434
    $$0 = $20; //@line 10435
    break;
   }
  } else {
   _printf(11887, $vararg_buffer3) | 0; //@line 10439
   _printf(12745, $vararg_buffer5) | 0; //@line 10440
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10441
   _putchar(10) | 0; //@line 10442
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 332; //@line 10445
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10447
    sp = STACKTOP; //@line 10448
    STACKTOP = sp; //@line 10449
    return 0; //@line 10449
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10451
    $$0 = -1003; //@line 10452
    break;
   }
  }
 } while (0);
 $$1 = $$0; //@line 10457
 STACKTOP = sp; //@line 10458
 return $$1 | 0; //@line 10458
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_301($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3447
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3449
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3451
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3453
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3455
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3457
 $13 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 3460
 if (!$13) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 3463
  $23 = $8 + 12 | 0; //@line 3465
  HEAP32[$8 >> 2] = 532; //@line 3466
  HEAP32[$8 + 4 >> 2] = 0; //@line 3468
  HEAP32[$8 + 8 >> 2] = $4; //@line 3470
  HEAP32[$23 >> 2] = 848; //@line 3471
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 3472
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($21, $4 + 1056 | 0, $8); //@line 3473
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 3476
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 3477
   HEAP32[$24 >> 2] = $23; //@line 3478
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 3479
   HEAP32[$25 >> 2] = $2; //@line 3480
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 3481
   HEAP32[$26 >> 2] = $4; //@line 3482
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 3483
   HEAP32[$27 >> 2] = $6; //@line 3484
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 3485
   HEAP32[$28 >> 2] = $8; //@line 3486
   sp = STACKTOP; //@line 3487
   return;
  }
  ___async_unwind = 0; //@line 3490
  HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 3491
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 3492
  HEAP32[$24 >> 2] = $23; //@line 3493
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 3494
  HEAP32[$25 >> 2] = $2; //@line 3495
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 3496
  HEAP32[$26 >> 2] = $4; //@line 3497
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 3498
  HEAP32[$27 >> 2] = $6; //@line 3499
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 3500
  HEAP32[$28 >> 2] = $8; //@line 3501
  sp = STACKTOP; //@line 3502
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 3506
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 3507
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 3508
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 3511
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 3512
   HEAP32[$17 >> 2] = $2; //@line 3513
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 3514
   HEAP32[$18 >> 2] = $4; //@line 3515
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 3516
   HEAP32[$19 >> 2] = $8; //@line 3517
   $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 3518
   HEAP32[$20 >> 2] = $6; //@line 3519
   sp = STACKTOP; //@line 3520
   return;
  }
  ___async_unwind = 0; //@line 3523
  HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 3524
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 3525
  HEAP32[$17 >> 2] = $2; //@line 3526
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 3527
  HEAP32[$18 >> 2] = $4; //@line 3528
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 3529
  HEAP32[$19 >> 2] = $8; //@line 3530
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 3531
  HEAP32[$20 >> 2] = $6; //@line 3532
  sp = STACKTOP; //@line 3533
  return;
 }
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14522
 STACKTOP = STACKTOP + 48 | 0; //@line 14523
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14523
 $vararg_buffer10 = sp + 32 | 0; //@line 14524
 $vararg_buffer7 = sp + 24 | 0; //@line 14525
 $vararg_buffer3 = sp + 16 | 0; //@line 14526
 $vararg_buffer = sp; //@line 14527
 $0 = sp + 36 | 0; //@line 14528
 $1 = ___cxa_get_globals_fast() | 0; //@line 14529
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14532
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14537
   $9 = HEAP32[$7 >> 2] | 0; //@line 14539
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14542
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 18467; //@line 14548
    _abort_message(18417, $vararg_buffer7); //@line 14549
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14558
   } else {
    $22 = $3 + 80 | 0; //@line 14560
   }
   HEAP32[$0 >> 2] = $22; //@line 14562
   $23 = HEAP32[$3 >> 2] | 0; //@line 14563
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14565
   $28 = HEAP32[(HEAP32[110] | 0) + 16 >> 2] | 0; //@line 14568
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14569
   $29 = FUNCTION_TABLE_iiii[$28 & 15](440, $23, $0) | 0; //@line 14570
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 785; //@line 14573
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14575
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14577
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14579
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14581
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14583
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14585
    sp = STACKTOP; //@line 14586
    STACKTOP = sp; //@line 14587
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14589
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 18467; //@line 14591
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14593
    _abort_message(18376, $vararg_buffer3); //@line 14594
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14597
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14600
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14601
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 14602
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 786; //@line 14605
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14607
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14609
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14611
    sp = STACKTOP; //@line 14612
    STACKTOP = sp; //@line 14613
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14615
    HEAP32[$vararg_buffer >> 2] = 18467; //@line 14616
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14618
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14620
    _abort_message(18331, $vararg_buffer); //@line 14621
   }
  }
 }
 _abort_message(18455, $vararg_buffer10); //@line 14626
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_450($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23137
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23141
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23143
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23145
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23147
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23149
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23150
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 23154
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 23155
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 23156
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 219; //@line 23159
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 23160
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 23161
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 23162
   HEAP32[$17 >> 2] = $6; //@line 23163
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 23164
   HEAP32[$18 >> 2] = $8; //@line 23165
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 23166
   HEAP32[$19 >> 2] = $10; //@line 23167
   sp = STACKTOP; //@line 23168
   return;
  }
  ___async_unwind = 0; //@line 23171
  HEAP32[$ReallocAsyncCtx4 >> 2] = 219; //@line 23172
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 23173
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 23174
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 23175
  HEAP32[$17 >> 2] = $6; //@line 23176
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 23177
  HEAP32[$18 >> 2] = $8; //@line 23178
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 23179
  HEAP32[$19 >> 2] = $10; //@line 23180
  sp = STACKTOP; //@line 23181
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 23186
  _mbed_assert_internal(12851, 11935, 909); //@line 23187
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 23190
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 23191
   HEAP32[$21 >> 2] = $6; //@line 23192
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 23193
   HEAP32[$22 >> 2] = $8; //@line 23194
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 23195
   HEAP32[$23 >> 2] = $10; //@line 23196
   sp = STACKTOP; //@line 23197
   return;
  }
  ___async_unwind = 0; //@line 23200
  HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 23201
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 23202
  HEAP32[$21 >> 2] = $6; //@line 23203
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 23204
  HEAP32[$22 >> 2] = $8; //@line 23205
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 23206
  HEAP32[$23 >> 2] = $10; //@line 23207
  sp = STACKTOP; //@line 23208
  return;
 }
 if (!(HEAP8[$6 + 11 >> 0] | 0)) {
  return;
 }
 $27 = HEAP8[$8 >> 0] | 0; //@line 23217
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 23218
 __ZN12LoRaWANStack9handle_txEhPKhth($10, $27, 0, 0, 2) | 0; //@line 23219
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 23222
  sp = STACKTOP; //@line 23223
  return;
 }
 ___async_unwind = 0; //@line 23226
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 23227
 sp = STACKTOP; //@line 23228
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20160
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 20164
  return $39 | 0; //@line 20165
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20168
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 20170
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 20172
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 20175
  return $39 | 0; //@line 20176
 }
 $10 = $4 & 255; //@line 20178
 $indvars$iv = 0; //@line 20179
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 20190
     label = 15; //@line 20191
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 20199
     label = 15; //@line 20200
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 20203
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 20206
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 20208
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 20209
    if (___async) {
     label = 9; //@line 20212
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20215
    if (!$26) {
     $39 = -1003; //@line 20217
     label = 15; //@line 20218
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 20221
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20222
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 20223
    if (___async) {
     label = 12; //@line 20226
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20229
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 20232
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 20235
  } else {
   $39 = 0; //@line 20237
   label = 15; //@line 20238
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 586; //@line 20243
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 20245
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 20247
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 20249
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 20251
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 20253
  sp = STACKTOP; //@line 20254
  return 0; //@line 20255
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 587; //@line 20258
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 20260
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 20262
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 20264
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 20266
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 20268
  sp = STACKTOP; //@line 20269
  return 0; //@line 20270
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 20273
 }
 return 0; //@line 20275
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_132($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 30238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30242
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30244
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30246
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30248
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 30249
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 30251
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 30254
   label = 11; //@line 30255
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 30261
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 30273
  HEAP32[$34 >> 2] = $35; //@line 30274
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 30280
  $34 = ___async_retval; //@line 30281
  HEAP32[$34 >> 2] = $35; //@line 30282
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 30290
  $34 = ___async_retval; //@line 30291
  HEAP32[$34 >> 2] = $35; //@line 30292
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 30295
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 30298
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 30300
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 30301
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 586; //@line 30304
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 30305
  HEAP32[$27 >> 2] = $6; //@line 30306
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 30307
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 30308
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 30309
  HEAP32[$29 >> 2] = $4; //@line 30310
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 30311
  HEAP32[$30 >> 2] = $8; //@line 30312
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 30313
  HEAP32[$31 >> 2] = $10; //@line 30314
  sp = STACKTOP; //@line 30315
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 30320
 ___async_unwind = 0; //@line 30321
 HEAP32[$ReallocAsyncCtx >> 2] = 586; //@line 30322
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 30323
 HEAP32[$27 >> 2] = $6; //@line 30324
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 30325
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 30326
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 30327
 HEAP32[$29 >> 2] = $4; //@line 30328
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 30329
 HEAP32[$30 >> 2] = $8; //@line 30330
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 30331
 HEAP32[$31 >> 2] = $10; //@line 30332
 sp = STACKTOP; //@line 30333
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_108($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29029
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29031
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29033
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29035
 $11 = $2 + 1880 | 0; //@line 29040
 $12 = $2 + 1892 | 0; //@line 29041
 $13 = HEAP32[$12 >> 2] | 0; //@line 29042
 $14 = ($13 | 0) != 0; //@line 29043
 if ((HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0) == 2) {
  if (!$14) {
   return;
  }
  $16 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29049
  $18 = HEAP32[$13 + 4 >> 2] | 0; //@line 29051
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29052
  FUNCTION_TABLE_vii[$18 & 31]($4, $11); //@line 29053
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 199; //@line 29056
   $19 = $ReallocAsyncCtx + 4 | 0; //@line 29057
   HEAP32[$19 >> 2] = $12; //@line 29058
   $20 = $ReallocAsyncCtx + 8 | 0; //@line 29059
   HEAP32[$20 >> 2] = $4; //@line 29060
   $21 = $ReallocAsyncCtx + 12 | 0; //@line 29061
   HEAP32[$21 >> 2] = $16; //@line 29062
   $22 = $ReallocAsyncCtx + 16 | 0; //@line 29063
   HEAP32[$22 >> 2] = $4; //@line 29064
   sp = STACKTOP; //@line 29065
   return;
  }
  ___async_unwind = 0; //@line 29068
  HEAP32[$ReallocAsyncCtx >> 2] = 199; //@line 29069
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 29070
  HEAP32[$19 >> 2] = $12; //@line 29071
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 29072
  HEAP32[$20 >> 2] = $4; //@line 29073
  $21 = $ReallocAsyncCtx + 12 | 0; //@line 29074
  HEAP32[$21 >> 2] = $16; //@line 29075
  $22 = $ReallocAsyncCtx + 16 | 0; //@line 29076
  HEAP32[$22 >> 2] = $4; //@line 29077
  sp = STACKTOP; //@line 29078
  return;
 } else {
  if (!$14) {
   return;
  }
  $24 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29085
  $26 = HEAP32[$13 + 4 >> 2] | 0; //@line 29087
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 29088
  FUNCTION_TABLE_vii[$26 & 31]($6, $11); //@line 29089
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 203; //@line 29092
   $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 29093
   HEAP32[$27 >> 2] = $12; //@line 29094
   $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 29095
   HEAP32[$28 >> 2] = $6; //@line 29096
   $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 29097
   HEAP32[$29 >> 2] = $24; //@line 29098
   $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 29099
   HEAP32[$30 >> 2] = $6; //@line 29100
   sp = STACKTOP; //@line 29101
   return;
  }
  ___async_unwind = 0; //@line 29104
  HEAP32[$ReallocAsyncCtx3 >> 2] = 203; //@line 29105
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 29106
  HEAP32[$27 >> 2] = $12; //@line 29107
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 29108
  HEAP32[$28 >> 2] = $6; //@line 29109
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 29110
  HEAP32[$29 >> 2] = $24; //@line 29111
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 29112
  HEAP32[$30 >> 2] = $6; //@line 29113
  sp = STACKTOP; //@line 29114
  return;
 }
}
function __Z22compute_join_frame_micPKhtS0_Pj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $19 = 0, $22 = 0, $4 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22451
 _mbedtls_cipher_init(22532); //@line 22452
 $4 = _mbedtls_cipher_info_from_type(2) | 0; //@line 22453
 if (!$4) {
  $$0 = -24960; //@line 22456
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 22458
  $6 = _mbedtls_cipher_setup(22532, $4) | 0; //@line 22459
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 601; //@line 22462
   HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 22464
   HEAP16[$AsyncCtx11 + 8 >> 1] = $1; //@line 22466
   HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 22468
   HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 22470
   sp = STACKTOP; //@line 22471
   return 0; //@line 22472
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22474
  if (!$6) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22477
   $12 = _mbedtls_cipher_cmac_starts(22532, $2, 128) | 0; //@line 22478
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 602; //@line 22481
    HEAP16[$AsyncCtx7 + 4 >> 1] = $1; //@line 22483
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 22485
    HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 22487
    sp = STACKTOP; //@line 22488
    return 0; //@line 22489
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22491
   if (!$12) {
    $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22496
    $19 = _mbedtls_cipher_cmac_update(22532, $0, $1 & 255) | 0; //@line 22497
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 603; //@line 22500
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22502
     sp = STACKTOP; //@line 22503
     return 0; //@line 22504
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 22506
    if (!$19) {
     $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22509
     $22 = _mbedtls_cipher_cmac_finish(22532, 23840) | 0; //@line 22510
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 604; //@line 22513
      HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 22515
      sp = STACKTOP; //@line 22516
      return 0; //@line 22517
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22519
     if (!$22) {
      HEAP32[$3 >> 2] = (HEAPU8[23842] | 0) << 16 | (HEAPU8[23843] | 0) << 24 | (HEAPU8[23841] | 0) << 8 | (HEAPU8[23840] | 0); //@line 22536
      $$0 = 0; //@line 22537
     } else {
      $$0 = $22; //@line 22539
     }
    } else {
     $$0 = $19; //@line 22542
    }
   } else {
    $$0 = $12; //@line 22545
   }
  } else {
   $$0 = $6; //@line 22548
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22551
 _mbedtls_cipher_free(22532); //@line 22552
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 605; //@line 22555
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 22557
  sp = STACKTOP; //@line 22558
  return 0; //@line 22559
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22561
  return $$0 | 0; //@line 22562
 }
 return 0; //@line 22564
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_159($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32103
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32105
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32107
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32109
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32111
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32113
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32115
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32117
 $16 = HEAP16[$0 + 32 >> 1] | 0; //@line 32119
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32121
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32123
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32125
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32127
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 32129
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 32131
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 32133
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 32135
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 32137
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 32139
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 32141
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 32143
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 32145
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 32149
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 32153
 $54 = $4 + 689 | 0; //@line 32157
 HEAP8[$54 >> 0] = HEAP32[$0 + 88 >> 2]; //@line 32158
 _printf(10904, $46) | 0; //@line 32159
 HEAP32[$50 >> 2] = HEAPU8[$54 >> 0]; //@line 32162
 _printf(11079, $50) | 0; //@line 32163
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(88) | 0; //@line 32164
 _putchar(10) | 0; //@line 32165
 if (!___async) {
  ___async_unwind = 0; //@line 32168
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 92; //@line 32170
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 32172
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 32174
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 32176
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 32178
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 32180
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 32182
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 32184
 HEAP16[$ReallocAsyncCtx7 + 32 >> 1] = $16; //@line 32186
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 32188
 HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 32190
 HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 32192
 HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 32194
 HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 32196
 HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 32198
 HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 32200
 HEAP32[$ReallocAsyncCtx7 + 64 >> 2] = $32; //@line 32202
 HEAP32[$ReallocAsyncCtx7 + 68 >> 2] = $34; //@line 32204
 HEAP32[$ReallocAsyncCtx7 + 72 >> 2] = $36; //@line 32206
 HEAP32[$ReallocAsyncCtx7 + 76 >> 2] = $38; //@line 32208
 HEAP32[$ReallocAsyncCtx7 + 80 >> 2] = $40; //@line 32210
 HEAP32[$ReallocAsyncCtx7 + 84 >> 2] = $42; //@line 32212
 sp = STACKTOP; //@line 32213
 return;
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10189
 STACKTOP = STACKTOP + 48 | 0; //@line 10190
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10190
 $vararg_buffer3 = sp + 16 | 0; //@line 10191
 $vararg_buffer = sp; //@line 10192
 $3 = sp + 32 | 0; //@line 10193
 $4 = $0 + 28 | 0; //@line 10194
 $5 = HEAP32[$4 >> 2] | 0; //@line 10195
 HEAP32[$3 >> 2] = $5; //@line 10196
 $7 = $0 + 20 | 0; //@line 10198
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 10200
 HEAP32[$3 + 4 >> 2] = $9; //@line 10201
 HEAP32[$3 + 8 >> 2] = $1; //@line 10203
 HEAP32[$3 + 12 >> 2] = $2; //@line 10205
 $12 = $9 + $2 | 0; //@line 10206
 $13 = $0 + 60 | 0; //@line 10207
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 10210
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 10212
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 10214
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 10216
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 10220
  } else {
   $$04756 = 2; //@line 10222
   $$04855 = $12; //@line 10222
   $$04954 = $3; //@line 10222
   $27 = $17; //@line 10222
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 10228
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 10230
    $38 = $27 >>> 0 > $37 >>> 0; //@line 10231
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 10233
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 10235
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 10237
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 10240
    $44 = $$150 + 4 | 0; //@line 10241
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 10244
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 10247
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 10249
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 10251
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 10253
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 10256
     break L1;
    } else {
     $$04756 = $$1; //@line 10259
     $$04954 = $$150; //@line 10259
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 10263
   HEAP32[$4 >> 2] = 0; //@line 10264
   HEAP32[$7 >> 2] = 0; //@line 10265
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 10268
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 10271
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 10276
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 10282
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10287
  $25 = $20; //@line 10288
  HEAP32[$4 >> 2] = $25; //@line 10289
  HEAP32[$7 >> 2] = $25; //@line 10290
  $$051 = $2; //@line 10291
 }
 STACKTOP = sp; //@line 10293
 return $$051 | 0; //@line 10293
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_81($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27491
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 27497
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27499
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27503
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27505
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27507
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27509
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27511
 $22 = HEAP16[$0 + 44 >> 1] | 0; //@line 27513
 $24 = HEAP8[$0 + 46 >> 0] | 0; //@line 27515
 $26 = HEAP8[$0 + 47 >> 0] | 0; //@line 27517
 $28 = HEAP8[$0 + 48 >> 0] | 0; //@line 27519
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 27521
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 27523
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 27525
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 27527
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 27529
 $40 = HEAP8[$0 + 72 >> 0] | 0; //@line 27531
 $42 = HEAP8[$0 + 73 >> 0] | 0; //@line 27533
 $44 = HEAP8[$0 + 74 >> 0] | 0; //@line 27535
 $46 = HEAP32[$0 + 76 >> 2] | 0; //@line 27537
 $48 = HEAP32[$0 + 80 >> 2] | 0; //@line 27539
 $50 = HEAP32[$0 + 84 >> 2] | 0; //@line 27541
 $52 = HEAP32[$0 + 88 >> 2] | 0; //@line 27543
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 27544
 HEAP32[$8 >> 2] = $6 << 24 >> 24; //@line 27546
 _printf(11473, $8) | 0; //@line 27547
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(76) | 0; //@line 27548
 _putchar(10) | 0; //@line 27549
 if (!___async) {
  ___async_unwind = 0; //@line 27552
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 64; //@line 27554
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $12; //@line 27556
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $14; //@line 27558
 HEAP8[$ReallocAsyncCtx3 + 12 >> 0] = $6; //@line 27560
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 27562
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 27564
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $20; //@line 27566
 HEAP16[$ReallocAsyncCtx3 + 28 >> 1] = $22; //@line 27568
 HEAP8[$ReallocAsyncCtx3 + 30 >> 0] = $24; //@line 27570
 HEAP8[$ReallocAsyncCtx3 + 31 >> 0] = $26; //@line 27572
 HEAP8[$ReallocAsyncCtx3 + 32 >> 0] = $28; //@line 27574
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 27576
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 27578
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 27580
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 27582
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 27584
 HEAP8[$ReallocAsyncCtx3 + 56 >> 0] = $40; //@line 27586
 HEAP8[$ReallocAsyncCtx3 + 57 >> 0] = $42; //@line 27588
 HEAP8[$ReallocAsyncCtx3 + 58 >> 0] = $44; //@line 27590
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $46; //@line 27592
 HEAP32[$ReallocAsyncCtx3 + 64 >> 2] = $48; //@line 27594
 HEAP32[$ReallocAsyncCtx3 + 68 >> 2] = $50; //@line 27596
 HEAP32[$ReallocAsyncCtx3 + 72 >> 2] = $52; //@line 27598
 sp = STACKTOP; //@line 27599
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19951
 STACKTOP = STACKTOP + 16 | 0; //@line 19952
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19952
 $2 = sp; //@line 19953
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$1 = -1002; //@line 19957
  STACKTOP = sp; //@line 19958
  return $$1 | 0; //@line 19958
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19961
 $7 = HEAP8[$1 >> 0] | 0; //@line 19962
 if (($7 & 255) > ($6 & 255)) {
  $$1 = -1003; //@line 19965
  STACKTOP = sp; //@line 19966
  return $$1 | 0; //@line 19966
 }
 $9 = $1 + 4 | 0; //@line 19968
 if (!($7 << 24 >> 24)) {
  $$1 = 0; //@line 19971
  STACKTOP = sp; //@line 19972
  return $$1 | 0; //@line 19972
 }
 $11 = $2 + 9 | 0; //@line 19974
 $12 = $2 + 8 | 0; //@line 19975
 $13 = $2 + 4 | 0; //@line 19976
 $$026 = 0; //@line 19977
 $20 = 0; //@line 19977
 while (1) {
  $18 = HEAP32[$9 >> 2] | 0; //@line 19979
  HEAP8[$11 >> 0] = HEAP8[$18 + ($20 << 4) + 13 >> 0] | 0; //@line 19982
  HEAP8[$12 >> 0] = HEAP8[$18 + ($20 << 4) + 12 >> 0] | 0; //@line 19985
  HEAP32[$2 >> 2] = HEAP32[$18 + ($20 << 4) + 4 >> 2]; //@line 19988
  HEAP32[$13 >> 2] = HEAP32[$18 + ($20 << 4) + 8 >> 2]; //@line 19991
  $28 = HEAP32[$0 >> 2] | 0; //@line 19992
  $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 60 >> 2] | 0; //@line 19995
  $33 = HEAP8[$18 + ($20 << 4) >> 0] | 0; //@line 19997
  $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 19998
  $34 = FUNCTION_TABLE_iiii[$31 & 15]($28, $2, $33) | 0; //@line 19999
  if (___async) {
   label = 7; //@line 20002
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 20005
  $16 = $$026 + 1 << 24 >> 24; //@line 20007
  if ($34 | 0) {
   $$1 = $34; //@line 20009
   label = 9; //@line 20010
   break;
  }
  if (($16 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$026 = $16; //@line 20017
   $20 = $16 & 255; //@line 20017
  } else {
   $$1 = 0; //@line 20019
   label = 9; //@line 20020
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 585; //@line 20025
  HEAP8[$AsyncCtx + 4 >> 0] = $$026; //@line 20027
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20029
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 20031
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 20033
  HEAP32[$AsyncCtx + 20 >> 2] = $11; //@line 20035
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 20037
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 20039
  HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 20041
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 20043
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 20045
  sp = STACKTOP; //@line 20046
  STACKTOP = sp; //@line 20047
  return 0; //@line 20047
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 20050
  return $$1 | 0; //@line 20050
 }
 return 0; //@line 20052
}
function _initialize__async_cb_73($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26817
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26819
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26821
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26823
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26825
 $10 = 7 << 32 + -4; //@line 26827
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 26828
 $12 = tempRet0; //@line 26829
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 26830
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 26832
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 26834
 $18 = tempRet0; //@line 26835
 $19 = HEAP32[$4 >> 2] | 0; //@line 26836
 HEAP32[$19 >> 2] = 0; //@line 26837
 HEAP32[$19 + 4 >> 2] = 0; //@line 26839
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 26842
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 26843
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 26844
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 26847
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 26848
  HEAP32[$25 >> 2] = $4; //@line 26849
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 26850
  HEAP32[$26 >> 2] = $2; //@line 26851
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 26852
  HEAP32[$27 >> 2] = 32; //@line 26853
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 26854
  HEAP32[$28 >> 2] = $10; //@line 26855
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 26856
  $30 = $29; //@line 26857
  $31 = $30; //@line 26858
  HEAP32[$31 >> 2] = $17; //@line 26859
  $32 = $30 + 4 | 0; //@line 26860
  $33 = $32; //@line 26861
  HEAP32[$33 >> 2] = $18; //@line 26862
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 26863
  HEAP32[$34 >> 2] = $6; //@line 26864
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 26865
  HEAP32[$35 >> 2] = $8; //@line 26866
  sp = STACKTOP; //@line 26867
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 26871
 ___async_unwind = 0; //@line 26872
 HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 26873
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 26874
 HEAP32[$25 >> 2] = $4; //@line 26875
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 26876
 HEAP32[$26 >> 2] = $2; //@line 26877
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 26878
 HEAP32[$27 >> 2] = 32; //@line 26879
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 26880
 HEAP32[$28 >> 2] = $10; //@line 26881
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 26882
 $30 = $29; //@line 26883
 $31 = $30; //@line 26884
 HEAP32[$31 >> 2] = $17; //@line 26885
 $32 = $30 + 4 | 0; //@line 26886
 $33 = $32; //@line 26887
 HEAP32[$33 >> 2] = $18; //@line 26888
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 26889
 HEAP32[$34 >> 2] = $6; //@line 26890
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 26891
 HEAP32[$35 >> 2] = $8; //@line 26892
 sp = STACKTOP; //@line 26893
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$123$off0 = 0, $$024 = 0, $$4$off0 = 0, $$5$off039 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, $not$ = 0, sp = 0;
 sp = STACKTOP; //@line 25303
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$024 = -1003; //@line 25308
  return $$024 | 0; //@line 25309
 }
 $6 = $2 & 255; //@line 25311
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$024 = -1003; //@line 25316
  return $$024 | 0; //@line 25317
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 25320
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 25322
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 25324
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 25326
 $20 = $11 << 24 >> 24 >> 4; //@line 25330
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 25332
 $$$123$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 25337
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$123$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 25351
  $35 = HEAP32[$1 >> 2] | 0; //@line 25352
  if (($35 | 0) == (HEAP32[(HEAP32[$0 + 112 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 25359
   $44 = $35; //@line 25359
  } else {
   $$024 = $$4$off0 ? -1006 : -1004; //@line 25362
   return $$024 | 0; //@line 25363
  }
 } else {
  $$5$off039 = $$$123$off0; //@line 25367
  $44 = HEAP32[$1 >> 2] | 0; //@line 25367
 }
 $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 25371
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 25372
 $45 = FUNCTION_TABLE_iii[$43 & 31]($0, $44) | 0; //@line 25373
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 635; //@line 25376
  HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 25379
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 25381
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 25383
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 25385
  sp = STACKTOP; //@line 25386
  return 0; //@line 25387
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25389
 $not$ = $45 ^ 1; //@line 25390
 if ($$5$off039 | $not$) {
  $$024 = $$5$off039 ? $$5$off039 & $not$ ? -1006 : -1005 : -1004; //@line 25396
  return $$024 | 0; //@line 25397
 }
 $50 = $0 + 112 | 0; //@line 25399
 $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 25401
 HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 25402
 HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 25402
 HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 25402
 HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 25407
 $62 = (HEAP32[$0 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 25413
 HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 25418
 $$024 = 0; //@line 25419
 return $$024 | 0; //@line 25420
}
function __ZN7LoRaMac21prepare_rx_done_abortEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $17 = 0, $21 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 13881
 STACKTOP = STACKTOP + 16 | 0; //@line 13882
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13882
 $$byval_copy = sp + 8 | 0; //@line 13883
 $vararg_buffer = sp; //@line 13884
 _printf(12967, $vararg_buffer) | 0; //@line 13885
 _printf(13146, $$byval_copy) | 0; //@line 13886
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13887
 _putchar(10) | 0; //@line 13888
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 422; //@line 13891
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13893
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 13895
  sp = STACKTOP; //@line 13896
  STACKTOP = sp; //@line 13897
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13899
 $3 = $0 + 968 | 0; //@line 13900
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 64; //@line 13903
 if (HEAP8[$0 + 373 >> 0] | 0) {
  $10 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13909
  HEAP32[$vararg_buffer >> 2] = 423; //@line 13910
  HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 13912
  $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13913
  HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 13914
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 13914
  $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $0, $$byval_copy) | 0; //@line 13915
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 424; //@line 13918
   HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer; //@line 13920
   HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 13922
   sp = STACKTOP; //@line 13923
   STACKTOP = sp; //@line 13924
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13926
  do {
   if (!$11) {
    $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13930
    _mbed_assert_internal(12851, 12860, 201); //@line 13931
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 425; //@line 13934
     HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 13936
     HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 13938
     sp = STACKTOP; //@line 13939
     STACKTOP = sp; //@line 13940
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13942
     break;
    }
   }
  } while (0);
 }
 $17 = $0 + 944 | 0; //@line 13948
 HEAP8[$17 >> 0] = HEAP8[$17 >> 0] | 34; //@line 13951
 $21 = HEAP32[$0 + 356 >> 2] | 0; //@line 13953
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13955
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $0 + 996 | 0, 1); //@line 13956
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 426; //@line 13959
  sp = STACKTOP; //@line 13960
  STACKTOP = sp; //@line 13961
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13963
  STACKTOP = sp; //@line 13964
  return;
 }
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $16 = 0, $17 = 0, $20 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11546
 STACKTOP = STACKTOP + 16 | 0; //@line 11547
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11547
 $3 = sp; //@line 11548
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 11551
 $4 = $3 + 12 | 0; //@line 11552
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11553
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 11555
 HEAP32[$3 + 8 >> 2] = $1; //@line 11557
 HEAP32[$4 >> 2] = 848; //@line 11558
 $5 = _equeue_alloc($0, 16) | 0; //@line 11559
 do {
  if (!$5) {
   $$0$i = 0; //@line 11563
  } else {
   $7 = HEAP32[$4 >> 2] | 0; //@line 11565
   do {
    if (!$7) {
     $16 = 0; //@line 11569
    } else {
     $10 = HEAP32[$7 + 4 >> 2] | 0; //@line 11572
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11573
     FUNCTION_TABLE_vii[$10 & 31]($5, $3); //@line 11574
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 369; //@line 11577
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 11579
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 11581
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 11583
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 11585
      sp = STACKTOP; //@line 11586
      STACKTOP = sp; //@line 11587
      return 0; //@line 11587
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11589
      $16 = HEAP32[$4 >> 2] | 0; //@line 11591
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $16; //@line 11597
   _equeue_event_dtor($5, 370); //@line 11598
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11599
   $17 = _equeue_post($0, 371, $5) | 0; //@line 11600
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 372; //@line 11603
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 11605
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 11607
    sp = STACKTOP; //@line 11608
    STACKTOP = sp; //@line 11609
    return 0; //@line 11609
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 11611
    $$0$i = $17; //@line 11612
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$4 >> 2] | 0; //@line 11617
 if (!$20) {
  STACKTOP = sp; //@line 11620
  return $$0$i | 0; //@line 11620
 }
 $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 11623
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11624
 FUNCTION_TABLE_vi[$23 & 1023]($3); //@line 11625
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 373; //@line 11628
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 11630
  sp = STACKTOP; //@line 11631
  STACKTOP = sp; //@line 11632
  return 0; //@line 11632
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11634
 STACKTOP = sp; //@line 11635
 return $$0$i | 0; //@line 11635
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_300($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3367
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3369
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3371
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3373
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3374
 if (!$11) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 3377
  $20 = $8 + 12 | 0; //@line 3379
  HEAP32[$8 >> 2] = 535; //@line 3380
  HEAP32[$8 + 4 >> 2] = 0; //@line 3382
  HEAP32[$8 + 8 >> 2] = $6; //@line 3384
  HEAP32[$20 >> 2] = 848; //@line 3385
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 3386
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($18, $6 + 1076 | 0, $8); //@line 3387
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 3390
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 3391
   HEAP32[$21 >> 2] = $20; //@line 3392
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 3393
   HEAP32[$22 >> 2] = $4; //@line 3394
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 3395
   HEAP32[$23 >> 2] = $6; //@line 3396
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 3397
   HEAP32[$24 >> 2] = $8; //@line 3398
   sp = STACKTOP; //@line 3399
   return;
  }
  ___async_unwind = 0; //@line 3402
  HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 3403
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 3404
  HEAP32[$21 >> 2] = $20; //@line 3405
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 3406
  HEAP32[$22 >> 2] = $4; //@line 3407
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 3408
  HEAP32[$23 >> 2] = $6; //@line 3409
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 3410
  HEAP32[$24 >> 2] = $8; //@line 3411
  sp = STACKTOP; //@line 3412
  return;
 } else {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 3416
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 3417
  FUNCTION_TABLE_vi[$14 & 1023]($10); //@line 3418
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 534; //@line 3421
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 3422
   HEAP32[$15 >> 2] = $4; //@line 3423
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 3424
   HEAP32[$16 >> 2] = $6; //@line 3425
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 3426
   HEAP32[$17 >> 2] = $8; //@line 3427
   sp = STACKTOP; //@line 3428
   return;
  }
  ___async_unwind = 0; //@line 3431
  HEAP32[$ReallocAsyncCtx4 >> 2] = 534; //@line 3432
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 3433
  HEAP32[$15 >> 2] = $4; //@line 3434
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 3435
  HEAP32[$16 >> 2] = $6; //@line 3436
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 3437
  HEAP32[$17 >> 2] = $8; //@line 3438
  sp = STACKTOP; //@line 3439
  return;
 }
}
function __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN14LoRaMacCommandC2Ev($0 + 4 | 0); //@line 10745
 __ZN11LoRaMacMlmeC2Ev($0 + 264 | 0); //@line 10747
 __ZN10LoRaMacMibC2Ev($0 + 348 | 0); //@line 10749
 __ZN18LoRaMacChannelPlanC2Ev($0 + 352 | 0); //@line 10751
 HEAP32[$0 + 356 >> 2] = $1; //@line 10753
 $7 = $0 + 996 | 0; //@line 10754
 HEAP32[$7 >> 2] = 0; //@line 10755
 HEAP32[$7 + 4 >> 2] = 0; //@line 10755
 HEAP32[$7 + 8 >> 2] = 0; //@line 10755
 HEAP32[$7 + 12 >> 2] = 0; //@line 10755
 $8 = $0 + 1016 | 0; //@line 10756
 HEAP32[$8 >> 2] = 0; //@line 10757
 HEAP32[$8 + 4 >> 2] = 0; //@line 10757
 HEAP32[$8 + 8 >> 2] = 0; //@line 10757
 HEAP32[$8 + 12 >> 2] = 0; //@line 10757
 $9 = $0 + 1036 | 0; //@line 10758
 HEAP32[$9 >> 2] = 0; //@line 10759
 HEAP32[$9 + 4 >> 2] = 0; //@line 10759
 HEAP32[$9 + 8 >> 2] = 0; //@line 10759
 HEAP32[$9 + 12 >> 2] = 0; //@line 10759
 $10 = $0 + 1056 | 0; //@line 10760
 HEAP32[$10 >> 2] = 0; //@line 10761
 HEAP32[$10 + 4 >> 2] = 0; //@line 10761
 HEAP32[$10 + 8 >> 2] = 0; //@line 10761
 HEAP32[$10 + 12 >> 2] = 0; //@line 10761
 $11 = $0 + 1076 | 0; //@line 10762
 HEAP32[$11 >> 2] = 0; //@line 10763
 HEAP32[$11 + 4 >> 2] = 0; //@line 10763
 HEAP32[$11 + 8 >> 2] = 0; //@line 10763
 HEAP32[$11 + 12 >> 2] = 0; //@line 10763
 dest = $0 + 1212 | 0; //@line 10765
 stop = dest + 112 | 0; //@line 10765
 do {
  HEAP32[dest >> 2] = 0; //@line 10765
  dest = dest + 4 | 0; //@line 10765
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 >> 2] = 0; //@line 10766
 $14 = $0 + 946 | 0; //@line 10768
 HEAP16[$0 + 636 >> 1] = 0; //@line 10770
 HEAP8[$0 + 893 >> 0] = 0; //@line 10772
 HEAP8[$0 + 370 >> 0] = 0; //@line 10774
 $18 = $0 + 371 | 0; //@line 10775
 dest = $0 + 900 | 0; //@line 10776
 stop = dest + 44 | 0; //@line 10776
 do {
  HEAP32[dest >> 2] = 0; //@line 10776
  dest = dest + 4 | 0; //@line 10776
 } while ((dest | 0) < (stop | 0));
 dest = $14; //@line 10777
 stop = dest + 18 | 0; //@line 10777
 do {
  HEAP16[dest >> 1] = 0; //@line 10777
  dest = dest + 2 | 0; //@line 10777
 } while ((dest | 0) < (stop | 0));
 HEAP8[$18 >> 0] = 1; //@line 10778
 HEAP8[$0 + 372 >> 0] = 0; //@line 10780
 HEAP32[$0 + 964 >> 2] = 0; //@line 10782
 HEAP8[$0 + 373 >> 0] = 0; //@line 10784
 HEAP8[$0 + 374 >> 0] = 0; //@line 10786
 HEAP8[$0 + 380 >> 0] = 0; //@line 10788
 HEAP32[$0 + 988 >> 2] = 0; //@line 10790
 HEAP32[$0 + 968 >> 2] = 0; //@line 10792
 HEAP8[$0 + 894 >> 0] = 1; //@line 10794
 HEAP8[$0 + 895 >> 0] = 1; //@line 10796
 HEAP8[$0 + 377 >> 0] = 0; //@line 10798
 HEAP32[$0 + 992 >> 2] = 0; //@line 10800
 HEAP32[$0 + 1208 >> 2] = 0; //@line 10802
 HEAP8[$0 + 1156 >> 0] = 0; //@line 10804
 HEAP8[$0 + 1152 >> 0] = 0; //@line 10806
 HEAP32[$0 + 1324 >> 2] = 0; //@line 10808
 HEAP32[$0 + 1328 >> 2] = 0; //@line 10810
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_427($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21488
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21490
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21492
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21494
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21496
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21498
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21500
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21502
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21504
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21506
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21508
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21510
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21512
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21514
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21516
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21518
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21520
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21522
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 21524
 $36 = HEAP32[$4 >> 2] | 0; //@line 21525
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 28 >> 2] | 0; //@line 21528
 $40 = $6 + 1104 | 0; //@line 21529
 $41 = HEAP8[$40 >> 0] | 0; //@line 21530
 $42 = $6 + 1100 | 0; //@line 21531
 $43 = HEAP32[$42 >> 2] | 0; //@line 21532
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(80) | 0; //@line 21534
 FUNCTION_TABLE_viiiii[$39 & 7]($36, $AsyncRetVal, $41, $43, $6 + 1160 | 0); //@line 21535
 if (!___async) {
  ___async_unwind = 0; //@line 21538
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 21540
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 21542
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 21544
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $4; //@line 21546
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 21548
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 21550
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 21552
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 21554
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 21556
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 21558
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $20; //@line 21560
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $22; //@line 21562
 HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $24; //@line 21564
 HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $26; //@line 21566
 HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $28; //@line 21568
 HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $30; //@line 21570
 HEAP32[$ReallocAsyncCtx4 + 64 >> 2] = $32; //@line 21572
 HEAP32[$ReallocAsyncCtx4 + 68 >> 2] = $40; //@line 21574
 HEAP32[$ReallocAsyncCtx4 + 72 >> 2] = $42; //@line 21576
 HEAP32[$ReallocAsyncCtx4 + 76 >> 2] = $34; //@line 21578
 sp = STACKTOP; //@line 21579
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $13 = 0, $17 = 0.0, $52 = 0.0, $AsyncCtx = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1503
 STACKTOP = STACKTOP + 32 | 0; //@line 1504
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1504
 $vararg_buffer5 = sp + 24 | 0; //@line 1505
 $vararg_buffer3 = sp + 16 | 0; //@line 1506
 _printf(10904, sp) | 0; //@line 1509
 _printf(11101, sp + 8 | 0) | 0; //@line 1510
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1511
 _putchar(10) | 0; //@line 1512
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 89; //@line 1515
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 1517
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 1519
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 1521
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 1523
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 1525
  HEAP32[$AsyncCtx9 + 24 >> 2] = $0; //@line 1527
  HEAP8[$AsyncCtx9 + 28 >> 0] = $2; //@line 1529
  sp = STACKTOP; //@line 1530
  STACKTOP = sp; //@line 1531
  return 0; //@line 1531
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1533
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 1536
   break;
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 1544
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 1548
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 1552
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 1556
    }
   }
   $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1560
   $17 = 1.0 / ($$031 / +(1 << $13 | 0)); //@line 1564
   $52 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($13 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($13 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 1600
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $17 + $17 * (($52 > 0.0 ? $52 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 1610
   break;
  }
 default:
  {
   $$0 = 0; //@line 1614
  }
 }
 _printf(10904, $vararg_buffer3) | 0; //@line 1617
 HEAP32[$vararg_buffer5 >> 2] = $$0; //@line 1618
 _printf(11113, $vararg_buffer5) | 0; //@line 1619
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1620
 _putchar(10) | 0; //@line 1621
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 90; //@line 1624
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 1626
  sp = STACKTOP; //@line 1627
  STACKTOP = sp; //@line 1628
  return 0; //@line 1628
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1630
  STACKTOP = sp; //@line 1631
  return $$0 | 0; //@line 1631
 }
 return 0; //@line 1633
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_229($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $27 = 0, $28 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 37356
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37358
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37360
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37362
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37364
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37366
 $13 = $2 + 1184 | 0; //@line 37369
 HEAP8[$13 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 37370
 HEAP32[$2 + 1188 >> 2] = HEAP32[$2 + 1132 >> 2]; //@line 37374
 HEAP8[$2 + 1200 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 37378
 HEAP8[$2 + 1201 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 37382
 HEAP32[$2 + 1204 >> 2] = 1; //@line 37384
 $27 = $2 + 1202 | 0; //@line 37388
 HEAP8[$27 >> 0] = (HEAP32[$2 + 360 >> 2] | 0) == 2 & 1; //@line 37390
 $28 = HEAP32[$2 >> 2] | 0; //@line 37391
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 24 >> 2] | 0; //@line 37394
 $34 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 37397
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 37398
 $35 = FUNCTION_TABLE_iiii[$31 & 15]($28, $13, $34) | 0; //@line 37399
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 380; //@line 37402
  $36 = $ReallocAsyncCtx + 4 | 0; //@line 37403
  HEAP32[$36 >> 2] = $27; //@line 37404
  $37 = $ReallocAsyncCtx + 8 | 0; //@line 37405
  HEAP32[$37 >> 2] = $2; //@line 37406
  $38 = $ReallocAsyncCtx + 12 | 0; //@line 37407
  HEAP32[$38 >> 2] = $4; //@line 37408
  $39 = $ReallocAsyncCtx + 16 | 0; //@line 37409
  HEAP32[$39 >> 2] = $6; //@line 37410
  $40 = $ReallocAsyncCtx + 20 | 0; //@line 37411
  HEAP32[$40 >> 2] = $8; //@line 37412
  $41 = $ReallocAsyncCtx + 24 | 0; //@line 37413
  HEAP32[$41 >> 2] = $10; //@line 37414
  $42 = $ReallocAsyncCtx + 28 | 0; //@line 37415
  HEAP32[$42 >> 2] = $2; //@line 37416
  sp = STACKTOP; //@line 37417
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 37422
 ___async_unwind = 0; //@line 37423
 HEAP32[$ReallocAsyncCtx >> 2] = 380; //@line 37424
 $36 = $ReallocAsyncCtx + 4 | 0; //@line 37425
 HEAP32[$36 >> 2] = $27; //@line 37426
 $37 = $ReallocAsyncCtx + 8 | 0; //@line 37427
 HEAP32[$37 >> 2] = $2; //@line 37428
 $38 = $ReallocAsyncCtx + 12 | 0; //@line 37429
 HEAP32[$38 >> 2] = $4; //@line 37430
 $39 = $ReallocAsyncCtx + 16 | 0; //@line 37431
 HEAP32[$39 >> 2] = $6; //@line 37432
 $40 = $ReallocAsyncCtx + 20 | 0; //@line 37433
 HEAP32[$40 >> 2] = $8; //@line 37434
 $41 = $ReallocAsyncCtx + 24 | 0; //@line 37435
 HEAP32[$41 >> 2] = $10; //@line 37436
 $42 = $ReallocAsyncCtx + 28 | 0; //@line 37437
 HEAP32[$42 >> 2] = $2; //@line 37438
 sp = STACKTOP; //@line 37439
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8120
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8122
 $4 = HEAP32[$2 + 88 >> 2] | 0; //@line 8124
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 8129
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 8130
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 76 | 0); //@line 8131
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 351; //@line 8134
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 8135
   HEAP32[$9 >> 2] = $2; //@line 8136
   sp = STACKTOP; //@line 8137
   return;
  }
  ___async_unwind = 0; //@line 8140
  HEAP32[$ReallocAsyncCtx2 >> 2] = 351; //@line 8141
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 8142
  HEAP32[$9 >> 2] = $2; //@line 8143
  sp = STACKTOP; //@line 8144
  return;
 }
 $11 = HEAP32[$2 + 68 >> 2] | 0; //@line 8148
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 8153
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 8154
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 56 | 0); //@line 8155
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 352; //@line 8158
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 8159
   HEAP32[$16 >> 2] = $2; //@line 8160
   sp = STACKTOP; //@line 8161
   return;
  }
  ___async_unwind = 0; //@line 8164
  HEAP32[$ReallocAsyncCtx3 >> 2] = 352; //@line 8165
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 8166
  HEAP32[$16 >> 2] = $2; //@line 8167
  sp = STACKTOP; //@line 8168
  return;
 }
 $18 = HEAP32[$2 + 48 >> 2] | 0; //@line 8172
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 8177
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 8178
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 36 | 0); //@line 8179
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 8182
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 8183
   HEAP32[$23 >> 2] = $2; //@line 8184
   sp = STACKTOP; //@line 8185
   return;
  }
  ___async_unwind = 0; //@line 8188
  HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 8189
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 8190
  HEAP32[$23 >> 2] = $2; //@line 8191
  sp = STACKTOP; //@line 8192
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 8196
 if (!$25) {
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 8203
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 8204
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 8205
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 8208
  sp = STACKTOP; //@line 8209
  return;
 }
 ___async_unwind = 0; //@line 8212
 HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 8213
 sp = STACKTOP; //@line 8214
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_356($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7085
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7087
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 7089
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 7094
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 7095
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 7096
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 7099
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 7100
   HEAP32[$9 >> 2] = $2; //@line 7101
   sp = STACKTOP; //@line 7102
   return;
  }
  ___async_unwind = 0; //@line 7105
  HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 7106
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 7107
  HEAP32[$9 >> 2] = $2; //@line 7108
  sp = STACKTOP; //@line 7109
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 7113
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 7118
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 7119
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 7120
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 7123
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 7124
   HEAP32[$16 >> 2] = $2; //@line 7125
   sp = STACKTOP; //@line 7126
   return;
  }
  ___async_unwind = 0; //@line 7129
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 7130
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 7131
  HEAP32[$16 >> 2] = $2; //@line 7132
  sp = STACKTOP; //@line 7133
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 7137
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 7142
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 7143
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 7144
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 7147
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 7148
   HEAP32[$23 >> 2] = $2; //@line 7149
   sp = STACKTOP; //@line 7150
   return;
  }
  ___async_unwind = 0; //@line 7153
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 7154
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 7155
  HEAP32[$23 >> 2] = $2; //@line 7156
  sp = STACKTOP; //@line 7157
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 7161
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 7167
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 7168
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 7169
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7172
  sp = STACKTOP; //@line 7173
  return;
 }
 ___async_unwind = 0; //@line 7176
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7177
 sp = STACKTOP; //@line 7178
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_158($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32000
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32002
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32004
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32006
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32008
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32010
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32012
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32014
 $16 = HEAP16[$0 + 32 >> 1] | 0; //@line 32016
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32018
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32020
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32022
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32024
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 32026
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 32028
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 32030
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 32032
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 32034
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 32036
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 32038
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 32040
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 32042
 $45 = HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0; //@line 32045
 $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 32046
 FUNCTION_TABLE_vii[$45 & 31]($4, $42); //@line 32047
 if (!___async) {
  ___async_unwind = 0; //@line 32050
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 93; //@line 32052
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 32054
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 32056
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 32058
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 32060
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 32062
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 32064
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 32066
 HEAP16[$ReallocAsyncCtx + 32 >> 1] = $16; //@line 32068
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 32070
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 32072
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 32074
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 32076
 HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 32078
 HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 32080
 HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 32082
 HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 32084
 HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 32086
 HEAP32[$ReallocAsyncCtx + 72 >> 2] = $36; //@line 32088
 HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 32090
 HEAP32[$ReallocAsyncCtx + 80 >> 2] = $40; //@line 32092
 sp = STACKTOP; //@line 32093
 return;
}
function __ZN14lorawan_timersD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11013
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 11015
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 11021
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11022
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 11023
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 350; //@line 11026
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11028
    sp = STACKTOP; //@line 11029
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11032
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 88 >> 2] | 0; //@line 11038
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 11044
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11045
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 76 | 0); //@line 11046
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 351; //@line 11049
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11051
    sp = STACKTOP; //@line 11052
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11055
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 68 >> 2] | 0; //@line 11061
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 11067
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11068
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 56 | 0); //@line 11069
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 352; //@line 11072
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11074
    sp = STACKTOP; //@line 11075
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11078
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 11084
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 11090
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11091
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 36 | 0); //@line 11092
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 353; //@line 11095
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11097
    sp = STACKTOP; //@line 11098
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11101
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 28 >> 2] | 0; //@line 11107
 if (!$30) {
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 11114
 $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11115
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 16 | 0); //@line 11116
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 354; //@line 11119
  sp = STACKTOP; //@line 11120
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11123
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25479
 $6 = HEAP32[$0 + 112 >> 2] | 0; //@line 25483
 $7 = $1 + 2 | 0; //@line 25484
 $8 = HEAP8[$7 >> 0] | 0; //@line 25485
 $10 = HEAPU8[$1 >> 0] | 0; //@line 25487
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 25492
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 25495
  $27 = $15; //@line 25496
 } else {
  $27 = $8; //@line 25498
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 25504
 } else {
  $$0 = $2; //@line 25506
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 25509
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 25513
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 25523
  } else {
   $$026 = $27; //@line 25525
  }
 } else {
  $$026 = $27; //@line 25528
 }
 $34 = $0 + 4 | 0; //@line 25530
 $35 = HEAP32[$34 >> 2] | 0; //@line 25531
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 25534
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 25535
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 25536
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 636; //@line 25539
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 25541
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 25543
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 25545
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 25547
  sp = STACKTOP; //@line 25548
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25551
 $43 = HEAP32[$34 >> 2] | 0; //@line 25552
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 25555
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 25557
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25558
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 25559
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 637; //@line 25562
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 25564
  sp = STACKTOP; //@line 25565
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25568
 $50 = HEAP32[$34 >> 2] | 0; //@line 25569
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 25572
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25573
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 25574
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 638; //@line 25577
  sp = STACKTOP; //@line 25578
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25581
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_335($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 5643
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5647
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5649
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5651
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5653
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5655
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5656
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 5660
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 5661
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 5662
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 269; //@line 5665
   $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 5666
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 5667
   $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 5668
   HEAP32[$17 >> 2] = $6; //@line 5669
   $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 5670
   HEAP32[$18 >> 2] = $8; //@line 5671
   $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 5672
   HEAP32[$19 >> 2] = $10; //@line 5673
   sp = STACKTOP; //@line 5674
   return;
  }
  ___async_unwind = 0; //@line 5677
  HEAP32[$ReallocAsyncCtx10 >> 2] = 269; //@line 5678
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 5679
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 5680
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 5681
  HEAP32[$17 >> 2] = $6; //@line 5682
  $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 5683
  HEAP32[$18 >> 2] = $8; //@line 5684
  $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 5685
  HEAP32[$19 >> 2] = $10; //@line 5686
  sp = STACKTOP; //@line 5687
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$8 >> 2] = 6; //@line 5692
  HEAP32[___async_retval >> 2] = $6; //@line 5694
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(16) | 0; //@line 5697
 _mbed_assert_internal(12851, 11935, 1251); //@line 5698
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 270; //@line 5701
  $21 = $ReallocAsyncCtx29 + 4 | 0; //@line 5702
  HEAP32[$21 >> 2] = $6; //@line 5703
  $22 = $ReallocAsyncCtx29 + 8 | 0; //@line 5704
  HEAP32[$22 >> 2] = $8; //@line 5705
  $23 = $ReallocAsyncCtx29 + 12 | 0; //@line 5706
  HEAP32[$23 >> 2] = $10; //@line 5707
  sp = STACKTOP; //@line 5708
  return;
 }
 ___async_unwind = 0; //@line 5711
 HEAP32[$ReallocAsyncCtx29 >> 2] = 270; //@line 5712
 $21 = $ReallocAsyncCtx29 + 4 | 0; //@line 5713
 HEAP32[$21 >> 2] = $6; //@line 5714
 $22 = $ReallocAsyncCtx29 + 8 | 0; //@line 5715
 HEAP32[$22 >> 2] = $8; //@line 5716
 $23 = $ReallocAsyncCtx29 + 12 | 0; //@line 5717
 HEAP32[$23 >> 2] = $10; //@line 5718
 sp = STACKTOP; //@line 5719
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_457($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24362
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24368
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24370
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24372
 $9 = $6 + 32 | 0; //@line 24373
 $10 = $6 + 44 | 0; //@line 24374
 $11 = HEAP32[$10 >> 2] | 0; //@line 24375
 if (!$11) {
  return;
 }
 $13 = $8 + 1912 | 0; //@line 24380
 if (($13 | 0) == ($9 | 0)) {
  return;
 }
 $15 = $8 + 1924 | 0; //@line 24385
 $16 = HEAP32[$15 >> 2] | 0; //@line 24386
 if (!$16) {
  $25 = HEAP32[$11 + 4 >> 2] | 0; //@line 24390
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 24391
  FUNCTION_TABLE_vii[$25 & 31]($13, $9); //@line 24392
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24395
   $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 24396
   HEAP32[$26 >> 2] = $10; //@line 24397
   $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 24398
   HEAP32[$27 >> 2] = $15; //@line 24399
   sp = STACKTOP; //@line 24400
   return;
  }
  ___async_unwind = 0; //@line 24403
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24404
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 24405
  HEAP32[$26 >> 2] = $10; //@line 24406
  $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 24407
  HEAP32[$27 >> 2] = $15; //@line 24408
  sp = STACKTOP; //@line 24409
  return;
 } else {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 24413
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 24414
  FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 24415
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 24418
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 24419
   HEAP32[$20 >> 2] = $10; //@line 24420
   $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 24421
   HEAP32[$21 >> 2] = $15; //@line 24422
   $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 24423
   HEAP32[$22 >> 2] = $13; //@line 24424
   $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 24425
   HEAP32[$23 >> 2] = $9; //@line 24426
   sp = STACKTOP; //@line 24427
   return;
  }
  ___async_unwind = 0; //@line 24430
  HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 24431
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 24432
  HEAP32[$20 >> 2] = $10; //@line 24433
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 24434
  HEAP32[$21 >> 2] = $15; //@line 24435
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 24436
  HEAP32[$22 >> 2] = $13; //@line 24437
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 24438
  HEAP32[$23 >> 2] = $9; //@line 24439
  sp = STACKTOP; //@line 24440
  return;
 }
}
function _mbedtls_cipher_update__async_cb_269($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2006
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2008
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2010
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2012
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2014
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2016
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2018
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2020
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2022
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2024
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2026
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2028
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 2031
  $52 = ___async_retval; //@line 2032
  HEAP32[$52 >> 2] = $$1; //@line 2033
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 2038
 HEAP32[$8 >> 2] = 0; //@line 2040
 $26 = $10 + $12 | 0; //@line 2041
 $27 = $14 - $12 | 0; //@line 2042
 if (!$27) {
  $$1 = 0; //@line 2045
  $52 = ___async_retval; //@line 2046
  HEAP32[$52 >> 2] = $$1; //@line 2047
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 2050
 if (!$29) {
  $$0 = (HEAP32[$16 >> 2] | 0) == 0 ? $4 : 0; //@line 2056
 } else {
  $$0 = $29; //@line 2058
 }
 $34 = $27 - $$0 | 0; //@line 2061
 _memcpy($18 + 20 | 0, $26 + $34 | 0, $$0 | 0) | 0; //@line 2063
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 2066
 if (!$34) {
  $$1 = 0; //@line 2069
  $52 = ___async_retval; //@line 2070
  HEAP32[$52 >> 2] = $$1; //@line 2071
  return;
 }
 $43 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2078
 $45 = HEAP32[$18 + 60 >> 2] | 0; //@line 2080
 $46 = HEAP32[$16 >> 2] | 0; //@line 2081
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 2083
 $48 = FUNCTION_TABLE_iiiiiii[$43 & 3]($45, $46, $34, $18 + 40 | 0, $26, $6 + $4 | 0) | 0; //@line 2084
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 679; //@line 2087
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 2088
  HEAP32[$49 >> 2] = $2; //@line 2089
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 2090
  HEAP32[$50 >> 2] = $34; //@line 2091
  sp = STACKTOP; //@line 2092
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 2096
 ___async_unwind = 0; //@line 2097
 HEAP32[$ReallocAsyncCtx3 >> 2] = 679; //@line 2098
 $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 2099
 HEAP32[$49 >> 2] = $2; //@line 2100
 $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 2101
 HEAP32[$50 >> 2] = $34; //@line 2102
 sp = STACKTOP; //@line 2103
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_213($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 36303
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36307
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36309
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 36311
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36313
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 36315
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36317
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36319
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 36321
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 36323
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 36326
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 36328
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 36332
   $27 = $6 + 24 | 0; //@line 36333
   $28 = $4 + 8 | 0; //@line 36334
   $29 = $6 + 54 | 0; //@line 36335
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 36365
    HEAP8[$14 >> 0] = 0; //@line 36366
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 36367
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 36368
    if (!___async) {
     ___async_unwind = 0; //@line 36371
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 800; //@line 36373
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 36375
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 36377
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 36379
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 36381
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 36383
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 36385
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 36387
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 36389
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 36391
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 36393
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 36395
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 36397
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 36399
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 36402
    sp = STACKTOP; //@line 36403
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 36408
 HEAP8[$14 >> 0] = $12; //@line 36409
 return;
}
function __Z28compute_skeys_for_join_framePKhS0_tPhS1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$$sroa_idx12 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 22602
 STACKTOP = STACKTOP + 16 | 0; //@line 22603
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22603
 $5 = sp; //@line 22604
 _mbedtls_aes_init(22600); //@line 22605
 $6 = _mbedtls_aes_setkey_enc(22600, $0, 128) | 0; //@line 22606
 if ($6 | 0) {
  $$0 = $6; //@line 22609
  _mbedtls_aes_free(22600); //@line 22610
  STACKTOP = sp; //@line 22611
  return $$0 | 0; //@line 22611
 }
 $8 = $5 + 9 | 0; //@line 22613
 HEAP8[$8 >> 0] = 0; //@line 22614
 HEAP8[$8 + 1 >> 0] = 0; //@line 22614
 HEAP8[$8 + 2 >> 0] = 0; //@line 22614
 HEAP8[$8 + 3 >> 0] = 0; //@line 22614
 HEAP8[$8 + 4 >> 0] = 0; //@line 22614
 HEAP8[$8 + 5 >> 0] = 0; //@line 22614
 HEAP8[$8 + 6 >> 0] = 0; //@line 22614
 HEAP8[$5 >> 0] = 1; //@line 22615
 $9 = $5 + 1 | 0; //@line 22616
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 22617
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 22617
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 22617
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 22617
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22617
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 22617
 $$0$$sroa_idx12 = $5 + 7 | 0; //@line 22618
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 22619
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 22619
 $10 = _mbedtls_aes_crypt_ecb(22600, 1, $5, $3) | 0; //@line 22620
 if ($10 | 0) {
  $$0 = $10; //@line 22623
  _mbedtls_aes_free(22600); //@line 22624
  STACKTOP = sp; //@line 22625
  return $$0 | 0; //@line 22625
 }
 $12 = $5 + 9 | 0; //@line 22627
 HEAP8[$12 >> 0] = 0; //@line 22628
 HEAP8[$12 + 1 >> 0] = 0; //@line 22628
 HEAP8[$12 + 2 >> 0] = 0; //@line 22628
 HEAP8[$12 + 3 >> 0] = 0; //@line 22628
 HEAP8[$12 + 4 >> 0] = 0; //@line 22628
 HEAP8[$12 + 5 >> 0] = 0; //@line 22628
 HEAP8[$12 + 6 >> 0] = 0; //@line 22628
 HEAP8[$5 >> 0] = 2; //@line 22629
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 22630
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 22630
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 22630
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 22630
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22630
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 22630
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 22631
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 22631
 $$0 = _mbedtls_aes_crypt_ecb(22600, 1, $5, $4) | 0; //@line 22633
 _mbedtls_aes_free(22600); //@line 22634
 STACKTOP = sp; //@line 22635
 return $$0 | 0; //@line 22635
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 36187
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36191
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36193
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 36195
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36197
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 36199
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36201
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36203
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 36205
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 36207
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 36209
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 36211
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 36213
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 36216
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 36217
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 36250
    HEAP8[$14 >> 0] = 0; //@line 36251
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 36252
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 36253
    if (!___async) {
     ___async_unwind = 0; //@line 36256
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 800; //@line 36258
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 36260
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 36262
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 36264
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 36266
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 36268
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 36270
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 36272
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 36274
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 36276
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 36278
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 36280
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 36282
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 36284
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 36287
    sp = STACKTOP; //@line 36288
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 36293
 HEAP8[$14 >> 0] = $12; //@line 36294
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 36908
 }
 ret = dest | 0; //@line 36911
 dest_end = dest + num | 0; //@line 36912
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 36916
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 36917
   dest = dest + 1 | 0; //@line 36918
   src = src + 1 | 0; //@line 36919
   num = num - 1 | 0; //@line 36920
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 36922
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 36923
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 36925
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 36926
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 36927
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 36928
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 36929
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 36930
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 36931
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 36932
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 36933
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 36934
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 36935
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 36936
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 36937
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 36938
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 36939
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 36940
   dest = dest + 64 | 0; //@line 36941
   src = src + 64 | 0; //@line 36942
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 36945
   dest = dest + 4 | 0; //@line 36946
   src = src + 4 | 0; //@line 36947
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 36951
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 36953
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 36954
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 36955
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 36956
   dest = dest + 4 | 0; //@line 36957
   src = src + 4 | 0; //@line 36958
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 36963
  dest = dest + 1 | 0; //@line 36964
  src = src + 1 | 0; //@line 36965
 }
 return ret | 0; //@line 36967
}
function __ZN7LoRaMac11schedule_txEv__async_cb_428($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21592
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21594
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21596
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21598
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21600
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21602
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21604
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21606
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21608
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21610
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21612
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21614
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21616
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21618
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21620
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21626
 $39 = HEAP32[$6 >> 2] | 0; //@line 21627
 $42 = HEAP32[(HEAP32[$39 >> 2] | 0) + 28 >> 2] | 0; //@line 21630
 $44 = HEAP8[$4 + 1136 >> 0] | 0; //@line 21632
 $45 = HEAP8[HEAP32[$0 + 68 >> 2] >> 0] | 0; //@line 21633
 $46 = HEAP32[HEAP32[$0 + 72 >> 2] >> 2] | 0; //@line 21634
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(72) | 0; //@line 21636
 FUNCTION_TABLE_viiiii[$42 & 7]($39, $44, $45, $46, $4 + 1184 | 0); //@line 21637
 if (!___async) {
  ___async_unwind = 0; //@line 21640
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 21642
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 21644
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 21646
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $22; //@line 21648
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $24; //@line 21650
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $26; //@line 21652
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $28; //@line 21654
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $30; //@line 21656
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $6; //@line 21658
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 21660
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 21662
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $12; //@line 21664
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $32; //@line 21666
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $8; //@line 21668
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $10; //@line 21670
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $14; //@line 21672
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $16; //@line 21674
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $38; //@line 21676
 sp = STACKTOP; //@line 21677
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_164($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32537
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32545
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32549
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32551
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32553
 if ((HEAP32[___async_retval >> 2] | 0) < (HEAP32[$0 + 4 >> 2] | 0)) {
  _printf(10904, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 32558
  _printf(11092, $8) | 0; //@line 32559
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 32560
  _putchar(10) | 0; //@line 32561
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 101; //@line 32564
   $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 32565
   HEAP32[$19 >> 2] = $12; //@line 32566
   $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 32567
   HEAP32[$20 >> 2] = $14; //@line 32568
   $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 32569
   HEAP32[$21 >> 2] = $16; //@line 32570
   sp = STACKTOP; //@line 32571
   return;
  }
  ___async_unwind = 0; //@line 32574
  HEAP32[$ReallocAsyncCtx4 >> 2] = 101; //@line 32575
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 32576
  HEAP32[$19 >> 2] = $12; //@line 32577
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 32578
  HEAP32[$20 >> 2] = $14; //@line 32579
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 32580
  HEAP32[$21 >> 2] = $16; //@line 32581
  sp = STACKTOP; //@line 32582
  return;
 } else {
  $24 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 32587
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 32588
  FUNCTION_TABLE_vi[$24 & 1023]($12); //@line 32589
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 32592
   $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 32593
   HEAP32[$25 >> 2] = $14; //@line 32594
   $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 32595
   HEAP32[$26 >> 2] = $16; //@line 32596
   $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 32597
   $$expand_i1_val = 1; //@line 32598
   HEAP8[$27 >> 0] = $$expand_i1_val; //@line 32599
   sp = STACKTOP; //@line 32600
   return;
  }
  ___async_unwind = 0; //@line 32603
  HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 32604
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 32605
  HEAP32[$25 >> 2] = $14; //@line 32606
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 32607
  HEAP32[$26 >> 2] = $16; //@line 32608
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 32609
  $$expand_i1_val = 1; //@line 32610
  HEAP8[$27 >> 0] = $$expand_i1_val; //@line 32611
  sp = STACKTOP; //@line 32612
  return;
 }
}
function _main__async_cb_150($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31443
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31445
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31447
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31449
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31451
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31453
 if (!(__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(23168, 22968) | 0)) {
  $14 = $2 + 4 | 0; //@line 31458
  HEAP32[$14 >> 2] = 0; //@line 31460
  HEAP32[$14 + 4 >> 2] = 0; //@line 31463
  HEAP32[$2 >> 2] = 7; //@line 31464
  $18 = $2 + 12 | 0; //@line 31465
  HEAP32[$18 >> 2] = 10120; //@line 31466
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(28) | 0; //@line 31467
  __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(22896, $2); //@line 31468
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 749; //@line 31471
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 31472
   HEAP32[$19 >> 2] = $18; //@line 31473
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 31474
   HEAP32[$20 >> 2] = $4; //@line 31475
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 31476
   HEAP32[$21 >> 2] = $6; //@line 31477
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 31478
   HEAP32[$22 >> 2] = $8; //@line 31479
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 31480
   HEAP32[$23 >> 2] = $10; //@line 31481
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 31482
   HEAP32[$24 >> 2] = $2; //@line 31483
   sp = STACKTOP; //@line 31484
   return;
  }
  ___async_unwind = 0; //@line 31487
  HEAP32[$ReallocAsyncCtx10 >> 2] = 749; //@line 31488
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 31489
  HEAP32[$19 >> 2] = $18; //@line 31490
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 31491
  HEAP32[$20 >> 2] = $4; //@line 31492
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 31493
  HEAP32[$21 >> 2] = $6; //@line 31494
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 31495
  HEAP32[$22 >> 2] = $8; //@line 31496
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 31497
  HEAP32[$23 >> 2] = $10; //@line 31498
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 31499
  HEAP32[$24 >> 2] = $2; //@line 31500
  sp = STACKTOP; //@line 31501
  return;
 } else {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31504
  _puts(15368) | 0; //@line 31505
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 748; //@line 31508
   sp = STACKTOP; //@line 31509
   return;
  }
  ___async_unwind = 0; //@line 31512
  HEAP32[$ReallocAsyncCtx7 >> 2] = 748; //@line 31513
  sp = STACKTOP; //@line 31514
  return;
 }
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_420($0) {
 $0 = $0 | 0;
 var $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20679
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20681
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20683
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20685
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20687
 HEAP8[$4 >> 0] = 0; //@line 20688
 HEAP8[$2 >> 0] = $6; //@line 20689
 $9 = $8 + 1097 | 0; //@line 20690
 HEAP8[$2 + 1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 20693
 HEAP8[$2 + 2 >> 0] = HEAP8[$8 + 1096 >> 0] | 0; //@line 20697
 HEAP32[$2 + 4 >> 2] = HEAP32[$8 + 1144 >> 2]; //@line 20701
 HEAP32[$2 + 8 >> 2] = HEAP32[$8 + 1148 >> 2]; //@line 20705
 $21 = $8 + 636 | 0; //@line 20706
 HEAP16[$2 + 12 >> 1] = HEAP16[$21 >> 1] | 0; //@line 20709
 $24 = HEAP32[$8 >> 2] | 0; //@line 20710
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 32 >> 2] | 0; //@line 20713
 $28 = $8 + 992 | 0; //@line 20714
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 20715
 FUNCTION_TABLE_iiiii[$27 & 3]($24, $2, $4, $28) | 0; //@line 20716
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 20719
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 20720
  HEAP32[$29 >> 2] = $8; //@line 20721
  $30 = $ReallocAsyncCtx + 8 | 0; //@line 20722
  HEAP32[$30 >> 2] = $9; //@line 20723
  $31 = $ReallocAsyncCtx + 12 | 0; //@line 20724
  HEAP32[$31 >> 2] = $4; //@line 20725
  $32 = $ReallocAsyncCtx + 16 | 0; //@line 20726
  HEAP32[$32 >> 2] = $28; //@line 20727
  $33 = $ReallocAsyncCtx + 20 | 0; //@line 20728
  HEAP32[$33 >> 2] = $8; //@line 20729
  $34 = $ReallocAsyncCtx + 24 | 0; //@line 20730
  HEAP32[$34 >> 2] = $21; //@line 20731
  $35 = $ReallocAsyncCtx + 28 | 0; //@line 20732
  HEAP32[$35 >> 2] = $2; //@line 20733
  sp = STACKTOP; //@line 20734
  return;
 }
 ___async_unwind = 0; //@line 20737
 HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 20738
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 20739
 HEAP32[$29 >> 2] = $8; //@line 20740
 $30 = $ReallocAsyncCtx + 8 | 0; //@line 20741
 HEAP32[$30 >> 2] = $9; //@line 20742
 $31 = $ReallocAsyncCtx + 12 | 0; //@line 20743
 HEAP32[$31 >> 2] = $4; //@line 20744
 $32 = $ReallocAsyncCtx + 16 | 0; //@line 20745
 HEAP32[$32 >> 2] = $28; //@line 20746
 $33 = $ReallocAsyncCtx + 20 | 0; //@line 20747
 HEAP32[$33 >> 2] = $8; //@line 20748
 $34 = $ReallocAsyncCtx + 24 | 0; //@line 20749
 HEAP32[$34 >> 2] = $21; //@line 20750
 $35 = $ReallocAsyncCtx + 28 | 0; //@line 20751
 HEAP32[$35 >> 2] = $2; //@line 20752
 sp = STACKTOP; //@line 20753
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_432($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22059
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22061
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22063
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22065
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22067
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22069
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22071
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22073
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22075
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22077
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22079
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22081
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22083
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22085
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22087
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22089
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22091
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22093
 $35 = HEAP32[$14 >> 2] | 0; //@line 22094
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 22097
 $39 = HEAP8[$24 >> 0] | 0; //@line 22098
 $41 = HEAP8[$6 + 1129 >> 0] | 0; //@line 22100
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(72) | 0; //@line 22101
 $42 = FUNCTION_TABLE_iiii[$38 & 15]($35, $39, $41) | 0; //@line 22102
 if (!___async) {
  HEAP8[___async_retval >> 0] = $42; //@line 22106
  ___async_unwind = 0; //@line 22107
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 22109
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 22111
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $14; //@line 22113
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 22115
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 22117
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 22119
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 22121
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $20; //@line 22123
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $22; //@line 22125
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $10; //@line 22127
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $12; //@line 22129
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $24; //@line 22131
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $26; //@line 22133
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $28; //@line 22135
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $30; //@line 22137
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $32; //@line 22139
 HEAP32[$ReallocAsyncCtx3 + 64 >> 2] = $34; //@line 22141
 HEAP32[$ReallocAsyncCtx3 + 68 >> 2] = $4; //@line 22143
 sp = STACKTOP; //@line 22144
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $15 = 0, $18 = 0, $20 = 0, $23 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 26206
 STACKTOP = STACKTOP + 16 | 0; //@line 26207
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26207
 $vararg_buffer1 = sp + 8 | 0; //@line 26208
 _printf(13660, sp) | 0; //@line 26210
 HEAP32[$vararg_buffer1 >> 2] = $2 & 255; //@line 26212
 _printf(13673, $vararg_buffer1) | 0; //@line 26213
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 26214
 _putchar(10) | 0; //@line 26215
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 655; //@line 26218
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 26220
  HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 26222
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 26224
  sp = STACKTOP; //@line 26225
  STACKTOP = sp; //@line 26226
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 26228
 $7 = $0 + 4 | 0; //@line 26229
 $8 = HEAP32[$7 >> 2] | 0; //@line 26230
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 26233
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26234
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 26235
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 656; //@line 26238
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 26240
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 26242
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 26244
  sp = STACKTOP; //@line 26245
  STACKTOP = sp; //@line 26246
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26248
 $15 = HEAP32[$7 >> 2] | 0; //@line 26249
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 24 >> 2] | 0; //@line 26252
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26253
 FUNCTION_TABLE_viii[$18 & 7]($15, $1, $2); //@line 26254
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 657; //@line 26257
  HEAP32[$AsyncCtx4 + 4 >> 2] = $7; //@line 26259
  sp = STACKTOP; //@line 26260
  STACKTOP = sp; //@line 26261
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 26263
 $20 = HEAP32[$7 >> 2] | 0; //@line 26264
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 26267
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26268
 FUNCTION_TABLE_vi[$23 & 1023]($20); //@line 26269
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 658; //@line 26272
  sp = STACKTOP; //@line 26273
  STACKTOP = sp; //@line 26274
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 26276
  STACKTOP = sp; //@line 26277
  return;
 }
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_396($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19514
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19518
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19520
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19522
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19524
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19528
 $22 = HEAP8[$0 + 44 >> 0] | 0; //@line 19532
 $25 = (HEAP32[$0 + 12 >> 2] | 0) + 369 | 0; //@line 19535
 $28 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, HEAP8[$2 >> 0] | 0, (HEAP8[$25 >> 0] | 0) != 0) | 0; //@line 19538
 HEAP8[$8 + 1 >> 0] = $28; //@line 19540
 $30 = $28 & 255; //@line 19541
 $31 = $10 & 255; //@line 19542
 if ($31 >>> 0 > $30 >>> 0) {
  HEAP8[$8 >> 0] = $28; //@line 19545
  __ZN14LoRaMacCommand20clear_command_bufferEv($12); //@line 19546
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($12); //@line 19547
  $$0 = 0; //@line 19548
 } else {
  HEAP8[$8 >> 0] = $30 - $10; //@line 19552
  $$0 = $31; //@line 19553
 }
 $35 = HEAP8[$2 >> 0] | 0; //@line 19555
 _printf(12967, $14) | 0; //@line 19556
 _printf(13293, $18) | 0; //@line 19557
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 19558
 _putchar(10) | 0; //@line 19559
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 545; //@line 19562
  $36 = $ReallocAsyncCtx + 4 | 0; //@line 19563
  HEAP32[$36 >> 2] = $4; //@line 19564
  $37 = $ReallocAsyncCtx + 8 | 0; //@line 19565
  HEAP32[$37 >> 2] = $25; //@line 19566
  $38 = $ReallocAsyncCtx + 12 | 0; //@line 19567
  HEAP8[$38 >> 0] = $35; //@line 19568
  $39 = $ReallocAsyncCtx + 13 | 0; //@line 19569
  HEAP8[$39 >> 0] = $22; //@line 19570
  $40 = $ReallocAsyncCtx + 16 | 0; //@line 19571
  HEAP32[$40 >> 2] = $$0; //@line 19572
  sp = STACKTOP; //@line 19573
  return;
 }
 ___async_unwind = 0; //@line 19576
 HEAP32[$ReallocAsyncCtx >> 2] = 545; //@line 19577
 $36 = $ReallocAsyncCtx + 4 | 0; //@line 19578
 HEAP32[$36 >> 2] = $4; //@line 19579
 $37 = $ReallocAsyncCtx + 8 | 0; //@line 19580
 HEAP32[$37 >> 2] = $25; //@line 19581
 $38 = $ReallocAsyncCtx + 12 | 0; //@line 19582
 HEAP8[$38 >> 0] = $35; //@line 19583
 $39 = $ReallocAsyncCtx + 13 | 0; //@line 19584
 HEAP8[$39 >> 0] = $22; //@line 19585
 $40 = $ReallocAsyncCtx + 16 | 0; //@line 19586
 HEAP32[$40 >> 2] = $$0; //@line 19587
 sp = STACKTOP; //@line 19588
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_163($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32454
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32458
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32460
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32462
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32464
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32466
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32468
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32470
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  _printf(10904, $4) | 0; //@line 32475
  _printf(11092, $8) | 0; //@line 32476
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 32477
  _putchar(10) | 0; //@line 32478
  if (!___async) {
   ___async_unwind = 0; //@line 32481
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 103; //@line 32483
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 32485
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 32487
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 32489
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 32491
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 32493
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 32495
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 32497
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 32499
  sp = STACKTOP; //@line 32500
  return;
 }
 $29 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 32505
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 32506
 FUNCTION_TABLE_vi[$29 & 1023]($12); //@line 32507
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 32510
  $30 = $ReallocAsyncCtx2 + 4 | 0; //@line 32511
  HEAP32[$30 >> 2] = $14; //@line 32512
  $31 = $ReallocAsyncCtx2 + 8 | 0; //@line 32513
  HEAP32[$31 >> 2] = $16; //@line 32514
  $32 = $ReallocAsyncCtx2 + 12 | 0; //@line 32515
  $$expand_i1_val = 1; //@line 32516
  HEAP8[$32 >> 0] = $$expand_i1_val; //@line 32517
  sp = STACKTOP; //@line 32518
  return;
 }
 ___async_unwind = 0; //@line 32521
 HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 32522
 $30 = $ReallocAsyncCtx2 + 4 | 0; //@line 32523
 HEAP32[$30 >> 2] = $14; //@line 32524
 $31 = $ReallocAsyncCtx2 + 8 | 0; //@line 32525
 HEAP32[$31 >> 2] = $16; //@line 32526
 $32 = $ReallocAsyncCtx2 + 12 | 0; //@line 32527
 $$expand_i1_val = 1; //@line 32528
 HEAP8[$32 >> 0] = $$expand_i1_val; //@line 32529
 sp = STACKTOP; //@line 32530
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_412($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20321
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20327
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20331
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20333
 if ((HEAP32[___async_retval >> 2] | 0) != -1018) {
  _printf(11887, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 20338
  _printf(12085, $6) | 0; //@line 20339
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 20340
  _putchar(10) | 0; //@line 20341
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 227; //@line 20344
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 20345
   HEAP32[$15 >> 2] = $12; //@line 20346
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 20347
   HEAP32[$16 >> 2] = $10; //@line 20348
   sp = STACKTOP; //@line 20349
   return;
  }
  ___async_unwind = 0; //@line 20352
  HEAP32[$ReallocAsyncCtx5 >> 2] = 227; //@line 20353
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 20354
  HEAP32[$15 >> 2] = $12; //@line 20355
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 20356
  HEAP32[$16 >> 2] = $10; //@line 20357
  sp = STACKTOP; //@line 20358
  return;
 }
 $17 = $12 + 1892 | 0; //@line 20361
 $18 = HEAP32[$17 >> 2] | 0; //@line 20362
 if (!$18) {
  return;
 }
 $22 = HEAP32[$12 + 2288 >> 2] | 0; //@line 20369
 $24 = HEAP32[$18 + 4 >> 2] | 0; //@line 20371
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 20372
 FUNCTION_TABLE_vii[$24 & 31]($10, $12 + 1880 | 0); //@line 20373
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 20376
  $25 = $ReallocAsyncCtx + 4 | 0; //@line 20377
  HEAP32[$25 >> 2] = $17; //@line 20378
  $26 = $ReallocAsyncCtx + 8 | 0; //@line 20379
  HEAP32[$26 >> 2] = $10; //@line 20380
  $27 = $ReallocAsyncCtx + 12 | 0; //@line 20381
  HEAP32[$27 >> 2] = $22; //@line 20382
  $28 = $ReallocAsyncCtx + 16 | 0; //@line 20383
  HEAP32[$28 >> 2] = $10; //@line 20384
  sp = STACKTOP; //@line 20385
  return;
 }
 ___async_unwind = 0; //@line 20388
 HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 20389
 $25 = $ReallocAsyncCtx + 4 | 0; //@line 20390
 HEAP32[$25 >> 2] = $17; //@line 20391
 $26 = $ReallocAsyncCtx + 8 | 0; //@line 20392
 HEAP32[$26 >> 2] = $10; //@line 20393
 $27 = $ReallocAsyncCtx + 12 | 0; //@line 20394
 HEAP32[$27 >> 2] = $22; //@line 20395
 $28 = $ReallocAsyncCtx + 16 | 0; //@line 20396
 HEAP32[$28 >> 2] = $10; //@line 20397
 sp = STACKTOP; //@line 20398
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_162($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 32364
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32368
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32370
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32372
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32374
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32376
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32378
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32380
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32382
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32384
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32386
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32388
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 32390
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(36) | 0; //@line 32393
  $28 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 32394
  if (!___async) {
   HEAP32[___async_retval >> 2] = $28; //@line 32398
   ___async_unwind = 0; //@line 32399
  }
  HEAP32[$ReallocAsyncCtx13 >> 2] = 100; //@line 32401
  HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $6; //@line 32403
  HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $20; //@line 32405
  HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $22; //@line 32407
  HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $24; //@line 32409
  HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $26; //@line 32411
  HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $16; //@line 32413
  HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $4; //@line 32415
  HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $18; //@line 32417
  sp = STACKTOP; //@line 32418
  return;
 } else {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 32421
  $38 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 32422
  if (!___async) {
   HEAP32[___async_retval >> 2] = $38; //@line 32426
   ___async_unwind = 0; //@line 32427
  }
  HEAP32[$ReallocAsyncCtx12 >> 2] = 102; //@line 32429
  HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $6; //@line 32431
  HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $8; //@line 32433
  HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $10; //@line 32435
  HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $12; //@line 32437
  HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $14; //@line 32439
  HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $16; //@line 32441
  HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $4; //@line 32443
  HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $18; //@line 32445
  sp = STACKTOP; //@line 32446
  return;
 }
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038$lcssa = 0, $$03841 = 0, $$1 = 0, $$140 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $32 = 0, $41 = 0, $48 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!$2) {
  $$140 = -1003; //@line 20065
  return $$140 | 0; //@line 20066
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$140 = -1002; //@line 20071
  return $$140 | 0; //@line 20072
 }
 $7 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20075
 $9 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 20077
 if (!($7 << 24 >> 24)) {
  $$038$lcssa = 0; //@line 20080
 } else {
  $11 = $1 + 4 | 0; //@line 20082
  $12 = $2 + 4 | 0; //@line 20083
  $wide$trip$count = $7 & 255; //@line 20084
  $$03841 = 0; //@line 20085
  $indvars$iv = 0; //@line 20085
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $9, $indvars$iv) | 0) {
    $15 = HEAP32[$11 >> 2] | 0; //@line 20090
    $16 = $$03841 & 255; //@line 20091
    HEAP8[$15 + ($16 << 4) >> 0] = $indvars$iv; //@line 20094
    HEAP32[$15 + ($16 << 4) + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2]; //@line 20099
    HEAP8[$15 + ($16 << 4) + 12 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] | 0; //@line 20104
    $32 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 20110
    HEAP8[$32 >> 0] = HEAP8[$32 >> 0] & -16 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & 15; //@line 20114
    $41 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 20120
    HEAP8[$41 >> 0] = HEAP8[$41 >> 0] & 15 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & -16; //@line 20124
    $48 = HEAP32[$11 >> 2] | 0; //@line 20128
    HEAP8[$48 + ($16 << 4) + 13 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 20130
    HEAP32[$48 + ($16 << 4) + 8 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 20135
    $$1 = $$03841 + 1 << 24 >> 24; //@line 20137
   } else {
    $$1 = $$03841; //@line 20139
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 20141
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$038$lcssa = $$1; //@line 20144
    break;
   } else {
    $$03841 = $$1; //@line 20147
   }
  }
 }
 HEAP8[$1 >> 0] = $$038$lcssa; //@line 20151
 $$140 = 0; //@line 20152
 return $$140 | 0; //@line 20153
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20598
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20600
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20602
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20604
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20606
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20608
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20610
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20612
 $15 = $2 + 264 | 0; //@line 20613
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 4 >> 2] = 1; //@line 20616
 $18 = $2 + 288 | 0; //@line 20617
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 4 >> 2] = 1; //@line 20620
 $21 = HEAP8[$4 >> 0] | 0; //@line 20621
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 8 >> 0] = $21; //@line 20624
 $24 = HEAP8[$6 >> 0] | 0; //@line 20625
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 9 >> 0] = $24; //@line 20628
 $27 = HEAP32[$8 >> 2] | 0; //@line 20629
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 12 >> 2] = $27; //@line 20632
 $30 = HEAP32[$8 >> 2] | 0; //@line 20633
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 8 >> 2] = $30; //@line 20636
 if (!(HEAP8[$2 + 372 >> 0] | 0)) {
  $36 = $2 + 897 | 0; //@line 20641
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 20644
 }
 $39 = HEAP32[$10 >> 2] | 0; //@line 20646
 $42 = HEAP16[$12 >> 1] & 255; //@line 20649
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 20650
 __ZN7LoRaPHY11handle_sendEPhh($39, $2 + 381 | 0, $42); //@line 20651
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 498; //@line 20654
  $43 = $ReallocAsyncCtx3 + 4 | 0; //@line 20655
  HEAP32[$43 >> 2] = $2; //@line 20656
  $44 = $ReallocAsyncCtx3 + 8 | 0; //@line 20657
  HEAP32[$44 >> 2] = $6; //@line 20658
  $45 = $ReallocAsyncCtx3 + 12 | 0; //@line 20659
  HEAP32[$45 >> 2] = $14; //@line 20660
  sp = STACKTOP; //@line 20661
  return;
 }
 ___async_unwind = 0; //@line 20664
 HEAP32[$ReallocAsyncCtx3 >> 2] = 498; //@line 20665
 $43 = $ReallocAsyncCtx3 + 4 | 0; //@line 20666
 HEAP32[$43 >> 2] = $2; //@line 20667
 $44 = $ReallocAsyncCtx3 + 8 | 0; //@line 20668
 HEAP32[$44 >> 2] = $6; //@line 20669
 $45 = $ReallocAsyncCtx3 + 12 | 0; //@line 20670
 HEAP32[$45 >> 2] = $14; //@line 20671
 sp = STACKTOP; //@line 20672
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_220($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $10 = 0, $13 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 37023
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37029
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37033
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 37035
 if (!$AsyncRetVal) {
  $13 = $2 + 288 | 0; //@line 37038
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 11 >> 0] = 0; //@line 37041
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 10 >> 0] = 0; //@line 37044
  $18 = HEAP32[$4 >> 2] | 0; //@line 37045
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 16 >> 2] = $18; //@line 37048
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 37049
  $21 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 37050
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 552; //@line 37053
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 37054
   HEAP32[$22 >> 2] = $6; //@line 37055
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 37056
   HEAP32[$23 >> 2] = $8; //@line 37057
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 37058
   HEAP32[$24 >> 2] = $10; //@line 37059
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 37060
   HEAP32[$25 >> 2] = $2; //@line 37061
   sp = STACKTOP; //@line 37062
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 37066
  ___async_unwind = 0; //@line 37067
  HEAP32[$ReallocAsyncCtx8 >> 2] = 552; //@line 37068
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 37069
  HEAP32[$22 >> 2] = $6; //@line 37070
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 37071
  HEAP32[$23 >> 2] = $8; //@line 37072
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 37073
  HEAP32[$24 >> 2] = $10; //@line 37074
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 37075
  HEAP32[$25 >> 2] = $2; //@line 37076
  sp = STACKTOP; //@line 37077
  return;
 }
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 37082
  $30 = ___async_retval; //@line 37083
  HEAP32[$30 >> 2] = $$1; //@line 37084
  return;
 }
 $$pre = HEAP8[$10 >> 0] | 0; //@line 37087
 HEAP8[$2 + 373 >> 0] = 0; //@line 37089
 HEAP8[$10 >> 0] = $$pre & -9; //@line 37091
 $$1 = $AsyncRetVal; //@line 37092
 $30 = ___async_retval; //@line 37093
 HEAP32[$30 >> 2] = $$1; //@line 37094
 return;
}
function __ZL12send_messagev() {
 var $0 = 0, $11 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6731
 STACKTOP = STACKTOP + 80 | 0; //@line 6732
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6732
 $vararg_buffer8 = sp + 24 | 0; //@line 6733
 $vararg_buffer5 = sp + 16 | 0; //@line 6734
 $vararg_buffer1 = sp + 8 | 0; //@line 6735
 $vararg_buffer = sp; //@line 6736
 $0 = sp + 28 | 0; //@line 6737
 dest = $0; //@line 6738
 stop = dest + 50 | 0; //@line 6738
 do {
  HEAP8[dest >> 0] = 0; //@line 6738
  dest = dest + 1 | 0; //@line 6738
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$vararg_buffer >> 3] = +__ZN5Sht3115readTemperatureEv(23872); //@line 6741
 _sprintf($0, 15772, $vararg_buffer) | 0; //@line 6742
 $3 = _strlen($0) | 0; //@line 6743
 HEAP32[$vararg_buffer1 >> 2] = $3; //@line 6744
 HEAP32[$vararg_buffer1 + 4 >> 2] = $0; //@line 6746
 _printf(15792, $vararg_buffer1) | 0; //@line 6747
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6749
 $5 = __ZN16LoRaWANInterface4sendEhPKhti(23168, 15, $0, $3 & 65535, 1) | 0; //@line 6750
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 758; //@line 6753
  HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer8; //@line 6755
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer8; //@line 6757
  HEAP32[$AsyncCtx13 + 12 >> 2] = $0; //@line 6759
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 6761
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 6763
  sp = STACKTOP; //@line 6764
  STACKTOP = sp; //@line 6765
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6767
 $11 = $5 << 16 >> 16; //@line 6768
 if ($5 << 16 >> 16 >= 0) {
  HEAP32[$vararg_buffer8 >> 2] = $11; //@line 6771
  _printf(15868, $vararg_buffer8) | 0; //@line 6772
  STACKTOP = sp; //@line 6773
  return;
 }
 if ($5 << 16 >> 16 != -1001) {
  HEAP32[$vararg_buffer5 >> 2] = $11; //@line 6777
  _printf(15844, $vararg_buffer5) | 0; //@line 6778
  STACKTOP = sp; //@line 6779
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6781
 _puts(15816) | 0; //@line 6782
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 759; //@line 6785
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6787
  sp = STACKTOP; //@line 6788
  STACKTOP = sp; //@line 6789
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6791
 STACKTOP = sp; //@line 6792
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14711
 STACKTOP = STACKTOP + 64 | 0; //@line 14712
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14712
 $3 = sp; //@line 14713
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14716
 } else {
  if (!$1) {
   $$2 = 0; //@line 14720
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14722
   $6 = ___dynamic_cast($1, 464, 448, 0) | 0; //@line 14723
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 789; //@line 14726
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14728
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14730
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14732
    sp = STACKTOP; //@line 14733
    STACKTOP = sp; //@line 14734
    return 0; //@line 14734
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14736
   if (!$6) {
    $$2 = 0; //@line 14739
   } else {
    dest = $3 + 4 | 0; //@line 14742
    stop = dest + 52 | 0; //@line 14742
    do {
     HEAP32[dest >> 2] = 0; //@line 14742
     dest = dest + 4 | 0; //@line 14742
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14743
    HEAP32[$3 + 8 >> 2] = $0; //@line 14745
    HEAP32[$3 + 12 >> 2] = -1; //@line 14747
    HEAP32[$3 + 48 >> 2] = 1; //@line 14749
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14752
    $18 = HEAP32[$2 >> 2] | 0; //@line 14753
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14754
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14755
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 790; //@line 14758
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14760
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14762
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14764
     sp = STACKTOP; //@line 14765
     STACKTOP = sp; //@line 14766
     return 0; //@line 14766
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14768
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14775
     $$0 = 1; //@line 14776
    } else {
     $$0 = 0; //@line 14778
    }
    $$2 = $$0; //@line 14780
   }
  }
 }
 STACKTOP = sp; //@line 14784
 return $$2 | 0; //@line 14784
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_118($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29472
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29474
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29476
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29482
 $13 = $2 + 360 | 0; //@line 29485
 if ((HEAP32[$13 >> 2] | 0) == 2) {
  _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 29489
  _printf(12994, $10) | 0; //@line 29490
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29491
  _putchar(10) | 0; //@line 29492
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 442; //@line 29495
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 29496
   HEAP32[$16 >> 2] = $2; //@line 29497
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 29498
   HEAP32[$17 >> 2] = $4; //@line 29499
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 29500
   HEAP32[$18 >> 2] = $4; //@line 29501
   $19 = $ReallocAsyncCtx + 16 | 0; //@line 29502
   HEAP32[$19 >> 2] = $13; //@line 29503
   sp = STACKTOP; //@line 29504
   return;
  }
  ___async_unwind = 0; //@line 29507
  HEAP32[$ReallocAsyncCtx >> 2] = 442; //@line 29508
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 29509
  HEAP32[$16 >> 2] = $2; //@line 29510
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 29511
  HEAP32[$17 >> 2] = $4; //@line 29512
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 29513
  HEAP32[$18 >> 2] = $4; //@line 29514
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 29515
  HEAP32[$19 >> 2] = $13; //@line 29516
  sp = STACKTOP; //@line 29517
  return;
 } else {
  $20 = HEAP32[$2 >> 2] | 0; //@line 29520
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29521
  __ZN7LoRaPHY18put_radio_to_sleepEv($20); //@line 29522
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 445; //@line 29525
   $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 29526
   HEAP32[$21 >> 2] = $2; //@line 29527
   $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 29528
   HEAP32[$22 >> 2] = $13; //@line 29529
   sp = STACKTOP; //@line 29530
   return;
  }
  ___async_unwind = 0; //@line 29533
  HEAP32[$ReallocAsyncCtx4 >> 2] = 445; //@line 29534
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 29535
  HEAP32[$21 >> 2] = $2; //@line 29536
  $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 29537
  HEAP32[$22 >> 2] = $13; //@line 29538
  sp = STACKTOP; //@line 29539
  return;
 }
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 14136
 STACKTOP = STACKTOP + 128 | 0; //@line 14137
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 14137
 $4 = sp + 124 | 0; //@line 14138
 $5 = sp; //@line 14139
 dest = $5; //@line 14140
 src = 10656; //@line 14140
 stop = dest + 124 | 0; //@line 14140
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 14140
  dest = dest + 4 | 0; //@line 14140
  src = src + 4 | 0; //@line 14140
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 14146
   $$015 = 1; //@line 14146
   label = 4; //@line 14147
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 14150
   $$0 = -1; //@line 14151
  }
 } else {
  $$014 = $0; //@line 14154
  $$015 = $1; //@line 14154
  label = 4; //@line 14155
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 14159
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 14161
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 14163
  $14 = $5 + 20 | 0; //@line 14164
  HEAP32[$14 >> 2] = $$014; //@line 14165
  HEAP32[$5 + 44 >> 2] = $$014; //@line 14167
  $16 = $$014 + $$$015 | 0; //@line 14168
  $17 = $5 + 16 | 0; //@line 14169
  HEAP32[$17 >> 2] = $16; //@line 14170
  HEAP32[$5 + 28 >> 2] = $16; //@line 14172
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 14173
  $19 = _vfprintf($5, $2, $3) | 0; //@line 14174
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 777; //@line 14177
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 14179
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 14181
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14183
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 14185
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 14187
   sp = STACKTOP; //@line 14188
   STACKTOP = sp; //@line 14189
   return 0; //@line 14189
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14191
  if (!$$$015) {
   $$0 = $19; //@line 14194
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 14196
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 14201
   $$0 = $19; //@line 14202
  }
 }
 STACKTOP = sp; //@line 14205
 return $$0 | 0; //@line 14205
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31669
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31671
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31673
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31675
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31677
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31679
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31681
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31683
 $16 = HEAP16[$0 + 32 >> 1] | 0; //@line 31685
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31687
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31689
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31691
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31693
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31695
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31697
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31699
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31701
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 31707
 _printf(10904, HEAP32[$0 + 68 >> 2] | 0) | 0; //@line 31710
 HEAP32[$38 >> 2] = 5; //@line 31711
 _printf(10970, $38) | 0; //@line 31712
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 31713
 _putchar(10) | 0; //@line 31714
 if (!___async) {
  ___async_unwind = 0; //@line 31717
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 94; //@line 31719
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 31721
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 31723
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $26; //@line 31725
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $28; //@line 31727
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $30; //@line 31729
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $32; //@line 31731
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $4; //@line 31733
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $8; //@line 31735
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $10; //@line 31737
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $12; //@line 31739
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $14; //@line 31741
 HEAP16[$ReallocAsyncCtx6 + 48 >> 1] = $16; //@line 31743
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $18; //@line 31745
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $20; //@line 31747
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $22; //@line 31749
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $24; //@line 31751
 sp = STACKTOP; //@line 31752
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16043
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16049
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 16053
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 16054
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16055
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 16056
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 806; //@line 16059
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 16061
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16063
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 16065
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 16067
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 16069
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 16071
    sp = STACKTOP; //@line 16072
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16075
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 16079
    $$0 = $0 + 24 | 0; //@line 16080
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16082
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 16083
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16088
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 16094
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 16097
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 807; //@line 16102
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 16104
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 16106
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 16108
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16110
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 16112
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 16114
    sp = STACKTOP; //@line 16115
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2929
 STACKTOP = STACKTOP + 16 | 0; //@line 2930
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2930
 $$byval_copy = sp; //@line 2931
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2933
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2935
 $5 = $2 + 968 | 0; //@line 2936
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 64; //@line 2939
 if (!(HEAP8[$2 + 373 >> 0] | 0)) {
  $17 = $2 + 944 | 0; //@line 2944
  HEAP8[$17 >> 0] = HEAP8[$17 >> 0] | 34; //@line 2947
  $21 = HEAP32[$2 + 356 >> 2] | 0; //@line 2949
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 2951
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $2 + 996 | 0, 1); //@line 2952
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 2955
   sp = STACKTOP; //@line 2956
   STACKTOP = sp; //@line 2957
   return;
  }
  ___async_unwind = 0; //@line 2959
  HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 2960
  sp = STACKTOP; //@line 2961
  STACKTOP = sp; //@line 2962
  return;
 } else {
  $12 = HEAP32[$2 + 1328 >> 2] | 0; //@line 2965
  HEAP32[$4 >> 2] = 423; //@line 2966
  HEAP32[$4 + 4 >> 2] = 0; //@line 2968
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 2969
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 2970
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 2970
  $13 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($12, $2, $$byval_copy) | 0; //@line 2971
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 424; //@line 2974
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 2975
   HEAP32[$14 >> 2] = $4; //@line 2976
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 2977
   HEAP32[$15 >> 2] = $2; //@line 2978
   sp = STACKTOP; //@line 2979
   STACKTOP = sp; //@line 2980
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 2983
  ___async_unwind = 0; //@line 2984
  HEAP32[$ReallocAsyncCtx3 >> 2] = 424; //@line 2985
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 2986
  HEAP32[$14 >> 2] = $4; //@line 2987
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 2988
  HEAP32[$15 >> 2] = $2; //@line 2989
  sp = STACKTOP; //@line 2990
  STACKTOP = sp; //@line 2991
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_336($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5726
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5730
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5732
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5734
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5736
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5737
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 5741
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 5742
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 5743
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 264; //@line 5746
   $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 5747
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 5748
   $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 5749
   HEAP32[$15 >> 2] = $6; //@line 5750
   $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 5751
   HEAP32[$16 >> 2] = $8; //@line 5752
   sp = STACKTOP; //@line 5753
   return;
  }
  ___async_unwind = 0; //@line 5756
  HEAP32[$ReallocAsyncCtx8 >> 2] = 264; //@line 5757
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 5758
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 5759
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 5760
  HEAP32[$15 >> 2] = $6; //@line 5761
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 5762
  HEAP32[$16 >> 2] = $8; //@line 5763
  sp = STACKTOP; //@line 5764
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 6; //@line 5769
  HEAP32[___async_retval >> 2] = -1014; //@line 5771
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(12) | 0; //@line 5774
 _mbed_assert_internal(12851, 11935, 1243); //@line 5775
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 265; //@line 5778
  $18 = $ReallocAsyncCtx30 + 4 | 0; //@line 5779
  HEAP32[$18 >> 2] = $6; //@line 5780
  $19 = $ReallocAsyncCtx30 + 8 | 0; //@line 5781
  HEAP32[$19 >> 2] = $8; //@line 5782
  sp = STACKTOP; //@line 5783
  return;
 }
 ___async_unwind = 0; //@line 5786
 HEAP32[$ReallocAsyncCtx30 >> 2] = 265; //@line 5787
 $18 = $ReallocAsyncCtx30 + 4 | 0; //@line 5788
 HEAP32[$18 >> 2] = $6; //@line 5789
 $19 = $ReallocAsyncCtx30 + 8 | 0; //@line 5790
 HEAP32[$19 >> 2] = $8; //@line 5791
 sp = STACKTOP; //@line 5792
 return;
}
function _mbedtls_cipher_cmac_update__async_cb_484($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32656
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32658
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32660
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32662
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32664
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32666
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32668
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32670
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32672
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32674
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32676
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32678
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 32681
  $42 = ___async_retval; //@line 32682
  HEAP32[$42 >> 2] = $$0; //@line 32683
  return;
 }
 $24 = $2 + 1 | 0; //@line 32686
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 32689
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 32690
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 32694
   ___async_unwind = 0; //@line 32695
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 686; //@line 32697
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 32699
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 32701
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 32703
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 32705
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 32707
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 32709
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 32711
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 32713
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 32715
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 32717
  sp = STACKTOP; //@line 32718
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 32723
  $42 = ___async_retval; //@line 32724
  HEAP32[$42 >> 2] = $$0; //@line 32725
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 32730
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 32733
 $$0 = 0; //@line 32734
 $42 = ___async_retval; //@line 32735
 HEAP32[$42 >> 2] = $$0; //@line 32736
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_514($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36168
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36170
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36172
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36174
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36176
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36178
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36180
 $13 = $2 + 946 | 0; //@line 36182
 HEAP16[$13 >> 1] = $AsyncRetVal; //@line 36183
 $15 = HEAP16[$4 >> 1] | 0; //@line 36185
 HEAP16[$4 >> 1] = $15 + 1 << 16 >> 16; //@line 36187
 HEAP8[($15 & 65535) + ($2 + 381) >> 0] = $AsyncRetVal; //@line 36190
 $21 = (HEAPU16[$13 >> 1] | 0) >>> 8 & 255; //@line 36193
 $22 = HEAP16[$4 >> 1] | 0; //@line 36194
 HEAP16[$4 >> 1] = $22 + 1 << 16 >> 16; //@line 36196
 HEAP8[($22 & 65535) + ($2 + 381) >> 0] = $21; //@line 36199
 $27 = HEAP16[$4 >> 1] & 255; //@line 36201
 $29 = HEAP32[$2 + 908 >> 2] | 0; //@line 36203
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 36204
 $30 = __Z22compute_join_frame_micPKhtS0_Pj($6, $27, $29, $8) | 0; //@line 36205
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 36208
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 36209
  HEAP32[$31 >> 2] = $8; //@line 36210
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 36211
  HEAP32[$32 >> 2] = $4; //@line 36212
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 36213
  HEAP32[$33 >> 2] = $2; //@line 36214
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 36215
  HEAP32[$34 >> 2] = $10; //@line 36216
  sp = STACKTOP; //@line 36217
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 36221
 ___async_unwind = 0; //@line 36222
 HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 36223
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 36224
 HEAP32[$31 >> 2] = $8; //@line 36225
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 36226
 HEAP32[$32 >> 2] = $4; //@line 36227
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 36228
 HEAP32[$33 >> 2] = $2; //@line 36229
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 36230
 HEAP32[$34 >> 2] = $10; //@line 36231
 sp = STACKTOP; //@line 36232
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_35($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21425
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21429
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21431
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21433
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21435
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21436
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 21440
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 21441
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 21442
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 21445
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 21446
   HEAP32[$14 >> 2] = $4; //@line 21447
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 21448
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 21449
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 21450
   HEAP32[$16 >> 2] = $8; //@line 21451
   sp = STACKTOP; //@line 21452
   return;
  }
  ___async_unwind = 0; //@line 21455
  HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 21456
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 21457
  HEAP32[$14 >> 2] = $4; //@line 21458
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 21459
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 21460
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 21461
  HEAP32[$16 >> 2] = $8; //@line 21462
  sp = STACKTOP; //@line 21463
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 21466
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21470
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 21474
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21475
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 21476
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 21479
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 21480
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 21481
  sp = STACKTOP; //@line 21482
  return;
 }
 ___async_unwind = 0; //@line 21485
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 21486
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 21487
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 21488
 sp = STACKTOP; //@line 21489
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 5884
 STACKTOP = STACKTOP + 16 | 0; //@line 5885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5885
 $vararg_buffer1 = sp + 8 | 0; //@line 5886
 $vararg_buffer = sp; //@line 5887
 do {
  if (HEAP8[$0 + 4 >> 0] | 0) {
   $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5895
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5896
   FUNCTION_TABLE_ii[$10 & 15]($0) | 0; //@line 5897
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 186; //@line 5900
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 5902
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 5904
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 5906
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 5908
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 5910
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 5912
    HEAP8[$AsyncCtx + 28 >> 0] = $1; //@line 5914
    HEAP16[$AsyncCtx + 30 >> 1] = $3; //@line 5916
    sp = STACKTOP; //@line 5917
    STACKTOP = sp; //@line 5918
    return 0; //@line 5918
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5920
    break;
   }
  }
 } while (0);
 _printf(11836, $vararg_buffer) | 0; //@line 5925
 _printf(11849, $vararg_buffer1) | 0; //@line 5926
 $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5927
 _putchar(10) | 0; //@line 5928
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 187; //@line 5931
  HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 5933
  HEAP32[$AsyncCtx5 + 8 >> 2] = $4; //@line 5935
  HEAP8[$AsyncCtx5 + 12 >> 0] = $1; //@line 5937
  HEAP16[$AsyncCtx5 + 14 >> 1] = $3; //@line 5939
  sp = STACKTOP; //@line 5940
  STACKTOP = sp; //@line 5941
  return 0; //@line 5941
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5943
 if (!$2) {
  $$0 = -1003; //@line 5946
  STACKTOP = sp; //@line 5947
  return $$0 | 0; //@line 5947
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 5952
 STACKTOP = sp; //@line 5953
 return $$0 | 0; //@line 5953
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 10899
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 10902
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 10905
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 10908
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 10914
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 10923
     $24 = $13 >>> 2; //@line 10924
     $$090 = 0; //@line 10925
     $$094 = $7; //@line 10925
     while (1) {
      $25 = $$094 >>> 1; //@line 10927
      $26 = $$090 + $25 | 0; //@line 10928
      $27 = $26 << 1; //@line 10929
      $28 = $27 + $23 | 0; //@line 10930
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 10933
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 10937
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 10943
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 10951
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 10955
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 10961
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 10966
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 10969
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 10969
      }
     }
     $46 = $27 + $24 | 0; //@line 10972
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 10975
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 10979
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 10991
     } else {
      $$4 = 0; //@line 10993
     }
    } else {
     $$4 = 0; //@line 10996
    }
   } else {
    $$4 = 0; //@line 10999
   }
  } else {
   $$4 = 0; //@line 11002
  }
 } while (0);
 return $$4 | 0; //@line 11005
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_120($0) {
 $0 = $0 | 0;
 var $14 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $33 = 0, $37 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29554
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29556
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29558
 $7 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 29564
 if (!(HEAP32[$2 + 364 >> 2] | 0)) {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 29570
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 29575
  $14 = $2 + 356 | 0; //@line 29576
  $18 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 29580
  if ($18 >>> 0 >= (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
   $22 = HEAP32[$14 >> 2] | 0; //@line 29585
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29587
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $2 + 1056 | 0); //@line 29588
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 446; //@line 29591
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 29592
    HEAP32[$24 >> 2] = $2; //@line 29593
    sp = STACKTOP; //@line 29594
    return;
   }
   ___async_unwind = 0; //@line 29597
   HEAP32[$ReallocAsyncCtx6 >> 2] = 446; //@line 29598
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 29599
   HEAP32[$24 >> 2] = $2; //@line 29600
   sp = STACKTOP; //@line 29601
   return;
  }
 } else {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 29609
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 29614
  if ((HEAP32[$4 >> 2] | 0) != 2) {
   $33 = $2 + 944 | 0; //@line 29618
   HEAP8[$33 >> 0] = HEAP8[$33 >> 0] | 32; //@line 29621
  }
 }
 $37 = HEAP32[$2 + 356 >> 2] | 0; //@line 29625
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29627
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($37, $2 + 996 | 0, 1); //@line 29628
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 29631
  sp = STACKTOP; //@line 29632
  return;
 }
 ___async_unwind = 0; //@line 29635
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 29636
 sp = STACKTOP; //@line 29637
 return;
}
function __ZN12LoRaWANStack9handle_rxEhPhth($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $$021 = 0, $$1 = 0, $$pre$phi25Z2D = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $8 = 0, label = 0;
 if (!(HEAP8[$0 + 1932 >> 0] | 0)) {
  $$1 = -1017; //@line 10593
  return $$1 | 0; //@line 10594
 }
 $8 = $0 + 2236 | 0; //@line 10596
 if (!(HEAP8[$8 >> 0] | 0)) {
  $$1 = -1001; //@line 10600
  return $$1 | 0; //@line 10601
 }
 if (!$2) {
  $$1 = -1003; //@line 10605
  return $$1 | 0; //@line 10606
 }
 $12 = $0 + 2256 | 0; //@line 10608
 $13 = HEAP32[$12 >> 2] | 0; //@line 10609
 $15 = HEAP16[$0 + 2260 >> 1] | 0; //@line 10611
 if ((HEAP8[$0 + 2253 >> 0] | 0) != $1 << 24 >> 24) {
  $$1 = -1001; //@line 10616
  return $$1 | 0; //@line 10617
 }
 $19 = $15 & 65535; //@line 10619
 $20 = $3 & 65535; //@line 10620
 $22 = $0 + 2282 | 0; //@line 10622
 $24 = (HEAP16[$22 >> 1] | 0) == 0; //@line 10624
 if (($15 & 65535) > ($3 & 65535)) {
  if ($24) {
   $27 = $0 + 2280 | 0; //@line 10629
   HEAP16[$27 >> 1] = $19 - $20; //@line 10630
   HEAP16[$22 >> 1] = $3; //@line 10631
   _memcpy($2 | 0, $13 | 0, $20 | 0) | 0; //@line 10632
   $$0$off0 = 0; //@line 10633
   $$021 = $3; //@line 10633
   $$pre$phi25Z2D = $27; //@line 10633
  } else {
   label = 9; //@line 10635
  }
 } else {
  if ($24) {
   $28 = $0 + 2280 | 0; //@line 10639
   HEAP16[$28 >> 1] = 0; //@line 10640
   HEAP16[$22 >> 1] = 0; //@line 10641
   _memcpy($2 | 0, $13 | 0, $19 | 0) | 0; //@line 10642
   $$0$off0 = 1; //@line 10643
   $$021 = $15; //@line 10643
   $$pre$phi25Z2D = $28; //@line 10643
  } else {
   label = 9; //@line 10645
  }
 }
 if ((label | 0) == 9) {
  $$0$off0 = 0; //@line 10650
  $$021 = $15; //@line 10650
  $$pre$phi25Z2D = $0 + 2280 | 0; //@line 10650
 }
 if (HEAP16[$$pre$phi25Z2D >> 1] | 0) {
  $32 = HEAP16[$0 + 2282 >> 1] | 0; //@line 10656
  if ($32 << 16 >> 16) {
   _memcpy($2 | 0, $13 + ($32 & 65535) | 0, $$021 & 65535 | 0) | 0; //@line 10662
  }
 }
 if (!$$0$off0) {
  $$1 = $$021; //@line 10666
  return $$1 | 0; //@line 10667
 }
 _memset(HEAP32[$12 >> 2] | 0, 0, 255) | 0; //@line 10670
 HEAP8[$8 >> 0] = 0; //@line 10671
 $$1 = $$021; //@line 10672
 return $$1 | 0; //@line 10673
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25896
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25898
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25900
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25902
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25904
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25906
 $11 = HEAP32[$2 >> 2] | 0; //@line 25907
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 25911
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 25912
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 25913
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 25916
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 25917
   HEAP32[$15 >> 2] = $2; //@line 25918
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 25919
   HEAP32[$16 >> 2] = $4; //@line 25920
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 25921
   HEAP32[$17 >> 2] = $10; //@line 25922
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 25923
   HEAP32[$18 >> 2] = $8; //@line 25924
   sp = STACKTOP; //@line 25925
   return;
  }
  ___async_unwind = 0; //@line 25928
  HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 25929
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 25930
  HEAP32[$15 >> 2] = $2; //@line 25931
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 25932
  HEAP32[$16 >> 2] = $4; //@line 25933
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 25934
  HEAP32[$17 >> 2] = $10; //@line 25935
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 25936
  HEAP32[$18 >> 2] = $8; //@line 25937
  sp = STACKTOP; //@line 25938
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 25941
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 25942
 $19 = HEAP32[$2 >> 2] | 0; //@line 25943
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 25949
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 25950
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 25951
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 25954
  sp = STACKTOP; //@line 25955
  return;
 }
 ___async_unwind = 0; //@line 25958
 HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 25959
 sp = STACKTOP; //@line 25960
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_245($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 736
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 738
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 740
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 742
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 744
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 746
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 748
 if (!$AsyncRetVal) {
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 11 >> 0] = 0; //@line 753
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 >> 0] = 0; //@line 756
  $18 = HEAP32[$4 + 956 >> 2] | 0; //@line 758
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 16 >> 2] = $18; //@line 761
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 762
  $21 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 763
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 559; //@line 766
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 767
   HEAP32[$22 >> 2] = $6; //@line 768
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 769
   HEAP32[$23 >> 2] = $10; //@line 770
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 771
   HEAP32[$24 >> 2] = $2; //@line 772
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 773
   HEAP32[$25 >> 2] = $4; //@line 774
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 775
   HEAP32[$26 >> 2] = $8; //@line 776
   sp = STACKTOP; //@line 777
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 781
  ___async_unwind = 0; //@line 782
  HEAP32[$ReallocAsyncCtx3 >> 2] = 559; //@line 783
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 784
  HEAP32[$22 >> 2] = $6; //@line 785
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 786
  HEAP32[$23 >> 2] = $10; //@line 787
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 788
  HEAP32[$24 >> 2] = $2; //@line 789
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 790
  HEAP32[$25 >> 2] = $4; //@line 791
  $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 792
  HEAP32[$26 >> 2] = $8; //@line 793
  sp = STACKTOP; //@line 794
  return;
 } else {
  HEAP8[$4 + 373 >> 0] = 0; //@line 798
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 800
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_383($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9439
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9447
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9449
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9450
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 9454
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 9455
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 9456
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 9459
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 9460
   HEAP32[$14 >> 2] = $4; //@line 9461
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 9462
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 9463
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 9464
   HEAP32[$16 >> 2] = $8; //@line 9465
   sp = STACKTOP; //@line 9466
   return;
  }
  ___async_unwind = 0; //@line 9469
  HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 9470
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 9471
  HEAP32[$14 >> 2] = $4; //@line 9472
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 9473
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 9474
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 9475
  HEAP32[$16 >> 2] = $8; //@line 9476
  sp = STACKTOP; //@line 9477
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 9480
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 9484
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 9488
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 9489
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 9490
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 9493
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 9494
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 9495
  sp = STACKTOP; //@line 9496
  return;
 }
 ___async_unwind = 0; //@line 9499
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 9500
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 9501
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 9502
 sp = STACKTOP; //@line 9503
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19213
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19215
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19219
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19221
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19223
 $11 = HEAP32[$2 >> 2] | 0; //@line 19224
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 19228
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 19229
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 19230
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 19233
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19234
   HEAP32[$15 >> 2] = $2; //@line 19235
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19236
   HEAP32[$16 >> 2] = $4; //@line 19237
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19238
   HEAP32[$17 >> 2] = $10; //@line 19239
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19240
   HEAP32[$18 >> 2] = $8; //@line 19241
   sp = STACKTOP; //@line 19242
   return;
  }
  ___async_unwind = 0; //@line 19245
  HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 19246
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19247
  HEAP32[$15 >> 2] = $2; //@line 19248
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19249
  HEAP32[$16 >> 2] = $4; //@line 19250
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19251
  HEAP32[$17 >> 2] = $10; //@line 19252
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19253
  HEAP32[$18 >> 2] = $8; //@line 19254
  sp = STACKTOP; //@line 19255
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 19258
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 19259
 $19 = HEAP32[$2 >> 2] | 0; //@line 19260
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 19266
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19267
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 19268
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 19271
  sp = STACKTOP; //@line 19272
  return;
 }
 ___async_unwind = 0; //@line 19275
 HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 19276
 sp = STACKTOP; //@line 19277
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14353
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 14358
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 14363
  } else {
   $20 = $0 & 255; //@line 14365
   $21 = $0 & 255; //@line 14366
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 14372
   } else {
    $26 = $1 + 20 | 0; //@line 14374
    $27 = HEAP32[$26 >> 2] | 0; //@line 14375
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 14381
     HEAP8[$27 >> 0] = $20; //@line 14382
     $34 = $21; //@line 14383
    } else {
     label = 12; //@line 14385
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14390
     $32 = ___overflow($1, $0) | 0; //@line 14391
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 783; //@line 14394
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14396
      sp = STACKTOP; //@line 14397
      return 0; //@line 14398
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 14400
      $34 = $32; //@line 14401
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 14406
   $$0 = $34; //@line 14407
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 14412
   $8 = $0 & 255; //@line 14413
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 14419
    $14 = HEAP32[$13 >> 2] | 0; //@line 14420
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 14426
     HEAP8[$14 >> 0] = $7; //@line 14427
     $$0 = $8; //@line 14428
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14432
   $19 = ___overflow($1, $0) | 0; //@line 14433
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 782; //@line 14436
    sp = STACKTOP; //@line 14437
    return 0; //@line 14438
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14440
    $$0 = $19; //@line 14441
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14446
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10564
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 10569
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 10574
  } else {
   $20 = $0 & 255; //@line 10576
   $21 = $0 & 255; //@line 10577
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 10583
   } else {
    $26 = $1 + 20 | 0; //@line 10585
    $27 = HEAP32[$26 >> 2] | 0; //@line 10586
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 10592
     HEAP8[$27 >> 0] = $20; //@line 10593
     $34 = $21; //@line 10594
    } else {
     label = 12; //@line 10596
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10601
     $32 = ___overflow($1, $0) | 0; //@line 10602
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 768; //@line 10605
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10607
      sp = STACKTOP; //@line 10608
      return 0; //@line 10609
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10611
      $34 = $32; //@line 10612
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 10617
   $$0 = $34; //@line 10618
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 10623
   $8 = $0 & 255; //@line 10624
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 10630
    $14 = HEAP32[$13 >> 2] | 0; //@line 10631
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 10637
     HEAP8[$14 >> 0] = $7; //@line 10638
     $$0 = $8; //@line 10639
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10643
   $19 = ___overflow($1, $0) | 0; //@line 10644
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 767; //@line 10647
    sp = STACKTOP; //@line 10648
    return 0; //@line 10649
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10651
    $$0 = $19; //@line 10652
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 10657
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11170
 $1 = $0 + 20 | 0; //@line 11171
 $3 = $0 + 28 | 0; //@line 11173
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 11179
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11180
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 11181
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 774; //@line 11184
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11186
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11188
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11190
    sp = STACKTOP; //@line 11191
    return 0; //@line 11192
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11194
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 11198
     break;
    } else {
     label = 5; //@line 11201
     break;
    }
   }
  } else {
   label = 5; //@line 11206
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 11210
  $14 = HEAP32[$13 >> 2] | 0; //@line 11211
  $15 = $0 + 8 | 0; //@line 11212
  $16 = HEAP32[$15 >> 2] | 0; //@line 11213
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 11221
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11222
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 11223
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 775; //@line 11226
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11228
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 11230
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 11232
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 11234
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 11236
     sp = STACKTOP; //@line 11237
     return 0; //@line 11238
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11240
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 11246
  HEAP32[$3 >> 2] = 0; //@line 11247
  HEAP32[$1 >> 2] = 0; //@line 11248
  HEAP32[$15 >> 2] = 0; //@line 11249
  HEAP32[$13 >> 2] = 0; //@line 11250
  $$0 = 0; //@line 11251
 }
 return $$0 | 0; //@line 11253
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_365($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7858
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7862
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7864
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7866
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7868
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 7869
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 7873
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 7874
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 7875
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 7878
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 7879
   HEAP32[$14 >> 2] = $4; //@line 7880
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 7881
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 7882
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 7883
   HEAP32[$16 >> 2] = $8; //@line 7884
   sp = STACKTOP; //@line 7885
   return;
  }
  ___async_unwind = 0; //@line 7888
  HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 7889
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 7890
  HEAP32[$14 >> 2] = $4; //@line 7891
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 7892
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 7893
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 7894
  HEAP32[$16 >> 2] = $8; //@line 7895
  sp = STACKTOP; //@line 7896
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 7899
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 7903
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 7907
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 7908
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 7909
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 7912
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 7913
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 7914
  sp = STACKTOP; //@line 7915
  return;
 }
 ___async_unwind = 0; //@line 7918
 HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 7919
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 7920
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 7921
 sp = STACKTOP; //@line 7922
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_157($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31919
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31921
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31923
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31925
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31927
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31929
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31931
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31933
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31935
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31937
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31939
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31941
 $24 = HEAP16[$0 + 48 >> 1] | 0; //@line 31943
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31945
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31947
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31949
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31951
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 31952
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($14); //@line 31953
 if (!___async) {
  ___async_unwind = 0; //@line 31956
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 31958
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 31960
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 31962
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 31964
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 31966
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 31968
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 31970
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $14; //@line 31972
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 31974
 HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $18; //@line 31976
 HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $20; //@line 31978
 HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $22; //@line 31980
 HEAP16[$ReallocAsyncCtx9 + 48 >> 1] = $24; //@line 31982
 HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 31984
 HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 31986
 HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $30; //@line 31988
 HEAP32[$ReallocAsyncCtx9 + 64 >> 2] = $32; //@line 31990
 sp = STACKTOP; //@line 31991
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_295($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 3136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3142
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3144
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3146
 $11 = HEAP32[$2 >> 2] | 0; //@line 3147
 $13 = $6 + 12 | 0; //@line 3149
 HEAP32[$6 >> 2] = 529; //@line 3150
 HEAP32[$6 + 4 >> 2] = 0; //@line 3152
 HEAP32[$6 + 8 >> 2] = $4; //@line 3154
 HEAP32[$13 >> 2] = 848; //@line 3155
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 3156
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($11, $4 + 1036 | 0, $6); //@line 3157
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 530; //@line 3160
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 3161
  HEAP32[$14 >> 2] = $2; //@line 3162
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 3163
  HEAP32[$15 >> 2] = $4; //@line 3164
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 3165
  HEAP32[$16 >> 2] = $10; //@line 3166
  $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 3167
  HEAP32[$17 >> 2] = $8; //@line 3168
  $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 3169
  HEAP32[$18 >> 2] = $6; //@line 3170
  $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 3171
  HEAP32[$19 >> 2] = $13; //@line 3172
  sp = STACKTOP; //@line 3173
  return;
 }
 ___async_unwind = 0; //@line 3176
 HEAP32[$ReallocAsyncCtx8 >> 2] = 530; //@line 3177
 $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 3178
 HEAP32[$14 >> 2] = $2; //@line 3179
 $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 3180
 HEAP32[$15 >> 2] = $4; //@line 3181
 $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 3182
 HEAP32[$16 >> 2] = $10; //@line 3183
 $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 3184
 HEAP32[$17 >> 2] = $8; //@line 3185
 $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 3186
 HEAP32[$18 >> 2] = $6; //@line 3187
 $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 3188
 HEAP32[$19 >> 2] = $13; //@line 3189
 sp = STACKTOP; //@line 3190
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_137($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30648
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30652
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30654
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30656
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30660
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30664
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30666
 L2 : do {
  if (!$AsyncRetVal) {
   if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 2) {
    switch (HEAP32[$4 >> 2] | 0) {
    case 0:
     {
      break;
     }
    case 10:
     {
      if (!(HEAP8[$16 + 372 >> 0] | 0)) {
       break L2;
      }
      break;
     }
    default:
     {
      break L2;
     }
    }
    _printf(12967, $8) | 0; //@line 30691
    _printf(12994, $12) | 0; //@line 30692
    $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 30693
    _putchar(10) | 0; //@line 30694
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 563; //@line 30697
     $25 = $ReallocAsyncCtx + 4 | 0; //@line 30698
     HEAP32[$25 >> 2] = $16; //@line 30699
     $26 = $ReallocAsyncCtx + 8 | 0; //@line 30700
     HEAP32[$26 >> 2] = $6; //@line 30701
     $27 = $ReallocAsyncCtx + 12 | 0; //@line 30702
     HEAP32[$27 >> 2] = $6; //@line 30703
     $28 = $ReallocAsyncCtx + 16 | 0; //@line 30704
     HEAP32[$28 >> 2] = $AsyncRetVal; //@line 30705
     sp = STACKTOP; //@line 30706
     return;
    }
    ___async_unwind = 0; //@line 30709
    HEAP32[$ReallocAsyncCtx >> 2] = 563; //@line 30710
    $25 = $ReallocAsyncCtx + 4 | 0; //@line 30711
    HEAP32[$25 >> 2] = $16; //@line 30712
    $26 = $ReallocAsyncCtx + 8 | 0; //@line 30713
    HEAP32[$26 >> 2] = $6; //@line 30714
    $27 = $ReallocAsyncCtx + 12 | 0; //@line 30715
    HEAP32[$27 >> 2] = $6; //@line 30716
    $28 = $ReallocAsyncCtx + 16 | 0; //@line 30717
    HEAP32[$28 >> 2] = $AsyncRetVal; //@line 30718
    sp = STACKTOP; //@line 30719
    return;
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 30725
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26072
 $3 = $0 + 4 | 0; //@line 26073
 $4 = HEAP32[$3 >> 2] | 0; //@line 26074
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 26077
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26078
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 26079
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 648; //@line 26082
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 26084
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 26087
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 26089
  sp = STACKTOP; //@line 26090
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26093
 $11 = HEAP32[$3 >> 2] | 0; //@line 26094
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 26097
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26100
   FUNCTION_TABLE_vii[$14 & 31]($11, 0); //@line 26101
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 650; //@line 26104
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 26106
    sp = STACKTOP; //@line 26107
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 26110
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26114
   FUNCTION_TABLE_vii[$14 & 31]($11, $2); //@line 26115
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 649; //@line 26118
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 26120
    sp = STACKTOP; //@line 26121
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 26124
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 26129
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 26132
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26133
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 26134
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 651; //@line 26137
  sp = STACKTOP; //@line 26138
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 26141
  return;
 }
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_462($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24619
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24621
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24623
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24627
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24631
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24633
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24635
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 24638
  __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 24639
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 24642
   $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 24643
   HEAP32[$17 >> 2] = $12; //@line 24644
   $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 24645
   HEAP32[$18 >> 2] = $14; //@line 24646
   sp = STACKTOP; //@line 24647
   return;
  }
  ___async_unwind = 0; //@line 24650
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 24651
  $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 24652
  HEAP32[$17 >> 2] = $12; //@line 24653
  $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 24654
  HEAP32[$18 >> 2] = $14; //@line 24655
  sp = STACKTOP; //@line 24656
  return;
 } else {
  _printf(13393, $4) | 0; //@line 24659
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 24660
  _printf(13406, $8) | 0; //@line 24661
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24662
  _putchar(10) | 0; //@line 24663
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 485; //@line 24666
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 24667
   HEAP32[$19 >> 2] = $12; //@line 24668
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 24669
   HEAP32[$20 >> 2] = $14; //@line 24670
   sp = STACKTOP; //@line 24671
   return;
  }
  ___async_unwind = 0; //@line 24674
  HEAP32[$ReallocAsyncCtx2 >> 2] = 485; //@line 24675
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 24676
  HEAP32[$19 >> 2] = $12; //@line 24677
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 24678
  HEAP32[$20 >> 2] = $14; //@line 24679
  sp = STACKTOP; //@line 24680
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_121($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $24 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29644
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29646
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29648
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29650
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 29655
  _mbed_assert_internal(12851, 12860, 217); //@line 29656
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 444; //@line 29659
   $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 29660
   HEAP32[$9 >> 2] = $2; //@line 29661
   $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 29662
   HEAP32[$10 >> 2] = $4; //@line 29663
   $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 29664
   HEAP32[$11 >> 2] = $6; //@line 29665
   sp = STACKTOP; //@line 29666
   return;
  }
  ___async_unwind = 0; //@line 29669
  HEAP32[$ReallocAsyncCtx7 >> 2] = 444; //@line 29670
  $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 29671
  HEAP32[$9 >> 2] = $2; //@line 29672
  $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 29673
  HEAP32[$10 >> 2] = $4; //@line 29674
  $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 29675
  HEAP32[$11 >> 2] = $6; //@line 29676
  sp = STACKTOP; //@line 29677
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 29681
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 29689
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 29694
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  $24 = $4 + 944 | 0; //@line 29698
  HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 32; //@line 29701
 }
 $28 = HEAP32[$4 + 356 >> 2] | 0; //@line 29704
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29706
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($28, $4 + 996 | 0, 1); //@line 29707
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 29710
  sp = STACKTOP; //@line 29711
  return;
 }
 ___async_unwind = 0; //@line 29714
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 29715
 sp = STACKTOP; //@line 29716
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $15 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11911
 STACKTOP = STACKTOP + 16 | 0; //@line 11912
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11912
 $5 = sp; //@line 11913
 $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11915
 $8 = $5 + 12 | 0; //@line 11916
 HEAP32[$5 >> 2] = 6; //@line 11917
 HEAP32[$5 + 4 >> 2] = 0; //@line 11919
 HEAP32[$5 + 8 >> 2] = $0; //@line 11921
 HEAP32[$8 >> 2] = 860; //@line 11922
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11923
 $9 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($7, $5, $1, $2, $3, $4) | 0; //@line 11924
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 383; //@line 11927
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 11929
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 11931
  sp = STACKTOP; //@line 11932
  STACKTOP = sp; //@line 11933
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11935
 $12 = HEAP32[$8 >> 2] | 0; //@line 11936
 do {
  if ($12 | 0) {
   $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 11941
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11942
   FUNCTION_TABLE_vi[$15 & 1023]($5); //@line 11943
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 384; //@line 11946
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 11948
    HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 11950
    sp = STACKTOP; //@line 11951
    STACKTOP = sp; //@line 11952
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11954
    break;
   }
  }
 } while (0);
 if ($9 | 0) {
  STACKTOP = sp; //@line 11961
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11963
 _mbed_assert_internal(12851, 12860, 141); //@line 11964
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 385; //@line 11967
  sp = STACKTOP; //@line 11968
  STACKTOP = sp; //@line 11969
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11971
 STACKTOP = sp; //@line 11972
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_467($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26153
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26155
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26157
 $5 = HEAP8[$2 >> 0] & -5; //@line 26159
 HEAP8[$2 >> 0] = $5; //@line 26160
 if (!($5 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $5 & -17; //@line 26167
 $10 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26169
 $11 = $10 + 48 | 0; //@line 26170
 $13 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26172
 $14 = $10 + 60 | 0; //@line 26173
 $15 = HEAP32[$14 >> 2] | 0; //@line 26174
 if (!$15) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 26177
  _mbed_assert_internal(15061, 15066, 1102); //@line 26178
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 26181
   $17 = $ReallocAsyncCtx14 + 4 | 0; //@line 26182
   HEAP32[$17 >> 2] = $14; //@line 26183
   $18 = $ReallocAsyncCtx14 + 8 | 0; //@line 26184
   HEAP32[$18 >> 2] = $11; //@line 26185
   $19 = $ReallocAsyncCtx14 + 12 | 0; //@line 26186
   HEAP32[$19 >> 2] = $13; //@line 26187
   sp = STACKTOP; //@line 26188
   return;
  }
  ___async_unwind = 0; //@line 26191
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 26192
  $17 = $ReallocAsyncCtx14 + 4 | 0; //@line 26193
  HEAP32[$17 >> 2] = $14; //@line 26194
  $18 = $ReallocAsyncCtx14 + 8 | 0; //@line 26195
  HEAP32[$18 >> 2] = $11; //@line 26196
  $19 = $ReallocAsyncCtx14 + 12 | 0; //@line 26197
  HEAP32[$19 >> 2] = $13; //@line 26198
  sp = STACKTOP; //@line 26199
  return;
 } else {
  $20 = HEAP32[$15 >> 2] | 0; //@line 26202
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26203
  FUNCTION_TABLE_vii[$20 & 31]($11, $13); //@line 26204
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 26207
   sp = STACKTOP; //@line 26208
   return;
  }
  ___async_unwind = 0; //@line 26211
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 26212
  sp = STACKTOP; //@line 26213
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_331($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5493
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5495
 HEAP8[$2 + 1964 >> 0] = 0; //@line 5498
 HEAP32[$2 + 2256 >> 2] = 0; //@line 5500
 HEAP8[$2 + 2236 >> 0] = 0; //@line 5502
 HEAP16[$2 + 2282 >> 1] = 0; //@line 5504
 HEAP16[$2 + 2260 >> 1] = 0; //@line 5506
 HEAP8[$2 + 1932 >> 0] = 0; //@line 5508
 $14 = $2 + 1892 | 0; //@line 5509
 _memset($2 + 1975 | 0, 0, 259) | 0; //@line 5510
 $15 = HEAP32[$14 >> 2] | 0; //@line 5511
 if (!$15) {
  HEAP32[___async_retval >> 2] = -1011; //@line 5515
  return;
 }
 $19 = HEAP32[$2 + 2288 >> 2] | 0; //@line 5520
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 5522
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 5523
 FUNCTION_TABLE_vii[$21 & 31]($6, $2 + 1880 | 0); //@line 5524
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 242; //@line 5527
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 5528
  HEAP32[$22 >> 2] = $14; //@line 5529
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 5530
  HEAP32[$23 >> 2] = $6; //@line 5531
  $24 = $ReallocAsyncCtx + 12 | 0; //@line 5532
  HEAP32[$24 >> 2] = $19; //@line 5533
  $25 = $ReallocAsyncCtx + 16 | 0; //@line 5534
  HEAP32[$25 >> 2] = $6; //@line 5535
  $26 = $ReallocAsyncCtx + 20 | 0; //@line 5536
  HEAP32[$26 >> 2] = $4; //@line 5537
  sp = STACKTOP; //@line 5538
  return;
 }
 ___async_unwind = 0; //@line 5541
 HEAP32[$ReallocAsyncCtx >> 2] = 242; //@line 5542
 $22 = $ReallocAsyncCtx + 4 | 0; //@line 5543
 HEAP32[$22 >> 2] = $14; //@line 5544
 $23 = $ReallocAsyncCtx + 8 | 0; //@line 5545
 HEAP32[$23 >> 2] = $6; //@line 5546
 $24 = $ReallocAsyncCtx + 12 | 0; //@line 5547
 HEAP32[$24 >> 2] = $19; //@line 5548
 $25 = $ReallocAsyncCtx + 16 | 0; //@line 5549
 HEAP32[$25 >> 2] = $6; //@line 5550
 $26 = $ReallocAsyncCtx + 20 | 0; //@line 5551
 HEAP32[$26 >> 2] = $4; //@line 5552
 sp = STACKTOP; //@line 5553
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_323($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4720
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4722
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4724
 $9 = $2 + 1892 | 0; //@line 4725
 $10 = HEAP32[$9 >> 2] | 0; //@line 4726
 if (!$10) {
  HEAP32[$4 >> 2] = 6; //@line 4729
  HEAP32[___async_retval >> 2] = -1014; //@line 4731
  return;
 }
 $14 = HEAP32[$2 + 2288 >> 2] | 0; //@line 4736
 $16 = HEAP32[$10 + 4 >> 2] | 0; //@line 4738
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 4739
 FUNCTION_TABLE_vii[$16 & 31]($6, $2 + 1880 | 0); //@line 4740
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 4743
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 4744
  HEAP32[$17 >> 2] = $9; //@line 4745
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 4746
  HEAP32[$18 >> 2] = $6; //@line 4747
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 4748
  HEAP32[$19 >> 2] = $14; //@line 4749
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 4750
  HEAP32[$20 >> 2] = $6; //@line 4751
  $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 4752
  HEAP32[$21 >> 2] = $4; //@line 4753
  $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 4754
  HEAP32[$22 >> 2] = $8; //@line 4755
  sp = STACKTOP; //@line 4756
  return;
 }
 ___async_unwind = 0; //@line 4759
 HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 4760
 $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 4761
 HEAP32[$17 >> 2] = $9; //@line 4762
 $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 4763
 HEAP32[$18 >> 2] = $6; //@line 4764
 $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 4765
 HEAP32[$19 >> 2] = $14; //@line 4766
 $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 4767
 HEAP32[$20 >> 2] = $6; //@line 4768
 $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 4769
 HEAP32[$21 >> 2] = $4; //@line 4770
 $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 4771
 HEAP32[$22 >> 2] = $8; //@line 4772
 sp = STACKTOP; //@line 4773
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$037$sink$i = 0, $$03741$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0;
 $3 = $1 + 39 & -4; //@line 4576
 $4 = $0 + 156 | 0; //@line 4577
 _equeue_mutex_lock($4); //@line 4578
 $5 = $0 + 24 | 0; //@line 4579
 $6 = HEAP32[$5 >> 2] | 0; //@line 4580
 L1 : do {
  if (!$6) {
   label = 7; //@line 4584
  } else {
   $$03741$i = $5; //@line 4586
   $9 = $6; //@line 4586
   while (1) {
    if ((HEAP32[$9 >> 2] | 0) >>> 0 >= $3 >>> 0) {
     break;
    }
    $15 = $9 + 8 | 0; //@line 4593
    $16 = HEAP32[$15 >> 2] | 0; //@line 4594
    if (!$16) {
     label = 7; //@line 4597
     break L1;
    } else {
     $$03741$i = $15; //@line 4600
     $9 = $16; //@line 4600
    }
   }
   $12 = HEAP32[$9 + 12 >> 2] | 0; //@line 4604
   if (!$12) {
    $$037$sink$i = $$03741$i; //@line 4607
   } else {
    HEAP32[$$03741$i >> 2] = $12; //@line 4609
    $$037$sink$i = $12 + 8 | 0; //@line 4611
   }
   HEAP32[$$037$sink$i >> 2] = HEAP32[$9 + 8 >> 2]; //@line 4615
   _equeue_mutex_unlock($4); //@line 4616
   $$1$i9 = $9; //@line 4617
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $18 = $0 + 28 | 0; //@line 4622
   $19 = HEAP32[$18 >> 2] | 0; //@line 4623
   if ($19 >>> 0 < $3 >>> 0) {
    _equeue_mutex_unlock($4); //@line 4626
    $$0 = 0; //@line 4627
    return $$0 | 0; //@line 4628
   } else {
    $21 = $0 + 32 | 0; //@line 4630
    $22 = HEAP32[$21 >> 2] | 0; //@line 4631
    HEAP32[$21 >> 2] = $22 + $3; //@line 4633
    HEAP32[$18 >> 2] = $19 - $3; //@line 4635
    HEAP32[$22 >> 2] = $3; //@line 4636
    HEAP8[$22 + 4 >> 0] = 1; //@line 4638
    _equeue_mutex_unlock($4); //@line 4639
    if (!$22) {
     $$0 = 0; //@line 4642
    } else {
     $$1$i9 = $22; //@line 4644
     break;
    }
    return $$0 | 0; //@line 4647
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 4652
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 4654
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 4656
 $$0 = $$1$i9 + 36 | 0; //@line 4658
 return $$0 | 0; //@line 4659
}
function __ZN14lorawan_timersD2Ev__async_cb_367($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8223
 $4 = HEAP32[$2 + 68 >> 2] | 0; //@line 8225
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 8230
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 8231
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 56 | 0); //@line 8232
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 352; //@line 8235
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 8236
   HEAP32[$9 >> 2] = $2; //@line 8237
   sp = STACKTOP; //@line 8238
   return;
  }
  ___async_unwind = 0; //@line 8241
  HEAP32[$ReallocAsyncCtx3 >> 2] = 352; //@line 8242
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 8243
  HEAP32[$9 >> 2] = $2; //@line 8244
  sp = STACKTOP; //@line 8245
  return;
 }
 $11 = HEAP32[$2 + 48 >> 2] | 0; //@line 8249
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 8254
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 8255
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 36 | 0); //@line 8256
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 8259
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 8260
   HEAP32[$16 >> 2] = $2; //@line 8261
   sp = STACKTOP; //@line 8262
   return;
  }
  ___async_unwind = 0; //@line 8265
  HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 8266
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 8267
  HEAP32[$16 >> 2] = $2; //@line 8268
  sp = STACKTOP; //@line 8269
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 8273
 if (!$18) {
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 8280
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 8281
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 8282
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 8285
  sp = STACKTOP; //@line 8286
  return;
 }
 ___async_unwind = 0; //@line 8289
 HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 8290
 sp = STACKTOP; //@line 8291
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_312($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4226
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4228
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4230
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4232
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4234
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4236
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4238
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4240
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4242
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4244
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4246
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4248
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4250
 $25 = $4 + 1088 | 0; //@line 4251
 HEAP32[$25 >> 2] = 0; //@line 4252
 HEAP32[$25 + 4 >> 2] = 0; //@line 4252
 HEAP32[$25 + 8 >> 2] = 0; //@line 4252
 HEAP32[$25 + 12 >> 2] = 0; //@line 4252
 HEAP8[$4 + 1104 >> 0] = 1; //@line 4254
 HEAP32[$2 >> 2] = 684; //@line 4255
 $27 = $4 + 1112 | 0; //@line 4256
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 4257
 __ZN4mbed10TimerEventC2Ev($27); //@line 4258
 if (!___async) {
  ___async_unwind = 0; //@line 4261
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 149; //@line 4263
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 4265
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 4267
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 4269
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 4271
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 4273
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 4275
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 4277
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 4279
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 4281
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 4283
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 4285
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 4287
 sp = STACKTOP; //@line 4288
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_311($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4156
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4158
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4160
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4162
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4164
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4166
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4168
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4170
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4172
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4174
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4176
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4178
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4180
 $25 = $4 + 1152 | 0; //@line 4181
 HEAP32[$25 >> 2] = 0; //@line 4182
 HEAP32[$25 + 4 >> 2] = 0; //@line 4182
 HEAP32[$25 + 8 >> 2] = 0; //@line 4182
 HEAP32[$25 + 12 >> 2] = 0; //@line 4182
 HEAP8[$4 + 1168 >> 0] = 1; //@line 4184
 HEAP32[$2 >> 2] = 684; //@line 4185
 $27 = $4 + 1176 | 0; //@line 4186
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 4187
 __ZN4mbed10TimerEventC2Ev($27); //@line 4188
 if (!___async) {
  ___async_unwind = 0; //@line 4191
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 4193
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 4195
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 4197
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 4199
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 4201
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 4203
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 4205
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 4207
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 4209
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 4211
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 4213
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 4215
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 4217
 sp = STACKTOP; //@line 4218
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_357($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7185
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7187
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 7189
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 7194
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 7195
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 7196
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 7199
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 7200
   HEAP32[$9 >> 2] = $2; //@line 7201
   sp = STACKTOP; //@line 7202
   return;
  }
  ___async_unwind = 0; //@line 7205
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 7206
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 7207
  HEAP32[$9 >> 2] = $2; //@line 7208
  sp = STACKTOP; //@line 7209
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 7213
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 7218
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 7219
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 7220
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 7223
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 7224
   HEAP32[$16 >> 2] = $2; //@line 7225
   sp = STACKTOP; //@line 7226
   return;
  }
  ___async_unwind = 0; //@line 7229
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 7230
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 7231
  HEAP32[$16 >> 2] = $2; //@line 7232
  sp = STACKTOP; //@line 7233
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 7237
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 7243
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 7244
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 7245
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7248
  sp = STACKTOP; //@line 7249
  return;
 }
 ___async_unwind = 0; //@line 7252
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7253
 sp = STACKTOP; //@line 7254
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_310($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4086
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4090
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4092
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4094
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4096
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4098
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4100
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4102
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4104
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4106
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4108
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4110
 $25 = $4 + 1216 | 0; //@line 4111
 HEAP32[$25 >> 2] = 0; //@line 4112
 HEAP32[$25 + 4 >> 2] = 0; //@line 4112
 HEAP32[$25 + 8 >> 2] = 0; //@line 4112
 HEAP32[$25 + 12 >> 2] = 0; //@line 4112
 HEAP8[$4 + 1232 >> 0] = 1; //@line 4114
 HEAP32[$2 >> 2] = 684; //@line 4115
 $27 = $4 + 1240 | 0; //@line 4116
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 4117
 __ZN4mbed10TimerEventC2Ev($27); //@line 4118
 if (!___async) {
  ___async_unwind = 0; //@line 4121
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 151; //@line 4123
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 4125
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 4127
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 4129
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 4131
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 4133
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 4135
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 4137
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 4139
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 4141
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 4143
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 4145
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 4147
 sp = STACKTOP; //@line 4148
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_32($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21321
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21325
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21327
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21329
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21331
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21333
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21335
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21337
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21340
 $18 = $4 + 16 | 0; //@line 21341
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 21342
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 21342
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 21342
 _equeue_event_dtor($4, 413); //@line 21343
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21344
 $19 = _equeue_post($8, 414, $4) | 0; //@line 21345
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 21348
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 21349
  HEAP32[$20 >> 2] = $10; //@line 21350
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 21351
  HEAP32[$21 >> 2] = $12; //@line 21352
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 21353
  HEAP32[$22 >> 2] = $14; //@line 21354
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 21355
  HEAP32[$23 >> 2] = $16; //@line 21356
  sp = STACKTOP; //@line 21357
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 21361
 ___async_unwind = 0; //@line 21362
 HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 21363
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 21364
 HEAP32[$20 >> 2] = $10; //@line 21365
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 21366
 HEAP32[$21 >> 2] = $12; //@line 21367
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 21368
 HEAP32[$22 >> 2] = $14; //@line 21369
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 21370
 HEAP32[$23 >> 2] = $16; //@line 21371
 sp = STACKTOP; //@line 21372
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_211($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$031 = 0.0, $12 = 0, $14 = 0, $18 = 0, $22 = 0.0, $4 = 0, $57 = 0.0, $67 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35988
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35992
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35996
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36000
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 36002
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   $$0 = 1; //@line 36005
   break;
  }
 case 1:
  {
   switch (HEAP32[$12 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 36013
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 36017
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 36021
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 36025
    }
   }
   $18 = HEAP32[$12 + 756 >> 2] | 0; //@line 36029
   $22 = 1.0 / ($$031 / +(1 << $18 | 0)); //@line 36033
   $57 = +Math_ceil(+(+(((($14 & 255) << 3) + 28 - ($18 << 2) + (HEAP8[$12 + 766 >> 0] << 4 & 255) + (HEAP8[$12 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($18 - (HEAP8[$12 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$12 + 761 >> 0] | 0) + 4 | 0); //@line 36069
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$12 + 762 >> 1] | 0) + 4.25) * $22 + $22 * (($57 > 0.0 ? $57 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 36079
   break;
  }
 default:
  {
   $$0 = 0; //@line 36083
  }
 }
 _printf(10904, $4) | 0; //@line 36086
 HEAP32[$8 >> 2] = $$0; //@line 36087
 _printf(11113, $8) | 0; //@line 36088
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 36089
 _putchar(10) | 0; //@line 36090
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 90; //@line 36093
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 36094
  HEAP32[$67 >> 2] = $$0; //@line 36095
  sp = STACKTOP; //@line 36096
  return;
 }
 ___async_unwind = 0; //@line 36099
 HEAP32[$ReallocAsyncCtx >> 2] = 90; //@line 36100
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 36101
 HEAP32[$67 >> 2] = $$0; //@line 36102
 sp = STACKTOP; //@line 36103
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_353($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6648
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6650
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 6652
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6654
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6656
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6658
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 6661
  $11 = _mbedtls_cipher_cmac_starts(22532, $2, 128) | 0; //@line 6662
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 602; //@line 6665
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 6666
   HEAP16[$12 >> 1] = $4; //@line 6667
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 6668
   HEAP32[$13 >> 2] = $6; //@line 6669
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 6670
   HEAP32[$14 >> 2] = $8; //@line 6671
   sp = STACKTOP; //@line 6672
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 6676
  ___async_unwind = 0; //@line 6677
  HEAP32[$ReallocAsyncCtx3 >> 2] = 602; //@line 6678
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 6679
  HEAP16[$12 >> 1] = $4; //@line 6680
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 6681
  HEAP32[$13 >> 2] = $6; //@line 6682
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 6683
  HEAP32[$14 >> 2] = $8; //@line 6684
  sp = STACKTOP; //@line 6685
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 6688
  _mbedtls_cipher_free(22532); //@line 6689
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 6692
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 6693
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 6694
   sp = STACKTOP; //@line 6695
   return;
  }
  ___async_unwind = 0; //@line 6698
  HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 6699
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 6700
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 6701
  sp = STACKTOP; //@line 6702
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_267($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1923
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1927
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1929
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1931
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1933
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 1936
  $11 = _mbedtls_cipher_cmac_starts(22532, $8, 128) | 0; //@line 1937
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 596; //@line 1940
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 1941
   HEAP32[$12 >> 2] = $4; //@line 1942
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 1943
   HEAP32[$13 >> 2] = $6; //@line 1944
   $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 1945
   HEAP32[$14 >> 2] = $2; //@line 1946
   sp = STACKTOP; //@line 1947
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 1951
  ___async_unwind = 0; //@line 1952
  HEAP32[$ReallocAsyncCtx4 >> 2] = 596; //@line 1953
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 1954
  HEAP32[$12 >> 2] = $4; //@line 1955
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 1956
  HEAP32[$13 >> 2] = $6; //@line 1957
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 1958
  HEAP32[$14 >> 2] = $2; //@line 1959
  sp = STACKTOP; //@line 1960
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 1963
  _mbedtls_cipher_free(22532); //@line 1964
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1967
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 1968
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 1969
   sp = STACKTOP; //@line 1970
   return;
  }
  ___async_unwind = 0; //@line 1973
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1974
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 1975
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 1976
  sp = STACKTOP; //@line 1977
  return;
 }
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 125
 STACKTOP = STACKTOP + 32 | 0; //@line 126
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 126
 $vararg_buffer5 = sp + 24 | 0; //@line 127
 $vararg_buffer3 = sp + 16 | 0; //@line 128
 _printf(10904, sp) | 0; //@line 131
 _printf(11563, sp + 8 | 0) | 0; //@line 132
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 133
 _putchar(10) | 0; //@line 134
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 53; //@line 137
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 139
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 141
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 143
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 145
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 147
  sp = STACKTOP; //@line 148
  STACKTOP = sp; //@line 149
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 151
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 153
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 155
 _printf(10904, $vararg_buffer3) | 0; //@line 156
 HEAP32[$vararg_buffer5 >> 2] = 0; //@line 157
 _printf(10970, $vararg_buffer5) | 0; //@line 158
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 159
 _putchar(10) | 0; //@line 160
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 54; //@line 163
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 165
  sp = STACKTOP; //@line 166
  STACKTOP = sp; //@line 167
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 169
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 170
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 171
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 55; //@line 174
  sp = STACKTOP; //@line 175
  STACKTOP = sp; //@line 176
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx12 | 0); //@line 178
  STACKTOP = sp; //@line 179
  return;
 }
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_418($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20500
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20502
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20504
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20508
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20512
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20514
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20516
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20518
 __ZN4mbed6Ticker6detachEv($2 + 1048 | 0); //@line 20520
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 20522
 _printf(10904, $4) | 0; //@line 20523
 HEAP32[$8 >> 2] = 1; //@line 20524
 _printf(10970, $8) | 0; //@line 20525
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 20526
 _putchar(10) | 0; //@line 20527
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 57; //@line 20530
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 20531
  HEAP32[$21 >> 2] = $2; //@line 20532
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 20533
  HEAP32[$22 >> 2] = $12; //@line 20534
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 20535
  HEAP32[$23 >> 2] = $14; //@line 20536
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 20537
  HEAP32[$24 >> 2] = $16; //@line 20538
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 20539
  HEAP32[$25 >> 2] = $18; //@line 20540
  sp = STACKTOP; //@line 20541
  return;
 }
 ___async_unwind = 0; //@line 20544
 HEAP32[$ReallocAsyncCtx2 >> 2] = 57; //@line 20545
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 20546
 HEAP32[$21 >> 2] = $2; //@line 20547
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 20548
 HEAP32[$22 >> 2] = $12; //@line 20549
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 20550
 HEAP32[$23 >> 2] = $14; //@line 20551
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 20552
 HEAP32[$24 >> 2] = $16; //@line 20553
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 20554
 HEAP32[$25 >> 2] = $18; //@line 20555
 sp = STACKTOP; //@line 20556
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28092
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28094
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28100
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 28107
  _printf(12994, $10) | 0; //@line 28108
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 28109
  _putchar(10) | 0; //@line 28110
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 453; //@line 28113
   $18 = $ReallocAsyncCtx + 4 | 0; //@line 28114
   HEAP32[$18 >> 2] = $2; //@line 28115
   $19 = $ReallocAsyncCtx + 8 | 0; //@line 28116
   HEAP32[$19 >> 2] = $4; //@line 28117
   $20 = $ReallocAsyncCtx + 12 | 0; //@line 28118
   HEAP32[$20 >> 2] = $4; //@line 28119
   sp = STACKTOP; //@line 28120
   return;
  }
  ___async_unwind = 0; //@line 28123
  HEAP32[$ReallocAsyncCtx >> 2] = 453; //@line 28124
  $18 = $ReallocAsyncCtx + 4 | 0; //@line 28125
  HEAP32[$18 >> 2] = $2; //@line 28126
  $19 = $ReallocAsyncCtx + 8 | 0; //@line 28127
  HEAP32[$19 >> 2] = $4; //@line 28128
  $20 = $ReallocAsyncCtx + 12 | 0; //@line 28129
  HEAP32[$20 >> 2] = $4; //@line 28130
  sp = STACKTOP; //@line 28131
  return;
 } else {
  $16 = HEAP32[$2 >> 2] | 0; //@line 28134
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28135
  __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 28136
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 28139
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 28140
   HEAP32[$17 >> 2] = $2; //@line 28141
   sp = STACKTOP; //@line 28142
   return;
  }
  ___async_unwind = 0; //@line 28145
  HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 28146
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 28147
  HEAP32[$17 >> 2] = $2; //@line 28148
  sp = STACKTOP; //@line 28149
  return;
 }
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $$09$i = 0, $1 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5898
 STACKTOP = STACKTOP + 144 | 0; //@line 5899
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 5899
 $1 = sp + 16 | 0; //@line 5900
 $2 = sp; //@line 5901
 HEAP32[$2 >> 2] = $varargs; //@line 5902
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5903
 $3 = _vsnprintf($1, 128, $0, $2) | 0; //@line 5904
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 731; //@line 5907
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5909
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5911
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5913
  sp = STACKTOP; //@line 5914
  STACKTOP = sp; //@line 5915
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5917
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 5920
  return;
 }
 if (!(HEAP32[5721] | 0)) {
  _serial_init(22888, 2, 3); //@line 5925
  $$09$i = 0; //@line 5926
 } else {
  $$09$i = 0; //@line 5928
 }
 while (1) {
  $12 = HEAP8[$1 + $$09$i >> 0] | 0; //@line 5933
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5934
  _serial_putc(22888, $12); //@line 5935
  if (___async) {
   label = 7; //@line 5938
   break;
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5941
  $18 = $$09$i + 1 | 0; //@line 5942
  if (($18 | 0) == ($3 | 0)) {
   label = 9; //@line 5945
   break;
  } else {
   $$09$i = $18; //@line 5948
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx2 >> 2] = 732; //@line 5952
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$09$i; //@line 5954
  HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 5956
  HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 5958
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 5960
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 5962
  sp = STACKTOP; //@line 5963
  STACKTOP = sp; //@line 5964
  return;
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 5967
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36670
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36672
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36674
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36676
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36678
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36680
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 36684
 HEAP8[$4 >> 0] = 0; //@line 36685
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 36689
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 36690
 $16 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $4, $6, 0, 0, 0) | 0; //@line 36691
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 551; //@line 36694
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 36695
  HEAP32[$17 >> 2] = $2; //@line 36696
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 36697
  HEAP32[$18 >> 2] = $8; //@line 36698
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 36699
  HEAP32[$19 >> 2] = $6; //@line 36700
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 36701
  HEAP32[$20 >> 2] = $4; //@line 36702
  $21 = $ReallocAsyncCtx3 + 20 | 0; //@line 36703
  HEAP32[$21 >> 2] = $10; //@line 36704
  sp = STACKTOP; //@line 36705
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 36709
 ___async_unwind = 0; //@line 36710
 HEAP32[$ReallocAsyncCtx3 >> 2] = 551; //@line 36711
 $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 36712
 HEAP32[$17 >> 2] = $2; //@line 36713
 $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 36714
 HEAP32[$18 >> 2] = $8; //@line 36715
 $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 36716
 HEAP32[$19 >> 2] = $6; //@line 36717
 $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 36718
 HEAP32[$20 >> 2] = $4; //@line 36719
 $21 = $ReallocAsyncCtx3 + 20 | 0; //@line 36720
 HEAP32[$21 >> 2] = $10; //@line 36721
 sp = STACKTOP; //@line 36722
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_266($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1863
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1865
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1867
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1869
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1871
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 1874
  $9 = _mbedtls_cipher_cmac_update(22532, 13588, 16) | 0; //@line 1875
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 1878
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 1879
   HEAP32[$10 >> 2] = $2; //@line 1880
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 1881
   HEAP32[$11 >> 2] = $4; //@line 1882
   $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 1883
   HEAP32[$12 >> 2] = $6; //@line 1884
   sp = STACKTOP; //@line 1885
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 1889
  ___async_unwind = 0; //@line 1890
  HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 1891
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 1892
  HEAP32[$10 >> 2] = $2; //@line 1893
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 1894
  HEAP32[$11 >> 2] = $4; //@line 1895
  $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 1896
  HEAP32[$12 >> 2] = $6; //@line 1897
  sp = STACKTOP; //@line 1898
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 1901
  _mbedtls_cipher_free(22532); //@line 1902
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1905
   $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 1906
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 1907
   sp = STACKTOP; //@line 1908
   return;
  }
  ___async_unwind = 0; //@line 1911
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1912
  $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 1913
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 1914
  sp = STACKTOP; //@line 1915
  return;
 }
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1439
 STACKTOP = STACKTOP + 32 | 0; //@line 1440
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1440
 $vararg_buffer5 = sp + 24 | 0; //@line 1441
 $vararg_buffer3 = sp + 16 | 0; //@line 1442
 $vararg_buffer1 = sp + 8 | 0; //@line 1443
 $2 = $1 & 1; //@line 1445
 $3 = $0 + 689 | 0; //@line 1446
 HEAP8[$3 >> 0] = 1; //@line 1447
 _printf(10904, sp) | 0; //@line 1448
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$3 >> 0]; //@line 1451
 _printf(11079, $vararg_buffer1) | 0; //@line 1452
 $AsyncCtx10 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1453
 _putchar(10) | 0; //@line 1454
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 87; //@line 1457
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 1459
  HEAP8[$AsyncCtx10 + 8 >> 0] = $2; //@line 1461
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer3; //@line 1463
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer3; //@line 1465
  HEAP8[$AsyncCtx10 + 20 >> 0] = $1 & 1; //@line 1468
  HEAP32[$AsyncCtx10 + 24 >> 2] = $vararg_buffer5; //@line 1470
  HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer5; //@line 1472
  sp = STACKTOP; //@line 1473
  STACKTOP = sp; //@line 1474
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 1476
 HEAP8[$0 + 776 >> 0] = $2; //@line 1478
 _printf(10904, $vararg_buffer3) | 0; //@line 1479
 HEAP32[$vararg_buffer5 >> 2] = $1 & 1; //@line 1481
 _printf(11136, $vararg_buffer5) | 0; //@line 1482
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1483
 _putchar(10) | 0; //@line 1484
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 88; //@line 1487
  sp = STACKTOP; //@line 1488
  STACKTOP = sp; //@line 1489
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1491
  STACKTOP = sp; //@line 1492
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_495($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 34063
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34065
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34069
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34071
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34073
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34075
 HEAP8[$2 + 376 >> 0] = (HEAP32[$0 + 8 >> 2] | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 34084
 $20 = HEAP8[$2 + 378 >> 0] | 0; //@line 34086
 HEAP8[$2 + 379 >> 0] = $20; //@line 34088
 HEAP8[$6 >> 0] = $20; //@line 34089
 HEAP8[$8 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 34093
 HEAP32[$8 + 4 >> 2] = $10; //@line 34095
 $26 = HEAP32[$2 >> 2] | 0; //@line 34096
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 12 >> 2] | 0; //@line 34099
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 34100
 FUNCTION_TABLE_vii[$29 & 31]($26, $8); //@line 34101
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34104
  $30 = $ReallocAsyncCtx + 4 | 0; //@line 34105
  HEAP32[$30 >> 2] = $2; //@line 34106
  $31 = $ReallocAsyncCtx + 8 | 0; //@line 34107
  HEAP32[$31 >> 2] = $10; //@line 34108
  $32 = $ReallocAsyncCtx + 12 | 0; //@line 34109
  HEAP32[$32 >> 2] = $12; //@line 34110
  $33 = $ReallocAsyncCtx + 16 | 0; //@line 34111
  HEAP32[$33 >> 2] = $6; //@line 34112
  sp = STACKTOP; //@line 34113
  return;
 }
 ___async_unwind = 0; //@line 34116
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34117
 $30 = $ReallocAsyncCtx + 4 | 0; //@line 34118
 HEAP32[$30 >> 2] = $2; //@line 34119
 $31 = $ReallocAsyncCtx + 8 | 0; //@line 34120
 HEAP32[$31 >> 2] = $10; //@line 34121
 $32 = $ReallocAsyncCtx + 12 | 0; //@line 34122
 HEAP32[$32 >> 2] = $12; //@line 34123
 $33 = $ReallocAsyncCtx + 16 | 0; //@line 34124
 HEAP32[$33 >> 2] = $6; //@line 34125
 sp = STACKTOP; //@line 34126
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_272($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2186
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2188
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2190
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2196
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 2203
  _printf(12994, $10) | 0; //@line 2204
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 2205
  _putchar(10) | 0; //@line 2206
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 433; //@line 2209
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 2210
   HEAP32[$16 >> 2] = $2; //@line 2211
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 2212
   HEAP32[$17 >> 2] = $4; //@line 2213
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 2214
   HEAP32[$18 >> 2] = $4; //@line 2215
   sp = STACKTOP; //@line 2216
   return;
  }
  ___async_unwind = 0; //@line 2219
  HEAP32[$ReallocAsyncCtx >> 2] = 433; //@line 2220
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 2221
  HEAP32[$16 >> 2] = $2; //@line 2222
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 2223
  HEAP32[$17 >> 2] = $4; //@line 2224
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 2225
  HEAP32[$18 >> 2] = $4; //@line 2226
  sp = STACKTOP; //@line 2227
  return;
 } else {
  $19 = HEAP32[$2 >> 2] | 0; //@line 2230
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 2231
  __ZN7LoRaPHY18put_radio_to_sleepEv($19); //@line 2232
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 436; //@line 2235
   $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 2236
   HEAP32[$20 >> 2] = $2; //@line 2237
   sp = STACKTOP; //@line 2238
   return;
  }
  ___async_unwind = 0; //@line 2241
  HEAP32[$ReallocAsyncCtx3 >> 2] = 436; //@line 2242
  $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 2243
  HEAP32[$20 >> 2] = $2; //@line 2244
  sp = STACKTOP; //@line 2245
  return;
 }
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 20594
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 20597
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 20598
  $$sink = $26 & 1; //@line 20599
  HEAP8[$0 >> 0] = $$sink; //@line 20600
  $27 = $0 + 3 | 0; //@line 20601
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 20602
  return;
 } else {
  $$01315 = 0; //@line 20605
  $$016 = 0; //@line 20605
  $5 = 0; //@line 20605
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 20609
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 20612
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 20616
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 20623
    $$1 = $$016 + 2 << 24 >> 24; //@line 20624
    $$114 = $7; //@line 20624
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 20631
    $$1 = $$016 + 1 << 24 >> 24; //@line 20632
    $$114 = $$01315; //@line 20632
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 20638
    $$114 = $5 + 2 & 255; //@line 20638
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 20643
    $$114 = $$01315 + 1 << 24 >> 24; //@line 20643
    break;
   }
  default:
   {
    $$1 = $$016; //@line 20647
    $$114 = $$01315; //@line 20647
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 20650
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 20654
   $$016 = $$1; //@line 20654
   $5 = $23 & 255; //@line 20654
  } else {
   $$0$lcssa = $$1; //@line 20656
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 20660
 $$sink = $26 & 1; //@line 20661
 HEAP8[$0 >> 0] = $$sink; //@line 20662
 $27 = $0 + 3 | 0; //@line 20663
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 20664
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 10790
 $4 = HEAP32[$3 >> 2] | 0; //@line 10791
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 10798
   label = 5; //@line 10799
  } else {
   $$1 = 0; //@line 10801
  }
 } else {
  $12 = $4; //@line 10805
  label = 5; //@line 10806
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 10810
   $10 = HEAP32[$9 >> 2] | 0; //@line 10811
   $14 = $10; //@line 10814
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 10819
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 10827
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 10831
       $$141 = $0; //@line 10831
       $$143 = $1; //@line 10831
       $31 = $14; //@line 10831
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 10834
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 10841
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 10846
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 10849
      break L5;
     }
     $$139 = $$038; //@line 10855
     $$141 = $0 + $$038 | 0; //@line 10855
     $$143 = $1 - $$038 | 0; //@line 10855
     $31 = HEAP32[$9 >> 2] | 0; //@line 10855
    } else {
     $$139 = 0; //@line 10857
     $$141 = $0; //@line 10857
     $$143 = $1; //@line 10857
     $31 = $14; //@line 10857
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 10860
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 10863
   $$1 = $$139 + $$143 | 0; //@line 10865
  }
 } while (0);
 return $$1 | 0; //@line 10868
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_160($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32223
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32225
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32227
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32229
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32231
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32233
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32235
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32237
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32239
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32241
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32243
 $24 = HEAP16[$0 + 48 >> 1] | 0; //@line 32245
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 32251
 _printf(10904, HEAP32[$0 + 52 >> 2] | 0) | 0; //@line 32254
 HEAP32[$30 >> 2] = 5; //@line 32255
 _printf(10999, $30) | 0; //@line 32256
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(52) | 0; //@line 32257
 _putchar(10) | 0; //@line 32258
 if (!___async) {
  ___async_unwind = 0; //@line 32261
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 32263
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 32265
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 32267
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 32269
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 32271
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 32273
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 32275
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 32277
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 32279
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 32281
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 32283
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 32285
 HEAP16[$ReallocAsyncCtx5 + 48 >> 1] = $24; //@line 32287
 sp = STACKTOP; //@line 32288
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10465
 STACKTOP = STACKTOP + 16 | 0; //@line 10466
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10466
 $2 = $0 + 1876 | 0; //@line 10469
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10473
  _printf(12684, sp + 8 | 0) | 0; //@line 10474
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10475
  _putchar(10) | 0; //@line 10476
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 334; //@line 10479
   sp = STACKTOP; //@line 10480
   STACKTOP = sp; //@line 10481
   return 0; //@line 10481
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10483
  $$0 = -1012; //@line 10484
  STACKTOP = sp; //@line 10485
  return $$0 | 0; //@line 10485
 } else {
  $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 10488
  $8 = HEAP32[$1 + 8 >> 2] | 0; //@line 10490
  $10 = HEAP32[$1 + 12 >> 2] | 0; //@line 10492
  $12 = HEAP8[$1 + 16 >> 0] | 0; //@line 10494
  HEAP8[$0 + 1936 >> 0] = 0; //@line 10496
  HEAP32[$0 + 1960 >> 2] = 0; //@line 10498
  HEAP32[$0 + 1956 >> 2] = 0; //@line 10500
  HEAP32[$0 + 1944 >> 2] = $8; //@line 10503
  HEAP32[$0 + 1948 >> 2] = $10; //@line 10505
  HEAP32[$0 + 1940 >> 2] = $6; //@line 10506
  HEAP8[$0 + 1952 >> 0] = $12; //@line 10508
  HEAP32[$2 >> 2] = 2; //@line 10509
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10510
  $20 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10511
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 335; //@line 10514
   sp = STACKTOP; //@line 10515
   STACKTOP = sp; //@line 10516
   return 0; //@line 10516
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10518
  $$0 = $20; //@line 10519
  STACKTOP = sp; //@line 10520
  return $$0 | 0; //@line 10520
 }
 return 0; //@line 10522
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_502($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 34866
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34870
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 34872
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34874
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34876
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34880
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34884
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 21; //@line 34889
  HEAP8[$4 + 4 >> 0] = $6; //@line 34891
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 34892
  $23 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($8, $4) | 0; //@line 34893
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 333; //@line 34896
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 34897
   HEAP32[$24 >> 2] = $18; //@line 34898
   sp = STACKTOP; //@line 34899
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 34903
  ___async_unwind = 0; //@line 34904
  HEAP32[$ReallocAsyncCtx4 >> 2] = 333; //@line 34905
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 34906
  HEAP32[$24 >> 2] = $18; //@line 34907
  sp = STACKTOP; //@line 34908
  return;
 } else {
  _printf(11887, $10) | 0; //@line 34911
  _printf(12745, $14) | 0; //@line 34912
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 34913
  _putchar(10) | 0; //@line 34914
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 332; //@line 34917
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 34918
   HEAP32[$21 >> 2] = $18; //@line 34919
   sp = STACKTOP; //@line 34920
   return;
  }
  ___async_unwind = 0; //@line 34923
  HEAP32[$ReallocAsyncCtx >> 2] = 332; //@line 34924
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 34925
  HEAP32[$21 >> 2] = $18; //@line 34926
  sp = STACKTOP; //@line 34927
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_296($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3197
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3199
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3201
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3203
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3205
 $9 = HEAP32[$2 >> 2] | 0; //@line 3206
 $11 = $6 + 12 | 0; //@line 3208
 HEAP32[$6 >> 2] = 532; //@line 3209
 HEAP32[$6 + 4 >> 2] = 0; //@line 3211
 HEAP32[$6 + 8 >> 2] = $4; //@line 3213
 HEAP32[$11 >> 2] = 848; //@line 3214
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 3215
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($9, $4 + 1056 | 0, $6); //@line 3216
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 3219
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 3220
  HEAP32[$12 >> 2] = $11; //@line 3221
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 3222
  HEAP32[$13 >> 2] = $2; //@line 3223
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 3224
  HEAP32[$14 >> 2] = $4; //@line 3225
  $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 3226
  HEAP32[$15 >> 2] = $8; //@line 3227
  $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 3228
  HEAP32[$16 >> 2] = $6; //@line 3229
  sp = STACKTOP; //@line 3230
  return;
 }
 ___async_unwind = 0; //@line 3233
 HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 3234
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 3235
 HEAP32[$12 >> 2] = $11; //@line 3236
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 3237
 HEAP32[$13 >> 2] = $2; //@line 3238
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 3239
 HEAP32[$14 >> 2] = $4; //@line 3240
 $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 3241
 HEAP32[$15 >> 2] = $8; //@line 3242
 $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 3243
 HEAP32[$16 >> 2] = $6; //@line 3244
 sp = STACKTOP; //@line 3245
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1381
 STACKTOP = STACKTOP + 32 | 0; //@line 1382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1382
 $vararg_buffer5 = sp + 24 | 0; //@line 1383
 $vararg_buffer3 = sp + 16 | 0; //@line 1384
 $vararg_buffer1 = sp + 8 | 0; //@line 1385
 $4 = $0 + 689 | 0; //@line 1388
 HEAP8[$4 >> 0] = $1; //@line 1389
 _printf(10904, sp) | 0; //@line 1390
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$4 >> 0]; //@line 1393
 _printf(11079, $vararg_buffer1) | 0; //@line 1394
 $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1395
 _putchar(10) | 0; //@line 1396
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 85; //@line 1399
  HEAP32[$AsyncCtx11 + 4 >> 2] = $vararg_buffer3; //@line 1401
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 1403
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 1405
  HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 1407
  HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 1409
  HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer5; //@line 1411
  sp = STACKTOP; //@line 1412
  STACKTOP = sp; //@line 1413
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1415
 _printf(10904, $vararg_buffer3) | 0; //@line 1416
 HEAP32[$vararg_buffer5 >> 2] = $1; //@line 1418
 HEAP32[$vararg_buffer5 + 4 >> 2] = $2 & 255; //@line 1420
 _printf(11158, $vararg_buffer5) | 0; //@line 1421
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1422
 _putchar(10) | 0; //@line 1423
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 86; //@line 1426
  sp = STACKTOP; //@line 1427
  STACKTOP = sp; //@line 1428
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1430
  STACKTOP = sp; //@line 1431
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_436($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22321
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22323
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22327
 $8 = $0 + 16 | 0; //@line 22329
 $10 = HEAP32[$8 >> 2] | 0; //@line 22331
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 22334
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 22336
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 22338
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 22340
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 22341
 $18 = HEAP32[$2 >> 2] | 0; //@line 22342
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 22346
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22347
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 22348
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 22351
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 22352
   HEAP32[$22 >> 2] = $15; //@line 22353
   sp = STACKTOP; //@line 22354
   return;
  }
  ___async_unwind = 0; //@line 22357
  HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 22358
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 22359
  HEAP32[$22 >> 2] = $15; //@line 22360
  sp = STACKTOP; //@line 22361
  return;
 }
 $24 = HEAP32[$15 + 784 >> 2] | 0; //@line 22365
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 22371
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 22377
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 22378
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 22379
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22382
  sp = STACKTOP; //@line 22383
  return;
 }
 ___async_unwind = 0; //@line 22386
 HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22387
 sp = STACKTOP; //@line 22388
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_492($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 33872
 STACKTOP = STACKTOP + 16 | 0; //@line 33873
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 33873
 $$byval_copy = sp; //@line 33874
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33876
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33878
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33880
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33882
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33884
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33886
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33888
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33890
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33892
 $20 = HEAP32[$2 + 1328 >> 2] | 0; //@line 33894
 HEAP32[$18 >> 2] = 361; //@line 33895
 HEAP32[$18 + 4 >> 2] = 0; //@line 33897
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(36) | 0; //@line 33898
 HEAP32[$$byval_copy >> 2] = HEAP32[$18 >> 2]; //@line 33899
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 33899
 $21 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($20, $2, $$byval_copy) | 0; //@line 33900
 if (!___async) {
  HEAP32[___async_retval >> 2] = $21; //@line 33904
  ___async_unwind = 0; //@line 33905
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 362; //@line 33907
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $16; //@line 33909
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $2; //@line 33911
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $4; //@line 33913
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $6; //@line 33915
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 33917
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $10; //@line 33919
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $12; //@line 33921
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $14; //@line 33923
 sp = STACKTOP; //@line 33924
 STACKTOP = sp; //@line 33925
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17685
 STACKTOP = STACKTOP + 32 | 0; //@line 17686
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17686
 $$byval_copy = sp + 8 | 0; //@line 17687
 $1 = sp + 16 | 0; //@line 17689
 _printf(12967, sp) | 0; //@line 17690
 _printf(12994, $$byval_copy) | 0; //@line 17691
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17692
 _putchar(10) | 0; //@line 17693
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 517; //@line 17696
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17698
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17700
  sp = STACKTOP; //@line 17701
  STACKTOP = sp; //@line 17702
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17704
 $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17706
 HEAP32[$1 >> 2] = 361; //@line 17707
 HEAP32[$1 + 4 >> 2] = 0; //@line 17709
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17710
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17711
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17711
 $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 17712
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 518; //@line 17715
  sp = STACKTOP; //@line 17716
  STACKTOP = sp; //@line 17717
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 17719
 if ($6 | 0) {
  STACKTOP = sp; //@line 17722
  return;
 }
 $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17724
 _mbed_assert_internal(12851, 12860, 217); //@line 17725
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 519; //@line 17728
  sp = STACKTOP; //@line 17729
  STACKTOP = sp; //@line 17730
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17732
 STACKTOP = sp; //@line 17733
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17454
 STACKTOP = STACKTOP + 32 | 0; //@line 17455
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17455
 $$byval_copy = sp + 8 | 0; //@line 17456
 $1 = sp + 16 | 0; //@line 17458
 _printf(12967, sp) | 0; //@line 17459
 _printf(13449, $$byval_copy) | 0; //@line 17460
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17461
 _putchar(10) | 0; //@line 17462
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 507; //@line 17465
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17467
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17469
  sp = STACKTOP; //@line 17470
  STACKTOP = sp; //@line 17471
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17473
 $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17475
 HEAP32[$1 >> 2] = 508; //@line 17476
 HEAP32[$1 + 4 >> 2] = 0; //@line 17478
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17479
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17480
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17480
 $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 17481
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 509; //@line 17484
  sp = STACKTOP; //@line 17485
  STACKTOP = sp; //@line 17486
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 17488
 if ($6 | 0) {
  STACKTOP = sp; //@line 17491
  return;
 }
 $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17493
 _mbed_assert_internal(12851, 12860, 209); //@line 17494
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 510; //@line 17497
  sp = STACKTOP; //@line 17498
  STACKTOP = sp; //@line 17499
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17501
 STACKTOP = sp; //@line 17502
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2024
 if (!$0) {
  $$0 = -24832; //@line 2027
  return $$0 | 0; //@line 2028
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2030
 if (!$5) {
  $$0 = -24832; //@line 2033
  return $$0 | 0; //@line 2034
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2045
   return $$0 | 0; //@line 2046
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2050
 HEAP32[$0 + 8 >> 2] = $3; //@line 2052
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2068
    return $$0 | 0; //@line 2069
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2074
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2076
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2077
   $33 = FUNCTION_TABLE_iiii[$30 & 15]($32, $1, $2) | 0; //@line 2078
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 675; //@line 2081
    sp = STACKTOP; //@line 2082
    return 0; //@line 2083
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2085
   $$0 = $33; //@line 2086
   return $$0 | 0; //@line 2087
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 2093
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2095
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2096
 $25 = FUNCTION_TABLE_iiii[$22 & 15]($24, $1, $2) | 0; //@line 2097
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 674; //@line 2100
  sp = STACKTOP; //@line 2101
  return 0; //@line 2102
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2104
 $$0 = $25; //@line 2105
 return $$0 | 0; //@line 2106
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19596
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19598
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19604
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19606
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 19609
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 19612
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 19614
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 19616
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 19618
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 19620
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 19622
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 19624
 $27 = HEAP32[$2 >> 2] | 0; //@line 19625
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 19628
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 19632
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 19633
 FUNCTION_TABLE_vii[$30 & 31]($27, $34); //@line 19634
 if (!___async) {
  ___async_unwind = 0; //@line 19637
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 627; //@line 19639
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 19641
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 19643
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 19645
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 19648
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 19651
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 19653
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 19655
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 19657
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 19659
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 19661
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 19663
 sp = STACKTOP; //@line 19664
 return;
}
function _mbedtls_gcm_setkey__async_cb_508($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 35533
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35535
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35537
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35539
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35541
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35543
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 35547
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 35550
 dest = $2; //@line 35551
 stop = dest + 16 | 0; //@line 35551
 do {
  HEAP8[dest >> 0] = 0; //@line 35551
  dest = dest + 1 | 0; //@line 35551
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 35552
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 35553
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 693; //@line 35556
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 35557
  HEAP32[$12 >> 2] = $2; //@line 35558
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 35559
  HEAP32[$13 >> 2] = $2; //@line 35560
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 35561
  HEAP32[$14 >> 2] = $8; //@line 35562
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 35563
  HEAP32[$15 >> 2] = $4; //@line 35564
  sp = STACKTOP; //@line 35565
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 35569
 ___async_unwind = 0; //@line 35570
 HEAP32[$ReallocAsyncCtx >> 2] = 693; //@line 35571
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 35572
 HEAP32[$12 >> 2] = $2; //@line 35573
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 35574
 HEAP32[$13 >> 2] = $2; //@line 35575
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 35576
 HEAP32[$14 >> 2] = $8; //@line 35577
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 35578
 HEAP32[$15 >> 2] = $4; //@line 35579
 sp = STACKTOP; //@line 35580
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_161($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 32296
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32300
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32302
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32304
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32306
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32308
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32310
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32312
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32314
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32316
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32318
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32320
 $26 = HEAP16[$0 + 52 >> 1] | 0; //@line 32322
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(56) | 0; //@line 32323
 __ZN4mbed5Timer5startEv($2); //@line 32324
 if (!___async) {
  ___async_unwind = 0; //@line 32327
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 99; //@line 32329
 HEAP16[$ReallocAsyncCtx11 + 4 >> 1] = $26; //@line 32331
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $2; //@line 32333
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 32335
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 32337
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 32339
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 32341
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 32343
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $16; //@line 32345
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $4; //@line 32347
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $18; //@line 32349
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $20; //@line 32351
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $22; //@line 32353
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $24; //@line 32355
 sp = STACKTOP; //@line 32356
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30551
 STACKTOP = STACKTOP + 16 | 0; //@line 30552
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 30552
 $$byval_copy = sp; //@line 30553
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30555
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30557
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30559
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30561
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 30563
 HEAP32[$4 >> 2] = 361; //@line 30564
 HEAP32[$4 + 4 >> 2] = 0; //@line 30566
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30567
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 30568
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 30568
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 30569
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 564; //@line 30572
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 30573
  HEAP32[$12 >> 2] = $6; //@line 30574
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 30575
  HEAP32[$13 >> 2] = $2; //@line 30576
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 30577
  HEAP32[$14 >> 2] = $8; //@line 30578
  sp = STACKTOP; //@line 30579
  STACKTOP = sp; //@line 30580
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 30583
 ___async_unwind = 0; //@line 30584
 HEAP32[$ReallocAsyncCtx4 >> 2] = 564; //@line 30585
 $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 30586
 HEAP32[$12 >> 2] = $6; //@line 30587
 $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 30588
 HEAP32[$13 >> 2] = $2; //@line 30589
 $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 30590
 HEAP32[$14 >> 2] = $8; //@line 30591
 sp = STACKTOP; //@line 30592
 STACKTOP = sp; //@line 30593
 return;
}
function _main__async_cb_146($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31339
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31343
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31345
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23168, 23176) | 0; //@line 31348
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23168) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 31352
  _puts(15396) | 0; //@line 31353
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 31356
   sp = STACKTOP; //@line 31357
   return;
  }
  ___async_unwind = 0; //@line 31360
  HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 31361
  sp = STACKTOP; //@line 31362
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23168, 5) | 0; //@line 31365
 HEAP8[$4 >> 0] = 0; //@line 31366
 HEAP32[$4 + 4 >> 2] = 23873; //@line 31368
 HEAP32[$4 + 8 >> 2] = 23881; //@line 31370
 HEAP32[$4 + 12 >> 2] = 23889; //@line 31372
 HEAP8[$4 + 16 >> 0] = 3; //@line 31374
 $15 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23168, $4) | 0; //@line 31375
 switch ($15 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $15; //@line 31381
   _printf(15430, $6) | 0; //@line 31382
   HEAP32[___async_retval >> 2] = -1; //@line 31384
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31388
 _puts(15459) | 0; //@line 31389
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 31392
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 31393
  HEAP32[$16 >> 2] = $4; //@line 31394
  sp = STACKTOP; //@line 31395
  return;
 }
 ___async_unwind = 0; //@line 31398
 HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 31399
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 31400
 HEAP32[$16 >> 2] = $4; //@line 31401
 sp = STACKTOP; //@line 31402
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_469($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 26227
 STACKTOP = STACKTOP + 16 | 0; //@line 26228
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26228
 $$byval_copy = sp; //@line 26229
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26231
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26235
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26237
 $10 = HEAP32[$4 + 1328 >> 2] | 0; //@line 26239
 HEAP32[$6 >> 2] = 361; //@line 26240
 HEAP32[$6 + 4 >> 2] = 0; //@line 26242
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 26243
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 26244
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 26244
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $4, $$byval_copy) | 0; //@line 26245
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 474; //@line 26248
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 26249
  HEAP32[$12 >> 2] = $2; //@line 26250
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 26251
  HEAP32[$13 >> 2] = $4; //@line 26252
  $14 = $ReallocAsyncCtx10 + 12 | 0; //@line 26253
  HEAP32[$14 >> 2] = $8; //@line 26254
  sp = STACKTOP; //@line 26255
  STACKTOP = sp; //@line 26256
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 26259
 ___async_unwind = 0; //@line 26260
 HEAP32[$ReallocAsyncCtx10 >> 2] = 474; //@line 26261
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 26262
 HEAP32[$12 >> 2] = $2; //@line 26263
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 26264
 HEAP32[$13 >> 2] = $4; //@line 26265
 $14 = $ReallocAsyncCtx10 + 12 | 0; //@line 26266
 HEAP32[$14 >> 2] = $8; //@line 26267
 sp = STACKTOP; //@line 26268
 STACKTOP = sp; //@line 26269
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$sink$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $41 = 0, $44 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26630
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 26633
 $8 = $0 + 25 | 0; //@line 26634
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 26637
 $14 = $0 + 26 | 0; //@line 26640
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 26645
  $$0 = 0; //@line 26646
  return $$0 | 0; //@line 26647
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 26652
  return $$0 | 0; //@line 26653
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 26657
 $22 = HEAP32[$4 >> 2] | 0; //@line 26658
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 26661
  return $$0 | 0; //@line 26662
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 26669
  return $$0 | 0; //@line 26670
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 26672
 $$sink$i = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 26679
 $$0$i$i = $$sink$i << 24 >> 24 == $28 << 24 >> 24 ? $$sink$i : ($28 & 255) + 255 & 255; //@line 26684
 HEAP8[$2 >> 0] = $$0$i$i; //@line 26685
 $41 = ($$0$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 26689
 if ($41 | $1 ^ 1) {
  $$0 = $41; //@line 26693
  return $$0 | 0; //@line 26694
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 26698
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 26699
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 26700
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 659; //@line 26703
  sp = STACKTOP; //@line 26704
  return 0; //@line 26705
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26707
 $$0 = 0; //@line 26708
 return $$0 | 0; //@line 26709
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_339($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 5923
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5927
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5929
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5931
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5932
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 5936
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 5937
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 5938
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 244; //@line 5941
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 5942
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 5943
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 5944
   HEAP32[$13 >> 2] = $6; //@line 5945
   sp = STACKTOP; //@line 5946
   return;
  }
  ___async_unwind = 0; //@line 5949
  HEAP32[$ReallocAsyncCtx2 >> 2] = 244; //@line 5950
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 5951
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 5952
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 5953
  HEAP32[$13 >> 2] = $6; //@line 5954
  sp = STACKTOP; //@line 5955
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 5961
  return;
 }
 $ReallocAsyncCtx33 = _emscripten_realloc_async_context(8) | 0; //@line 5964
 _mbed_assert_internal(12851, 11935, 1141); //@line 5965
 if (___async) {
  HEAP32[$ReallocAsyncCtx33 >> 2] = 245; //@line 5968
  $15 = $ReallocAsyncCtx33 + 4 | 0; //@line 5969
  HEAP32[$15 >> 2] = $6; //@line 5970
  sp = STACKTOP; //@line 5971
  return;
 }
 ___async_unwind = 0; //@line 5974
 HEAP32[$ReallocAsyncCtx33 >> 2] = 245; //@line 5975
 $15 = $ReallocAsyncCtx33 + 4 | 0; //@line 5976
 HEAP32[$15 >> 2] = $6; //@line 5977
 sp = STACKTOP; //@line 5978
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_326($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5242
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5244
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5246
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5248
 HEAP8[$2 + 1932 >> 0] = 1; //@line 5250
 $8 = $2 + 1892 | 0; //@line 5251
 $9 = HEAP32[$8 >> 2] | 0; //@line 5252
 if (!$9) {
  HEAP32[___async_retval >> 2] = 0; //@line 5256
  return;
 }
 $13 = HEAP32[$2 + 2288 >> 2] | 0; //@line 5261
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 5263
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 5264
 FUNCTION_TABLE_vii[$15 & 31]($6, $2 + 1880 | 0); //@line 5265
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 256; //@line 5268
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 5269
  HEAP32[$16 >> 2] = $8; //@line 5270
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 5271
  HEAP32[$17 >> 2] = $6; //@line 5272
  $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 5273
  HEAP32[$18 >> 2] = $13; //@line 5274
  $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 5275
  HEAP32[$19 >> 2] = $6; //@line 5276
  $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 5277
  HEAP32[$20 >> 2] = $4; //@line 5278
  sp = STACKTOP; //@line 5279
  return;
 }
 ___async_unwind = 0; //@line 5282
 HEAP32[$ReallocAsyncCtx5 >> 2] = 256; //@line 5283
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 5284
 HEAP32[$16 >> 2] = $8; //@line 5285
 $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 5286
 HEAP32[$17 >> 2] = $6; //@line 5287
 $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 5288
 HEAP32[$18 >> 2] = $13; //@line 5289
 $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 5290
 HEAP32[$19 >> 2] = $6; //@line 5291
 $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 5292
 HEAP32[$20 >> 2] = $4; //@line 5293
 sp = STACKTOP; //@line 5294
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_338($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5861
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5865
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5867
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5869
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5870
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 5874
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 5875
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 5876
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 5879
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 5880
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 5881
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 5882
   HEAP32[$13 >> 2] = $6; //@line 5883
   sp = STACKTOP; //@line 5884
   return;
  }
  ___async_unwind = 0; //@line 5887
  HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 5888
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 5889
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 5890
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 5891
  HEAP32[$13 >> 2] = $6; //@line 5892
  sp = STACKTOP; //@line 5893
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 5899
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 5902
 _mbed_assert_internal(12851, 11935, 1186); //@line 5903
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 250; //@line 5906
  $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 5907
  HEAP32[$15 >> 2] = $6; //@line 5908
  sp = STACKTOP; //@line 5909
  return;
 }
 ___async_unwind = 0; //@line 5912
 HEAP32[$ReallocAsyncCtx32 >> 2] = 250; //@line 5913
 $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 5914
 HEAP32[$15 >> 2] = $6; //@line 5915
 sp = STACKTOP; //@line 5916
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_337($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx31 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5799
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5803
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5805
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5807
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5808
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 5812
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 5813
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 5814
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 5817
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 5818
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 5819
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 5820
   HEAP32[$13 >> 2] = $6; //@line 5821
   sp = STACKTOP; //@line 5822
   return;
  }
  ___async_unwind = 0; //@line 5825
  HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 5826
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 5827
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 5828
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 5829
  HEAP32[$13 >> 2] = $6; //@line 5830
  sp = STACKTOP; //@line 5831
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 5837
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 5840
 _mbed_assert_internal(12851, 11935, 1223); //@line 5841
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 259; //@line 5844
  $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 5845
  HEAP32[$15 >> 2] = $6; //@line 5846
  sp = STACKTOP; //@line 5847
  return;
 }
 ___async_unwind = 0; //@line 5850
 HEAP32[$ReallocAsyncCtx31 >> 2] = 259; //@line 5851
 $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 5852
 HEAP32[$15 >> 2] = $6; //@line 5853
 sp = STACKTOP; //@line 5854
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26958
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 26961
  HEAP32[$21 >> 2] = 0; //@line 26962
  return;
 }
 $4 = $1 + 12 | 0; //@line 26965
 $5 = HEAP32[$4 >> 2] | 0; //@line 26966
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 26971
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26972
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 26973
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 660; //@line 26976
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 26978
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 26980
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 26982
    sp = STACKTOP; //@line 26983
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 26986
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 26991
 $13 = HEAP32[$12 >> 2] | 0; //@line 26992
 do {
  if (!$13) {
   $20 = 0; //@line 26996
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 26999
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 27000
   FUNCTION_TABLE_vii[$16 & 31]($1, $2); //@line 27001
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 661; //@line 27004
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 27006
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 27008
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 27010
    sp = STACKTOP; //@line 27011
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 27014
    $20 = HEAP32[$12 >> 2] | 0; //@line 27016
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 27021
 $21 = $1 + 16 | 0; //@line 27022
 HEAP32[$21 >> 2] = 0; //@line 27023
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29424
 STACKTOP = STACKTOP + 16 | 0; //@line 29425
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29425
 $$byval_copy = sp; //@line 29426
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29428
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29432
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29434
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 29436
 HEAP32[$4 >> 2] = 361; //@line 29437
 HEAP32[$4 + 4 >> 2] = 0; //@line 29439
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 29440
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 29441
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 29441
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 29442
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 443; //@line 29445
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 29446
  HEAP32[$12 >> 2] = $6; //@line 29447
  $13 = $ReallocAsyncCtx5 + 8 | 0; //@line 29448
  HEAP32[$13 >> 2] = $2; //@line 29449
  $14 = $ReallocAsyncCtx5 + 12 | 0; //@line 29450
  HEAP32[$14 >> 2] = $8; //@line 29451
  sp = STACKTOP; //@line 29452
  STACKTOP = sp; //@line 29453
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 29456
 ___async_unwind = 0; //@line 29457
 HEAP32[$ReallocAsyncCtx5 >> 2] = 443; //@line 29458
 $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 29459
 HEAP32[$12 >> 2] = $6; //@line 29460
 $13 = $ReallocAsyncCtx5 + 8 | 0; //@line 29461
 HEAP32[$13 >> 2] = $2; //@line 29462
 $14 = $ReallocAsyncCtx5 + 12 | 0; //@line 29463
 HEAP32[$14 >> 2] = $8; //@line 29464
 sp = STACKTOP; //@line 29465
 STACKTOP = sp; //@line 29466
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_380($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9334
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9338
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9340
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9342
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9344
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9346
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9348
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9350
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9353
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 9356
 _equeue_event_dtor($4, 274); //@line 9357
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 9358
 $20 = _equeue_post($8, 275, $4) | 0; //@line 9359
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 9362
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 9363
  HEAP32[$21 >> 2] = $10; //@line 9364
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 9365
  HEAP32[$22 >> 2] = $12; //@line 9366
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 9367
  HEAP32[$23 >> 2] = $14; //@line 9368
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 9369
  HEAP32[$24 >> 2] = $16; //@line 9370
  sp = STACKTOP; //@line 9371
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 9375
 ___async_unwind = 0; //@line 9376
 HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 9377
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 9378
 HEAP32[$21 >> 2] = $10; //@line 9379
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 9380
 HEAP32[$22 >> 2] = $12; //@line 9381
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 9382
 HEAP32[$23 >> 2] = $14; //@line 9383
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 9384
 HEAP32[$24 >> 2] = $16; //@line 9385
 sp = STACKTOP; //@line 9386
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23584
 L1 : do {
  if (!(HEAP8[$0 + 16 >> 0] | 0)) {
   $$011 = 0; //@line 23590
  } else {
   $5 = HEAP32[$1 >> 2] | 0; //@line 23592
   if (!(HEAP32[$5 >> 2] | 0)) {
    $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 23598
    $12 = HEAP8[$1 + 4 >> 0] | 0; //@line 23600
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 23601
    $13 = FUNCTION_TABLE_iii[$10 & 31]($0, $12) | 0; //@line 23602
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 613; //@line 23605
     sp = STACKTOP; //@line 23606
     return 0; //@line 23607
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 23609
     return ($13 ? 3 : 0) | 0; //@line 23611
    }
   }
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 23616
   $18 = HEAP8[$1 + 4 >> 0] | 0; //@line 23618
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23619
   $19 = FUNCTION_TABLE_iiii[$16 & 15]($0, $5, $18) | 0; //@line 23620
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 614; //@line 23623
    sp = STACKTOP; //@line 23624
    return 0; //@line 23625
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23627
   switch ($19 | 0) {
   case 0:
    {
     $$011 = 3; //@line 23630
     break L1;
     break;
    }
   case -1004:
    {
     $$011 = 2; //@line 23635
     break L1;
     break;
    }
   case -1005:
    {
     $$011 = 1; //@line 23640
     break L1;
     break;
    }
   case -1006:
    {
     $$011 = 0; //@line 23645
     break L1;
     break;
    }
   default:
    {
     $$011 = 0; //@line 23650
     break L1;
    }
   }
  }
 } while (0);
 return $$011 | 0; //@line 23656
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_362($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7753
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7757
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7759
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7761
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7763
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7765
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7767
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7769
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7772
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 7775
 _equeue_event_dtor($4, 282); //@line 7776
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 7777
 $20 = _equeue_post($8, 283, $4) | 0; //@line 7778
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 7781
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 7782
  HEAP32[$21 >> 2] = $10; //@line 7783
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 7784
  HEAP32[$22 >> 2] = $12; //@line 7785
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 7786
  HEAP32[$23 >> 2] = $14; //@line 7787
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 7788
  HEAP32[$24 >> 2] = $16; //@line 7789
  sp = STACKTOP; //@line 7790
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 7794
 ___async_unwind = 0; //@line 7795
 HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 7796
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 7797
 HEAP32[$21 >> 2] = $10; //@line 7798
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 7799
 HEAP32[$22 >> 2] = $12; //@line 7800
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 7801
 HEAP32[$23 >> 2] = $14; //@line 7802
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 7803
 HEAP32[$24 >> 2] = $16; //@line 7804
 sp = STACKTOP; //@line 7805
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_480($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30702
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30704
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30706
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30710
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30712
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30714
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30716
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30718
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30720
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30722
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30724
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30726
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30728
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30730
 $29 = HEAP32[HEAP32[HEAP32[$0 + 12 >> 2] >> 2] >> 2] | 0; //@line 30732
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 30733
 FUNCTION_TABLE_vii[$29 & 31]($26, $28); //@line 30734
 if (!___async) {
  ___async_unwind = 0; //@line 30737
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 30739
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 30741
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 30743
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 30745
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 30747
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 30749
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 30751
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $16; //@line 30753
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $18; //@line 30755
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $20; //@line 30757
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $22; //@line 30759
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $24; //@line 30761
 sp = STACKTOP; //@line 30762
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_481($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30770
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30772
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30774
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30776
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30778
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30780
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30782
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30784
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30786
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30788
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30790
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30792
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30794
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30796
 $29 = HEAP32[HEAP32[HEAP32[$0 + 56 >> 2] >> 2] >> 2] | 0; //@line 30800
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 30801
 FUNCTION_TABLE_vii[$29 & 31]($4, $6); //@line 30802
 if (!___async) {
  ___async_unwind = 0; //@line 30805
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 30807
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 30809
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 30811
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 30813
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 30815
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 30817
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 30819
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $18; //@line 30821
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $20; //@line 30823
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $22; //@line 30825
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $24; //@line 30827
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $26; //@line 30829
 sp = STACKTOP; //@line 30830
 return;
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2550
 if (!$0) {
  $$0 = -24832; //@line 2553
  return $$0 | 0; //@line 2554
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 2561
  return $$0 | 0; //@line 2562
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2564
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 2565
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 684; //@line 2568
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2570
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2572
  sp = STACKTOP; //@line 2573
  return 0; //@line 2574
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2576
 if ($7 | 0) {
  $$0 = $7; //@line 2579
  return $$0 | 0; //@line 2580
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 2589
   return $$0 | 0; //@line 2590
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 2593
 if (!$13) {
  $$0 = -24960; //@line 2596
  return $$0 | 0; //@line 2597
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 2600
 HEAP8[$13 >> 0] = 0; //@line 2602
 HEAP8[$13 + 1 >> 0] = 0; //@line 2604
 HEAP8[$13 + 2 >> 0] = 0; //@line 2606
 HEAP8[$13 + 3 >> 0] = 0; //@line 2608
 HEAP8[$13 + 4 >> 0] = 0; //@line 2610
 HEAP8[$13 + 5 >> 0] = 0; //@line 2612
 HEAP8[$13 + 6 >> 0] = 0; //@line 2614
 HEAP8[$13 + 7 >> 0] = 0; //@line 2616
 HEAP8[$13 + 8 >> 0] = 0; //@line 2618
 HEAP8[$13 + 9 >> 0] = 0; //@line 2620
 HEAP8[$13 + 10 >> 0] = 0; //@line 2622
 HEAP8[$13 + 11 >> 0] = 0; //@line 2624
 HEAP8[$13 + 12 >> 0] = 0; //@line 2626
 HEAP8[$13 + 13 >> 0] = 0; //@line 2628
 HEAP8[$13 + 14 >> 0] = 0; //@line 2630
 HEAP8[$13 + 15 >> 0] = 0; //@line 2631
 $$0 = 0; //@line 2632
 return $$0 | 0; //@line 2633
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_197($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre10 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 35532
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35536
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35538
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35540
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35542
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 35543
 $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 35544
 if (!$$pre10) {
  HEAP32[$4 >> 2] = 0; //@line 35547
  _gpio_irq_set($10 + 28 | 0, 2, 0); //@line 35549
  return;
 }
 $13 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 35553
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 35554
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 35555
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 35558
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 35559
  HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 35560
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 35561
  HEAP32[$15 >> 2] = $4; //@line 35562
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 35563
  HEAP32[$16 >> 2] = $8; //@line 35564
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 35565
  HEAP32[$17 >> 2] = $10; //@line 35566
  sp = STACKTOP; //@line 35567
  return;
 }
 ___async_unwind = 0; //@line 35570
 HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 35571
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 35572
 HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 35573
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 35574
 HEAP32[$15 >> 2] = $4; //@line 35575
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 35576
 HEAP32[$16 >> 2] = $8; //@line 35577
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 35578
 HEAP32[$17 >> 2] = $10; //@line 35579
 sp = STACKTOP; //@line 35580
 return;
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1318
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 1319
 if (!$4) {
  $$0 = -13; //@line 1322
  return $$0 | 0; //@line 1323
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 1329
  return $$0 | 0; //@line 1330
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1332
 _mbedtls_cipher_free($0); //@line 1333
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 668; //@line 1336
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1338
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 1340
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 1342
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 1344
  sp = STACKTOP; //@line 1345
  return 0; //@line 1346
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1348
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1349
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 1350
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 669; //@line 1353
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1355
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 1357
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 1359
  sp = STACKTOP; //@line 1360
  return 0; //@line 1361
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1363
 if ($13 | 0) {
  $$0 = $13; //@line 1366
  return $$0 | 0; //@line 1367
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1369
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 1370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 670; //@line 1373
  sp = STACKTOP; //@line 1374
  return 0; //@line 1375
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1377
 $$0 = $18; //@line 1378
 return $$0 | 0; //@line 1379
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_165($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 32621
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32623
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32625
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32627
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32629
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32631
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32633
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32635
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32637
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32639
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32641
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32643
 $24 = HEAP16[$0 + 48 >> 1] | 0; //@line 32645
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(56) | 0; //@line 32646
 __ZN4mbed5TimerC2Ev($2); //@line 32647
 if (!___async) {
  ___async_unwind = 0; //@line 32650
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 98; //@line 32652
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 32654
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 32656
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 32658
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 32660
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 32662
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 32664
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $12; //@line 32666
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $14; //@line 32668
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $16; //@line 32670
 HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $18; //@line 32672
 HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $20; //@line 32674
 HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $22; //@line 32676
 HEAP16[$ReallocAsyncCtx10 + 52 >> 1] = $24; //@line 32678
 sp = STACKTOP; //@line 32679
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_446($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22895
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22899
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22901
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22903
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 22906
  _mbed_assert_internal(12851, 11935, 909); //@line 22907
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 22910
   $10 = $ReallocAsyncCtx10 + 4 | 0; //@line 22911
   HEAP32[$10 >> 2] = $4; //@line 22912
   $11 = $ReallocAsyncCtx10 + 8 | 0; //@line 22913
   HEAP32[$11 >> 2] = $6; //@line 22914
   $12 = $ReallocAsyncCtx10 + 12 | 0; //@line 22915
   HEAP32[$12 >> 2] = $8; //@line 22916
   sp = STACKTOP; //@line 22917
   return;
  }
  ___async_unwind = 0; //@line 22920
  HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 22921
  $10 = $ReallocAsyncCtx10 + 4 | 0; //@line 22922
  HEAP32[$10 >> 2] = $4; //@line 22923
  $11 = $ReallocAsyncCtx10 + 8 | 0; //@line 22924
  HEAP32[$11 >> 2] = $6; //@line 22925
  $12 = $ReallocAsyncCtx10 + 12 | 0; //@line 22926
  HEAP32[$12 >> 2] = $8; //@line 22927
  sp = STACKTOP; //@line 22928
  return;
 }
 if (!(HEAP8[$4 + 11 >> 0] | 0)) {
  return;
 }
 $16 = HEAP8[$6 >> 0] | 0; //@line 22937
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 22938
 __ZN12LoRaWANStack9handle_txEhPKhth($8, $16, 0, 0, 2) | 0; //@line 22939
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 22942
  sp = STACKTOP; //@line 22943
  return;
 }
 ___async_unwind = 0; //@line 22946
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 22947
 sp = STACKTOP; //@line 22948
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_230($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37513
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37515
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37517
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37519
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 37521
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 37523
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 37525
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 37528
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 37529
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 37545
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 37546
    if (!___async) {
     ___async_unwind = 0; //@line 37549
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 804; //@line 37551
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 37553
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 37555
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 37557
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 37559
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 37561
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 37563
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 37565
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 37567
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 37570
    sp = STACKTOP; //@line 37571
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37214
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37218
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37224
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 37228
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $17 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 37236
 $19 = HEAP32[$4 + 1108 >> 2] | 0; //@line 37238
 _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 37239
 _printf(13043, $10) | 0; //@line 37240
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 37241
 _putchar(10) | 0; //@line 37242
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 381; //@line 37245
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 37246
  HEAP32[$20 >> 2] = $14; //@line 37247
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 37248
  $$expand_i1_val = $17 & 1; //@line 37249
  HEAP8[$21 >> 0] = $$expand_i1_val; //@line 37250
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 37251
  HEAP32[$22 >> 2] = $19; //@line 37252
  $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 37253
  HEAP32[$23 >> 2] = $4; //@line 37254
  sp = STACKTOP; //@line 37255
  return;
 }
 ___async_unwind = 0; //@line 37258
 HEAP32[$ReallocAsyncCtx2 >> 2] = 381; //@line 37259
 $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 37260
 HEAP32[$20 >> 2] = $14; //@line 37261
 $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 37262
 $$expand_i1_val = $17 & 1; //@line 37263
 HEAP8[$21 >> 0] = $$expand_i1_val; //@line 37264
 $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 37265
 HEAP32[$22 >> 2] = $19; //@line 37266
 $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 37267
 HEAP32[$23 >> 2] = $4; //@line 37268
 sp = STACKTOP; //@line 37269
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_400($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19871
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19873
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19877
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19879
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19881
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19883
 $13 = HEAP32[$2 >> 2] | 0; //@line 19884
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 19887
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 19889
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 19890
 $19 = FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $18) | 0; //@line 19891
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 631; //@line 19894
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 19895
  HEAP32[$20 >> 2] = $8; //@line 19896
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 19897
  HEAP32[$21 >> 2] = $2; //@line 19898
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 19899
  HEAP32[$22 >> 2] = $10; //@line 19900
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 19901
  HEAP32[$23 >> 2] = $12; //@line 19902
  sp = STACKTOP; //@line 19903
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 19907
 ___async_unwind = 0; //@line 19908
 HEAP32[$ReallocAsyncCtx6 >> 2] = 631; //@line 19909
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 19910
 HEAP32[$20 >> 2] = $8; //@line 19911
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 19912
 HEAP32[$21 >> 2] = $2; //@line 19913
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 19914
 HEAP32[$22 >> 2] = $10; //@line 19915
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 19916
 HEAP32[$23 >> 2] = $12; //@line 19917
 sp = STACKTOP; //@line 19918
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_202($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 35692
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35694
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35696
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35700
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35704
 dest = $2; //@line 35707
 stop = dest + 50 | 0; //@line 35707
 do {
  HEAP8[dest >> 0] = 0; //@line 35707
  dest = dest + 1 | 0; //@line 35707
 } while ((dest | 0) < (stop | 0));
 $15 = __ZN16LoRaWANInterface7receiveEhPhti(23168, 15, $2, 50, 3) | 0; //@line 35708
 $16 = $15 << 16 >> 16; //@line 35709
 if ($15 << 16 >> 16 < 0) {
  HEAP32[$4 >> 2] = $16; //@line 35712
  _printf(15644, $4) | 0; //@line 35713
  return;
 }
 HEAP32[$8 >> 2] = 15; //@line 35716
 HEAP32[$8 + 4 >> 2] = $16; //@line 35718
 _printf(15671, $8) | 0; //@line 35719
 if ($15 << 16 >> 16) {
  $$07$i = 0; //@line 35722
  $21 = 0; //@line 35722
  do {
   HEAP32[$12 >> 2] = HEAPU8[$2 + $21 >> 0]; //@line 35727
   _printf(15709, $12) | 0; //@line 35728
   $$07$i = $$07$i + 1 << 24 >> 24; //@line 35729
   $21 = $$07$i & 255; //@line 35730
  } while (($21 | 0) < ($16 | 0));
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 35739
 _putchar(10) | 0; //@line 35740
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 764; //@line 35743
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 35744
  HEAP32[$19 >> 2] = $2; //@line 35745
  sp = STACKTOP; //@line 35746
  return;
 }
 ___async_unwind = 0; //@line 35749
 HEAP32[$ReallocAsyncCtx >> 2] = 764; //@line 35750
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 35751
 HEAP32[$19 >> 2] = $2; //@line 35752
 sp = STACKTOP; //@line 35753
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10529
 STACKTOP = STACKTOP + 16 | 0; //@line 10530
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10530
 $2 = $0 + 1876 | 0; //@line 10533
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10537
  _printf(12684, sp + 8 | 0) | 0; //@line 10538
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10539
  _putchar(10) | 0; //@line 10540
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 336; //@line 10543
   sp = STACKTOP; //@line 10544
   STACKTOP = sp; //@line 10545
   return 0; //@line 10545
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10547
  $$0 = -1012; //@line 10548
  STACKTOP = sp; //@line 10549
  return $$0 | 0; //@line 10549
 } else {
  $6 = HEAP32[$1 + 8 >> 2] | 0; //@line 10552
  $8 = HEAP32[$1 + 12 >> 2] | 0; //@line 10554
  $10 = HEAP32[$1 + 16 >> 2] | 0; //@line 10556
  HEAP8[$0 + 1936 >> 0] = 1; //@line 10558
  HEAP32[$0 + 1944 >> 2] = $6; //@line 10560
  HEAP32[$0 + 1948 >> 2] = $8; //@line 10562
  HEAP32[$0 + 1952 >> 2] = $10; //@line 10564
  HEAP32[$2 >> 2] = 3; //@line 10565
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10566
  $15 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10567
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 337; //@line 10570
   sp = STACKTOP; //@line 10571
   STACKTOP = sp; //@line 10572
   return 0; //@line 10572
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10574
  $$0 = $15; //@line 10575
  STACKTOP = sp; //@line 10576
  return $$0 | 0; //@line 10576
 }
 return 0; //@line 10578
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_156($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 31855
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31857
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31859
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31861
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31863
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31865
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31867
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31869
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31871
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31873
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31875
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31877
 $24 = HEAP16[$0 + 48 >> 1] | 0; //@line 31879
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(52) | 0; //@line 31880
 _wait_ms(1); //@line 31881
 if (!___async) {
  ___async_unwind = 0; //@line 31884
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 97; //@line 31886
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 31888
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 31890
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $6; //@line 31892
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 31894
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 31896
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $12; //@line 31898
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $14; //@line 31900
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $16; //@line 31902
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $18; //@line 31904
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $20; //@line 31906
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $22; //@line 31908
 HEAP16[$ReallocAsyncCtx14 + 48 >> 1] = $24; //@line 31910
 sp = STACKTOP; //@line 31911
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_285($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2771
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2773
 $3 = $2 + 1176 | 0; //@line 2774
 HEAP32[$3 >> 2] = 10108; //@line 2775
 __ZN4mbed6Ticker6detachEv($3); //@line 2776
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 2778
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 2781
  __ZN4mbed10TimerEventD2Ev($3); //@line 2782
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 115; //@line 2785
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 2786
   HEAP32[$12 >> 2] = $2; //@line 2787
   sp = STACKTOP; //@line 2788
   return;
  }
  ___async_unwind = 0; //@line 2791
  HEAP32[$ReallocAsyncCtx7 >> 2] = 115; //@line 2792
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 2793
  HEAP32[$12 >> 2] = $2; //@line 2794
  sp = STACKTOP; //@line 2795
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 2800
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 2801
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 2802
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 114; //@line 2805
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 2806
   HEAP32[$10 >> 2] = $2; //@line 2807
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 2808
   HEAP32[$11 >> 2] = $3; //@line 2809
   sp = STACKTOP; //@line 2810
   return;
  }
  ___async_unwind = 0; //@line 2813
  HEAP32[$ReallocAsyncCtx2 >> 2] = 114; //@line 2814
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 2815
  HEAP32[$10 >> 2] = $2; //@line 2816
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 2817
  HEAP32[$11 >> 2] = $3; //@line 2818
  sp = STACKTOP; //@line 2819
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_284($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2718
 $3 = $2 + 1112 | 0; //@line 2719
 HEAP32[$3 >> 2] = 10108; //@line 2720
 __ZN4mbed6Ticker6detachEv($3); //@line 2721
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 2723
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 2726
  __ZN4mbed10TimerEventD2Ev($3); //@line 2727
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 117; //@line 2730
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 2731
   HEAP32[$12 >> 2] = $2; //@line 2732
   sp = STACKTOP; //@line 2733
   return;
  }
  ___async_unwind = 0; //@line 2736
  HEAP32[$ReallocAsyncCtx6 >> 2] = 117; //@line 2737
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 2738
  HEAP32[$12 >> 2] = $2; //@line 2739
  sp = STACKTOP; //@line 2740
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 2745
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 2746
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 2747
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 2750
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 2751
   HEAP32[$10 >> 2] = $2; //@line 2752
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 2753
   HEAP32[$11 >> 2] = $3; //@line 2754
   sp = STACKTOP; //@line 2755
   return;
  }
  ___async_unwind = 0; //@line 2758
  HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 2759
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 2760
  HEAP32[$10 >> 2] = $2; //@line 2761
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 2762
  HEAP32[$11 >> 2] = $3; //@line 2763
  sp = STACKTOP; //@line 2764
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_283($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2661
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2663
 $3 = $2 + 1048 | 0; //@line 2664
 HEAP32[$3 >> 2] = 10108; //@line 2665
 __ZN4mbed6Ticker6detachEv($3); //@line 2666
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 2668
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2671
  __ZN4mbed10TimerEventD2Ev($3); //@line 2672
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 119; //@line 2675
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 2676
   HEAP32[$12 >> 2] = $2; //@line 2677
   sp = STACKTOP; //@line 2678
   return;
  }
  ___async_unwind = 0; //@line 2681
  HEAP32[$ReallocAsyncCtx5 >> 2] = 119; //@line 2682
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 2683
  HEAP32[$12 >> 2] = $2; //@line 2684
  sp = STACKTOP; //@line 2685
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 2690
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 2691
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 2692
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 118; //@line 2695
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 2696
   HEAP32[$10 >> 2] = $3; //@line 2697
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 2698
   HEAP32[$11 >> 2] = $2; //@line 2699
   sp = STACKTOP; //@line 2700
   return;
  }
  ___async_unwind = 0; //@line 2703
  HEAP32[$ReallocAsyncCtx4 >> 2] = 118; //@line 2704
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 2705
  HEAP32[$10 >> 2] = $3; //@line 2706
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 2707
  HEAP32[$11 >> 2] = $2; //@line 2708
  sp = STACKTOP; //@line 2709
  return;
 }
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10676
 STACKTOP = STACKTOP + 16 | 0; //@line 10677
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10677
 $2 = sp; //@line 10678
 $3 = $1 & 255; //@line 10679
 HEAP8[$2 >> 0] = $3; //@line 10680
 $4 = $0 + 16 | 0; //@line 10681
 $5 = HEAP32[$4 >> 2] | 0; //@line 10682
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 10689
   label = 4; //@line 10690
  } else {
   $$0 = -1; //@line 10692
  }
 } else {
  $12 = $5; //@line 10695
  label = 4; //@line 10696
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 10700
   $10 = HEAP32[$9 >> 2] | 0; //@line 10701
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 10704
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 10711
     HEAP8[$10 >> 0] = $3; //@line 10712
     $$0 = $13; //@line 10713
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 10718
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10719
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 10720
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 769; //@line 10723
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10725
    sp = STACKTOP; //@line 10726
    STACKTOP = sp; //@line 10727
    return 0; //@line 10727
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10729
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 10734
   } else {
    $$0 = -1; //@line 10736
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10740
 return $$0 | 0; //@line 10740
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_255($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1352
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1354
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1356
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 1358
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1360
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1362
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1364
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1366
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1368
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1370
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1372
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1374
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1376
 $27 = HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0; //@line 1379
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 1380
 FUNCTION_TABLE_vii[$27 & 31]($2, $4); //@line 1381
 if (!___async) {
  ___async_unwind = 0; //@line 1384
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 107; //@line 1386
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 1388
 HEAP8[$ReallocAsyncCtx + 8 >> 0] = $6; //@line 1390
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 1392
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 1394
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 1396
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $14; //@line 1398
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $16; //@line 1400
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $18; //@line 1402
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $20; //@line 1404
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $22; //@line 1406
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $24; //@line 1408
 sp = STACKTOP; //@line 1409
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 50
 STACKTOP = STACKTOP + 16 | 0; //@line 51
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 51
 $vararg_buffer1 = sp + 8 | 0; //@line 52
 $vararg_buffer = sp; //@line 53
 HEAP32[$0 + 784 >> 2] = $1; //@line 55
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 58
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 59
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 60
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 63
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 65
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 67
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 69
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 71
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 73
  sp = STACKTOP; //@line 74
  STACKTOP = sp; //@line 75
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 77
 $11 = $0 + 689 | 0; //@line 78
 HEAP8[$11 >> 0] = 0; //@line 79
 _printf(10904, $vararg_buffer) | 0; //@line 80
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$11 >> 0]; //@line 83
 _printf(11079, $vararg_buffer1) | 0; //@line 84
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _putchar(10) | 0; //@line 86
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 51; //@line 89
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 91
  sp = STACKTOP; //@line 92
  STACKTOP = sp; //@line 93
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 95
  HEAP8[$0 + 688 >> 0] = 0; //@line 97
  STACKTOP = sp; //@line 98
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4023
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4025
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4027
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4029
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4031
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4033
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4035
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4037
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4039
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4041
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4043
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4045
 $25 = $4 + 1280 | 0; //@line 4046
 HEAP32[$25 >> 2] = 0; //@line 4047
 HEAP32[$25 + 4 >> 2] = 0; //@line 4047
 HEAP32[$25 + 8 >> 2] = 0; //@line 4047
 HEAP32[$25 + 12 >> 2] = 0; //@line 4047
 HEAP8[$4 + 1296 >> 0] = 1; //@line 4049
 HEAP32[$2 >> 2] = 684; //@line 4050
 HEAP32[$4 + 668 >> 2] = $6; //@line 4052
 HEAP32[$4 + 672 >> 2] = $8; //@line 4054
 HEAP32[$4 + 652 >> 2] = $10; //@line 4056
 HEAP32[$4 + 656 >> 2] = $12; //@line 4058
 HEAP32[$4 + 664 >> 2] = $14; //@line 4060
 HEAP32[$4 + 660 >> 2] = $16; //@line 4062
 HEAP32[$4 + 676 >> 2] = $18; //@line 4064
 HEAP32[$4 + 680 >> 2] = $20; //@line 4066
 HEAP32[$4 + 684 >> 2] = $22; //@line 4068
 HEAP32[$4 + 784 >> 2] = 0; //@line 4070
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(4, $4 | 0) | 0; //@line 4073
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 4077
 $39 = _emscripten_asm_const_ii(4, $4 | 0) | 0; //@line 4078
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_297($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3251
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3253
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3255
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3257
 $7 = HEAP32[$2 >> 2] | 0; //@line 3258
 $9 = $6 + 12 | 0; //@line 3260
 HEAP32[$6 >> 2] = 535; //@line 3261
 HEAP32[$6 + 4 >> 2] = 0; //@line 3263
 HEAP32[$6 + 8 >> 2] = $4; //@line 3265
 HEAP32[$9 >> 2] = 848; //@line 3266
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 3267
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($7, $4 + 1076 | 0, $6); //@line 3268
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 3271
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 3272
  HEAP32[$10 >> 2] = $9; //@line 3273
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 3274
  HEAP32[$11 >> 2] = $2; //@line 3275
  $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 3276
  HEAP32[$12 >> 2] = $4; //@line 3277
  $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 3278
  HEAP32[$13 >> 2] = $6; //@line 3279
  sp = STACKTOP; //@line 3280
  return;
 }
 ___async_unwind = 0; //@line 3283
 HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 3284
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 3285
 HEAP32[$10 >> 2] = $9; //@line 3286
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 3287
 HEAP32[$11 >> 2] = $2; //@line 3288
 $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 3289
 HEAP32[$12 >> 2] = $4; //@line 3290
 $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 3291
 HEAP32[$13 >> 2] = $6; //@line 3292
 sp = STACKTOP; //@line 3293
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26149
 $1 = $0 + 4 | 0; //@line 26150
 $2 = HEAP32[$1 >> 2] | 0; //@line 26151
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 26154
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 26155
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 26156
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 652; //@line 26159
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 26161
  sp = STACKTOP; //@line 26162
  return 0; //@line 26163
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26165
 $7 = HEAP32[$1 >> 2] | 0; //@line 26166
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 26169
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26170
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 26171
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 653; //@line 26174
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 26176
  sp = STACKTOP; //@line 26177
  return 0; //@line 26178
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26180
 $13 = HEAP32[$1 >> 2] | 0; //@line 26181
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 26184
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26185
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 26186
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 654; //@line 26189
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 26191
  sp = STACKTOP; //@line 26192
  return 0; //@line 26193
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26195
  return $11 | 0; //@line 26196
 }
 return 0; //@line 26198
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6016
 HEAP32[$0 >> 2] = 724; //@line 6017
 HEAP8[$0 + 4 >> 0] = 0; //@line 6019
 $4 = __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 6021
 $7 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 6024
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6025
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6026
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 188; //@line 6029
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6031
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6033
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6035
  sp = STACKTOP; //@line 6036
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6039
 $12 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 6041
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6042
 FUNCTION_TABLE_vii[$12 & 31]($1, $4); //@line 6043
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 189; //@line 6046
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 6048
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 6050
  sp = STACKTOP; //@line 6051
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6054
 $17 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 6057
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6058
 FUNCTION_TABLE_vi[$17 & 1023]($1); //@line 6059
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 190; //@line 6062
  sp = STACKTOP; //@line 6063
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6066
  return;
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1448
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1450
 $7 = $2 + 156 | 0; //@line 1451
 _equeue_mutex_lock($7); //@line 1452
 $8 = $2 + 24 | 0; //@line 1453
 $9 = HEAP32[$8 >> 2] | 0; //@line 1454
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 1458
   label = 9; //@line 1459
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 1461
   $$025$i$i = $8; //@line 1462
   $13 = $9; //@line 1462
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 1464
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 1469
    $16 = HEAP32[$15 >> 2] | 0; //@line 1470
    if (!$16) {
     $$02329$i$i = $15; //@line 1473
     label = 9; //@line 1474
     break L3;
    } else {
     $$025$i$i = $15; //@line 1477
     $13 = $16; //@line 1477
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 1483
    $$02330$i$i = $$025$i$i; //@line 1486
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 1486
   } else {
    $$02329$i$i = $$025$i$i; //@line 1488
    label = 9; //@line 1489
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 1495
  $$02330$i$i = $$02329$i$i; //@line 1496
  $$sink$in$i$i = $$02329$i$i; //@line 1496
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 1500
 HEAP32[$$02330$i$i >> 2] = $6; //@line 1501
 _equeue_mutex_unlock($7); //@line 1502
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_273($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2253
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2255
 $5 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 2261
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($5) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 2267
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 2272
  $29 = $2 + 944 | 0; //@line 2273
  HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 32; //@line 2276
  return;
 }
 if ($5) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 2283
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 2288
 $12 = $2 + 356 | 0; //@line 2289
 $16 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$12 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 2293
 if ($16 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $20 = HEAP32[$12 >> 2] | 0; //@line 2300
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2302
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($20, $2 + 1056 | 0); //@line 2303
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 437; //@line 2306
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 2307
  HEAP32[$22 >> 2] = $2; //@line 2308
  sp = STACKTOP; //@line 2309
  return;
 }
 ___async_unwind = 0; //@line 2312
 HEAP32[$ReallocAsyncCtx5 >> 2] = 437; //@line 2313
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 2314
 HEAP32[$22 >> 2] = $2; //@line 2315
 sp = STACKTOP; //@line 2316
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 36972
 value = value & 255; //@line 36974
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 36977
   ptr = ptr + 1 | 0; //@line 36978
  }
  aligned_end = end & -4 | 0; //@line 36981
  block_aligned_end = aligned_end - 64 | 0; //@line 36982
  value4 = value | value << 8 | value << 16 | value << 24; //@line 36983
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 36986
   HEAP32[ptr + 4 >> 2] = value4; //@line 36987
   HEAP32[ptr + 8 >> 2] = value4; //@line 36988
   HEAP32[ptr + 12 >> 2] = value4; //@line 36989
   HEAP32[ptr + 16 >> 2] = value4; //@line 36990
   HEAP32[ptr + 20 >> 2] = value4; //@line 36991
   HEAP32[ptr + 24 >> 2] = value4; //@line 36992
   HEAP32[ptr + 28 >> 2] = value4; //@line 36993
   HEAP32[ptr + 32 >> 2] = value4; //@line 36994
   HEAP32[ptr + 36 >> 2] = value4; //@line 36995
   HEAP32[ptr + 40 >> 2] = value4; //@line 36996
   HEAP32[ptr + 44 >> 2] = value4; //@line 36997
   HEAP32[ptr + 48 >> 2] = value4; //@line 36998
   HEAP32[ptr + 52 >> 2] = value4; //@line 36999
   HEAP32[ptr + 56 >> 2] = value4; //@line 37000
   HEAP32[ptr + 60 >> 2] = value4; //@line 37001
   ptr = ptr + 64 | 0; //@line 37002
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 37006
   ptr = ptr + 4 | 0; //@line 37007
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 37012
  ptr = ptr + 1 | 0; //@line 37013
 }
 return end - num | 0; //@line 37015
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13769
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 13771
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 13773
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 13775
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 13777
 $9 = $0 + 12 | 0; //@line 13778
 $10 = HEAP32[$9 >> 2] | 0; //@line 13779
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13783
   _mbed_assert_internal(15061, 15066, 2830); //@line 13784
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 419; //@line 13787
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 13789
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 13791
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 13793
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 13795
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 13797
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 13799
    sp = STACKTOP; //@line 13800
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13803
    $19 = HEAP32[$9 >> 2] | 0; //@line 13805
    break;
   }
  } else {
   $19 = $10; //@line 13809
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 13812
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13813
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 13814
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 420; //@line 13817
  sp = STACKTOP; //@line 13818
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13821
  return;
 }
}
function _fflush__async_cb_250($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1102
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1104
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 1106
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 1110
  } else {
   $$02327 = $$02325; //@line 1112
   $$02426 = $AsyncRetVal; //@line 1112
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 1119
    } else {
     $16 = 0; //@line 1121
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 1133
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 1136
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 1139
     break L3;
    } else {
     $$02327 = $$023; //@line 1142
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 1145
   $13 = ___fflush_unlocked($$02327) | 0; //@line 1146
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 1150
    ___async_unwind = 0; //@line 1151
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 773; //@line 1153
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 1155
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 1157
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 1159
   sp = STACKTOP; //@line 1160
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 1164
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 1166
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1207
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1209
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 1211
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1213
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1215
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1217
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1219
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1221
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1223
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1225
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1227
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1229
 $25 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 1232
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 1233
 FUNCTION_TABLE_viiiiiiiiiiiiii[$25 & 1]($2, 0, $4, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $6); //@line 1234
 if (!___async) {
  ___async_unwind = 0; //@line 1237
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 108; //@line 1239
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 1241
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 1243
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 1245
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 1247
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 1249
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 1251
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $18; //@line 1253
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $20; //@line 1255
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $22; //@line 1257
 sp = STACKTOP; //@line 1258
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_352($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6594
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6598
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6600
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6602
 if (!$AsyncRetVal) {
  $10 = HEAP16[$0 + 4 >> 1] & 255; //@line 6606
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 6607
  $11 = _mbedtls_cipher_cmac_update(22532, $4, $10) | 0; //@line 6608
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 603; //@line 6611
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 6612
   HEAP32[$12 >> 2] = $6; //@line 6613
   sp = STACKTOP; //@line 6614
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 6618
  ___async_unwind = 0; //@line 6619
  HEAP32[$ReallocAsyncCtx >> 2] = 603; //@line 6620
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 6621
  HEAP32[$12 >> 2] = $6; //@line 6622
  sp = STACKTOP; //@line 6623
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 6626
  _mbedtls_cipher_free(22532); //@line 6627
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 6630
   $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 6631
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 6632
   sp = STACKTOP; //@line 6633
   return;
  }
  ___async_unwind = 0; //@line 6636
  HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 6637
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 6638
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 6639
  sp = STACKTOP; //@line 6640
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28048
 STACKTOP = STACKTOP + 16 | 0; //@line 28049
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 28049
 $$byval_copy = sp; //@line 28050
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28052
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28054
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28056
 $8 = HEAP32[$2 + 1328 >> 2] | 0; //@line 28058
 HEAP32[$4 >> 2] = 361; //@line 28059
 HEAP32[$4 + 4 >> 2] = 0; //@line 28061
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28062
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 28063
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 28063
 $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $2, $$byval_copy) | 0; //@line 28064
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 28067
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 28068
  HEAP32[$10 >> 2] = $6; //@line 28069
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 28070
  HEAP32[$11 >> 2] = $2; //@line 28071
  sp = STACKTOP; //@line 28072
  STACKTOP = sp; //@line 28073
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 28076
 ___async_unwind = 0; //@line 28077
 HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 28078
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 28079
 HEAP32[$10 >> 2] = $6; //@line 28080
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 28081
 HEAP32[$11 >> 2] = $2; //@line 28082
 sp = STACKTOP; //@line 28083
 STACKTOP = sp; //@line 28084
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26015
 $2 = $0 + 4 | 0; //@line 26016
 $3 = HEAP32[$2 >> 2] | 0; //@line 26017
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 26020
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 26021
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26022
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 645; //@line 26025
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 26027
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 26030
  sp = STACKTOP; //@line 26031
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26034
 $9 = HEAP32[$2 >> 2] | 0; //@line 26035
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 26038
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26039
 FUNCTION_TABLE_vii[$12 & 31]($9, $1); //@line 26040
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 646; //@line 26043
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 26045
  sp = STACKTOP; //@line 26046
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26049
 $14 = HEAP32[$2 >> 2] | 0; //@line 26050
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 26053
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26054
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 26055
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 647; //@line 26058
  sp = STACKTOP; //@line 26059
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26062
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_75($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27179
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27183
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27185
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27187
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27189
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27191
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27193
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27196
 _equeue_event_delay($4, $6); //@line 27197
 _equeue_event_dtor($4, 370); //@line 27198
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27199
 $16 = _equeue_post($8, 371, $4) | 0; //@line 27200
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 664; //@line 27203
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 27204
  HEAP32[$17 >> 2] = $10; //@line 27205
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 27206
  HEAP32[$18 >> 2] = $12; //@line 27207
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 27208
  HEAP32[$19 >> 2] = $14; //@line 27209
  sp = STACKTOP; //@line 27210
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 27214
 ___async_unwind = 0; //@line 27215
 HEAP32[$ReallocAsyncCtx4 >> 2] = 664; //@line 27216
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 27217
 HEAP32[$17 >> 2] = $10; //@line 27218
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 27219
 HEAP32[$18 >> 2] = $12; //@line 27220
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 27221
 HEAP32[$19 >> 2] = $14; //@line 27222
 sp = STACKTOP; //@line 27223
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23784
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23786
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23788
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 23791
  $27 = ___async_retval; //@line 23792
  HEAP32[$27 >> 2] = $$0; //@line 23793
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 23803
   $27 = ___async_retval; //@line 23804
   HEAP32[$27 >> 2] = $$0; //@line 23805
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 23809
 if (!$9) {
  $$0 = -24960; //@line 23812
  $27 = ___async_retval; //@line 23813
  HEAP32[$27 >> 2] = $$0; //@line 23814
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 23818
 HEAP8[$9 >> 0] = 0; //@line 23820
 HEAP8[$9 + 1 >> 0] = 0; //@line 23822
 HEAP8[$9 + 2 >> 0] = 0; //@line 23824
 HEAP8[$9 + 3 >> 0] = 0; //@line 23826
 HEAP8[$9 + 4 >> 0] = 0; //@line 23828
 HEAP8[$9 + 5 >> 0] = 0; //@line 23830
 HEAP8[$9 + 6 >> 0] = 0; //@line 23832
 HEAP8[$9 + 7 >> 0] = 0; //@line 23834
 HEAP8[$9 + 8 >> 0] = 0; //@line 23836
 HEAP8[$9 + 9 >> 0] = 0; //@line 23838
 HEAP8[$9 + 10 >> 0] = 0; //@line 23840
 HEAP8[$9 + 11 >> 0] = 0; //@line 23842
 HEAP8[$9 + 12 >> 0] = 0; //@line 23844
 HEAP8[$9 + 13 >> 0] = 0; //@line 23846
 HEAP8[$9 + 14 >> 0] = 0; //@line 23848
 HEAP8[$9 + 15 >> 0] = 0; //@line 23849
 $$0 = 0; //@line 23850
 $27 = ___async_retval; //@line 23851
 HEAP32[$27 >> 2] = $$0; //@line 23852
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_264($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1764
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1766
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1768
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1770
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1772
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 1775
  $9 = _mbedtls_cipher_cmac_update(22532, $2, $4) | 0; //@line 1776
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 1779
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 1780
   HEAP32[$10 >> 2] = $6; //@line 1781
   sp = STACKTOP; //@line 1782
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 1786
  ___async_unwind = 0; //@line 1787
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 1788
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 1789
  HEAP32[$10 >> 2] = $6; //@line 1790
  sp = STACKTOP; //@line 1791
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 1794
  _mbedtls_cipher_free(22532); //@line 1795
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1798
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 1799
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 1800
   sp = STACKTOP; //@line 1801
   return;
  }
  ___async_unwind = 0; //@line 1804
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1805
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 1806
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 1807
  sp = STACKTOP; //@line 1808
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 37446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37450
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37452
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37454
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37456
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 37458
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 37460
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 37463
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 37464
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 37473
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 37474
    if (!___async) {
     ___async_unwind = 0; //@line 37477
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 805; //@line 37479
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 37481
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 37483
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 37485
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 37487
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 37489
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 37491
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 37493
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 37496
    sp = STACKTOP; //@line 37497
    return;
   }
  }
 }
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_407($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20151
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20153
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20155
 $5 = $2 + 1892 | 0; //@line 20156
 $6 = HEAP32[$5 >> 2] | 0; //@line 20157
 if (!$6) {
  return;
 }
 $10 = HEAP32[$2 + 2288 >> 2] | 0; //@line 20164
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 20166
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 20167
 FUNCTION_TABLE_vii[$12 & 31]($4, $2 + 1880 | 0); //@line 20168
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 20171
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 20172
  HEAP32[$13 >> 2] = $5; //@line 20173
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 20174
  HEAP32[$14 >> 2] = $4; //@line 20175
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 20176
  HEAP32[$15 >> 2] = $10; //@line 20177
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 20178
  HEAP32[$16 >> 2] = $4; //@line 20179
  sp = STACKTOP; //@line 20180
  return;
 }
 ___async_unwind = 0; //@line 20183
 HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 20184
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 20185
 HEAP32[$13 >> 2] = $5; //@line 20186
 $14 = $ReallocAsyncCtx + 8 | 0; //@line 20187
 HEAP32[$14 >> 2] = $4; //@line 20188
 $15 = $ReallocAsyncCtx + 12 | 0; //@line 20189
 HEAP32[$15 >> 2] = $10; //@line 20190
 $16 = $ReallocAsyncCtx + 16 | 0; //@line 20191
 HEAP32[$16 >> 2] = $4; //@line 20192
 sp = STACKTOP; //@line 20193
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_214($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36450
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36454
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36456
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 36457
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 36461
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 36462
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 36463
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 384; //@line 36466
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 36467
   HEAP32[$10 >> 2] = $4; //@line 36468
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 36469
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 36470
   sp = STACKTOP; //@line 36471
   return;
  }
  ___async_unwind = 0; //@line 36474
  HEAP32[$ReallocAsyncCtx >> 2] = 384; //@line 36475
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 36476
  HEAP32[$10 >> 2] = $4; //@line 36477
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 36478
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 36479
  sp = STACKTOP; //@line 36480
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36487
 _mbed_assert_internal(12851, 12860, 141); //@line 36488
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 385; //@line 36491
  sp = STACKTOP; //@line 36492
  return;
 }
 ___async_unwind = 0; //@line 36495
 HEAP32[$ReallocAsyncCtx3 >> 2] = 385; //@line 36496
 sp = STACKTOP; //@line 36497
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24501
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24503
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24505
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24507
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24509
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24511
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24513
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24515
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24517
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24519
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 24523
 HEAP8[$4 >> 0] = 0; //@line 24524
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 24528
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 24529
 $24 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $10, 0, 0, 0) | 0; //@line 24530
 if (!___async) {
  HEAP32[___async_retval >> 2] = $24; //@line 24534
  ___async_unwind = 0; //@line 24535
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 483; //@line 24537
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 24539
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 24541
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 24543
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $16; //@line 24545
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $18; //@line 24547
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $6; //@line 24549
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $4; //@line 24551
 sp = STACKTOP; //@line 24552
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4234
 $2 = $0 + 16 | 0; //@line 4236
 $4 = HEAP32[$2 >> 2] | 0; //@line 4238
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 4241
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 4245
  $30 = 0; //@line 4245
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 4246
  $32 = tempRet0; //@line 4247
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 4248
  $34 = tempRet0; //@line 4249
  return $33 | 0; //@line 4250
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 4253
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4254
 $12 = _ticker_read_us($11) | 0; //@line 4255
 $13 = tempRet0; //@line 4256
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 171; //@line 4259
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4261
  $16 = $AsyncCtx + 8 | 0; //@line 4263
  HEAP32[$16 >> 2] = $4; //@line 4265
  HEAP32[$16 + 4 >> 2] = $7; //@line 4268
  sp = STACKTOP; //@line 4269
  return 0; //@line 4270
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4272
 $21 = $0 + 8 | 0; //@line 4274
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 4280
 $29 = $27; //@line 4282
 $30 = tempRet0; //@line 4282
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 4283
 $32 = tempRet0; //@line 4284
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 4285
 $34 = tempRet0; //@line 4286
 return $33 | 0; //@line 4287
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $17 = 0, $19 = 0, $20 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2773
 STACKTOP = STACKTOP + 16 | 0; //@line 2774
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2774
 _printf(10904, sp) | 0; //@line 2777
 _printf(11320, sp + 8 | 0) | 0; //@line 2778
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2779
 _putchar(10) | 0; //@line 2780
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 128; //@line 2783
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 2785
  sp = STACKTOP; //@line 2786
  STACKTOP = sp; //@line 2787
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 2789
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 2791
 HEAP8[$0 + 688 >> 0] = 0; //@line 2793
 $5 = HEAP32[$0 + 784 >> 2] | 0; //@line 2795
 if (!$5) {
  STACKTOP = sp; //@line 2798
  return;
 }
 $8 = HEAP32[$5 + 44 >> 2] | 0; //@line 2801
 if (!$8) {
  STACKTOP = sp; //@line 2804
  return;
 }
 $14 = HEAPU8[$0 + 782 >> 0] | 0; //@line 2810
 $17 = HEAP8[$0 + 781 >> 0] | 0; //@line 2813
 $19 = HEAP8[$0 + 780 >> 0] | 0; //@line 2815
 $20 = HEAP32[$8 >> 2] | 0; //@line 2816
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2817
 FUNCTION_TABLE_viiiii[$20 & 7]($5 + 32 | 0, $0 + 788 | 0, $14, $17, $19); //@line 2818
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 129; //@line 2821
  sp = STACKTOP; //@line 2822
  STACKTOP = sp; //@line 2823
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2825
 STACKTOP = sp; //@line 2826
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2144
 STACKTOP = STACKTOP + 16 | 0; //@line 2145
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2145
 $$byval_copy = sp; //@line 2146
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2148
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2150
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2152
 $8 = HEAP32[$2 + 1328 >> 2] | 0; //@line 2154
 HEAP32[$4 >> 2] = 361; //@line 2155
 HEAP32[$4 + 4 >> 2] = 0; //@line 2157
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 2158
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 2159
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 2159
 $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $2, $$byval_copy) | 0; //@line 2160
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 434; //@line 2163
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 2164
  HEAP32[$10 >> 2] = $6; //@line 2165
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 2166
  HEAP32[$11 >> 2] = $2; //@line 2167
  sp = STACKTOP; //@line 2168
  STACKTOP = sp; //@line 2169
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 2172
 ___async_unwind = 0; //@line 2173
 HEAP32[$ReallocAsyncCtx4 >> 2] = 434; //@line 2174
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 2175
 HEAP32[$10 >> 2] = $6; //@line 2176
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 2177
 HEAP32[$11 >> 2] = $2; //@line 2178
 sp = STACKTOP; //@line 2179
 STACKTOP = sp; //@line 2180
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_293($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3004
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3006
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3008
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 3013
  _mbed_assert_internal(12851, 12860, 201); //@line 3014
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 425; //@line 3017
   $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 3018
   HEAP32[$7 >> 2] = $2; //@line 3019
   $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 3020
   HEAP32[$8 >> 2] = $4; //@line 3021
   sp = STACKTOP; //@line 3022
   return;
  }
  ___async_unwind = 0; //@line 3025
  HEAP32[$ReallocAsyncCtx4 >> 2] = 425; //@line 3026
  $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 3027
  HEAP32[$7 >> 2] = $2; //@line 3028
  $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 3029
  HEAP32[$8 >> 2] = $4; //@line 3030
  sp = STACKTOP; //@line 3031
  return;
 }
 $9 = $4 + 944 | 0; //@line 3034
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 34; //@line 3037
 $13 = HEAP32[$4 + 356 >> 2] | 0; //@line 3039
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3041
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($13, $4 + 996 | 0, 1); //@line 3042
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 3045
  sp = STACKTOP; //@line 3046
  return;
 }
 ___async_unwind = 0; //@line 3049
 HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 3050
 sp = STACKTOP; //@line 3051
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_373($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8590
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8592
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8594
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 8596
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8598
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8600
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 8602
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8604
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8606
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8608
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8610
 $21 = HEAP32[$2 >> 2] | 0; //@line 8611
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 8614
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 8615
 FUNCTION_TABLE_vii[$24 & 31]($21, $4); //@line 8616
 if (!___async) {
  ___async_unwind = 0; //@line 8619
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 621; //@line 8621
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 8623
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 8625
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 8627
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 8629
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 8631
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 8633
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 8635
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 8637
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 8639
 sp = STACKTOP; //@line 8640
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_306($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 3851
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3853
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3855
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3857
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3859
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3861
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3863
 $13 = $2 + 356 | 0; //@line 3864
 $14 = HEAP32[$13 >> 2] | 0; //@line 3865
 $16 = $6 + 12 | 0; //@line 3867
 HEAP32[$6 >> 2] = 523; //@line 3868
 HEAP32[$6 + 4 >> 2] = 0; //@line 3870
 HEAP32[$6 + 8 >> 2] = $2; //@line 3872
 HEAP32[$16 >> 2] = 848; //@line 3873
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 3874
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($14, $2 + 996 | 0, $6); //@line 3875
 if (!___async) {
  ___async_unwind = 0; //@line 3878
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 524; //@line 3880
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $13; //@line 3882
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 3884
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 3886
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 3888
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 3890
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 3892
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $12; //@line 3894
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $16; //@line 3896
 sp = STACKTOP; //@line 3897
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36516
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 36521
  } else {
   $9 = $4 + 4 | 0; //@line 36523
   $10 = HEAP32[$9 >> 2] | 0; //@line 36524
   $11 = $4 + 8 | 0; //@line 36525
   $12 = HEAP32[$11 >> 2] | 0; //@line 36526
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 36530
    HEAP32[$6 >> 2] = 0; //@line 36531
    HEAP32[$2 >> 2] = 0; //@line 36532
    HEAP32[$11 >> 2] = 0; //@line 36533
    HEAP32[$9 >> 2] = 0; //@line 36534
    $$0 = 0; //@line 36535
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 36542
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 36543
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 36544
   if (!___async) {
    ___async_unwind = 0; //@line 36547
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 775; //@line 36549
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 36551
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 36553
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 36555
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 36557
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 36559
   sp = STACKTOP; //@line 36560
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 36565
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_77($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27254
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27258
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27260
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27262
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 27263
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 27264
 $9 = HEAP32[$4 >> 2] | 0; //@line 27265
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 27269
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27270
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 27271
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 27274
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 27275
   HEAP32[$13 >> 2] = $8; //@line 27276
   sp = STACKTOP; //@line 27277
   return;
  }
  ___async_unwind = 0; //@line 27280
  HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 27281
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 27282
  HEAP32[$13 >> 2] = $8; //@line 27283
  sp = STACKTOP; //@line 27284
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27291
 _mbed_assert_internal(13734, 13752, 57); //@line 27292
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 27295
  sp = STACKTOP; //@line 27296
  return;
 }
 ___async_unwind = 0; //@line 27299
 HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 27300
 sp = STACKTOP; //@line 27301
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35466
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35470
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35472
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35474
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35476
 $$pre = HEAP32[$2 >> 2] | 0; //@line 35477
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 35480
  _gpio_irq_set($10 + 28 | 0, 2, 1); //@line 35482
  return;
 }
 $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 35486
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 35487
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 35488
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 35491
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 35492
  HEAP32[$14 >> 2] = $2; //@line 35493
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 35494
  HEAP32[$15 >> 2] = $4; //@line 35495
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 35496
  HEAP32[$16 >> 2] = $10; //@line 35497
  sp = STACKTOP; //@line 35498
  return;
 }
 ___async_unwind = 0; //@line 35501
 HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 35502
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 35503
 HEAP32[$14 >> 2] = $2; //@line 35504
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 35505
 HEAP32[$15 >> 2] = $4; //@line 35506
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 35507
 HEAP32[$16 >> 2] = $10; //@line 35508
 sp = STACKTOP; //@line 35509
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16339
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16341
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16346
 $7 = HEAP32[$2 >> 2] | 0; //@line 16347
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 16350
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16352
  FUNCTION_TABLE_vii[$10 & 31]($7, 0); //@line 16353
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 650; //@line 16356
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 16357
   HEAP32[$12 >> 2] = $2; //@line 16358
   sp = STACKTOP; //@line 16359
   return;
  }
  ___async_unwind = 0; //@line 16362
  HEAP32[$ReallocAsyncCtx3 >> 2] = 650; //@line 16363
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 16364
  HEAP32[$12 >> 2] = $2; //@line 16365
  sp = STACKTOP; //@line 16366
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16369
  FUNCTION_TABLE_vii[$10 & 31]($7, $6); //@line 16370
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 649; //@line 16373
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 16374
   HEAP32[$11 >> 2] = $2; //@line 16375
   sp = STACKTOP; //@line 16376
   return;
  }
  ___async_unwind = 0; //@line 16379
  HEAP32[$ReallocAsyncCtx2 >> 2] = 649; //@line 16380
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 16381
  HEAP32[$11 >> 2] = $2; //@line 16382
  sp = STACKTOP; //@line 16383
  return;
 }
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1003
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 1013
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 1013
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 1013
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 1017
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 1020
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 1023
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 1031
  } else {
   $20 = 0; //@line 1033
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 1043
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 1047
  HEAP32[___async_retval >> 2] = $$1; //@line 1049
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 1052
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 1053
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 1057
  ___async_unwind = 0; //@line 1058
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 773; //@line 1060
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 1062
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 1064
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 1066
 sp = STACKTOP; //@line 1067
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13971
 STACKTOP = STACKTOP + 16 | 0; //@line 13972
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13972
 _printf(12967, sp) | 0; //@line 13975
 _printf(13168, sp + 8 | 0) | 0; //@line 13976
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13977
 _putchar(10) | 0; //@line 13978
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 427; //@line 13981
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13983
  sp = STACKTOP; //@line 13984
  STACKTOP = sp; //@line 13985
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13987
 $3 = HEAP32[$0 + 356 >> 2] | 0; //@line 13989
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13991
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $0 + 1076 | 0); //@line 13992
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 428; //@line 13995
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 13997
  sp = STACKTOP; //@line 13998
  STACKTOP = sp; //@line 13999
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 14001
 if (HEAP8[$0 + 373 >> 0] | 0) {
  HEAP8[$0 + 377 >> 0] = 1; //@line 14007
  $10 = $0 + 968 | 0; //@line 14008
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 14011
 }
 if ((HEAP32[$0 + 360 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 14017
  return;
 }
 $16 = $0 + 944 | 0; //@line 14019
 HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 14022
 STACKTOP = sp; //@line 14023
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25962
 $1 = $0 + 4 | 0; //@line 25963
 $2 = HEAP32[$1 >> 2] | 0; //@line 25964
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 25967
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25968
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 25969
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 642; //@line 25972
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25974
  sp = STACKTOP; //@line 25975
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25978
 $7 = HEAP32[$1 >> 2] | 0; //@line 25979
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 25982
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25983
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 25984
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 643; //@line 25987
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 25989
  sp = STACKTOP; //@line 25990
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25993
 $12 = HEAP32[$1 >> 2] | 0; //@line 25994
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 25997
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25998
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 25999
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 644; //@line 26002
  sp = STACKTOP; //@line 26003
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26006
  return;
 }
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10315
 STACKTOP = STACKTOP + 32 | 0; //@line 10316
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10316
 $2 = sp + 12 | 0; //@line 10319
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10324
  _printf(12684, sp + 8 | 0) | 0; //@line 10325
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10326
  _putchar(10) | 0; //@line 10327
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 328; //@line 10330
   sp = STACKTOP; //@line 10331
   STACKTOP = sp; //@line 10332
   return 0; //@line 10332
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10334
  $$0 = -1012; //@line 10335
  STACKTOP = sp; //@line 10336
  return $$0 | 0; //@line 10336
 } else {
  HEAP32[$2 >> 2] = 2; //@line 10339
  HEAP8[$2 + 4 >> 0] = $1 & 1; //@line 10341
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10343
  $9 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0 + 4 | 0, $2) | 0; //@line 10344
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 329; //@line 10347
   HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 10349
   sp = STACKTOP; //@line 10350
   STACKTOP = sp; //@line 10351
   return 0; //@line 10351
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10353
  $$0 = $9; //@line 10354
  STACKTOP = sp; //@line 10355
  return $$0 | 0; //@line 10355
 }
 return 0; //@line 10357
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25910
 $1 = $0 + 4 | 0; //@line 25911
 $2 = HEAP32[$1 >> 2] | 0; //@line 25912
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 25915
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25916
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 25917
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 639; //@line 25920
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25922
  sp = STACKTOP; //@line 25923
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25926
 $7 = HEAP32[$1 >> 2] | 0; //@line 25927
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 25930
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25931
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 25932
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 640; //@line 25935
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 25937
  sp = STACKTOP; //@line 25938
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25941
 $12 = HEAP32[$1 >> 2] | 0; //@line 25942
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 25945
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25946
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 25947
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 641; //@line 25950
  sp = STACKTOP; //@line 25951
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25954
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_376($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8844
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8854
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 8856
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8858
 $18 = HEAP32[$10 >> 2] | 0; //@line 8865
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 8868
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 8871
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 8872
 FUNCTION_TABLE_viii[$21 & 7]($18, 1, $24); //@line 8873
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 624; //@line 8876
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 8877
  HEAP32[$25 >> 2] = $10; //@line 8878
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 8879
  HEAP8[$26 >> 0] = $12; //@line 8880
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 8881
  HEAP32[$27 >> 2] = $14; //@line 8882
  sp = STACKTOP; //@line 8883
  return;
 }
 ___async_unwind = 0; //@line 8886
 HEAP32[$ReallocAsyncCtx8 >> 2] = 624; //@line 8887
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 8888
 HEAP32[$25 >> 2] = $10; //@line 8889
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 8890
 HEAP8[$26 >> 0] = $12; //@line 8891
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 8892
 HEAP32[$27 >> 2] = $14; //@line 8893
 sp = STACKTOP; //@line 8894
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_375($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8787
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8797
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 8799
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8801
 $18 = HEAP32[$10 >> 2] | 0; //@line 8808
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 8811
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 8814
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 8815
 FUNCTION_TABLE_viii[$21 & 7]($18, 0, $24); //@line 8816
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 624; //@line 8819
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 8820
  HEAP32[$25 >> 2] = $10; //@line 8821
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 8822
  HEAP8[$26 >> 0] = $12; //@line 8823
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 8824
  HEAP32[$27 >> 2] = $14; //@line 8825
  sp = STACKTOP; //@line 8826
  return;
 }
 ___async_unwind = 0; //@line 8829
 HEAP32[$ReallocAsyncCtx8 >> 2] = 624; //@line 8830
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 8831
 HEAP32[$25 >> 2] = $10; //@line 8832
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 8833
 HEAP8[$26 >> 0] = $12; //@line 8834
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 8835
 HEAP32[$27 >> 2] = $14; //@line 8836
 sp = STACKTOP; //@line 8837
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2702
 STACKTOP = STACKTOP + 16 | 0; //@line 2703
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2703
 _printf(10904, sp) | 0; //@line 2706
 _printf(11028, sp + 8 | 0) | 0; //@line 2707
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2708
 _putchar(10) | 0; //@line 2709
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 2712
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2714
  sp = STACKTOP; //@line 2715
  STACKTOP = sp; //@line 2716
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2718
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 2725
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 2733
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 2741
 }
 $14 = $0 + 660 | 0; //@line 2743
 if ((HEAP32[$14 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 2749
  if ((HEAP32[$14 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(3, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 2755
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  STACKTOP = sp; //@line 2762
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 2766
 STACKTOP = sp; //@line 2767
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$032$i = 0, $$033$i = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 4430
 if (!$2) {
  $$0 = -1; //@line 4433
  return $$0 | 0; //@line 4434
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 4437
 $5 = $0 + 20 | 0; //@line 4438
 HEAP32[$5 >> 2] = 0; //@line 4439
 $6 = $0 + 16 | 0; //@line 4440
 HEAP32[$6 >> 2] = 0; //@line 4441
 if ($1 | 0) {
  $$033$i = $1; //@line 4444
  $22 = 0; //@line 4444
  do {
   $22 = $22 + 1 | 0; //@line 4446
   $$033$i = $$033$i >>> 1; //@line 4447
  } while (($$033$i | 0) != 0);
  HEAP32[$6 >> 2] = $22; //@line 4455
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 4458
 HEAP32[$0 + 28 >> 2] = $1; //@line 4460
 HEAP32[$0 + 32 >> 2] = $2; //@line 4462
 HEAP32[$0 >> 2] = 0; //@line 4463
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 4466
 HEAP8[$0 + 9 >> 0] = 0; //@line 4468
 HEAP8[$0 + 8 >> 0] = 0; //@line 4470
 HEAP8[$0 + 36 >> 0] = 0; //@line 4472
 HEAP32[$0 + 40 >> 2] = 0; //@line 4474
 HEAP32[$0 + 44 >> 2] = 0; //@line 4476
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 4478
 if (($20 | 0) < 0) {
  $$032$i = $20; //@line 4481
 } else {
  $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 4484
  if (($26 | 0) < 0) {
   $$032$i = $26; //@line 4487
  } else {
   $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 4490
   $$032$i = ($29 | 0) < 0 ? $29 : 0; //@line 4493
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 4496
 $$0 = $$032$i; //@line 4497
 return $$0 | 0; //@line 4498
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6126
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6136
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6140
 $16 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 6142
 $18 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1108 >> 2] | 0; //@line 6144
 _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 6145
 _printf(13043, $10) | 0; //@line 6146
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 6147
 _putchar(10) | 0; //@line 6148
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 6151
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 6152
  HEAP32[$19 >> 2] = $14; //@line 6153
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 6154
  $$expand_i1_val = $16 & 1; //@line 6155
  HEAP8[$20 >> 0] = $$expand_i1_val; //@line 6156
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 6157
  HEAP32[$21 >> 2] = $18; //@line 6158
  sp = STACKTOP; //@line 6159
  return;
 }
 ___async_unwind = 0; //@line 6162
 HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 6163
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 6164
 HEAP32[$19 >> 2] = $14; //@line 6165
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 6166
 $$expand_i1_val = $16 & 1; //@line 6167
 HEAP8[$20 >> 0] = $$expand_i1_val; //@line 6168
 $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 6169
 HEAP32[$21 >> 2] = $18; //@line 6170
 sp = STACKTOP; //@line 6171
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6499
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6501
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6503
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6506
  $5 = _mbedtls_cipher_cmac_finish(22532, 23840) | 0; //@line 6507
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 604; //@line 6510
   $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 6511
   HEAP32[$6 >> 2] = $2; //@line 6512
   sp = STACKTOP; //@line 6513
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 6517
  ___async_unwind = 0; //@line 6518
  HEAP32[$ReallocAsyncCtx2 >> 2] = 604; //@line 6519
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 6520
  HEAP32[$6 >> 2] = $2; //@line 6521
  sp = STACKTOP; //@line 6522
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 6525
  _mbedtls_cipher_free(22532); //@line 6526
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 6529
   $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 6530
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 6531
   sp = STACKTOP; //@line 6532
   return;
  }
  ___async_unwind = 0; //@line 6535
  HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 6536
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 6537
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 6538
  sp = STACKTOP; //@line 6539
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1717
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1719
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1721
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 1724
  $5 = _mbedtls_cipher_cmac_finish(22532, 23840) | 0; //@line 1725
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 1728
   $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 1729
   HEAP32[$6 >> 2] = $2; //@line 1730
   sp = STACKTOP; //@line 1731
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 1735
  ___async_unwind = 0; //@line 1736
  HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 1737
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 1738
  HEAP32[$6 >> 2] = $2; //@line 1739
  sp = STACKTOP; //@line 1740
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 1743
  _mbedtls_cipher_free(22532); //@line 1744
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1747
   $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 1748
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 1749
   sp = STACKTOP; //@line 1750
   return;
  }
  ___async_unwind = 0; //@line 1753
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1754
  $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 1755
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 1756
  sp = STACKTOP; //@line 1757
  return;
 }
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_143($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30975
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30977
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30979
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30981
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 30988
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 30992
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 30995
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 30996
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 30997
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 31000
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 31001
  HEAP32[$21 >> 2] = $10; //@line 31002
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 31003
  HEAP32[$22 >> 2] = $12; //@line 31004
  sp = STACKTOP; //@line 31005
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 31009
 ___async_unwind = 0; //@line 31010
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 31011
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 31012
 HEAP32[$21 >> 2] = $10; //@line 31013
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 31014
 HEAP32[$22 >> 2] = $12; //@line 31015
 sp = STACKTOP; //@line 31016
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_142($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30915
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30921
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30923
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30925
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30927
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 30934
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 30938
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 30941
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 30942
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 30943
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 30946
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 30947
  HEAP32[$21 >> 2] = $10; //@line 30948
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 30949
  HEAP32[$22 >> 2] = $12; //@line 30950
  sp = STACKTOP; //@line 30951
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 30955
 ___async_unwind = 0; //@line 30956
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 30957
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 30958
 HEAP32[$21 >> 2] = $10; //@line 30959
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 30960
 HEAP32[$22 >> 2] = $12; //@line 30961
 sp = STACKTOP; //@line 30962
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_141($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30861
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30867
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30869
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30871
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30873
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 30880
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 30884
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 30887
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 30888
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 30889
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 30892
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 30893
  HEAP32[$21 >> 2] = $10; //@line 30894
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 30895
  HEAP32[$22 >> 2] = $12; //@line 30896
  sp = STACKTOP; //@line 30897
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 30901
 ___async_unwind = 0; //@line 30902
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 30903
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 30904
 HEAP32[$21 >> 2] = $10; //@line 30905
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 30906
 HEAP32[$22 >> 2] = $12; //@line 30907
 sp = STACKTOP; //@line 30908
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28348
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28350
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28352
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28354
 $7 = $2 + 12 | 0; //@line 28355
 $8 = HEAP32[$7 >> 2] | 0; //@line 28356
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 28359
  HEAP32[$6 + 16 >> 2] = 0; //@line 28361
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 28365
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28366
 FUNCTION_TABLE_vii[$11 & 31]($6, $2); //@line 28367
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 661; //@line 28370
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 28371
  HEAP32[$12 >> 2] = $7; //@line 28372
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 28373
  HEAP32[$13 >> 2] = $4; //@line 28374
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 28375
  HEAP32[$14 >> 2] = $6; //@line 28376
  sp = STACKTOP; //@line 28377
  return;
 }
 ___async_unwind = 0; //@line 28380
 HEAP32[$ReallocAsyncCtx2 >> 2] = 661; //@line 28381
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 28382
 HEAP32[$12 >> 2] = $7; //@line 28383
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 28384
 HEAP32[$13 >> 2] = $4; //@line 28385
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 28386
 HEAP32[$14 >> 2] = $6; //@line 28387
 sp = STACKTOP; //@line 28388
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_212($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 36136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36138
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36142
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36144
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 36149
  return;
 }
 dest = $2 + 4 | 0; //@line 36153
 stop = dest + 52 | 0; //@line 36153
 do {
  HEAP32[dest >> 2] = 0; //@line 36153
  dest = dest + 4 | 0; //@line 36153
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 36154
 HEAP32[$2 + 8 >> 2] = $4; //@line 36156
 HEAP32[$2 + 12 >> 2] = -1; //@line 36158
 HEAP32[$2 + 48 >> 2] = 1; //@line 36160
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 36163
 $16 = HEAP32[$6 >> 2] | 0; //@line 36164
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 36165
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 36166
 if (!___async) {
  ___async_unwind = 0; //@line 36169
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 790; //@line 36171
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 36173
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 36175
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 36177
 sp = STACKTOP; //@line 36178
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 13942
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 13947
    $$0 = 1; //@line 13948
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 13961
     $$0 = 1; //@line 13962
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 13966
     $$0 = -1; //@line 13967
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 13977
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 13981
    $$0 = 2; //@line 13982
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 13994
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14000
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14004
    $$0 = 3; //@line 14005
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14015
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14021
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14027
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14031
    $$0 = 4; //@line 14032
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14036
    $$0 = -1; //@line 14037
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14042
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20281
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 20285
  return $$0 | 0; //@line 20286
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 20292
  return $$0 | 0; //@line 20293
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 20295
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 20298
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 20299
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 20300
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 588; //@line 20303
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 20305
  sp = STACKTOP; //@line 20306
  return 0; //@line 20307
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20309
 if (!$11) {
  $$0 = -1003; //@line 20311
  return $$0 | 0; //@line 20312
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 20314
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20315
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 20316
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 589; //@line 20319
  sp = STACKTOP; //@line 20320
  return 0; //@line 20321
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20323
 $$0 = 0; //@line 20324
 return $$0 | 0; //@line 20325
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_451($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23234
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23238
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23240
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23241
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23245
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23246
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 23247
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 215; //@line 23250
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 23251
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23252
   sp = STACKTOP; //@line 23253
   return;
  }
  ___async_unwind = 0; //@line 23256
  HEAP32[$ReallocAsyncCtx2 >> 2] = 215; //@line 23257
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 23258
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23259
  sp = STACKTOP; //@line 23260
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 23267
 _mbed_assert_internal(12851, 11935, 843); //@line 23268
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 216; //@line 23271
  sp = STACKTOP; //@line 23272
  return;
 }
 ___async_unwind = 0; //@line 23275
 HEAP32[$ReallocAsyncCtx11 >> 2] = 216; //@line 23276
 sp = STACKTOP; //@line 23277
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_136($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30599
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30601
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30603
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30605
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30607
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30609
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30611
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30613
 $16 = $2 + 360 | 0; //@line 30615
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 30616
 $17 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($2 + 348 | 0, $4, $16) | 0; //@line 30617
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 30621
  ___async_unwind = 0; //@line 30622
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 562; //@line 30624
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $16; //@line 30626
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 30628
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 30630
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 30632
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 30634
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 30636
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 30638
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $2; //@line 30640
 sp = STACKTOP; //@line 30641
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10678
 STACKTOP = STACKTOP + 32 | 0; //@line 10679
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10679
 $1 = sp + 12 | 0; //@line 10682
 if (!(HEAP32[$0 + 1908 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10687
  _printf(12794, sp + 8 | 0) | 0; //@line 10688
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10689
  _putchar(10) | 0; //@line 10690
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 338; //@line 10693
   sp = STACKTOP; //@line 10694
   STACKTOP = sp; //@line 10695
   return 0; //@line 10695
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10697
  $$0 = -1003; //@line 10698
  STACKTOP = sp; //@line 10699
  return $$0 | 0; //@line 10699
 } else {
  HEAP32[$1 >> 2] = 1; //@line 10701
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10703
  $6 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $1) | 0; //@line 10704
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 339; //@line 10707
   HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 10709
   sp = STACKTOP; //@line 10710
   STACKTOP = sp; //@line 10711
   return 0; //@line 10711
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10713
  $$0 = $6; //@line 10714
  STACKTOP = sp; //@line 10715
  return $$0 | 0; //@line 10715
 }
 return 0; //@line 10717
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_411($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20275
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20277
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20278
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 20282
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20283
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 20284
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 20287
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 20288
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 20289
   sp = STACKTOP; //@line 20290
   return;
  }
  ___async_unwind = 0; //@line 20293
  HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 20294
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 20295
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 20296
  sp = STACKTOP; //@line 20297
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 20304
 _mbed_assert_internal(12851, 11935, 715); //@line 20305
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 20308
  sp = STACKTOP; //@line 20309
  return;
 }
 ___async_unwind = 0; //@line 20312
 HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 20313
 sp = STACKTOP; //@line 20314
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_410($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20222
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20226
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20228
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20229
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 20233
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 20234
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 20235
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 20238
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 20239
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 20240
   sp = STACKTOP; //@line 20241
   return;
  }
  ___async_unwind = 0; //@line 20244
  HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 20245
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 20246
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 20247
  sp = STACKTOP; //@line 20248
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 20255
 _mbed_assert_internal(12851, 11935, 737); //@line 20256
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 235; //@line 20259
  sp = STACKTOP; //@line 20260
  return;
 }
 ___async_unwind = 0; //@line 20263
 HEAP32[$ReallocAsyncCtx12 >> 2] = 235; //@line 20264
 sp = STACKTOP; //@line 20265
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_113($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29350
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29354
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29356
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29357
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29361
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29362
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29363
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 201; //@line 29366
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29367
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29368
   sp = STACKTOP; //@line 29369
   return;
  }
  ___async_unwind = 0; //@line 29372
  HEAP32[$ReallocAsyncCtx2 >> 2] = 201; //@line 29373
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29374
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29375
  sp = STACKTOP; //@line 29376
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 29383
 _mbed_assert_internal(12851, 11935, 786); //@line 29384
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 29387
  sp = STACKTOP; //@line 29388
  return;
 }
 ___async_unwind = 0; //@line 29391
 HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 29392
 sp = STACKTOP; //@line 29393
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_112($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29305
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29307
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29308
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29312
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 29313
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29314
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 29317
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 29318
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29319
   sp = STACKTOP; //@line 29320
   return;
  }
  ___async_unwind = 0; //@line 29323
  HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 29324
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 29325
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29326
  sp = STACKTOP; //@line 29327
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 29334
 _mbed_assert_internal(12851, 11935, 797); //@line 29335
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 206; //@line 29338
  sp = STACKTOP; //@line 29339
  return;
 }
 ___async_unwind = 0; //@line 29342
 HEAP32[$ReallocAsyncCtx14 >> 2] = 206; //@line 29343
 sp = STACKTOP; //@line 29344
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_111($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29256
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29258
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29259
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29263
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29264
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29265
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 209; //@line 29268
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 29269
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29270
   sp = STACKTOP; //@line 29271
   return;
  }
  ___async_unwind = 0; //@line 29274
  HEAP32[$ReallocAsyncCtx6 >> 2] = 209; //@line 29275
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 29276
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29277
  sp = STACKTOP; //@line 29278
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 29285
 _mbed_assert_internal(12851, 11935, 821); //@line 29286
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 210; //@line 29289
  sp = STACKTOP; //@line 29290
  return;
 }
 ___async_unwind = 0; //@line 29293
 HEAP32[$ReallocAsyncCtx13 >> 2] = 210; //@line 29294
 sp = STACKTOP; //@line 29295
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 21714
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21716
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21718
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21720
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21722
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21724
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 21728
 HEAP8[$4 >> 0] = 1; //@line 21729
 $14 = $2 + 944 | 0; //@line 21730
 HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 32; //@line 21733
 $17 = HEAP32[$6 >> 2] | 0; //@line 21734
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 21736
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $2 + 996 | 0, 1); //@line 21737
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 21740
  $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 21741
  HEAP32[$19 >> 2] = $8; //@line 21742
  $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 21743
  HEAP32[$20 >> 2] = $10; //@line 21744
  sp = STACKTOP; //@line 21745
  return;
 }
 ___async_unwind = 0; //@line 21748
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 21749
 $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 21750
 HEAP32[$19 >> 2] = $8; //@line 21751
 $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 21752
 HEAP32[$20 >> 2] = $10; //@line 21753
 sp = STACKTOP; //@line 21754
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3086
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3090
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3092
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3094
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3096
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3098
 $13 = HEAP32[$2 >> 2] | 0; //@line 3099
 $15 = $6 + 12 | 0; //@line 3101
 HEAP32[$6 >> 2] = 526; //@line 3102
 HEAP32[$6 + 4 >> 2] = 0; //@line 3104
 HEAP32[$6 + 8 >> 2] = $4; //@line 3106
 HEAP32[$15 >> 2] = 848; //@line 3107
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 3108
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($13, $4 + 1016 | 0, $6); //@line 3109
 if (!___async) {
  ___async_unwind = 0; //@line 3112
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 527; //@line 3114
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 3116
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 3118
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $12; //@line 3120
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $10; //@line 3122
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 3124
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $15; //@line 3126
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $6; //@line 3128
 sp = STACKTOP; //@line 3129
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_405($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20088
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20090
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20092
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20094
 $11 = $4 + 12 | 0; //@line 20096
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20097
 $13 = HEAP8[$6 + 12 >> 0] | 0; //@line 20099
 $15 = HEAP8[$6 + 13 >> 0] | 0; //@line 20101
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 20102
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $13, $15) | 0; //@line 20103
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 233; //@line 20106
  $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 20107
  HEAP32[$17 >> 2] = $11; //@line 20108
  $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 20109
  HEAP32[$18 >> 2] = $10; //@line 20110
  sp = STACKTOP; //@line 20111
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 20115
 ___async_unwind = 0; //@line 20116
 HEAP32[$ReallocAsyncCtx8 >> 2] = 233; //@line 20117
 $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 20118
 HEAP32[$17 >> 2] = $11; //@line 20119
 $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 20120
 HEAP32[$18 >> 2] = $10; //@line 20121
 sp = STACKTOP; //@line 20122
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_349($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6247
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6255
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6257
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6259
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6261
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6263
 $17 = HEAP32[$2 >> 2] | 0; //@line 6264
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 24 >> 2] | 0; //@line 6267
 $23 = (__ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0) + 10 | 0; //@line 6270
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 6271
 FUNCTION_TABLE_iiii[$20 & 15]($17, $6, $23) | 0; //@line 6272
 if (!___async) {
  ___async_unwind = 0; //@line 6275
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 6277
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 6279
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 6281
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $10; //@line 6283
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $12; //@line 6285
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $14; //@line 6287
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $16; //@line 6289
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $2; //@line 6291
 sp = STACKTOP; //@line 6292
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_231($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 37582
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37586
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37588
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37590
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37592
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 37594
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 37597
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 37598
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 37604
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 37605
   if (!___async) {
    ___async_unwind = 0; //@line 37608
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 803; //@line 37610
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 37612
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 37614
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 37616
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 37618
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 37620
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 37622
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 37625
   sp = STACKTOP; //@line 37626
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_133($0) {
 $0 = $0 | 0;
 var $$pre106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30455
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30457
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30459
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30461
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30463
 $$pre106 = HEAP32[$2 >> 2] | 0; //@line 30464
 if (!$$pre106) {
  HEAP32[$4 >> 2] = 0; //@line 30467
  return;
 }
 $11 = HEAP32[$$pre106 + 4 >> 2] | 0; //@line 30471
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 30472
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 30473
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 30476
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 30477
  HEAP32[$12 >> 2] = $2; //@line 30478
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 30479
  HEAP32[$13 >> 2] = $4; //@line 30480
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 30481
  HEAP32[$14 >> 2] = $8; //@line 30482
  sp = STACKTOP; //@line 30483
  return;
 }
 ___async_unwind = 0; //@line 30486
 HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 30487
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 30488
 HEAP32[$12 >> 2] = $2; //@line 30489
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 30490
 HEAP32[$13 >> 2] = $4; //@line 30491
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 30492
 HEAP32[$14 >> 2] = $8; //@line 30493
 sp = STACKTOP; //@line 30494
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_330($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 5438
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5440
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5442
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5444
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5446
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5448
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5450
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5452
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5454
 HEAP32[$8 >> 2] = 4; //@line 5455
 HEAP32[$10 >> 2] = HEAP32[$2 + 1944 >> 2]; //@line 5458
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(36) | 0; //@line 5459
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 5460
 if (!___async) {
  ___async_unwind = 0; //@line 5463
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 252; //@line 5465
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $2; //@line 5467
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $4; //@line 5469
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $6; //@line 5471
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $8; //@line 5473
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $10; //@line 5475
 HEAP32[$ReallocAsyncCtx18 + 24 >> 2] = $12; //@line 5477
 HEAP32[$ReallocAsyncCtx18 + 28 >> 2] = $14; //@line 5479
 HEAP32[$ReallocAsyncCtx18 + 32 >> 2] = $16; //@line 5481
 sp = STACKTOP; //@line 5482
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_329($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 5387
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5389
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5391
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5393
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5395
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5397
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5399
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5401
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5403
 HEAP32[$8 >> 2] = 5; //@line 5404
 HEAP32[$10 >> 2] = HEAP32[$2 + 1948 >> 2]; //@line 5407
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(36) | 0; //@line 5408
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 5409
 if (!___async) {
  ___async_unwind = 0; //@line 5412
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 253; //@line 5414
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 5416
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 5418
 HEAP32[$ReallocAsyncCtx17 + 12 >> 2] = $6; //@line 5420
 HEAP32[$ReallocAsyncCtx17 + 16 >> 2] = $8; //@line 5422
 HEAP32[$ReallocAsyncCtx17 + 20 >> 2] = $10; //@line 5424
 HEAP32[$ReallocAsyncCtx17 + 24 >> 2] = $12; //@line 5426
 HEAP32[$ReallocAsyncCtx17 + 28 >> 2] = $14; //@line 5428
 HEAP32[$ReallocAsyncCtx17 + 32 >> 2] = $16; //@line 5430
 sp = STACKTOP; //@line 5431
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14678
 STACKTOP = STACKTOP + 16 | 0; //@line 14679
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14679
 $$byval_copy = sp + 8 | 0; //@line 14680
 $1 = sp; //@line 14681
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14683
 HEAP32[$1 >> 2] = 456; //@line 14684
 HEAP32[$1 + 4 >> 2] = 0; //@line 14686
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14687
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14688
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14688
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14689
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 457; //@line 14692
  sp = STACKTOP; //@line 14693
  STACKTOP = sp; //@line 14694
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14696
 if ($4 | 0) {
  STACKTOP = sp; //@line 14699
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14701
 _mbed_assert_internal(12851, 12860, 187); //@line 14702
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 458; //@line 14705
  sp = STACKTOP; //@line 14706
  STACKTOP = sp; //@line 14707
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14709
 STACKTOP = sp; //@line 14710
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17380
 STACKTOP = STACKTOP + 16 | 0; //@line 17381
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17381
 $$byval_copy = sp + 8 | 0; //@line 17382
 $1 = sp; //@line 17383
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17385
 HEAP32[$1 >> 2] = 460; //@line 17386
 HEAP32[$1 + 4 >> 2] = 0; //@line 17388
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17389
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17390
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17390
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 17391
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 503; //@line 17394
  sp = STACKTOP; //@line 17395
  STACKTOP = sp; //@line 17396
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17398
 if ($4 | 0) {
  STACKTOP = sp; //@line 17401
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17403
 _mbed_assert_internal(12851, 12860, 194); //@line 17404
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 504; //@line 17407
  sp = STACKTOP; //@line 17408
  STACKTOP = sp; //@line 17409
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17411
 STACKTOP = sp; //@line 17412
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17417
 STACKTOP = STACKTOP + 16 | 0; //@line 17418
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17418
 $$byval_copy = sp + 8 | 0; //@line 17419
 $1 = sp; //@line 17420
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17422
 HEAP32[$1 >> 2] = 423; //@line 17423
 HEAP32[$1 + 4 >> 2] = 0; //@line 17425
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17426
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17427
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17427
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 17428
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 505; //@line 17431
  sp = STACKTOP; //@line 17432
  STACKTOP = sp; //@line 17433
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17435
 if ($4 | 0) {
  STACKTOP = sp; //@line 17438
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17440
 _mbed_assert_internal(12851, 12860, 201); //@line 17441
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 506; //@line 17444
  sp = STACKTOP; //@line 17445
  STACKTOP = sp; //@line 17446
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17448
 STACKTOP = sp; //@line 17449
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14513
 STACKTOP = STACKTOP + 16 | 0; //@line 14514
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14514
 $$byval_copy = sp + 8 | 0; //@line 14515
 $1 = sp; //@line 14516
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14518
 HEAP32[$1 >> 2] = 448; //@line 14519
 HEAP32[$1 + 4 >> 2] = 0; //@line 14521
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14522
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14523
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14523
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14524
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 449; //@line 14527
  sp = STACKTOP; //@line 14528
  STACKTOP = sp; //@line 14529
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14531
 if ($4 | 0) {
  STACKTOP = sp; //@line 14534
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14536
 _mbed_assert_internal(12851, 12860, 162); //@line 14537
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 450; //@line 14540
  sp = STACKTOP; //@line 14541
  STACKTOP = sp; //@line 14542
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14544
 STACKTOP = sp; //@line 14545
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14256
 STACKTOP = STACKTOP + 16 | 0; //@line 14257
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14257
 $$byval_copy = sp + 8 | 0; //@line 14258
 $1 = sp; //@line 14259
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14261
 HEAP32[$1 >> 2] = 438; //@line 14262
 HEAP32[$1 + 4 >> 2] = 0; //@line 14264
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14265
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14266
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14266
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14267
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 439; //@line 14270
  sp = STACKTOP; //@line 14271
  STACKTOP = sp; //@line 14272
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14274
 if ($4 | 0) {
  STACKTOP = sp; //@line 14277
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14279
 _mbed_assert_internal(12851, 12860, 155); //@line 14280
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 440; //@line 14283
  sp = STACKTOP; //@line 14284
  STACKTOP = sp; //@line 14285
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14287
 STACKTOP = sp; //@line 14288
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 31776
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31778
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31780
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31782
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31784
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31786
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31788
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31790
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31792
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 31793
 $17 = __ZN4mbed5Timer7read_msEv($2) | 0; //@line 31794
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 31798
  ___async_unwind = 0; //@line 31799
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 102; //@line 31801
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 31803
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 31805
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 31807
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 31809
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $12; //@line 31811
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $14; //@line 31813
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $2; //@line 31815
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 31817
 sp = STACKTOP; //@line 31818
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14028
 STACKTOP = STACKTOP + 16 | 0; //@line 14029
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14029
 $$byval_copy = sp + 8 | 0; //@line 14030
 $1 = sp; //@line 14031
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14033
 HEAP32[$1 >> 2] = 429; //@line 14034
 HEAP32[$1 + 4 >> 2] = 0; //@line 14036
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14037
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14038
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14038
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14039
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 430; //@line 14042
  sp = STACKTOP; //@line 14043
  STACKTOP = sp; //@line 14044
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14046
 if ($4 | 0) {
  STACKTOP = sp; //@line 14049
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14051
 _mbed_assert_internal(12851, 12860, 148); //@line 14052
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 431; //@line 14055
  sp = STACKTOP; //@line 14056
  STACKTOP = sp; //@line 14057
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14059
 STACKTOP = sp; //@line 14060
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11129
 STACKTOP = STACKTOP + 16 | 0; //@line 11130
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11130
 $$byval_copy = sp + 8 | 0; //@line 11131
 $1 = sp; //@line 11132
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11134
 HEAP32[$1 >> 2] = 355; //@line 11135
 HEAP32[$1 + 4 >> 2] = 0; //@line 11137
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11138
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11139
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11139
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 11140
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 356; //@line 11143
  sp = STACKTOP; //@line 11144
  STACKTOP = sp; //@line 11145
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11147
 if ($4 | 0) {
  STACKTOP = sp; //@line 11150
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11152
 _mbed_assert_internal(12851, 12860, 134); //@line 11153
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 357; //@line 11156
  sp = STACKTOP; //@line 11157
  STACKTOP = sp; //@line 11158
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11160
 STACKTOP = sp; //@line 11161
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_461($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24569
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24571
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24573
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24575
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24577
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24579
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24581
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24583
 $16 = HEAP32[$2 + 356 >> 2] | 0; //@line 24585
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 24587
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($16, $2 + 1016 | 0); //@line 24588
 if (!___async) {
  ___async_unwind = 0; //@line 24591
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 481; //@line 24593
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 24595
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 24597
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 24599
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $4; //@line 24601
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $6; //@line 24603
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $8; //@line 24605
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $10; //@line 24607
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $12; //@line 24609
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $14; //@line 24611
 sp = STACKTOP; //@line 24612
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8711
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 8713
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 8715
 $5 = $0 + 12 | 0; //@line 8716
 $6 = HEAP32[$5 >> 2] | 0; //@line 8717
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8721
   _mbed_assert_internal(15061, 15066, 1677); //@line 8722
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 288; //@line 8725
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 8727
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8729
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 8731
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 8733
    sp = STACKTOP; //@line 8734
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8737
    $13 = HEAP32[$5 >> 2] | 0; //@line 8739
    break;
   }
  } else {
   $13 = $6; //@line 8743
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 8746
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8747
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 8748
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 289; //@line 8751
  sp = STACKTOP; //@line 8752
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8755
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_322($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 4663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4667
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4669
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4671
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4673
 $11 = $2 + 1892 | 0; //@line 4674
 $12 = HEAP32[$11 >> 2] | 0; //@line 4675
 if (!$12) {
  HEAP32[$6 >> 2] = 6; //@line 4678
  HEAP32[___async_retval >> 2] = $4; //@line 4680
  return;
 }
 $16 = HEAP32[$2 + 2288 >> 2] | 0; //@line 4685
 $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 4687
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 4688
 FUNCTION_TABLE_vii[$18 & 31]($8, $2 + 1880 | 0); //@line 4689
 if (!___async) {
  ___async_unwind = 0; //@line 4692
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 267; //@line 4694
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $11; //@line 4696
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $8; //@line 4698
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $16; //@line 4700
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 4702
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $4; //@line 4704
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 4706
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $10; //@line 4708
 sp = STACKTOP; //@line 4709
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_138($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30731
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30733
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30735
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30737
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 30743
  HEAP32[___async_retval >> 2] = $6; //@line 30745
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 30748
 _mbed_assert_internal(12851, 12860, 217); //@line 30749
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 565; //@line 30752
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30753
  HEAP32[$9 >> 2] = $2; //@line 30754
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 30755
  HEAP32[$10 >> 2] = $4; //@line 30756
  $11 = $ReallocAsyncCtx5 + 12 | 0; //@line 30757
  HEAP32[$11 >> 2] = $6; //@line 30758
  sp = STACKTOP; //@line 30759
  return;
 }
 ___async_unwind = 0; //@line 30762
 HEAP32[$ReallocAsyncCtx5 >> 2] = 565; //@line 30763
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30764
 HEAP32[$9 >> 2] = $2; //@line 30765
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 30766
 HEAP32[$10 >> 2] = $4; //@line 30767
 $11 = $ReallocAsyncCtx5 + 12 | 0; //@line 30768
 HEAP32[$11 >> 2] = $6; //@line 30769
 sp = STACKTOP; //@line 30770
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_242($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 403
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 409
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 413
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 415
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 417
 _printf(12139, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 418
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 419
 _printf(12554, $6) | 0; //@line 420
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 421
 _putchar(10) | 0; //@line 422
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 307; //@line 425
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 426
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 427
  $15 = $ReallocAsyncCtx + 8 | 0; //@line 428
  HEAP32[$15 >> 2] = $10; //@line 429
  $16 = $ReallocAsyncCtx + 12 | 0; //@line 430
  HEAP32[$16 >> 2] = $12; //@line 431
  sp = STACKTOP; //@line 432
  return;
 }
 ___async_unwind = 0; //@line 435
 HEAP32[$ReallocAsyncCtx >> 2] = 307; //@line 436
 $14 = $ReallocAsyncCtx + 4 | 0; //@line 437
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 438
 $15 = $ReallocAsyncCtx + 8 | 0; //@line 439
 HEAP32[$15 >> 2] = $10; //@line 440
 $16 = $ReallocAsyncCtx + 12 | 0; //@line 441
 HEAP32[$16 >> 2] = $12; //@line 442
 sp = STACKTOP; //@line 443
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_274($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2323
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2325
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2327
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 2332
  _mbed_assert_internal(12851, 12860, 217); //@line 2333
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 435; //@line 2336
   $7 = $ReallocAsyncCtx6 + 4 | 0; //@line 2337
   HEAP32[$7 >> 2] = $2; //@line 2338
   $8 = $ReallocAsyncCtx6 + 8 | 0; //@line 2339
   HEAP32[$8 >> 2] = $4; //@line 2340
   sp = STACKTOP; //@line 2341
   return;
  }
  ___async_unwind = 0; //@line 2344
  HEAP32[$ReallocAsyncCtx6 >> 2] = 435; //@line 2345
  $7 = $ReallocAsyncCtx6 + 4 | 0; //@line 2346
  HEAP32[$7 >> 2] = $2; //@line 2347
  $8 = $ReallocAsyncCtx6 + 8 | 0; //@line 2348
  HEAP32[$8 >> 2] = $4; //@line 2349
  sp = STACKTOP; //@line 2350
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 2354
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 2362
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 2367
 $19 = $4 + 944 | 0; //@line 2368
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 2371
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_304($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 3760
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3762
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3764
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3766
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3768
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3770
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3772
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3774
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 3777
 HEAP8[$2 + 368 >> 0] = 1; //@line 3779
 $17 = HEAP32[$14 >> 2] | 0; //@line 3780
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 3781
 __ZN7LoRaPHY25setup_public_network_modeEb($17, 1); //@line 3782
 if (!___async) {
  ___async_unwind = 0; //@line 3785
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 521; //@line 3787
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 3789
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 3791
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 3793
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 3795
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 3797
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 3799
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 3801
 sp = STACKTOP; //@line 3802
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_368($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8298
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8300
 $4 = HEAP32[$2 + 48 >> 2] | 0; //@line 8302
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 8307
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 8308
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 36 | 0); //@line 8309
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 8312
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 8313
   HEAP32[$9 >> 2] = $2; //@line 8314
   sp = STACKTOP; //@line 8315
   return;
  }
  ___async_unwind = 0; //@line 8318
  HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 8319
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 8320
  HEAP32[$9 >> 2] = $2; //@line 8321
  sp = STACKTOP; //@line 8322
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 8326
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 8333
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 8334
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 8335
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 8338
  sp = STACKTOP; //@line 8339
  return;
 }
 ___async_unwind = 0; //@line 8342
 HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 8343
 sp = STACKTOP; //@line 8344
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 12826
  $8 = $0; //@line 12826
  $9 = $1; //@line 12826
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 12828
   $$0914 = $$0914 + -1 | 0; //@line 12832
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 12833
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 12834
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 12842
   }
  }
  $$010$lcssa$off0 = $8; //@line 12847
  $$09$lcssa = $$0914; //@line 12847
 } else {
  $$010$lcssa$off0 = $0; //@line 12849
  $$09$lcssa = $2; //@line 12849
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 12853
 } else {
  $$012 = $$010$lcssa$off0; //@line 12855
  $$111 = $$09$lcssa; //@line 12855
  while (1) {
   $26 = $$111 + -1 | 0; //@line 12860
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 12861
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 12865
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 12868
    $$111 = $26; //@line 12868
   }
  }
 }
 return $$1$lcssa | 0; //@line 12872
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_328($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 5338
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5340
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5342
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5344
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5346
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5348
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5350
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5352
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5354
 HEAP32[$8 >> 2] = 6; //@line 5355
 HEAP32[$10 >> 2] = HEAP32[$2 + 1952 >> 2]; //@line 5358
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(32) | 0; //@line 5359
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 5360
 if (!___async) {
  ___async_unwind = 0; //@line 5363
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 254; //@line 5365
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $8; //@line 5367
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $16; //@line 5369
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $12; //@line 5371
 HEAP32[$ReallocAsyncCtx16 + 16 >> 2] = $14; //@line 5373
 HEAP32[$ReallocAsyncCtx16 + 20 >> 2] = $2; //@line 5375
 HEAP32[$ReallocAsyncCtx16 + 24 >> 2] = $6; //@line 5377
 HEAP32[$ReallocAsyncCtx16 + 28 >> 2] = $4; //@line 5379
 sp = STACKTOP; //@line 5380
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_59($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 25082
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25088
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25090
 $9 = $2 + 944 | 0; //@line 25091
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 25095
 $13 = $2 + 944 | 0; //@line 25096
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 25099
 $16 = HEAP32[$4 >> 2] | 0; //@line 25100
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 25102
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 25103
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 25106
  $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 25107
  HEAP32[$18 >> 2] = $6; //@line 25108
  $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 25109
  HEAP32[$19 >> 2] = $8; //@line 25110
  sp = STACKTOP; //@line 25111
  return;
 }
 ___async_unwind = 0; //@line 25114
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 25115
 $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 25116
 HEAP32[$18 >> 2] = $6; //@line 25117
 $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 25118
 HEAP32[$19 >> 2] = $8; //@line 25119
 sp = STACKTOP; //@line 25120
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_58($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 25037
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25039
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25041
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25043
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25045
 $9 = $2 + 944 | 0; //@line 25046
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 25050
 $13 = $2 + 944 | 0; //@line 25051
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 25054
 $16 = HEAP32[$4 >> 2] | 0; //@line 25055
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 25057
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 25058
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 25061
  $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 25062
  HEAP32[$18 >> 2] = $6; //@line 25063
  $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 25064
  HEAP32[$19 >> 2] = $8; //@line 25065
  sp = STACKTOP; //@line 25066
  return;
 }
 ___async_unwind = 0; //@line 25069
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 25070
 $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 25071
 HEAP32[$18 >> 2] = $6; //@line 25072
 $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 25073
 HEAP32[$19 >> 2] = $8; //@line 25074
 sp = STACKTOP; //@line 25075
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_358($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7260
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7262
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 7264
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 7269
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 7270
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 7271
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 7274
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 7275
   HEAP32[$9 >> 2] = $2; //@line 7276
   sp = STACKTOP; //@line 7277
   return;
  }
  ___async_unwind = 0; //@line 7280
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 7281
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 7282
  HEAP32[$9 >> 2] = $2; //@line 7283
  sp = STACKTOP; //@line 7284
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 7288
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 7294
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 7295
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 7296
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7299
  sp = STACKTOP; //@line 7300
  return;
 }
 ___async_unwind = 0; //@line 7303
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7304
 sp = STACKTOP; //@line 7305
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 24265
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 24267
 $8 = $7 & 255; //@line 24268
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 24270
 $10 = $$ & 255; //@line 24271
 HEAP8[$4 + 1 >> 0] = $10; //@line 24273
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 24275
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 24278
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 24284
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 24291
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 24297
 } else {
  $28 = $$ & 255; //@line 24299
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 24310
 }
 $41 = $2 & 255; //@line 24314
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 24324
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 24326
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 24327
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 24336
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10162
 STACKTOP = STACKTOP + 16 | 0; //@line 10163
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10163
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10170
  _printf(12684, sp + 8 | 0) | 0; //@line 10171
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10172
  _putchar(10) | 0; //@line 10173
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 321; //@line 10176
   sp = STACKTOP; //@line 10177
   STACKTOP = sp; //@line 10178
   return 0; //@line 10178
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10180
  $$0 = -1012; //@line 10181
  STACKTOP = sp; //@line 10182
  return $$0 | 0; //@line 10182
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10185
  $6 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 10186
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 322; //@line 10189
   sp = STACKTOP; //@line 10190
   STACKTOP = sp; //@line 10191
   return 0; //@line 10191
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10193
  $$0 = $6; //@line 10194
  STACKTOP = sp; //@line 10195
  return $$0 | 0; //@line 10195
 }
 return 0; //@line 10197
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_90($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28177
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28179
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28181
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 28187
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 28191
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 28195
  $16 = $4 + 944 | 0; //@line 28196
  HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 28199
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 28202
 _mbed_assert_internal(12851, 12860, 217); //@line 28203
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 455; //@line 28206
  $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 28207
  HEAP32[$7 >> 2] = $2; //@line 28208
  $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 28209
  HEAP32[$8 >> 2] = $4; //@line 28210
  sp = STACKTOP; //@line 28211
  return;
 }
 ___async_unwind = 0; //@line 28214
 HEAP32[$ReallocAsyncCtx5 >> 2] = 455; //@line 28215
 $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 28216
 HEAP32[$7 >> 2] = $2; //@line 28217
 $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 28218
 HEAP32[$8 >> 2] = $4; //@line 28219
 sp = STACKTOP; //@line 28220
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $10 = 0, $15 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25009
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$09 = 0; //@line 25014
  return $$09 | 0; //@line 25015
 }
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 25019
 $8 = $1 + 4 | 0; //@line 25020
 $9 = HEAP32[$8 >> 2] | 0; //@line 25021
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25022
 $10 = FUNCTION_TABLE_iii[$7 & 31]($0, $9) | 0; //@line 25023
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 634; //@line 25026
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 25028
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 25030
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 25032
  sp = STACKTOP; //@line 25033
  return 0; //@line 25034
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25036
 $$ = $10 ? 3 : 2; //@line 25037
 $15 = HEAP32[$0 + 112 >> 2] | 0; //@line 25039
 $17 = HEAPU8[$1 >> 0] | 0; //@line 25041
 $$1 = (HEAP32[$15 + ($17 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 25046
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 25049
  return $$09 | 0; //@line 25050
 }
 HEAP32[$15 + ($17 * 12 | 0) + 4 >> 2] = HEAP32[$8 >> 2]; //@line 25054
 $$09 = 3; //@line 25055
 return $$09 | 0; //@line 25056
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_299($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3320
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3322
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3324
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3325
 if (!$9) {
  HEAP32[$6 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$4 >> 2] | 0) | 0; //@line 3331
  HEAP32[___async_retval >> 2] = 0; //@line 3333
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 3337
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 3338
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 3339
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 537; //@line 3342
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 3343
  HEAP32[$13 >> 2] = $4; //@line 3344
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 3345
  HEAP32[$14 >> 2] = $6; //@line 3346
  sp = STACKTOP; //@line 3347
  return;
 }
 ___async_unwind = 0; //@line 3350
 HEAP32[$ReallocAsyncCtx5 >> 2] = 537; //@line 3351
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 3352
 HEAP32[$13 >> 2] = $4; //@line 3353
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 3354
 HEAP32[$14 >> 2] = $6; //@line 3355
 sp = STACKTOP; //@line 3356
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$032 = 0, $$033 = 0, $19 = 0, $21 = 0, $25 = 0, $28 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 4508
 HEAP32[$0 + 20 >> 2] = 0; //@line 4510
 $5 = $0 + 16 | 0; //@line 4511
 HEAP32[$5 >> 2] = 0; //@line 4512
 if ($1 | 0) {
  $$033 = $1; //@line 4515
  $21 = 0; //@line 4515
  do {
   $21 = $21 + 1 | 0; //@line 4517
   $$033 = $$033 >>> 1; //@line 4518
  } while (($$033 | 0) != 0);
  HEAP32[$5 >> 2] = $21; //@line 4526
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 4529
 HEAP32[$0 + 28 >> 2] = $1; //@line 4531
 HEAP32[$0 + 32 >> 2] = $2; //@line 4533
 HEAP32[$0 >> 2] = 0; //@line 4534
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 4537
 HEAP8[$0 + 9 >> 0] = 0; //@line 4539
 HEAP8[$0 + 8 >> 0] = 0; //@line 4541
 HEAP8[$0 + 36 >> 0] = 0; //@line 4543
 HEAP32[$0 + 40 >> 2] = 0; //@line 4545
 HEAP32[$0 + 44 >> 2] = 0; //@line 4547
 $19 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 4549
 if (($19 | 0) < 0) {
  $$032 = $19; //@line 4552
  return $$032 | 0; //@line 4553
 }
 $25 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 4556
 if (($25 | 0) < 0) {
  $$032 = $25; //@line 4559
  return $$032 | 0; //@line 4560
 }
 $28 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 4563
 $$032 = ($28 | 0) < 0 ? $28 : 0; //@line 4566
 return $$032 | 0; //@line 4567
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10243
 STACKTOP = STACKTOP + 16 | 0; //@line 10244
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10244
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10251
  _printf(12684, sp + 8 | 0) | 0; //@line 10252
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10253
  _putchar(10) | 0; //@line 10254
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 325; //@line 10257
   sp = STACKTOP; //@line 10258
   STACKTOP = sp; //@line 10259
   return 0; //@line 10259
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10261
  $$0 = -1012; //@line 10262
  STACKTOP = sp; //@line 10263
  return $$0 | 0; //@line 10263
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10266
  $6 = __ZN7LoRaMac21remove_single_channelEh($0 + 4 | 0, $1) | 0; //@line 10267
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 326; //@line 10270
   sp = STACKTOP; //@line 10271
   STACKTOP = sp; //@line 10272
   return 0; //@line 10272
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10274
  $$0 = $6; //@line 10275
  STACKTOP = sp; //@line 10276
  return $$0 | 0; //@line 10276
 }
 return 0; //@line 10278
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 10442
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 10447
   label = 4; //@line 10448
  } else {
   $$01519 = $0; //@line 10450
   $23 = $1; //@line 10450
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 10455
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 10458
    $23 = $6; //@line 10459
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 10463
     label = 4; //@line 10464
     break;
    } else {
     $$01519 = $6; //@line 10467
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 10473
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 10475
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 10483
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 10491
  } else {
   $$pn = $$0; //@line 10493
   while (1) {
    $19 = $$pn + 1 | 0; //@line 10495
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 10499
     break;
    } else {
     $$pn = $19; //@line 10502
    }
   }
  }
  $$sink = $$1$lcssa; //@line 10507
 }
 return $$sink - $1 | 0; //@line 10510
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_65($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26166
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26168
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26170
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26174
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26178
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26180
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26182
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26184
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26186
 HEAP8[$2 + 688 >> 0] = 2; //@line 26188
 _printf(10904, $4) | 0; //@line 26189
 HEAP32[$8 >> 2] = 3; //@line 26190
 _printf(10970, $8) | 0; //@line 26191
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 26192
 _putchar(10) | 0; //@line 26193
 if (!___async) {
  ___async_unwind = 0; //@line 26196
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 139; //@line 26198
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $12; //@line 26200
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $2; //@line 26202
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $14; //@line 26204
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $16; //@line 26206
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $18; //@line 26208
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $20; //@line 26210
 sp = STACKTOP; //@line 26211
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_28($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20790
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20794
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20796
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 20797
 $8 = HEAP32[$7 >> 2] | 0; //@line 20798
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 20801
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 20802
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 20803
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 656; //@line 20806
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 20807
  HEAP32[$12 >> 2] = $7; //@line 20808
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 20809
  HEAP32[$13 >> 2] = $4; //@line 20810
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 20811
  HEAP8[$14 >> 0] = $6; //@line 20812
  sp = STACKTOP; //@line 20813
  return;
 }
 ___async_unwind = 0; //@line 20816
 HEAP32[$ReallocAsyncCtx >> 2] = 656; //@line 20817
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 20818
 HEAP32[$12 >> 2] = $7; //@line 20819
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 20820
 HEAP32[$13 >> 2] = $4; //@line 20821
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 20822
 HEAP8[$14 >> 0] = $6; //@line 20823
 sp = STACKTOP; //@line 20824
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_371($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8430
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8432
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8434
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8436
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8438
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 8440
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8442
 $14 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 8445
 $15 = HEAP32[$12 >> 2] | 0; //@line 8446
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 76 >> 2] | 0; //@line 8449
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 8450
 FUNCTION_TABLE_vi[$18 & 1023]($15); //@line 8451
 if (!___async) {
  ___async_unwind = 0; //@line 8454
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 619; //@line 8456
 HEAP8[$ReallocAsyncCtx3 + 4 >> 0] = $14 & 1; //@line 8459
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 8461
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 8463
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 8465
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 8467
 HEAP8[$ReallocAsyncCtx3 + 24 >> 0] = $10; //@line 8469
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 8471
 sp = STACKTOP; //@line 8472
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10202
 STACKTOP = STACKTOP + 16 | 0; //@line 10203
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10203
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10210
  _printf(12684, sp + 8 | 0) | 0; //@line 10211
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10212
  _putchar(10) | 0; //@line 10213
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 323; //@line 10216
   sp = STACKTOP; //@line 10217
   STACKTOP = sp; //@line 10218
   return 0; //@line 10218
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10220
  $$0 = -1012; //@line 10221
  STACKTOP = sp; //@line 10222
  return $$0 | 0; //@line 10222
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10225
  $5 = __ZN7LoRaMac19remove_channel_planEv($0 + 4 | 0) | 0; //@line 10226
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 324; //@line 10229
   sp = STACKTOP; //@line 10230
   STACKTOP = sp; //@line 10231
   return 0; //@line 10231
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10233
  $$0 = $5; //@line 10234
  STACKTOP = sp; //@line 10235
  return $$0 | 0; //@line 10235
 }
 return 0; //@line 10237
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3773
 $2 = $0; //@line 3774
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 3779
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 3783
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3784
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 3785
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 156; //@line 3788
      sp = STACKTOP; //@line 3789
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3792
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 3800
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 3804
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3805
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 3806
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 157; //@line 3809
      sp = STACKTOP; //@line 3810
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3813
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 14958
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 14965
   $10 = $1 + 16 | 0; //@line 14966
   $11 = HEAP32[$10 >> 2] | 0; //@line 14967
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 14970
    HEAP32[$1 + 24 >> 2] = $4; //@line 14972
    HEAP32[$1 + 36 >> 2] = 1; //@line 14974
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 14984
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 14989
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 14992
    HEAP8[$1 + 54 >> 0] = 1; //@line 14994
    break;
   }
   $21 = $1 + 24 | 0; //@line 14997
   $22 = HEAP32[$21 >> 2] | 0; //@line 14998
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 15001
    $28 = $4; //@line 15002
   } else {
    $28 = $22; //@line 15004
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 15013
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8785
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8787
 $3 = $0 + 12 | 0; //@line 8788
 $4 = HEAP32[$3 >> 2] | 0; //@line 8789
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8793
   _mbed_assert_internal(15061, 15066, 1102); //@line 8794
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 291; //@line 8797
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 8799
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8801
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8803
    sp = STACKTOP; //@line 8804
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8807
    $10 = HEAP32[$3 >> 2] | 0; //@line 8809
    break;
   }
  } else {
   $10 = $4; //@line 8813
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 8816
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8817
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 8818
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 8821
  sp = STACKTOP; //@line 8822
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8825
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_458($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24447
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24449
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24451
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24453
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24455
 $$pre13 = HEAP32[$2 >> 2] | 0; //@line 24456
 if (!$$pre13) {
  HEAP32[$4 >> 2] = 0; //@line 24459
  return;
 }
 $11 = HEAP32[$$pre13 + 4 >> 2] | 0; //@line 24463
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 24464
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 24465
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24468
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24469
  HEAP32[$12 >> 2] = $2; //@line 24470
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 24471
  HEAP32[$13 >> 2] = $4; //@line 24472
  sp = STACKTOP; //@line 24473
  return;
 }
 ___async_unwind = 0; //@line 24476
 HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 24477
 $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24478
 HEAP32[$12 >> 2] = $2; //@line 24479
 $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 24480
 HEAP32[$13 >> 2] = $4; //@line 24481
 sp = STACKTOP; //@line 24482
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_106($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 28967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28971
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28973
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28975
 $9 = $4 + 12 | 0; //@line 28977
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28978
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 28979
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 28980
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 208; //@line 28983
  $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 28984
  HEAP32[$11 >> 2] = $9; //@line 28985
  $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 28986
  HEAP32[$12 >> 2] = $8; //@line 28987
  sp = STACKTOP; //@line 28988
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 28992
 ___async_unwind = 0; //@line 28993
 HEAP32[$ReallocAsyncCtx10 >> 2] = 208; //@line 28994
 $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 28995
 HEAP32[$11 >> 2] = $9; //@line 28996
 $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 28997
 HEAP32[$12 >> 2] = $8; //@line 28998
 sp = STACKTOP; //@line 28999
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_104($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 28906
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28910
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28912
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28914
 $9 = $4 + 12 | 0; //@line 28916
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28917
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 28918
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 28919
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 204; //@line 28922
  $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 28923
  HEAP32[$11 >> 2] = $9; //@line 28924
  $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 28925
  HEAP32[$12 >> 2] = $8; //@line 28926
  sp = STACKTOP; //@line 28927
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 28931
 ___async_unwind = 0; //@line 28932
 HEAP32[$ReallocAsyncCtx11 >> 2] = 204; //@line 28933
 $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 28934
 HEAP32[$11 >> 2] = $9; //@line 28935
 $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 28936
 HEAP32[$12 >> 2] = $8; //@line 28937
 sp = STACKTOP; //@line 28938
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 511
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 513
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 517
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 519
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 521
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 523
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 527
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 530
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 531
   if (!___async) {
    ___async_unwind = 0; //@line 534
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 807; //@line 536
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 538
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 540
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 542
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 544
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 546
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 548
   sp = STACKTOP; //@line 549
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_445($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22851
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22855
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22857
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22859
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22861
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22863
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22865
 $15 = $4 + 12 | 0; //@line 22867
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22868
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 22869
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 22870
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 22874
  ___async_unwind = 0; //@line 22875
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 218; //@line 22877
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $15; //@line 22879
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 22881
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 22883
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 22885
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $14; //@line 22887
 sp = STACKTOP; //@line 22888
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 28845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28853
 $9 = $4 + 12 | 0; //@line 28855
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28856
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 28857
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 28858
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 200; //@line 28861
  $11 = $ReallocAsyncCtx12 + 4 | 0; //@line 28862
  HEAP32[$11 >> 2] = $9; //@line 28863
  $12 = $ReallocAsyncCtx12 + 8 | 0; //@line 28864
  HEAP32[$12 >> 2] = $8; //@line 28865
  sp = STACKTOP; //@line 28866
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 28870
 ___async_unwind = 0; //@line 28871
 HEAP32[$ReallocAsyncCtx12 >> 2] = 200; //@line 28872
 $11 = $ReallocAsyncCtx12 + 4 | 0; //@line 28873
 HEAP32[$11 >> 2] = $9; //@line 28874
 $12 = $ReallocAsyncCtx12 + 8 | 0; //@line 28875
 HEAP32[$12 >> 2] = $8; //@line 28876
 sp = STACKTOP; //@line 28877
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_512($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $35 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35848
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35850
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35852
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1014; //@line 35859
  $35 = ___async_retval; //@line 35860
  HEAP32[$35 >> 2] = $$0; //@line 35861
  return;
 }
 $11 = HEAP32[$2 >> 2] | 0; //@line 35864
 $13 = HEAP16[$4 >> 1] | 0; //@line 35866
 HEAP16[$4 >> 1] = $13 + 1 << 16 >> 16; //@line 35868
 HEAP8[($13 & 65535) + ($6 + 381) >> 0] = $11; //@line 35871
 $19 = HEAP16[$4 >> 1] | 0; //@line 35874
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 35876
 HEAP8[($19 & 65535) + ($6 + 381) >> 0] = $11 >>> 8; //@line 35879
 $25 = HEAP16[$4 >> 1] | 0; //@line 35882
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 35884
 HEAP8[($25 & 65535) + ($6 + 381) >> 0] = $11 >>> 16; //@line 35887
 $31 = HEAP16[$4 >> 1] | 0; //@line 35890
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 35892
 HEAP8[($31 & 65535) + ($6 + 381) >> 0] = $11 >>> 24; //@line 35895
 $$0 = 0; //@line 35896
 $35 = ___async_retval; //@line 35897
 HEAP32[$35 >> 2] = $$0; //@line 35898
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22789
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22793
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22795
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22797
 $9 = $4 + 12 | 0; //@line 22799
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22800
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 22801
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 22802
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 22805
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 22806
  HEAP32[$11 >> 2] = $9; //@line 22807
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 22808
  HEAP32[$12 >> 2] = $8; //@line 22809
  sp = STACKTOP; //@line 22810
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22814
 ___async_unwind = 0; //@line 22815
 HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 22816
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 22817
 HEAP32[$11 >> 2] = $9; //@line 22818
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 22819
 HEAP32[$12 >> 2] = $8; //@line 22820
 sp = STACKTOP; //@line 22821
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20022
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20026
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20028
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20030
 $9 = $4 + 12 | 0; //@line 20032
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20033
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 20034
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 20035
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 20038
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 20039
  HEAP32[$11 >> 2] = $9; //@line 20040
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 20041
  HEAP32[$12 >> 2] = $8; //@line 20042
  sp = STACKTOP; //@line 20043
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 20047
 ___async_unwind = 0; //@line 20048
 HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 20049
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 20050
 HEAP32[$11 >> 2] = $9; //@line 20051
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 20052
 HEAP32[$12 >> 2] = $8; //@line 20053
 sp = STACKTOP; //@line 20054
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1887
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 1892
  return $$0 | 0; //@line 1893
 }
 dest = $0; //@line 1895
 stop = dest + 68 | 0; //@line 1895
 do {
  HEAP32[dest >> 2] = 0; //@line 1895
  dest = dest + 4 | 0; //@line 1895
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 1899
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1900
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 1901
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 673; //@line 1904
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1906
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1908
  sp = STACKTOP; //@line 1909
  return 0; //@line 1910
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1912
 HEAP32[$0 + 60 >> 2] = $8; //@line 1914
 if (!$8) {
  $$0 = -24960; //@line 1917
  return $$0 | 0; //@line 1918
 }
 HEAP32[$0 >> 2] = $1; //@line 1920
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 1925
  return $$0 | 0; //@line 1926
 }
 HEAP32[$0 + 12 >> 2] = 4; //@line 1929
 HEAP32[$0 + 16 >> 2] = 14; //@line 1931
 $$0 = 0; //@line 1932
 return $$0 | 0; //@line 1933
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_178($0) {
 $0 = $0 | 0;
 var $$pre$i$i66 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 34924
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34930
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34932
 $$pre$i$i66 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 34933
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i66; //@line 34935
 if (!$$pre$i$i66) {
  HEAP32[___async_retval >> 2] = $8; //@line 34939
  return;
 }
 $12 = HEAP32[$$pre$i$i66 + 8 >> 2] | 0; //@line 34943
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 34944
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 34945
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 34948
  $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 34949
  HEAP32[$13 >> 2] = $6; //@line 34950
  $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 34951
  HEAP32[$14 >> 2] = $8; //@line 34952
  sp = STACKTOP; //@line 34953
  return;
 }
 ___async_unwind = 0; //@line 34956
 HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 34957
 $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 34958
 HEAP32[$13 >> 2] = $6; //@line 34959
 $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 34960
 HEAP32[$14 >> 2] = $8; //@line 34961
 sp = STACKTOP; //@line 34962
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_198($0) {
 $0 = $0 | 0;
 var $$pre$i$i4 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 35586
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35592
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35594
 $$pre$i$i4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 35595
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i4; //@line 35596
 if (!$$pre$i$i4) {
  _gpio_irq_set($8 + 28 | 0, 2, 0); //@line 35600
  return;
 }
 $12 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 35605
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 35606
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 35607
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 35610
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 35611
  HEAP32[$13 >> 2] = $6; //@line 35612
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 35613
  HEAP32[$14 >> 2] = $8; //@line 35614
  sp = STACKTOP; //@line 35615
  return;
 }
 ___async_unwind = 0; //@line 35618
 HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 35619
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 35620
 HEAP32[$13 >> 2] = $6; //@line 35621
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 35622
 HEAP32[$14 >> 2] = $8; //@line 35623
 sp = STACKTOP; //@line 35624
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14452
 $1 = HEAP32[2570] | 0; //@line 14453
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 14459
 } else {
  $19 = 0; //@line 14461
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 14467
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 14473
    $12 = HEAP32[$11 >> 2] | 0; //@line 14474
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 14480
     HEAP8[$12 >> 0] = 10; //@line 14481
     $22 = 0; //@line 14482
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14486
   $17 = ___overflow($1, 10) | 0; //@line 14487
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 784; //@line 14490
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 14492
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 14494
    sp = STACKTOP; //@line 14495
    return 0; //@line 14496
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14498
    $22 = $17 >> 31; //@line 14500
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 14507
 }
 return $22 | 0; //@line 14509
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_42($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 22440
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22442
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22444
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22448
 $9 = $2 + 944 | 0; //@line 22449
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 22452
 $12 = HEAP32[$4 >> 2] | 0; //@line 22453
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 22455
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($12, $2 + 996 | 0, 1); //@line 22456
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 22459
  $14 = $ReallocAsyncCtx17 + 4 | 0; //@line 22460
  HEAP32[$14 >> 2] = $6; //@line 22461
  $15 = $ReallocAsyncCtx17 + 8 | 0; //@line 22462
  HEAP32[$15 >> 2] = $8; //@line 22463
  sp = STACKTOP; //@line 22464
  return;
 }
 ___async_unwind = 0; //@line 22467
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 22468
 $14 = $ReallocAsyncCtx17 + 4 | 0; //@line 22469
 HEAP32[$14 >> 2] = $6; //@line 22470
 $15 = $ReallocAsyncCtx17 + 8 | 0; //@line 22471
 HEAP32[$15 >> 2] = $8; //@line 22472
 sp = STACKTOP; //@line 22473
 return;
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3704
 HEAP32[$0 >> 2] = 668; //@line 3705
 _gpio_irq_free($0 + 28 | 0); //@line 3707
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 3709
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 3715
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3716
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 3717
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 154; //@line 3720
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3722
    sp = STACKTOP; //@line 3723
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3726
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 3732
 if (!$10) {
  __ZdlPv($0); //@line 3735
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 3740
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3741
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 3742
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 155; //@line 3745
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 3747
  sp = STACKTOP; //@line 3748
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3751
 __ZdlPv($0); //@line 3752
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_234($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 37999
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 38001
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 38003
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 38005
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 38007
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 38009
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 38011
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 38013
 HEAP32[$2 + 1876 >> 2] = 5; //@line 38015
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(28) | 0; //@line 38016
 $16 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 38017
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 38021
  ___async_unwind = 0; //@line 38022
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 306; //@line 38024
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $4; //@line 38026
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $6; //@line 38028
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $8; //@line 38030
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $10; //@line 38032
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $12; //@line 38034
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $14; //@line 38036
 sp = STACKTOP; //@line 38037
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 35777
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35779
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35785
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 35788
 _equeue_event_dtor($4, 370); //@line 35789
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 35790
 $10 = _equeue_post($6, 371, $4) | 0; //@line 35791
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 372; //@line 35794
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 35795
  HEAP32[$11 >> 2] = $2; //@line 35796
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 35797
  HEAP32[$12 >> 2] = $8; //@line 35798
  sp = STACKTOP; //@line 35799
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 35803
 ___async_unwind = 0; //@line 35804
 HEAP32[$ReallocAsyncCtx3 >> 2] = 372; //@line 35805
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 35806
 HEAP32[$11 >> 2] = $2; //@line 35807
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 35808
 HEAP32[$12 >> 2] = $8; //@line 35809
 sp = STACKTOP; //@line 35810
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8385
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8387
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8389
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8391
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8393
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8395
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 8397
 $13 = HEAP32[$4 >> 2] | 0; //@line 8398
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 40 >> 2] | 0; //@line 8401
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 8402
 $17 = FUNCTION_TABLE_ii[$16 & 15]($13) | 0; //@line 8403
 if (!___async) {
  HEAP8[___async_retval >> 0] = $17; //@line 8407
  ___async_unwind = 0; //@line 8408
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 618; //@line 8410
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 8412
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 8414
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 8416
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 8418
 HEAP8[$ReallocAsyncCtx2 + 20 >> 0] = $12; //@line 8420
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 8422
 sp = STACKTOP; //@line 8423
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 15 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 26324
  HEAP32[$1 + 748 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 26329
  HEAP32[$1 + 752 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 26334
  HEAP32[$1 + 756 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 26339
  HEAP32[$1 + 760 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 26344
  HEAP32[$1 + 764 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 26349
  $26 = $0 + 132 | 0; //@line 26350
  HEAP8[$1 + 781 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 26355
  $$pre$phiZ2D = $26; //@line 26356
 } else {
  $$pre$phiZ2D = $0 + 132 | 0; //@line 26359
 }
 HEAP8[$1 + 736 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 26364
 HEAP8[$1 + 737 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 26368
 HEAP8[$1 + 769 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 26372
 HEAP32[$1 + 772 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 26376
 HEAP8[$1 + 776 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 26380
 HEAP8[$1 + 780 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 26384
 HEAP32[$1 + 784 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 26388
 HEAP32[$1 + 788 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 26392
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_320($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 4584
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4588
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4590
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4592
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4594
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4596
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4598
 $15 = $4 + 12 | 0; //@line 4600
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4601
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(24) | 0; //@line 4602
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 6) | 0; //@line 4603
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 4607
  ___async_unwind = 0; //@line 4608
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 268; //@line 4610
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $15; //@line 4612
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $8; //@line 4614
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $10; //@line 4616
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $12; //@line 4618
 HEAP32[$ReallocAsyncCtx24 + 20 >> 2] = $14; //@line 4620
 sp = STACKTOP; //@line 4621
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_401($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19924
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19928
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19930
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19932
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 19935
 $10 = HEAP32[$4 >> 2] | 0; //@line 19936
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 19939
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 19940
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 19941
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 632; //@line 19944
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 19945
  HEAP32[$14 >> 2] = $6; //@line 19946
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 19947
  HEAP32[$15 >> 2] = $8; //@line 19948
  sp = STACKTOP; //@line 19949
  return;
 }
 ___async_unwind = 0; //@line 19952
 HEAP32[$ReallocAsyncCtx7 >> 2] = 632; //@line 19953
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 19954
 HEAP32[$14 >> 2] = $6; //@line 19955
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 19956
 HEAP32[$15 >> 2] = $8; //@line 19957
 sp = STACKTOP; //@line 19958
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33825
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33827
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33831
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33833
 HEAP32[$2 + 980 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 33835
 if (!(HEAP8[$2 + 373 >> 0] | 0)) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 33843
  $16 = $2 + 380 | 0; //@line 33844
  HEAP8[$16 >> 0] = (HEAP8[$16 >> 0] | 0) + 1 << 24 >> 24; //@line 33847
 }
 $19 = HEAP32[$6 >> 2] | 0; //@line 33849
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 33851
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($19, $2 + 996 | 0, 1); //@line 33852
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 368; //@line 33855
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 33856
  HEAP32[$21 >> 2] = $8; //@line 33857
  sp = STACKTOP; //@line 33858
  return;
 }
 ___async_unwind = 0; //@line 33861
 HEAP32[$ReallocAsyncCtx4 >> 2] = 368; //@line 33862
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 33863
 HEAP32[$21 >> 2] = $8; //@line 33864
 sp = STACKTOP; //@line 33865
 return;
}
function _handle_lora_downlink($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 3360
 STACKTOP = STACKTOP + 16 | 0; //@line 3361
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3361
 $vararg_buffer1 = sp + 8 | 0; //@line 3362
 $3 = $0; //@line 3364
 $4 = $1; //@line 3365
 _printf(10904, sp) | 0; //@line 3366
 HEAP32[$vararg_buffer1 >> 2] = $2; //@line 3367
 _printf(11611, $vararg_buffer1) | 0; //@line 3368
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3369
 _putchar(10) | 0; //@line 3370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 3373
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3375
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3377
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 3379
  sp = STACKTOP; //@line 3380
  STACKTOP = sp; //@line 3381
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3383
  _memcpy($3 + 788 | 0, $4 | 0, $2 | 0) | 0; //@line 3385
  HEAP8[$3 + 782 >> 0] = $2; //@line 3388
  HEAP8[$3 + 781 >> 0] = -35; //@line 3390
  HEAP8[$3 + 780 >> 0] = -5; //@line 3392
  HEAP8[$3 + 783 >> 0] = 1; //@line 3394
  STACKTOP = sp; //@line 3395
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_399($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19827
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19829
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19833
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19835
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19837
 $11 = HEAP32[$2 >> 2] | 0; //@line 19838
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 19841
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 19842
 $17 = HEAP16[$15 >> 1] & 255; //@line 19844
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 19845
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 19846
 if (!___async) {
  ___async_unwind = 0; //@line 19849
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 630; //@line 19851
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 19853
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 19855
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 19857
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 19859
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 19861
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 19863
 sp = STACKTOP; //@line 19864
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_398($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19783
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19785
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19789
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19791
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19793
 $11 = HEAP32[$2 >> 2] | 0; //@line 19794
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 19797
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 19798
 $17 = HEAP16[$15 >> 1] & 255; //@line 19800
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 19801
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 19802
 if (!___async) {
  ___async_unwind = 0; //@line 19805
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 630; //@line 19807
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 19809
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 19811
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 19813
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 19815
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 19817
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 19819
 sp = STACKTOP; //@line 19820
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $22 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24928
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 24930
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 24933
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 24935
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 24936
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 24937
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 633; //@line 24940
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 24942
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 24944
  sp = STACKTOP; //@line 24945
  return 0; //@line 24946
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 24948
  $$ = $9 ? 7 : 6; //@line 24949
  $12 = HEAP8[$1 >> 0] | 0; //@line 24950
  $$1 = ($12 << 24 >> 24 < (HEAP8[$0 + 28 >> 0] | 0) ? 1 : $12 << 24 >> 24 > (HEAP8[$0 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 24959
  $22 = HEAP8[$1 + 1 >> 0] | 0; //@line 24961
  return (($22 << 24 >> 24 < (HEAP8[$0 + 32 >> 0] | 0) ? 1 : $22 << 24 >> 24 > (HEAP8[$0 + 33 >> 0] | 0)) ? $$1 & 3 : $$1) | 0; //@line 24971
 }
 return 0; //@line 24973
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33764
 STACKTOP = STACKTOP + 16 | 0; //@line 33765
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 33765
 $$byval_copy = sp; //@line 33766
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33768
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33770
 $6 = HEAP32[$2 + 1328 >> 2] | 0; //@line 33772
 HEAP32[$4 >> 2] = 508; //@line 33773
 HEAP32[$4 + 4 >> 2] = 0; //@line 33775
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 33776
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 33777
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 33777
 $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $2, $$byval_copy) | 0; //@line 33778
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 509; //@line 33781
  sp = STACKTOP; //@line 33782
  STACKTOP = sp; //@line 33783
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 33786
 ___async_unwind = 0; //@line 33787
 HEAP32[$ReallocAsyncCtx2 >> 2] = 509; //@line 33788
 sp = STACKTOP; //@line 33789
 STACKTOP = sp; //@line 33790
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4134
 HEAP32[$0 >> 2] = 0; //@line 4135
 $1 = $0 + 8 | 0; //@line 4136
 $2 = $0 + 16 | 0; //@line 4137
 HEAP32[$1 >> 2] = 0; //@line 4138
 HEAP32[$1 + 4 >> 2] = 0; //@line 4138
 HEAP32[$1 + 8 >> 2] = 0; //@line 4138
 HEAP32[$1 + 12 >> 2] = 0; //@line 4138
 $4 = $0 + 24 | 0; //@line 4140
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 4141
 HEAP8[$0 + 28 >> 0] = 1; //@line 4143
 $6 = HEAP32[$4 >> 2] | 0; //@line 4144
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4145
 $7 = _ticker_read_us($6) | 0; //@line 4146
 $8 = tempRet0; //@line 4147
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 169; //@line 4150
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4152
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4154
  sp = STACKTOP; //@line 4155
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4158
  $11 = $1; //@line 4159
  HEAP32[$11 >> 2] = $7; //@line 4161
  HEAP32[$11 + 4 >> 2] = $8; //@line 4164
  $15 = $2; //@line 4165
  HEAP32[$15 >> 2] = 0; //@line 4167
  HEAP32[$15 + 4 >> 2] = 0; //@line 4170
  return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6434
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6435
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(18920, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 6436
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 745; //@line 6439
  sp = STACKTOP; //@line 6440
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6443
 __ZN5Sht31C2E7PinNameS0_(23872, 10, 11); //@line 6444
 __ZN4mbed11InterruptInC2E7PinName(22896, 1337); //@line 6445
 __ZN6events10EventQueueC2EjPh(22968, 1664, 0); //@line 6446
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6447
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23168, 18920); //@line 6448
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 746; //@line 6451
  sp = STACKTOP; //@line 6452
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6455
  dest = 23176; //@line 6456
  stop = dest + 48 | 0; //@line 6456
  do {
   HEAP32[dest >> 2] = 0; //@line 6456
   dest = dest + 4 | 0; //@line 6456
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_252($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1265
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1267
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1269
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1273
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1277
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1279
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1281
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1283
 HEAP8[$2 + 688 >> 0] = 2; //@line 1285
 _printf(10904, $4) | 0; //@line 1286
 HEAP32[$8 >> 2] = 3; //@line 1287
 _printf(10970, $8) | 0; //@line 1288
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 1289
 _putchar(10) | 0; //@line 1290
 if (!___async) {
  ___async_unwind = 0; //@line 1293
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 109; //@line 1295
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 1297
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 1299
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 1301
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $16; //@line 1303
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $18; //@line 1305
 sp = STACKTOP; //@line 1306
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35395
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35397
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35399
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35401
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 35403
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 35405
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 18467; //@line 35410
  HEAP32[$4 + 4 >> 2] = $6; //@line 35412
  _abort_message(18376, $4); //@line 35413
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 35416
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 35419
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 35420
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 35421
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 35425
  ___async_unwind = 0; //@line 35426
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 786; //@line 35428
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 35430
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 35432
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 35434
 sp = STACKTOP; //@line 35435
 return;
}
function __ZL12send_messagev__async_cb_140($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30800
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30802
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30806
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30808
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 30812
 $12 = $AsyncRetVal << 16 >> 16; //@line 30813
 if ($AsyncRetVal << 16 >> 16 >= 0) {
  HEAP32[$2 >> 2] = $12; //@line 30816
  _printf(15868, $2) | 0; //@line 30817
  return;
 }
 if ($AsyncRetVal << 16 >> 16 != -1001) {
  HEAP32[$8 >> 2] = $12; //@line 30822
  _printf(15844, $8) | 0; //@line 30823
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 30826
 _puts(15816) | 0; //@line 30827
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 759; //@line 30830
  $15 = $ReallocAsyncCtx + 4 | 0; //@line 30831
  HEAP32[$15 >> 2] = $6; //@line 30832
  sp = STACKTOP; //@line 30833
  return;
 }
 ___async_unwind = 0; //@line 30836
 HEAP32[$ReallocAsyncCtx >> 2] = 759; //@line 30837
 $15 = $ReallocAsyncCtx + 4 | 0; //@line 30838
 HEAP32[$15 >> 2] = $6; //@line 30839
 sp = STACKTOP; //@line 30840
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_430($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21885
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21893
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21895
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21896
 $12 = (HEAP32[$0 + 8 >> 2] | 0) + 1016 | 0; //@line 21897
 $13 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 21898
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 21899
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($11, $12, $13); //@line 21900
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 495; //@line 21903
  $14 = $ReallocAsyncCtx9 + 4 | 0; //@line 21904
  HEAP32[$14 >> 2] = $8; //@line 21905
  $15 = $ReallocAsyncCtx9 + 8 | 0; //@line 21906
  HEAP32[$15 >> 2] = $10; //@line 21907
  sp = STACKTOP; //@line 21908
  return;
 }
 ___async_unwind = 0; //@line 21911
 HEAP32[$ReallocAsyncCtx9 >> 2] = 495; //@line 21912
 $14 = $ReallocAsyncCtx9 + 4 | 0; //@line 21913
 HEAP32[$14 >> 2] = $8; //@line 21914
 $15 = $ReallocAsyncCtx9 + 8 | 0; //@line 21915
 HEAP32[$15 >> 2] = $10; //@line 21916
 sp = STACKTOP; //@line 21917
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_101($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28784
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28786
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28788
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28790
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28792
 HEAP32[$2 >> 2] = 2; //@line 28793
 $9 = $2 + 4 | 0; //@line 28794
 HEAP8[$9 >> 0] = 1; //@line 28795
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 28796
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 28797
 if (!___async) {
  ___async_unwind = 0; //@line 28800
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 28802
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 28804
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $9; //@line 28806
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $4; //@line 28808
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 28810
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 28812
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 28814
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $2; //@line 28816
 sp = STACKTOP; //@line 28817
 return;
}
function _mbedtls_gcm_setkey__async_cb_509($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35587
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35589
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35591
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35593
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35595
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35597
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35599
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35601
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 35605
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 35608
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 35609
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 35613
  ___async_unwind = 0; //@line 35614
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 692; //@line 35616
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 35618
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 35620
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 35622
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 35624
 sp = STACKTOP; //@line 35625
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_244($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 559
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 565
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 567
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 569
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 571
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 576
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 578
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 579
 if (!___async) {
  ___async_unwind = 0; //@line 582
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 807; //@line 584
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 586
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 588
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 590
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 592
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 594
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 596
 sp = STACKTOP; //@line 597
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36478
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36480
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36482
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36486
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 36490
  label = 4; //@line 36491
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 36496
   label = 4; //@line 36497
  } else {
   $$037$off039 = 3; //@line 36499
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 36503
  $17 = $8 + 40 | 0; //@line 36504
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 36507
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 36517
    $$037$off039 = $$037$off038; //@line 36518
   } else {
    $$037$off039 = $$037$off038; //@line 36520
   }
  } else {
   $$037$off039 = $$037$off038; //@line 36523
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 36526
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3959
 STACKTOP = STACKTOP + 16 | 0; //@line 3960
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3960
 $$byval_copy = sp; //@line 3961
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3963
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3965
 $6 = HEAP32[$2 + 1328 >> 2] | 0; //@line 3967
 HEAP32[$4 >> 2] = 361; //@line 3968
 HEAP32[$4 + 4 >> 2] = 0; //@line 3970
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3971
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 3972
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 3972
 $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $2, $$byval_copy) | 0; //@line 3973
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 3976
  sp = STACKTOP; //@line 3977
  STACKTOP = sp; //@line 3978
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 3981
 ___async_unwind = 0; //@line 3982
 HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 3983
 sp = STACKTOP; //@line 3984
 STACKTOP = sp; //@line 3985
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14062
 while (1) {
  if ((HEAPU8[16439 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14069
   break;
  }
  $7 = $$016 + 1 | 0; //@line 14072
  if (($7 | 0) == 87) {
   $$01214 = 16527; //@line 14075
   $$115 = 87; //@line 14075
   label = 5; //@line 14076
   break;
  } else {
   $$016 = $7; //@line 14079
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 16527; //@line 14085
  } else {
   $$01214 = 16527; //@line 14087
   $$115 = $$016; //@line 14087
   label = 5; //@line 14088
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 14093
   $$113 = $$01214; //@line 14094
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 14098
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 14105
   if (!$$115) {
    $$012$lcssa = $$113; //@line 14108
    break;
   } else {
    $$01214 = $$113; //@line 14111
    label = 5; //@line 14112
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 14119
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14817
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14826
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14831
      HEAP32[$13 >> 2] = $2; //@line 14832
      $19 = $1 + 40 | 0; //@line 14833
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 14836
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14846
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 14850
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 14857
    }
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_305($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 3809
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3811
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3813
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3815
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3817
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3819
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3821
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 3824
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(28) | 0; //@line 3825
 __ZN7LoRaPHY18put_radio_to_sleepEv($15); //@line 3826
 if (!___async) {
  ___async_unwind = 0; //@line 3829
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 522; //@line 3831
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 3833
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 3835
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 3837
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 3839
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 3841
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 3843
 sp = STACKTOP; //@line 3844
 return;
}
function _mbedtls_gcm_setkey__async_cb_510($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 35632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35636
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35638
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35640
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35642
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35644
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35646
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 35647
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 35648
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 35652
  ___async_unwind = 0; //@line 35653
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 691; //@line 35655
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 35657
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 35659
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 35661
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 35663
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 35665
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 35667
 sp = STACKTOP; //@line 35668
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 var $13 = 0, $16 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23531
 STACKTOP = STACKTOP + 16 | 0; //@line 23532
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23532
 $7 = sp; //@line 23533
 HEAP8[$7 >> 0] = $1; //@line 23534
 HEAP8[$7 + 1 >> 0] = $2; //@line 23536
 HEAP8[$7 + 2 >> 0] = $3; //@line 23538
 HEAPF32[$7 + 4 >> 2] = $4; //@line 23540
 HEAPF32[$7 + 8 >> 2] = $5; //@line 23542
 HEAP16[$7 + 12 >> 1] = $6; //@line 23544
 $13 = HEAP32[$0 >> 2] | 0; //@line 23545
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 68 >> 2] | 0; //@line 23548
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 23549
 FUNCTION_TABLE_viii[$16 & 7]($13, $7, 0); //@line 23550
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 612; //@line 23553
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 23555
  sp = STACKTOP; //@line 23556
  STACKTOP = sp; //@line 23557
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 23559
  STACKTOP = sp; //@line 23560
  return;
 }
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11663
 $1 = $0 + 12 | 0; //@line 11664
 $2 = HEAP32[$1 >> 2] | 0; //@line 11665
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11669
   _mbed_assert_internal(15061, 15066, 528); //@line 11670
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 375; //@line 11673
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 11675
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 11677
    sp = STACKTOP; //@line 11678
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11681
    $7 = HEAP32[$1 >> 2] | 0; //@line 11683
    break;
   }
  } else {
   $7 = $2; //@line 11687
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 11690
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11691
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 11692
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 376; //@line 11695
  sp = STACKTOP; //@line 11696
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11699
  return;
 }
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $not$ = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 926
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 928
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 930
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 932
 $not$ = HEAP8[___async_retval >> 0] & 1 ^ 1; //@line 936
 if ($2 | $not$) {
  $$024 = $2 ? $2 & $not$ ? -1006 : -1005 : -1004; //@line 942
  $27 = ___async_retval; //@line 943
  HEAP32[$27 >> 2] = $$024; //@line 944
  return;
 }
 $10 = $4 + 112 | 0; //@line 947
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 949
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 950
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 950
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 950
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 955
 $22 = (HEAP32[$4 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 961
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 966
 $$024 = 0; //@line 967
 $27 = ___async_retval; //@line 968
 HEAP32[$27 >> 2] = $$024; //@line 969
 return;
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3653
 HEAP32[$0 >> 2] = 668; //@line 3654
 _gpio_irq_free($0 + 28 | 0); //@line 3656
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 3658
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 3664
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3665
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 3666
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 152; //@line 3669
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3671
    sp = STACKTOP; //@line 3672
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3675
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 3681
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 3688
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3689
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 3690
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 153; //@line 3693
  sp = STACKTOP; //@line 3694
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3697
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_177($0) {
 $0 = $0 | 0;
 var $$pre122 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 34882
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34884
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34886
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34888
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34890
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34892
 $$pre122 = HEAP32[$2 >> 2] | 0; //@line 34893
 if (!$$pre122) {
  HEAP32[$4 >> 2] = 0; //@line 34896
  HEAP32[___async_retval >> 2] = $10; //@line 34898
  return;
 }
 $13 = HEAP32[$$pre122 + 4 >> 2] | 0; //@line 34902
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 34903
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 34904
 if (!___async) {
  ___async_unwind = 0; //@line 34907
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 34909
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 34911
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 34913
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 34915
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 34917
 sp = STACKTOP; //@line 34918
 return;
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4089
 $1 = $0 + 40 | 0; //@line 4090
 $2 = $0 + 52 | 0; //@line 4091
 $3 = HEAP32[$2 >> 2] | 0; //@line 4092
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4096
   _mbed_assert_internal(15061, 15066, 528); //@line 4097
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 167; //@line 4100
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 4102
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 4104
    sp = STACKTOP; //@line 4105
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4108
    $8 = HEAP32[$2 >> 2] | 0; //@line 4110
    break;
   }
  } else {
   $8 = $3; //@line 4114
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 4117
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4118
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 4119
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 168; //@line 4122
  sp = STACKTOP; //@line 4123
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4126
  return;
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26217
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26219
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26221
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26227
 _printf(10904, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 26230
 HEAP32[$10 >> 2] = 3; //@line 26231
 _printf(10999, $10) | 0; //@line 26232
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26233
 _putchar(10) | 0; //@line 26234
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 141; //@line 26237
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 26238
  HEAP32[$13 >> 2] = $4; //@line 26239
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 26240
  HEAP32[$14 >> 2] = $2; //@line 26241
  sp = STACKTOP; //@line 26242
  return;
 }
 ___async_unwind = 0; //@line 26245
 HEAP32[$ReallocAsyncCtx4 >> 2] = 141; //@line 26246
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 26247
 HEAP32[$13 >> 2] = $4; //@line 26248
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 26249
 HEAP32[$14 >> 2] = $2; //@line 26250
 sp = STACKTOP; //@line 26251
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6222
 HEAP32[$0 >> 2] = 10108; //@line 6223
 $1 = $0 + 40 | 0; //@line 6224
 _emscripten_asm_const_ii(12, $1 | 0) | 0; //@line 6225
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6227
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6232
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6233
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6234
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 738; //@line 6237
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6239
    sp = STACKTOP; //@line 6240
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6243
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6248
 __ZN4mbed10TimerEventD2Ev($0); //@line 6249
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 739; //@line 6252
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6254
  sp = STACKTOP; //@line 6255
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6258
  __ZdlPv($0); //@line 6259
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_318($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx25 = 0, sp = 0;
 sp = STACKTOP; //@line 4506
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4510
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4512
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4514
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4516
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4518
 $13 = $4 + 12 | 0; //@line 4520
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4521
 $ReallocAsyncCtx25 = _emscripten_realloc_async_context(20) | 0; //@line 4522
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 4523
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 4527
  ___async_unwind = 0; //@line 4528
 }
 HEAP32[$ReallocAsyncCtx25 >> 2] = 263; //@line 4530
 HEAP32[$ReallocAsyncCtx25 + 4 >> 2] = $13; //@line 4532
 HEAP32[$ReallocAsyncCtx25 + 8 >> 2] = $8; //@line 4534
 HEAP32[$ReallocAsyncCtx25 + 12 >> 2] = $10; //@line 4536
 HEAP32[$ReallocAsyncCtx25 + 16 >> 2] = $12; //@line 4538
 sp = STACKTOP; //@line 4539
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30195
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30197
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30199
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30201
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30203
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 30209
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 30212
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 30213
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 30214
 if (!___async) {
  ___async_unwind = 0; //@line 30217
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 587; //@line 30219
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 30221
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 30223
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 30225
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 30227
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 30229
 sp = STACKTOP; //@line 30230
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_123($0) {
 $0 = $0 | 0;
 var $19 = 0, $23 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29749
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29753
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29755
 HEAP32[$4 + 364 >> 2] = 2; //@line 29757
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 29765
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 29770
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  $19 = $4 + 944 | 0; //@line 29774
  HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 29777
 }
 $23 = HEAP32[$4 + 356 >> 2] | 0; //@line 29780
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29782
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($23, $4 + 996 | 0, 1); //@line 29783
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 29786
  sp = STACKTOP; //@line 29787
  return;
 }
 ___async_unwind = 0; //@line 29790
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 29791
 sp = STACKTOP; //@line 29792
 return;
}
function _ticker_read_us__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30006
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30008
 $3 = $2 + 4 | 0; //@line 30009
 $4 = HEAP32[$3 >> 2] | 0; //@line 30010
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 30013
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 30014
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 30015
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 713; //@line 30018
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 30019
  HEAP32[$9 >> 2] = $3; //@line 30020
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 30021
  HEAP32[$10 >> 2] = $4; //@line 30022
  sp = STACKTOP; //@line 30023
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 30027
 ___async_unwind = 0; //@line 30028
 HEAP32[$ReallocAsyncCtx >> 2] = 713; //@line 30029
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 30030
 HEAP32[$9 >> 2] = $3; //@line 30031
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 30032
 HEAP32[$10 >> 2] = $4; //@line 30033
 sp = STACKTOP; //@line 30034
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6289
 $2 = $0 + 12 | 0; //@line 6291
 $3 = HEAP32[$2 >> 2] | 0; //@line 6292
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6296
   _mbed_assert_internal(15061, 15066, 528); //@line 6297
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 741; //@line 6300
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 6302
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6304
    sp = STACKTOP; //@line 6305
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6308
    $8 = HEAP32[$2 >> 2] | 0; //@line 6310
    break;
   }
  } else {
   $8 = $3; //@line 6314
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 6317
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6319
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 6320
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 742; //@line 6323
  sp = STACKTOP; //@line 6324
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6327
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4045
 HEAP32[$0 >> 2] = 10108; //@line 4046
 __ZN4mbed6Ticker6detachEv($0); //@line 4047
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 4049
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4055
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4056
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 4057
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 165; //@line 4060
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4062
    sp = STACKTOP; //@line 4063
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4066
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4071
 __ZN4mbed10TimerEventD2Ev($0); //@line 4072
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 166; //@line 4075
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 4077
  sp = STACKTOP; //@line 4078
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4081
  __ZdlPv($0); //@line 4082
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_377($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8900
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 8904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8906
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8907
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 76 >> 2] | 0; //@line 8910
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 8911
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 8912
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 625; //@line 8915
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 8916
  HEAP8[$11 >> 0] = $4; //@line 8917
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 8918
  HEAP32[$12 >> 2] = $6; //@line 8919
  sp = STACKTOP; //@line 8920
  return;
 }
 ___async_unwind = 0; //@line 8923
 HEAP32[$ReallocAsyncCtx9 >> 2] = 625; //@line 8924
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 8925
 HEAP8[$11 >> 0] = $4; //@line 8926
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 8927
 HEAP32[$12 >> 2] = $6; //@line 8928
 sp = STACKTOP; //@line 8929
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_319($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 4545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4549
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4551
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 6; //@line 4554
  HEAP32[___async_retval >> 2] = -1014; //@line 4556
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(12) | 0; //@line 4559
 _mbed_assert_internal(12851, 11935, 1243); //@line 4560
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 265; //@line 4563
  $8 = $ReallocAsyncCtx30 + 4 | 0; //@line 4564
  HEAP32[$8 >> 2] = $4; //@line 4565
  $9 = $ReallocAsyncCtx30 + 8 | 0; //@line 4566
  HEAP32[$9 >> 2] = $6; //@line 4567
  sp = STACKTOP; //@line 4568
  return;
 }
 ___async_unwind = 0; //@line 4571
 HEAP32[$ReallocAsyncCtx30 >> 2] = 265; //@line 4572
 $8 = $ReallocAsyncCtx30 + 4 | 0; //@line 4573
 HEAP32[$8 >> 2] = $4; //@line 4574
 $9 = $ReallocAsyncCtx30 + 8 | 0; //@line 4575
 HEAP32[$9 >> 2] = $6; //@line 4576
 sp = STACKTOP; //@line 4577
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14650
 STACKTOP = STACKTOP + 16 | 0; //@line 14651
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14651
 $1 = sp; //@line 14652
 HEAP32[$1 >> 2] = $varargs; //@line 14653
 $2 = HEAP32[2538] | 0; //@line 14654
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14655
 _vfprintf($2, $0, $1) | 0; //@line 14656
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 787; //@line 14659
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14661
  sp = STACKTOP; //@line 14662
  STACKTOP = sp; //@line 14663
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14665
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14666
 _fputc(10, $2) | 0; //@line 14667
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 788; //@line 14670
  sp = STACKTOP; //@line 14671
  STACKTOP = sp; //@line 14672
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14674
  _abort(); //@line 14675
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_64($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26127
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26129
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26131
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26133
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26135
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26137
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26139
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 26140
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($4); //@line 26141
 if (!___async) {
  ___async_unwind = 0; //@line 26144
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 140; //@line 26146
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 26148
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 26150
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 26152
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 26154
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 26156
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 26158
 sp = STACKTOP; //@line 26159
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36605
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36607
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36611
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 36613
 $9 = HEAP32[$2 >> 2] | 0; //@line 36614
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 36617
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 36619
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 36620
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 36621
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 637; //@line 36624
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 36625
  HEAP32[$15 >> 2] = $2; //@line 36626
  sp = STACKTOP; //@line 36627
  return;
 }
 ___async_unwind = 0; //@line 36630
 HEAP32[$ReallocAsyncCtx2 >> 2] = 637; //@line 36631
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 36632
 HEAP32[$15 >> 2] = $2; //@line 36633
 sp = STACKTOP; //@line 36634
 return;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28467
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28469
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28471
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28473
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28475
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5721] | 0)) {
  _serial_init(22888, 2, 3); //@line 28483
 }
 $12 = HEAP8[$6 >> 0] | 0; //@line 28486
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28487
 _serial_putc(22888, $12); //@line 28488
 if (!___async) {
  ___async_unwind = 0; //@line 28491
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 732; //@line 28493
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = 0; //@line 28495
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $AsyncRetVal; //@line 28497
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 28499
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $4; //@line 28501
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 28503
 sp = STACKTOP; //@line 28504
 return;
}
function __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$034 = 0, $$sink = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $30 = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 26718
 $11 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 + 3 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 26726
 $13 = HEAP16[$3 + ($11 * 24 | 0) >> 1] | 0; //@line 26728
 $14 = $3 + ($11 * 24 | 0) + 12 | 0; //@line 26729
 HEAP32[$14 >> 2] = 0; //@line 26730
 if (!(HEAP8[$1 >> 0] | 0)) {
  $18 = HEAP32[$1 + 4 >> 2] | 0; //@line 26735
  $$0 = $18 >>> 0 < 36e5 ? 100 : $18 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 26739
  $$034 = ($13 & 65535) > ($$0 & 65535) ? $13 : $$0; //@line 26742
 } else {
  $$034 = $13; //@line 26744
 }
 if (!(HEAP8[$1 + 2 >> 0] | 0)) {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$sink = 0; //@line 26754
   HEAP32[$14 >> 2] = $$sink; //@line 26755
   return;
  }
 }
 $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 26760
 $$sink = (Math_imul($30, $$034 & 65535) | 0) - $30 | 0; //@line 26764
 HEAP32[$14 >> 2] = $$sink; //@line 26765
 return;
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6181
 HEAP32[$0 >> 2] = 10108; //@line 6182
 $1 = $0 + 40 | 0; //@line 6183
 _emscripten_asm_const_ii(12, $1 | 0) | 0; //@line 6184
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6186
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6191
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6192
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6193
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 736; //@line 6196
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6198
    sp = STACKTOP; //@line 6199
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6202
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6207
 __ZN4mbed10TimerEventD2Ev($0); //@line 6208
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 737; //@line 6211
  sp = STACKTOP; //@line 6212
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6215
  return;
 }
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_487($0) {
 $0 = $0 | 0;
 var $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32972
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32974
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 32976
 HEAP8[$2 + 688 >> 0] = 0; //@line 32978
 $6 = HEAP32[$2 + 784 >> 2] | 0; //@line 32980
 if (!$6) {
  return;
 }
 $9 = HEAP32[$6 + 44 >> 2] | 0; //@line 32986
 if (!$9) {
  return;
 }
 $15 = HEAPU8[$2 + 782 >> 0] | 0; //@line 32995
 $18 = HEAP8[$2 + 781 >> 0] | 0; //@line 32998
 $20 = HEAP8[$2 + 780 >> 0] | 0; //@line 33000
 $21 = HEAP32[$9 >> 2] | 0; //@line 33001
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 33002
 FUNCTION_TABLE_viiiii[$21 & 7]($6 + 32 | 0, $2 + 788 | 0, $15, $18, $20); //@line 33003
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 33006
  sp = STACKTOP; //@line 33007
  return;
 }
 ___async_unwind = 0; //@line 33010
 HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 33011
 sp = STACKTOP; //@line 33012
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28713
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28715
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28717
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28719
 HEAP32[$2 + 1960 >> 2] = 0; //@line 28721
 HEAP32[$2 + 1956 >> 2] = 0; //@line 28723
 HEAP32[$4 >> 2] = 1; //@line 28724
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 28725
 $9 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 28726
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 314; //@line 28729
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 28730
  HEAP32[$10 >> 2] = $6; //@line 28731
  sp = STACKTOP; //@line 28732
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 28736
 ___async_unwind = 0; //@line 28737
 HEAP32[$ReallocAsyncCtx4 >> 2] = 314; //@line 28738
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 28739
 HEAP32[$10 >> 2] = $6; //@line 28740
 sp = STACKTOP; //@line 28741
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28748
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28752
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28754
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28756
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28758
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28760
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28762
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 7; //@line 28763
 HEAP8[$4 >> 0] = 1; //@line 28764
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 28765
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 28766
 if (!___async) {
  ___async_unwind = 0; //@line 28769
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 313; //@line 28771
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $10; //@line 28773
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 28775
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $14; //@line 28777
 sp = STACKTOP; //@line 28778
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_207($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35830
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35832
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 35833
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 35837
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 35841
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 35842
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 35843
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 373; //@line 35846
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 35847
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 35848
  sp = STACKTOP; //@line 35849
  return;
 }
 ___async_unwind = 0; //@line 35852
 HEAP32[$ReallocAsyncCtx2 >> 2] = 373; //@line 35853
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 35854
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 35855
 sp = STACKTOP; //@line 35856
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_227($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 37307
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37309
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37311
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37313
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37315
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37317
 $12 = HEAP32[$2 + 356 >> 2] | 0; //@line 37319
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 37321
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($12, $2 + 1056 | 0); //@line 37322
 if (!___async) {
  ___async_unwind = 0; //@line 37325
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 379; //@line 37327
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 37329
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 37331
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 37333
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 37335
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 37337
 sp = STACKTOP; //@line 37338
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13893
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13893
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13894
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 13895
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 13904
    $$016 = $9; //@line 13907
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 13907
   } else {
    $$016 = $0; //@line 13909
    $storemerge = 0; //@line 13909
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 13911
   $$0 = $$016; //@line 13912
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 13916
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 13922
   HEAP32[tempDoublePtr >> 2] = $2; //@line 13925
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 13925
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 13926
  }
 }
 return +$$0;
}
function _mbed_error_printf__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28511
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28515
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28517
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28519
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28521
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 28522
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $14 = HEAP8[$10 + $12 >> 0] | 0; //@line 28529
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28530
 _serial_putc(22888, $14); //@line 28531
 if (!___async) {
  ___async_unwind = 0; //@line 28534
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 732; //@line 28536
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $12; //@line 28538
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 28540
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28542
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28544
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28546
 sp = STACKTOP; //@line 28547
 return;
}
function _equeue_sema_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5668
 STACKTOP = STACKTOP + 16 | 0; //@line 5669
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5669
 $2 = sp + 8 | 0; //@line 5670
 $3 = sp; //@line 5671
 _pthread_mutex_lock($0 | 0) | 0; //@line 5672
 $4 = $0 + 76 | 0; //@line 5673
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   if (($1 | 0) < 0) {
    _pthread_cond_wait($0 + 28 | 0, $0 | 0) | 0; //@line 5681
    break;
   } else {
    _gettimeofday($2 | 0, 0) | 0; //@line 5684
    HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + (($1 >>> 0) / 1e3 | 0); //@line 5688
    HEAP32[$3 + 4 >> 2] = ((HEAP32[$2 + 4 >> 2] | 0) * 1e3 | 0) + ($1 * 1e6 | 0); //@line 5695
    _pthread_cond_timedwait($0 + 28 | 0, $0 | 0, $3 | 0) | 0; //@line 5697
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$4 >> 0] | 0) != 0; //@line 5703
 HEAP8[$4 >> 0] = 0; //@line 5704
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5705
 STACKTOP = sp; //@line 5706
 return $20 | 0; //@line 5706
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19400
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19402
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19404
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19408
 $11 = $2 + 689 | 0; //@line 19411
 HEAP8[$11 >> 0] = 0; //@line 19412
 _printf(10904, $4) | 0; //@line 19413
 HEAP32[$8 >> 2] = HEAPU8[$11 >> 0]; //@line 19416
 _printf(11079, $8) | 0; //@line 19417
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19418
 _putchar(10) | 0; //@line 19419
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 51; //@line 19422
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 19423
  HEAP32[$14 >> 2] = $2; //@line 19424
  sp = STACKTOP; //@line 19425
  return;
 }
 ___async_unwind = 0; //@line 19428
 HEAP32[$ReallocAsyncCtx2 >> 2] = 51; //@line 19429
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 19430
 HEAP32[$14 >> 2] = $2; //@line 19431
 sp = STACKTOP; //@line 19432
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16279
 STACKTOP = STACKTOP + 16 | 0; //@line 16280
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16280
 $3 = sp; //@line 16281
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 16283
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 16286
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16287
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 16288
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 811; //@line 16291
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16293
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16295
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16297
  sp = STACKTOP; //@line 16298
  STACKTOP = sp; //@line 16299
  return 0; //@line 16299
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16301
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 16305
 }
 STACKTOP = sp; //@line 16307
 return $8 & 1 | 0; //@line 16307
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_347($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6203
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6205
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6207
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6209
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6211
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6213
 $12 = HEAP32[$2 + 356 >> 2] | 0; //@line 6215
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 6217
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($12, $2 + 1036 | 0); //@line 6218
 if (!___async) {
  ___async_unwind = 0; //@line 6221
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 512; //@line 6223
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 6225
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 6227
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 6229
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 6231
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 6233
 sp = STACKTOP; //@line 6234
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb_392($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19334
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19336
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19338
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19342
 __ZN4mbed6Ticker6detachEv($2 + 1048 | 0); //@line 19346
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 19348
 _printf(10904, $4) | 0; //@line 19349
 HEAP32[$8 >> 2] = 0; //@line 19350
 _printf(10970, $8) | 0; //@line 19351
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 19352
 _putchar(10) | 0; //@line 19353
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 54; //@line 19356
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 19357
  HEAP32[$13 >> 2] = $2; //@line 19358
  sp = STACKTOP; //@line 19359
  return;
 }
 ___async_unwind = 0; //@line 19362
 HEAP32[$ReallocAsyncCtx >> 2] = 54; //@line 19363
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 19364
 HEAP32[$13 >> 2] = $2; //@line 19365
 sp = STACKTOP; //@line 19366
 return;
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 25666
  return $$011 | 0; //@line 25667
 }
 $wide$trip$count = $3 & 255; //@line 25670
 $$01012 = 0; //@line 25671
 $indvars$iv = $2 & 255; //@line 25671
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 25674
  $9 = $8 & 65535; //@line 25675
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 25724
  $indvars$iv = $indvars$iv + 1 | 0; //@line 25725
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 25734
 return $$011 | 0; //@line 25735
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_327($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 5301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5307
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5309
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5311
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5313
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5315
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 1; //@line 5316
 HEAP8[$4 >> 0] = 1; //@line 5317
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(16) | 0; //@line 5318
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 5319
 if (!___async) {
  ___async_unwind = 0; //@line 5322
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 255; //@line 5324
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $10; //@line 5326
 HEAP32[$ReallocAsyncCtx15 + 8 >> 2] = $12; //@line 5328
 HEAP32[$ReallocAsyncCtx15 + 12 >> 2] = $14; //@line 5330
 sp = STACKTOP; //@line 5331
 return;
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19129
 STACKTOP = STACKTOP + 16 | 0; //@line 19130
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19130
 _printf(12967, sp) | 0; //@line 19133
 _printf(13524, sp + 8 | 0) | 0; //@line 19134
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 19135
 _putchar(10) | 0; //@line 19136
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 560; //@line 19139
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19141
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19143
  sp = STACKTOP; //@line 19144
  STACKTOP = sp; //@line 19145
  return 0; //@line 19145
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19147
  $6 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $0 + 360 | 0) | 0; //@line 19150
  STACKTOP = sp; //@line 19151
  return $6 | 0; //@line 19151
 }
 return 0; //@line 19153
}
function _schedule_interrupt__async_cb_85($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27991
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27995
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27997
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27999
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28000
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 28019
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 28020
 FUNCTION_TABLE_v[$16 & 15](); //@line 28021
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 709; //@line 28024
  sp = STACKTOP; //@line 28025
  return;
 }
 ___async_unwind = 0; //@line 28028
 HEAP32[$ReallocAsyncCtx6 >> 2] = 709; //@line 28029
 sp = STACKTOP; //@line 28030
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_33($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21378
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21382
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21384
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21385
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 21389
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 21393
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21394
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 21395
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 21398
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21399
  HEAP32[$11 >> 2] = $4; //@line 21400
  sp = STACKTOP; //@line 21401
  return;
 }
 ___async_unwind = 0; //@line 21404
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 21405
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21406
 HEAP32[$11 >> 2] = $4; //@line 21407
 sp = STACKTOP; //@line 21408
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4004
 HEAP32[$0 >> 2] = 10108; //@line 4005
 __ZN4mbed6Ticker6detachEv($0); //@line 4006
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 4008
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4014
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4015
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 4016
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 163; //@line 4019
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4021
    sp = STACKTOP; //@line 4022
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4025
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4030
 __ZN4mbed10TimerEventD2Ev($0); //@line 4031
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 164; //@line 4034
  sp = STACKTOP; //@line 4035
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4038
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_316($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 4439
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4447
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4449
 $11 = $4 + 12 | 0; //@line 4451
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4452
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 4453
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 4454
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 4458
  ___async_unwind = 0; //@line 4459
 }
 HEAP32[$ReallocAsyncCtx26 >> 2] = 257; //@line 4461
 HEAP32[$ReallocAsyncCtx26 + 4 >> 2] = $11; //@line 4463
 HEAP32[$ReallocAsyncCtx26 + 8 >> 2] = $8; //@line 4465
 HEAP32[$ReallocAsyncCtx26 + 12 >> 2] = $10; //@line 4467
 sp = STACKTOP; //@line 4468
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_314($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx27 = 0, sp = 0;
 sp = STACKTOP; //@line 4372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4378
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4380
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4382
 $11 = $4 + 12 | 0; //@line 4384
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4385
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(16) | 0; //@line 4386
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 4387
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 4391
  ___async_unwind = 0; //@line 4392
 }
 HEAP32[$ReallocAsyncCtx27 >> 2] = 248; //@line 4394
 HEAP32[$ReallocAsyncCtx27 + 4 >> 2] = $11; //@line 4396
 HEAP32[$ReallocAsyncCtx27 + 8 >> 2] = $8; //@line 4398
 HEAP32[$ReallocAsyncCtx27 + 12 >> 2] = $10; //@line 4400
 sp = STACKTOP; //@line 4401
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 4305
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4309
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4311
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4313
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4315
 $11 = $4 + 12 | 0; //@line 4317
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4318
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(16) | 0; //@line 4319
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 4320
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 4324
  ___async_unwind = 0; //@line 4325
 }
 HEAP32[$ReallocAsyncCtx28 >> 2] = 243; //@line 4327
 HEAP32[$ReallocAsyncCtx28 + 4 >> 2] = $11; //@line 4329
 HEAP32[$ReallocAsyncCtx28 + 8 >> 2] = $8; //@line 4331
 HEAP32[$ReallocAsyncCtx28 + 12 >> 2] = $10; //@line 4333
 sp = STACKTOP; //@line 4334
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5726
 STACKTOP = STACKTOP + 32 | 0; //@line 5727
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5727
 $1 = sp; //@line 5728
 HEAP8[$1 >> 0] = 1; //@line 5729
 HEAP32[$1 + 4 >> 2] = 0; //@line 5731
 HEAP32[$1 + 8 >> 2] = 0; //@line 5733
 HEAP32[$1 + 12 >> 2] = 23808; //@line 5735
 HEAP32[$1 + 16 >> 2] = 23824; //@line 5737
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 5740
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5741
 $9 = FUNCTION_TABLE_iii[$8 & 31]($0, $1) | 0; //@line 5742
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 185; //@line 5745
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5747
  sp = STACKTOP; //@line 5748
  STACKTOP = sp; //@line 5749
  return 0; //@line 5749
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5751
  STACKTOP = sp; //@line 5752
  return $9 | 0; //@line 5752
 }
 return 0; //@line 5754
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15173
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15179
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 15182
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 15185
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15186
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 15187
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 793; //@line 15190
    sp = STACKTOP; //@line 15191
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15194
    break;
   }
  }
 } while (0);
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6071
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6079
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6081
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6083
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6085
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6087
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6089
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6091
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 6102
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 6103
 HEAP32[$10 >> 2] = 0; //@line 6104
 HEAP32[$12 >> 2] = 0; //@line 6105
 HEAP32[$14 >> 2] = 0; //@line 6106
 HEAP32[$2 >> 2] = 0; //@line 6107
 $33 = HEAP32[$16 >> 2] | 0; //@line 6108
 HEAP32[$16 >> 2] = $33 | $18; //@line 6113
 if ($20 | 0) {
  ___unlockfile($22); //@line 6116
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 6119
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_381($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9392
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9396
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9398
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9399
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 9403
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 9407
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 9408
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 9409
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 9412
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 9413
  HEAP32[$11 >> 2] = $4; //@line 9414
  sp = STACKTOP; //@line 9415
  return;
 }
 ___async_unwind = 0; //@line 9418
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 9419
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 9420
 HEAP32[$11 >> 2] = $4; //@line 9421
 sp = STACKTOP; //@line 9422
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_351($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6547
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6551
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[23842] | 0) << 16 | (HEAPU8[23843] | 0) << 24 | (HEAPU8[23841] | 0) << 8 | (HEAPU8[23840] | 0); //@line 6568
  $$0 = 0; //@line 6569
 } else {
  $$0 = $AsyncRetVal; //@line 6571
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 6573
 _mbedtls_cipher_free(22532); //@line 6574
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 6577
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 6578
  HEAP32[$19 >> 2] = $$0; //@line 6579
  sp = STACKTOP; //@line 6580
  return;
 }
 ___async_unwind = 0; //@line 6583
 HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 6584
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 6585
 HEAP32[$19 >> 2] = $$0; //@line 6586
 sp = STACKTOP; //@line 6587
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_363($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7811
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7815
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7817
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 7818
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 7822
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 7826
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 7827
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 7828
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 7831
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 7832
  HEAP32[$11 >> 2] = $4; //@line 7833
  sp = STACKTOP; //@line 7834
  return;
 }
 ___async_unwind = 0; //@line 7837
 HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 7838
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 7839
 HEAP32[$11 >> 2] = $4; //@line 7840
 sp = STACKTOP; //@line 7841
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_265($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1816
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1820
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[23842] | 0) << 16 | (HEAPU8[23843] | 0) << 24 | (HEAPU8[23841] | 0) << 8 | (HEAPU8[23840] | 0); //@line 1837
  $$0 = 0; //@line 1838
 } else {
  $$0 = $AsyncRetVal; //@line 1840
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 1842
 _mbedtls_cipher_free(22532); //@line 1843
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1846
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 1847
  HEAP32[$19 >> 2] = $$0; //@line 1848
  sp = STACKTOP; //@line 1849
  return;
 }
 ___async_unwind = 0; //@line 1852
 HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 1853
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 1854
 HEAP32[$19 >> 2] = $$0; //@line 1855
 sp = STACKTOP; //@line 1856
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 1974
  return $$028 | 0; //@line 1975
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 1979
 $8 = $7 & 255; //@line 1980
 $9 = $1 - $8 | 0; //@line 1981
 HEAP32[$2 >> 2] = $9; //@line 1982
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 1986
 if (!$1) {
  $$0$lcssa = $13; //@line 1989
 } else {
  $$02930 = 0; //@line 1991
  $$031 = $13; //@line 1991
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2001
   $$02930 = $$02930 + 1 | 0; //@line 2002
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2005
    break;
   } else {
    $$031 = $23; //@line 2008
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2014
 return $$028 | 0; //@line 2015
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20663
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20669
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20673
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20675
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 20677
 $16 = HEAP16[$0 + 30 >> 1] | 0; //@line 20679
 _printf(11836, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 20680
 _printf(11849, $6) | 0; //@line 20681
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 20682
 _putchar(10) | 0; //@line 20683
 if (!___async) {
  ___async_unwind = 0; //@line 20686
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 20688
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $10; //@line 20690
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $12; //@line 20692
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $14; //@line 20694
 HEAP16[$ReallocAsyncCtx2 + 14 >> 1] = $16; //@line 20696
 sp = STACKTOP; //@line 20697
 return;
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10284
 STACKTOP = STACKTOP + 16 | 0; //@line 10285
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10285
 if ((HEAP32[$0 + 1876 >> 2] | 0) >>> 0 >= 3) {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 10294
  STACKTOP = sp; //@line 10295
  return $$0 | 0; //@line 10295
 }
 _printf(11887, sp) | 0; //@line 10297
 _printf(12707, sp + 8 | 0) | 0; //@line 10298
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10299
 _putchar(10) | 0; //@line 10300
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 327; //@line 10303
  sp = STACKTOP; //@line 10304
  STACKTOP = sp; //@line 10305
  return 0; //@line 10305
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10307
 $$0 = -1e3; //@line 10308
 STACKTOP = sp; //@line 10309
 return $$0 | 0; //@line 10309
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_417($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20465
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20467
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20469
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20471
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20473
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20475
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 20476
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 20477
 if (!___async) {
  ___async_unwind = 0; //@line 20480
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 58; //@line 20482
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 20484
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 20486
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 20488
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 20490
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $2; //@line 20492
 sp = STACKTOP; //@line 20493
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_134($0) {
 $0 = $0 | 0;
 var $$pre$i$i59 = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30500
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30506
 $$pre$i$i59 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30507
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i59; //@line 30509
 if (!$$pre$i$i59) {
  return;
 }
 $10 = HEAP32[$$pre$i$i59 + 8 >> 2] | 0; //@line 30515
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30516
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 30517
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 194; //@line 30520
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 30521
  HEAP32[$11 >> 2] = $6; //@line 30522
  sp = STACKTOP; //@line 30523
  return;
 }
 ___async_unwind = 0; //@line 30526
 HEAP32[$ReallocAsyncCtx4 >> 2] = 194; //@line 30527
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 30528
 HEAP32[$11 >> 2] = $6; //@line 30529
 sp = STACKTOP; //@line 30530
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16172
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 16174
 $8 = $7 >> 8; //@line 16175
 if (!($7 & 1)) {
  $$0 = $8; //@line 16179
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 16184
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 16186
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 16189
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16194
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 16195
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 809; //@line 16198
  sp = STACKTOP; //@line 16199
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16202
  return;
 }
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20730
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20732
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20734
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20736
 $7 = HEAP32[$2 >> 2] | 0; //@line 20737
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 20740
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20741
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 20742
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 657; //@line 20745
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 20746
  HEAP32[$11 >> 2] = $2; //@line 20747
  sp = STACKTOP; //@line 20748
  return;
 }
 ___async_unwind = 0; //@line 20751
 HEAP32[$ReallocAsyncCtx2 >> 2] = 657; //@line 20752
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 20753
 HEAP32[$11 >> 2] = $2; //@line 20754
 sp = STACKTOP; //@line 20755
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_332($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx20 = 0, sp = 0;
 sp = STACKTOP; //@line 5559
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5561
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5563
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5565
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5567
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5569
 HEAP32[$2 >> 2] = 1; //@line 5570
 HEAP8[$2 + 4 >> 0] = 0; //@line 5572
 $ReallocAsyncCtx20 = _emscripten_realloc_async_context(16) | 0; //@line 5573
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 5574
 if (!___async) {
  ___async_unwind = 0; //@line 5577
 }
 HEAP32[$ReallocAsyncCtx20 >> 2] = 241; //@line 5579
 HEAP32[$ReallocAsyncCtx20 + 4 >> 2] = $6; //@line 5581
 HEAP32[$ReallocAsyncCtx20 + 8 >> 2] = $8; //@line 5583
 HEAP32[$ReallocAsyncCtx20 + 12 >> 2] = $10; //@line 5585
 sp = STACKTOP; //@line 5586
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15342
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15348
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 15351
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 15354
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15355
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 15356
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 796; //@line 15359
    sp = STACKTOP; //@line 15360
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15363
    break;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_333($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx21 = 0, sp = 0;
 sp = STACKTOP; //@line 5592
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5594
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5596
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5598
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5600
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5602
 $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 5603
 __ZN7LoRaMac10disconnectEv($8); //@line 5604
 if (!___async) {
  ___async_unwind = 0; //@line 5607
 }
 HEAP32[$ReallocAsyncCtx21 >> 2] = 240; //@line 5609
 HEAP32[$ReallocAsyncCtx21 + 4 >> 2] = $10; //@line 5611
 HEAP32[$ReallocAsyncCtx21 + 8 >> 2] = $8; //@line 5613
 HEAP32[$ReallocAsyncCtx21 + 12 >> 2] = $6; //@line 5615
 HEAP32[$ReallocAsyncCtx21 + 16 >> 2] = $4; //@line 5617
 HEAP32[$ReallocAsyncCtx21 + 20 >> 2] = $2; //@line 5619
 sp = STACKTOP; //@line 5620
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13832
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 13835
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 13837
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 13839
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 13844
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 13849
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13851
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 13852
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 421; //@line 13855
  sp = STACKTOP; //@line 13856
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13859
  return;
 }
}
function ___dynamic_cast__async_cb_504($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34971
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34973
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34975
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34981
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 34996
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 35012
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 35017
    break;
   }
  default:
   {
    $$0 = 0; //@line 35021
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 35026
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16214
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 16216
 $7 = $6 >> 8; //@line 16217
 if (!($6 & 1)) {
  $$0 = $7; //@line 16221
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 16226
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 16228
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 16231
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16236
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 16237
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 810; //@line 16240
  sp = STACKTOP; //@line 16241
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16244
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5312
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 5315
 $5 = HEAP32[$4 >> 2] | 0; //@line 5316
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5321
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5322
  _schedule_interrupt($0); //@line 5323
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 711; //@line 5326
   sp = STACKTOP; //@line 5327
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5330
  return;
 } else {
  $$0 = $5; //@line 5333
 }
 do {
  if (!$$0) {
   label = 8; //@line 5338
   break;
  }
  $10 = $$0 + 12 | 0; //@line 5341
  $$0 = HEAP32[$10 >> 2] | 0; //@line 5342
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5355
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 1319
 STACKTOP = STACKTOP + 16 | 0; //@line 1320
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1320
 $vararg_buffer1 = sp + 8 | 0; //@line 1321
 _printf(10904, sp) | 0; //@line 1323
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 1324
 _printf(11242, $vararg_buffer1) | 0; //@line 1325
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1326
 _putchar(10) | 0; //@line 1327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 83; //@line 1330
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1332
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1334
  sp = STACKTOP; //@line 1335
  STACKTOP = sp; //@line 1336
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1338
  HEAP32[$0 + 692 >> 2] = $1; //@line 1340
  STACKTOP = sp; //@line 1341
  return;
 }
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_129($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30120
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30124
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30125
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 30128
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 30130
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 30132
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 30134
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30136
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 30137
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 30140
  sp = STACKTOP; //@line 30141
  return;
 }
 ___async_unwind = 0; //@line 30144
 HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 30145
 sp = STACKTOP; //@line 30146
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_130($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30152
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30156
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30157
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 30160
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 30162
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 30164
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 30166
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30168
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 30169
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 30172
  sp = STACKTOP; //@line 30173
  return;
 }
 ___async_unwind = 0; //@line 30176
 HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 30177
 sp = STACKTOP; //@line 30178
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35677
 if ((HEAP32[$2 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 484 >> 2] | 0, 0) | 0; //@line 35684
 }
 if ((HEAP32[$2 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 508 >> 2] | 0, 0) | 0; //@line 35692
 }
 if ((HEAP32[$2 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 604 >> 2] | 0, 0) | 0; //@line 35700
 }
 $15 = $2 + 660 | 0; //@line 35702
 if ((HEAP32[$15 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 532 >> 2] | 0, 0) | 0; //@line 35708
  if ((HEAP32[$15 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(3, HEAP32[$2 + 556 >> 2] | 0, 0) | 0; //@line 35714
  }
 }
 if ((HEAP32[$2 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$2 + 580 >> 2] | 0, 0) | 0; //@line 35725
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16129
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 16131
 $6 = $5 >> 8; //@line 16132
 if (!($5 & 1)) {
  $$0 = $6; //@line 16136
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 16141
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 16143
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 16146
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16151
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 16152
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 808; //@line 16155
  sp = STACKTOP; //@line 16156
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16159
  return;
 }
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_226($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 37275
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 37280
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37282
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37284
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 37285
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 37286
 __ZN7LoRaPHY15setup_rx_windowEbj($9, $4, $6); //@line 37287
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 382; //@line 37290
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 37291
  HEAP32[$10 >> 2] = $8; //@line 37292
  sp = STACKTOP; //@line 37293
  return;
 }
 ___async_unwind = 0; //@line 37296
 HEAP32[$ReallocAsyncCtx4 >> 2] = 382; //@line 37297
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 37298
 HEAP32[$10 >> 2] = $8; //@line 37299
 sp = STACKTOP; //@line 37300
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_21($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 20010
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20016
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20018
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20020
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(20) | 0; //@line 20021
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 20022
 if (!___async) {
  ___async_unwind = 0; //@line 20025
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 78; //@line 20027
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $4; //@line 20029
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $6; //@line 20031
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $8; //@line 20033
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $10; //@line 20035
 sp = STACKTOP; //@line 20036
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 19972
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19974
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19976
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19978
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19980
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19982
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 19983
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 19984
 if (!___async) {
  ___async_unwind = 0; //@line 19987
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 81; //@line 19989
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 19991
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 19993
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 19995
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 19997
 sp = STACKTOP; //@line 19998
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_254($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1318
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1320
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1322
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1324
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1326
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1328
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 1329
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 1330
 if (!___async) {
  ___async_unwind = 0; //@line 1333
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 1335
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 1337
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 1339
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 1341
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 1343
 sp = STACKTOP; //@line 1344
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 774
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 789
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 803
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 809
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 810
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 67; //@line 813
  sp = STACKTOP; //@line 814
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 817
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 25430
 $5 = $4 >>> 4; //@line 25431
 $10 = 1 << ($4 & 15); //@line 25436
 if ($10 & (HEAPU16[(HEAP32[$0 + 124 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 25440
  return $$0 | 0; //@line 25441
 }
 $15 = (HEAP32[$0 + 112 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 25445
 HEAP32[$15 >> 2] = 0; //@line 25446
 HEAP32[$15 + 4 >> 2] = 0; //@line 25446
 HEAP32[$15 + 8 >> 2] = 0; //@line 25446
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 128 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 25456
  return $$0 | 0; //@line 25457
 }
 $25 = (HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) | 0; //@line 25462
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 25467
 $$0 = 1; //@line 25468
 return $$0 | 0; //@line 25469
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_385($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9542
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9544
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 9546
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 9548
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 9550
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 9552
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 9553
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 9554
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 420; //@line 9557
  sp = STACKTOP; //@line 9558
  return;
 }
 ___async_unwind = 0; //@line 9561
 HEAP32[$ReallocAsyncCtx >> 2] = 420; //@line 9562
 sp = STACKTOP; //@line 9563
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_5($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16513
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16517
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16518
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 16521
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16522
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 16523
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 16526
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 16527
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 16528
  sp = STACKTOP; //@line 16529
  return;
 }
 ___async_unwind = 0; //@line 16532
 HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 16533
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 16534
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 16535
 sp = STACKTOP; //@line 16536
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26287
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26289
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 26292
 $5 = HEAP32[$2 >> 2] | 0; //@line 26293
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 26296
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26297
 FUNCTION_TABLE_vii[$8 & 31]($5, $4); //@line 26298
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 646; //@line 26301
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 26302
  HEAP32[$9 >> 2] = $2; //@line 26303
  sp = STACKTOP; //@line 26304
  return;
 }
 ___async_unwind = 0; //@line 26307
 HEAP32[$ReallocAsyncCtx2 >> 2] = 646; //@line 26308
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 26309
 HEAP32[$9 >> 2] = $2; //@line 26310
 sp = STACKTOP; //@line 26311
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16484
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16486
 $3 = HEAP32[$2 >> 2] | 0; //@line 16487
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 16490
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16491
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 16492
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 653; //@line 16495
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 16496
  HEAP32[$8 >> 2] = $2; //@line 16497
  sp = STACKTOP; //@line 16498
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 16502
 ___async_unwind = 0; //@line 16503
 HEAP32[$ReallocAsyncCtx2 >> 2] = 653; //@line 16504
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 16505
 HEAP32[$8 >> 2] = $2; //@line 16506
 sp = STACKTOP; //@line 16507
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_61($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25966
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25968
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25972
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25974
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 25976
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 25977
 $9 = HEAP32[$2 >> 2] | 0; //@line 25978
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 25984
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 25985
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 25986
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 25989
  sp = STACKTOP; //@line 25990
  return;
 }
 ___async_unwind = 0; //@line 25993
 HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 25994
 sp = STACKTOP; //@line 25995
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_13($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19283
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19285
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19289
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19291
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 19293
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 19294
 $9 = HEAP32[$2 >> 2] | 0; //@line 19295
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 19301
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19302
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 19303
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 19306
  sp = STACKTOP; //@line 19307
  return;
 }
 ___async_unwind = 0; //@line 19310
 HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 19311
 sp = STACKTOP; //@line 19312
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 12891
 STACKTOP = STACKTOP + 256 | 0; //@line 12892
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 12892
 $5 = sp; //@line 12893
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 12899
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 12903
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 12906
   $$011 = $9; //@line 12907
   do {
    _out_670($0, $5, 256); //@line 12909
    $$011 = $$011 + -256 | 0; //@line 12910
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 12919
  } else {
   $$0$lcssa = $9; //@line 12921
  }
  _out_670($0, $5, $$0$lcssa); //@line 12923
 }
 STACKTOP = sp; //@line 12925
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_419($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20562
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20568
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20572
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 20573
 HEAP32[$6 >> 2] = 1; //@line 20574
 _printf(10999, $6) | 0; //@line 20575
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 20576
 _putchar(10) | 0; //@line 20577
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 59; //@line 20580
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 20581
  HEAP32[$11 >> 2] = $10; //@line 20582
  sp = STACKTOP; //@line 20583
  return;
 }
 ___async_unwind = 0; //@line 20586
 HEAP32[$ReallocAsyncCtx >> 2] = 59; //@line 20587
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 20588
 HEAP32[$11 >> 2] = $10; //@line 20589
 sp = STACKTOP; //@line 20590
 return;
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 18518
 STACKTOP = STACKTOP + 16 | 0; //@line 18519
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18519
 $2 = sp; //@line 18520
 $4 = $2 + 4 | 0; //@line 18522
 HEAP32[$4 >> 2] = 0; //@line 18524
 HEAP32[$4 + 4 >> 2] = 0; //@line 18527
 HEAP32[$2 >> 2] = 9; //@line 18528
 $10 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $2, $0 + 360 | 0) | 0; //@line 18531
 if ($10 | 0) {
  $$0 = $10; //@line 18534
  STACKTOP = sp; //@line 18535
  return $$0 | 0; //@line 18535
 }
 $$0 = __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0 + 352 | 0, $1, $2) | 0; //@line 18539
 STACKTOP = sp; //@line 18540
 return $$0 | 0; //@line 18540
}
function _mbedtls_ccm_setkey__async_cb_442($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22726
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22728
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22730
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22732
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22734
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22738
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22741
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 22742
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 670; //@line 22745
  sp = STACKTOP; //@line 22746
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 22750
 ___async_unwind = 0; //@line 22751
 HEAP32[$ReallocAsyncCtx >> 2] = 670; //@line 22752
 sp = STACKTOP; //@line 22753
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7236
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7239
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7241
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 7243
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 7248
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7253
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7255
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 7256
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 236; //@line 7259
  sp = STACKTOP; //@line 7260
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7263
  return;
 }
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9026
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9029
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9031
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 9033
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 9038
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9043
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9045
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 9046
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 297; //@line 9049
  sp = STACKTOP; //@line 9050
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9053
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_224($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 37154
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37156
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37158
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 37160
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 37162
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 37163
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 554; //@line 37166
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 37167
  HEAP32[$8 >> 2] = $4; //@line 37168
  sp = STACKTOP; //@line 37169
  return;
 }
 ___async_unwind = 0; //@line 37172
 HEAP32[$ReallocAsyncCtx5 >> 2] = 554; //@line 37173
 $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 37174
 HEAP32[$8 >> 2] = $4; //@line 37175
 sp = STACKTOP; //@line 37176
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_223($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 37126
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37128
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37130
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 37132
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 37134
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 37135
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 37138
  $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 37139
  HEAP32[$8 >> 2] = $4; //@line 37140
  sp = STACKTOP; //@line 37141
  return;
 }
 ___async_unwind = 0; //@line 37144
 HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 37145
 $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 37146
 HEAP32[$8 >> 2] = $4; //@line 37147
 sp = STACKTOP; //@line 37148
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7285
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7288
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7290
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 7292
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 7297
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7302
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7304
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 7305
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 237; //@line 7308
  sp = STACKTOP; //@line 7309
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7312
  return;
 }
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9692
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9695
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9697
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 9699
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 9704
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9709
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9711
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 9712
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 308; //@line 9715
  sp = STACKTOP; //@line 9716
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9719
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_321($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 4627
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4631
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4633
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4635
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 6; //@line 4638
  HEAP32[___async_retval >> 2] = $4; //@line 4640
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(16) | 0; //@line 4643
 _mbed_assert_internal(12851, 11935, 1251); //@line 4644
 if (!___async) {
  ___async_unwind = 0; //@line 4647
 }
 HEAP32[$ReallocAsyncCtx29 >> 2] = 270; //@line 4649
 HEAP32[$ReallocAsyncCtx29 + 4 >> 2] = $4; //@line 4651
 HEAP32[$ReallocAsyncCtx29 + 8 >> 2] = $6; //@line 4653
 HEAP32[$ReallocAsyncCtx29 + 12 >> 2] = $8; //@line 4655
 sp = STACKTOP; //@line 4656
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10300
 STACKTOP = STACKTOP + 32 | 0; //@line 10301
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10301
 $vararg_buffer = sp; //@line 10302
 $3 = sp + 20 | 0; //@line 10303
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10307
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10309
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 10311
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 10313
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 10315
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 10320
  $10 = -1; //@line 10321
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 10324
 }
 STACKTOP = sp; //@line 10326
 return $10 | 0; //@line 10326
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 5569
 STACKTOP = STACKTOP + 16 | 0; //@line 5570
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5570
 $vararg_buffer = sp; //@line 5571
 HEAP32[$vararg_buffer >> 2] = $0; //@line 5572
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 5574
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 5576
 _mbed_error_printf(14601, $vararg_buffer); //@line 5577
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5578
 _mbed_die(); //@line 5579
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 714; //@line 5582
  sp = STACKTOP; //@line 5583
  STACKTOP = sp; //@line 5584
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5586
  STACKTOP = sp; //@line 5587
  return;
 }
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35869
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35875
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 35880
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35882
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 776 >> 0] = HEAP8[$0 + 8 >> 0] | 0; //@line 35886
 _printf(10904, $6) | 0; //@line 35887
 HEAP32[$12 >> 2] = $10 & 1; //@line 35889
 _printf(11136, $12) | 0; //@line 35890
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 35891
 _putchar(10) | 0; //@line 35892
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 88; //@line 35895
  sp = STACKTOP; //@line 35896
  return;
 }
 ___async_unwind = 0; //@line 35899
 HEAP32[$ReallocAsyncCtx >> 2] = 88; //@line 35900
 sp = STACKTOP; //@line 35901
 return;
}
function _schedule_interrupt__async_cb_84($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27959
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27961
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27963
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27965
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 27968
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 27969
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 27970
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 27974
  ___async_unwind = 0; //@line 27975
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 708; //@line 27977
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 27979
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 27981
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 27983
 sp = STACKTOP; //@line 27984
 return;
}
function __ZN7LoRaPHY16verify_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01113 = 0, $16 = 0, $3 = 0, $5 = 0, $7 = 0, label = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 25612
 $5 = HEAP8[$0 + 76 >> 0] | 0; //@line 25614
 if (!($5 << 24 >> 24)) {
  $16 = 0; //@line 25617
  return $16 | 0; //@line 25618
 } else {
  $$01113 = 0; //@line 25620
 }
 while (1) {
  $7 = $$01113 & 255; //@line 25623
  if ((HEAP32[$3 + ($7 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
   if ((HEAP32[$3 + ($7 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
    $16 = 1; //@line 25632
    label = 5; //@line 25633
    break;
   }
  }
  $$01113 = $$01113 + 1 << 24 >> 24; //@line 25637
  if (($$01113 & 255) >= ($5 & 255)) {
   $16 = 0; //@line 25642
   label = 5; //@line 25643
   break;
  }
 }
 if ((label | 0) == 5) {
  return $16 | 0; //@line 25648
 }
 return 0; //@line 25650
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 843
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 845
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 847
 if (!$4) {
  __ZdlPv($2); //@line 850
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 855
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 856
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 857
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 155; //@line 860
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 861
  HEAP32[$9 >> 2] = $2; //@line 862
  sp = STACKTOP; //@line 863
  return;
 }
 ___async_unwind = 0; //@line 866
 HEAP32[$ReallocAsyncCtx2 >> 2] = 155; //@line 867
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 868
 HEAP32[$9 >> 2] = $2; //@line 869
 sp = STACKTOP; //@line 870
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14310
 STACKTOP = STACKTOP + 16 | 0; //@line 14311
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14311
 $1 = sp; //@line 14312
 HEAP32[$1 >> 2] = $varargs; //@line 14313
 $2 = HEAP32[2570] | 0; //@line 14314
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14315
 $3 = _vfprintf($2, $0, $1) | 0; //@line 14316
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 780; //@line 14319
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14321
  sp = STACKTOP; //@line 14322
  STACKTOP = sp; //@line 14323
  return 0; //@line 14323
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14325
  STACKTOP = sp; //@line 14326
  return $3 | 0; //@line 14326
 }
 return 0; //@line 14328
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20845
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20847
 $3 = HEAP32[$2 >> 2] | 0; //@line 20848
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 20851
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20852
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 20853
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 643; //@line 20856
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 20857
  HEAP32[$7 >> 2] = $2; //@line 20858
  sp = STACKTOP; //@line 20859
  return;
 }
 ___async_unwind = 0; //@line 20862
 HEAP32[$ReallocAsyncCtx2 >> 2] = 643; //@line 20863
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 20864
 HEAP32[$7 >> 2] = $2; //@line 20865
 sp = STACKTOP; //@line 20866
 return;
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26346
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26348
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26350
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26352
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] | 0; //@line 26355
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 26356
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 26357
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 26361
  ___async_unwind = 0; //@line 26362
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 698; //@line 26364
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 26366
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 26368
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 26370
 sp = STACKTOP; //@line 26371
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28410
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28412
 $3 = HEAP32[$2 >> 2] | 0; //@line 28413
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 28416
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28417
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 28418
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 28421
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 28422
  HEAP32[$7 >> 2] = $2; //@line 28423
  sp = STACKTOP; //@line 28424
  return;
 }
 ___async_unwind = 0; //@line 28427
 HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 28428
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 28429
 HEAP32[$7 >> 2] = $2; //@line 28430
 sp = STACKTOP; //@line 28431
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11706
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 11709
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 11711
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 11713
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 11718
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 11723
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11725
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 11726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 377; //@line 11729
  sp = STACKTOP; //@line 11730
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11733
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3074
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3077
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3079
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 3081
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 3086
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3091
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3093
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 3094
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 137; //@line 3097
  sp = STACKTOP; //@line 3098
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3101
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_443($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22759
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22761
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22763
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22765
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22767
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22768
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 22769
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 22773
  ___async_unwind = 0; //@line 22774
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 669; //@line 22776
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22778
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 22780
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 22782
 sp = STACKTOP; //@line 22783
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2374] | 0; //@line 1577
 if (!$3) {
  $$010 = 0; //@line 1580
  return $$010 | 0; //@line 1581
 } else {
  $$011 = 9492; //@line 1583
  $6 = $3; //@line 1583
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 1599
     label = 6; //@line 1600
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 1607
  if (!$6) {
   $$010 = 0; //@line 1610
   label = 6; //@line 1611
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 1614
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 1618
 }
 return 0; //@line 1620
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_313($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 4340
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4344
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 4348
  return;
 }
 $ReallocAsyncCtx33 = _emscripten_realloc_async_context(8) | 0; //@line 4351
 _mbed_assert_internal(12851, 11935, 1141); //@line 4352
 if (___async) {
  HEAP32[$ReallocAsyncCtx33 >> 2] = 245; //@line 4355
  $6 = $ReallocAsyncCtx33 + 4 | 0; //@line 4356
  HEAP32[$6 >> 2] = $4; //@line 4357
  sp = STACKTOP; //@line 4358
  return;
 }
 ___async_unwind = 0; //@line 4361
 HEAP32[$ReallocAsyncCtx33 >> 2] = 245; //@line 4362
 $6 = $ReallocAsyncCtx33 + 4 | 0; //@line 4363
 HEAP32[$6 >> 2] = $4; //@line 4364
 sp = STACKTOP; //@line 4365
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_478($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30529
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30533
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30535
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30537
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30539
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 30541
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30542
 FUNCTION_TABLE_vii[$11 & 31]($4, $6); //@line 30543
 if (!___async) {
  ___async_unwind = 0; //@line 30546
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 30548
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $8; //@line 30550
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $10; //@line 30552
 sp = STACKTOP; //@line 30553
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_155($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31824
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31828
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31830
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 31833
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 31834
 FUNCTION_TABLE_vi[$9 & 1023]($2); //@line 31835
 if (!___async) {
  ___async_unwind = 0; //@line 31838
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 31840
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 31842
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 31844
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = 0; //@line 31847
 sp = STACKTOP; //@line 31848
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_317($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx31 = 0, sp = 0;
 sp = STACKTOP; //@line 4474
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4478
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 4482
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 4485
 _mbed_assert_internal(12851, 11935, 1223); //@line 4486
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 259; //@line 4489
  $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 4490
  HEAP32[$6 >> 2] = $4; //@line 4491
  sp = STACKTOP; //@line 4492
  return;
 }
 ___async_unwind = 0; //@line 4495
 HEAP32[$ReallocAsyncCtx31 >> 2] = 259; //@line 4496
 $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 4497
 HEAP32[$6 >> 2] = $4; //@line 4498
 sp = STACKTOP; //@line 4499
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_315($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx32 = 0, sp = 0;
 sp = STACKTOP; //@line 4407
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4411
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 4415
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 4418
 _mbed_assert_internal(12851, 11935, 1186); //@line 4419
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 250; //@line 4422
  $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 4423
  HEAP32[$6 >> 2] = $4; //@line 4424
  sp = STACKTOP; //@line 4425
  return;
 }
 ___async_unwind = 0; //@line 4428
 HEAP32[$ReallocAsyncCtx32 >> 2] = 250; //@line 4429
 $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 4430
 HEAP32[$6 >> 2] = $4; //@line 4431
 sp = STACKTOP; //@line 4432
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb($0) {
 $0 = $0 | 0;
 var $$054$ = 0, $13 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35797
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35799
 $$054$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 35805
 $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 35806
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 381) >> 0] = $13; //@line 35811
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 381) >> 0] = $13 >>> 8; //@line 35818
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 381) >> 0] = $13 >>> 16; //@line 35825
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 381) >> 0] = $13 >>> 24; //@line 35832
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 35837
 HEAP32[___async_retval >> 2] = $$054$; //@line 35839
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14232
 STACKTOP = STACKTOP + 16 | 0; //@line 14233
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14233
 $2 = sp; //@line 14234
 HEAP32[$2 >> 2] = $varargs; //@line 14235
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14236
 $3 = _vsprintf($0, $1, $2) | 0; //@line 14237
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 778; //@line 14240
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14242
  sp = STACKTOP; //@line 14243
  STACKTOP = sp; //@line 14244
  return 0; //@line 14244
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14246
  STACKTOP = sp; //@line 14247
  return $3 | 0; //@line 14247
 }
 return 0; //@line 14249
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_243($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 455
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 461
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 463
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 465
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 468
 HEAP32[$8 >> 2] = $10; //@line 470
 HEAP32[$8 + 4 >> 2] = $6 & 255; //@line 472
 _printf(11158, $8) | 0; //@line 473
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 474
 _putchar(10) | 0; //@line 475
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 86; //@line 478
  sp = STACKTOP; //@line 479
  return;
 }
 ___async_unwind = 0; //@line 482
 HEAP32[$ReallocAsyncCtx >> 2] = 86; //@line 483
 sp = STACKTOP; //@line 484
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10816
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10818
 __ZN12radio_eventsD2Ev($0 + 1212 | 0); //@line 10819
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 341; //@line 10822
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10824
  sp = STACKTOP; //@line 10825
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10828
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10830
 __ZN14lorawan_timersD2Ev($0 + 980 | 0); //@line 10831
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 342; //@line 10834
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10836
  sp = STACKTOP; //@line 10837
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10840
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 14895
 $5 = HEAP32[$4 >> 2] | 0; //@line 14896
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 14900
   HEAP32[$1 + 24 >> 2] = $3; //@line 14902
   HEAP32[$1 + 36 >> 2] = 1; //@line 14904
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 14908
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 14911
    HEAP32[$1 + 24 >> 2] = 2; //@line 14913
    HEAP8[$1 + 54 >> 0] = 1; //@line 14915
    break;
   }
   $10 = $1 + 24 | 0; //@line 14918
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 14922
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9767
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9769
 $3 = __ZN7LoRaMac22get_phy_event_handlersEv($0 + 4 | 0) | 0; //@line 9770
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 310; //@line 9773
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9775
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9777
  sp = STACKTOP; //@line 9778
  return 0; //@line 9779
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9781
  $6 = $0 + 1928 | 0; //@line 9782
  HEAP32[$6 >> 2] = $3; //@line 9783
  __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 1336 | 0, $1); //@line 9785
  return HEAP32[$6 >> 2] | 0; //@line 9787
 }
 return 0; //@line 9789
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2418
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2420
 $4 = HEAP32[$2 + 356 >> 2] | 0; //@line 2422
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2424
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1076 | 0); //@line 2425
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 428; //@line 2428
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 2429
  HEAP32[$6 >> 2] = $2; //@line 2430
  sp = STACKTOP; //@line 2431
  return;
 }
 ___async_unwind = 0; //@line 2434
 HEAP32[$ReallocAsyncCtx2 >> 2] = 428; //@line 2435
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 2436
 HEAP32[$6 >> 2] = $2; //@line 2437
 sp = STACKTOP; //@line 2438
 return;
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4193
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 4205
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4206
 $8 = _ticker_read_us($7) | 0; //@line 4207
 $9 = tempRet0; //@line 4208
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 170; //@line 4211
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4213
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4215
  sp = STACKTOP; //@line 4216
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4219
 $13 = $0 + 8 | 0; //@line 4221
 HEAP32[$13 >> 2] = $8; //@line 4223
 HEAP32[$13 + 4 >> 2] = $9; //@line 4226
 HEAP32[$0 >> 2] = 1; //@line 4227
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_260($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1618
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1622
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1623
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1625
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1076 | 0); //@line 1626
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 1629
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 1630
  HEAP32[$7 >> 2] = $4; //@line 1631
  sp = STACKTOP; //@line 1632
  return;
 }
 ___async_unwind = 0; //@line 1635
 HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 1636
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 1637
 HEAP32[$7 >> 2] = $4; //@line 1638
 sp = STACKTOP; //@line 1639
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4666
 $4 = _equeue_tick() | 0; //@line 4668
 HEAP32[$2 + -4 >> 2] = $1; //@line 4670
 $6 = $2 + -16 | 0; //@line 4671
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 4674
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4675
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 4676
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 177; //@line 4679
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4681
  sp = STACKTOP; //@line 4682
  return 0; //@line 4683
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4685
  _equeue_sema_signal($0 + 48 | 0); //@line 4687
  return $9 | 0; //@line 4688
 }
 return 0; //@line 4690
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $11 = 0, $19 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6467
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 6471
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 112 >> 2] | 0; //@line 6473
 $11 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 6475
 $$1 = (HEAP32[$9 + ($11 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 6480
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 6483
  $19 = ___async_retval; //@line 6484
  HEAP8[$19 >> 0] = $$09; //@line 6485
  return;
 }
 HEAP32[$9 + ($11 * 12 | 0) + 4 >> 2] = HEAP32[$6 >> 2]; //@line 6490
 $$09 = 3; //@line 6491
 $19 = ___async_retval; //@line 6492
 HEAP8[$19 >> 0] = $$09; //@line 6493
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 10407
 $3 = HEAP8[$1 >> 0] | 0; //@line 10408
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 10413
  $$lcssa8 = $2; //@line 10413
 } else {
  $$011 = $1; //@line 10415
  $$0710 = $0; //@line 10415
  do {
   $$0710 = $$0710 + 1 | 0; //@line 10417
   $$011 = $$011 + 1 | 0; //@line 10418
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 10419
   $9 = HEAP8[$$011 >> 0] | 0; //@line 10420
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 10425
  $$lcssa8 = $8; //@line 10425
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 10435
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15445
 STACKTOP = STACKTOP + 16 | 0; //@line 15446
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15446
 $vararg_buffer = sp; //@line 15447
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15448
 FUNCTION_TABLE_v[$0 & 15](); //@line 15449
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 798; //@line 15452
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 15454
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15456
  sp = STACKTOP; //@line 15457
  STACKTOP = sp; //@line 15458
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15460
  _abort_message(18758, $vararg_buffer); //@line 15461
 }
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_386($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9585
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9589
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 9591
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 9593
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 9595
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 9596
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 9597
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 9600
  sp = STACKTOP; //@line 9601
  return;
 }
 ___async_unwind = 0; //@line 9604
 HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 9605
 sp = STACKTOP; //@line 9606
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6122
 $2 = HEAP32[2570] | 0; //@line 6123
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6124
 _putc($1, $2) | 0; //@line 6125
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 734; //@line 6128
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 6130
  sp = STACKTOP; //@line 6131
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6134
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6135
 _fflush($2) | 0; //@line 6136
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 735; //@line 6139
  sp = STACKTOP; //@line 6140
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6143
  return;
 }
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10359
 STACKTOP = STACKTOP + 32 | 0; //@line 10360
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10360
 $vararg_buffer = sp; //@line 10361
 HEAP32[$0 + 36 >> 2] = 9; //@line 10364
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10372
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 10374
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 10376
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 10381
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 10384
 STACKTOP = sp; //@line 10385
 return $14 | 0; //@line 10385
}
function _mbed_die__async_cb_193($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 35343
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35345
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 35347
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 35348
 _wait_ms(150); //@line 35349
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 717; //@line 35352
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 35353
  HEAP32[$4 >> 2] = $2; //@line 35354
  sp = STACKTOP; //@line 35355
  return;
 }
 ___async_unwind = 0; //@line 35358
 HEAP32[$ReallocAsyncCtx14 >> 2] = 717; //@line 35359
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 35360
 HEAP32[$4 >> 2] = $2; //@line 35361
 sp = STACKTOP; //@line 35362
 return;
}
function _mbed_die__async_cb_192($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 35318
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35320
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 35322
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 35323
 _wait_ms(150); //@line 35324
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 718; //@line 35327
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 35328
  HEAP32[$4 >> 2] = $2; //@line 35329
  sp = STACKTOP; //@line 35330
  return;
 }
 ___async_unwind = 0; //@line 35333
 HEAP32[$ReallocAsyncCtx13 >> 2] = 718; //@line 35334
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 35335
 HEAP32[$4 >> 2] = $2; //@line 35336
 sp = STACKTOP; //@line 35337
 return;
}
function _mbed_die__async_cb_191($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 35293
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35295
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 35297
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 35298
 _wait_ms(150); //@line 35299
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 719; //@line 35302
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 35303
  HEAP32[$4 >> 2] = $2; //@line 35304
  sp = STACKTOP; //@line 35305
  return;
 }
 ___async_unwind = 0; //@line 35308
 HEAP32[$ReallocAsyncCtx12 >> 2] = 719; //@line 35309
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 35310
 HEAP32[$4 >> 2] = $2; //@line 35311
 sp = STACKTOP; //@line 35312
 return;
}
function _mbed_die__async_cb_190($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 35268
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35270
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 35272
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 35273
 _wait_ms(150); //@line 35274
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 720; //@line 35277
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 35278
  HEAP32[$4 >> 2] = $2; //@line 35279
  sp = STACKTOP; //@line 35280
  return;
 }
 ___async_unwind = 0; //@line 35283
 HEAP32[$ReallocAsyncCtx11 >> 2] = 720; //@line 35284
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 35285
 HEAP32[$4 >> 2] = $2; //@line 35286
 sp = STACKTOP; //@line 35287
 return;
}
function _mbed_die__async_cb_189($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 35243
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35245
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 35247
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 35248
 _wait_ms(150); //@line 35249
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 721; //@line 35252
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 35253
  HEAP32[$4 >> 2] = $2; //@line 35254
  sp = STACKTOP; //@line 35255
  return;
 }
 ___async_unwind = 0; //@line 35258
 HEAP32[$ReallocAsyncCtx10 >> 2] = 721; //@line 35259
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 35260
 HEAP32[$4 >> 2] = $2; //@line 35261
 sp = STACKTOP; //@line 35262
 return;
}
function _mbed_die__async_cb_188($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 35218
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35220
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 35222
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 35223
 _wait_ms(150); //@line 35224
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 722; //@line 35227
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 35228
  HEAP32[$4 >> 2] = $2; //@line 35229
  sp = STACKTOP; //@line 35230
  return;
 }
 ___async_unwind = 0; //@line 35233
 HEAP32[$ReallocAsyncCtx9 >> 2] = 722; //@line 35234
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 35235
 HEAP32[$4 >> 2] = $2; //@line 35236
 sp = STACKTOP; //@line 35237
 return;
}
function _mbed_die__async_cb_187($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 35193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35195
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 35197
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 35198
 _wait_ms(400); //@line 35199
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 723; //@line 35202
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 35203
  HEAP32[$4 >> 2] = $2; //@line 35204
  sp = STACKTOP; //@line 35205
  return;
 }
 ___async_unwind = 0; //@line 35208
 HEAP32[$ReallocAsyncCtx8 >> 2] = 723; //@line 35209
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 35210
 HEAP32[$4 >> 2] = $2; //@line 35211
 sp = STACKTOP; //@line 35212
 return;
}
function _mbed_die__async_cb_186($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 35168
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35170
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 35172
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 35173
 _wait_ms(400); //@line 35174
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 724; //@line 35177
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 35178
  HEAP32[$4 >> 2] = $2; //@line 35179
  sp = STACKTOP; //@line 35180
  return;
 }
 ___async_unwind = 0; //@line 35183
 HEAP32[$ReallocAsyncCtx7 >> 2] = 724; //@line 35184
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 35185
 HEAP32[$4 >> 2] = $2; //@line 35186
 sp = STACKTOP; //@line 35187
 return;
}
function _mbed_die__async_cb_185($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35143
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35145
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 35147
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 35148
 _wait_ms(400); //@line 35149
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 725; //@line 35152
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 35153
  HEAP32[$4 >> 2] = $2; //@line 35154
  sp = STACKTOP; //@line 35155
  return;
 }
 ___async_unwind = 0; //@line 35158
 HEAP32[$ReallocAsyncCtx6 >> 2] = 725; //@line 35159
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 35160
 HEAP32[$4 >> 2] = $2; //@line 35161
 sp = STACKTOP; //@line 35162
 return;
}
function _mbed_die__async_cb_184($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 35118
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35120
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 35122
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 35123
 _wait_ms(400); //@line 35124
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 726; //@line 35127
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 35128
  HEAP32[$4 >> 2] = $2; //@line 35129
  sp = STACKTOP; //@line 35130
  return;
 }
 ___async_unwind = 0; //@line 35133
 HEAP32[$ReallocAsyncCtx5 >> 2] = 726; //@line 35134
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 35135
 HEAP32[$4 >> 2] = $2; //@line 35136
 sp = STACKTOP; //@line 35137
 return;
}
function _mbed_die__async_cb_183($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 35093
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35095
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 35097
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 35098
 _wait_ms(400); //@line 35099
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 727; //@line 35102
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 35103
  HEAP32[$4 >> 2] = $2; //@line 35104
  sp = STACKTOP; //@line 35105
  return;
 }
 ___async_unwind = 0; //@line 35108
 HEAP32[$ReallocAsyncCtx4 >> 2] = 727; //@line 35109
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 35110
 HEAP32[$4 >> 2] = $2; //@line 35111
 sp = STACKTOP; //@line 35112
 return;
}
function _mbed_die__async_cb_182($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 35068
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35070
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 35072
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 35073
 _wait_ms(400); //@line 35074
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 728; //@line 35077
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 35078
  HEAP32[$4 >> 2] = $2; //@line 35079
  sp = STACKTOP; //@line 35080
  return;
 }
 ___async_unwind = 0; //@line 35083
 HEAP32[$ReallocAsyncCtx3 >> 2] = 728; //@line 35084
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 35085
 HEAP32[$4 >> 2] = $2; //@line 35086
 sp = STACKTOP; //@line 35087
 return;
}
function _mbed_die__async_cb_181($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35043
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35045
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 35047
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 35048
 _wait_ms(400); //@line 35049
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 729; //@line 35052
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 35053
  HEAP32[$4 >> 2] = $2; //@line 35054
  sp = STACKTOP; //@line 35055
  return;
 }
 ___async_unwind = 0; //@line 35058
 HEAP32[$ReallocAsyncCtx2 >> 2] = 729; //@line 35059
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 35060
 HEAP32[$4 >> 2] = $2; //@line 35061
 sp = STACKTOP; //@line 35062
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_259($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1594
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1596
 $3 = HEAP32[$2 >> 2] | 0; //@line 1597
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 1598
 __ZN7LoRaPHY18put_radio_to_sleepEv($3); //@line 1599
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 543; //@line 1602
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 1603
  HEAP32[$4 >> 2] = $2; //@line 1604
  sp = STACKTOP; //@line 1605
  return;
 }
 ___async_unwind = 0; //@line 1608
 HEAP32[$ReallocAsyncCtx >> 2] = 543; //@line 1609
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 1610
 HEAP32[$4 >> 2] = $2; //@line 1611
 sp = STACKTOP; //@line 1612
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_452($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23283
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23289
 if (!(HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 11 >> 0] | 0)) {
  return;
 }
 $10 = HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 23296
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 23297
 __ZN12LoRaWANStack9handle_txEhPKhth($6, $10, 0, 0, 2) | 0; //@line 23298
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 23301
  sp = STACKTOP; //@line 23302
  return;
 }
 ___async_unwind = 0; //@line 23305
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 23306
 sp = STACKTOP; //@line 23307
 return;
}
function _mbed_die__async_cb_180($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35020
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 35022
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 35023
 _wait_ms(400); //@line 35024
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 730; //@line 35027
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 35028
  HEAP32[$4 >> 2] = $2; //@line 35029
  sp = STACKTOP; //@line 35030
  return;
 }
 ___async_unwind = 0; //@line 35033
 HEAP32[$ReallocAsyncCtx >> 2] = 730; //@line 35034
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 35035
 HEAP32[$4 >> 2] = $2; //@line 35036
 sp = STACKTOP; //@line 35037
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_437($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22394
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 784 >> 2] | 0; //@line 22398
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 22404
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 22410
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 22411
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 22412
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22415
  sp = STACKTOP; //@line 22416
  return;
 }
 ___async_unwind = 0; //@line 22419
 HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22420
 sp = STACKTOP; //@line 22421
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_210($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35929
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35931
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 35933
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 35934
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 35935
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 292; //@line 35938
  sp = STACKTOP; //@line 35939
  return;
 }
 ___async_unwind = 0; //@line 35942
 HEAP32[$ReallocAsyncCtx >> 2] = 292; //@line 35943
 sp = STACKTOP; //@line 35944
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28292
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28294
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28296
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28298
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 28300
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 28301
 FUNCTION_TABLE_vii[$8 & 31]($2, $4); //@line 28302
 if (!___async) {
  ___async_unwind = 0; //@line 28305
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 189; //@line 28307
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 28309
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 28311
 sp = STACKTOP; //@line 28312
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_122($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29722
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29724
 $3 = $2 + 944 | 0; //@line 29725
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 29728
 $7 = HEAP32[$2 + 356 >> 2] | 0; //@line 29730
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29732
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($7, $2 + 996 | 0, 1); //@line 29733
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 29736
  sp = STACKTOP; //@line 29737
  return;
 }
 ___async_unwind = 0; //@line 29740
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 29741
 sp = STACKTOP; //@line 29742
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_294($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3057
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3061
 $5 = $4 + 944 | 0; //@line 3062
 HEAP8[$5 >> 0] = HEAP8[$5 >> 0] | 34; //@line 3065
 $9 = HEAP32[$4 + 356 >> 2] | 0; //@line 3067
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3069
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($9, $4 + 996 | 0, 1); //@line 3070
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 3073
  sp = STACKTOP; //@line 3074
  return;
 }
 ___async_unwind = 0; //@line 3077
 HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 3078
 sp = STACKTOP; //@line 3079
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16448
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16450
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 16456
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 16459
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16460
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 16461
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 589; //@line 16464
  sp = STACKTOP; //@line 16465
  return;
 }
 ___async_unwind = 0; //@line 16468
 HEAP32[$ReallocAsyncCtx2 >> 2] = 589; //@line 16469
 sp = STACKTOP; //@line 16470
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_413($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20404
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20410
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 _printf(11887, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 20419
 _printf(12033, $6) | 0; //@line 20420
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 20421
 _putchar(10) | 0; //@line 20422
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 225; //@line 20425
  sp = STACKTOP; //@line 20426
  return;
 }
 ___async_unwind = 0; //@line 20429
 HEAP32[$ReallocAsyncCtx6 >> 2] = 225; //@line 20430
 sp = STACKTOP; //@line 20431
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4319
 HEAP32[$0 >> 2] = 704; //@line 4320
 $1 = $0 + 8 | 0; //@line 4321
 HEAP32[$1 >> 2] = 0; //@line 4322
 HEAP32[$1 + 4 >> 2] = 0; //@line 4322
 HEAP32[$1 + 8 >> 2] = 0; //@line 4322
 HEAP32[$1 + 12 >> 2] = 0; //@line 4322
 $2 = _get_us_ticker_data() | 0; //@line 4323
 HEAP32[$0 + 24 >> 2] = $2; //@line 4325
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4326
 _ticker_set_handler($2, 37); //@line 4327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 173; //@line 4330
  sp = STACKTOP; //@line 4331
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4334
  return;
 }
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1569
 HEAP8[$2 + 372 >> 0] = 0; //@line 1571
 HEAP8[$2 + 377 >> 0] = 0; //@line 1573
 HEAP8[$2 + 371 >> 0] = 1; //@line 1575
 HEAP8[$2 + 373 >> 0] = 0; //@line 1577
 HEAP8[$2 + 374 >> 0] = 0; //@line 1579
 HEAP8[$2 + 944 >> 0] = 0; //@line 1581
 $9 = $2 + 968 | 0; //@line 1582
 HEAP32[$9 >> 2] = 0; //@line 1583
 $10 = $2 + 4 | 0; //@line 1584
 __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 1585
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 1586
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($10); //@line 1587
 HEAP32[$9 >> 2] = 0; //@line 1588
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_395($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19454
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19456
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 19458
 __ZN14lorawan_timersD2Ev($2 + 980 | 0); //@line 19459
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 342; //@line 19462
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 19463
  HEAP32[$4 >> 2] = $2; //@line 19464
  sp = STACKTOP; //@line 19465
  return;
 }
 ___async_unwind = 0; //@line 19468
 HEAP32[$ReallocAsyncCtx >> 2] = 342; //@line 19469
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 19470
 HEAP32[$4 >> 2] = $2; //@line 19471
 sp = STACKTOP; //@line 19472
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 37031
 newDynamicTop = oldDynamicTop + increment | 0; //@line 37032
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 37036
  ___setErrNo(12); //@line 37037
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 37041
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 37045
   ___setErrNo(12); //@line 37046
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 37050
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 10530
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 10532
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 10538
  $11 = ___fwritex($0, $4, $3) | 0; //@line 10539
  if ($phitmp) {
   $13 = $11; //@line 10541
  } else {
   ___unlockfile($3); //@line 10543
   $13 = $11; //@line 10544
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 10548
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 10552
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 10555
 }
 return $15 | 0; //@line 10557
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3326
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 3328
 HEAP8[$0 + 688 >> 0] = 0; //@line 3330
 $4 = HEAP32[$0 + 784 >> 2] | 0; //@line 3332
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 3338
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 3343
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3344
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 3345
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 146; //@line 3348
  sp = STACKTOP; //@line 3349
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3352
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 12752
 } else {
  $$056 = $2; //@line 12754
  $15 = $1; //@line 12754
  $8 = $0; //@line 12754
  while (1) {
   $14 = $$056 + -1 | 0; //@line 12762
   HEAP8[$14 >> 0] = HEAPU8[16421 + ($8 & 15) >> 0] | 0 | $3; //@line 12763
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 12764
   $15 = tempRet0; //@line 12765
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 12770
    break;
   } else {
    $$056 = $14; //@line 12773
   }
  }
 }
 return $$05$lcssa | 0; //@line 12777
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_477($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30504
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30510
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 30512
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30513
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 30514
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 30517
  sp = STACKTOP; //@line 30518
  return;
 }
 ___async_unwind = 0; //@line 30521
 HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 30522
 sp = STACKTOP; //@line 30523
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_225($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $13 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37188
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37190
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 37192
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 37195
  $13 = ___async_retval; //@line 37196
  HEAP32[$13 >> 2] = $$1; //@line 37197
  return;
 }
 $$pre = HEAP8[$6 >> 0] | 0; //@line 37200
 HEAP8[$8 + 373 >> 0] = 0; //@line 37202
 HEAP8[$6 >> 0] = $$pre & -9; //@line 37204
 $$1 = $AsyncRetVal; //@line 37205
 $13 = ___async_retval; //@line 37206
 HEAP32[$13 >> 2] = $$1; //@line 37207
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_263($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1693
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1695
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1697
 $5 = HEAP32[$2 >> 2] | 0; //@line 1698
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 1700
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1016 | 0); //@line 1701
 if (!___async) {
  ___async_unwind = 0; //@line 1704
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 539; //@line 1706
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 1708
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 1710
 sp = STACKTOP; //@line 1711
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_262($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1669
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1671
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1673
 $5 = HEAP32[$2 >> 2] | 0; //@line 1674
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 1676
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1036 | 0); //@line 1677
 if (!___async) {
  ___async_unwind = 0; //@line 1680
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 540; //@line 1682
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 1684
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 1686
 sp = STACKTOP; //@line 1687
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_261($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1645
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1647
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1649
 $5 = HEAP32[$2 >> 2] | 0; //@line 1650
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 1652
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1056 | 0); //@line 1653
 if (!___async) {
  ___async_unwind = 0; //@line 1656
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 1658
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 1660
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 1662
 sp = STACKTOP; //@line 1663
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4493
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4494
 _mbedtls_cipher_free($0); //@line 4495
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 695; //@line 4498
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4500
  sp = STACKTOP; //@line 4501
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4504
 $$034$i = 400; //@line 4505
 $$05$i = $0; //@line 4505
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 4507
  HEAP8[$$05$i >> 0] = 0; //@line 4509
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 4514
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 15410
 $0 = ___cxa_get_globals_fast() | 0; //@line 15411
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 15414
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 15418
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 15430
    _emscripten_alloc_async_context(4, sp) | 0; //@line 15431
    __ZSt11__terminatePFvvE($16); //@line 15432
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 15437
 _emscripten_alloc_async_context(4, sp) | 0; //@line 15438
 __ZSt11__terminatePFvvE($17); //@line 15439
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30040
 __ZN5Sht31C2E7PinNameS0_(23872, 10, 11); //@line 30041
 __ZN4mbed11InterruptInC2E7PinName(22896, 1337); //@line 30042
 __ZN6events10EventQueueC2EjPh(22968, 1664, 0); //@line 30043
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30044
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23168, 18920); //@line 30045
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 746; //@line 30048
  sp = STACKTOP; //@line 30049
  return;
 }
 ___async_unwind = 0; //@line 30052
 HEAP32[$ReallocAsyncCtx2 >> 2] = 746; //@line 30053
 sp = STACKTOP; //@line 30054
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 10747
 $3 = HEAP8[$1 >> 0] | 0; //@line 10749
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 10753
 $7 = HEAP32[$0 >> 2] | 0; //@line 10754
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 10759
  HEAP32[$0 + 4 >> 2] = 0; //@line 10761
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 10763
  HEAP32[$0 + 28 >> 2] = $14; //@line 10765
  HEAP32[$0 + 20 >> 2] = $14; //@line 10767
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10773
  $$0 = 0; //@line 10774
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 10777
  $$0 = -1; //@line 10778
 }
 return $$0 | 0; //@line 10780
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_246($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $8 = 0, $AsyncRetVal = 0;
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 816
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 820
 if (!$AsyncRetVal) {
  $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 823
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv(HEAP32[$0 + 12 >> 2] | 0) | 0) >> 2] = $13; //@line 825
  $15 = $8 + 944 | 0; //@line 826
  HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 1; //@line 829
  $$0 = 0; //@line 830
 } else {
  HEAP8[$8 + 373 >> 0] = 0; //@line 833
  $$0 = $AsyncRetVal; //@line 834
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 837
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27186
 $2 = HEAP32[$0 >> 2] | 0; //@line 27187
 $3 = $1 + 16 | 0; //@line 27188
 $4 = HEAP32[$3 >> 2] | 0; //@line 27189
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 27190
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 27191
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 667; //@line 27194
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 27196
  sp = STACKTOP; //@line 27197
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 27200
  HEAP32[$3 >> 2] = 0; //@line 27201
  return;
 }
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_346($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 6177
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 6182
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6184
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6185
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 6186
 __ZN7LoRaPHY15setup_rx_windowEbj($7, $4, $6); //@line 6187
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 516; //@line 6190
  sp = STACKTOP; //@line 6191
  return;
 }
 ___async_unwind = 0; //@line 6194
 HEAP32[$ReallocAsyncCtx4 >> 2] = 516; //@line 6195
 sp = STACKTOP; //@line 6196
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18467
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18473
  return $$0 | 0; //@line 18474
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18477
 $7 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 352 | 0, $1) | 0; //@line 18478
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 546; //@line 18481
  sp = STACKTOP; //@line 18482
  return 0; //@line 18483
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18485
 $$0 = $7; //@line 18486
 return $$0 | 0; //@line 18487
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_256($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1415
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1421
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 1424
 HEAP32[$6 >> 2] = 3; //@line 1425
 _printf(10999, $6) | 0; //@line 1426
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 1427
 _putchar(10) | 0; //@line 1428
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 1431
  sp = STACKTOP; //@line 1432
  return;
 }
 ___async_unwind = 0; //@line 1435
 HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 1436
 sp = STACKTOP; //@line 1437
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_369($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8350
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8352
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 8354
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 8361
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 8362
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 8363
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 8366
  sp = STACKTOP; //@line 8367
  return;
 }
 ___async_unwind = 0; //@line 8370
 HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 8371
 sp = STACKTOP; //@line 8372
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2518
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2520
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 2524
 $6 = HEAP8[$2 >> 0] | 0; //@line 2525
 $$1 = ($6 << 24 >> 24 < (HEAP8[$4 + 28 >> 0] | 0) ? 1 : $6 << 24 >> 24 > (HEAP8[$4 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 2534
 $16 = HEAP8[$2 + 1 >> 0] | 0; //@line 2536
 HEAP8[___async_retval >> 0] = ($16 << 24 >> 24 < (HEAP8[$4 + 32 >> 0] | 0) ? 1 : $16 << 24 >> 24 > (HEAP8[$4 + 33 >> 0] | 0)) ? $$1 & 3 : $$1; //@line 2547
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1172
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1174
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 1176
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 1183
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1184
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 1185
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 1188
  sp = STACKTOP; //@line 1189
  return;
 }
 ___async_unwind = 0; //@line 1192
 HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 1193
 sp = STACKTOP; //@line 1194
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_217($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36640
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 36643
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 36646
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36647
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 36648
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 638; //@line 36651
  sp = STACKTOP; //@line 36652
  return;
 }
 ___async_unwind = 0; //@line 36655
 HEAP32[$ReallocAsyncCtx3 >> 2] = 638; //@line 36656
 sp = STACKTOP; //@line 36657
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_24($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20634
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20640
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 20643
 HEAP32[$6 >> 2] = 5; //@line 20644
 _printf(10999, $6) | 0; //@line 20645
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 20646
 _putchar(10) | 0; //@line 20647
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 20650
  sp = STACKTOP; //@line 20651
  return;
 }
 ___async_unwind = 0; //@line 20654
 HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 20655
 sp = STACKTOP; //@line 20656
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_23($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20606
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20612
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 20615
 HEAP32[$6 >> 2] = 6; //@line 20616
 _printf(10999, $6) | 0; //@line 20617
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 20618
 _putchar(10) | 0; //@line 20619
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 20622
  sp = STACKTOP; //@line 20623
  return;
 }
 ___async_unwind = 0; //@line 20626
 HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 20627
 sp = STACKTOP; //@line 20628
 return;
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 3926
 $6 = HEAP32[$4 >> 2] | 0; //@line 3928
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 3931
 $11 = ___async_retval; //@line 3933
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 3940
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 3946
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 3948
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 3950
 HEAP32[___async_retval >> 2] = $28; //@line 3953
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2215
 STACKTOP = STACKTOP + 16 | 0; //@line 2216
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2216
 _printf(10904, sp) | 0; //@line 2219
 _printf(11047, sp + 8 | 0) | 0; //@line 2220
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2221
 _putchar(10) | 0; //@line 2222
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 105; //@line 2225
  sp = STACKTOP; //@line 2226
  STACKTOP = sp; //@line 2227
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2229
  STACKTOP = sp; //@line 2230
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_359($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7311
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7313
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 7315
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7321
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 7322
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 7323
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7326
  sp = STACKTOP; //@line 7327
  return;
 }
 ___async_unwind = 0; //@line 7330
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 7331
 sp = STACKTOP; //@line 7332
 return;
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18546
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18552
  return $$0 | 0; //@line 18553
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18556
 $7 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 352 | 0, $1) | 0; //@line 18557
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 548; //@line 18560
  sp = STACKTOP; //@line 18561
  return 0; //@line 18562
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18564
 $$0 = $7; //@line 18565
 return $$0 | 0; //@line 18566
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_200($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35654
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35658
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 35660
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 35661
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 35662
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 376; //@line 35665
  sp = STACKTOP; //@line 35666
  return;
 }
 ___async_unwind = 0; //@line 35669
 HEAP32[$ReallocAsyncCtx >> 2] = 376; //@line 35670
 sp = STACKTOP; //@line 35671
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 104
 STACKTOP = STACKTOP + 16 | 0; //@line 105
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 105
 _printf(10904, sp) | 0; //@line 108
 _printf(11569, sp + 8 | 0) | 0; //@line 109
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 110
 _putchar(10) | 0; //@line 111
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 52; //@line 114
  sp = STACKTOP; //@line 115
  STACKTOP = sp; //@line 116
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 118
  STACKTOP = sp; //@line 119
  return;
 }
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb_25($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20707
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 20709
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 20711
 if (!$2) {
  $$0 = -1003; //@line 20714
  $13 = ___async_retval; //@line 20715
  HEAP16[$13 >> 1] = $$0; //@line 20716
  return;
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $6, $2, $8, $4 & 255) | 0; //@line 20722
 $13 = ___async_retval; //@line 20723
 HEAP16[$13 >> 1] = $$0; //@line 20724
 return;
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6739
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6741
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6743
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 6745
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 6748
 } else {
  HEAP32[$2 >> 2] = $4; //@line 6750
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 4; //@line 6756
   HEAP32[$2 + 16 >> 2] = 14; //@line 6758
   $$0 = 0; //@line 6759
  } else {
   $$0 = 0; //@line 6761
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 6765
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 12789
 } else {
  $$06 = $2; //@line 12791
  $11 = $1; //@line 12791
  $7 = $0; //@line 12791
  while (1) {
   $10 = $$06 + -1 | 0; //@line 12796
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 12797
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 12798
   $11 = tempRet0; //@line 12799
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 12804
    break;
   } else {
    $$06 = $10; //@line 12807
   }
  }
 }
 return $$0$lcssa | 0; //@line 12811
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1347
 $1 = _emscripten_asm_const_i(2) | 0; //@line 1348
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 1351
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1352
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 1353
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 1356
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1358
  sp = STACKTOP; //@line 1359
  return 0; //@line 1360
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1362
  return $1 | 0; //@line 1363
 }
 return 0; //@line 1365
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_67($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26317
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26320
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 26323
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26324
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26325
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 647; //@line 26328
  sp = STACKTOP; //@line 26329
  return;
 }
 ___async_unwind = 0; //@line 26332
 HEAP32[$ReallocAsyncCtx3 >> 2] = 647; //@line 26333
 sp = STACKTOP; //@line 26334
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_93($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28318
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28322
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 28325
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28326
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 28327
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 190; //@line 28330
  sp = STACKTOP; //@line 28331
  return;
 }
 ___async_unwind = 0; //@line 28334
 HEAP32[$ReallocAsyncCtx3 >> 2] = 190; //@line 28335
 sp = STACKTOP; //@line 28336
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_29($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20872
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20875
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 20878
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20879
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 20880
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 644; //@line 20883
  sp = STACKTOP; //@line 20884
  return;
 }
 ___async_unwind = 0; //@line 20887
 HEAP32[$ReallocAsyncCtx3 >> 2] = 644; //@line 20888
 sp = STACKTOP; //@line 20889
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_96($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28437
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28440
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 28443
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28444
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 28445
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 641; //@line 28448
  sp = STACKTOP; //@line 28449
  return;
 }
 ___async_unwind = 0; //@line 28452
 HEAP32[$ReallocAsyncCtx3 >> 2] = 641; //@line 28453
 sp = STACKTOP; //@line 28454
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_2($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16413
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16416
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 16419
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 16420
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 16421
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 651; //@line 16424
  sp = STACKTOP; //@line 16425
  return;
 }
 ___async_unwind = 0; //@line 16428
 HEAP32[$ReallocAsyncCtx4 >> 2] = 651; //@line 16429
 sp = STACKTOP; //@line 16430
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_1($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16390
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16393
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 16396
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 16397
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 16398
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 651; //@line 16401
  sp = STACKTOP; //@line 16402
  return;
 }
 ___async_unwind = 0; //@line 16405
 HEAP32[$ReallocAsyncCtx4 >> 2] = 651; //@line 16406
 sp = STACKTOP; //@line 16407
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_26($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20761
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20764
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 20767
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20768
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 20769
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 658; //@line 20772
  sp = STACKTOP; //@line 20773
  return;
 }
 ___async_unwind = 0; //@line 20776
 HEAP32[$ReallocAsyncCtx3 >> 2] = 658; //@line 20777
 sp = STACKTOP; //@line 20778
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 25064
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 25067
 $8 = ($3 & 255) + 1 | 0; //@line 25069
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 25073
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 25077
   return $$0 | 0; //@line 25078
  }
 case 0:
  {
   $$0 = $6; //@line 25082
   return $$0 | 0; //@line 25083
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 25089
   return $$0 | 0; //@line 25090
  }
 }
 return 0; //@line 25093
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18492
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18498
  return $$0 | 0; //@line 18499
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18502
 $6 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 352 | 0) | 0; //@line 18503
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 547; //@line 18506
  sp = STACKTOP; //@line 18507
  return 0; //@line 18508
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18510
 $$0 = $6; //@line 18511
 return $$0 | 0; //@line 18512
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink$in = 0, $$sink5 = 0;
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 26573
   $$sink5 = $0 + 31 | 0; //@line 26573
  } else {
   if (!(HEAP8[$0 + 132 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 26582
    $$sink5 = $0 + 27 | 0; //@line 26582
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 26587
    $$sink5 = $0 + 27 | 0; //@line 26587
    break;
   }
  }
 } while (0);
 return ((HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink5 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 26597
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16312
 do {
  if (!$0) {
   $3 = 0; //@line 16316
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16318
   $2 = ___dynamic_cast($0, 464, 520, 0) | 0; //@line 16319
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 812; //@line 16322
    sp = STACKTOP; //@line 16323
    return 0; //@line 16324
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16326
    $3 = ($2 | 0) != 0 & 1; //@line 16329
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 16334
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 128 >> 0] | 0; //@line 23695
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 124 >> 2] | 0; //@line 23701
 $7 = HEAP32[$0 + 120 >> 2] | 0; //@line 23703
 $8 = $2 & 255; //@line 23704
 $indvars$iv = 0; //@line 23705
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 23709
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 23712
  $indvars$iv = $indvars$iv + 1 | 0; //@line 23713
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_366($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8096
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8100
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 8102
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 8103
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 8104
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 168; //@line 8107
  sp = STACKTOP; //@line 8108
  return;
 }
 ___async_unwind = 0; //@line 8111
 HEAP32[$ReallocAsyncCtx >> 2] = 168; //@line 8112
 sp = STACKTOP; //@line 8113
 return;
}
function _invoke_ticker__async_cb_489($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33740
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 33746
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 33747
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 33748
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 33749
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 742; //@line 33752
  sp = STACKTOP; //@line 33753
  return;
 }
 ___async_unwind = 0; //@line 33756
 HEAP32[$ReallocAsyncCtx >> 2] = 742; //@line 33757
 sp = STACKTOP; //@line 33758
 return;
}
function __Z18decrypt_join_framePKhtS0_Ph($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0, $6 = 0;
 _mbedtls_aes_init(22600); //@line 22573
 $4 = _mbedtls_aes_setkey_enc(22600, $2, 128) | 0; //@line 22574
 if (!$4) {
  $6 = _mbedtls_aes_crypt_ecb(22600, 1, $0, $3) | 0; //@line 22577
  if (($1 & 65535) > 15 & ($6 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb(22600, 1, $0 + 16 | 0, $3 + 16 | 0) | 0; //@line 22585
  } else {
   $$0 = $6; //@line 22587
  }
 } else {
  $$0 = $4; //@line 22590
 }
 _mbedtls_aes_free(22600); //@line 22592
 return $$0 | 0; //@line 22593
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13745
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 13747
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 13753
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13754
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 13755
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 418; //@line 13758
  sp = STACKTOP; //@line 13759
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13762
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 12433
 } else {
  $$04 = 0; //@line 12435
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 12438
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 12442
   $12 = $7 + 1 | 0; //@line 12443
   HEAP32[$0 >> 2] = $12; //@line 12444
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 12450
    break;
   } else {
    $$04 = $11; //@line 12453
   }
  }
 }
 return $$0$lcssa | 0; //@line 12457
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8762
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8764
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8770
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8771
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8772
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 8775
  sp = STACKTOP; //@line 8776
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8779
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_444($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 22827
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 22834
 _mbed_assert_internal(12851, 11935, 843); //@line 22835
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 216; //@line 22838
  sp = STACKTOP; //@line 22839
  return;
 }
 ___async_unwind = 0; //@line 22842
 HEAP32[$ReallocAsyncCtx11 >> 2] = 216; //@line 22843
 sp = STACKTOP; //@line 22844
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_406($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 20128
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 20135
 _mbed_assert_internal(12851, 11935, 737); //@line 20136
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 235; //@line 20139
  sp = STACKTOP; //@line 20140
  return;
 }
 ___async_unwind = 0; //@line 20143
 HEAP32[$ReallocAsyncCtx12 >> 2] = 235; //@line 20144
 sp = STACKTOP; //@line 20145
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_404($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 20060
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 20067
 _mbed_assert_internal(12851, 11935, 715); //@line 20068
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 20071
  sp = STACKTOP; //@line 20072
  return;
 }
 ___async_unwind = 0; //@line 20075
 HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 20076
 sp = STACKTOP; //@line 20077
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_107($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 29005
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 29012
 _mbed_assert_internal(12851, 11935, 821); //@line 29013
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 210; //@line 29016
  sp = STACKTOP; //@line 29017
  return;
 }
 ___async_unwind = 0; //@line 29020
 HEAP32[$ReallocAsyncCtx13 >> 2] = 210; //@line 29021
 sp = STACKTOP; //@line 29022
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_105($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 28944
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 28951
 _mbed_assert_internal(12851, 11935, 797); //@line 28952
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 206; //@line 28955
  sp = STACKTOP; //@line 28956
  return;
 }
 ___async_unwind = 0; //@line 28959
 HEAP32[$ReallocAsyncCtx14 >> 2] = 206; //@line 28960
 sp = STACKTOP; //@line 28961
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_103($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 28883
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 28890
 _mbed_assert_internal(12851, 11935, 786); //@line 28891
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 28894
  sp = STACKTOP; //@line 28895
  return;
 }
 ___async_unwind = 0; //@line 28898
 HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 28899
 sp = STACKTOP; //@line 28900
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 36556
 $y_sroa_0_0_extract_trunc = $b$0; //@line 36557
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 36558
 $1$1 = tempRet0; //@line 36559
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 36561
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8688
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8690
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8696
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8697
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8698
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 287; //@line 8701
  sp = STACKTOP; //@line 8702
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8705
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_76($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27229
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27237
 _mbed_assert_internal(13734, 13752, 57); //@line 27238
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 27241
  sp = STACKTOP; //@line 27242
  return;
 }
 ___async_unwind = 0; //@line 27245
 HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 27246
 sp = STACKTOP; //@line 27247
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32936
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32943
 _mbed_assert_internal(12851, 12860, 187); //@line 32944
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 458; //@line 32947
  sp = STACKTOP; //@line 32948
  return;
 }
 ___async_unwind = 0; //@line 32951
 HEAP32[$ReallocAsyncCtx2 >> 2] = 458; //@line 32952
 sp = STACKTOP; //@line 32953
 return;
}
function _mbedtls_cipher_update__async_cb_270($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2111
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2113
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2115
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 2118
  $9 = ___async_retval; //@line 2119
  HEAP32[$9 >> 2] = $$1; //@line 2120
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 2125
 $$1 = 0; //@line 2126
 $9 = ___async_retval; //@line 2127
 HEAP32[$9 >> 2] = $$1; //@line 2128
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11640
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 11642
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 11648
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11649
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 11650
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 374; //@line 11653
  sp = STACKTOP; //@line 11654
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11657
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9739
 do {
  if (!(HEAP8[18912] | 0)) {
   if (___cxa_guard_acquire(18912) | 0) {
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9747
    __ZN12LoRaWANStackC2Ev(20240); //@line 9748
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 309; //@line 9751
     sp = STACKTOP; //@line 9752
     return 0; //@line 9753
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9755
     break;
    }
   }
  }
 } while (0);
 return 20240; //@line 9761
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2374] | 0; //@line 1541
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 1545
  } else {
   $$06 = 9492; //@line 1547
   $9 = $1; //@line 1547
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 1552
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 1557
    if (!$9) {
     $$05 = 0; //@line 1560
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 1563
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 1568
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35754
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 35761
 _mbed_assert_internal(12851, 12860, 194); //@line 35762
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 35765
  sp = STACKTOP; //@line 35766
  return;
 }
 ___async_unwind = 0; //@line 35769
 HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 35770
 sp = STACKTOP; //@line 35771
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_490($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33795
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 33802
 _mbed_assert_internal(12851, 12860, 209); //@line 33803
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 510; //@line 33806
  sp = STACKTOP; //@line 33807
  return;
 }
 ___async_unwind = 0; //@line 33810
 HEAP32[$ReallocAsyncCtx3 >> 2] = 510; //@line 33811
 sp = STACKTOP; //@line 33812
 return;
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $3 = 0, $6 = 0;
 $3 = HEAP8[$0 + 13 >> 0] | 0; //@line 24981
 if (!($3 << 24 >> 24)) {
  $17 = $3 << 24 >> 24 != 0; //@line 24984
  return $17 | 0; //@line 24985
 }
 $6 = $0 + 132 | 0; //@line 24988
 $10 = HEAP8[$6 >> 0] & -2 | HEAP8[$1 >> 0] & 1; //@line 24992
 HEAP8[$6 >> 0] = $10; //@line 24993
 HEAP8[$6 >> 0] = HEAP8[$1 + 1 >> 0] << 1 & 2 | $10 & -3; //@line 25000
 $17 = $3 << 24 >> 24 != 0; //@line 25001
 return $17 | 0; //@line 25002
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 36541
 $2 = $b & 65535; //@line 36542
 $3 = Math_imul($2, $1) | 0; //@line 36543
 $6 = $a >>> 16; //@line 36544
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 36545
 $11 = $b >>> 16; //@line 36546
 $12 = Math_imul($11, $1) | 0; //@line 36547
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 36548
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $8 = 0, $or$cond$i = 0;
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 19487
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 19489
 $16 = $10 + ($8 & 255) | 0; //@line 19495
 $or$cond$i = $16 >>> 0 < 256 & $16 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0, HEAP8[$0 + 12 >> 0] | 0, (HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 19499
 HEAP32[___async_retval >> 2] = $or$cond$i ? 0 : -1010; //@line 19502
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19317
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19318
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 19319
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 55; //@line 19322
  sp = STACKTOP; //@line 19323
  return;
 }
 ___async_unwind = 0; //@line 19326
 HEAP32[$ReallocAsyncCtx3 >> 2] = 55; //@line 19327
 sp = STACKTOP; //@line 19328
 return;
}
function __ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $4 = 0, $9 = 0;
 if (!$1) {
  return;
 }
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 23668
 $9 = (HEAP8[$1 + 1 >> 0] | 0) == 0; //@line 23673
 $11 = HEAP32[$1 + 4 >> 2] | 0; //@line 23675
 $16 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 23680
 HEAP32[$4 + ($16 * 24 | 0) + 8 >> 2] = $11; //@line 23682
 if (!$9) {
  return;
 }
 HEAP32[$4 + ($16 * 24 | 0) + 4 >> 2] = $11; //@line 23687
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_308($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3990
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 3997
 _mbed_assert_internal(12851, 12860, 217); //@line 3998
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 519; //@line 4001
  sp = STACKTOP; //@line 4002
  return;
 }
 ___async_unwind = 0; //@line 4005
 HEAP32[$ReallocAsyncCtx3 >> 2] = 519; //@line 4006
 sp = STACKTOP; //@line 4007
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35032
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 35039
 _mbed_assert_internal(12851, 12860, 201); //@line 35040
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 506; //@line 35043
  sp = STACKTOP; //@line 35044
  return;
 }
 ___async_unwind = 0; //@line 35047
 HEAP32[$ReallocAsyncCtx2 >> 2] = 506; //@line 35048
 sp = STACKTOP; //@line 35049
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28678
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 28685
 _mbed_assert_internal(12851, 12860, 162); //@line 28686
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 450; //@line 28689
  sp = STACKTOP; //@line 28690
  return;
 }
 ___async_unwind = 0; //@line 28693
 HEAP32[$ReallocAsyncCtx2 >> 2] = 450; //@line 28694
 sp = STACKTOP; //@line 28695
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30067
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30074
 _mbed_assert_internal(12851, 12860, 155); //@line 30075
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 440; //@line 30078
  sp = STACKTOP; //@line 30079
  return;
 }
 ___async_unwind = 0; //@line 30082
 HEAP32[$ReallocAsyncCtx2 >> 2] = 440; //@line 30083
 sp = STACKTOP; //@line 30084
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07 = 0;
 switch (HEAP8[$1 >> 0] | 0) {
 case 0:
  {
   $$07 = __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5766
   break;
  }
 case 1:
  {
   $$07 = __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5772
   break;
  }
 default:
  {
   $$07 = -1003; //@line 5776
  }
 }
 return $$07 | 0; //@line 5779
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35061
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 35068
 _mbed_assert_internal(12851, 12860, 134); //@line 35069
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 357; //@line 35072
  sp = STACKTOP; //@line 35073
  return;
 }
 ___async_unwind = 0; //@line 35076
 HEAP32[$ReallocAsyncCtx2 >> 2] = 357; //@line 35077
 sp = STACKTOP; //@line 35078
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10138
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10140
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10147
  } else {
   $$0 = $3; //@line 10149
  }
 }
 $8 = _malloc($$0) | 0; //@line 10152
 if (!$8) {
  return $8 | 0; //@line 10155
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10162
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10164
 return $8 | 0; //@line 10165
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4533
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4534
 _initialize($0); //@line 4535
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 696; //@line 4538
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4540
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4542
  sp = STACKTOP; //@line 4543
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4546
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 4549
  return;
 }
}
function _mbed_die__async_cb_194($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 35368
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35370
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 35372
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 35373
 _wait_ms(150); //@line 35374
 if (!___async) {
  ___async_unwind = 0; //@line 35377
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 716; //@line 35379
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 35381
 sp = STACKTOP; //@line 35382
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36425
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36434
 _mbed_assert_internal(12851, 12860, 141); //@line 36435
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 385; //@line 36438
  sp = STACKTOP; //@line 36439
  return;
 }
 ___async_unwind = 0; //@line 36442
 HEAP32[$ReallocAsyncCtx3 >> 2] = 385; //@line 36443
 sp = STACKTOP; //@line 36444
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_281($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2622
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2624
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2626
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2627
 __ZN4mbed10TimerEventD2Ev($2); //@line 2628
 if (!___async) {
  ___async_unwind = 0; //@line 2631
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 119; //@line 2633
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 2635
 sp = STACKTOP; //@line 2636
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_280($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2602
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2604
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2606
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 2607
 __ZN4mbed10TimerEventD2Ev($4); //@line 2608
 if (!___async) {
  ___async_unwind = 0; //@line 2611
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 117; //@line 2613
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 2615
 sp = STACKTOP; //@line 2616
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_279($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2582
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2584
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2586
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 2587
 __ZN4mbed10TimerEventD2Ev($4); //@line 2588
 if (!___async) {
  ___async_unwind = 0; //@line 2591
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 115; //@line 2593
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 2595
 sp = STACKTOP; //@line 2596
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10722
 HEAP32[$0 + 1876 >> 2] = 7; //@line 10724
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10725
 $2 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 340; //@line 10729
  sp = STACKTOP; //@line 10730
  return 0; //@line 10731
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10733
  return $2 | 0; //@line 10734
 }
 return 0; //@line 10736
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1508
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1515
 _mbed_assert_internal(12851, 12860, 148); //@line 1516
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 1519
  sp = STACKTOP; //@line 1520
  return;
 }
 ___async_unwind = 0; //@line 1523
 HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 1524
 sp = STACKTOP; //@line 1525
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 34998
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35000
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 35002
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 35003
 _wait_ms(150); //@line 35004
 if (!___async) {
  ___async_unwind = 0; //@line 35007
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 715; //@line 35009
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 35011
 sp = STACKTOP; //@line 35012
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_287($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2832
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 2835
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 2836
 __ZN4mbed11InterruptInD2Ev($3); //@line 2837
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 125; //@line 2840
  sp = STACKTOP; //@line 2841
  return;
 }
 ___async_unwind = 0; //@line 2844
 HEAP32[$ReallocAsyncCtx9 >> 2] = 125; //@line 2845
 sp = STACKTOP; //@line 2846
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2562
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2564
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2566
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 2567
 __ZN4mbed10TimerEventD2Ev($4); //@line 2568
 if (!___async) {
  ___async_unwind = 0; //@line 2571
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 113; //@line 2573
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 2575
 sp = STACKTOP; //@line 2576
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_409($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 20205
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 20206
 _mbed_assert_internal(14513, 11935, 694); //@line 20207
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 223; //@line 20210
  sp = STACKTOP; //@line 20211
  return;
 }
 ___async_unwind = 0; //@line 20214
 HEAP32[$ReallocAsyncCtx14 >> 2] = 223; //@line 20215
 sp = STACKTOP; //@line 20216
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_110($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 29235
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(4) | 0; //@line 29236
 _mbed_assert_internal(14513, 11935, 766); //@line 29237
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 196; //@line 29240
  sp = STACKTOP; //@line 29241
  return;
 }
 ___async_unwind = 0; //@line 29244
 HEAP32[$ReallocAsyncCtx16 >> 2] = 196; //@line 29245
 sp = STACKTOP; //@line 29246
 return;
}
function ___fflush_unlocked__async_cb_216($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36575
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36577
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36579
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36581
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 36583
 HEAP32[$4 >> 2] = 0; //@line 36584
 HEAP32[$6 >> 2] = 0; //@line 36585
 HEAP32[$8 >> 2] = 0; //@line 36586
 HEAP32[$10 >> 2] = 0; //@line 36587
 HEAP32[___async_retval >> 2] = 0; //@line 36589
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19997
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19999
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20000
 __ZN4mbed10TimerEventD2Ev($2); //@line 20001
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 164; //@line 20004
  sp = STACKTOP; //@line 20005
  return;
 }
 ___async_unwind = 0; //@line 20008
 HEAP32[$ReallocAsyncCtx2 >> 2] = 164; //@line 20009
 sp = STACKTOP; //@line 20010
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21002
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21004
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21005
 __ZN4mbed10TimerEventD2Ev($2); //@line 21006
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 737; //@line 21009
  sp = STACKTOP; //@line 21010
  return;
 }
 ___async_unwind = 0; //@line 21013
 HEAP32[$ReallocAsyncCtx2 >> 2] = 737; //@line 21014
 sp = STACKTOP; //@line 21015
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6266
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 6268
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 6274
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6275
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 6276
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 740; //@line 6279
  sp = STACKTOP; //@line 6280
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6283
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 26295
 $indvars$iv = 0; //@line 26296
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 26301
  $indvars$iv = $indvars$iv + 1 | 0; //@line 26302
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 37162
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2440
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2441
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 2442
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 682; //@line 2445
  sp = STACKTOP; //@line 2446
  return 0; //@line 2447
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2449
  return $3 | 0; //@line 2450
 }
 return 0; //@line 2452
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2392
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2393
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 2394
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 680; //@line 2397
  sp = STACKTOP; //@line 2398
  return 0; //@line 2399
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2401
  return $3 | 0; //@line 2402
 }
 return 0; //@line 2404
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 668; //@line 3760
 $2 = $0 + 4 | 0; //@line 3761
 $3 = $0 + 28 | 0; //@line 3762
 $4 = $0; //@line 3763
 dest = $2; //@line 3764
 stop = dest + 68 | 0; //@line 3764
 do {
  HEAP32[dest >> 2] = 0; //@line 3764
  dest = dest + 4 | 0; //@line 3764
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 21, $4) | 0; //@line 3765
 _gpio_init_in($2, $1); //@line 3766
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_291($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 2909
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2911
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 2913
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 2914
 if (!___async) {
  ___async_unwind = 0; //@line 2917
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 121; //@line 2919
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 2921
 sp = STACKTOP; //@line 2922
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_290($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 2890
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2892
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 2894
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 2895
 if (!___async) {
  ___async_unwind = 0; //@line 2898
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 122; //@line 2900
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 2902
 sp = STACKTOP; //@line 2903
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_289($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 2871
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2873
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 2875
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 2876
 if (!___async) {
  ___async_unwind = 0; //@line 2879
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 123; //@line 2881
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 2883
 sp = STACKTOP; //@line 2884
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_288($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 2852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2854
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 2856
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 2857
 if (!___async) {
  ___async_unwind = 0; //@line 2860
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 124; //@line 2862
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 2864
 sp = STACKTOP; //@line 2865
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_282($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 2642
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2644
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 2646
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 2647
 if (!___async) {
  ___async_unwind = 0; //@line 2650
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 120; //@line 2652
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 2654
 sp = STACKTOP; //@line 2655
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14256
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14257
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 14258
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 779; //@line 14261
  sp = STACKTOP; //@line 14262
  return 0; //@line 14263
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14265
  return $3 | 0; //@line 14266
 }
 return 0; //@line 14268
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6956
 $2 = HEAP32[$0 >> 2] | 0; //@line 6957
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6958
 FUNCTION_TABLE_vi[$2 & 1023]($1); //@line 6959
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 766; //@line 6962
  sp = STACKTOP; //@line 6963
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6966
  return;
 }
}
function _serial_putc__async_cb_345($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6048
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6050
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 6051
 _fflush($2) | 0; //@line 6052
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 6055
  sp = STACKTOP; //@line 6056
  return;
 }
 ___async_unwind = 0; //@line 6059
 HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 6060
 sp = STACKTOP; //@line 6061
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14333
 $1 = HEAP32[2570] | 0; //@line 14334
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14335
 $2 = _fputc($0, $1) | 0; //@line 14336
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 781; //@line 14339
  sp = STACKTOP; //@line 14340
  return 0; //@line 14341
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14343
  return $2 | 0; //@line 14344
 }
 return 0; //@line 14346
}
function _main__async_cb_147($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31408
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31410
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 31411
 __ZN6events10EventQueue8dispatchEi(22968, -1); //@line 31412
 if (!___async) {
  ___async_unwind = 0; //@line 31415
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 757; //@line 31417
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 31419
 sp = STACKTOP; //@line 31420
 return;
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4292
 HEAP32[$0 >> 2] = 704; //@line 4293
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 4295
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4297
 _ticker_remove_event($2, $0 + 8 | 0); //@line 4298
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 172; //@line 4301
  sp = STACKTOP; //@line 4302
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4305
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19288
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19290
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19291
 __ZN4mbed10TimerEventD2Ev($2); //@line 19292
 if (!___async) {
  ___async_unwind = 0; //@line 19295
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 166; //@line 19297
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 19299
 sp = STACKTOP; //@line 19300
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_423($0) {
 $0 = $0 | 0;
 var $$011 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$011 = 3; //@line 20976
   break;
  }
 case -1004:
  {
   $$011 = 2; //@line 20980
   break;
  }
 case -1005:
  {
   $$011 = 1; //@line 20984
   break;
  }
 case -1006:
  {
   $$011 = 0; //@line 20988
   break;
  }
 default:
  {
   $$011 = 0; //@line 20992
  }
 }
 HEAP8[___async_retval >> 0] = $$011; //@line 20996
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22689
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22691
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 22692
 __ZN4mbed10TimerEventD2Ev($2); //@line 22693
 if (!___async) {
  ___async_unwind = 0; //@line 22696
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 739; //@line 22698
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22700
 sp = STACKTOP; //@line 22701
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_276($0) {
 $0 = $0 | 0;
 var $15 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2393
 HEAP32[$4 + 364 >> 2] = 2; //@line 2395
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 2403
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 2408
 $15 = $4 + 944 | 0; //@line 2409
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 2412
 return;
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 37155
}
function _emscripten_async_resume() {
 ___async = 0; //@line 36874
 ___async_unwind = 1; //@line 36875
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 36881
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 36885
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 36889
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 36891
 }
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 20232; //@line 14286
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 14292
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 14294
 $9 = tempRet0; //@line 14295
 $10 = 20232; //@line 14296
 HEAP32[$10 >> 2] = $8; //@line 14298
 HEAP32[$10 + 4 >> 2] = $9; //@line 14301
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 14302
 return $14 | 0; //@line 14304
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10170
 STACKTOP = STACKTOP + 16 | 0; //@line 10171
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10171
 $vararg_buffer = sp; //@line 10172
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10176
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10178
 STACKTOP = sp; //@line 10179
 return $5 | 0; //@line 10179
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2672
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2673
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 2674
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 2677
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2679
  sp = STACKTOP; //@line 2680
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2683
  __ZdlPv($0); //@line 2684
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4341
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4346
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4347
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 4348
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 174; //@line 4351
  sp = STACKTOP; //@line 4352
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4355
  return;
 }
}
function __ZN7LoRaPHY18verify_rx_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink5 = 0, $$sink6 = 0, $7 = 0;
 if (!(HEAP8[$0 + 132 >> 0] & 2)) {
  $7 = HEAP8[$0 + 28 >> 0] | 0; //@line 26549
  $$sink5 = $7; //@line 26550
  $$sink6 = $7; //@line 26550
 } else {
  $$sink5 = HEAP8[$0 + 28 >> 0] | 0; //@line 26556
  $$sink6 = HEAP8[$0 + 35 >> 0] | 0; //@line 26556
 }
 return ($$sink6 << 24 >> 24 <= $1 << 24 >> 24 ? $$sink5 << 24 >> 24 >= $1 << 24 >> 24 : 0) | 0; //@line 26561
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6354
 $1 = HEAP32[$0 >> 2] | 0; //@line 6355
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6356
 FUNCTION_TABLE_v[$1 & 15](); //@line 6357
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 743; //@line 6360
  sp = STACKTOP; //@line 6361
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6364
  return;
 }
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6038
 $2 = HEAP32[5720] | 0; //@line 6039
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6040
 FUNCTION_TABLE_vii[$2 & 31]($0, $1); //@line 6041
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 733; //@line 6044
  sp = STACKTOP; //@line 6045
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6048
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6785
 $6 = ___async_retval; //@line 6787
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 6792
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 6793
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 6795
 HEAP32[$12 + 4 >> 2] = $11; //@line 6798
 $16 = $4; //@line 6799
 HEAP32[$16 >> 2] = 0; //@line 6801
 HEAP32[$16 + 4 >> 2] = 0; //@line 6804
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_277($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2446
 if (HEAP8[$2 + 373 >> 0] | 0) {
  HEAP8[$2 + 377 >> 0] = 1; //@line 2452
  $7 = $2 + 968 | 0; //@line 2453
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & -5; //@line 2456
 }
 if ((HEAP32[$2 + 360 >> 2] | 0) != 2) {
  return;
 }
 $13 = $2 + 944 | 0; //@line 2464
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 2467
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_91($0) {
 $0 = $0 | 0;
 var $12 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28230
 HEAP32[$4 + 364 >> 2] = 2; //@line 28232
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 28236
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 28240
 $12 = $4 + 944 | 0; //@line 28241
 HEAP8[$12 >> 0] = HEAP8[$12 >> 0] | 32; //@line 28244
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 36816
 STACKTOP = STACKTOP + 16 | 0; //@line 36817
 $rem = __stackBase__ | 0; //@line 36818
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 36819
 STACKTOP = __stackBase__; //@line 36820
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 36821
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 36586
 if ((ret | 0) < 8) return ret | 0; //@line 36587
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 36588
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 36589
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 36590
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 36591
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 36592
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2467
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2468
 _mbedtls_gcm_free($0); //@line 2469
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 683; //@line 2472
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2474
  sp = STACKTOP; //@line 2475
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2478
  _free($0); //@line 2479
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2419
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2420
 _mbedtls_ccm_free($0); //@line 2421
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 681; //@line 2424
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2426
  sp = STACKTOP; //@line 2427
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2430
  _free($0); //@line 2431
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14631
 STACKTOP = STACKTOP + 16 | 0; //@line 14632
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14632
 if (!(_pthread_once(23800, 8) | 0)) {
  $3 = _pthread_getspecific(HEAP32[5951] | 0) | 0; //@line 14638
  STACKTOP = sp; //@line 14639
  return $3 | 0; //@line 14639
 } else {
  _abort_message(18606, sp); //@line 14641
 }
 return 0; //@line 14644
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28254
 $6 = $2 + 1928 | 0; //@line 28257
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 28258
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($2 + 1336 | 0, $4); //@line 28260
 HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 28263
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 5983
 } else {
  if (!(HEAP32[$1 + 12 >> 2] | 0)) {
   $$0 = -1003; //@line 5989
  } else {
   __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1); //@line 5992
   $$0 = 0; //@line 5993
  }
 }
 return $$0 | 0; //@line 5996
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14799
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2831
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2832
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 2833
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 2836
  sp = STACKTOP; //@line 2837
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2840
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb_195($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35443
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35445
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35447
 HEAP32[$2 >> 2] = 18467; //@line 35448
 HEAP32[$2 + 4 >> 2] = $4; //@line 35450
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 35452
 _abort_message(18331, $2); //@line 35453
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 14215
 $6 = HEAP32[$5 >> 2] | 0; //@line 14216
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 14217
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 14219
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 14221
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 14224
 return $2 | 0; //@line 14225
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 184 | 0; //@line 4365
 HEAP32[$3 >> 2] = 0; //@line 4366
 HEAP32[$3 + 4 >> 2] = 0; //@line 4366
 HEAP32[$3 + 8 >> 2] = 0; //@line 4366
 HEAP32[$3 + 12 >> 2] = 0; //@line 4366
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 4369
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 4372
  return;
 }
}
function __ZN6events10EventQueue8dispatchEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4380
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4381
 _equeue_dispatch($0, $1); //@line 4382
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 175; //@line 4385
  sp = STACKTOP; //@line 4386
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4389
  return;
 }
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4411
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4412
 _equeue_cancel($0, $1); //@line 4413
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 176; //@line 4416
  sp = STACKTOP; //@line 4417
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4420
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_89($0) {
 $0 = $0 | 0;
 var $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28158
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 28162
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 28166
 $9 = $2 + 944 | 0; //@line 28167
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 28170
 return;
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9509
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9511
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 9512
 _fputc(10, $2) | 0; //@line 9513
 if (!___async) {
  ___async_unwind = 0; //@line 9516
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 788; //@line 9518
 sp = STACKTOP; //@line 9519
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 880; //@line 25872
 HEAP32[$0 + 4 >> 2] = 0; //@line 25874
 HEAP32[$0 + 8 >> 2] = $1; //@line 25876
 dest = $0 + 12 | 0; //@line 25878
 stop = dest + 124 | 0; //@line 25878
 do {
  HEAP32[dest >> 2] = 0; //@line 25878
  dest = dest + 4 | 0; //@line 25878
 } while ((dest | 0) < (stop | 0));
 return;
}
function _handle_lora_downlink__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21692
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21696
 _memcpy($2 + 788 | 0, HEAP32[$0 + 8 >> 2] | 0, $6 | 0) | 0; //@line 21698
 HEAP8[$2 + 782 >> 0] = $6; //@line 21701
 HEAP8[$2 + 781 >> 0] = -35; //@line 21703
 HEAP8[$2 + 780 >> 0] = -5; //@line 21705
 HEAP8[$2 + 783 >> 0] = 1; //@line 21707
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 1941
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 1946
 $$09 = 0; //@line 1947
 $7 = 0; //@line 1947
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 1951
  $$09 = $$09 + 1 << 24 >> 24; //@line 1952
  $7 = $$09 & 255; //@line 1953
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 6061
  return $$0 | 0; //@line 6062
 }
 HEAP32[5720] = $2; //@line 6064
 HEAP32[$0 >> 2] = $1; //@line 6065
 HEAP32[$0 + 4 >> 2] = $1; //@line 6067
 _emscripten_asm_const_iii(9, $3 | 0, $1 | 0) | 0; //@line 6068
 $$0 = 0; //@line 6069
 return $$0 | 0; //@line 6070
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36111
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 36122
  $$0 = 1; //@line 36123
 } else {
  $$0 = 0; //@line 36125
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 36129
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26270
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 26273
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 26278
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26281
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 15393
 STACKTOP = STACKTOP + 16 | 0; //@line 15394
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15394
 _free($0); //@line 15396
 if (!(_pthread_setspecific(HEAP32[5951] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 15401
  return;
 } else {
  _abort_message(18705, sp); //@line 15403
 }
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6439
 $6 = ___async_retval; //@line 6441
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 6446
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 6448
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 6450
 HEAP32[$13 + 4 >> 2] = $11; //@line 6453
 HEAP32[$4 >> 2] = 1; //@line 6454
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 if (($2 | 0) == 0 | $3 << 16 >> 16 == 0) {
  $$0 = -1003; //@line 5967
  return $$0 | 0; //@line 5968
 }
 $$0 = __ZN12LoRaWANStack9handle_rxEhPhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 5973
 return $$0 | 0; //@line 5974
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 6101
 HEAP32[$0 >> 2] = $1; //@line 6102
 HEAP32[5721] = 1; //@line 6103
 $4 = $0; //@line 6104
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 6109
 $10 = 22888; //@line 6110
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 6112
 HEAP32[$10 + 4 >> 2] = $9; //@line 6115
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14875
 }
 return;
}
function __ZN11LoRaMacMcps18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 36 | 0; //@line 22653
 HEAP32[$1 >> 2] = 0; //@line 22654
 HEAP32[$1 + 4 >> 2] = 0; //@line 22654
 HEAP32[$1 + 8 >> 2] = 0; //@line 22654
 HEAP32[$1 + 12 >> 2] = 0; //@line 22654
 HEAP32[$1 + 16 >> 2] = 0; //@line 22654
 HEAP32[$1 + 20 >> 2] = 0; //@line 22654
 HEAP32[$0 + 40 >> 2] = 1; //@line 22656
 return;
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 5633
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 5637
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 5641
   $$0 = 0; //@line 5642
  } else {
   $$0 = $4; //@line 5644
  }
 } else {
  $$0 = $1; //@line 5647
 }
 return $$0 | 0; //@line 5649
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6401
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6402
 _emscripten_sleep($0 | 0); //@line 6403
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 744; //@line 6406
  sp = STACKTOP; //@line 6407
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6410
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 16 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5597
 $0 = sp; //@line 5598
 _gettimeofday($0 | 0, 0) | 0; //@line 5599
 STACKTOP = sp; //@line 5606
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 5606
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 989
 $7 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($2 + 348 | 0, HEAP32[$0 + 8 >> 2] | 0, $2 + 360 | 0) | 0; //@line 994
 HEAP32[___async_retval >> 2] = $7; //@line 996
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 15378
 STACKTOP = STACKTOP + 16 | 0; //@line 15379
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15379
 if (!(_pthread_key_create(23804, 797) | 0)) {
  STACKTOP = sp; //@line 15384
  return;
 } else {
  _abort_message(18655, sp); //@line 15386
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 14939
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 14943
  }
 }
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 36850
 HEAP32[new_frame + 4 >> 2] = sp; //@line 36852
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 36854
 ___async_cur_frame = new_frame; //@line 36855
 return ___async_cur_frame + 8 | 0; //@line 36856
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_298($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3303
 HEAP32[$4 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) | 0; //@line 3307
 HEAP32[___async_retval >> 2] = 0; //@line 3309
 return;
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 16577
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 16577
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 16579
  HEAP8[$$05$i >> 0] = 0; //@line 16581
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 16586
  }
 }
 return;
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 27220
 $$031$i = 280; //@line 27220
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 27222
  HEAP8[$$02$i >> 0] = 0; //@line 27224
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 27229
  }
 }
 return;
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 20679
 $3 = HEAPU8[$1 >> 0] | 0; //@line 20681
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 20686
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 20687
 HEAP8[$1 >> 0] = $3 + $8; //@line 20690
 return;
}
function b290(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 361
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 5715
 } else {
  $$0 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5719
 }
 return $$0 | 0; //@line 5721
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7272
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7272
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7272
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9062
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9062
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9062
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7222
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7222
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7222
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9728
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9728
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9728
 return;
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 25593
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 25598
  return $$0 | 0; //@line 25599
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 25603
 return $$0 | 0; //@line 25604
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6024
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6030
 _emscripten_asm_const_iiiiii(8, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6031
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37975
 if (!$2) {
  $12 = HEAPU16[HEAP32[$0 + 8 >> 2] >> 1] | 0; //@line 37984
 } else {
  $12 = $2 << 16 >> 16; //@line 37988
 }
 HEAP16[___async_retval >> 1] = $12; //@line 37992
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 19387
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19391
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 19394
 return;
}
function b288(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 358
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 36839
  return low << bits; //@line 36840
 }
 tempRet0 = low << bits - 32; //@line 36842
 return 0; //@line 36843
}
function __ZN11LoRaMacMlme18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 8 | 0; //@line 23494
 HEAP32[$1 >> 2] = 0; //@line 23495
 HEAP32[$1 + 4 >> 2] = 0; //@line 23495
 HEAP32[$1 + 8 >> 2] = 0; //@line 23495
 HEAP32[$1 + 12 >> 2] = 0; //@line 23495
 HEAP32[$0 + 12 >> 2] = 1; //@line 23497
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 13868
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13868
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 13868
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 36828
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 36829
 }
 tempRet0 = 0; //@line 36831
 return high >>> bits - 32 | 0; //@line 36832
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 3110
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3110
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3110
 return;
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 $$sink = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 26439
 return ($$sink << 24 >> 24 == $1 << 24 >> 24 ? $$sink : ($1 & 255) + 255 & 255) | 0; //@line 26445
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 11742
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11742
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11742
 return;
}
function _equeue_dispatch__async_cb_10($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17873
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17875
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 1; //@line 17876
 _equeue_mutex_unlock($4); //@line 17877
 HEAP8[$6 >> 0] = 0; //@line 17878
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_95($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28400
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28402
 HEAP32[$6 + 16 >> 2] = 0; //@line 28404
 return;
}
function _fflush__async_cb_248($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1080
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 1082
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 1085
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_139($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30782
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 364 >> 2] = 2; //@line 30784
 HEAP32[___async_retval >> 2] = $6; //@line 30786
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_196($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35521
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 35523
 _gpio_irq_set($6 + 28 | 0, 2, 1); //@line 35525
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 903
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 905
 }
 return 0; //@line 907
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_153($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 31765
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 31766
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 31769
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb_125($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = 23176; //@line 30061
 stop = dest + 48 | 0; //@line 30061
 do {
  HEAP32[dest >> 2] = 0; //@line 30061
  dest = dest + 4 | 0; //@line 30061
 } while ((dest | 0) < (stop | 0));
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 35957
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 35960
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 35963
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6006
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6012
 _emscripten_asm_const_iiii(7, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6013
 return;
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 500
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 502
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 504
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 9898
 } else {
  HEAP8[$0 + 2284 >> 0] = $1; //@line 9901
  $$0 = 0; //@line 9902
 }
 return $$0 | 0; //@line 9904
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 29807
 } else {
  $$0 = -1; //@line 29809
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 29812
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_334($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5632
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) == 0 ? -1016 : $AsyncRetVal; //@line 5636
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 37099
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 10877
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 10883
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 10887
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_421($0) {
 $0 = $0 | 0;
 var $7 = 0;
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 968 | 0; //@line 20766
 HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1; //@line 20769
 HEAP32[___async_retval >> 2] = 0; //@line 20771
 return;
}
function _equeue_break($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 128 | 0; //@line 5038
 _equeue_mutex_lock($1); //@line 5039
 HEAP8[$0 + 8 >> 0] = 1; //@line 5041
 _equeue_mutex_unlock($1); //@line 5042
 _equeue_sema_signal($0 + 48 | 0); //@line 5044
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_222($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37115
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 37118
 HEAP32[___async_retval >> 2] = 0; //@line 37120
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_221($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37102
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 37105
 HEAP32[___async_retval >> 2] = 0; //@line 37107
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1626
 stop = dest + 68 | 0; //@line 1626
 do {
  HEAP32[dest >> 2] = 0; //@line 1626
  dest = dest + 4 | 0; //@line 1626
 } while ((dest | 0) < (stop | 0));
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 37148
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 36862
 stackRestore(___async_cur_frame | 0); //@line 36863
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 36864
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1308
 stop = dest + 68 | 0; //@line 1308
 do {
  HEAP32[dest >> 2] = 0; //@line 1308
  dest = dest + 4 | 0; //@line 1308
 } while ((dest | 0) < (stop | 0));
 return;
}
function __Z15decrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) | 0; //@line 22441
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28273
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 28274
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28276
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16604
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 16605
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16607
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 26492
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 26493
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 26500
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13874
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13874
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13876
 return $1 | 0; //@line 13877
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_340($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5986
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 6; //@line 5991
 HEAP32[___async_retval >> 2] = $2; //@line 5993
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 10336
  $$0 = -1; //@line 10337
 } else {
  $$0 = $0; //@line 10339
 }
 return $$0 | 0; //@line 10341
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 5990
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 5996
 _emscripten_asm_const_iii(6, $0 | 0, $1 | 0) | 0; //@line 5997
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 5975
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 5981
 _emscripten_asm_const_iii(5, $0 | 0, $1 | 0) | 0; //@line 5982
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 5655
 HEAP8[$0 + 76 >> 0] = 1; //@line 5657
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 5659
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5660
 return;
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5857
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 36579
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 36580
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 36581
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 37092
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 6338
 _emscripten_asm_const_iii(13, $0 + 40 | 0, $4 | 0) | 0; //@line 6340
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack12add_channelsERK16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5848
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_402($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 19970
 HEAP8[___async_retval >> 0] = 1; //@line 19973
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 1; //@line 5794
 return __ZN12LoRaWANStack22set_link_check_requestEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5797
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 2691
 ___cxa_begin_catch($0 | 0) | 0; //@line 2692
 _emscripten_alloc_async_context(4, sp) | 0; //@line 2693
 __ZSt9terminatev(); //@line 2694
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 37141
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 2526
 if (!$0) {
  $$0 = 0; //@line 2529
 } else {
  _mbedtls_aes_init($0); //@line 2531
  $$0 = $0; //@line 2532
 }
 return $$0 | 0; //@line 2534
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 913
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 914
 HEAP32[___async_retval >> 2] = $4; //@line 916
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 16255
 } else {
  HEAP8[$0 >> 0] = 1; //@line 16257
  $$0 = 1; //@line 16258
 }
 return $$0 | 0; //@line 16260
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5839
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_378($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0; //@line 8940
 HEAP8[___async_retval >> 0] = 1; //@line 8943
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 37085
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 2503
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 36571
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 36573
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_275($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 2380
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 2383
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5814
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 37134
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 0) | 0; //@line 5830
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack16remove_a_channelEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5874
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 26474
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 1) | 0; //@line 5822
}
function __ZN7LoRaPHY15verify_tx_powerEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP8[$0 + 22 >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$0 + 21 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 26611
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_459($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24494
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 12934
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 12937
 }
 return $$0 | 0; //@line 12939
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_34($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21418
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_307($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3915
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_341($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 6; //@line 6004
 HEAP32[___async_retval >> 2] = -1014; //@line 6006
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 20965
 return;
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 25895
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_382($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 9432
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_102($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28829
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_507($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 35108
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 37078
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack17drop_channel_listEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5865
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 10517
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 10521
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 36808
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_131($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30186
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_128($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30114
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_127($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30106
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 34957
 return;
}
function b42(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 37271
 return 0; //@line 37271
}
function b41(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 37268
 return 0; //@line 37268
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_364($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 7851
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 26950
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_422($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20795
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 30098
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 36869
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 36870
}
function _gpio_irq_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(11, HEAP32[$0 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0; //@line 6091
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 37127
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 9573
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_515($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 36447
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_206($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 35820
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(14, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6420
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_199($0) {
 $0 = $0 | 0;
 _gpio_irq_set((HEAP32[$0 + 8 >> 2] | 0) + 28 | 0, 2, 0); //@line 35636
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb_258($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1551
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_503($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 34940
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 26459
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6976
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 3905
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11013
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11015
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack8shutdownEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5787
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15478
 __ZdlPv($0); //@line 15479
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 2491
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb_435($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22186
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15161
 __ZdlPv($0); //@line 15162
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 20232; //@line 14275
 HEAP32[$2 >> 2] = $0 + -1; //@line 14277
 HEAP32[$2 + 4 >> 2] = 0; //@line 14280
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 26931
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 692 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 891
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_394($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 688 >> 0] = 0; //@line 19442
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb_425($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21039
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 2457
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 2460
 }
 return $0 | 0; //@line 2462
}
function b39(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 37265
 return 0; //@line 37265
}
function b38(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 37262
 return 0; //@line 37262
}
function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(5); //@line 37259
 return 0; //@line 37259
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 37256
 return 0; //@line 37256
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 2409
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 2412
 }
 return $0 | 0; //@line 2414
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 35979
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14689
 __ZdlPv($0); //@line 14690
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30854
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 27025
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 12419
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 19991
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 36599
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 35098
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1e3; //@line 35739
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 37071
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 19942
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_228($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 364 >> 2] = 1; //@line 37348
 return;
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 8084
 return;
}
function b286(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 355
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_179($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 34974
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6374
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 4187
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 14886
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 7350
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 124 | 0 : $0 + 120 | 0) >> 2] | 0; //@line 26511
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 20785
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_354($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 6713
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2695] | 0; //@line 15468
 HEAP32[2695] = $0 + 0; //@line 15470
 return $0 | 0; //@line 15472
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 26940
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2489
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(10, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 6080
 return;
}
function _mbedtls_cipher_update__async_cb_271($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2138
 return;
}
function _mbedtls_cipher_setkey__async_cb_278($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2509
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0); //@line 37120
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_4($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 16478
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_501($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 34859
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 2512
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 2521
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 21684
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 36435
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_6($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16546
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 36419
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_268($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1988
 return;
}
function b34(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 37253
 return 0; //@line 37253
}
function b33(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 37250
 return 0; //@line 37250
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1998
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2499
 return;
}
function __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 23519
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 688 >> 0] = 0; //@line 20459
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 1539
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 34851
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_344($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1011; //@line 6036
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22720
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4298
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1561
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 22696
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 36896
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_516($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 25903
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_237($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1015; //@line 38193
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_236($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1003; //@line 38183
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_343($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 6026
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_342($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 6016
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 20240; //@line 30341
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 22176
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 3 >> 0] | 0) != 0 | 0; //@line 22015
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 21029
 return;
}
function b284(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 352
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 26536
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 12882
}
function _fflush__async_cb_249($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1095
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16568
 return;
}
function _fputc__async_cb_92($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28286
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28839
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 20714
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 880; //@line 23567
 HEAP32[$0 + 4 >> 2] = 0; //@line 23569
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 37064
}
function _putc__async_cb_8($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16617
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 37967
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 981
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 6731
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 20731
}
function __ZN7LoRaMac11schedule_txEv__async_cb_434($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 22168
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_433($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 22156
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(15); //@line 37247
 return 0; //@line 37247
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 26619
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 0; //@line 5804
 return;
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 37244
 return 0; //@line 37244
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 20699
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 20705
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18758, HEAP32[$0 + 4 >> 2] | 0); //@line 20833
}
function __ZN4mbed11InterruptInD0Ev__async_cb_247($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 879
 return;
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 26779
 __ZdlPv($0); //@line 26780
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(12, $0 + 40 | 0) | 0; //@line 6348
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_453($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_449($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_448($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 35748
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 37113
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 26482
}
function __ZN5Sht3115readTemperatureEv($0) {
 $0 = $0 | 0;
 return +(+(_emscripten_asm_const_ii(15, $0 | 0) | 0) / 100.0);
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_391($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 19309
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_441($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 22710
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 20721
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 20570
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 20672
 return;
}
function b282(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 349
}
function b281(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 346
}
function b280(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(5); //@line 343
}
function b279(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 340
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 20579
}
function __ZN7LoRaPHY25get_default_rx2_frequencyEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 68 >> 2] | 0; //@line 26417
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_416($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_415($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_414($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_408($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_117($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_116($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_115($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_114($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 5582
 return;
}
function __ZN7LoRaPHY24get_default_rx2_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 64 >> 0] | 0; //@line 26425
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_218($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 5591
 return;
}
function __ZN7LoRaPHY23get_default_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 30 >> 0] | 0; //@line 26409
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 2238
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_36($0) {
 $0 = $0 | 0;
 return;
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 2540
 _free($0); //@line 2541
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_79($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20get_default_tx_powerEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 23 >> 0] | 0; //@line 26401
}
function __ZN6events10EventQueue14break_dispatchEv($0) {
 $0 = $0 | 0;
 _equeue_break($0); //@line 4397
 return;
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 1373
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 26519
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 112 >> 2] | 0; //@line 26527
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 20586
}
function b28(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 37241
 return 0; //@line 37241
}
function b27(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 37238
 return 0; //@line 37238
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 37235
 return 0; //@line 37235
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 37232
 return 0; //@line 37232
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 37229
 return 0; //@line 37229
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 37226
 return 0; //@line 37226
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 37223
 return 0; //@line 37223
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 37220
 return 0; //@line 37220
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 37217
 return 0; //@line 37217
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 37214
 return 0; //@line 37214
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 37211
 return 0; //@line 37211
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 37208
 return 0; //@line 37208
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 37205
 return 0; //@line 37205
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 37202
 return 0; //@line 37202
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(17); //@line 37199
 return 0; //@line 37199
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 14127
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 37196
 return 0; //@line 37196
}
function _main__async_cb_149($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 31436
 return;
}
function _main__async_cb_148($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 31428
 return;
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 6774
 return;
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5626
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 2556
 return;
}
function _main__async_cb_151($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 31525
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 5613
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_209($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 260) | 0; //@line 20331
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 37057
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 5619
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_486($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 26917
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 19928
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_253($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcps16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 36 | 0; //@line 22664
}
function b277(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 337
}
function b276(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 334
}
function b275(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(5); //@line 331
}
function b274(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 328
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 4405
}
function __ZN11LoRaMacMlme16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 8 | 0; //@line 23505
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 27209
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_78($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 3576
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_468($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 23512
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_511($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 26772
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_439($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_438($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlmeC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 23481
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15](); //@line 37106
}
function __ZN11LoRaMacMcps14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 22670
}
function __ZN10LoRaMacMibC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 22682
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_463($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_460($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_348($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_68($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 6008
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 10394
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_309($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_491($0) {
 $0 = $0 | 0;
 return;
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 37193
 return 0; //@line 37193
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 37190
 return 0; //@line 37190
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_292($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_205($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_204($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_203($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_201($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 37187
 return 0; //@line 37187
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 37184
 return 0; //@line 37184
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 37181
 return 0; //@line 37181
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10); //@line 37178
 return 0; //@line 37178
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 37175
 return 0; //@line 37175
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_30($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_119($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_53($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_49($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_48($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_47($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_46($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_45($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_44($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_43($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_94($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb_505($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_215($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_97($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb_126($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(23788); //@line 11020
 return 23796; //@line 11021
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb_99($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_494($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_62($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb_257($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_20($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_18($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_14($0) {
 $0 = $0 | 0;
 return;
}
function b272(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(31); //@line 325
}
function b271(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(30); //@line 322
}
function b270(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(29); //@line 319
}
function b269(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(28); //@line 316
}
function b268(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(27); //@line 313
}
function b267(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(26); //@line 310
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23576
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_3($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb_506($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue8dispatchEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 4313
}
function __ZN16SX1276_LoRaRadio9start_cadEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb_393($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcps23activate_mcps_subsystemEv($0) {
 $0 = $0 | 0;
 return;
}
function b266(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 307
}
function _abort_message__async_cb_384($0) {
 $0 = $0 | 0;
 _abort(); //@line 9526
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_27($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 37277
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_251($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_286($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_370($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14048
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14054
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_360($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_135($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_403($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 37023
}
function __ZN4mbed6TickerD2Ev__async_cb_424($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 14515
 return;
}
function b3() {
 nullFunc_i(7); //@line 37172
 return 0; //@line 37172
}
function b2() {
 nullFunc_i(6); //@line 37169
 return 0; //@line 37169
}
function b1() {
 nullFunc_i(0); //@line 37166
 return 0; //@line 37166
}
function _schedule_interrupt__async_cb_87($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_86($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_83($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_82($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 37019
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(23788); //@line 11026
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL12send_messagev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 37628
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 37625
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 37622
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 37619
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 37616
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 37613
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 37610
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 37607
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 37604
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 37601
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 37598
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 37595
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 37592
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 37589
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 37586
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 37583
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 37580
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 37577
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 37574
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 37571
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 37568
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 37565
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 37562
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 37559
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 37556
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 37553
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 37550
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 37547
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 37544
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 37541
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 37538
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 37535
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 37532
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 37529
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 37526
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 37523
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 37520
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 37517
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 37514
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 37511
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 37508
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 37505
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 37502
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 37499
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 37496
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 37493
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 37490
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 37487
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 37484
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 37481
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 37478
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 37475
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 37472
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 37469
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 37466
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 37463
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 37460
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 37457
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 37454
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 37451
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 37448
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 37445
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 37442
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 37439
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 37436
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 37433
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 37430
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 37427
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 37424
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 37421
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 37418
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 37415
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 37412
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 37409
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 37406
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 37403
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 37400
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 37397
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 37394
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 37391
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 37388
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 37385
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 37382
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 37379
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 37376
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 37373
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 37370
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 37367
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 37364
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 37361
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 37358
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 37355
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 37352
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 37349
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 37346
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 37343
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 37340
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 37337
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 37334
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 37331
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 37328
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 37325
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 37322
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 37319
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 37316
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 37313
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 37310
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 37307
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 37304
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 304
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 301
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 298
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 295
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 292
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 289
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 286
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 283
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 280
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 277
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 274
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 271
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 268
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 265
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 262
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 259
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 256
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 253
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 250
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 247
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 244
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 241
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 238
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 10352
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 10669
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 235
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 232
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 229
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 226
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 223
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 220
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 217
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 214
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 211
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 208
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 205
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 202
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 199
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 196
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 193
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 190
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 187
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 184
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 181
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 178
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 175
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 172
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 169
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 166
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 163
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 160
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 157
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 154
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 151
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 148
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 145
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 142
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 139
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 136
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 133
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 130
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 127
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 124
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 121
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 118
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 115
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 112
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 109
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 106
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 103
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 100
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 37301
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 97
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 94
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 91
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 88
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 85
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 82
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 79
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 76
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 73
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 70
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 67
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 64
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 61
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 58
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 55
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 52
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 49
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 46
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 43
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 40
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 37
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 34
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 31
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 28
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 25
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 22
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 19
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 16
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 13
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 10
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 7
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 4
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 1
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _initialize__async_cb_72($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function __ZN14LoRaMacCommandD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10132; //@line 6396
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10064; //@line 5562
}
function ___errno_location() {
 return 23784; //@line 10346
}
function __ZN11LoRaMacMlmeD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsC2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMibD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function __ZSt9terminatev__async_cb_7($0) {
 $0 = $0 | 0;
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10412; //@line 10399
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 6155
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b51() {
 nullFunc_v(15); //@line 37298
}
function b50() {
 nullFunc_v(14); //@line 37295
}
function b49() {
 nullFunc_v(13); //@line 37292
}
function b48() {
 nullFunc_v(12); //@line 37289
}
function b47() {
 nullFunc_v(11); //@line 37286
}
function b46() {
 nullFunc_v(10); //@line 37283
}
function _us_ticker_fire_interrupt() {
 return;
}
function b45() {
 nullFunc_v(9); //@line 37280
}
function b44() {
 nullFunc_v(0); //@line 37274
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,b6,b7,b8,b9,b10,b11];
var FUNCTION_TABLE_iii = [b13,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,__ZN7LoRaPHY16verify_frequencyEj,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25
,b26,b27,b28];
var FUNCTION_TABLE_iiii = [b30,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa,__ZN7LoRaPHY11add_channelEP16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b31];
var FUNCTION_TABLE_iiiii = [b33,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b34];
var FUNCTION_TABLE_iiiiii = [b36,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b37,b38,b39];
var FUNCTION_TABLE_iiiiiii = [b41,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b42];
var FUNCTION_TABLE_v = [b44,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZL12send_messagev,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b45,b46,b47,b48,b49,b50,b51];
var FUNCTION_TABLE_vi = [b53,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_394,__ZN16SX1276_LoRaRadio11radio_resetEv__async_cb,__ZN16SX1276_LoRaRadio5sleepEv__async_cb_392,__ZN16SX1276_LoRaRadio5sleepEv__async_cb,__ZN16SX1276_LoRaRadio5sleepEv__async_cb_393,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_418,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_417,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_419
,__ZN16SX1276_LoRaRadio7standbyEv__async_cb,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_37,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_36,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_81,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_80,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_79,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_22,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_13,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_14,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_15,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_16,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_17,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_21,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_24,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_20,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_19,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_23,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_18,__ZN16SX1276_LoRaRadio11set_channelEj__async_cb,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_243,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb,__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_208,__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb
,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_211,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_159,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_158,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_157,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_160,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_156,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_165,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_161,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_162,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_164,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_155,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_163,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_154,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_153,__ZN16SX1276_LoRaRadio9start_cadEv__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_255,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_252,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_254,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_256,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_253,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_285,__ZN16SX1276_LoRaRadioD2Ev__async_cb_279,__ZN16SX1276_LoRaRadioD2Ev__async_cb_284,__ZN16SX1276_LoRaRadioD2Ev__async_cb_280,__ZN16SX1276_LoRaRadioD2Ev__async_cb_283,__ZN16SX1276_LoRaRadioD2Ev__async_cb_281
,__ZN16SX1276_LoRaRadioD2Ev__async_cb_282,__ZN16SX1276_LoRaRadioD2Ev__async_cb_291,__ZN16SX1276_LoRaRadioD2Ev__async_cb_290,__ZN16SX1276_LoRaRadioD2Ev__async_cb_289,__ZN16SX1276_LoRaRadioD2Ev__async_cb_288,__ZN16SX1276_LoRaRadioD2Ev__async_cb_287,__ZN16SX1276_LoRaRadioD2Ev__async_cb_286,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_487,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_440,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_436,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_437,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_438,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_439,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_65,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_64,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_66,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_63,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_61,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_62,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,_handle_lora_downlink__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_312
,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_311,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_310,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_251,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_247,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_209,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_196,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_197,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_198,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_199,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_403,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_391,__ZN4mbed7Timeout7handlerEv__async_cb_366,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue8dispatchEi__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb
,_equeue_cancel__async_cb,_equeue_dispatch__async_cb,_equeue_dispatch__async_cb_11,_equeue_dispatch__async_cb_9,_equeue_dispatch__async_cb_10,_equeue_dispatch__async_cb_12,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb_25,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_93,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_94,__ZN12LoRaWANStackC2Ev__async_cb,__ZN12LoRaWANStackC2Ev__async_cb_133,__ZN12LoRaWANStackC2Ev__async_cb_134,__ZN12LoRaWANStackC2Ev__async_cb_135,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_110,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_117,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_109,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_108,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_113,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_103,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_116,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_104,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_112,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_105,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_115,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_106,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_111
,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_107,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_114,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_448,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_447,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_451,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_444,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_453,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_445,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_450,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_446,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_452,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_449,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_409,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_416,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_413,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_408,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_412,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_407,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_411,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_404,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_415,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_405,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_410,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_406,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_414,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_324
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_333,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_332,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_331,__ZN12LoRaWANStack18lora_state_machineEv__async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_339,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_313,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_344,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_334,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_314,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_338,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_315,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_343,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_330,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_329,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_328,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_327,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_326,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_316,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_337,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_317,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_342,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_325,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_323,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_318,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_336,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_319,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_341,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_322,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_320,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_335
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_321,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_340,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_379,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_380,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_383,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_381,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_382,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_361,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_362,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_365,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_363,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_364,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_386,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_210,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_143,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_142,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_141,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_239
,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_241,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_238,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_237,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_236,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_240,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_235,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_234,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_242,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_101,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_100,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_102,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_455,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_456,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_457,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_458,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_459,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_422,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb_435,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb_425,__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb
,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_515,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_501,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_502,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_503,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_507,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_307,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_258,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN7LoRaMacD2Ev__async_cb_395,__ZN7LoRaMacD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_355,__ZN12radio_eventsD2Ev__async_cb_356,__ZN12radio_eventsD2Ev__async_cb_357,__ZN12radio_eventsD2Ev__async_cb_358,__ZN12radio_eventsD2Ev__async_cb_359,__ZN12radio_eventsD2Ev__async_cb_360,__ZN14lorawan_timersD2Ev__async_cb,__ZN14lorawan_timersD2Ev__async_cb_367,__ZN14lorawan_timersD2Ev__async_cb_368,__ZN14lorawan_timersD2Ev__async_cb_369,__ZN14lorawan_timersD2Ev__async_cb_370,__ZN7LoRaMac16on_radio_tx_doneEv,__ZN7LoRaMac14handle_tx_doneEv__async_cb,__ZN7LoRaMac14handle_tx_doneEv__async_cb_506,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_493
,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_498,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_492,__ZN7LoRaMac25on_rx_window2_timer_eventEv,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_499,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_500,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_497,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_496,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_495,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_494,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_207,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_206,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_200,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_227,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_229,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_226,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_228,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_214,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_215,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_41,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_54,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_60
,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_49,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_52,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_48,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_47,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_51,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_50,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_46,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_45,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_44,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_57,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_40,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_56,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_39,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_55,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_38,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_59,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_58,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_43,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_42,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_53,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_31,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_32,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_35,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_33,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_34,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb
,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_385,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_293,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_294,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_292,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_277,__ZN7LoRaMac17on_radio_rx_errorEv,__ZN7LoRaMac15handle_rx_errorEv__async_cb,__ZN7LoRaMac15handle_rx_errorEv__async_cb_257,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_272,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_274,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_276,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_273,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_275,__ZN7LoRaMac19on_radio_rx_timeoutEv,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_126,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_118,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_121,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_123,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_120,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_122,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_119,__ZN7LoRaMac19on_radio_tx_timeoutEv
,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_99,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_88,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_89,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_90,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_91,__ZN7LoRaMac30on_mac_state_check_timer_eventEv,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_486,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_476,__ZN7LoRaMac25on_tx_delayed_timer_eventEv,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_475,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_483,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_474,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_482,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_472,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_481,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_465,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_480,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_466,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_470,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_471,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_469,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_473,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_479,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_478,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_467,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_477
,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_468,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_461,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_464,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_462,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_463,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_460,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_426,__ZN7LoRaMac11schedule_txEv__async_cb_432,__ZN7LoRaMac11schedule_txEv__async_cb_427,__ZN7LoRaMac11schedule_txEv__async_cb_428,__ZN7LoRaMac11schedule_txEv__async_cb_429,__ZN7LoRaMac11schedule_txEv__async_cb_431,__ZN7LoRaMac11schedule_txEv__async_cb_434,__ZN7LoRaMac11schedule_txEv__async_cb_430,__ZN7LoRaMac11schedule_txEv__async_cb_433,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_420,__ZN7LoRaMac21send_frame_on_channelEh__async_cb,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_421,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_514,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_512,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_513,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_511,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_505,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv
,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_490,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_491,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_347,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_350,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_349,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_346,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_348,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_308,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_309,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_304,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_305,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_306,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_303,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_302,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_295,__ZN7LoRaMac22handle_rx1_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_301,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_296,__ZN7LoRaMac22handle_rx2_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_300,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_297,__ZN7LoRaMac18handle_ack_timeoutEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_299,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_298,__ZN7LoRaMac10disconnectEv__async_cb_263
,__ZN7LoRaMac10disconnectEv__async_cb_262,__ZN7LoRaMac10disconnectEv__async_cb_261,__ZN7LoRaMac10disconnectEv__async_cb_260,__ZN7LoRaMac10disconnectEv__async_cb_259,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_396,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_219,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_220,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_225,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_224,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_222,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_223,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_221,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_245,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_246,__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_136,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_137,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_138,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_139,__ZN7LoRaMac14handle_tx_doneEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_166
,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_167,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_168,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_169,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_170,__ZN7LoRaMac15handle_rx_errorEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_171,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_172,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_173,__ZN7LoRaMac17handle_tx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_174,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_175,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_176,__ZN7LoRaMac17handle_rx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_177,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_178,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_179,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_132,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_4,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_387,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_388,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_389,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_390,__Z11compute_micPKhtS0_jhjPj__async_cb_267,__Z11compute_micPKhtS0_jhjPj__async_cb_266,__Z11compute_micPKhtS0_jhjPj__async_cb_264,__Z11compute_micPKhtS0_jhjPj__async_cb
,__Z11compute_micPKhtS0_jhjPj__async_cb_265,__Z11compute_micPKhtS0_jhjPj__async_cb_268,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_353,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_352,__Z22compute_join_frame_micPKhtS0_Pj__async_cb,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_351,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_354,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_131,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_130,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_128,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_129,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_127,__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_423,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_454,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_371,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_372,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_373,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_374,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_375,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_376,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_377,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_378,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_397,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_398
,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_399,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_400,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_401,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_402,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb,__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_217,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_218,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_96,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_97,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_29,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_30,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_67,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_68,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_1,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_2,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_3,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_5,__ZN7LoRaPHY13get_radio_rngEv__async_cb_6,__ZN7LoRaPHY11handle_sendEPhh__async_cb_28,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_26,__ZN7LoRaPHY11handle_sendEPhh__async_cb_27
,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_95,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_75,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_77,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_76,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_78,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_443,_mbedtls_ccm_setkey__async_cb_442,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_278,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_271,_mbedtls_cipher_update__async_cb_269,_mbedtls_cipher_update__async_cb_270,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_485,_mbedtls_cipher_cmac_update__async_cb_484,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_488
,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_510,_mbedtls_gcm_setkey__async_cb_509,_mbedtls_gcm_setkey__async_cb_508,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_69,_initialize__async_cb_74,_initialize__async_cb_73,_initialize__async_cb_70,_initialize__async_cb_71,_initialize__async_cb_72,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_82,_schedule_interrupt__async_cb_83,_schedule_interrupt__async_cb_84,_schedule_interrupt__async_cb_85,_schedule_interrupt__async_cb_86,_schedule_interrupt__async_cb_87,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_124,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_194,_mbed_die__async_cb_193,_mbed_die__async_cb_192,_mbed_die__async_cb_191
,_mbed_die__async_cb_190,_mbed_die__async_cb_189,_mbed_die__async_cb_188,_mbed_die__async_cb_187,_mbed_die__async_cb_186,_mbed_die__async_cb_185,_mbed_die__async_cb_184,_mbed_die__async_cb_183,_mbed_die__async_cb_182,_mbed_die__async_cb_181,_mbed_die__async_cb_180,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_printf__async_cb_98,_handle_interrupt_in__async_cb,_serial_putc__async_cb_345,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_424,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_441,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_489,_invoke_ticker__async_cb,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,__GLOBAL__sub_I_main_cpp__async_cb_125,_main__async_cb_150,_main__async_cb_149
,_main__async_cb_152,_main__async_cb,__ZL18lora_event_handler11lora_events,_main__async_cb_144,_main__async_cb_145,_main__async_cb_146,_main__async_cb_148,_main__async_cb_147,_main__async_cb_151,__ZL12send_messagev__async_cb_140,__ZL12send_messagev__async_cb,__ZL18lora_event_handler11lora_events__async_cb_205,__ZL18lora_event_handler11lora_events__async_cb_204,__ZL18lora_event_handler11lora_events__async_cb_203,__ZL18lora_event_handler11lora_events__async_cb_202,__ZL18lora_event_handler11lora_events__async_cb,__ZL18lora_event_handler11lora_events__async_cb_201,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb,_putc__async_cb_8,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_249,_fflush__async_cb_248,_fflush__async_cb_250,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_216,_vfprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb
,_vsprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_92,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_195,_abort_message__async_cb,_abort_message__async_cb_384,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_212,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_504,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_516,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_213,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_233,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_232,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_231,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_230,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_244,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb
,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79
,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109
,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139
,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169
,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199
,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229
,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259
,b260,b261,b262,b263,b264];
var FUNCTION_TABLE_vii = [b266,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv,__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_,__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t,__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t,b267,b268,b269
,b270,b271,b272];
var FUNCTION_TABLE_viii = [b274,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b275,b276,b277];
var FUNCTION_TABLE_viiii = [b279,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b280,b281,b282];
var FUNCTION_TABLE_viiiii = [b284,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN7LoRaMac16on_radio_rx_doneEPhtsa,__ZN7LoRaMac14handle_rx_doneEPhtsa];
var FUNCTION_TABLE_viiiiii = [b286,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b288,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b290,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan.js.map